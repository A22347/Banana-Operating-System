
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 4d fa 00 00       	call   c000fa6d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 8a 02 00       	call   c0028a78 <_init>
c0000025:	c3                   	ret    
c0000026:	bb cc 96 02 c0       	mov    ebx,0xc00296cc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d8 96 02 c0    	cmp    ebx,0xc00296d8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 db 02 c0       	mov    eax,0xc002dbf8
c0000049:	3d f8 db 02 c0       	cmp    eax,0xc002dbf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 db 02 c0       	push   0xc002dbf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 db 02 c0       	mov    eax,0xc002dbf8
c0000075:	2d f8 db 02 c0       	sub    eax,0xc002dbf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 db 02 c0       	push   0xc002dbf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e228,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e0 96 02 c0       	mov    ebx,0xc00296e0
c00000bb:	81 eb dc 96 02 c0    	sub    ebx,0xc00296dc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be dc 96 02 c0       	mov    esi,0xc00296dc
c00000ca:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e2 02 c0       	mov    ds:0xc002e22c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 db 02 c0       	push   0xc002dbf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e228,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e2 02 c0       	push   0xc002e230
c000012c:	68 f8 db 02 c0       	push   0xc002dbf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 57 d4 01 00       	call   c001d7fa <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 ba 23 01 00       	call   c0012775 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 35 d4 01 00       	call   c001d7fa <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 dd d8 01 00       	call   c001dcc1 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 02 df 01 00       	call   c001e2ef <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 e6 02 c0 	lgdtd  ds:0xc002e670
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 23 41 01 00       	call   c0014705 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 97 02 c0 02 	test   BYTE PTR [edx-0x3ffd6900],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 97 02 c0 01 	test   BYTE PTR [edx-0x3ffd6900],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 97 02 c0 08 	test   BYTE PTR [edx-0x3ffd6900],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 97 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6900],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 97 02 c0 01 	test   BYTE PTR [edx-0x3ffd6900],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e260
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1d9c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d9c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e29c
c0000e38:	c7 42 0c 94 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e294
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 e2 02 c0 02 	test   BYTE PTR ds:0xc002e260,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 ab e7 00 00       	call   c000f6c4 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 ed e6 00 00       	call   c000f6c4 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 d7 e6 00 00       	call   c000f6c4 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 b3 e6 00 00       	call   c000f6c4 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d9c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d9c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 e2 02 c0 	lea    edx,[eax*8-0x3ffd1d6c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a0
c00011ba:	81 fb 94 e2 02 c0    	cmp    ebx,0xc002e294
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 e2 02 c0       	cmp    eax,0xc002e294
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 e2 02 c0    	cmp    DWORD PTR ds:0xc002e290,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c e2 02 c0       	mov    ds:0xc002e29c,eax
c00011f6:	a3 a0 e2 02 c0       	mov    ds:0xc002e2a0,eax
c00011fb:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e294
c0001209:	c7 40 0c 94 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e294
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 e2 02 c0       	mov    ds:0xc002e2a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e294
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1da8]
c000125a:	8b 14 95 60 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1da0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1da0]
c0001275:	8b 14 95 60 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1da0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1a6c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 e2 02 c0 	lea    eax,[eax*8-0x3ffd1d6c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,ecx
c000132f:	89 0d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,ecx
c0001335:	c7 41 08 94 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e294
c000133c:	c7 41 0c 94 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e294
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1d74]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a6c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a6c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c e2 02 c0 	lea    edx,[eax*4-0x3ffd1d74]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1a6c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,edi
c0001402:	89 3d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,edi
c0001408:	c7 47 08 94 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e294
c000140f:	c7 47 0c 94 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e294
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 e2 02 c0    	mov    DWORD PTR ds:0xc002e290,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c e2 02 c0       	mov    eax,ds:0xc002e28c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 e2 02 c0       	mov    edx,0xc002e260
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc e5 02 c0    	push   DWORD PTR ds:0xc002e5bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc e5 02 c0       	mov    eax,ds:0xc002e5bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e28c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c e2 02 c0       	mov    eax,ds:0xc002e28c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d9c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 e2 02 c0       	mov    eax,0xc002e294
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c e5 02 c0       	cmp    eax,0xc002e58c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 98 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd67fc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 e2 02 c0       	mov    ds:0xc002e260,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac e5 02 c0    	mov    DWORD PTR ds:0xc002e5ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0300]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 f4 f1 01 00       	jmp    c0020de6 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0300]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 25 f2 01 00       	jmp    c0020e2d <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0300]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 4d f2 01 00       	jmp    c0020e74 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ca 4e 02 00       	call   c0026dd4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 99 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd66e0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 99 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd66e0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 98 02 c0       	mov    edx,0xc0029820
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 99 02 c0       	mov    edx,0xc0029940
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba f4 ca 02 c0       	mov    edx,0xc002caf4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 99 02 c0       	mov    edx,0xc002994c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 99 02 c0       	mov    edx,0xc0029930
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a00]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 e5 02 c0    	mov    ax,ds:0xc002e5e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 e5 02 c0    	mov    ds:0xc002e5e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 c7 3c 02 00       	call   c0026dd4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 99 02 c0       	mov    eax,0xc0029952
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 98 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6760]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 99 02 c0       	mov    eax,0xc002995b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 99 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd66e0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 92 26 02 00       	call   c0026dd4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 99 02 c0       	mov    edx,0xc0029930
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 98 02 c0       	mov    edx,0xc0029820
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 98 02 c0       	mov    edx,0xc0029830
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a00]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a00],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 59 10 02 00       	call   c0026dd4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 3f 10 02 00       	call   c0026dd4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 98 02 c0       	mov    eax,0xc0029877
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 98 02 c0       	mov    eax,0xc0029870
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 d8 fb 01 00       	call   c0026dd4 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 00 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a00]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 60 98 02 c0       	mov    esi,0xc0029860
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 4c f5 01 00       	call   c0026dd4 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 40 99 02 c0       	mov    edx,0xc0029940
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 40 98 02 c0       	mov    edx,0xc0029840
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 50 98 02 c0       	mov    edx,0xc0029850
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 62 99 02 c0       	mov    edx,0xc0029962
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 6e 99 02 c0       	mov    edx,0xc002996e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 82 99 02 c0       	mov    edx,0xc0029982
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 08 73 00 00       	call   c000f9a7 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 02 73 00 00       	call   c000f9b7 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c a0 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029ca0
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 a0 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ca0
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 a0 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6660]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 47 70 00 00       	call   c000f9b7 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 31 70 00 00       	call   c000f9b7 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 a0 fe 01 00       	call   c00288a7 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 63 fe 01 00       	call   c0028889 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 37 fe 01 00       	call   c00288a7 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 ea f4 01 00       	call   c0027fac <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 6c ff 01 00       	call   c0028a40 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 b1 fd 01 00       	call   c00288a7 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 f3 fc 01 00       	call   c00288a7 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 c0 fc 01 00       	call   c0028889 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 ad fb 01 00       	call   c00288a7 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 75 fb 01 00       	call   c0028889 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 10 6c 00 00       	call   c000f9d7 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 ab 6b 00 00       	call   c000f9b7 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 81 f9 01 00       	call   c00288a7 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 46 f9 01 00       	call   c0028889 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 00 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e00]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 56 f6 01 00       	call   c002863b <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 d4 ef 01 00       	call   c0027fd8 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 90 f8 01 00       	call   c00288ab <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 7e f9 01 00       	call   c00289cf <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 68 ef 01 00       	call   c0027fd8 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 13 f8 01 00       	call   c00288a5 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 f4 f7 01 00       	call   c00288a9 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 8a f9 01 00       	call   c0028a60 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 34 f5 01 00       	call   c002863b <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 b2 ee 01 00       	call   c0027fd8 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 6e f7 01 00       	call   c00288ab <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 5c f8 01 00       	call   c00289cf <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 46 ee 01 00       	call   c0027fd8 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 f1 f6 01 00       	call   c00288a5 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 d1 f6 01 00       	call   c00288a9 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 66 f8 01 00       	call   c0028a60 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 0c f6 01 00       	call   c00288a7 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 ca f5 01 00       	call   c0028889 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 b2 f5 01 00       	call   c00288a7 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 24 f3 01 00       	call   c002863b <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 26 e6 01 00       	call   c002795b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 89 ec 01 00       	call   c0027fd8 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 db f2 01 00       	call   c002863b <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 e1 e5 01 00       	call   c002795b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 b0 f2 01 00       	call   c002863b <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 00 f5 01 00       	call   c00288a5 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 dd eb 01 00       	call   c0027fac <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 5f f6 01 00       	call   c0028a40 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 86 f4 01 00       	call   c0028889 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 81 eb 01 00       	call   c0027fac <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 ff f1 01 00       	call   c002863b <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 82 eb 01 00       	call   c0027fd8 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 d4 f1 01 00       	call   c002863b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 3b ee 01 00       	call   c00282bc <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 ba e4 01 00       	call   c002795b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 1a de 01 00       	call   c00272f0 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 f1 f4 01 00       	call   c00289cf <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 da ea 01 00       	call   c0027fd8 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 c1 f4 01 00       	call   c00289cf <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 33 e4 01 00       	call   c002795b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 6c f3 01 00       	call   c00288ab <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 54 ed 01 00       	call   c00282bc <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 da e3 01 00       	call   c002795b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 c8 f4 01 00       	call   c0028a60 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 9a f0 01 00       	call   c002863b <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 f1 e9 01 00       	call   c0027fac <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 d0 f2 01 00       	call   c00288a7 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 69 e3 01 00       	call   c002795b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 95 e9 01 00       	call   c0027fac <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 37 f4 01 00       	call   c0028a60 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 e8 ef 01 00       	call   c002863b <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 65 e9 01 00       	call   c0027fd8 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 b8 ef 01 00       	call   c002863b <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 be e2 01 00       	call   c002795b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 8e ef 01 00       	call   c002863b <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 e0 f1 01 00       	call   c00288a7 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 b7 e8 01 00       	call   c0027fac <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 39 f3 01 00       	call   c0028a40 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 60 f1 01 00       	call   c0028889 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 5a e8 01 00       	call   c0027fac <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 d8 ee 01 00       	call   c002863b <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 5b e8 01 00       	call   c0027fd8 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 ad ee 01 00       	call   c002863b <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 14 eb 01 00       	call   c00282bc <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 93 e1 01 00       	call   c002795b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 e3 da 01 00       	call   c00272f0 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 ba f1 01 00       	call   c00289cf <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 a3 e7 01 00       	call   c0027fd8 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 8a f1 01 00       	call   c00289cf <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 fc e0 01 00       	call   c002795b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 35 f0 01 00       	call   c00288ab <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 1c ea 01 00       	call   c00282bc <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 9b e0 01 00       	call   c002795b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 89 f1 01 00       	call   c0028a60 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 5b ed 01 00       	call   c002863b <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 b2 e6 01 00       	call   c0027fac <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 91 ef 01 00       	call   c00288a7 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 2a e0 01 00       	call   c002795b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 56 e6 01 00       	call   c0027fac <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 cb ec 01 00       	call   c002863b <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 d1 df 01 00       	call   c002795b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 60 a2 02 c0       	mov    eax,0xc002a260
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 74 a2 02 c0       	mov    eax,0xc002a274
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 44 5f 00 00       	call   c000f9b7 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 46 5f 00 00       	call   c000f9d7 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 46 eb 01 00       	call   c002863b <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 c4 e4 01 00       	call   c0027fd8 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 56 d7 01 00       	call   c00272f0 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 2d ee 01 00       	call   c00289cf <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 16 e4 01 00       	call   c0027fd8 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 f9 ed 01 00       	call   c00289cf <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 6b dd 01 00       	call   c002795b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 cb ed 01 00       	call   c00289cf <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 ba e3 01 00       	call   c0027fd8 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 23 dd 01 00       	call   c002795b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 44 d6 01 00       	call   c00272f0 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 1b ed 01 00       	call   c00289cf <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 04 e3 01 00       	call   c0027fd8 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 e7 ec 01 00       	call   c00289cf <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 59 dc 01 00       	call   c002795b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 b9 ec 01 00       	call   c00289cf <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 a8 e2 01 00       	call   c0027fd8 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 11 dc 01 00       	call   c002795b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 ef db 01 00       	call   c002795b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 cb d4 01 00       	call   c00272f0 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 a2 eb 01 00       	call   c00289cf <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 8b e1 01 00       	call   c0027fd8 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 6e eb 01 00       	call   c00289cf <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 e0 da 01 00       	call   c002795b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 40 eb 01 00       	call   c00289cf <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 29 e1 01 00       	call   c0027fd8 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 92 da 01 00       	call   c002795b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 f2 ea 01 00       	call   c00289cf <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 db e0 01 00       	call   c0027fd8 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 44 da 01 00       	call   c002795b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 59 d3 01 00       	call   c00272f0 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 30 ea 01 00       	call   c00289cf <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 19 e0 01 00       	call   c0027fd8 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 00 ea 01 00       	call   c00289cf <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 72 d9 01 00       	call   c002795b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 d2 e9 01 00       	call   c00289cf <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 bb df 01 00       	call   c0027fd8 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 24 d9 01 00       	call   c002795b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 84 e9 01 00       	call   c00289cf <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 6d df 01 00       	call   c0027fd8 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 d6 d8 01 00       	call   c002795b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 aa d8 01 00       	call   c002795b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 07 df 01 00       	call   c0027fd8 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 c3 e7 01 00       	call   c00288ab <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 52 d8 01 00       	call   c002795b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 af de 01 00       	call   c0027fd8 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 6b e7 01 00       	call   c00288ab <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 e5 d0 01 00       	call   c00272f0 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 bc e7 01 00       	call   c00289cf <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 a5 dd 01 00       	call   c0027fd8 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 88 e7 01 00       	call   c00289cf <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 fa d6 01 00       	call   c002795b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 5a e7 01 00       	call   c00289cf <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 43 dd 01 00       	call   c0027fd8 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 ac d6 01 00       	call   c002795b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 0c e7 01 00       	call   c00289cf <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 f5 dc 01 00       	call   c0027fd8 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 5e d6 01 00       	call   c002795b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 be e6 01 00       	call   c00289cf <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 a7 dc 01 00       	call   c0027fd8 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 10 d6 01 00       	call   c002795b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 70 e6 01 00       	call   c00289cf <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 59 dc 01 00       	call   c0027fd8 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 c2 d5 01 00       	call   c002795b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 c4 ce 01 00       	call   c00272f0 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 9b e5 01 00       	call   c00289cf <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 84 db 01 00       	call   c0027fd8 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 6b e5 01 00       	call   c00289cf <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 dd d4 01 00       	call   c002795b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 3d e5 01 00       	call   c00289cf <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 26 db 01 00       	call   c0027fd8 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 8f d4 01 00       	call   c002795b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 ef e4 01 00       	call   c00289cf <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 d8 da 01 00       	call   c0027fd8 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 41 d4 01 00       	call   c002795b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 a1 e4 01 00       	call   c00289cf <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 8a da 01 00       	call   c0027fd8 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 f3 d3 01 00       	call   c002795b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 53 e4 01 00       	call   c00289cf <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 3c da 01 00       	call   c0027fd8 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 a5 d3 01 00       	call   c002795b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 79 d3 01 00       	call   c002795b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 d6 d9 01 00       	call   c0027fd8 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 92 e2 01 00       	call   c00288ab <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 21 d3 01 00       	call   c002795b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 7e d9 01 00       	call   c0027fd8 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 3a e2 01 00       	call   c00288ab <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 c8 d2 01 00       	call   c002795b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 25 d9 01 00       	call   c0027fd8 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 e1 e1 01 00       	call   c00288ab <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 6f d2 01 00       	call   c002795b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 cc d8 01 00       	call   c0027fd8 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 88 e1 01 00       	call   c00288ab <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 e6 ca 01 00       	call   c00272f0 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 bd e1 01 00       	call   c00289cf <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 a6 d7 01 00       	call   c0027fd8 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 89 e1 01 00       	call   c00289cf <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 fb d0 01 00       	call   c002795b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 5b e1 01 00       	call   c00289cf <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 44 d7 01 00       	call   c0027fd8 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 ad d0 01 00       	call   c002795b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 0d e1 01 00       	call   c00289cf <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 f6 d6 01 00       	call   c0027fd8 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 5f d0 01 00       	call   c002795b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 bf e0 01 00       	call   c00289cf <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 a8 d6 01 00       	call   c0027fd8 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 11 d0 01 00       	call   c002795b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 71 e0 01 00       	call   c00289cf <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 5a d6 01 00       	call   c0027fd8 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 c3 cf 01 00       	call   c002795b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 23 e0 01 00       	call   c00289cf <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 0c d6 01 00       	call   c0027fd8 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 72 cf 01 00       	call   c002795b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 d2 df 01 00       	call   c00289cf <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 bb d5 01 00       	call   c0027fd8 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 24 cf 01 00       	call   c002795b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 1e c8 01 00       	call   c00272f0 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 f5 de 01 00       	call   c00289cf <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 de d4 01 00       	call   c0027fd8 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 be de 01 00       	call   c00289cf <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 30 ce 01 00       	call   c002795b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 90 de 01 00       	call   c00289cf <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 79 d4 01 00       	call   c0027fd8 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 e2 cd 01 00       	call   c002795b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 42 de 01 00       	call   c00289cf <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 2b d4 01 00       	call   c0027fd8 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 94 cd 01 00       	call   c002795b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 f4 dd 01 00       	call   c00289cf <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 dd d3 01 00       	call   c0027fd8 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 46 cd 01 00       	call   c002795b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 a6 dd 01 00       	call   c00289cf <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 8f d3 01 00       	call   c0027fd8 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 f8 cc 01 00       	call   c002795b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 58 dd 01 00       	call   c00289cf <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 41 d3 01 00       	call   c0027fd8 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 a7 cc 01 00       	call   c002795b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 07 dd 01 00       	call   c00289cf <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 f0 d2 01 00       	call   c0027fd8 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 5f cc 01 00       	call   c002795b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 38 cc 01 00       	call   c002795b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 96 d2 01 00       	call   c0027fd8 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 52 db 01 00       	call   c00288ab <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 e1 cb 01 00       	call   c002795b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 3f d2 01 00       	call   c0027fd8 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 fb da 01 00       	call   c00288ab <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 89 cb 01 00       	call   c002795b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 e7 d1 01 00       	call   c0027fd8 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 a3 da 01 00       	call   c00288ab <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 31 cb 01 00       	call   c002795b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 8f d1 01 00       	call   c0027fd8 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 4b da 01 00       	call   c00288ab <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 d9 ca 01 00       	call   c002795b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 37 d1 01 00       	call   c0027fd8 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 f3 d9 01 00       	call   c00288ab <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 87 ca 01 00       	call   c002795b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 e5 d0 01 00       	call   c0027fd8 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 a1 d9 01 00       	call   c00288ab <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 b5 c2 01 00       	call   c00272f0 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 8c d9 01 00       	call   c00289cf <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 75 cf 01 00       	call   c0027fd8 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 5c d9 01 00       	call   c00289cf <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 ce c8 01 00       	call   c002795b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 a4 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d5c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 02 d9 01 00       	call   c00289cf <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 eb ce 01 00       	call   c0027fd8 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 56 c8 01 00       	call   c002795b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 a3 d8 01 00       	call   c00289cf <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 8c ce 01 00       	call   c0027fd8 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 f7 c7 01 00       	call   c002795b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 44 d8 01 00       	call   c00289cf <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 2d ce 01 00       	call   c0027fd8 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 98 c7 01 00       	call   c002795b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 e5 d7 01 00       	call   c00289cf <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 ce cd 01 00       	call   c0027fd8 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 39 c7 01 00       	call   c002795b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 86 d7 01 00       	call   c00289cf <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 6f cd 01 00       	call   c0027fd8 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 da c6 01 00       	call   c002795b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 27 d7 01 00       	call   c00289cf <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 10 cd 01 00       	call   c0027fd8 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 7b c6 01 00       	call   c002795b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 c8 d6 01 00       	call   c00289cf <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 b1 cc 01 00       	call   c0027fd8 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 1c c6 01 00       	call   c002795b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 69 d6 01 00       	call   c00289cf <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 52 cc 01 00       	call   c0027fd8 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 bd c5 01 00       	call   c002795b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 c7 be 01 00       	call   c00272f0 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 9e d5 01 00       	call   c00289cf <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 87 cb 01 00       	call   c0027fd8 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 6e d5 01 00       	call   c00289cf <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 e0 c4 01 00       	call   c002795b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 c0 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d40]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 13 d5 01 00       	call   c00289cf <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 fc ca 01 00       	call   c0027fd8 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 67 c4 01 00       	call   c002795b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 b3 d4 01 00       	call   c00289cf <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 9c ca 01 00       	call   c0027fd8 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 07 c4 01 00       	call   c002795b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 53 d4 01 00       	call   c00289cf <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 3c ca 01 00       	call   c0027fd8 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 a7 c3 01 00       	call   c002795b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 f3 d3 01 00       	call   c00289cf <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 dc c9 01 00       	call   c0027fd8 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 47 c3 01 00       	call   c002795b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 93 d3 01 00       	call   c00289cf <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 7c c9 01 00       	call   c0027fd8 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 e7 c2 01 00       	call   c002795b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 33 d3 01 00       	call   c00289cf <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 1c c9 01 00       	call   c0027fd8 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 87 c2 01 00       	call   c002795b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 d3 d2 01 00       	call   c00289cf <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 bc c8 01 00       	call   c0027fd8 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 27 c2 01 00       	call   c002795b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 73 d2 01 00       	call   c00289cf <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 5c c8 01 00       	call   c0027fd8 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 c7 c1 01 00       	call   c002795b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 dc a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d24]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 6c c1 01 00       	call   c002795b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 c9 c7 01 00       	call   c0027fd8 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 85 d0 01 00       	call   c00288ab <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 0f c1 01 00       	call   c002795b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 6c c7 01 00       	call   c0027fd8 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 28 d0 01 00       	call   c00288ab <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 b2 c0 01 00       	call   c002795b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 0f c7 01 00       	call   c0027fd8 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 cb cf 01 00       	call   c00288ab <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 55 c0 01 00       	call   c002795b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 b2 c6 01 00       	call   c0027fd8 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 6e cf 01 00       	call   c00288ab <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 f8 bf 01 00       	call   c002795b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 55 c6 01 00       	call   c0027fd8 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 11 cf 01 00       	call   c00288ab <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 9b bf 01 00       	call   c002795b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 f8 c5 01 00       	call   c0027fd8 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 b4 ce 01 00       	call   c00288ab <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 3e bf 01 00       	call   c002795b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 9b c5 01 00       	call   c0027fd8 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 57 ce 01 00       	call   c00288ab <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 e1 be 01 00       	call   c002795b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 3e c5 01 00       	call   c0027fd8 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 fa cd 01 00       	call   c00288ab <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 f6 c4 01 00       	call   c0027fd8 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 6e cf 01 00       	jmp    c0028a60 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 d8 cb 01 00       	call   c00288a7 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 96 cb 01 00       	call   c0028889 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 2d c9 01 00       	call   c002863b <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 2e bc 01 00       	call   c002795b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 fd c8 01 00       	call   c002863b <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 64 c5 01 00       	call   c00282bc <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 03 cb 01 00       	call   c0028889 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 06 cb 01 00       	call   c00288a7 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 d9 ca 01 00       	call   c00288a7 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 d2 c4 01 00       	call   c00282bc <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 5c cc 01 00       	call   c0028a60 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 37 cc 01 00       	call   c0028a60 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 09 c8 01 00       	call   c002863b <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 60 c1 01 00       	call   c0027fac <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 3f ca 01 00       	call   c00288a7 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 d8 ba 01 00       	call   c002795b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 fc c0 01 00       	call   c0027fac <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 9e cb 01 00       	call   c0028a60 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 d6 c3 01 00       	call   c00282bc <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 53 ba 01 00       	call   c002795b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 7f c6 01 00       	call   c002863b <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 7f b9 01 00       	call   c002795b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 5f b9 01 00       	call   c002795b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 2f c6 01 00       	call   c002863b <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 7f c8 01 00       	call   c00288a5 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 5e bf 01 00       	call   c0027fac <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 e0 c9 01 00       	call   c0028a40 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 07 c8 01 00       	call   c0028889 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 05 bf 01 00       	call   c0027fac <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 83 c5 01 00       	call   c002863b <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 06 bf 01 00       	call   c0027fd8 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 58 c5 01 00       	call   c002863b <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 bf c1 01 00       	call   c00282bc <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 3e b8 01 00       	call   c002795b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 08 c5 01 00       	call   c002863b <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 54 c7 01 00       	call   c00288a7 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 49 be 01 00       	call   c0027fd8 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 1b be 01 00       	call   c0027fd8 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 54 c4 01 00       	call   c002863b <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 b8 c0 01 00       	call   c00282bc <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 80 c0 01 00       	call   c00282bc <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 ff b6 01 00       	call   c002795b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 ec c7 01 00       	call   c0028a60 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 be c3 01 00       	call   c002863b <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 15 bd 01 00       	call   c0027fac <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 f4 c5 01 00       	call   c00288a7 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 8c b6 01 00       	call   c002795b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 b0 bc 01 00       	call   c0027fac <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 52 c7 01 00       	call   c0028a60 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 13 c5 01 00       	call   c00288a7 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 d1 c4 01 00       	call   c0028889 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 68 c2 01 00       	call   c002863b <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 69 b5 01 00       	call   c002795b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 38 c2 01 00       	call   c002863b <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 9f be 01 00       	call   c00282bc <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 3e c4 01 00       	call   c0028889 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 41 c4 01 00       	call   c00288a7 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 14 c4 01 00       	call   c00288a7 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 0d be 01 00       	call   c00282bc <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 97 c5 01 00       	call   c0028a60 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 72 c5 01 00       	call   c0028a60 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 44 c1 01 00       	call   c002863b <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 9b ba 01 00       	call   c0027fac <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 7a c3 01 00       	call   c00288a7 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 13 b4 01 00       	call   c002795b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 37 ba 01 00       	call   c0027fac <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 d9 c4 01 00       	call   c0028a60 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 11 bd 01 00       	call   c00282bc <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 8e b3 01 00       	call   c002795b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 b9 bf 01 00       	call   c002863b <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 b9 b2 01 00       	call   c002795b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 99 b2 01 00       	call   c002795b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 69 bf 01 00       	call   c002863b <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 b9 c1 01 00       	call   c00288a5 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 97 b8 01 00       	call   c0027fac <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 19 c3 01 00       	call   c0028a40 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 40 c1 01 00       	call   c0028889 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 3d b8 01 00       	call   c0027fac <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 bb be 01 00       	call   c002863b <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 3e b8 01 00       	call   c0027fd8 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 90 be 01 00       	call   c002863b <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 f7 ba 01 00       	call   c00282bc <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 76 b1 01 00       	call   c002795b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 40 be 01 00       	call   c002863b <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 8c c0 01 00       	call   c00288a7 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 81 b7 01 00       	call   c0027fd8 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 53 b7 01 00       	call   c0027fd8 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 8a bd 01 00       	call   c002863b <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 ee b9 01 00       	call   c00282bc <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 bb b9 01 00       	call   c00282bc <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 3a b0 01 00       	call   c002795b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 27 c1 01 00       	call   c0028a60 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 f9 bc 01 00       	call   c002863b <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 50 b6 01 00       	call   c0027fac <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 2f bf 01 00       	call   c00288a7 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 c7 af 01 00       	call   c002795b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 eb b5 01 00       	call   c0027fac <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 8d c0 01 00       	call   c0028a60 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 4e be 01 00       	call   c00288a7 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 0c be 01 00       	call   c0028889 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 a3 bb 01 00       	call   c002863b <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 a4 ae 01 00       	call   c002795b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 73 bb 01 00       	call   c002863b <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 da b7 01 00       	call   c00282bc <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 79 bd 01 00       	call   c0028889 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 7c bd 01 00       	call   c00288a7 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 4f bd 01 00       	call   c00288a7 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 48 b7 01 00       	call   c00282bc <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 d2 be 01 00       	call   c0028a60 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 ad be 01 00       	call   c0028a60 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 7f ba 01 00       	call   c002863b <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 d6 b3 01 00       	call   c0027fac <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 b5 bc 01 00       	call   c00288a7 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 4e ad 01 00       	call   c002795b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 72 b3 01 00       	call   c0027fac <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 14 be 01 00       	call   c0028a60 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 4c b6 01 00       	call   c00282bc <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 c9 ac 01 00       	call   c002795b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 f4 b8 01 00       	call   c002863b <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 f4 ab 01 00       	call   c002795b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 d4 ab 01 00       	call   c002795b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 a4 b8 01 00       	call   c002863b <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 f4 ba 01 00       	call   c00288a5 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 d2 b1 01 00       	call   c0027fac <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 54 bc 01 00       	call   c0028a40 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 7b ba 01 00       	call   c0028889 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 78 b1 01 00       	call   c0027fac <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 f6 b7 01 00       	call   c002863b <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 79 b1 01 00       	call   c0027fd8 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 cb b7 01 00       	call   c002863b <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 32 b4 01 00       	call   c00282bc <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 b1 aa 01 00       	call   c002795b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 7b b7 01 00       	call   c002863b <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 c7 b9 01 00       	call   c00288a7 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 bc b0 01 00       	call   c0027fd8 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 8e b0 01 00       	call   c0027fd8 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 c5 b6 01 00       	call   c002863b <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 29 b3 01 00       	call   c00282bc <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 f6 b2 01 00       	call   c00282bc <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 75 a9 01 00       	call   c002795b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 62 ba 01 00       	call   c0028a60 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 34 b6 01 00       	call   c002863b <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 8b af 01 00       	call   c0027fac <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 6a b8 01 00       	call   c00288a7 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 02 a9 01 00       	call   c002795b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 26 af 01 00       	call   c0027fac <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 c8 b9 01 00       	call   c0028a60 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 89 b7 01 00       	call   c00288a7 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 47 b7 01 00       	call   c0028889 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 de b4 01 00       	call   c002863b <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 df a7 01 00       	call   c002795b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 ae b4 01 00       	call   c002863b <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 15 b1 01 00       	call   c00282bc <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 b4 b6 01 00       	call   c0028889 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 b7 b6 01 00       	call   c00288a7 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 8a b6 01 00       	call   c00288a7 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 83 b0 01 00       	call   c00282bc <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 0d b8 01 00       	call   c0028a60 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 e8 b7 01 00       	call   c0028a60 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 ba b3 01 00       	call   c002863b <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 11 ad 01 00       	call   c0027fac <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 f0 b5 01 00       	call   c00288a7 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 89 a6 01 00       	call   c002795b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 ad ac 01 00       	call   c0027fac <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 4f b7 01 00       	call   c0028a60 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 87 af 01 00       	call   c00282bc <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 04 a6 01 00       	call   c002795b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 2f b2 01 00       	call   c002863b <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 2f a5 01 00       	call   c002795b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 0f a5 01 00       	call   c002795b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 df b1 01 00       	call   c002863b <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 2f b4 01 00       	call   c00288a5 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 0d ab 01 00       	call   c0027fac <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 8f b5 01 00       	call   c0028a40 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 b6 b3 01 00       	call   c0028889 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 b3 aa 01 00       	call   c0027fac <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 31 b1 01 00       	call   c002863b <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 b4 aa 01 00       	call   c0027fd8 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 06 b1 01 00       	call   c002863b <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 6d ad 01 00       	call   c00282bc <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 ec a3 01 00       	call   c002795b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 b6 b0 01 00       	call   c002863b <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 02 b3 01 00       	call   c00288a7 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 f7 a9 01 00       	call   c0027fd8 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 c9 a9 01 00       	call   c0027fd8 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 00 b0 01 00       	call   c002863b <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 64 ac 01 00       	call   c00282bc <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 31 ac 01 00       	call   c00282bc <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 b0 a2 01 00       	call   c002795b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 9d b3 01 00       	call   c0028a60 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 6f af 01 00       	call   c002863b <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 c6 a8 01 00       	call   c0027fac <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 a5 b1 01 00       	call   c00288a7 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 3d a2 01 00       	call   c002795b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 61 a8 01 00       	call   c0027fac <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 03 b3 01 00       	call   c0028a60 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 c1 b0 01 00       	call   c00288a7 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 7f b0 01 00       	call   c0028889 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 16 ae 01 00       	call   c002863b <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 17 a1 01 00       	call   c002795b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 e6 ad 01 00       	call   c002863b <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 4d aa 01 00       	call   c00282bc <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 ec af 01 00       	call   c0028889 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 ef af 01 00       	call   c00288a7 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 c2 af 01 00       	call   c00288a7 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 bb a9 01 00       	call   c00282bc <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 45 b1 01 00       	call   c0028a60 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 1c b1 01 00       	call   c0028a60 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 ee ac 01 00       	call   c002863b <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 45 a6 01 00       	call   c0027fac <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 24 af 01 00       	call   c00288a7 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 bd 9f 01 00       	call   c002795b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 e5 a5 01 00       	call   c0027fac <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 87 b0 01 00       	call   c0028a60 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 c0 a8 01 00       	call   c00282bc <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 3d 9f 01 00       	call   c002795b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 69 ab 01 00       	call   c002863b <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 69 9e 01 00       	call   c002795b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 49 9e 01 00       	call   c002795b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 19 ab 01 00       	call   c002863b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 4d ad 01 00       	call   c0028889 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 44 a4 01 00       	call   c0027fac <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 c6 ae 01 00       	call   c0028a40 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 ed ac 01 00       	call   c0028889 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 e7 a3 01 00       	call   c0027fac <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 65 aa 01 00       	call   c002863b <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 e8 a3 01 00       	call   c0027fd8 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 3a aa 01 00       	call   c002863b <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 a1 a6 01 00       	call   c00282bc <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 20 9d 01 00       	call   c002795b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 ea a9 01 00       	call   c002863b <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 36 ac 01 00       	call   c00288a7 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 2b a3 01 00       	call   c0027fd8 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 fd a2 01 00       	call   c0027fd8 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 41 a9 01 00       	call   c002863b <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 a8 a5 01 00       	call   c00282bc <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 91 a2 01 00       	call   c0027fd8 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 4d ab 01 00       	call   c00288ab <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 40 a5 01 00       	call   c00282bc <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 bf 9b 01 00       	call   c002795b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 ac ac 01 00       	call   c0028a60 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 7e a8 01 00       	call   c002863b <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 d5 a1 01 00       	call   c0027fac <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 b4 aa 01 00       	call   c00288a7 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 4c 9b 01 00       	call   c002795b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 74 a1 01 00       	call   c0027fac <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 16 ac 01 00       	call   c0028a60 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 04 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5cfc]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 f8 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d08]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 0a 1b 00 00       	call   c000f9b7 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 c9 a8 01 00       	call   c00288a7 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 87 a8 01 00       	call   c0028889 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 73 a8 01 00       	call   c00288a7 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 e5 a5 01 00       	call   c002863b <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 63 9f 01 00       	call   c0027fd8 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 b5 a5 01 00       	call   c002863b <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 bb 98 01 00       	call   c002795b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 8a a5 01 00       	call   c002863b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 da a7 01 00       	call   c00288a5 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 bb 9e 01 00       	call   c0027fac <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 3d a9 01 00       	call   c0028a40 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 64 a7 01 00       	call   c0028889 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 63 9e 01 00       	call   c0027fac <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 e1 a4 01 00       	call   c002863b <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 64 9e 01 00       	call   c0027fd8 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 b6 a4 01 00       	call   c002863b <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 1d a1 01 00       	call   c00282bc <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 9c 97 01 00       	call   c002795b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 c4 a0 01 00       	call   c00282bc <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 4a 97 01 00       	call   c002795b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 38 a8 01 00       	call   c0028a60 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 0a a4 01 00       	call   c002863b <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 61 9d 01 00       	call   c0027fac <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 40 a6 01 00       	call   c00288a7 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 d9 96 01 00       	call   c002795b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 05 9d 01 00       	call   c0027fac <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 a7 a7 01 00       	call   c0028a60 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 54 a3 01 00       	call   c002863b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 d1 9c 01 00       	call   c0027fd8 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 22 a3 01 00       	call   c002863b <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 28 96 01 00       	call   c002795b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 f8 a2 01 00       	call   c002863b <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 4c a5 01 00       	call   c00288a9 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 25 9c 01 00       	call   c0027fac <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 a7 a6 01 00       	call   c0028a40 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 ce a4 01 00       	call   c0028889 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 cc 9b 01 00       	call   c0027fac <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 4a a2 01 00       	call   c002863b <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 cd 9b 01 00       	call   c0027fd8 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 1f a2 01 00       	call   c002863b <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 86 9e 01 00       	call   c00282bc <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 05 95 01 00       	call   c002795b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 21 9e 01 00       	call   c00282bc <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 a0 94 01 00       	call   c002795b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 8e a5 01 00       	call   c0028a60 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 60 a1 01 00       	call   c002863b <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 b7 9a 01 00       	call   c0027fac <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 96 a3 01 00       	call   c00288a7 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 2f 94 01 00       	call   c002795b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 5b 9a 01 00       	call   c0027fac <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 cc a0 01 00       	call   c002863b <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 d2 93 01 00       	call   c002795b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 1e a4 02 c0       	mov    eax,0xc002a41e
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 2f a4 02 c0       	mov    eax,0xc002a42f
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 4c 13 00 00       	call   c000f9b7 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 4e 13 00 00       	call   c000f9d7 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 c8 12 00 00       	jmp    c000f9a7 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 e3 12 00 00       	jmp    c000f9c7 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000e708:	48                   	dec    eax
c000e709:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000e719:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c000e728:	48                   	dec    eax
c000e729:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 60 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb60,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c000e743:	e8 e7 f7 00 00       	call   c001df2f <schedule()>
c000e748:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000e74d:	48                   	dec    eax
c000e74e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 66 a4 02 c0       	push   0xc002a466
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 68 e6 02 c0       	mov    eax,0xc002e668
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 6f a4 02 c0       	push   0xc002a46f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 d4 6d 02 c0       	mov    eax,0xc0026dd4
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 79 a4 02 c0       	push   0xc002a479
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 08 6b 02 c0       	mov    eax,0xc0026b08
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 82 a4 02 c0       	push   0xc002a482
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 d4 6e 02 c0       	mov    eax,0xc0026ed4
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 8c a4 02 c0       	push   0xc002a48c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 54 6c 02 c0       	mov    eax,0xc0026c54
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 95 a4 02 c0       	push   0xc002a495
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 6c e6 02 c0       	mov    eax,0xc002e66c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 a2 a4 02 c0       	push   0xc002a4a2
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 6d e6 02 c0       	mov    eax,0xc002e66d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 1f 57 00 00       	call   c0013fc2 <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 af a4 02 c0       	push   0xc002a4af
c000e8d3:	e8 29 11 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 c6 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4c6
c000e8e0:	e8 1c 11 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 b6 10 00 00       	call   c000f9a7 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c000e900:	68 df a4 02 c0       	push   0xc002a4df
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 05 f2 00 00       	call   c001db12 <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 fb f1 00 c0       	push   0xc000f1fb
c000e91c:	53                   	push   ebx
c000e91d:	e8 e8 f3 00 00       	call   c001dd0a <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 fd e6 01 c0       	push   0xc001e6fd
c000e92b:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c000e931:	e8 d4 f3 00 00       	call   c001dd0a <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 48 fb 02 c0       	mov    ds:0xc002fb48,eax
c000e93e:	68 58 a6 02 c0       	push   0xc002a658
c000e943:	c6 05 6d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e66d,0x1
c000e94a:	e8 b2 10 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 55 01 01 00       	call   c001eaa9 <Vm::initialise8086()>
c000e954:	e8 31 44 00 00       	call   c0012d8a <Fs::initVFS()>
c000e959:	c7 04 24 ec a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ec
c000e960:	e8 9c 10 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e965:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 58 a6 02 c0       	push   0xc002a658
c000e984:	e8 78 10 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e989:	e8 0c da 00 00       	call   c001c39a <Sys::loadSyscalls()>
c000e98e:	e8 01 b9 00 00       	call   c001a294 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 06 a5 02 c0       	push   0xc002a506
c000e99d:	68 0f a5 02 c0       	push   0xc002a50f
c000e9a2:	e8 b2 c7 00 00       	call   c001b159 <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 cb 4e 00 00       	call   c001387a <User::loadClockSettings(int)>
c000e9af:	c7 04 24 7c a6 02 c0 	mov    DWORD PTR [esp],0xc002a67c
c000e9b6:	e8 46 10 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 b6 55 00 00       	call   c0013f82 <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 17 a5 02 c0 	mov    DWORD PTR [esp],0xc002a517
c000e9d3:	e8 29 10 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 1f b4 00 00       	call   c0019dfc <Krnl::startCPUs()>
c000e9dd:	c7 04 24 31 a5 02 c0 	mov    DWORD PTR [esp],0xc002a531
c000e9e4:	e8 18 10 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 42 a5 02 c0       	push   0xc002a542
c000e9f8:	e8 6d eb 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 95 ed 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 f2 f6 00 00       	call   c001e105 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 5e a5 02 c0       	push   0xc002a55e
c000ea27:	50                   	push   eax
c000ea28:	e8 0f 56 00 00       	call   c001403c <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 2c a7 02 c0       	mov    edx,0xc002a72c
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 81 e6 02 c0 04 	test   BYTE PTR ds:0xc002e681,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 d5 7e 01 00       	call   c0026a96 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 02 a1 00 00       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 db a0 00 00       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 b9 a0 00 00       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 97 a0 00 00       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 80 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e680,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 a5 9f 00 00       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 80 9f 00 00       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 3f 7d 01 00       	call   c0026a50 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 fc 7c 01 00       	call   c0026a30 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 9c 9f 00 00       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 67 a5 02 c0       	push   0xc002a567
c000eda4:	e8 f4 b5 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 6d a5 02 c0       	push   0xc002a56d
c000eddc:	e8 bc b5 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 9c a6 02 c0       	push   0xc002a69c
c000ee32:	e8 ca 0b 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 80 e6 02 c0 04 	test   BYTE PTR ds:0xc002e680,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 a0 d5 02 c0 	sete   BYTE PTR ds:0xc002d5a0
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 73 a5 02 c0       	push   0xc002a573
c000ee51:	e8 a9 3b 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 89 a5 02 c0       	push   0xc002a589
c000ee62:	e8 98 3b 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 9d a5 02 c0       	push   0xc002a59d
c000ee70:	e8 8a 3b 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000ee75:	c7 04 24 b0 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5b0
c000ee7c:	e8 7e 3b 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000ee81:	c7 04 24 c2 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5c2
c000ee88:	e8 74 0b 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000ee8d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee94:	e8 0e 0b 00 00       	call   c000f9a7 <malloc>
c000ee99:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee9c:	89 c6                	mov    esi,eax
c000ee9e:	e8 bf 90 00 00       	call   c0017f62 <ACPI::ACPI()>
c000eea3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eea9:	c7 04 24 dc a5 02 c0 	mov    DWORD PTR [esp],0xc002a5dc
c000eeb0:	e8 4c 0b 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000eeb5:	59                   	pop    ecx
c000eeb6:	5e                   	pop    esi
c000eeb7:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eebd:	53                   	push   ebx
c000eebe:	e8 75 4f 00 00       	call   c0013e38 <Device::addChild(Device*)>
c000eec3:	c7 04 24 c0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6c0
c000eeca:	e8 32 0b 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000eecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed2:	e8 9f fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000eed7:	c7 04 24 e0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6e0
c000eede:	e8 1e 0b 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000eee3:	c7 04 24 f6 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5f6
c000eeea:	e8 12 0b 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000eeef:	58                   	pop    eax
c000eef0:	5a                   	pop    edx
c000eef1:	6a 01                	push   0x1
c000eef3:	53                   	push   ebx
c000eef4:	e8 13 ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eef9:	c7 04 24 17 a5 02 c0 	mov    DWORD PTR [esp],0xc002a517
c000ef00:	e8 fc 0a 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000ef05:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef0c:	e8 96 0a 00 00       	call   c000f9a7 <malloc>
c000ef11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	e8 9b 9e 00 00       	call   c0018db6 <CPU::CPU()>
c000ef1b:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef21:	59                   	pop    ecx
c000ef22:	58                   	pop    eax
c000ef23:	56                   	push   esi
c000ef24:	53                   	push   ebx
c000ef25:	e8 0e 4f 00 00       	call   c0013e38 <Device::addChild(Device*)>
c000ef2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef30:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef36:	6a 00                	push   0x0
c000ef38:	6a 00                	push   0x0
c000ef3a:	50                   	push   eax
c000ef3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef3e:	83 c4 14             	add    esp,0x14
c000ef41:	68 00 a7 02 c0       	push   0xc002a700
c000ef46:	e8 b6 0a 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000ef4b:	e8 80 54 00 00       	call   c00143d0 <setupFPU()>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef59:	85 c0                	test   eax,eax
c000ef5b:	74 1f                	je     c000ef7c <Computer::open(int, int, void*)+0x158>
c000ef5d:	83 ec 08             	sub    esp,0x8
c000ef60:	50                   	push   eax
c000ef61:	53                   	push   ebx
c000ef62:	e8 d1 4e 00 00       	call   c0013e38 <Device::addChild(Device*)>
c000ef67:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef6d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef6f:	6a 00                	push   0x0
c000ef71:	6a 00                	push   0x0
c000ef73:	6a 00                	push   0x0
c000ef75:	50                   	push   eax
c000ef76:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef79:	83 c4 20             	add    esp,0x20
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	68 07 a6 02 c0       	push   0xc002a607
c000ef84:	e8 78 0a 00 00       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000ef89:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef90:	e8 97 ee 00 00       	call   c001de2c <setupMultitasking(void (*)())>
c000ef95:	83 c4 14             	add    esp,0x14
c000ef98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef9d:	5b                   	pop    ebx
c000ef9e:	5e                   	pop    esi
c000ef9f:	c3                   	ret    

c000efa0 <Computer::disableNMI()>:
c000efa0:	6a 00                	push   0x0
c000efa2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efa6:	e8 61 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000efab:	58                   	pop    eax
c000efac:	5a                   	pop    edx
c000efad:	c3                   	ret    

c000efae <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efb2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efb9:	19 c0                	sbb    eax,eax
c000efbb:	83 e0 80             	and    eax,0xffffff80
c000efbe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efc2:	e6 70                	out    0x70,al
c000efc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efc8:	e6 71                	out    0x71,al
c000efca:	c3                   	ret    
c000efcb:	90                   	nop

c000efcc <Computer::handleNMI()>:
c000efcc:	56                   	push   esi
c000efcd:	53                   	push   ebx
c000efce:	83 ec 10             	sub    esp,0x10
c000efd1:	e4 92                	in     al,0x92
c000efd3:	89 c6                	mov    esi,eax
c000efd5:	e4 61                	in     al,0x61
c000efd7:	68 22 a6 02 c0       	push   0xc002a622
c000efdc:	88 c3                	mov    bl,al
c000efde:	e8 1c 3a 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	83 e6 10             	and    esi,0x10
c000efe9:	75 0d                	jne    c000eff8 <Computer::handleNMI()+0x2c>
c000efeb:	f6 c3 40             	test   bl,0x40
c000efee:	75 1d                	jne    c000f00d <Computer::handleNMI()+0x41>
c000eff0:	84 db                	test   bl,bl
c000eff2:	78 2d                	js     c000f021 <Computer::handleNMI()+0x55>
c000eff4:	58                   	pop    eax
c000eff5:	5b                   	pop    ebx
c000eff6:	5e                   	pop    esi
c000eff7:	c3                   	ret    
c000eff8:	83 ec 0c             	sub    esp,0xc
c000effb:	68 33 a6 02 c0       	push   0xc002a633
c000f000:	e8 98 b3 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000f005:	83 c4 10             	add    esp,0x10
c000f008:	f6 c3 40             	test   bl,0x40
c000f00b:	74 e3                	je     c000eff0 <Computer::handleNMI()+0x24>
c000f00d:	83 ec 0c             	sub    esp,0xc
c000f010:	68 40 a6 02 c0       	push   0xc002a640
c000f015:	e8 83 b3 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000f01a:	83 c4 10             	add    esp,0x10
c000f01d:	84 db                	test   bl,bl
c000f01f:	79 d3                	jns    c000eff4 <Computer::handleNMI()+0x28>
c000f021:	c7 44 24 10 4a a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a64a
c000f029:	5a                   	pop    edx
c000f02a:	5b                   	pop    ebx
c000f02b:	5e                   	pop    esi
c000f02c:	e9 6c b3 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c000f031:	90                   	nop

c000f032 <Computer::setDiskActivityLight(int, bool)>:
c000f032:	56                   	push   esi
c000f033:	53                   	push   ebx
c000f034:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f038:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f03d:	77 1b                	ja     c000f05a <Computer::setDiskActivityLight(int, bool)+0x28>
c000f03f:	e4 92                	in     al,0x92
c000f041:	bb 40 00 00 00       	mov    ebx,0x40
c000f046:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f04a:	89 da                	mov    edx,ebx
c000f04c:	d3 e2                	shl    edx,cl
c000f04e:	89 f1                	mov    ecx,esi
c000f050:	f7 d2                	not    edx
c000f052:	d3 e3                	shl    ebx,cl
c000f054:	21 d0                	and    eax,edx
c000f056:	09 d8                	or     eax,ebx
c000f058:	e6 92                	out    0x92,al
c000f05a:	5b                   	pop    ebx
c000f05b:	5e                   	pop    esi
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <GDTEntry::setBase(unsigned int)>:
c000f05e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f062:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f066:	89 c1                	mov    ecx,eax
c000f068:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f06c:	c1 e9 10             	shr    ecx,0x10
c000f06f:	c1 e8 18             	shr    eax,0x18
c000f072:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f075:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f078:	c3                   	ret    
c000f079:	90                   	nop

c000f07a <GDTEntry::setLimit(unsigned int)>:
c000f07a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f082:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f085:	66 89 01             	mov    WORD PTR [ecx],ax
c000f088:	83 e2 f0             	and    edx,0xfffffff0
c000f08b:	c1 e8 10             	shr    eax,0x10
c000f08e:	83 e0 0f             	and    eax,0xf
c000f091:	09 d0                	or     eax,edx
c000f093:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f096:	c3                   	ret    
c000f097:	90                   	nop

c000f098 <GDT::GDT()>:
c000f098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	90                   	nop
c000f0ad:	c3                   	ret    

c000f0ae <GDT::addEntry(GDTEntry)>:
c000f0ae:	53                   	push   ebx
c000f0af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0bd:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0c1:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0c5:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0c8:	c1 e0 03             	shl    eax,0x3
c000f0cb:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0cd:	5b                   	pop    ebx
c000f0ce:	c3                   	ret    
c000f0cf:	90                   	nop

c000f0d0 <GDT::getNumberOfEntries()>:
c000f0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d6:	c3                   	ret    
c000f0d7:	90                   	nop

c000f0d8 <GDT::flush()>:
c000f0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0de:	83 c0 04             	add    eax,0x4
c000f0e1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0e8:	a3 72 e6 02 c0       	mov    ds:0xc002e672,eax
c000f0ed:	66 89 15 70 e6 02 c0 	mov    WORD PTR ds:0xc002e670,dx
c000f0f4:	e9 57 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0f9:	90                   	nop

c000f0fa <GDT::setup()>:
c000f0fa:	55                   	push   ebp
c000f0fb:	57                   	push   edi
c000f0fc:	56                   	push   esi
c000f0fd:	53                   	push   ebx
c000f0fe:	83 ec 3c             	sub    esp,0x3c
c000f101:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f105:	6a 00                	push   0x0
c000f107:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f10b:	53                   	push   ebx
c000f10c:	e8 4d ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f111:	6a 00                	push   0x0
c000f113:	53                   	push   ebx
c000f114:	e8 61 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f119:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f121:	6a 00                	push   0x0
c000f123:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f127:	53                   	push   ebx
c000f128:	e8 31 ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f12d:	68 ff ff ff 00       	push   0xffffff
c000f132:	53                   	push   ebx
c000f133:	e8 42 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f138:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f13c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f141:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f146:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f14a:	83 c4 20             	add    esp,0x20
c000f14d:	6a 00                	push   0x0
c000f14f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f153:	53                   	push   ebx
c000f154:	e8 05 ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f159:	68 ff ff ff 00       	push   0xffffff
c000f15e:	53                   	push   ebx
c000f15f:	e8 16 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f164:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f168:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f16c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f170:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f174:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f178:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f17d:	0d 00 92 c0 00       	or     eax,0xc09200
c000f182:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f186:	89 d8                	mov    eax,ebx
c000f188:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f18c:	80 cc 60             	or     ah,0x60
c000f18f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f193:	83 c4 0c             	add    esp,0xc
c000f196:	89 f8                	mov    eax,edi
c000f198:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f19c:	80 cc 60             	or     ah,0x60
c000f19f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1a3:	89 c7                	mov    edi,eax
c000f1a5:	55                   	push   ebp
c000f1a6:	e8 03 ff ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1ab:	83 c4 0c             	add    esp,0xc
c000f1ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1b6:	55                   	push   ebp
c000f1b7:	e8 f2 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1bc:	83 c4 0c             	add    esp,0xc
c000f1bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 e1 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1cd:	83 c4 0c             	add    esp,0xc
c000f1d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1d8:	53                   	push   ebx
c000f1d9:	51                   	push   ecx
c000f1da:	55                   	push   ebp
c000f1db:	e8 ce fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	57                   	push   edi
c000f1e4:	56                   	push   esi
c000f1e5:	55                   	push   ebp
c000f1e6:	e8 c3 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1ee:	e8 e5 fe ff ff       	call   c000f0d8 <GDT::flush()>
c000f1f3:	83 c4 4c             	add    esp,0x4c
c000f1f6:	5b                   	pop    ebx
c000f1f7:	5e                   	pop    esi
c000f1f8:	5f                   	pop    edi
c000f1f9:	5d                   	pop    ebp
c000f1fa:	c3                   	ret    

c000f1fb <idleFunction(void*)>:
c000f1fb:	53                   	push   ebx
c000f1fc:	83 ec 08             	sub    esp,0x8
c000f1ff:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000f204:	48                   	dec    eax
c000f205:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000f20a:	75 01                	jne    c000f20d <idleFunction(void*)+0x12>
c000f20c:	fb                   	sti    
c000f20d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f212:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f218:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f21f:	74 3c                	je     c000f25d <idleFunction(void*)+0x62>
c000f221:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f228:	74 33                	je     c000f25d <idleFunction(void*)+0x62>
c000f22a:	31 db                	xor    ebx,ebx
c000f22c:	52                   	push   edx
c000f22d:	52                   	push   edx
c000f22e:	68 e1 00 00 00       	push   0xe1
c000f233:	50                   	push   eax
c000f234:	e8 49 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f239:	53                   	push   ebx
c000f23a:	83 e0 02             	and    eax,0x2
c000f23d:	50                   	push   eax
c000f23e:	68 e1 00 00 00       	push   0xe1
c000f243:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c000f249:	e8 60 fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f24e:	83 c4 20             	add    esp,0x20
c000f251:	e8 29 10 ff ff       	call   c000027f <doTPAUSE>
c000f256:	e8 85 98 01 00       	call   c0028ae0 <idleCommon()>
c000f25b:	eb f4                	jmp    c000f251 <idleFunction(void*)+0x56>
c000f25d:	fb                   	sti    
c000f25e:	f4                   	hlt    
c000f25f:	e8 7c 98 01 00       	call   c0028ae0 <idleCommon()>
c000f264:	eb f7                	jmp    c000f25d <idleFunction(void*)+0x62>

c000f266 <IDTEntry::IDTEntry(bool)>:
c000f266:	83 ec 04             	sub    esp,0x4
c000f269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f26d:	88 04 24             	mov    BYTE PTR [esp],al
c000f270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f274:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f286:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f289:	83 e2 f0             	and    edx,0xfffffff0
c000f28c:	83 ca 0e             	or     edx,0xe
c000f28f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f296:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f299:	83 e2 ef             	and    edx,0xffffffef
c000f29c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2a3:	74 04                	je     c000f2a9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2a5:	b2 03                	mov    dl,0x3
c000f2a7:	eb 02                	jmp    c000f2ab <IDTEntry::IDTEntry(bool)+0x45>
c000f2a9:	b2 00                	mov    dl,0x0
c000f2ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2af:	83 e2 03             	and    edx,0x3
c000f2b2:	88 d1                	mov    cl,dl
c000f2b4:	c1 e1 05             	shl    ecx,0x5
c000f2b7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ba:	83 e2 9f             	and    edx,0xffffff9f
c000f2bd:	09 ca                	or     edx,ecx
c000f2bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 ca 80             	or     edx,0xffffff80
c000f2cc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2cf:	90                   	nop
c000f2d0:	83 c4 04             	add    esp,0x4
c000f2d3:	c3                   	ret    

c000f2d4 <IDTEntry::setOffset(unsigned int)>:
c000f2d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2dc:	66 89 02             	mov    WORD PTR [edx],ax
c000f2df:	c1 e8 10             	shr    eax,0x10
c000f2e2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2e6:	c3                   	ret    
c000f2e7:	90                   	nop

c000f2e8 <IDT::IDT()>:
c000f2e8:	90                   	nop
c000f2e9:	c3                   	ret    

c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ee:	83 c0 30             	add    eax,0x30
c000f2f1:	c3                   	ret    

c000f2f2 <IDT::addEntry(IDTEntry, int)>:
c000f2f2:	53                   	push   ebx
c000f2f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f303:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f306:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f30a:	5b                   	pop    ebx
c000f30b:	c3                   	ret    

c000f30c <IDT::addEntry(int, void (*)(), bool)>:
c000f30c:	53                   	push   ebx
c000f30d:	83 ec 10             	sub    esp,0x10
c000f310:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f315:	50                   	push   eax
c000f316:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f31a:	53                   	push   ebx
c000f31b:	e8 46 ff ff ff       	call   c000f266 <IDTEntry::IDTEntry(bool)>
c000f320:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f324:	53                   	push   ebx
c000f325:	e8 aa ff ff ff       	call   c000f2d4 <IDTEntry::setOffset(unsigned int)>
c000f32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f32e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f332:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f33a:	e8 b3 ff ff ff       	call   c000f2f2 <IDT::addEntry(IDTEntry, int)>
c000f33f:	83 c4 30             	add    esp,0x30
c000f342:	5b                   	pop    ebx
c000f343:	c3                   	ret    

c000f344 <IDT::flush()>:
c000f344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f348:	66 c7 05 78 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e678,0x7ff
c000f351:	a3 7a e6 02 c0       	mov    ds:0xc002e67a,eax
c000f356:	0f 01 1d 78 e6 02 c0 	lidtd  ds:0xc002e678
c000f35d:	c3                   	ret    

c000f35e <IDT::setup()>:
c000f35e:	57                   	push   edi
c000f35f:	56                   	push   esi
c000f360:	53                   	push   ebx
c000f361:	83 ec 10             	sub    esp,0x10
c000f364:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f368:	6a 00                	push   0x0
c000f36a:	68 70 04 00 c0       	push   0xc0000470
c000f36f:	6a 00                	push   0x0
c000f371:	53                   	push   ebx
c000f372:	e8 95 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f377:	6a 00                	push   0x0
c000f379:	68 80 04 00 c0       	push   0xc0000480
c000f37e:	6a 01                	push   0x1
c000f380:	53                   	push   ebx
c000f381:	e8 86 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	6a 00                	push   0x0
c000f38b:	68 8a 04 00 c0       	push   0xc000048a
c000f390:	6a 02                	push   0x2
c000f392:	53                   	push   ebx
c000f393:	e8 74 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f398:	6a 00                	push   0x0
c000f39a:	68 94 04 00 c0       	push   0xc0000494
c000f39f:	6a 03                	push   0x3
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 65 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3a7:	83 c4 20             	add    esp,0x20
c000f3aa:	6a 00                	push   0x0
c000f3ac:	68 9e 04 00 c0       	push   0xc000049e
c000f3b1:	6a 04                	push   0x4
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 53 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3b9:	6a 00                	push   0x0
c000f3bb:	68 a8 04 00 c0       	push   0xc00004a8
c000f3c0:	6a 05                	push   0x5
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 44 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3c8:	83 c4 20             	add    esp,0x20
c000f3cb:	6a 00                	push   0x0
c000f3cd:	68 b2 04 00 c0       	push   0xc00004b2
c000f3d2:	6a 06                	push   0x6
c000f3d4:	53                   	push   ebx
c000f3d5:	e8 32 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 bc 04 00 c0       	push   0xc00004bc
c000f3e1:	6a 07                	push   0x7
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 23 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	83 c4 20             	add    esp,0x20
c000f3ec:	6a 00                	push   0x0
c000f3ee:	68 c6 04 00 c0       	push   0xc00004c6
c000f3f3:	6a 08                	push   0x8
c000f3f5:	53                   	push   ebx
c000f3f6:	e8 11 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3fb:	6a 00                	push   0x0
c000f3fd:	68 ce 04 00 c0       	push   0xc00004ce
c000f402:	6a 09                	push   0x9
c000f404:	53                   	push   ebx
c000f405:	e8 02 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f40a:	83 c4 20             	add    esp,0x20
c000f40d:	6a 00                	push   0x0
c000f40f:	68 d8 04 00 c0       	push   0xc00004d8
c000f414:	6a 0a                	push   0xa
c000f416:	53                   	push   ebx
c000f417:	e8 f0 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f41c:	6a 00                	push   0x0
c000f41e:	68 e0 04 00 c0       	push   0xc00004e0
c000f423:	6a 0b                	push   0xb
c000f425:	53                   	push   ebx
c000f426:	e8 e1 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	83 c4 20             	add    esp,0x20
c000f42e:	6a 00                	push   0x0
c000f430:	68 e8 04 00 c0       	push   0xc00004e8
c000f435:	6a 0c                	push   0xc
c000f437:	53                   	push   ebx
c000f438:	e8 cf fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f43d:	6a 00                	push   0x0
c000f43f:	68 f0 04 00 c0       	push   0xc00004f0
c000f444:	6a 0d                	push   0xd
c000f446:	53                   	push   ebx
c000f447:	e8 c0 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	83 c4 20             	add    esp,0x20
c000f44f:	6a 00                	push   0x0
c000f451:	68 f8 04 00 c0       	push   0xc00004f8
c000f456:	6a 0e                	push   0xe
c000f458:	53                   	push   ebx
c000f459:	e8 ae fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f45e:	6a 00                	push   0x0
c000f460:	68 00 05 00 c0       	push   0xc0000500
c000f465:	6a 0f                	push   0xf
c000f467:	53                   	push   ebx
c000f468:	e8 9f fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	83 c4 20             	add    esp,0x20
c000f470:	6a 00                	push   0x0
c000f472:	68 0a 05 00 c0       	push   0xc000050a
c000f477:	6a 10                	push   0x10
c000f479:	53                   	push   ebx
c000f47a:	e8 8d fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f47f:	6a 00                	push   0x0
c000f481:	68 14 05 00 c0       	push   0xc0000514
c000f486:	6a 11                	push   0x11
c000f488:	53                   	push   ebx
c000f489:	e8 7e fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	83 c4 20             	add    esp,0x20
c000f491:	6a 00                	push   0x0
c000f493:	68 1e 05 00 c0       	push   0xc000051e
c000f498:	6a 12                	push   0x12
c000f49a:	53                   	push   ebx
c000f49b:	e8 6c fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4a0:	6a 01                	push   0x1
c000f4a2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4a7:	6a 60                	push   0x60
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 5d fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	83 c4 20             	add    esp,0x20
c000f4b2:	6a 00                	push   0x0
c000f4b4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4b9:	6a 20                	push   0x20
c000f4bb:	53                   	push   ebx
c000f4bc:	e8 4b fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 aa 05 00 c0       	push   0xc00005aa
c000f4c8:	6a 21                	push   0x21
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 3c fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	83 c4 20             	add    esp,0x20
c000f4d3:	6a 00                	push   0x0
c000f4d5:	68 b1 05 00 c0       	push   0xc00005b1
c000f4da:	6a 22                	push   0x22
c000f4dc:	53                   	push   ebx
c000f4dd:	e8 2a fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 28 05 00 c0       	push   0xc0000528
c000f4e9:	6a 23                	push   0x23
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 1b fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	83 c4 20             	add    esp,0x20
c000f4f4:	6a 00                	push   0x0
c000f4f6:	68 32 05 00 c0       	push   0xc0000532
c000f4fb:	6a 24                	push   0x24
c000f4fd:	53                   	push   ebx
c000f4fe:	e8 09 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f503:	6a 00                	push   0x0
c000f505:	68 3c 05 00 c0       	push   0xc000053c
c000f50a:	6a 25                	push   0x25
c000f50c:	53                   	push   ebx
c000f50d:	e8 fa fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f512:	83 c4 20             	add    esp,0x20
c000f515:	6a 00                	push   0x0
c000f517:	68 46 05 00 c0       	push   0xc0000546
c000f51c:	6a 26                	push   0x26
c000f51e:	53                   	push   ebx
c000f51f:	e8 e8 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f524:	6a 00                	push   0x0
c000f526:	68 50 05 00 c0       	push   0xc0000550
c000f52b:	6a 27                	push   0x27
c000f52d:	53                   	push   ebx
c000f52e:	e8 d9 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f533:	83 c4 20             	add    esp,0x20
c000f536:	6a 00                	push   0x0
c000f538:	68 5a 05 00 c0       	push   0xc000055a
c000f53d:	6a 28                	push   0x28
c000f53f:	53                   	push   ebx
c000f540:	e8 c7 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f545:	6a 00                	push   0x0
c000f547:	68 64 05 00 c0       	push   0xc0000564
c000f54c:	6a 29                	push   0x29
c000f54e:	53                   	push   ebx
c000f54f:	e8 b8 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f554:	83 c4 20             	add    esp,0x20
c000f557:	6a 00                	push   0x0
c000f559:	68 6e 05 00 c0       	push   0xc000056e
c000f55e:	6a 2a                	push   0x2a
c000f560:	53                   	push   ebx
c000f561:	e8 a6 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f566:	6a 00                	push   0x0
c000f568:	68 78 05 00 c0       	push   0xc0000578
c000f56d:	6a 2b                	push   0x2b
c000f56f:	53                   	push   ebx
c000f570:	e8 97 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f575:	83 c4 20             	add    esp,0x20
c000f578:	6a 00                	push   0x0
c000f57a:	68 82 05 00 c0       	push   0xc0000582
c000f57f:	6a 2c                	push   0x2c
c000f581:	53                   	push   ebx
c000f582:	e8 85 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f587:	6a 00                	push   0x0
c000f589:	68 8c 05 00 c0       	push   0xc000058c
c000f58e:	6a 2d                	push   0x2d
c000f590:	53                   	push   ebx
c000f591:	e8 76 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f596:	83 c4 20             	add    esp,0x20
c000f599:	6a 00                	push   0x0
c000f59b:	68 96 05 00 c0       	push   0xc0000596
c000f5a0:	6a 2e                	push   0x2e
c000f5a2:	53                   	push   ebx
c000f5a3:	e8 64 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 a0 05 00 c0       	push   0xc00005a0
c000f5af:	6a 2f                	push   0x2f
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 55 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	83 c4 20             	add    esp,0x20
c000f5ba:	6a 00                	push   0x0
c000f5bc:	68 f6 05 00 c0       	push   0xc00005f6
c000f5c1:	6a 30                	push   0x30
c000f5c3:	53                   	push   ebx
c000f5c4:	e8 43 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 00 06 00 c0       	push   0xc0000600
c000f5d0:	6a 31                	push   0x31
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 34 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	83 c4 20             	add    esp,0x20
c000f5db:	6a 00                	push   0x0
c000f5dd:	68 0a 06 00 c0       	push   0xc000060a
c000f5e2:	6a 32                	push   0x32
c000f5e4:	53                   	push   ebx
c000f5e5:	e8 22 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 14 06 00 c0       	push   0xc0000614
c000f5f1:	6a 33                	push   0x33
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 13 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	83 c4 20             	add    esp,0x20
c000f5fc:	6a 00                	push   0x0
c000f5fe:	68 1e 06 00 c0       	push   0xc000061e
c000f603:	6a 34                	push   0x34
c000f605:	53                   	push   ebx
c000f606:	e8 01 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f60b:	6a 00                	push   0x0
c000f60d:	68 28 06 00 c0       	push   0xc0000628
c000f612:	6a 35                	push   0x35
c000f614:	53                   	push   ebx
c000f615:	e8 f2 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	83 c4 20             	add    esp,0x20
c000f61d:	6a 00                	push   0x0
c000f61f:	68 32 06 00 c0       	push   0xc0000632
c000f624:	6a 36                	push   0x36
c000f626:	53                   	push   ebx
c000f627:	e8 e0 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f62c:	6a 00                	push   0x0
c000f62e:	68 3c 06 00 c0       	push   0xc000063c
c000f633:	6a 37                	push   0x37
c000f635:	53                   	push   ebx
c000f636:	e8 d1 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	83 c4 1c             	add    esp,0x1c
c000f63e:	6a 03                	push   0x3
c000f640:	6a 02                	push   0x2
c000f642:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c000f648:	e8 89 27 00 00       	call   c0011dd6 <VAS::allocatePages(int, int)>
c000f64d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f654:	89 c6                	mov    esi,eax
c000f656:	e8 4c 03 00 00       	call   c000f9a7 <malloc>
c000f65b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f661:	89 04 24             	mov    DWORD PTR [esp],eax
c000f664:	89 c7                	mov    edi,eax
c000f666:	e8 09 19 00 00       	call   c0010f74 <TSS::TSS()>
c000f66b:	83 c4 0c             	add    esp,0xc
c000f66e:	68 c6 04 00 c0       	push   0xc00004c6
c000f673:	56                   	push   esi
c000f674:	57                   	push   edi
c000f675:	e8 3a 19 00 00       	call   c0010fb4 <TSS::setup(unsigned long, unsigned long)>
c000f67a:	89 c6                	mov    esi,eax
c000f67c:	58                   	pop    eax
c000f67d:	5a                   	pop    edx
c000f67e:	6a 00                	push   0x0
c000f680:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f684:	50                   	push   eax
c000f685:	e8 dc fb ff ff       	call   c000f266 <IDTEntry::IDTEntry(bool)>
c000f68a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f693:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f69a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6a4:	80 ce 05             	or     dh,0x5
c000f6a7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6b8:	e8 87 fc ff ff       	call   c000f344 <IDT::flush()>
c000f6bd:	83 c4 20             	add    esp,0x20
c000f6c0:	5b                   	pop    ebx
c000f6c1:	5e                   	pop    esi
c000f6c2:	5f                   	pop    edi
c000f6c3:	c3                   	ret    

c000f6c4 <sbrk>:
c000f6c4:	55                   	push   ebp
c000f6c5:	57                   	push   edi
c000f6c6:	56                   	push   esi
c000f6c7:	53                   	push   ebx
c000f6c8:	83 ec 24             	sub    esp,0x24
c000f6cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f6cf:	53                   	push   ebx
c000f6d0:	68 50 a7 02 c0       	push   0xc002a750
c000f6d5:	e8 25 33 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	85 db                	test   ebx,ebx
c000f6df:	0f 84 a5 00 00 00    	je     c000f78a <sbrk+0xc6>
c000f6e5:	0f 88 a9 00 00 00    	js     c000f794 <sbrk+0xd0>
c000f6eb:	83 ec 0c             	sub    esp,0xc
c000f6ee:	68 6e a7 02 c0       	push   0xc002a76e
c000f6f3:	e8 07 33 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f6f8:	83 c4 08             	add    esp,0x8
c000f6fb:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f700:	ff b0 60 01 00 00    	push   DWORD PTR [eax+0x160]
c000f706:	68 74 a7 02 c0       	push   0xc002a774
c000f70b:	e8 ef 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f710:	83 c4 08             	add    esp,0x8
c000f713:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f718:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f71e:	ff b0 90 11 00 00    	push   DWORD PTR [eax+0x1190]
c000f724:	68 89 a7 02 c0       	push   0xc002a789
c000f729:	e8 d1 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f72e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f733:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f739:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000f73f:	83 e0 01             	and    eax,0x1
c000f742:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000f746:	c7 04 24 9e a7 02 c0 	mov    DWORD PTR [esp],0xc002a79e
c000f74d:	e8 ad 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f752:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c000f757:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f75b:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000f761:	89 d8                	mov    eax,ebx
c000f763:	83 c4 10             	add    esp,0x10
c000f766:	85 db                	test   ebx,ebx
c000f768:	78 45                	js     c000f7af <sbrk+0xeb>
c000f76a:	c1 f8 0c             	sar    eax,0xc
c000f76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f771:	89 c7                	mov    edi,eax
c000f773:	83 ec 0c             	sub    esp,0xc
c000f776:	68 a4 a7 02 c0       	push   0xc002a7a4
c000f77b:	e8 7f 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f780:	83 c4 10             	add    esp,0x10
c000f783:	be 00 00 00 00       	mov    esi,0x0
c000f788:	eb 65                	jmp    c000f7ef <sbrk+0x12b>
c000f78a:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c000f78f:	e9 ec 00 00 00       	jmp    c000f880 <sbrk+0x1bc>
c000f794:	83 ec 08             	sub    esp,0x8
c000f797:	53                   	push   ebx
c000f798:	68 00 a8 02 c0       	push   0xc002a800
c000f79d:	e8 5d 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f7a2:	83 c4 10             	add    esp,0x10
c000f7a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7aa:	e9 d1 00 00 00       	jmp    c000f880 <sbrk+0x1bc>
c000f7af:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f7b5:	eb b3                	jmp    c000f76a <sbrk+0xa6>
c000f7b7:	83 ec 0c             	sub    esp,0xc
c000f7ba:	68 b6 a7 02 c0       	push   0xc002a7b6
c000f7bf:	e8 3b 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f7c4:	8b 1d 28 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d428
c000f7ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	68 bc a7 02 c0       	push   0xc002a7bc
c000f7d8:	e8 22 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f7dd:	81 05 28 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d428,0x1000
c000f7e7:	46                   	inc    esi
c000f7e8:	83 c4 10             	add    esp,0x10
c000f7eb:	39 f7                	cmp    edi,esi
c000f7ed:	74 44                	je     c000f833 <sbrk+0x16f>
c000f7ef:	83 ec 0c             	sub    esp,0xc
c000f7f2:	68 aa a7 02 c0       	push   0xc002a7aa
c000f7f7:	e8 03 32 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f7fc:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c000f802:	8b 2d 28 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d428
c000f808:	e8 96 05 00 00       	call   c000fda3 <Phys::allocatePage()>
c000f80d:	68 01 04 00 00       	push   0x401
c000f812:	55                   	push   ebp
c000f813:	50                   	push   eax
c000f814:	53                   	push   ebx
c000f815:	e8 ba 24 00 00       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f81a:	83 c4 14             	add    esp,0x14
c000f81d:	68 b0 a7 02 c0       	push   0xc002a7b0
c000f822:	e8 d8 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f827:	83 c4 10             	add    esp,0x10
c000f82a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f82f:	74 9f                	je     c000f7d0 <sbrk+0x10c>
c000f831:	eb 84                	jmp    c000f7b7 <sbrk+0xf3>
c000f833:	83 ec 0c             	sub    esp,0xc
c000f836:	68 c2 a7 02 c0       	push   0xc002a7c2
c000f83b:	e8 bf 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f840:	83 c4 10             	add    esp,0x10
c000f843:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f848:	75 3e                	jne    c000f888 <sbrk+0x1c4>
c000f84a:	83 ec 0c             	sub    esp,0xc
c000f84d:	68 54 bd 02 c0       	push   0xc002bd54
c000f852:	e8 a8 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f857:	0f 20 d8             	mov    eax,cr3
c000f85a:	0f 22 d8             	mov    cr3,eax
c000f85d:	c7 04 24 c8 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7c8
c000f864:	e8 96 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f869:	83 c4 10             	add    esp,0x10
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	68 ec a7 02 c0       	push   0xc002a7ec
c000f874:	e8 86 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f87d:	83 c4 10             	add    esp,0x10
c000f880:	83 c4 1c             	add    esp,0x1c
c000f883:	5b                   	pop    ebx
c000f884:	5e                   	pop    esi
c000f885:	5f                   	pop    edi
c000f886:	5d                   	pop    ebp
c000f887:	c3                   	ret    
c000f888:	83 ec 0c             	sub    esp,0xc
c000f88b:	68 ce a7 02 c0       	push   0xc002a7ce
c000f890:	e8 6a 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f895:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f899:	89 c3                	mov    ebx,eax
c000f89b:	c1 eb 0a             	shr    ebx,0xa
c000f89e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f8a4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f8aa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f8ae:	c1 e6 0c             	shl    esi,0xc
c000f8b1:	01 c6                	add    esi,eax
c000f8b3:	c1 ee 0a             	shr    esi,0xa
c000f8b6:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000f8bc:	81 ee 00 00 40 00    	sub    esi,0x400000
c000f8c2:	c7 04 24 d4 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7d4
c000f8c9:	e8 31 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f8ce:	83 c4 10             	add    esp,0x10
c000f8d1:	39 f3                	cmp    ebx,esi
c000f8d3:	77 29                	ja     c000f8fe <sbrk+0x23a>
c000f8d5:	83 ec 0c             	sub    esp,0xc
c000f8d8:	68 da a7 02 c0       	push   0xc002a7da
c000f8dd:	e8 1d 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f8e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f8e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f8eb:	c7 04 24 e0 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7e0
c000f8f2:	e8 08 31 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f8f7:	83 c4 10             	add    esp,0x10
c000f8fa:	39 de                	cmp    esi,ebx
c000f8fc:	73 d7                	jae    c000f8d5 <sbrk+0x211>
c000f8fe:	83 ec 0c             	sub    esp,0xc
c000f901:	68 e6 a7 02 c0       	push   0xc002a7e6
c000f906:	e8 f4 30 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000f90b:	83 c4 10             	add    esp,0x10
c000f90e:	e9 59 ff ff ff       	jmp    c000f86c <sbrk+0x1a8>

c000f913 <mmap>:
c000f913:	83 ec 18             	sub    esp,0x18
c000f916:	68 f2 a7 02 c0       	push   0xc002a7f2
c000f91b:	e8 7d aa 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000f920:	b8 00 00 00 00       	mov    eax,0x0
c000f925:	83 c4 1c             	add    esp,0x1c
c000f928:	c3                   	ret    

c000f929 <munmap>:
c000f929:	83 ec 18             	sub    esp,0x18
c000f92c:	68 f7 a7 02 c0       	push   0xc002a7f7
c000f931:	e8 67 aa 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000f936:	b8 00 00 00 00       	mov    eax,0x0
c000f93b:	83 c4 1c             	add    esp,0x1c
c000f93e:	c3                   	ret    

c000f93f <liballoc_lock()>:
c000f93f:	fa                   	cli    
c000f940:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000f946:	b8 00 00 00 00       	mov    eax,0x0
c000f94b:	c3                   	ret    

c000f94c <liballoc_unlock()>:
c000f94c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000f951:	48                   	dec    eax
c000f952:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000f957:	75 01                	jne    c000f95a <liballoc_unlock()+0xe>
c000f959:	fb                   	sti    
c000f95a:	b8 00 00 00 00       	mov    eax,0x0
c000f95f:	c3                   	ret    

c000f960 <liballoc_alloc(int)>:
c000f960:	83 ec 10             	sub    esp,0x10
c000f963:	6a 01                	push   0x1
c000f965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f969:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c000f96f:	e8 62 24 00 00       	call   c0011dd6 <VAS::allocatePages(int, int)>
c000f974:	83 c4 1c             	add    esp,0x1c
c000f977:	c3                   	ret    

c000f978 <liballoc_free(void*, int)>:
c000f978:	83 ec 14             	sub    esp,0x14
c000f97b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f97f:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c000f985:	e8 f6 20 00 00       	call   c0011a80 <VAS::freeAllocatedPages(unsigned long)>
c000f98a:	b8 00 00 00 00       	mov    eax,0x0
c000f98f:	83 c4 1c             	add    esp,0x1c
c000f992:	c3                   	ret    

c000f993 <realloc>:
c000f993:	83 ec 14             	sub    esp,0x14
c000f996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f99e:	e8 89 1c ff ff       	call   c000162c <dlrealloc>
c000f9a3:	83 c4 1c             	add    esp,0x1c
c000f9a6:	c3                   	ret    

c000f9a7 <malloc>:
c000f9a7:	83 ec 18             	sub    esp,0x18
c000f9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9ae:	e8 3c 17 ff ff       	call   c00010ef <dlmalloc>
c000f9b3:	83 c4 1c             	add    esp,0x1c
c000f9b6:	c3                   	ret    

c000f9b7 <free>:
c000f9b7:	83 ec 18             	sub    esp,0x18
c000f9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9be:	e8 d1 13 ff ff       	call   c0000d94 <dlfree>
c000f9c3:	83 c4 1c             	add    esp,0x1c
c000f9c6:	c3                   	ret    

c000f9c7 <rfree>:
c000f9c7:	83 ec 18             	sub    esp,0x18
c000f9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9ce:	e8 c1 13 ff ff       	call   c0000d94 <dlfree>
c000f9d3:	83 c4 1c             	add    esp,0x1c
c000f9d6:	c3                   	ret    

c000f9d7 <calloc>:
c000f9d7:	56                   	push   esi
c000f9d8:	53                   	push   ebx
c000f9d9:	83 ec 10             	sub    esp,0x10
c000f9dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f9e0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f9e5:	53                   	push   ebx
c000f9e6:	e8 bc ff ff ff       	call   c000f9a7 <malloc>
c000f9eb:	89 c6                	mov    esi,eax
c000f9ed:	83 c4 0c             	add    esp,0xc
c000f9f0:	53                   	push   ebx
c000f9f1:	6a 00                	push   0x0
c000f9f3:	50                   	push   eax
c000f9f4:	e8 57 0d ff ff       	call   c0000750 <memset>
c000f9f9:	89 f0                	mov    eax,esi
c000f9fb:	83 c4 14             	add    esp,0x14
c000f9fe:	5b                   	pop    ebx
c000f9ff:	5e                   	pop    esi
c000fa00:	c3                   	ret    

c000fa01 <Krnl::setBootMessage(char const*)>:
c000fa01:	57                   	push   edi
c000fa02:	56                   	push   esi
c000fa03:	53                   	push   ebx
c000fa04:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa0a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa11:	68 9e 00 00 00       	push   0x9e
c000fa16:	6a 00                	push   0x0
c000fa18:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fa1c:	56                   	push   esi
c000fa1d:	e8 2e 0d ff ff       	call   c0000750 <memset>
c000fa22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa25:	e8 42 0d ff ff       	call   c000076c <strlen>
c000fa2a:	ba 50 00 00 00       	mov    edx,0x50
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	29 c2                	sub    edx,eax
c000fa34:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000fa38:	d1 ea                	shr    edx,1
c000fa3a:	84 c0                	test   al,al
c000fa3c:	74 19                	je     c000fa57 <Krnl::setBootMessage(char const*)+0x56>
c000fa3e:	01 d2                	add    edx,edx
c000fa40:	43                   	inc    ebx
c000fa41:	01 f2                	add    edx,esi
c000fa43:	80 cc 0f             	or     ah,0xf
c000fa46:	83 c2 02             	add    edx,0x2
c000fa49:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000fa4d:	43                   	inc    ebx
c000fa4e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000fa53:	84 c0                	test   al,al
c000fa55:	75 ec                	jne    c000fa43 <Krnl::setBootMessage(char const*)+0x42>
c000fa57:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fa5c:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fa61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa63:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fa69:	5b                   	pop    ebx
c000fa6a:	5e                   	pop    esi
c000fa6b:	5f                   	pop    edi
c000fa6c:	c3                   	ret    

c000fa6d <kernel_main>:
c000fa6d:	57                   	push   edi
c000fa6e:	bf f9 03 00 00       	mov    edi,0x3f9
c000fa73:	56                   	push   esi
c000fa74:	89 fa                	mov    edx,edi
c000fa76:	53                   	push   ebx
c000fa77:	31 f6                	xor    esi,esi
c000fa79:	83 ec 2c             	sub    esp,0x2c
c000fa7c:	89 f0                	mov    eax,esi
c000fa7e:	ee                   	out    dx,al
c000fa7f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa84:	b0 80                	mov    al,0x80
c000fa86:	89 da                	mov    edx,ebx
c000fa88:	ee                   	out    dx,al
c000fa89:	b1 03                	mov    cl,0x3
c000fa8b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa90:	88 c8                	mov    al,cl
c000fa92:	ee                   	out    dx,al
c000fa93:	89 f0                	mov    eax,esi
c000fa95:	89 fa                	mov    edx,edi
c000fa97:	ee                   	out    dx,al
c000fa98:	88 c8                	mov    al,cl
c000fa9a:	89 da                	mov    edx,ebx
c000fa9c:	ee                   	out    dx,al
c000fa9d:	b0 c7                	mov    al,0xc7
c000fa9f:	ba fa 03 00 00       	mov    edx,0x3fa
c000faa4:	ee                   	out    dx,al
c000faa5:	b0 0b                	mov    al,0xb
c000faa7:	ba fc 03 00 00       	mov    edx,0x3fc
c000faac:	ee                   	out    dx,al
c000faad:	68 30 a8 02 c0       	push   0xc002a830
c000fab2:	e8 48 2f 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fab7:	e8 b8 09 00 00       	call   c0010474 <installVgaTextImplementation()>
c000fabc:	0f b6 05 40 d4 02 c0 	movzx  eax,BYTE PTR ds:0xc002d440
c000fac3:	83 c4 10             	add    esp,0x10
c000fac6:	84 c0                	test   al,al
c000fac8:	74 6c                	je     c000fb36 <kernel_main+0xc9>
c000faca:	31 db                	xor    ebx,ebx
c000facc:	bf 0a 00 00 00       	mov    edi,0xa
c000fad1:	be 05 00 00 00       	mov    esi,0x5
c000fad6:	31 c9                	xor    ecx,ecx
c000fad8:	eb 2a                	jmp    c000fb04 <kernel_main+0x97>
c000fada:	3c 0d                	cmp    al,0xd
c000fadc:	74 1a                	je     c000faf8 <kernel_main+0x8b>
c000fade:	3c 0a                	cmp    al,0xa
c000fae0:	74 40                	je     c000fb22 <kernel_main+0xb5>
c000fae2:	8d 14 b6             	lea    edx,[esi+esi*4]
c000fae5:	80 cc 0e             	or     ah,0xe
c000fae8:	c1 e2 04             	shl    edx,0x4
c000faeb:	01 ca                	add    edx,ecx
c000faed:	41                   	inc    ecx
c000faee:	01 fa                	add    edx,edi
c000faf0:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000faf8:	43                   	inc    ebx
c000faf9:	0f b6 83 40 d4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2bc0]
c000fb00:	84 c0                	test   al,al
c000fb02:	74 32                	je     c000fb36 <kernel_main+0xc9>
c000fb04:	80 b9 76 d4 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2b8a],0xdb
c000fb0b:	75 cd                	jne    c000fada <kernel_main+0x6d>
c000fb0d:	0f b6 91 75 d4 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2b8b]
c000fb14:	83 e2 fe             	and    edx,0xfffffffe
c000fb17:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb1d:	75 bb                	jne    c000fada <kernel_main+0x6d>
c000fb1f:	47                   	inc    edi
c000fb20:	eb b8                	jmp    c000fada <kernel_main+0x6d>
c000fb22:	43                   	inc    ebx
c000fb23:	46                   	inc    esi
c000fb24:	31 c9                	xor    ecx,ecx
c000fb26:	0f b6 83 40 d4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2bc0]
c000fb2d:	bf 0a 00 00 00       	mov    edi,0xa
c000fb32:	84 c0                	test   al,al
c000fb34:	75 ce                	jne    c000fb04 <kernel_main+0x97>
c000fb36:	83 ec 0c             	sub    esp,0xc
c000fb39:	68 48 a8 02 c0       	push   0xc002a848
c000fb3e:	e8 be fe ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c000fb43:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fb48:	a3 80 e6 02 c0       	mov    ds:0xc002e680,eax
c000fb4d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fb52:	05 ff 0f 00 00       	add    eax,0xfff
c000fb57:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb5c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb5f:	e8 cb 03 00 00       	call   c000ff2f <Phys::physicalMemorySetup(unsigned int)>
c000fb64:	e8 83 1c 00 00       	call   c00117ec <Virt::virtualMemorySetup()>
c000fb69:	58                   	pop    eax
c000fb6a:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fb6e:	53                   	push   ebx
c000fb6f:	e8 34 1d 00 00       	call   c00118a8 <VAS::VAS()>
c000fb74:	89 1d d0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7d0,ebx
c000fb7a:	e8 a1 04 ff ff       	call   c0000020 <callGlobalConstructors>
c000fb7f:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fb86:	e8 1c fe ff ff       	call   c000f9a7 <malloc>
c000fb8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb8e:	89 c6                	mov    esi,eax
c000fb90:	e8 83 ee ff ff       	call   c000ea18 <Computer::Computer()>
c000fb95:	6a 00                	push   0x0
c000fb97:	89 35 68 e6 02 c0    	mov    DWORD PTR ds:0xc002e668,esi
c000fb9d:	6a 00                	push   0x0
c000fb9f:	6a 00                	push   0x0
c000fba1:	56                   	push   esi
c000fba2:	e8 7d f2 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fba7:	83 c4 14             	add    esp,0x14
c000fbaa:	53                   	push   ebx
c000fbab:	e8 a8 1f 00 00       	call   c0011b58 <VAS::~VAS()>
c000fbb0:	83 c4 30             	add    esp,0x30
c000fbb3:	5b                   	pop    ebx
c000fbb4:	5e                   	pop    esi
c000fbb5:	5f                   	pop    edi
c000fbb6:	c3                   	ret    

c000fbb7 <Phys::allocateDMA(unsigned long)>:
c000fbb7:	55                   	push   ebp
c000fbb8:	31 ed                	xor    ebp,ebp
c000fbba:	57                   	push   edi
c000fbbb:	56                   	push   esi
c000fbbc:	53                   	push   ebx
c000fbbd:	31 db                	xor    ebx,ebx
c000fbbf:	83 ec 18             	sub    esp,0x18
c000fbc2:	68 67 a8 02 c0       	push   0xc002a867
c000fbc7:	e8 33 2e 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fbcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbd0:	31 d2                	xor    edx,edx
c000fbd2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fbd8:	83 c4 10             	add    esp,0x10
c000fbdb:	c1 ee 0c             	shr    esi,0xc
c000fbde:	31 c9                	xor    ecx,ecx
c000fbe0:	eb 17                	jmp    c000fbf9 <Phys::allocateDMA(unsigned long)+0x42>
c000fbe2:	85 c9                	test   ecx,ecx
c000fbe4:	75 04                	jne    c000fbea <Phys::allocateDMA(unsigned long)+0x33>
c000fbe6:	89 d5                	mov    ebp,edx
c000fbe8:	89 d3                	mov    ebx,edx
c000fbea:	8d 41 01             	lea    eax,[ecx+0x1]
c000fbed:	39 c6                	cmp    esi,eax
c000fbef:	74 23                	je     c000fc14 <Phys::allocateDMA(unsigned long)+0x5d>
c000fbf1:	42                   	inc    edx
c000fbf2:	89 c1                	mov    ecx,eax
c000fbf4:	83 fa 2f             	cmp    edx,0x2f
c000fbf7:	7f 11                	jg     c000fc0a <Phys::allocateDMA(unsigned long)+0x53>
c000fbf9:	80 ba c0 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1940],0x0
c000fc00:	74 e0                	je     c000fbe2 <Phys::allocateDMA(unsigned long)+0x2b>
c000fc02:	31 c9                	xor    ecx,ecx
c000fc04:	42                   	inc    edx
c000fc05:	83 fa 2f             	cmp    edx,0x2f
c000fc08:	7e ef                	jle    c000fbf9 <Phys::allocateDMA(unsigned long)+0x42>
c000fc0a:	83 c4 0c             	add    esp,0xc
c000fc0d:	31 c0                	xor    eax,eax
c000fc0f:	5b                   	pop    ebx
c000fc10:	5e                   	pop    esi
c000fc11:	5f                   	pop    edi
c000fc12:	5d                   	pop    ebp
c000fc13:	c3                   	ret    
c000fc14:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc17:	89 d7                	mov    edi,edx
c000fc19:	4f                   	dec    edi
c000fc1a:	79 03                	jns    c000fc1f <Phys::allocateDMA(unsigned long)+0x68>
c000fc1c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fc1f:	c1 ff 04             	sar    edi,0x4
c000fc22:	89 da                	mov    edx,ebx
c000fc24:	c1 fa 04             	sar    edx,0x4
c000fc27:	39 fa                	cmp    edx,edi
c000fc29:	75 43                	jne    c000fc6e <Phys::allocateDMA(unsigned long)+0xb7>
c000fc2b:	85 c0                	test   eax,eax
c000fc2d:	74 1a                	je     c000fc49 <Phys::allocateDMA(unsigned long)+0x92>
c000fc2f:	be c0 e6 02 c0       	mov    esi,0xc002e6c0
c000fc34:	8d 93 c0 e6 02 c0    	lea    edx,[ebx-0x3ffd1940]
c000fc3a:	f7 d6                	not    esi
c000fc3c:	29 de                	sub    esi,ebx
c000fc3e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fc41:	42                   	inc    edx
c000fc42:	8d 04 16             	lea    eax,[esi+edx*1]
c000fc45:	39 c1                	cmp    ecx,eax
c000fc47:	7f f5                	jg     c000fc3e <Phys::allocateDMA(unsigned long)+0x87>
c000fc49:	83 ec 0c             	sub    esp,0xc
c000fc4c:	68 80 a8 02 c0       	push   0xc002a880
c000fc51:	e8 a9 2d 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	85 ff                	test   edi,edi
c000fc5b:	74 17                	je     c000fc74 <Phys::allocateDMA(unsigned long)+0xbd>
c000fc5d:	83 c4 0c             	add    esp,0xc
c000fc60:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fc66:	5b                   	pop    ebx
c000fc67:	c1 e0 0c             	shl    eax,0xc
c000fc6a:	5e                   	pop    esi
c000fc6b:	5f                   	pop    edi
c000fc6c:	5d                   	pop    ebp
c000fc6d:	c3                   	ret    
c000fc6e:	89 ea                	mov    edx,ebp
c000fc70:	31 c9                	xor    ecx,ecx
c000fc72:	eb 90                	jmp    c000fc04 <Phys::allocateDMA(unsigned long)+0x4d>
c000fc74:	83 c4 0c             	add    esp,0xc
c000fc77:	c1 e3 0c             	shl    ebx,0xc
c000fc7a:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fc80:	5b                   	pop    ebx
c000fc81:	5e                   	pop    esi
c000fc82:	5f                   	pop    edi
c000fc83:	5d                   	pop    ebp
c000fc84:	c3                   	ret    

c000fc85 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fc85:	83 ec 18             	sub    esp,0x18
c000fc88:	68 97 a8 02 c0       	push   0xc002a897
c000fc8d:	e8 6d 2d 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fc92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc96:	83 c4 10             	add    esp,0x10
c000fc99:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca3:	c1 e9 0c             	shr    ecx,0xc
c000fca6:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fcae:	76 29                	jbe    c000fcd9 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fcb0:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fcb6:	c1 ea 0c             	shr    edx,0xc
c000fcb9:	83 c2 10             	add    edx,0x10
c000fcbc:	85 c9                	test   ecx,ecx
c000fcbe:	74 15                	je     c000fcd5 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fcc0:	8d 82 c0 e6 02 c0    	lea    eax,[edx-0x3ffd1940]
c000fcc6:	8d 94 11 c0 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1940]
c000fccd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fcd0:	40                   	inc    eax
c000fcd1:	39 d0                	cmp    eax,edx
c000fcd3:	75 f8                	jne    c000fccd <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fcd5:	83 c4 0c             	add    esp,0xc
c000fcd8:	c3                   	ret    
c000fcd9:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fcdf:	c1 ea 0c             	shr    edx,0xc
c000fce2:	eb d8                	jmp    c000fcbc <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fce4 <Phys::setPageState(unsigned long, bool)>:
c000fce4:	56                   	push   esi
c000fce5:	ba 01 00 00 00       	mov    edx,0x1
c000fcea:	53                   	push   ebx
c000fceb:	8b 35 84 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d584
c000fcf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcf9:	89 c8                	mov    eax,ecx
c000fcfb:	83 e1 07             	and    ecx,0x7
c000fcfe:	c1 e8 03             	shr    eax,0x3
c000fd01:	d3 e3                	shl    ebx,cl
c000fd03:	01 c6                	add    esi,eax
c000fd05:	d3 e2                	shl    edx,cl
c000fd07:	f7 d2                	not    edx
c000fd09:	20 16                	and    BYTE PTR [esi],dl
c000fd0b:	03 05 84 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d584
c000fd11:	08 18                	or     BYTE PTR [eax],bl
c000fd13:	5b                   	pop    ebx
c000fd14:	5e                   	pop    esi
c000fd15:	c3                   	ret    

c000fd16 <Phys::getPageState(unsigned long)>:
c000fd16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fd1a:	8b 15 84 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d584
c000fd20:	89 c8                	mov    eax,ecx
c000fd22:	83 e1 07             	and    ecx,0x7
c000fd25:	c1 e8 03             	shr    eax,0x3
c000fd28:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fd2c:	d3 f8                	sar    eax,cl
c000fd2e:	83 e0 01             	and    eax,0x1
c000fd31:	c3                   	ret    

c000fd32 <Phys::freePage(unsigned long)>:
c000fd32:	53                   	push   ebx
c000fd33:	83 ec 10             	sub    esp,0x10
c000fd36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fd3a:	53                   	push   ebx
c000fd3b:	68 ad a8 02 c0       	push   0xc002a8ad
c000fd40:	e8 ba 2c 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fd4e:	76 3d                	jbe    c000fd8d <Phys::freePage(unsigned long)+0x5b>
c000fd50:	83 ec 0c             	sub    esp,0xc
c000fd53:	c1 eb 0c             	shr    ebx,0xc
c000fd56:	53                   	push   ebx
c000fd57:	e8 ba ff ff ff       	call   c000fd16 <Phys::getPageState(unsigned long)>
c000fd5c:	83 c4 10             	add    esp,0x10
c000fd5f:	84 c0                	test   al,al
c000fd61:	74 19                	je     c000fd7c <Phys::freePage(unsigned long)+0x4a>
c000fd63:	83 ec 08             	sub    esp,0x8
c000fd66:	ff 0d b0 e6 02 c0    	dec    DWORD PTR ds:0xc002e6b0
c000fd6c:	6a 00                	push   0x0
c000fd6e:	53                   	push   ebx
c000fd6f:	e8 70 ff ff ff       	call   c000fce4 <Phys::setPageState(unsigned long, bool)>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	83 c4 08             	add    esp,0x8
c000fd7a:	5b                   	pop    ebx
c000fd7b:	c3                   	ret    
c000fd7c:	c7 44 24 10 c0 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a8c0
c000fd84:	83 c4 08             	add    esp,0x8
c000fd87:	5b                   	pop    ebx
c000fd88:	e9 10 a6 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c000fd8d:	83 ec 08             	sub    esp,0x8
c000fd90:	68 00 10 00 00       	push   0x1000
c000fd95:	53                   	push   ebx
c000fd96:	e8 ea fe ff ff       	call   c000fc85 <Phys::freeDMA(unsigned long, unsigned long)>
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	83 c4 08             	add    esp,0x8
c000fda1:	5b                   	pop    ebx
c000fda2:	c3                   	ret    

c000fda3 <Phys::allocatePage()>:
c000fda3:	56                   	push   esi
c000fda4:	53                   	push   ebx
c000fda5:	83 ec 14             	sub    esp,0x14
c000fda8:	8b 35 a4 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6a4
c000fdae:	89 f3                	mov    ebx,esi
c000fdb0:	eb 0a                	jmp    c000fdbc <Phys::allocatePage()+0x19>
c000fdb2:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c000fdb8:	39 de                	cmp    esi,ebx
c000fdba:	74 24                	je     c000fde0 <Phys::allocatePage()+0x3d>
c000fdbc:	53                   	push   ebx
c000fdbd:	e8 54 ff ff ff       	call   c000fd16 <Phys::getPageState(unsigned long)>
c000fdc2:	5a                   	pop    edx
c000fdc3:	84 c0                	test   al,al
c000fdc5:	74 76                	je     c000fe3d <Phys::allocatePage()+0x9a>
c000fdc7:	43                   	inc    ebx
c000fdc8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdce:	75 e2                	jne    c000fdb2 <Phys::allocatePage()+0xf>
c000fdd0:	31 db                	xor    ebx,ebx
c000fdd2:	c7 05 a4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a4,0x0
c000fddc:	39 de                	cmp    esi,ebx
c000fdde:	75 dc                	jne    c000fdbc <Phys::allocatePage()+0x19>
c000fde0:	83 ec 0c             	sub    esp,0xc
c000fde3:	68 f4 a8 02 c0       	push   0xc002a8f4
c000fde8:	e8 12 2c 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fded:	58                   	pop    eax
c000fdee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fdf6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fdfc:	e8 8d 28 00 00       	call   c001268e <VAS::scanForEviction()>
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	85 c0                	test   eax,eax
c000fe06:	75 76                	jne    c000fe7e <Phys::allocatePage()+0xdb>
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	68 00 10 00 00       	push   0x1000
c000fe10:	e8 a2 fd ff ff       	call   c000fbb7 <Phys::allocateDMA(unsigned long)>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	85 c0                	test   eax,eax
c000fe1a:	75 5c                	jne    c000fe78 <Phys::allocatePage()+0xd5>
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	68 0c a9 02 c0       	push   0xc002a90c
c000fe24:	e8 74 a5 00 00       	call   c001a39d <Krnl::panic(char const*)>
c000fe29:	83 c4 10             	add    esp,0x10
c000fe2c:	8b 1d a4 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6a4
c000fe32:	53                   	push   ebx
c000fe33:	e8 de fe ff ff       	call   c000fd16 <Phys::getPageState(unsigned long)>
c000fe38:	5a                   	pop    edx
c000fe39:	84 c0                	test   al,al
c000fe3b:	75 8a                	jne    c000fdc7 <Phys::allocatePage()+0x24>
c000fe3d:	6a 01                	push   0x1
c000fe3f:	53                   	push   ebx
c000fe40:	e8 9f fe ff ff       	call   c000fce4 <Phys::setPageState(unsigned long, bool)>
c000fe45:	5a                   	pop    edx
c000fe46:	a1 b0 e6 02 c0       	mov    eax,ds:0xc002e6b0
c000fe4b:	59                   	pop    ecx
c000fe4c:	40                   	inc    eax
c000fe4d:	8b 15 a4 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a4
c000fe53:	a3 b0 e6 02 c0       	mov    ds:0xc002e6b0,eax
c000fe58:	c1 e2 0c             	shl    edx,0xc
c000fe5b:	52                   	push   edx
c000fe5c:	ff 35 b4 e6 02 c0    	push   DWORD PTR ds:0xc002e6b4
c000fe62:	50                   	push   eax
c000fe63:	68 d6 a8 02 c0       	push   0xc002a8d6
c000fe68:	e8 92 2b 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fe6d:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c000fe72:	83 c4 10             	add    esp,0x10
c000fe75:	c1 e0 0c             	shl    eax,0xc
c000fe78:	83 c4 14             	add    esp,0x14
c000fe7b:	5b                   	pop    ebx
c000fe7c:	5e                   	pop    esi
c000fe7d:	c3                   	ret    
c000fe7e:	83 ec 08             	sub    esp,0x8
c000fe81:	89 c2                	mov    edx,eax
c000fe83:	6a 01                	push   0x1
c000fe85:	c1 ea 0c             	shr    edx,0xc
c000fe88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe8c:	52                   	push   edx
c000fe8d:	e8 52 fe ff ff       	call   c000fce4 <Phys::setPageState(unsigned long, bool)>
c000fe92:	83 c4 10             	add    esp,0x10
c000fe95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe99:	eb dd                	jmp    c000fe78 <Phys::allocatePage()+0xd5>

c000fe9b <Phys::allocateContiguousPages(int)>:
c000fe9b:	57                   	push   edi
c000fe9c:	56                   	push   esi
c000fe9d:	53                   	push   ebx
c000fe9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fea2:	fa                   	cli    
c000fea3:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000fea9:	31 db                	xor    ebx,ebx
c000feab:	85 db                	test   ebx,ebx
c000fead:	75 11                	jne    c000fec0 <Phys::allocateContiguousPages(int)+0x25>
c000feaf:	e8 ef fe ff ff       	call   c000fda3 <Phys::allocatePage()>
c000feb4:	83 fe 01             	cmp    esi,0x1
c000feb7:	89 c7                	mov    edi,eax
c000feb9:	74 21                	je     c000fedc <Phys::allocateContiguousPages(int)+0x41>
c000febb:	bb 01 00 00 00       	mov    ebx,0x1
c000fec0:	e8 de fe ff ff       	call   c000fda3 <Phys::allocatePage()>
c000fec5:	89 da                	mov    edx,ebx
c000fec7:	c1 e2 0c             	shl    edx,0xc
c000feca:	01 fa                	add    edx,edi
c000fecc:	39 c2                	cmp    edx,eax
c000fece:	74 20                	je     c000fef0 <Phys::allocateContiguousPages(int)+0x55>
c000fed0:	bb 01 00 00 00       	mov    ebx,0x1
c000fed5:	89 c7                	mov    edi,eax
c000fed7:	83 fe 01             	cmp    esi,0x1
c000feda:	75 e4                	jne    c000fec0 <Phys::allocateContiguousPages(int)+0x25>
c000fedc:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000fee1:	48                   	dec    eax
c000fee2:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000fee7:	75 01                	jne    c000feea <Phys::allocateContiguousPages(int)+0x4f>
c000fee9:	fb                   	sti    
c000feea:	89 f8                	mov    eax,edi
c000feec:	5b                   	pop    ebx
c000feed:	5e                   	pop    esi
c000feee:	5f                   	pop    edi
c000feef:	c3                   	ret    
c000fef0:	43                   	inc    ebx
c000fef1:	39 f3                	cmp    ebx,esi
c000fef3:	75 b6                	jne    c000feab <Phys::allocateContiguousPages(int)+0x10>
c000fef5:	eb e5                	jmp    c000fedc <Phys::allocateContiguousPages(int)+0x41>

c000fef7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fef7:	56                   	push   esi
c000fef8:	53                   	push   ebx
c000fef9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fefd:	39 1d a8 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a8,ebx
c000ff03:	73 06                	jae    c000ff0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ff05:	89 1d a8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a8,ebx
c000ff0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff0f:	c1 eb 0c             	shr    ebx,0xc
c000ff12:	c1 e8 0c             	shr    eax,0xc
c000ff15:	39 d8                	cmp    eax,ebx
c000ff17:	73 13                	jae    c000ff2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ff19:	6a 00                	push   0x0
c000ff1b:	8d 70 01             	lea    esi,[eax+0x1]
c000ff1e:	50                   	push   eax
c000ff1f:	e8 c0 fd ff ff       	call   c000fce4 <Phys::setPageState(unsigned long, bool)>
c000ff24:	5a                   	pop    edx
c000ff25:	89 f0                	mov    eax,esi
c000ff27:	59                   	pop    ecx
c000ff28:	39 f3                	cmp    ebx,esi
c000ff2a:	75 ed                	jne    c000ff19 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ff2c:	5b                   	pop    ebx
c000ff2d:	5e                   	pop    esi
c000ff2e:	c3                   	ret    

c000ff2f <Phys::physicalMemorySetup(unsigned int)>:
c000ff2f:	55                   	push   ebp
c000ff30:	57                   	push   edi
c000ff31:	56                   	push   esi
c000ff32:	53                   	push   ebx
c000ff33:	83 ec 40             	sub    esp,0x40
c000ff36:	6a 30                	push   0x30
c000ff38:	6a 00                	push   0x0
c000ff3a:	68 c0 e6 02 c0       	push   0xc002e6c0
c000ff3f:	e8 0c 08 ff ff       	call   c0000750 <memset>
c000ff44:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff48:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff4d:	05 00 10 00 00       	add    eax,0x1000
c000ff52:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ff56:	5b                   	pop    ebx
c000ff57:	31 db                	xor    ebx,ebx
c000ff59:	5e                   	pop    esi
c000ff5a:	50                   	push   eax
c000ff5b:	68 1a a9 02 c0       	push   0xc002a91a
c000ff60:	e8 9a 2a 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	83 ec 08             	sub    esp,0x8
c000ff6b:	6a 01                	push   0x1
c000ff6d:	53                   	push   ebx
c000ff6e:	43                   	inc    ebx
c000ff6f:	e8 70 fd ff ff       	call   c000fce4 <Phys::setPageState(unsigned long, bool)>
c000ff74:	83 c4 10             	add    esp,0x10
c000ff77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff7d:	75 e9                	jne    c000ff68 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ff7f:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000ff86:	66 85 c0             	test   ax,ax
c000ff89:	0f 84 8e 01 00 00    	je     c001011d <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000ff8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ff93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ff9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff9f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ffa4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffa8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ffb0:	eb 15                	jmp    c000ffc7 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000ffb2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000ffb6:	83 c3 18             	add    ebx,0x18
c000ffb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffbd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ffc1:	0f 84 66 01 00 00    	je     c001012d <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000ffc7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ffca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ffcd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ffd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffd8:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ffda:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ffdd:	01 f0                	add    eax,esi
c000ffdf:	55                   	push   ebp
c000ffe0:	11 fa                	adc    edx,edi
c000ffe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffe6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ffea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ffee:	56                   	push   esi
c000ffef:	68 5c a9 02 c0       	push   0xc002a95c
c000fff4:	e8 06 2a 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c000fff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	09 f8                	or     eax,edi
c0010002:	0f 85 25 01 00 00    	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0010008:	4d                   	dec    ebp
c0010009:	75 a7                	jne    c000ffb2 <Phys::physicalMemorySetup(unsigned int)+0x83>
c001000b:	ba 00 00 08 00       	mov    edx,0x80000
c0010010:	89 c1                	mov    ecx,eax
c0010012:	39 f2                	cmp    edx,esi
c0010014:	19 f9                	sbb    ecx,edi
c0010016:	0f 82 a7 00 00 00    	jb     c00100c3 <Phys::physicalMemorySetup(unsigned int)+0x194>
c001001c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010020:	89 c1                	mov    ecx,eax
c0010022:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010026:	0f 83 97 00 00 00    	jae    c00100c3 <Phys::physicalMemorySetup(unsigned int)+0x194>
c001002c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010031:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010035:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010039:	39 fa                	cmp    edx,edi
c001003b:	19 e8                	sbb    eax,ebp
c001003d:	0f 82 14 01 00 00    	jb     c0010157 <Phys::physicalMemorySetup(unsigned int)+0x228>
c0010043:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010047:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001004b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010051:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010056:	83 d5 ff             	adc    ebp,0xffffffff
c0010059:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001005d:	31 c0                	xor    eax,eax
c001005f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010063:	39 fa                	cmp    edx,edi
c0010065:	89 c1                	mov    ecx,eax
c0010067:	19 e9                	sbb    ecx,ebp
c0010069:	0f 83 43 ff ff ff    	jae    c000ffb2 <Phys::physicalMemorySetup(unsigned int)+0x83>
c001006f:	be 00 00 08 00       	mov    esi,0x80000
c0010074:	50                   	push   eax
c0010075:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010079:	57                   	push   edi
c001007a:	56                   	push   esi
c001007b:	68 80 a9 02 c0       	push   0xc002a980
c0010080:	e8 7a 29 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0010085:	5a                   	pop    edx
c0010086:	59                   	pop    ecx
c0010087:	57                   	push   edi
c0010088:	56                   	push   esi
c0010089:	e8 69 fe ff ff       	call   c000fef7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001008e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010096:	83 c4 0c             	add    esp,0xc
c0010099:	0f ac d0 0c          	shrd   eax,edx,0xc
c001009d:	03 05 b4 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6b4
c00100a3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100aa:	a3 b4 e6 02 c0       	mov    ds:0xc002e6b4,eax
c00100af:	52                   	push   edx
c00100b0:	50                   	push   eax
c00100b1:	68 40 a9 02 c0       	push   0xc002a940
c00100b6:	e8 44 29 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00100bb:	83 c4 10             	add    esp,0x10
c00100be:	e9 ef fe ff ff       	jmp    c000ffb2 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100c3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00100c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100cf:	39 ea                	cmp    edx,ebp
c00100d1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00100d5:	0f 82 d7 fe ff ff    	jb     c000ffb2 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100db:	ba ff 1f 00 00       	mov    edx,0x1fff
c00100e0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00100e4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00100e8:	0f 83 c4 fe ff ff    	jae    c000ffb2 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100ee:	39 ee                	cmp    esi,ebp
c00100f0:	89 f8                	mov    eax,edi
c00100f2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00100f6:	0f 83 78 ff ff ff    	jae    c0010074 <Phys::physicalMemorySetup(unsigned int)+0x145>
c00100fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010100:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010104:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010108:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001010c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010110:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010114:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010118:	e9 57 ff ff ff       	jmp    c0010074 <Phys::physicalMemorySetup(unsigned int)+0x145>
c001011d:	83 ec 0c             	sub    esp,0xc
c0010120:	68 32 a9 02 c0       	push   0xc002a932
c0010125:	e8 73 a2 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	bb 40 01 00 00       	mov    ebx,0x140
c0010132:	83 ec 08             	sub    esp,0x8
c0010135:	6a 00                	push   0x0
c0010137:	53                   	push   ebx
c0010138:	43                   	inc    ebx
c0010139:	e8 a6 fb ff ff       	call   c000fce4 <Phys::setPageState(unsigned long, bool)>
c001013e:	ff 05 b4 e6 02 c0    	inc    DWORD PTR ds:0xc002e6b4
c0010144:	83 c4 10             	add    esp,0x10
c0010147:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001014d:	75 e3                	jne    c0010132 <Phys::physicalMemorySetup(unsigned int)+0x203>
c001014f:	83 c4 3c             	add    esp,0x3c
c0010152:	5b                   	pop    ebx
c0010153:	5e                   	pop    esi
c0010154:	5f                   	pop    edi
c0010155:	5d                   	pop    ebp
c0010156:	c3                   	ret    
c0010157:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001015f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010167:	e9 d7 fe ff ff       	jmp    c0010043 <Phys::physicalMemorySetup(unsigned int)+0x114>

c001016c <Pipe::isAtty()>:
c001016c:	31 c0                	xor    eax,eax
c001016e:	c3                   	ret    
c001016f:	90                   	nop

c0010170 <Pipe::~Pipe()>:
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	ba ec a9 02 c0       	mov    edx,0xc002a9ec
c0010178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017c:	89 10                	mov    DWORD PTR [eax],edx
c001017e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010182:	83 ec 0c             	sub    esp,0xc
c0010185:	50                   	push   eax
c0010186:	e8 41 12 00 00       	call   c00113cc <UnixFile::~UnixFile()>
c001018b:	83 c4 10             	add    esp,0x10
c001018e:	90                   	nop
c001018f:	83 c4 0c             	add    esp,0xc
c0010192:	c3                   	ret    
c0010193:	90                   	nop

c0010194 <Pipe::~Pipe()>:
c0010194:	83 ec 0c             	sub    esp,0xc
c0010197:	83 ec 0c             	sub    esp,0xc
c001019a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001019e:	e8 cd ff ff ff       	call   c0010170 <Pipe::~Pipe()>
c00101a3:	83 c4 10             	add    esp,0x10
c00101a6:	83 ec 08             	sub    esp,0x8
c00101a9:	6a 20                	push   0x20
c00101ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101af:	e8 73 27 00 00       	call   c0012927 <operator delete(void*, unsigned long)>
c00101b4:	83 c4 10             	add    esp,0x10
c00101b7:	83 c4 0c             	add    esp,0xc
c00101ba:	c3                   	ret    
c00101bb:	90                   	nop

c00101bc <Pipe::read(unsigned long long, void*, int*)>:
c00101bc:	55                   	push   ebp
c00101bd:	57                   	push   edi
c00101be:	56                   	push   esi
c00101bf:	53                   	push   ebx
c00101c0:	83 ec 1c             	sub    esp,0x1c
c00101c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00101c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00101cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00101cf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00101d2:	89 c8                	mov    eax,ecx
c00101d4:	99                   	cdq    
c00101d5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00101d9:	74 24                	je     c00101ff <Pipe::read(unsigned long long, void*, int*)+0x43>
c00101db:	39 f9                	cmp    ecx,edi
c00101dd:	89 d1                	mov    ecx,edx
c00101df:	19 f1                	sbb    ecx,esi
c00101e1:	73 1c                	jae    c00101ff <Pipe::read(unsigned long long, void*, int*)+0x43>
c00101e3:	fa                   	cli    
c00101e4:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c00101ea:	e8 40 dd 00 00       	call   c001df2f <schedule()>
c00101ef:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00101f4:	48                   	dec    eax
c00101f5:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00101fa:	75 d3                	jne    c00101cf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101fc:	fb                   	sti    
c00101fd:	eb d0                	jmp    c00101cf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101ff:	39 f8                	cmp    eax,edi
c0010201:	89 d1                	mov    ecx,edx
c0010203:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010206:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001020a:	19 f1                	sbb    ecx,esi
c001020c:	73 07                	jae    c0010215 <Pipe::read(unsigned long long, void*, int*)+0x59>
c001020e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010211:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010215:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010218:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001021b:	29 f7                	sub    edi,esi
c001021d:	89 f8                	mov    eax,edi
c001021f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010223:	99                   	cdq    
c0010224:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010227:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001022b:	19 d0                	sbb    eax,edx
c001022d:	73 07                	jae    c0010236 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001022f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010232:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010236:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010239:	89 ea                	mov    edx,ebp
c001023b:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c001023f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010244:	74 0d                	je     c0010253 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010246:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010249:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001024d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010253:	85 d2                	test   edx,edx
c0010255:	74 11                	je     c0010268 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010257:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001025b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001025e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010262:	89 d1                	mov    ecx,edx
c0010264:	89 c7                	mov    edi,eax
c0010266:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010268:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001026b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001026e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010271:	99                   	cdq    
c0010272:	89 f7                	mov    edi,esi
c0010274:	03 04 24             	add    eax,DWORD PTR [esp]
c0010277:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001027b:	c1 ff 1f             	sar    edi,0x1f
c001027e:	57                   	push   edi
c001027f:	56                   	push   esi
c0010280:	52                   	push   edx
c0010281:	50                   	push   eax
c0010282:	e8 4d 6c 01 00       	call   c0026ed4 <__umoddi3>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001028d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010292:	75 10                	jne    c00102a4 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	68 a9 a9 02 c0       	push   0xc002a9a9
c001029c:	e8 fc a0 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00102a8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00102ab:	89 10                	mov    DWORD PTR [eax],edx
c00102ad:	83 c4 1c             	add    esp,0x1c
c00102b0:	31 c0                	xor    eax,eax
c00102b2:	5b                   	pop    ebx
c00102b3:	5e                   	pop    esi
c00102b4:	5f                   	pop    edi
c00102b5:	5d                   	pop    ebp
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Pipe::write(unsigned long long, void*, int*)>:
c00102b8:	55                   	push   ebp
c00102b9:	57                   	push   edi
c00102ba:	56                   	push   esi
c00102bb:	53                   	push   ebx
c00102bc:	83 ec 1c             	sub    esp,0x1c
c00102bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00102c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102c7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00102ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00102ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00102d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102d5:	89 d8                	mov    eax,ebx
c00102d7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00102da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00102de:	89 d6                	mov    esi,edx
c00102e0:	89 d7                	mov    edi,edx
c00102e2:	c1 ff 1f             	sar    edi,0x1f
c00102e5:	03 34 24             	add    esi,DWORD PTR [esp]
c00102e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102ec:	c1 f8 1f             	sar    eax,0x1f
c00102ef:	39 f3                	cmp    ebx,esi
c00102f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102f9:	19 f8                	sbb    eax,edi
c00102fb:	b8 01 00 00 00       	mov    eax,0x1
c0010300:	72 6e                	jb     c0010370 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010302:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010305:	01 d0                	add    eax,edx
c0010307:	99                   	cdq    
c0010308:	f7 fb                	idiv   ebx
c001030a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001030e:	29 d3                	sub    ebx,edx
c0010310:	89 d7                	mov    edi,edx
c0010312:	89 de                	mov    esi,ebx
c0010314:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010317:	c1 fb 1f             	sar    ebx,0x1f
c001031a:	39 f2                	cmp    edx,esi
c001031c:	19 d8                	sbb    eax,ebx
c001031e:	b8 00 00 00 00       	mov    eax,0x0
c0010323:	72 04                	jb     c0010329 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010325:	89 d0                	mov    eax,edx
c0010327:	29 f0                	sub    eax,esi
c0010329:	89 d3                	mov    ebx,edx
c001032b:	29 c3                	sub    ebx,eax
c001032d:	74 0b                	je     c001033a <Pipe::write(unsigned long long, void*, int*)+0x82>
c001032f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010332:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010336:	89 d9                	mov    ecx,ebx
c0010338:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001033a:	85 c0                	test   eax,eax
c001033c:	74 0d                	je     c001034b <Pipe::write(unsigned long long, void*, int*)+0x93>
c001033e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010342:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010345:	89 de                	mov    esi,ebx
c0010347:	89 c1                	mov    ecx,eax
c0010349:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001034b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001034e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010353:	75 10                	jne    c0010365 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010355:	83 ec 0c             	sub    esp,0xc
c0010358:	68 c5 a9 02 c0       	push   0xc002a9c5
c001035d:	e8 3b a0 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0010362:	83 c4 10             	add    esp,0x10
c0010365:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010369:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001036c:	89 08                	mov    DWORD PTR [eax],ecx
c001036e:	31 c0                	xor    eax,eax
c0010370:	83 c4 1c             	add    esp,0x1c
c0010373:	5b                   	pop    ebx
c0010374:	5e                   	pop    esi
c0010375:	5f                   	pop    edi
c0010376:	5d                   	pop    ebp
c0010377:	c3                   	ret    

c0010378 <Pipe::Pipe(int)>:
c0010378:	83 ec 0c             	sub    esp,0xc
c001037b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001037f:	83 ec 08             	sub    esp,0x8
c0010382:	6a 00                	push   0x0
c0010384:	50                   	push   eax
c0010385:	e8 60 0e 00 00       	call   c00111ea <UnixFile::UnixFile(int)>
c001038a:	83 c4 10             	add    esp,0x10
c001038d:	ba ec a9 02 c0       	mov    edx,0xc002a9ec
c0010392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010396:	89 10                	mov    DWORD PTR [eax],edx
c0010398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001039c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00103a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00103a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00103ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00103b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103bd:	83 ec 0c             	sub    esp,0xc
c00103c0:	50                   	push   eax
c00103c1:	e8 e1 f5 ff ff       	call   c000f9a7 <malloc>
c00103c6:	83 c4 10             	add    esp,0x10
c00103c9:	89 c2                	mov    edx,eax
c00103cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00103d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00103da:	90                   	nop
c00103db:	83 c4 0c             	add    esp,0xc
c00103de:	c3                   	ret    
c00103df:	90                   	nop

c00103e0 <VgaText::isAtty()>:
c00103e0:	b0 01                	mov    al,0x1
c00103e2:	c3                   	ret    
c00103e3:	90                   	nop

c00103e4 <VgaText::~VgaText()>:
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	ba 74 aa 02 c0       	mov    edx,0xc002aa74
c00103ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f0:	89 10                	mov    DWORD PTR [eax],edx
c00103f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f6:	83 ec 0c             	sub    esp,0xc
c00103f9:	50                   	push   eax
c00103fa:	e8 cd 0f 00 00       	call   c00113cc <UnixFile::~UnixFile()>
c00103ff:	83 c4 10             	add    esp,0x10
c0010402:	90                   	nop
c0010403:	83 c4 0c             	add    esp,0xc
c0010406:	c3                   	ret    
c0010407:	90                   	nop

c0010408 <VgaText::~VgaText()>:
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	83 ec 0c             	sub    esp,0xc
c001040e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010412:	e8 cd ff ff ff       	call   c00103e4 <VgaText::~VgaText()>
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	83 ec 08             	sub    esp,0x8
c001041d:	68 c4 02 00 00       	push   0x2c4
c0010422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010426:	e8 fc 24 00 00       	call   c0012927 <operator delete(void*, unsigned long)>
c001042b:	83 c4 10             	add    esp,0x10
c001042e:	83 c4 0c             	add    esp,0xc
c0010431:	c3                   	ret    

c0010432 <VgaText::read(unsigned long long, void*, int*)>:
c0010432:	83 ec 10             	sub    esp,0x10
c0010435:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010439:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001043d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010441:	e8 86 5a 00 00       	call   c0015ecc <readKeyboard(VgaText*, char*, unsigned long)>
c0010446:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001044a:	89 02                	mov    DWORD PTR [edx],eax
c001044c:	31 c0                	xor    eax,eax
c001044e:	83 c4 1c             	add    esp,0x1c
c0010451:	c3                   	ret    

c0010452 <setTerminalScrollLock(bool)>:
c0010452:	c3                   	ret    

c0010453 <addToTerminalCycle(VgaText*)>:
c0010453:	8b 15 20 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e720
c0010459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045d:	85 d2                	test   edx,edx
c001045f:	75 09                	jne    c001046a <addToTerminalCycle(VgaText*)+0x17>
c0010461:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010464:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c0010469:	c3                   	ret    
c001046a:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001046d:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010470:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010473:	c3                   	ret    

c0010474 <installVgaTextImplementation()>:
c0010474:	83 ec 10             	sub    esp,0x10
c0010477:	6a 20                	push   0x20
c0010479:	6a 00                	push   0x0
c001047b:	68 00 e7 02 c0       	push   0xc002e700
c0010480:	e8 cb 02 ff ff       	call   c0000750 <memset>
c0010485:	83 c4 1c             	add    esp,0x1c
c0010488:	c3                   	ret    

c0010489 <scrollTerminalScrollLock(int)>:
c0010489:	c3                   	ret    

c001048a <VgaText::updateTitle()>:
c001048a:	53                   	push   ebx
c001048b:	31 c0                	xor    eax,eax
c001048d:	83 ec 58             	sub    esp,0x58
c0010490:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010494:	89 e1                	mov    ecx,esp
c0010496:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001049a:	40                   	inc    eax
c001049b:	83 f8 50             	cmp    eax,0x50
c001049e:	75 f6                	jne    c0010496 <VgaText::updateTitle()+0xc>
c00104a0:	31 c0                	xor    eax,eax
c00104a2:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00104a9:	84 db                	test   bl,bl
c00104ab:	74 06                	je     c00104b3 <VgaText::updateTitle()+0x29>
c00104ad:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00104b0:	40                   	inc    eax
c00104b1:	eb ef                	jmp    c00104a2 <VgaText::updateTitle()+0x18>
c00104b3:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00104b6:	85 c0                	test   eax,eax
c00104b8:	74 09                	je     c00104c3 <VgaText::updateTitle()+0x39>
c00104ba:	53                   	push   ebx
c00104bb:	53                   	push   ebx
c00104bc:	51                   	push   ecx
c00104bd:	52                   	push   edx
c00104be:	ff d0                	call   eax
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	83 c4 58             	add    esp,0x58
c00104c6:	5b                   	pop    ebx
c00104c7:	c3                   	ret    

c00104c8 <VgaText::load()>:
c00104c8:	53                   	push   ebx
c00104c9:	31 c0                	xor    eax,eax
c00104cb:	83 ec 58             	sub    esp,0x58
c00104ce:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00104d2:	89 e2                	mov    edx,esp
c00104d4:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00104d8:	40                   	inc    eax
c00104d9:	83 f8 50             	cmp    eax,0x50
c00104dc:	75 f6                	jne    c00104d4 <VgaText::load()+0xc>
c00104de:	31 c0                	xor    eax,eax
c00104e0:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00104e7:	84 c9                	test   cl,cl
c00104e9:	74 06                	je     c00104f1 <VgaText::load()+0x29>
c00104eb:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00104ee:	40                   	inc    eax
c00104ef:	eb ef                	jmp    c00104e0 <VgaText::load()+0x18>
c00104f1:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00104f4:	85 c0                	test   eax,eax
c00104f6:	74 09                	je     c0010501 <VgaText::load()+0x39>
c00104f8:	51                   	push   ecx
c00104f9:	51                   	push   ecx
c00104fa:	52                   	push   edx
c00104fb:	53                   	push   ebx
c00104fc:	ff d0                	call   eax
c00104fe:	83 c4 10             	add    esp,0x10
c0010501:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010504:	85 c0                	test   eax,eax
c0010506:	74 09                	je     c0010511 <VgaText::load()+0x49>
c0010508:	83 ec 0c             	sub    esp,0xc
c001050b:	53                   	push   ebx
c001050c:	ff d0                	call   eax
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	83 c4 58             	add    esp,0x58
c0010514:	5b                   	pop    ebx
c0010515:	c3                   	ret    

c0010516 <VgaText::updateCursor()>:
c0010516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051a:	39 05 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,eax
c0010520:	75 09                	jne    c001052b <VgaText::updateCursor()+0x15>
c0010522:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010525:	85 c0                	test   eax,eax
c0010527:	74 02                	je     c001052b <VgaText::updateCursor()+0x15>
c0010529:	ff e0                	jmp    eax
c001052b:	c3                   	ret    

c001052c <VgaText::doANSI_SGR(int)>:
c001052c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010534:	85 d2                	test   edx,edx
c0010536:	75 0b                	jne    c0010543 <VgaText::doANSI_SGR(int)+0x17>
c0010538:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001053b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001053e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010541:	eb 59                	jmp    c001059c <VgaText::doANSI_SGR(int)+0x70>
c0010543:	83 fa 07             	cmp    edx,0x7
c0010546:	75 0b                	jne    c0010553 <VgaText::doANSI_SGR(int)+0x27>
c0010548:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001054b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001054e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010551:	eb 49                	jmp    c001059c <VgaText::doANSI_SGR(int)+0x70>
c0010553:	83 fa 1b             	cmp    edx,0x1b
c0010556:	74 e0                	je     c0010538 <VgaText::doANSI_SGR(int)+0xc>
c0010558:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001055b:	83 f9 07             	cmp    ecx,0x7
c001055e:	77 09                	ja     c0010569 <VgaText::doANSI_SGR(int)+0x3d>
c0010560:	8b 14 8d c0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a40]
c0010567:	eb 20                	jmp    c0010589 <VgaText::doANSI_SGR(int)+0x5d>
c0010569:	8d 4a d8             	lea    ecx,[edx-0x28]
c001056c:	83 f9 07             	cmp    ecx,0x7
c001056f:	77 09                	ja     c001057a <VgaText::doANSI_SGR(int)+0x4e>
c0010571:	8b 14 8d c0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a40]
c0010578:	eb 22                	jmp    c001059c <VgaText::doANSI_SGR(int)+0x70>
c001057a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001057d:	83 f9 07             	cmp    ecx,0x7
c0010580:	77 0b                	ja     c001058d <VgaText::doANSI_SGR(int)+0x61>
c0010582:	8b 14 95 78 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b88]
c0010589:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001058c:	c3                   	ret    
c001058d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010590:	83 f9 07             	cmp    ecx,0x7
c0010593:	77 0a                	ja     c001059f <VgaText::doANSI_SGR(int)+0x73>
c0010595:	8b 14 95 50 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2bb0]
c001059c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001059f:	c3                   	ret    

c00105a0 <VgaText::setDefaultBgColour(VgaColour)>:
c00105a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105a8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00105ab:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00105ae:	c3                   	ret    
c00105af:	90                   	nop

c00105b0 <VgaText::setDefaultFgColour(VgaColour)>:
c00105b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105b8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00105bb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00105be:	c3                   	ret    
c00105bf:	90                   	nop

c00105c0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00105c0:	53                   	push   ebx
c00105c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00105c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00105cd:	51                   	push   ecx
c00105ce:	e8 cd ff ff ff       	call   c00105a0 <VgaText::setDefaultBgColour(VgaColour)>
c00105d3:	58                   	pop    eax
c00105d4:	5a                   	pop    edx
c00105d5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00105d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00105dd:	5b                   	pop    ebx
c00105de:	eb d0                	jmp    c00105b0 <VgaText::setDefaultFgColour(VgaColour)>

c00105e0 <VgaText::setTitleTextColour(VgaColour)>:
c00105e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105e8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00105eb:	e9 9a fe ff ff       	jmp    c001048a <VgaText::updateTitle()>

c00105f0 <VgaText::setTitleColour(VgaColour)>:
c00105f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00105fb:	e9 8a fe ff ff       	jmp    c001048a <VgaText::updateTitle()>

c0010600 <VgaText::setTitle(char*)>:
c0010600:	53                   	push   ebx
c0010601:	83 ec 10             	sub    esp,0x10
c0010604:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060c:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010612:	50                   	push   eax
c0010613:	e8 f4 01 ff ff       	call   c000080c <strcpy>
c0010618:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001061c:	83 c4 18             	add    esp,0x18
c001061f:	5b                   	pop    ebx
c0010620:	e9 65 fe ff ff       	jmp    c001048a <VgaText::updateTitle()>
c0010625:	90                   	nop

c0010626 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010626:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001062a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001062f:	83 e0 0f             	and    eax,0xf
c0010632:	c1 e2 04             	shl    edx,0x4
c0010635:	09 d0                	or     eax,edx
c0010637:	c3                   	ret    

c0010638 <VgaText::scrollScreen()>:
c0010638:	55                   	push   ebp
c0010639:	b9 01 00 00 00       	mov    ecx,0x1
c001063e:	57                   	push   edi
c001063f:	56                   	push   esi
c0010640:	53                   	push   ebx
c0010641:	83 ec 0c             	sub    esp,0xc
c0010644:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010648:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001064e:	31 ff                	xor    edi,edi
c0010650:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010653:	83 f9 17             	cmp    ecx,0x17
c0010656:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010659:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010660:	75 27                	jne    c0010689 <VgaText::scrollScreen()+0x51>
c0010662:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010665:	01 f5                	add    ebp,esi
c0010667:	f7 c7 01 00 00 00    	test   edi,0x1
c001066d:	74 16                	je     c0010685 <VgaText::scrollScreen()+0x4d>
c001066f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010673:	50                   	push   eax
c0010674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010678:	50                   	push   eax
c0010679:	e8 a8 ff ff ff       	call   c0010626 <VgaText::combineColours(unsigned char, unsigned char)>
c001067e:	5a                   	pop    edx
c001067f:	5a                   	pop    edx
c0010680:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010683:	eb 04                	jmp    c0010689 <VgaText::scrollScreen()+0x51>
c0010685:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010689:	47                   	inc    edi
c001068a:	46                   	inc    esi
c001068b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010691:	75 bd                	jne    c0010650 <VgaText::scrollScreen()+0x18>
c0010693:	41                   	inc    ecx
c0010694:	83 f9 18             	cmp    ecx,0x18
c0010697:	75 af                	jne    c0010648 <VgaText::scrollScreen()+0x10>
c0010699:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c001069f:	75 1b                	jne    c00106bc <VgaText::scrollScreen()+0x84>
c00106a1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00106a5:	74 05                	je     c00106ac <VgaText::scrollScreen()+0x74>
c00106a7:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00106aa:	eb 10                	jmp    c00106bc <VgaText::scrollScreen()+0x84>
c00106ac:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00106af:	85 c0                	test   eax,eax
c00106b1:	74 09                	je     c00106bc <VgaText::scrollScreen()+0x84>
c00106b3:	83 ec 0c             	sub    esp,0xc
c00106b6:	53                   	push   ebx
c00106b7:	ff d0                	call   eax
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106c0:	83 c4 0c             	add    esp,0xc
c00106c3:	5b                   	pop    ebx
c00106c4:	5e                   	pop    esi
c00106c5:	5f                   	pop    edi
c00106c6:	5d                   	pop    ebp
c00106c7:	e9 4a fe ff ff       	jmp    c0010516 <VgaText::updateCursor()>

c00106cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00106cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00106d1:	c1 e0 08             	shl    eax,0x8
c00106d4:	89 c2                	mov    edx,eax
c00106d6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00106db:	09 d0                	or     eax,edx
c00106dd:	c3                   	ret    

c00106de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00106de:	56                   	push   esi
c00106df:	53                   	push   ebx
c00106e0:	51                   	push   ecx
c00106e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00106e5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106ea:	50                   	push   eax
c00106eb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106f0:	50                   	push   eax
c00106f1:	e8 30 ff ff ff       	call   c0010626 <VgaText::combineColours(unsigned char, unsigned char)>
c00106f6:	5b                   	pop    ebx
c00106f7:	0f b6 c0             	movzx  eax,al
c00106fa:	5e                   	pop    esi
c00106fb:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010700:	50                   	push   eax
c0010701:	53                   	push   ebx
c0010702:	e8 c5 ff ff ff       	call   c00106cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010707:	5a                   	pop    edx
c0010708:	5e                   	pop    esi
c0010709:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001070c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010712:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010716:	0f b7 d2             	movzx  edx,dx
c0010719:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001071d:	39 0d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ecx
c0010723:	75 10                	jne    c0010735 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010725:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010728:	85 c0                	test   eax,eax
c001072a:	74 09                	je     c0010735 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001072c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010730:	5a                   	pop    edx
c0010731:	5b                   	pop    ebx
c0010732:	5e                   	pop    esi
c0010733:	ff e0                	jmp    eax
c0010735:	58                   	pop    eax
c0010736:	5b                   	pop    ebx
c0010737:	5e                   	pop    esi
c0010738:	c3                   	ret    
c0010739:	90                   	nop

c001073a <VgaText::getCursorX()>:
c001073a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001073e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010741:	c3                   	ret    

c0010742 <VgaText::getCursorY()>:
c0010742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010746:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010749:	c3                   	ret    

c001074a <VgaText::setCursor(int, int)>:
c001074a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001074e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010752:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010759:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001075c:	e9 b5 fd ff ff       	jmp    c0010516 <VgaText::updateCursor()>

c0010761 <setActiveTerminal(VgaText*)>:
c0010761:	53                   	push   ebx
c0010762:	83 ec 08             	sub    esp,0x8
c0010765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010769:	85 db                	test   ebx,ebx
c001076b:	75 11                	jne    c001077e <setActiveTerminal(VgaText*)+0x1d>
c001076d:	c7 44 24 10 00 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa00
c0010775:	83 c4 08             	add    esp,0x8
c0010778:	5b                   	pop    ebx
c0010779:	e9 1f 9c 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c001077e:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0010783:	85 c0                	test   eax,eax
c0010785:	74 0c                	je     c0010793 <setActiveTerminal(VgaText*)+0x32>
c0010787:	83 ec 0c             	sub    esp,0xc
c001078a:	50                   	push   eax
c001078b:	e8 86 fd ff ff       	call   c0010516 <VgaText::updateCursor()>
c0010790:	83 c4 10             	add    esp,0x10
c0010793:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c0010799:	51                   	push   ecx
c001079a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001079d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107a0:	53                   	push   ebx
c00107a1:	e8 a4 ff ff ff       	call   c001074a <VgaText::setCursor(int, int)>
c00107a6:	83 c4 10             	add    esp,0x10
c00107a9:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107ad:	75 07                	jne    c00107b6 <setActiveTerminal(VgaText*)+0x55>
c00107af:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00107b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ba:	83 c4 08             	add    esp,0x8
c00107bd:	5b                   	pop    ebx
c00107be:	e9 05 fd ff ff       	jmp    c00104c8 <VgaText::load()>

c00107c3 <doTerminalCycle()>:
c00107c3:	83 ec 18             	sub    esp,0x18
c00107c6:	a1 20 e7 02 c0       	mov    eax,ds:0xc002e720
c00107cb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107ce:	50                   	push   eax
c00107cf:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c00107d4:	e8 88 ff ff ff       	call   c0010761 <setActiveTerminal(VgaText*)>
c00107d9:	83 c4 1c             	add    esp,0x1c
c00107dc:	c3                   	ret    
c00107dd:	90                   	nop

c00107de <VgaText::setCursorX(int)>:
c00107de:	83 ec 10             	sub    esp,0x10
c00107e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107e5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00107e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ec:	50                   	push   eax
c00107ed:	e8 58 ff ff ff       	call   c001074a <VgaText::setCursor(int, int)>
c00107f2:	83 c4 1c             	add    esp,0x1c
c00107f5:	c3                   	ret    

c00107f6 <VgaText::setCursorY(int)>:
c00107f6:	83 ec 10             	sub    esp,0x10
c00107f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010801:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010804:	50                   	push   eax
c0010805:	e8 40 ff ff ff       	call   c001074a <VgaText::setCursor(int, int)>
c001080a:	83 c4 1c             	add    esp,0x1c
c001080d:	c3                   	ret    

c001080e <VgaText::incrementCursor(bool)>:
c001080e:	56                   	push   esi
c001080f:	53                   	push   ebx
c0010810:	51                   	push   ecx
c0010811:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010815:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010819:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001081c:	40                   	inc    eax
c001081d:	83 f8 50             	cmp    eax,0x50
c0010820:	74 05                	je     c0010827 <VgaText::incrementCursor(bool)+0x19>
c0010822:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010825:	eb 24                	jmp    c001084b <VgaText::incrementCursor(bool)+0x3d>
c0010827:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001082a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010831:	8d 50 01             	lea    edx,[eax+0x1]
c0010834:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010837:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001083a:	75 0f                	jne    c001084b <VgaText::incrementCursor(bool)+0x3d>
c001083c:	83 ec 0c             	sub    esp,0xc
c001083f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010842:	53                   	push   ebx
c0010843:	e8 f0 fd ff ff       	call   c0010638 <VgaText::scrollScreen()>
c0010848:	83 c4 10             	add    esp,0x10
c001084b:	89 f0                	mov    eax,esi
c001084d:	84 c0                	test   al,al
c001084f:	74 0c                	je     c001085d <VgaText::incrementCursor(bool)+0x4f>
c0010851:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010855:	5a                   	pop    edx
c0010856:	5b                   	pop    ebx
c0010857:	5e                   	pop    esi
c0010858:	e9 b9 fc ff ff       	jmp    c0010516 <VgaText::updateCursor()>
c001085d:	58                   	pop    eax
c001085e:	5b                   	pop    ebx
c001085f:	5e                   	pop    esi
c0010860:	c3                   	ret    
c0010861:	90                   	nop

c0010862 <VgaText::decrementCursor(bool)>:
c0010862:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010866:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001086a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001086d:	85 c0                	test   eax,eax
c001086f:	74 04                	je     c0010875 <VgaText::decrementCursor(bool)+0x13>
c0010871:	48                   	dec    eax
c0010872:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010875:	84 c9                	test   cl,cl
c0010877:	74 09                	je     c0010882 <VgaText::decrementCursor(bool)+0x20>
c0010879:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001087d:	e9 94 fc ff ff       	jmp    c0010516 <VgaText::updateCursor()>
c0010882:	c3                   	ret    
c0010883:	90                   	nop

c0010884 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010884:	53                   	push   ebx
c0010885:	83 ec 08             	sub    esp,0x8
c0010888:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001088c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010890:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010894:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010898:	3c 07                	cmp    al,0x7
c001089a:	75 2a                	jne    c00108c6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001089c:	a1 d8 e7 02 c0       	mov    eax,ds:0xc002e7d8
c00108a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00108a9:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00108b1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00108b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108bd:	83 c4 08             	add    esp,0x8
c00108c0:	5b                   	pop    ebx
c00108c1:	e9 46 2f 00 00       	jmp    c001380c <Buzzer::beep(int, int, bool)>
c00108c6:	3c 0d                	cmp    al,0xd
c00108c8:	75 09                	jne    c00108d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00108ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108d1:	eb 2c                	jmp    c00108ff <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00108d3:	3c 0a                	cmp    al,0xa
c00108d5:	75 31                	jne    c0010908 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00108d7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108e1:	8d 50 01             	lea    edx,[eax+0x1]
c00108e4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108e7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108ea:	75 0f                	jne    c00108fb <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00108ec:	83 ec 0c             	sub    esp,0xc
c00108ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108f2:	53                   	push   ebx
c00108f3:	e8 40 fd ff ff       	call   c0010638 <VgaText::scrollScreen()>
c00108f8:	83 c4 10             	add    esp,0x10
c00108fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108ff:	83 c4 08             	add    esp,0x8
c0010902:	5b                   	pop    ebx
c0010903:	e9 0e fc ff ff       	jmp    c0010516 <VgaText::updateCursor()>
c0010908:	3c 08                	cmp    al,0x8
c001090a:	75 25                	jne    c0010931 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001090c:	50                   	push   eax
c001090d:	50                   	push   eax
c001090e:	6a 01                	push   0x1
c0010910:	53                   	push   ebx
c0010911:	e8 4c ff ff ff       	call   c0010862 <VgaText::decrementCursor(bool)>
c0010916:	5a                   	pop    edx
c0010917:	59                   	pop    ecx
c0010918:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001091b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001091e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010921:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010924:	6a 20                	push   0x20
c0010926:	53                   	push   ebx
c0010927:	e8 b2 fd ff ff       	call   c00106de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001092c:	83 c4 28             	add    esp,0x28
c001092f:	5b                   	pop    ebx
c0010930:	c3                   	ret    
c0010931:	83 ec 08             	sub    esp,0x8
c0010934:	0f be c0             	movsx  eax,al
c0010937:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001093a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001093d:	51                   	push   ecx
c001093e:	52                   	push   edx
c001093f:	50                   	push   eax
c0010940:	53                   	push   ebx
c0010941:	e8 98 fd ff ff       	call   c00106de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010946:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001094a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010952:	83 c4 28             	add    esp,0x28
c0010955:	5b                   	pop    ebx
c0010956:	e9 b3 fe ff ff       	jmp    c001080e <VgaText::incrementCursor(bool)>
c001095b:	90                   	nop

c001095c <VgaText::doUpdate()>:
c001095c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010960:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010963:	85 c0                	test   eax,eax
c0010965:	74 02                	je     c0010969 <VgaText::doUpdate()+0xd>
c0010967:	ff e0                	jmp    eax
c0010969:	c3                   	ret    

c001096a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001096a:	55                   	push   ebp
c001096b:	31 ed                	xor    ebp,ebp
c001096d:	57                   	push   edi
c001096e:	56                   	push   esi
c001096f:	53                   	push   ebx
c0010970:	83 ec 1c             	sub    esp,0x1c
c0010973:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010977:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001097c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010983:	50                   	push   eax
c0010984:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010989:	50                   	push   eax
c001098a:	e8 97 fc ff ff       	call   c0010626 <VgaText::combineColours(unsigned char, unsigned char)>
c001098f:	59                   	pop    ecx
c0010990:	0f b6 c0             	movzx  eax,al
c0010993:	5e                   	pop    esi
c0010994:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010999:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001099d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109a4:	0f b7 f6             	movzx  esi,si
c00109a7:	01 f6                	add    esi,esi
c00109a9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109ac:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00109af:	84 c0                	test   al,al
c00109b1:	0f 84 fd 00 00 00    	je     c0010ab4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00109b7:	3c 0d                	cmp    al,0xd
c00109b9:	75 0c                	jne    c00109c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00109bb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109c2:	e9 e7 00 00 00       	jmp    c0010aae <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00109c7:	3c 0a                	cmp    al,0xa
c00109c9:	75 47                	jne    c0010a12 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00109cb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00109ce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00109d8:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00109db:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00109de:	75 0f                	jne    c00109ef <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00109e0:	83 ec 0c             	sub    esp,0xc
c00109e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00109e6:	53                   	push   ebx
c00109e7:	e8 4c fc ff ff       	call   c0010638 <VgaText::scrollScreen()>
c00109ec:	83 c4 10             	add    esp,0x10
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	31 ed                	xor    ebp,ebp
c00109f4:	53                   	push   ebx
c00109f5:	e8 1c fb ff ff       	call   c0010516 <VgaText::updateCursor()>
c00109fa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109ff:	83 c4 10             	add    esp,0x10
c0010a02:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a05:	0f b7 f6             	movzx  esi,si
c0010a08:	01 f6                	add    esi,esi
c0010a0a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a0d:	e9 9c 00 00 00       	jmp    c0010aae <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a12:	3c 08                	cmp    al,0x8
c0010a14:	75 35                	jne    c0010a4b <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010a16:	56                   	push   esi
c0010a17:	56                   	push   esi
c0010a18:	6a 01                	push   0x1
c0010a1a:	53                   	push   ebx
c0010a1b:	e8 42 fe ff ff       	call   c0010862 <VgaText::decrementCursor(bool)>
c0010a20:	58                   	pop    eax
c0010a21:	5a                   	pop    edx
c0010a22:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a25:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a28:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a2e:	6a 20                	push   0x20
c0010a30:	53                   	push   ebx
c0010a31:	e8 a8 fc ff ff       	call   c00106de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a36:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a3b:	83 c4 20             	add    esp,0x20
c0010a3e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a41:	0f b7 f6             	movzx  esi,si
c0010a44:	01 f6                	add    esi,esi
c0010a46:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a49:	eb 63                	jmp    c0010aae <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a4b:	51                   	push   ecx
c0010a4c:	51                   	push   ecx
c0010a4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010a51:	50                   	push   eax
c0010a52:	e8 75 fc ff ff       	call   c00106cc <VgaText::combineCharAndColour(char, unsigned char)>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	66 89 06             	mov    WORD PTR [esi],ax
c0010a5d:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c0010a63:	75 21                	jne    c0010a86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a65:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	74 1a                	je     c0010a86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a6c:	52                   	push   edx
c0010a6d:	52                   	push   edx
c0010a6e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a71:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a7c:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010a7f:	51                   	push   ecx
c0010a80:	53                   	push   ebx
c0010a81:	ff d0                	call   eax
c0010a83:	83 c4 20             	add    esp,0x20
c0010a86:	83 c6 02             	add    esi,0x2
c0010a89:	50                   	push   eax
c0010a8a:	50                   	push   eax
c0010a8b:	6a 00                	push   0x0
c0010a8d:	53                   	push   ebx
c0010a8e:	e8 7b fd ff ff       	call   c001080e <VgaText::incrementCursor(bool)>
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010a9a:	75 0d                	jne    c0010aa9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010a9c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010aa1:	0f b7 f6             	movzx  esi,si
c0010aa4:	01 f6                	add    esi,esi
c0010aa6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010aa9:	bd 01 00 00 00       	mov    ebp,0x1
c0010aae:	47                   	inc    edi
c0010aaf:	e9 f8 fe ff ff       	jmp    c00109ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010ab4:	83 ec 0c             	sub    esp,0xc
c0010ab7:	53                   	push   ebx
c0010ab8:	e8 59 fa ff ff       	call   c0010516 <VgaText::updateCursor()>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	89 e8                	mov    eax,ebp
c0010ac2:	84 c0                	test   al,al
c0010ac4:	74 0c                	je     c0010ad2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010ac6:	83 ec 0c             	sub    esp,0xc
c0010ac9:	53                   	push   ebx
c0010aca:	e8 8d fe ff ff       	call   c001095c <VgaText::doUpdate()>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ad9:	83 c4 1c             	add    esp,0x1c
c0010adc:	5b                   	pop    ebx
c0010add:	5e                   	pop    esi
c0010ade:	5f                   	pop    edi
c0010adf:	5d                   	pop    ebp
c0010ae0:	c3                   	ret    
c0010ae1:	90                   	nop

c0010ae2 <VgaText::clearScreen()>:
c0010ae2:	57                   	push   edi
c0010ae3:	56                   	push   esi
c0010ae4:	31 f6                	xor    esi,esi
c0010ae6:	53                   	push   ebx
c0010ae7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aeb:	52                   	push   edx
c0010aec:	6a 00                	push   0x0
c0010aee:	6a 00                	push   0x0
c0010af0:	53                   	push   ebx
c0010af1:	e8 54 fc ff ff       	call   c001074a <VgaText::setCursor(int, int)>
c0010af6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010afd:	83 c4 10             	add    esp,0x10
c0010b00:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010b03:	7e 20                	jle    c0010b25 <VgaText::clearScreen()+0x43>
c0010b05:	31 ff                	xor    edi,edi
c0010b07:	50                   	push   eax
c0010b08:	50                   	push   eax
c0010b09:	56                   	push   esi
c0010b0a:	57                   	push   edi
c0010b0b:	47                   	inc    edi
c0010b0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b0f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b12:	6a 20                	push   0x20
c0010b14:	53                   	push   ebx
c0010b15:	e8 c4 fb ff ff       	call   c00106de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b1a:	83 c4 20             	add    esp,0x20
c0010b1d:	83 ff 50             	cmp    edi,0x50
c0010b20:	75 e5                	jne    c0010b07 <VgaText::clearScreen()+0x25>
c0010b22:	46                   	inc    esi
c0010b23:	eb db                	jmp    c0010b00 <VgaText::clearScreen()+0x1e>
c0010b25:	83 ec 0c             	sub    esp,0xc
c0010b28:	53                   	push   ebx
c0010b29:	e8 2e fe ff ff       	call   c001095c <VgaText::doUpdate()>
c0010b2e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b35:	83 c4 10             	add    esp,0x10
c0010b38:	5b                   	pop    ebx
c0010b39:	5e                   	pop    esi
c0010b3a:	5f                   	pop    edi
c0010b3b:	c3                   	ret    

c0010b3c <VgaText::putchar(char)>:
c0010b3c:	56                   	push   esi
c0010b3d:	53                   	push   ebx
c0010b3e:	83 ec 14             	sub    esp,0x14
c0010b41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b49:	3c 5b                	cmp    al,0x5b
c0010b4b:	75 18                	jne    c0010b65 <VgaText::putchar(char)+0x29>
c0010b4d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010b51:	74 1f                	je     c0010b72 <VgaText::putchar(char)+0x36>
c0010b53:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010b59:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010b60:	e9 bd 00 00 00       	jmp    c0010c22 <VgaText::putchar(char)+0xe6>
c0010b65:	3c 1b                	cmp    al,0x1b
c0010b67:	75 09                	jne    c0010b72 <VgaText::putchar(char)+0x36>
c0010b69:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010b6d:	e9 b0 00 00 00       	jmp    c0010c22 <VgaText::putchar(char)+0xe6>
c0010b72:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010b75:	84 c9                	test   cl,cl
c0010b77:	0f 84 92 00 00 00    	je     c0010c0f <VgaText::putchar(char)+0xd3>
c0010b7d:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b80:	80 fa 3e             	cmp    dl,0x3e
c0010b83:	77 76                	ja     c0010bfb <VgaText::putchar(char)+0xbf>
c0010b85:	3c 6d                	cmp    al,0x6d
c0010b87:	75 47                	jne    c0010bd0 <VgaText::putchar(char)+0x94>
c0010b89:	31 f6                	xor    esi,esi
c0010b8b:	31 d2                	xor    edx,edx
c0010b8d:	31 c0                	xor    eax,eax
c0010b8f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010b92:	7e 2d                	jle    c0010bc1 <VgaText::putchar(char)+0x85>
c0010b94:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010b99:	80 fa 3b             	cmp    dl,0x3b
c0010b9c:	75 17                	jne    c0010bb5 <VgaText::putchar(char)+0x79>
c0010b9e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ba2:	50                   	push   eax
c0010ba3:	53                   	push   ebx
c0010ba4:	e8 83 f9 ff ff       	call   c001052c <VgaText::doANSI_SGR(int)>
c0010ba9:	59                   	pop    ecx
c0010baa:	31 d2                	xor    edx,edx
c0010bac:	58                   	pop    eax
c0010bad:	31 c0                	xor    eax,eax
c0010baf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bb3:	eb 09                	jmp    c0010bbe <VgaText::putchar(char)+0x82>
c0010bb5:	6b c0 0a             	imul   eax,eax,0xa
c0010bb8:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010bbc:	88 ca                	mov    dl,cl
c0010bbe:	46                   	inc    esi
c0010bbf:	eb ce                	jmp    c0010b8f <VgaText::putchar(char)+0x53>
c0010bc1:	84 d2                	test   dl,dl
c0010bc3:	74 2e                	je     c0010bf3 <VgaText::putchar(char)+0xb7>
c0010bc5:	50                   	push   eax
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 60 f9 ff ff       	call   c001052c <VgaText::doANSI_SGR(int)>
c0010bcc:	58                   	pop    eax
c0010bcd:	5a                   	pop    edx
c0010bce:	eb 23                	jmp    c0010bf3 <VgaText::putchar(char)+0xb7>
c0010bd0:	3c 4a                	cmp    al,0x4a
c0010bd2:	75 1f                	jne    c0010bf3 <VgaText::putchar(char)+0xb7>
c0010bd4:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010bd8:	75 19                	jne    c0010bf3 <VgaText::putchar(char)+0xb7>
c0010bda:	83 ec 0c             	sub    esp,0xc
c0010bdd:	53                   	push   ebx
c0010bde:	e8 ff fe ff ff       	call   c0010ae2 <VgaText::clearScreen()>
c0010be3:	83 c4 0c             	add    esp,0xc
c0010be6:	6a 00                	push   0x0
c0010be8:	6a 00                	push   0x0
c0010bea:	53                   	push   ebx
c0010beb:	e8 5a fb ff ff       	call   c001074a <VgaText::setCursor(int, int)>
c0010bf0:	83 c4 10             	add    esp,0x10
c0010bf3:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010bf9:	eb 27                	jmp    c0010c22 <VgaText::putchar(char)+0xe6>
c0010bfb:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010bfe:	83 fa 0e             	cmp    edx,0xe
c0010c01:	7f 1f                	jg     c0010c22 <VgaText::putchar(char)+0xe6>
c0010c03:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c06:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010c09:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010c0d:	eb 13                	jmp    c0010c22 <VgaText::putchar(char)+0xe6>
c0010c0f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c12:	0f be c0             	movsx  eax,al
c0010c15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c18:	50                   	push   eax
c0010c19:	53                   	push   ebx
c0010c1a:	e8 65 fc ff ff       	call   c0010884 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	83 c4 14             	add    esp,0x14
c0010c25:	5b                   	pop    ebx
c0010c26:	5e                   	pop    esi
c0010c27:	c3                   	ret    

c0010c28 <VgaText::putx(unsigned int)>:
c0010c28:	57                   	push   edi
c0010c29:	b9 11 00 00 00       	mov    ecx,0x11
c0010c2e:	56                   	push   esi
c0010c2f:	be 0e aa 02 c0       	mov    esi,0xc002aa0e
c0010c34:	53                   	push   ebx
c0010c35:	83 ec 20             	sub    esp,0x20
c0010c38:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c3c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c40:	fc                   	cld    
c0010c41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c43:	be 08 00 00 00       	mov    esi,0x8
c0010c48:	50                   	push   eax
c0010c49:	50                   	push   eax
c0010c4a:	89 d8                	mov    eax,ebx
c0010c4c:	c1 e3 04             	shl    ebx,0x4
c0010c4f:	c1 e8 1c             	shr    eax,0x1c
c0010c52:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c57:	50                   	push   eax
c0010c58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c5c:	e8 db fe ff ff       	call   c0010b3c <VgaText::putchar(char)>
c0010c61:	83 c4 10             	add    esp,0x10
c0010c64:	4e                   	dec    esi
c0010c65:	75 e1                	jne    c0010c48 <VgaText::putx(unsigned int)+0x20>
c0010c67:	83 c4 20             	add    esp,0x20
c0010c6a:	5b                   	pop    ebx
c0010c6b:	5e                   	pop    esi
c0010c6c:	5f                   	pop    edi
c0010c6d:	c3                   	ret    

c0010c6e <VgaText::puts(char const*)>:
c0010c6e:	53                   	push   ebx
c0010c6f:	83 ec 08             	sub    esp,0x8
c0010c72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c76:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c79:	84 c0                	test   al,al
c0010c7b:	74 12                	je     c0010c8f <VgaText::puts(char const*)+0x21>
c0010c7d:	43                   	inc    ebx
c0010c7e:	51                   	push   ecx
c0010c7f:	51                   	push   ecx
c0010c80:	50                   	push   eax
c0010c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c85:	e8 b2 fe ff ff       	call   c0010b3c <VgaText::putchar(char)>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	eb e7                	jmp    c0010c76 <VgaText::puts(char const*)+0x8>
c0010c8f:	83 c4 08             	add    esp,0x8
c0010c92:	5b                   	pop    ebx
c0010c93:	c3                   	ret    

c0010c94 <VgaText::VgaText(char const*)>:
c0010c94:	57                   	push   edi
c0010c95:	56                   	push   esi
c0010c96:	53                   	push   ebx
c0010c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c9b:	83 ec 08             	sub    esp,0x8
c0010c9e:	6a 00                	push   0x0
c0010ca0:	50                   	push   eax
c0010ca1:	e8 44 05 00 00       	call   c00111ea <UnixFile::UnixFile(int)>
c0010ca6:	83 c4 10             	add    esp,0x10
c0010ca9:	ba 74 aa 02 c0       	mov    edx,0xc002aa74
c0010cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb2:	89 10                	mov    DWORD PTR [eax],edx
c0010cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cce:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cde:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce9:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cff:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0a:	8d 50 60             	lea    edx,[eax+0x60]
c0010d0d:	bb 00 e7 02 c0       	mov    ebx,0xc002e700
c0010d12:	b8 08 00 00 00       	mov    eax,0x8
c0010d17:	fc                   	cld    
c0010d18:	89 d7                	mov    edi,edx
c0010d1a:	89 de                	mov    esi,ebx
c0010d1c:	89 c1                	mov    ecx,eax
c0010d1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d24:	05 82 00 00 00       	add    eax,0x82
c0010d29:	83 ec 08             	sub    esp,0x8
c0010d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d30:	50                   	push   eax
c0010d31:	e8 d6 fa fe ff       	call   c000080c <strcpy>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3d:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010d44:	83 ec 0c             	sub    esp,0xc
c0010d47:	6a 01                	push   0x1
c0010d49:	e8 df 08 00 00       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	89 c2                	mov    edx,eax
c0010d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d57:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d5a:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0010d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d67:	89 c6                	mov    esi,eax
c0010d69:	e8 35 f0 ff ff       	call   c000fda3 <Phys::allocatePage()>
c0010d6e:	68 05 0c 00 00       	push   0xc05
c0010d73:	56                   	push   esi
c0010d74:	50                   	push   eax
c0010d75:	53                   	push   ebx
c0010d76:	e8 59 0f 00 00       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d85:	83 ec 04             	sub    esp,0x4
c0010d88:	68 00 0f 00 00       	push   0xf00
c0010d8d:	6a 00                	push   0x0
c0010d8f:	50                   	push   eax
c0010d90:	e8 bb f9 fe ff       	call   c0000750 <memset>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	83 ec 04             	sub    esp,0x4
c0010d9b:	6a 00                	push   0x0
c0010d9d:	6a 07                	push   0x7
c0010d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da3:	e8 18 f8 ff ff       	call   c00105c0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010da8:	83 c4 10             	add    esp,0x10
c0010dab:	83 ec 04             	sub    esp,0x4
c0010dae:	6a 00                	push   0x0
c0010db0:	6a 00                	push   0x0
c0010db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db6:	e8 8f f9 ff ff       	call   c001074a <VgaText::setCursor(int, int)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	83 ec 0c             	sub    esp,0xc
c0010dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc5:	e8 18 fd ff ff       	call   c0010ae2 <VgaText::clearScreen()>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd1:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd9:	05 02 01 00 00       	add    eax,0x102
c0010dde:	83 ec 04             	sub    esp,0x4
c0010de1:	68 96 00 00 00       	push   0x96
c0010de6:	6a 00                	push   0x0
c0010de8:	50                   	push   eax
c0010de9:	e8 62 f9 fe ff       	call   c0000750 <memset>
c0010dee:	83 c4 10             	add    esp,0x10
c0010df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df5:	05 98 01 00 00       	add    eax,0x198
c0010dfa:	83 ec 04             	sub    esp,0x4
c0010dfd:	68 2c 01 00 00       	push   0x12c
c0010e02:	6a 00                	push   0x0
c0010e04:	50                   	push   eax
c0010e05:	e8 46 f9 fe ff       	call   c0000750 <memset>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	90                   	nop
c0010e0e:	5b                   	pop    ebx
c0010e0f:	5e                   	pop    esi
c0010e10:	5f                   	pop    edi
c0010e11:	c3                   	ret    

c0010e12 <VgaText::receiveKey(unsigned char)>:
c0010e12:	55                   	push   ebp
c0010e13:	57                   	push   edi
c0010e14:	56                   	push   esi
c0010e15:	53                   	push   ebx
c0010e16:	83 ec 1c             	sub    esp,0x1c
c0010e19:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e21:	84 db                	test   bl,bl
c0010e23:	0f 84 c9 00 00 00    	je     c0010ef2 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e29:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010e2f:	80 fb 08             	cmp    bl,0x8
c0010e32:	75 2c                	jne    c0010e60 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	57                   	push   edi
c0010e38:	e8 2f f9 fe ff       	call   c000076c <strlen>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 41                	je     c0010e85 <VgaText::receiveKey(unsigned char)+0x73>
c0010e44:	50                   	push   eax
c0010e45:	50                   	push   eax
c0010e46:	6a 08                	push   0x8
c0010e48:	56                   	push   esi
c0010e49:	e8 ee fc ff ff       	call   c0010b3c <VgaText::putchar(char)>
c0010e4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e51:	e8 16 f9 fe ff       	call   c000076c <strlen>
c0010e56:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010e5e:	eb 22                	jmp    c0010e82 <VgaText::receiveKey(unsigned char)+0x70>
c0010e60:	0f be c3             	movsx  eax,bl
c0010e63:	52                   	push   edx
c0010e64:	52                   	push   edx
c0010e65:	50                   	push   eax
c0010e66:	56                   	push   esi
c0010e67:	e8 d0 fc ff ff       	call   c0010b3c <VgaText::putchar(char)>
c0010e6c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e75:	59                   	pop    ecx
c0010e76:	5d                   	pop    ebp
c0010e77:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e7b:	50                   	push   eax
c0010e7c:	57                   	push   edi
c0010e7d:	e8 ca fa fe ff       	call   c000094c <strcat>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010e8c:	75 05                	jne    c0010e93 <VgaText::receiveKey(unsigned char)+0x81>
c0010e8e:	80 fb 0a             	cmp    bl,0xa
c0010e91:	75 53                	jne    c0010ee6 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e93:	83 ec 0c             	sub    esp,0xc
c0010e96:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010e9c:	53                   	push   ebx
c0010e9d:	e8 ca f8 fe ff       	call   c000076c <strlen>
c0010ea2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ea5:	89 c5                	mov    ebp,eax
c0010ea7:	e8 c0 f8 fe ff       	call   c000076c <strlen>
c0010eac:	83 c4 10             	add    esp,0x10
c0010eaf:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010eb3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010eb8:	76 10                	jbe    c0010eca <VgaText::receiveKey(unsigned char)+0xb8>
c0010eba:	83 ec 0c             	sub    esp,0xc
c0010ebd:	68 1f aa 02 c0       	push   0xc002aa1f
c0010ec2:	e8 d6 94 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0010ec7:	83 c4 10             	add    esp,0x10
c0010eca:	50                   	push   eax
c0010ecb:	50                   	push   eax
c0010ecc:	57                   	push   edi
c0010ecd:	53                   	push   ebx
c0010ece:	e8 79 fa fe ff       	call   c000094c <strcat>
c0010ed3:	83 c4 0c             	add    esp,0xc
c0010ed6:	68 96 00 00 00       	push   0x96
c0010edb:	6a 00                	push   0x0
c0010edd:	57                   	push   edi
c0010ede:	e8 6d f8 fe ff       	call   c0000750 <memset>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	83 ec 0c             	sub    esp,0xc
c0010ee9:	56                   	push   esi
c0010eea:	e8 6d fa ff ff       	call   c001095c <VgaText::doUpdate()>
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	83 c4 1c             	add    esp,0x1c
c0010ef5:	5b                   	pop    ebx
c0010ef6:	5e                   	pop    esi
c0010ef7:	5f                   	pop    edi
c0010ef8:	5d                   	pop    ebp
c0010ef9:	c3                   	ret    

c0010efa <VgaText::write(unsigned long long, void*, int*)>:
c0010efa:	55                   	push   ebp
c0010efb:	57                   	push   edi
c0010efc:	56                   	push   esi
c0010efd:	53                   	push   ebx
c0010efe:	83 ec 0c             	sub    esp,0xc
c0010f01:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f05:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f09:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f0d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010f14:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f17:	39 eb                	cmp    ebx,ebp
c0010f19:	74 13                	je     c0010f2e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f1b:	43                   	inc    ebx
c0010f1c:	50                   	push   eax
c0010f1d:	50                   	push   eax
c0010f1e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f22:	50                   	push   eax
c0010f23:	56                   	push   esi
c0010f24:	e8 13 fc ff ff       	call   c0010b3c <VgaText::putchar(char)>
c0010f29:	83 c4 10             	add    esp,0x10
c0010f2c:	eb e9                	jmp    c0010f17 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f2e:	83 ec 0c             	sub    esp,0xc
c0010f31:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010f38:	56                   	push   esi
c0010f39:	e8 1e fa ff ff       	call   c001095c <VgaText::doUpdate()>
c0010f3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f42:	89 38                	mov    DWORD PTR [eax],edi
c0010f44:	83 c4 1c             	add    esp,0x1c
c0010f47:	31 c0                	xor    eax,eax
c0010f49:	5b                   	pop    ebx
c0010f4a:	5e                   	pop    esi
c0010f4b:	5f                   	pop    edi
c0010f4c:	5d                   	pop    ebp
c0010f4d:	c3                   	ret    

c0010f4e <newTerminal(char*)>:
c0010f4e:	83 ec 28             	sub    esp,0x28
c0010f51:	68 c4 02 00 00       	push   0x2c4
c0010f56:	e8 4c ea ff ff       	call   c000f9a7 <malloc>
c0010f5b:	5a                   	pop    edx
c0010f5c:	59                   	pop    ecx
c0010f5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f61:	50                   	push   eax
c0010f62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f66:	e8 29 fd ff ff       	call   c0010c94 <VgaText::VgaText(char const*)>
c0010f6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f6f:	83 c4 2c             	add    esp,0x2c
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <TSS::TSS()>:
c0010f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f7f:	90                   	nop
c0010f80:	c3                   	ret    
c0010f81:	90                   	nop

c0010f82 <TSS::setESP(unsigned long)>:
c0010f82:	55                   	push   ebp
c0010f83:	89 e5                	mov    ebp,esp
c0010f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f8b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f91:	90                   	nop
c0010f92:	5d                   	pop    ebp
c0010f93:	c3                   	ret    

c0010f94 <TSS::flush()>:
c0010f94:	55                   	push   ebp
c0010f95:	89 e5                	mov    ebp,esp
c0010f97:	83 ec 10             	sub    esp,0x10
c0010f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f9f:	83 c8 03             	or     eax,0x3
c0010fa2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fa6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010faa:	66 89 d0             	mov    ax,dx
c0010fad:	0f 00 d8             	ltr    ax
c0010fb0:	90                   	nop
c0010fb1:	c9                   	leave  
c0010fb2:	c3                   	ret    
c0010fb3:	90                   	nop

c0010fb4 <TSS::setup(unsigned long, unsigned long)>:
c0010fb4:	55                   	push   ebp
c0010fb5:	89 e5                	mov    ebp,esp
c0010fb7:	83 ec 18             	sub    esp,0x18
c0010fba:	83 ec 0c             	sub    esp,0xc
c0010fbd:	6a 68                	push   0x68
c0010fbf:	e8 e3 e9 ff ff       	call   c000f9a7 <malloc>
c0010fc4:	83 c4 10             	add    esp,0x10
c0010fc7:	89 c2                	mov    edx,eax
c0010fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd5:	83 ec 04             	sub    esp,0x4
c0010fd8:	6a 68                	push   0x68
c0010fda:	6a 00                	push   0x0
c0010fdc:	50                   	push   eax
c0010fdd:	e8 6e f7 fe ff       	call   c0000750 <memset>
c0010fe2:	83 c4 10             	add    esp,0x10
c0010fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010feb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011003:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011006:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001101b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011027:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001102d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001105a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011066:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011079:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107c:	0f 20 da             	mov    edx,cr3
c001107f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011082:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011085:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001108e:	83 ec 08             	sub    esp,0x8
c0011091:	50                   	push   eax
c0011092:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011095:	50                   	push   eax
c0011096:	e8 c3 df ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c001109b:	83 c4 10             	add    esp,0x10
c001109e:	83 ec 08             	sub    esp,0x8
c00110a1:	6a 68                	push   0x68
c00110a3:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110a6:	50                   	push   eax
c00110a7:	e8 ce df ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110b3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110b6:	83 e0 0f             	and    eax,0xf
c00110b9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110bc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110bf:	83 c8 40             	or     eax,0x40
c00110c2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110c5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00110ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110d0:	05 78 01 00 00       	add    eax,0x178
c00110d5:	83 ec 04             	sub    esp,0x4
c00110d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00110db:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110de:	50                   	push   eax
c00110df:	e8 ca df ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c00110e4:	83 c4 10             	add    esp,0x10
c00110e7:	89 c2                	mov    edx,eax
c00110e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ec:	89 10                	mov    DWORD PTR [eax],edx
c00110ee:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00110f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110f9:	05 78 01 00 00       	add    eax,0x178
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	50                   	push   eax
c0011102:	e8 d1 df ff ff       	call   c000f0d8 <GDT::flush()>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001110d:	8b 00                	mov    eax,DWORD PTR [eax]
c001110f:	c9                   	leave  
c0011110:	c3                   	ret    
c0011111:	90                   	nop

c0011112 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011116:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001111a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001111d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011122:	75 08                	jne    c001112c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011124:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001112a:	eb 38                	jmp    c0011164 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001112c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011131:	75 17                	jne    c001114a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011138:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001113b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011141:	8b 10                	mov    edx,DWORD PTR [eax]
c0011143:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011147:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001114a:	89 c1                	mov    ecx,eax
c001114c:	83 e1 fd             	and    ecx,0xfffffffd
c001114f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011155:	74 cd                	je     c0011124 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011157:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001115c:	83 e0 ef             	and    eax,0xffffffef
c001115f:	83 f8 08             	cmp    eax,0x8
c0011162:	76 c0                	jbe    c0011124 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011164:	31 c0                	xor    eax,eax
c0011166:	c3                   	ret    
c0011167:	90                   	nop

c0011168 <ReservedFilename::isAtty()>:
c0011168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001116c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001116f:	31 c0                	xor    eax,eax
c0011171:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011177:	74 09                	je     c0011182 <ReservedFilename::isAtty()+0x1a>
c0011179:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001117f:	0f 94 c0             	sete   al
c0011182:	c3                   	ret    
c0011183:	90                   	nop

c0011184 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011188:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001118c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001118f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011193:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011198:	75 08                	jne    c00111a2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001119a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111a0:	eb 3d                	jmp    c00111df <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111a2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111a7:	75 17                	jne    c00111c0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111b1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00111b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111bd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111c5:	75 04                	jne    c00111cb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00111c7:	89 0a                	mov    DWORD PTR [edx],ecx
c00111c9:	eb 14                	jmp    c00111df <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111cb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00111d0:	74 c8                	je     c001119a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111d2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111d7:	83 e0 ef             	and    eax,0xffffffef
c00111da:	83 f8 08             	cmp    eax,0x8
c00111dd:	76 bb                	jbe    c001119a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111df:	31 c0                	xor    eax,eax
c00111e1:	c3                   	ret    

c00111e2 <UnixFile::getFileDescriptor()>:
c00111e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111e9:	c3                   	ret    

c00111ea <UnixFile::UnixFile(int)>:
c00111ea:	53                   	push   ebx
c00111eb:	83 ec 28             	sub    esp,0x28
c00111ee:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c00111f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111f7:	89 10                	mov    DWORD PTR [eax],edx
c00111f9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011201:	0f 8f 8c 01 00 00    	jg     c0011393 <UnixFile::UnixFile(int)+0x1a9>
c0011207:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c001120c:	8d 50 01             	lea    edx,[eax+0x1]
c001120f:	89 15 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,edx
c0011215:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011219:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001121c:	83 ec 08             	sub    esp,0x8
c001121f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011223:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011228:	e8 19 79 01 00       	call   c0028b46 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001122d:	83 c4 10             	add    esp,0x10
c0011230:	a0 b4 e7 02 c0       	mov    al,ds:0xc002e7b4
c0011235:	83 f0 01             	xor    eax,0x1
c0011238:	84 c0                	test   al,al
c001123a:	0f 84 54 01 00 00    	je     c0011394 <UnixFile::UnixFile(int)+0x1aa>
c0011240:	c6 05 b4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7b4,0x1
c0011247:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001124f:	83 ec 0c             	sub    esp,0xc
c0011252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011256:	e8 4c e7 ff ff       	call   c000f9a7 <malloc>
c001125b:	83 c4 10             	add    esp,0x10
c001125e:	89 c3                	mov    ebx,eax
c0011260:	83 ec 08             	sub    esp,0x8
c0011263:	68 03 ff ff 0f       	push   0xfffff03
c0011268:	53                   	push   ebx
c0011269:	e8 2c 01 00 00       	call   c001139a <ReservedFilename::ReservedFilename(int)>
c001126e:	83 c4 10             	add    esp,0x10
c0011271:	89 1d ac e7 02 c0    	mov    DWORD PTR ds:0xc002e7ac,ebx
c0011277:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001127f:	83 ec 0c             	sub    esp,0xc
c0011282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011286:	e8 1c e7 ff ff       	call   c000f9a7 <malloc>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	89 c3                	mov    ebx,eax
c0011290:	83 ec 08             	sub    esp,0x8
c0011293:	68 01 ff ff 0f       	push   0xfffff01
c0011298:	53                   	push   ebx
c0011299:	e8 fc 00 00 00       	call   c001139a <ReservedFilename::ReservedFilename(int)>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	89 1d b0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7b0,ebx
c00112a7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112af:	83 ec 0c             	sub    esp,0xc
c00112b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112b6:	e8 ec e6 ff ff       	call   c000f9a7 <malloc>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	89 c3                	mov    ebx,eax
c00112c0:	83 ec 08             	sub    esp,0x8
c00112c3:	68 00 ff ff 0f       	push   0xfffff00
c00112c8:	53                   	push   ebx
c00112c9:	e8 cc 00 00 00       	call   c001139a <ReservedFilename::ReservedFilename(int)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	89 1d a4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a4,ebx
c00112d7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00112df:	83 ec 0c             	sub    esp,0xc
c00112e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112e6:	e8 bc e6 ff ff       	call   c000f9a7 <malloc>
c00112eb:	83 c4 10             	add    esp,0x10
c00112ee:	89 c3                	mov    ebx,eax
c00112f0:	83 ec 08             	sub    esp,0x8
c00112f3:	68 02 ff ff 0f       	push   0xfffff02
c00112f8:	53                   	push   ebx
c00112f9:	e8 9c 00 00 00       	call   c001139a <ReservedFilename::ReservedFilename(int)>
c00112fe:	83 c4 10             	add    esp,0x10
c0011301:	89 1d a8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a8,ebx
c0011307:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001130f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011314:	7f 7e                	jg     c0011394 <UnixFile::UnixFile(int)+0x1aa>
c0011316:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001131e:	83 ec 0c             	sub    esp,0xc
c0011321:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011325:	e8 7d e6 ff ff       	call   c000f9a7 <malloc>
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	89 c3                	mov    ebx,eax
c001132f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011333:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011338:	83 ec 08             	sub    esp,0x8
c001133b:	50                   	push   eax
c001133c:	53                   	push   ebx
c001133d:	e8 58 00 00 00       	call   c001139a <ReservedFilename::ReservedFilename(int)>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011349:	89 1c 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],ebx
c0011350:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011358:	83 ec 0c             	sub    esp,0xc
c001135b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001135f:	e8 43 e6 ff ff       	call   c000f9a7 <malloc>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	89 c3                	mov    ebx,eax
c0011369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001136d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011372:	83 ec 08             	sub    esp,0x8
c0011375:	50                   	push   eax
c0011376:	53                   	push   ebx
c0011377:	e8 1e 00 00 00       	call   c001139a <ReservedFilename::ReservedFilename(int)>
c001137c:	83 c4 10             	add    esp,0x10
c001137f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011383:	89 1c 85 40 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18c0],ebx
c001138a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001138e:	e9 7c ff ff ff       	jmp    c001130f <UnixFile::UnixFile(int)+0x125>
c0011393:	90                   	nop
c0011394:	83 c4 28             	add    esp,0x28
c0011397:	5b                   	pop    ebx
c0011398:	c3                   	ret    
c0011399:	90                   	nop

c001139a <ReservedFilename::ReservedFilename(int)>:
c001139a:	83 ec 0c             	sub    esp,0xc
c001139d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113a1:	83 ec 08             	sub    esp,0x8
c00113a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a8:	50                   	push   eax
c00113a9:	e8 3c fe ff ff       	call   c00111ea <UnixFile::UnixFile(int)>
c00113ae:	83 c4 10             	add    esp,0x10
c00113b1:	ba 58 ab 02 c0       	mov    edx,0xc002ab58
c00113b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ba:	89 10                	mov    DWORD PTR [eax],edx
c00113bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113c7:	90                   	nop
c00113c8:	83 c4 0c             	add    esp,0xc
c00113cb:	c3                   	ret    

c00113cc <UnixFile::~UnixFile()>:
c00113cc:	83 ec 1c             	sub    esp,0x1c
c00113cf:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c00113d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113d8:	89 10                	mov    DWORD PTR [eax],edx
c00113da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00113e6:	7f 73                	jg     c001145b <UnixFile::~UnixFile()+0x8f>
c00113e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113f0:	83 ec 0c             	sub    esp,0xc
c00113f3:	68 b8 e7 02 c0       	push   0xc002e7b8
c00113f8:	e8 1d 78 01 00       	call   c0028c1a <LinkedList<UnixFile>::getFirstElement()>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	68 b8 e7 02 c0       	push   0xc002e7b8
c001140c:	e8 11 78 01 00       	call   c0028c22 <LinkedList<UnixFile>::removeFirst()>
c0011411:	83 c4 10             	add    esp,0x10
c0011414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011418:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001141c:	74 40                	je     c001145e <UnixFile::~UnixFile()+0x92>
c001141e:	83 ec 08             	sub    esp,0x8
c0011421:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011425:	68 b8 e7 02 c0       	push   0xc002e7b8
c001142a:	e8 17 77 01 00       	call   c0028b46 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001142f:	83 c4 10             	add    esp,0x10
c0011432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011436:	8d 50 01             	lea    edx,[eax+0x1]
c0011439:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001143d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011442:	0f 94 c0             	sete   al
c0011445:	84 c0                	test   al,al
c0011447:	74 a7                	je     c00113f0 <UnixFile::~UnixFile()+0x24>
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	68 14 ab 02 c0       	push   0xc002ab14
c0011451:	e8 47 8f 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	eb 95                	jmp    c00113f0 <UnixFile::~UnixFile()+0x24>
c001145b:	90                   	nop
c001145c:	eb 01                	jmp    c001145f <UnixFile::~UnixFile()+0x93>
c001145e:	90                   	nop
c001145f:	90                   	nop
c0011460:	83 c4 1c             	add    esp,0x1c
c0011463:	c3                   	ret    

c0011464 <UnixFile::~UnixFile()>:
c0011464:	83 ec 0c             	sub    esp,0xc
c0011467:	83 ec 0c             	sub    esp,0xc
c001146a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001146e:	e8 59 ff ff ff       	call   c00113cc <UnixFile::~UnixFile()>
c0011473:	83 c4 10             	add    esp,0x10
c0011476:	83 ec 08             	sub    esp,0x8
c0011479:	6a 0c                	push   0xc
c001147b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147f:	e8 a3 14 00 00       	call   c0012927 <operator delete(void*, unsigned long)>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	83 c4 0c             	add    esp,0xc
c001148a:	c3                   	ret    
c001148b:	90                   	nop

c001148c <ReservedFilename::~ReservedFilename()>:
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	ba 58 ab 02 c0       	mov    edx,0xc002ab58
c0011494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011498:	89 10                	mov    DWORD PTR [eax],edx
c001149a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001149e:	83 ec 0c             	sub    esp,0xc
c00114a1:	50                   	push   eax
c00114a2:	e8 25 ff ff ff       	call   c00113cc <UnixFile::~UnixFile()>
c00114a7:	83 c4 10             	add    esp,0x10
c00114aa:	90                   	nop
c00114ab:	83 c4 0c             	add    esp,0xc
c00114ae:	c3                   	ret    
c00114af:	90                   	nop

c00114b0 <ReservedFilename::~ReservedFilename()>:
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	83 ec 0c             	sub    esp,0xc
c00114b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ba:	e8 cd ff ff ff       	call   c001148c <ReservedFilename::~ReservedFilename()>
c00114bf:	83 c4 10             	add    esp,0x10
c00114c2:	83 ec 08             	sub    esp,0x8
c00114c5:	6a 0c                	push   0xc
c00114c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cb:	e8 57 14 00 00       	call   c0012927 <operator delete(void*, unsigned long)>
c00114d0:	83 c4 10             	add    esp,0x10
c00114d3:	83 c4 0c             	add    esp,0xc
c00114d6:	c3                   	ret    

c00114d7 <getFromFileDescriptor(int)>:
c00114d7:	53                   	push   ebx
c00114d8:	83 ec 08             	sub    esp,0x8
c00114db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114df:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00114e5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00114eb:	7f 2c                	jg     c0011519 <getFromFileDescriptor(int)+0x42>
c00114ed:	83 ec 0c             	sub    esp,0xc
c00114f0:	68 b8 e7 02 c0       	push   0xc002e7b8
c00114f5:	e8 20 77 01 00       	call   c0028c1a <LinkedList<UnixFile>::getFirstElement()>
c00114fa:	83 c4 10             	add    esp,0x10
c00114fd:	85 c0                	test   eax,eax
c00114ff:	75 04                	jne    c0011505 <getFromFileDescriptor(int)+0x2e>
c0011501:	31 c0                	xor    eax,eax
c0011503:	eb 6e                	jmp    c0011573 <getFromFileDescriptor(int)+0x9c>
c0011505:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011508:	74 69                	je     c0011573 <getFromFileDescriptor(int)+0x9c>
c001150a:	52                   	push   edx
c001150b:	52                   	push   edx
c001150c:	50                   	push   eax
c001150d:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011512:	e8 ad 77 01 00       	call   c0028cc4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011517:	eb e1                	jmp    c00114fa <getFromFileDescriptor(int)+0x23>
c0011519:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c001151e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011524:	74 4d                	je     c0011573 <getFromFileDescriptor(int)+0x9c>
c0011526:	a1 b0 e7 02 c0       	mov    eax,ds:0xc002e7b0
c001152b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011531:	74 40                	je     c0011573 <getFromFileDescriptor(int)+0x9c>
c0011533:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0011538:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001153e:	74 33                	je     c0011573 <getFromFileDescriptor(int)+0x9c>
c0011540:	a1 a4 e7 02 c0       	mov    eax,ds:0xc002e7a4
c0011545:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001154b:	74 26                	je     c0011573 <getFromFileDescriptor(int)+0x9c>
c001154d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011553:	83 f8 08             	cmp    eax,0x8
c0011556:	77 09                	ja     c0011561 <getFromFileDescriptor(int)+0x8a>
c0011558:	8b 04 85 80 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1880]
c001155f:	eb 12                	jmp    c0011573 <getFromFileDescriptor(int)+0x9c>
c0011561:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011567:	83 fb 08             	cmp    ebx,0x8
c001156a:	77 95                	ja     c0011501 <getFromFileDescriptor(int)+0x2a>
c001156c:	8b 04 9d 40 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd18c0]
c0011573:	83 c4 08             	add    esp,0x8
c0011576:	5b                   	pop    ebx
c0011577:	c3                   	ret    

c0011578 <__static_initialization_and_destruction_0(int, int)>:
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011580:	75 34                	jne    c00115b6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011582:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001158a:	75 2a                	jne    c00115b6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001158c:	83 ec 0c             	sub    esp,0xc
c001158f:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011594:	e8 6b 75 01 00       	call   c0028b04 <LinkedList<UnixFile>::LinkedList()>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	83 ec 04             	sub    esp,0x4
c001159f:	68 24 d4 02 c0       	push   0xc002d424
c00115a4:	68 b8 e7 02 c0       	push   0xc002e7b8
c00115a9:	68 02 8b 02 c0       	push   0xc0028b02
c00115ae:	e8 ee 12 00 00       	call   c00128a1 <__cxa_atexit>
c00115b3:	83 c4 10             	add    esp,0x10
c00115b6:	90                   	nop
c00115b7:	83 c4 0c             	add    esp,0xc
c00115ba:	c3                   	ret    

c00115bb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115bb:	83 ec 0c             	sub    esp,0xc
c00115be:	83 ec 08             	sub    esp,0x8
c00115c1:	68 ff ff 00 00       	push   0xffff
c00115c6:	6a 01                	push   0x1
c00115c8:	e8 ab ff ff ff       	call   c0011578 <__static_initialization_and_destruction_0(int, int)>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	83 c4 0c             	add    esp,0xc
c00115d3:	c3                   	ret    

c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00115d4:	53                   	push   ebx
c00115d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00115dd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00115e3:	89 c8                	mov    eax,ecx
c00115e5:	d1 e8                	shr    eax,1
c00115e7:	03 05 08 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d608
c00115ed:	83 e1 01             	and    ecx,0x1
c00115f0:	8a 10                	mov    dl,BYTE PTR [eax]
c00115f2:	75 09                	jne    c00115fd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00115f4:	83 e2 f0             	and    edx,0xfffffff0
c00115f7:	09 da                	or     edx,ebx
c00115f9:	88 10                	mov    BYTE PTR [eax],dl
c00115fb:	5b                   	pop    ebx
c00115fc:	c3                   	ret    
c00115fd:	c1 e3 04             	shl    ebx,0x4
c0011600:	83 e2 0f             	and    edx,0xf
c0011603:	09 da                	or     edx,ebx
c0011605:	88 10                	mov    BYTE PTR [eax],dl
c0011607:	5b                   	pop    ebx
c0011608:	c3                   	ret    

c0011609 <Virt::getPageState(unsigned long)>:
c0011609:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160d:	8b 0d 08 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d608
c0011613:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011619:	89 d0                	mov    eax,edx
c001161b:	d1 e8                	shr    eax,1
c001161d:	83 e2 01             	and    edx,0x1
c0011620:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011623:	75 04                	jne    c0011629 <Virt::getPageState(unsigned long)+0x20>
c0011625:	83 e0 0f             	and    eax,0xf
c0011628:	c3                   	ret    
c0011629:	c0 e8 04             	shr    al,0x4
c001162c:	c3                   	ret    

c001162d <Virt::allocateKernelVirtualPages(int)>:
c001162d:	55                   	push   ebp
c001162e:	31 ed                	xor    ebp,ebp
c0011630:	57                   	push   edi
c0011631:	56                   	push   esi
c0011632:	53                   	push   ebx
c0011633:	31 db                	xor    ebx,ebx
c0011635:	83 ec 1c             	sub    esp,0x1c
c0011638:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001163c:	8b 3d 04 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d604
c0011642:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011647:	57                   	push   edi
c0011648:	e8 bc ff ff ff       	call   c0011609 <Virt::getPageState(unsigned long)>
c001164d:	5a                   	pop    edx
c001164e:	84 c0                	test   al,al
c0011650:	75 3a                	jne    c001168c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011652:	85 db                	test   ebx,ebx
c0011654:	75 02                	jne    c0011658 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011656:	89 fd                	mov    ebp,edi
c0011658:	43                   	inc    ebx
c0011659:	39 f3                	cmp    ebx,esi
c001165b:	74 5a                	je     c00116b7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001165d:	47                   	inc    edi
c001165e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011664:	76 31                	jbe    c0011697 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011666:	c7 05 04 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d604,0xc8000
c0011670:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011675:	75 28                	jne    c001169f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011677:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001167c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011681:	57                   	push   edi
c0011682:	e8 82 ff ff ff       	call   c0011609 <Virt::getPageState(unsigned long)>
c0011687:	5a                   	pop    edx
c0011688:	84 c0                	test   al,al
c001168a:	74 c6                	je     c0011652 <Virt::allocateKernelVirtualPages(int)+0x25>
c001168c:	31 db                	xor    ebx,ebx
c001168e:	47                   	inc    edi
c001168f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011695:	77 cf                	ja     c0011666 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011697:	89 3d 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,edi
c001169d:	eb a8                	jmp    c0011647 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	68 6c ab 02 c0       	push   0xc002ab6c
c00116a7:	e8 f1 8c 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00116ac:	8b 3d 04 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d604
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	eb 90                	jmp    c0011647 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116b7:	89 2d 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,ebp
c00116bd:	4b                   	dec    ebx
c00116be:	74 5f                	je     c001171f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116c0:	85 f6                	test   esi,esi
c00116c2:	74 3d                	je     c0011701 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116c4:	89 e8                	mov    eax,ebp
c00116c6:	31 db                	xor    ebx,ebx
c00116c8:	8d 7e ff             	lea    edi,[esi-0x1]
c00116cb:	eb 14                	jmp    c00116e1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00116cd:	6a 01                	push   0x1
c00116cf:	43                   	inc    ebx
c00116d0:	50                   	push   eax
c00116d1:	e8 fe fe ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d6:	58                   	pop    eax
c00116d7:	39 f3                	cmp    ebx,esi
c00116d9:	5a                   	pop    edx
c00116da:	74 25                	je     c0011701 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116dc:	a1 04 d6 02 c0       	mov    eax,ds:0xc002d604
c00116e1:	8d 50 01             	lea    edx,[eax+0x1]
c00116e4:	85 db                	test   ebx,ebx
c00116e6:	89 15 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,edx
c00116ec:	74 20                	je     c001170e <Virt::allocateKernelVirtualPages(int)+0xe1>
c00116ee:	39 df                	cmp    edi,ebx
c00116f0:	75 db                	jne    c00116cd <Virt::allocateKernelVirtualPages(int)+0xa0>
c00116f2:	6a 03                	push   0x3
c00116f4:	43                   	inc    ebx
c00116f5:	50                   	push   eax
c00116f6:	e8 d9 fe ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116fb:	59                   	pop    ecx
c00116fc:	39 f3                	cmp    ebx,esi
c00116fe:	58                   	pop    eax
c00116ff:	75 db                	jne    c00116dc <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011701:	83 c4 1c             	add    esp,0x1c
c0011704:	89 e8                	mov    eax,ebp
c0011706:	5b                   	pop    ebx
c0011707:	c1 e0 0c             	shl    eax,0xc
c001170a:	5e                   	pop    esi
c001170b:	5f                   	pop    edi
c001170c:	5d                   	pop    ebp
c001170d:	c3                   	ret    
c001170e:	6a 02                	push   0x2
c0011710:	bb 01 00 00 00       	mov    ebx,0x1
c0011715:	50                   	push   eax
c0011716:	e8 b9 fe ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001171b:	58                   	pop    eax
c001171c:	5a                   	pop    edx
c001171d:	eb bd                	jmp    c00116dc <Virt::allocateKernelVirtualPages(int)+0xaf>
c001171f:	6a 04                	push   0x4
c0011721:	8d 45 01             	lea    eax,[ebp+0x1]
c0011724:	55                   	push   ebp
c0011725:	a3 04 d6 02 c0       	mov    ds:0xc002d604,eax
c001172a:	e8 a5 fe ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001172f:	59                   	pop    ecx
c0011730:	89 e8                	mov    eax,ebp
c0011732:	5b                   	pop    ebx
c0011733:	c1 e0 0c             	shl    eax,0xc
c0011736:	83 c4 1c             	add    esp,0x1c
c0011739:	5b                   	pop    ebx
c001173a:	5e                   	pop    esi
c001173b:	5f                   	pop    edi
c001173c:	5d                   	pop    ebp
c001173d:	c3                   	ret    

c001173e <Virt::freeSwapfilePage(unsigned long)>:
c001173e:	53                   	push   ebx
c001173f:	8b 15 cc e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7cc
c0011745:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011749:	b8 01 00 00 00       	mov    eax,0x1
c001174e:	89 cb                	mov    ebx,ecx
c0011750:	d3 e0                	shl    eax,cl
c0011752:	c1 eb 05             	shr    ebx,0x5
c0011755:	f7 d0                	not    eax
c0011757:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001175a:	5b                   	pop    ebx
c001175b:	c3                   	ret    

c001175c <Virt::swapIDToSector(unsigned long)>:
c001175c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011760:	0f af 05 0c d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d60c
c0011767:	03 05 14 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d614
c001176d:	c3                   	ret    

c001176e <Virt::allocateSwapfilePage()>:
c001176e:	55                   	push   ebp
c001176f:	31 d2                	xor    edx,edx
c0011771:	57                   	push   edi
c0011772:	56                   	push   esi
c0011773:	53                   	push   ebx
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	8b 0d 0c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d60c
c001177d:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c0011782:	f7 f1                	div    ecx
c0011784:	39 0d 10 d6 02 c0    	cmp    DWORD PTR ds:0xc002d610,ecx
c001178a:	72 2d                	jb     c00117b9 <Virt::allocateSwapfilePage()+0x4b>
c001178c:	8b 35 cc e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e7cc
c0011792:	8b 16                	mov    edx,DWORD PTR [esi]
c0011794:	f6 c2 01             	test   dl,0x1
c0011797:	74 3c                	je     c00117d5 <Virt::allocateSwapfilePage()+0x67>
c0011799:	31 c9                	xor    ecx,ecx
c001179b:	bf 01 00 00 00       	mov    edi,0x1
c00117a0:	eb 12                	jmp    c00117b4 <Virt::allocateSwapfilePage()+0x46>
c00117a2:	89 fd                	mov    ebp,edi
c00117a4:	89 ca                	mov    edx,ecx
c00117a6:	d3 e5                	shl    ebp,cl
c00117a8:	c1 ea 05             	shr    edx,0x5
c00117ab:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00117ae:	8b 13                	mov    edx,DWORD PTR [ebx]
c00117b0:	85 ea                	test   edx,ebp
c00117b2:	74 2a                	je     c00117de <Virt::allocateSwapfilePage()+0x70>
c00117b4:	41                   	inc    ecx
c00117b5:	39 c8                	cmp    eax,ecx
c00117b7:	77 e9                	ja     c00117a2 <Virt::allocateSwapfilePage()+0x34>
c00117b9:	83 ec 0c             	sub    esp,0xc
c00117bc:	68 4c ad 02 c0       	push   0xc002ad4c
c00117c1:	e8 d7 8b 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	31 c9                	xor    ecx,ecx
c00117cb:	83 c4 0c             	add    esp,0xc
c00117ce:	89 c8                	mov    eax,ecx
c00117d0:	5b                   	pop    ebx
c00117d1:	5e                   	pop    esi
c00117d2:	5f                   	pop    edi
c00117d3:	5d                   	pop    ebp
c00117d4:	c3                   	ret    
c00117d5:	89 f3                	mov    ebx,esi
c00117d7:	bd 01 00 00 00       	mov    ebp,0x1
c00117dc:	31 c9                	xor    ecx,ecx
c00117de:	09 ea                	or     edx,ebp
c00117e0:	89 c8                	mov    eax,ecx
c00117e2:	89 13                	mov    DWORD PTR [ebx],edx
c00117e4:	83 c4 0c             	add    esp,0xc
c00117e7:	5b                   	pop    ebx
c00117e8:	5e                   	pop    esi
c00117e9:	5f                   	pop    edi
c00117ea:	5d                   	pop    ebp
c00117eb:	c3                   	ret    

c00117ec <Virt::virtualMemorySetup()>:
c00117ec:	53                   	push   ebx
c00117ed:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117f2:	6a 0f                	push   0xf
c00117f4:	53                   	push   ebx
c00117f5:	43                   	inc    ebx
c00117f6:	e8 d9 fd ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117fb:	58                   	pop    eax
c00117fc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011802:	5a                   	pop    edx
c0011803:	75 ed                	jne    c00117f2 <Virt::virtualMemorySetup()+0x6>
c0011805:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001180a:	6a 00                	push   0x0
c001180c:	53                   	push   ebx
c001180d:	43                   	inc    ebx
c001180e:	e8 c1 fd ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011813:	59                   	pop    ecx
c0011814:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001181a:	58                   	pop    eax
c001181b:	75 ed                	jne    c001180a <Virt::virtualMemorySetup()+0x1e>
c001181d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011822:	6a 0f                	push   0xf
c0011824:	53                   	push   ebx
c0011825:	43                   	inc    ebx
c0011826:	e8 a9 fd ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001182b:	58                   	pop    eax
c001182c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011832:	5a                   	pop    edx
c0011833:	75 ed                	jne    c0011822 <Virt::virtualMemorySetup()+0x36>
c0011835:	5b                   	pop    ebx
c0011836:	c3                   	ret    

c0011837 <Virt::setupPageSwapping(int)>:
c0011837:	53                   	push   ebx
c0011838:	83 ec 0c             	sub    esp,0xc
c001183b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001183f:	a1 68 ec 02 c0       	mov    eax,ds:0xc002ec68
c0011844:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001184a:	8b 10                	mov    edx,DWORD PTR [eax]
c001184c:	53                   	push   ebx
c001184d:	c1 e3 0b             	shl    ebx,0xb
c0011850:	68 63 ad 02 c0       	push   0xc002ad63
c0011855:	50                   	push   eax
c0011856:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011859:	89 1d 10 d6 02 c0    	mov    DWORD PTR ds:0xc002d610,ebx
c001185f:	c6 05 18 d6 02 c0 43 	mov    BYTE PTR ds:0xc002d618,0x43
c0011866:	c1 eb 08             	shr    ebx,0x8
c0011869:	a3 14 d6 02 c0       	mov    ds:0xc002d614,eax
c001186e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011871:	c7 05 0c d6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d60c,0x8
c001187b:	e8 27 e1 ff ff       	call   c000f9a7 <malloc>
c0011880:	83 c4 0c             	add    esp,0xc
c0011883:	89 c1                	mov    ecx,eax
c0011885:	a3 cc e7 02 c0       	mov    ds:0xc002e7cc,eax
c001188a:	31 d2                	xor    edx,edx
c001188c:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c0011891:	f7 35 0c d6 02 c0    	div    DWORD PTR ds:0xc002d60c
c0011897:	c1 e8 05             	shr    eax,0x5
c001189a:	50                   	push   eax
c001189b:	6a 00                	push   0x0
c001189d:	51                   	push   ecx
c001189e:	e8 ad ee fe ff       	call   c0000750 <memset>
c00118a3:	83 c4 18             	add    esp,0x18
c00118a6:	5b                   	pop    ebx
c00118a7:	c3                   	ret    

c00118a8 <VAS::VAS()>:
c00118a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c2:	a3 d0 e7 02 c0       	mov    ds:0xc002e7d0,eax
c00118c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118cb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00118cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00118d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118da:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00118e1:	90                   	nop
c00118e2:	c3                   	ret    
c00118e3:	90                   	nop

c00118e4 <VAS::VAS(VAS*)>:
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	68 8c ab 02 c0       	push   0xc002ab8c
c0011905:	e8 93 8a 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	90                   	nop
c001190e:	83 c4 0c             	add    esp,0xc
c0011911:	c3                   	ret    

c0011912 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011916:	89 c2                	mov    edx,eax
c0011918:	c1 e8 0a             	shr    eax,0xa
c001191b:	c1 ea 16             	shr    edx,0x16
c001191e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011923:	19 c9                	sbb    ecx,ecx
c0011925:	c1 e2 0c             	shl    edx,0xc
c0011928:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001192e:	25 fc 0f 00 00       	and    eax,0xffc
c0011933:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001193a:	01 d0                	add    eax,edx
c001193c:	c3                   	ret    
c001193d:	90                   	nop

c001193e <VAS::getPageTableEntry(unsigned long)>:
c001193e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011942:	89 ca                	mov    edx,ecx
c0011944:	c1 e9 0a             	shr    ecx,0xa
c0011947:	c1 ea 16             	shr    edx,0x16
c001194a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011950:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011956:	c1 e0 0c             	shl    eax,0xc
c0011959:	8d 04 08             	lea    eax,[eax+ecx*1]
c001195c:	c3                   	ret    

c001195d <Virt::freeKernelVirtualPages(unsigned long)>:
c001195d:	57                   	push   edi
c001195e:	56                   	push   esi
c001195f:	be 01 00 00 00       	mov    esi,0x1
c0011964:	53                   	push   ebx
c0011965:	83 ec 10             	sub    esp,0x10
c0011968:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001196c:	c1 eb 0c             	shr    ebx,0xc
c001196f:	eb 3f                	jmp    c00119b0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011971:	83 ec 08             	sub    esp,0x8
c0011974:	57                   	push   edi
c0011975:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c001197b:	e8 be ff ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c0011980:	83 c4 10             	add    esp,0x10
c0011983:	8b 00                	mov    eax,DWORD PTR [eax]
c0011985:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011989:	f6 c4 04             	test   ah,0x4
c001198c:	75 5f                	jne    c00119ed <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001198e:	80 fa 04             	cmp    dl,0x4
c0011991:	74 78                	je     c0011a0b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011993:	80 fa 02             	cmp    dl,0x2
c0011996:	0f 84 88 00 00 00    	je     c0011a24 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001199c:	80 fa 03             	cmp    dl,0x3
c001199f:	0f 84 ad 00 00 00    	je     c0011a52 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119a5:	fe ca                	dec    dl
c00119a7:	0f 84 92 00 00 00    	je     c0011a3f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119ad:	43                   	inc    ebx
c00119ae:	31 f6                	xor    esi,esi
c00119b0:	53                   	push   ebx
c00119b1:	89 df                	mov    edi,ebx
c00119b3:	e8 51 fc ff ff       	call   c0011609 <Virt::getPageState(unsigned long)>
c00119b8:	c1 e7 0c             	shl    edi,0xc
c00119bb:	59                   	pop    ecx
c00119bc:	84 c0                	test   al,al
c00119be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119c2:	75 ad                	jne    c0011971 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 7a ad 02 c0       	push   0xc002ad7a
c00119cc:	e8 cc 89 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00119d1:	58                   	pop    eax
c00119d2:	5a                   	pop    edx
c00119d3:	57                   	push   edi
c00119d4:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c00119da:	e8 5f ff ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00119e4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119e8:	f6 c4 04             	test   ah,0x4
c00119eb:	74 c0                	je     c00119ad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00119ed:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00119f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119f6:	83 ec 0c             	sub    esp,0xc
c00119f9:	50                   	push   eax
c00119fa:	e8 33 e3 ff ff       	call   c000fd32 <Phys::freePage(unsigned long)>
c00119ff:	83 c4 10             	add    esp,0x10
c0011a02:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a06:	80 fa 04             	cmp    dl,0x4
c0011a09:	75 88                	jne    c0011993 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a0b:	89 f0                	mov    eax,esi
c0011a0d:	84 c0                	test   al,al
c0011a0f:	75 47                	jne    c0011a58 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a11:	c7 44 24 20 b0 ab 02 c0 	mov    DWORD PTR [esp+0x20],0xc002abb0
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	5b                   	pop    ebx
c0011a1d:	5e                   	pop    esi
c0011a1e:	5f                   	pop    edi
c0011a1f:	e9 79 89 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c0011a24:	89 f0                	mov    eax,esi
c0011a26:	84 c0                	test   al,al
c0011a28:	75 15                	jne    c0011a3f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	68 96 ad 02 c0       	push   0xc002ad96
c0011a32:	e8 66 89 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	e9 6e ff ff ff       	jmp    c00119ad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a3f:	83 ec 08             	sub    esp,0x8
c0011a42:	6a 00                	push   0x0
c0011a44:	53                   	push   ebx
c0011a45:	e8 8a fb ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	e9 5b ff ff ff       	jmp    c00119ad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a52:	89 f0                	mov    eax,esi
c0011a54:	84 c0                	test   al,al
c0011a56:	75 15                	jne    c0011a6d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a58:	83 ec 08             	sub    esp,0x8
c0011a5b:	6a 00                	push   0x0
c0011a5d:	53                   	push   ebx
c0011a5e:	e8 71 fb ff ff       	call   c00115d4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	5b                   	pop    ebx
c0011a6a:	5e                   	pop    esi
c0011a6b:	5f                   	pop    edi
c0011a6c:	c3                   	ret    
c0011a6d:	c7 44 24 20 b2 ad 02 c0 	mov    DWORD PTR [esp+0x20],0xc002adb2
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	5b                   	pop    ebx
c0011a79:	5e                   	pop    esi
c0011a7a:	5f                   	pop    edi
c0011a7b:	e9 1d 89 00 00       	jmp    c001a39d <Krnl::panic(char const*)>

c0011a80 <VAS::freeAllocatedPages(unsigned long)>:
c0011a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a88:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011a8c:	74 09                	je     c0011a97 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011a8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a92:	e9 c6 fe ff ff       	jmp    c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c0011a97:	c7 44 24 04 d4 ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002abd4
c0011a9f:	e9 5b 0f 00 00       	jmp    c00129ff <Dbg::kprintf(char const*, ...)>

c0011aa4 <VAS::virtualToPhysical(unsigned long)>:
c0011aa4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011aa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011aac:	e8 8d fe ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c0011ab1:	5a                   	pop    edx
c0011ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ab4:	59                   	pop    ecx
c0011ab5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011aba:	c3                   	ret    
c0011abb:	90                   	nop

c0011abc <VAS::reflagRange(unsigned long, int, int, int)>:
c0011abc:	55                   	push   ebp
c0011abd:	57                   	push   edi
c0011abe:	56                   	push   esi
c0011abf:	53                   	push   ebx
c0011ac0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011ac4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ac8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011acc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ad0:	85 db                	test   ebx,ebx
c0011ad2:	7e 22                	jle    c0011af6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ad4:	c1 e3 0c             	shl    ebx,0xc
c0011ad7:	01 f3                	add    ebx,esi
c0011ad9:	56                   	push   esi
c0011ada:	81 c6 00 10 00 00    	add    esi,0x1000
c0011ae0:	55                   	push   ebp
c0011ae1:	e8 58 fe ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c0011ae6:	5a                   	pop    edx
c0011ae7:	59                   	pop    ecx
c0011ae8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011aea:	21 f9                	and    ecx,edi
c0011aec:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011af0:	39 f3                	cmp    ebx,esi
c0011af2:	89 08                	mov    DWORD PTR [eax],ecx
c0011af4:	75 e3                	jne    c0011ad9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011af6:	5b                   	pop    ebx
c0011af7:	5e                   	pop    esi
c0011af8:	5f                   	pop    edi
c0011af9:	5d                   	pop    ebp
c0011afa:	c3                   	ret    
c0011afb:	90                   	nop

c0011afc <VAS::setToWriteCombining(unsigned long, int)>:
c0011afc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011b01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b07:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b0e:	75 01                	jne    c0011b11 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b10:	c3                   	ret    
c0011b11:	68 80 00 00 00       	push   0x80
c0011b16:	6a ff                	push   0xffffffff
c0011b18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b24:	e8 93 ff ff ff       	call   c0011abc <VAS::reflagRange(unsigned long, int, int, int)>
c0011b29:	83 c4 14             	add    esp,0x14
c0011b2c:	c3                   	ret    
c0011b2d:	90                   	nop

c0011b2e <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b2e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b37:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b3e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b41:	19 c0                	sbb    eax,eax
c0011b43:	83 ca 03             	or     edx,0x3
c0011b46:	83 e0 fc             	and    eax,0xfffffffc
c0011b49:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b50:	0f 20 d8             	mov    eax,cr3
c0011b53:	0f 22 d8             	mov    cr3,eax
c0011b56:	c3                   	ret    
c0011b57:	90                   	nop

c0011b58 <VAS::~VAS()>:
c0011b58:	83 ec 2c             	sub    esp,0x2c
c0011b5b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b63:	fa                   	cli    
c0011b64:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0011b69:	40                   	inc    eax
c0011b6a:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0011b6f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b79:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011b83:	6a 01                	push   0x1
c0011b85:	50                   	push   eax
c0011b86:	e8 a3 ff ff ff       	call   c0011b2e <VAS::mapOtherVASIn(bool, VAS*)>
c0011b8b:	83 c4 0c             	add    esp,0xc
c0011b8e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011b96:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011b9e:	0f 8f d4 00 00 00    	jg     c0011c78 <VAS::~VAS()+0x120>
c0011ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ba8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011baf:	c1 e2 02             	shl    edx,0x2
c0011bb2:	01 d0                	add    eax,edx
c0011bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bbe:	83 e0 01             	and    eax,0x1
c0011bc1:	0f 84 a8 00 00 00    	je     c0011c6f <VAS::~VAS()+0x117>
c0011bc7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011bcf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011bd7:	7f 72                	jg     c0011c4b <VAS::~VAS()+0xf3>
c0011bd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bdd:	c1 e0 0a             	shl    eax,0xa
c0011be0:	89 c2                	mov    edx,eax
c0011be2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011be6:	01 d0                	add    eax,edx
c0011be8:	c1 e0 0c             	shl    eax,0xc
c0011beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bf9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c03:	6a 01                	push   0x1
c0011c05:	50                   	push   eax
c0011c06:	e8 07 fd ff ff       	call   c0011912 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c0b:	83 c4 0c             	add    esp,0xc
c0011c0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c20:	25 01 04 00 00       	and    eax,0x401
c0011c25:	3d 01 04 00 00       	cmp    eax,0x401
c0011c2a:	75 19                	jne    c0011c45 <VAS::~VAS()+0xed>
c0011c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c35:	83 ec 0c             	sub    esp,0xc
c0011c38:	50                   	push   eax
c0011c39:	e8 f4 e0 ff ff       	call   c000fd32 <Phys::freePage(unsigned long)>
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c45:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c49:	eb 84                	jmp    c0011bcf <VAS::~VAS()+0x77>
c0011c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c4f:	25 00 04 00 00       	and    eax,0x400
c0011c54:	74 19                	je     c0011c6f <VAS::~VAS()+0x117>
c0011c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c5f:	83 ec 0c             	sub    esp,0xc
c0011c62:	50                   	push   eax
c0011c63:	e8 ca e0 ff ff       	call   c000fd32 <Phys::freePage(unsigned long)>
c0011c68:	83 c4 10             	add    esp,0x10
c0011c6b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c6f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c73:	e9 1e ff ff ff       	jmp    c0011b96 <VAS::~VAS()+0x3e>
c0011c78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	50                   	push   eax
c0011c83:	e8 d5 fc ff ff       	call   c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c0011c88:	83 c4 10             	add    esp,0x10
c0011c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	50                   	push   eax
c0011c96:	e8 97 e0 ff ff       	call   c000fd32 <Phys::freePage(unsigned long)>
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ca6:	c1 e0 02             	shl    eax,0x2
c0011ca9:	83 ec 08             	sub    esp,0x8
c0011cac:	50                   	push   eax
c0011cad:	68 f8 ab 02 c0       	push   0xc002abf8
c0011cb2:	e8 48 0d 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0011cb7:	83 c4 10             	add    esp,0x10
c0011cba:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0011cbf:	48                   	dec    eax
c0011cc0:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0011cc5:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0011cca:	85 c0                	test   eax,eax
c0011ccc:	75 01                	jne    c0011ccf <VAS::~VAS()+0x177>
c0011cce:	fb                   	sti    
c0011ccf:	90                   	nop
c0011cd0:	83 c4 2c             	add    esp,0x2c
c0011cd3:	c3                   	ret    

c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011cd4:	55                   	push   ebp
c0011cd5:	57                   	push   edi
c0011cd6:	56                   	push   esi
c0011cd7:	53                   	push   ebx
c0011cd8:	83 ec 1c             	sub    esp,0x1c
c0011cdb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011cdf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011ce9:	77 08                	ja     c0011cf3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011ceb:	0f 20 d8             	mov    eax,cr3
c0011cee:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011cf1:	75 47                	jne    c0011d3a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011cf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cf7:	09 d8                	or     eax,ebx
c0011cf9:	a9 ff 0f 00 00       	test   eax,0xfff
c0011cfe:	75 57                	jne    c0011d57 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d00:	89 de                	mov    esi,ebx
c0011d02:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d05:	c1 ee 16             	shr    esi,0x16
c0011d08:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d0f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d13:	74 54                	je     c0011d69 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d19:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d1f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d23:	c1 e6 0c             	shl    esi,0xc
c0011d26:	c1 eb 0a             	shr    ebx,0xa
c0011d29:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d2f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d32:	83 c4 1c             	add    esp,0x1c
c0011d35:	5b                   	pop    ebx
c0011d36:	5e                   	pop    esi
c0011d37:	5f                   	pop    edi
c0011d38:	5d                   	pop    ebp
c0011d39:	c3                   	ret    
c0011d3a:	83 ec 0c             	sub    esp,0xc
c0011d3d:	68 18 ac 02 c0       	push   0xc002ac18
c0011d42:	e8 b8 0c 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d4e:	09 d8                	or     eax,ebx
c0011d50:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d55:	74 a9                	je     c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d57:	83 ec 0c             	sub    esp,0xc
c0011d5a:	68 80 ac 02 c0       	push   0xc002ac80
c0011d5f:	e8 39 86 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	eb 97                	jmp    c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d6d:	e8 31 e0 ff ff       	call   c000fda3 <Phys::allocatePage()>
c0011d72:	83 ec 0c             	sub    esp,0xc
c0011d75:	89 c5                	mov    ebp,eax
c0011d77:	8b 0d d0 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7d0
c0011d7d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d81:	6a 01                	push   0x1
c0011d83:	e8 a5 f8 ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0011d88:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d8f:	6a 01                	push   0x1
c0011d91:	50                   	push   eax
c0011d92:	55                   	push   ebp
c0011d93:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d99:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d9d:	51                   	push   ecx
c0011d9e:	e8 27 02 00 00       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011da3:	83 c4 1c             	add    esp,0x1c
c0011da6:	68 00 10 00 00       	push   0x1000
c0011dab:	6a 00                	push   0x0
c0011dad:	50                   	push   eax
c0011dae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011db2:	e8 99 e9 fe ff       	call   c0000750 <memset>
c0011db7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dbb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dbe:	e8 9a fb ff ff       	call   c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c0011dc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011dc7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dca:	83 c4 10             	add    esp,0x10
c0011dcd:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011dd0:	e9 40 ff ff ff       	jmp    c0011d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011dd5:	90                   	nop

c0011dd6 <VAS::allocatePages(int, int)>:
c0011dd6:	55                   	push   ebp
c0011dd7:	57                   	push   edi
c0011dd8:	56                   	push   esi
c0011dd9:	53                   	push   ebx
c0011dda:	83 ec 1c             	sub    esp,0x1c
c0011ddd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011de1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011de6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011dec:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011df2:	83 e0 01             	and    eax,0x1
c0011df5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011df9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011dfd:	0f 85 cc 00 00 00    	jne    c0011ecf <VAS::allocatePages(int, int)+0xf9>
c0011e03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e0a:	85 c0                	test   eax,eax
c0011e0c:	0f 84 a1 00 00 00    	je     c0011eb3 <VAS::allocatePages(int, int)+0xdd>
c0011e12:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e1a:	c1 e6 0c             	shl    esi,0xc
c0011e1d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e21:	85 c0                	test   eax,eax
c0011e23:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e26:	7e 33                	jle    c0011e5b <VAS::allocatePages(int, int)+0x85>
c0011e28:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e30:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e36:	e8 68 df ff ff       	call   c000fda3 <Phys::allocatePage()>
c0011e3b:	55                   	push   ebp
c0011e3c:	53                   	push   ebx
c0011e3d:	50                   	push   eax
c0011e3e:	57                   	push   edi
c0011e3f:	e8 90 fe ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e4c:	74 03                	je     c0011e51 <VAS::allocatePages(int, int)+0x7b>
c0011e4e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e51:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e57:	39 de                	cmp    esi,ebx
c0011e59:	75 db                	jne    c0011e36 <VAS::allocatePages(int, int)+0x60>
c0011e5b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e60:	75 12                	jne    c0011e74 <VAS::allocatePages(int, int)+0x9e>
c0011e62:	0f 20 d8             	mov    eax,cr3
c0011e65:	0f 22 d8             	mov    cr3,eax
c0011e68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e6c:	83 c4 1c             	add    esp,0x1c
c0011e6f:	5b                   	pop    ebx
c0011e70:	5e                   	pop    esi
c0011e71:	5f                   	pop    edi
c0011e72:	5d                   	pop    ebp
c0011e73:	c3                   	ret    
c0011e74:	c1 ee 0a             	shr    esi,0xa
c0011e77:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e7b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011e81:	c1 eb 0a             	shr    ebx,0xa
c0011e84:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011e8a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e90:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e96:	39 c3                	cmp    ebx,eax
c0011e98:	77 ce                	ja     c0011e68 <VAS::allocatePages(int, int)+0x92>
c0011e9a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e9d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ea3:	39 d8                	cmp    eax,ebx
c0011ea5:	73 f3                	jae    c0011e9a <VAS::allocatePages(int, int)+0xc4>
c0011ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eab:	83 c4 1c             	add    esp,0x1c
c0011eae:	5b                   	pop    ebx
c0011eaf:	5e                   	pop    esi
c0011eb0:	5f                   	pop    edi
c0011eb1:	5d                   	pop    ebp
c0011eb2:	c3                   	ret    
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	68 a4 ac 02 c0       	push   0xc002aca4
c0011ebb:	e8 dd 84 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0011ec0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	e9 43 ff ff ff       	jmp    c0011e12 <VAS::allocatePages(int, int)+0x3c>
c0011ecf:	83 ec 0c             	sub    esp,0xc
c0011ed2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ed6:	e8 52 f7 ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0011edb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011ee7:	0f 87 9b 00 00 00    	ja     c0011f88 <VAS::allocatePages(int, int)+0x1b2>
c0011eed:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ef1:	85 d2                	test   edx,edx
c0011ef3:	7e 3c                	jle    c0011f31 <VAS::allocatePages(int, int)+0x15b>
c0011ef5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ef9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011efd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f01:	c1 e5 0c             	shl    ebp,0xc
c0011f04:	81 ce 00 04 00 00    	or     esi,0x400
c0011f0a:	01 dd                	add    ebp,ebx
c0011f0c:	e8 92 de ff ff       	call   c000fda3 <Phys::allocatePage()>
c0011f11:	56                   	push   esi
c0011f12:	53                   	push   ebx
c0011f13:	50                   	push   eax
c0011f14:	57                   	push   edi
c0011f15:	e8 ba fd ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f1a:	83 c4 10             	add    esp,0x10
c0011f1d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f22:	74 03                	je     c0011f27 <VAS::allocatePages(int, int)+0x151>
c0011f24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f2d:	39 dd                	cmp    ebp,ebx
c0011f2f:	75 db                	jne    c0011f0c <VAS::allocatePages(int, int)+0x136>
c0011f31:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f36:	0f 84 26 ff ff ff    	je     c0011e62 <VAS::allocatePages(int, int)+0x8c>
c0011f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f44:	89 d3                	mov    ebx,edx
c0011f46:	c1 e0 0c             	shl    eax,0xc
c0011f49:	c1 eb 0a             	shr    ebx,0xa
c0011f4c:	01 d0                	add    eax,edx
c0011f4e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f54:	c1 e8 0a             	shr    eax,0xa
c0011f57:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f62:	2d 00 00 40 00       	sub    eax,0x400000
c0011f67:	39 c3                	cmp    ebx,eax
c0011f69:	0f 87 f9 fe ff ff    	ja     c0011e68 <VAS::allocatePages(int, int)+0x92>
c0011f6f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f72:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f78:	39 d8                	cmp    eax,ebx
c0011f7a:	73 f3                	jae    c0011f6f <VAS::allocatePages(int, int)+0x199>
c0011f7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f80:	83 c4 1c             	add    esp,0x1c
c0011f83:	5b                   	pop    ebx
c0011f84:	5e                   	pop    esi
c0011f85:	5f                   	pop    edi
c0011f86:	5d                   	pop    ebp
c0011f87:	c3                   	ret    
c0011f88:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011f8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f93:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011f9a:	0f 84 4d ff ff ff    	je     c0011eed <VAS::allocatePages(int, int)+0x117>
c0011fa0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fa8:	e9 40 ff ff ff       	jmp    c0011eed <VAS::allocatePages(int, int)+0x117>
c0011fad:	90                   	nop

c0011fae <VAS::setCPUSpecific(unsigned long)>:
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	6a 05                	push   0x5
c0011fb3:	68 00 00 40 c2       	push   0xc2400000
c0011fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fc0:	e8 0f fd ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fc5:	83 c4 1c             	add    esp,0x1c
c0011fc8:	c3                   	ret    
c0011fc9:	90                   	nop

c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011fca:	55                   	push   ebp
c0011fcb:	57                   	push   edi
c0011fcc:	56                   	push   esi
c0011fcd:	53                   	push   ebx
c0011fce:	83 ec 1c             	sub    esp,0x1c
c0011fd1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011fd6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fe0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011fe4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011fea:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011fee:	83 e0 01             	and    eax,0x1
c0011ff1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ff5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ff9:	85 c0                	test   eax,eax
c0011ffb:	7e 39                	jle    c0012036 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011ffd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012001:	89 f3                	mov    ebx,esi
c0012003:	c1 e0 0c             	shl    eax,0xc
c0012006:	01 f0                	add    eax,esi
c0012008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001200c:	55                   	push   ebp
c001200d:	53                   	push   ebx
c001200e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012012:	29 f0                	sub    eax,esi
c0012014:	01 d8                	add    eax,ebx
c0012016:	50                   	push   eax
c0012017:	57                   	push   edi
c0012018:	e8 b7 fc ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012025:	74 03                	je     c001202a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012027:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001202a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012030:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012034:	75 d6                	jne    c001200c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012036:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001203b:	75 10                	jne    c001204d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001203d:	0f 20 d8             	mov    eax,cr3
c0012040:	0f 22 d8             	mov    cr3,eax
c0012043:	83 c4 1c             	add    esp,0x1c
c0012046:	89 f0                	mov    eax,esi
c0012048:	5b                   	pop    ebx
c0012049:	5e                   	pop    esi
c001204a:	5f                   	pop    edi
c001204b:	5d                   	pop    ebp
c001204c:	c3                   	ret    
c001204d:	89 f3                	mov    ebx,esi
c001204f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012053:	c1 eb 0a             	shr    ebx,0xa
c0012056:	c1 e0 0c             	shl    eax,0xc
c0012059:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001205f:	01 f0                	add    eax,esi
c0012061:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012067:	c1 e8 0a             	shr    eax,0xa
c001206a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001206f:	2d 00 00 40 00       	sub    eax,0x400000
c0012074:	39 c3                	cmp    ebx,eax
c0012076:	77 cb                	ja     c0012043 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012078:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001207b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012081:	39 d8                	cmp    eax,ebx
c0012083:	73 f3                	jae    c0012078 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012085:	83 c4 1c             	add    esp,0x1c
c0012088:	89 f0                	mov    eax,esi
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	5f                   	pop    edi
c001208d:	5d                   	pop    ebp
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012090:	55                   	push   ebp
c0012091:	57                   	push   edi
c0012092:	56                   	push   esi
c0012093:	53                   	push   ebx
c0012094:	83 ec 1c             	sub    esp,0x1c
c0012097:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001209b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001209f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120a7:	a9 ff 0f 00 00       	test   eax,0xfff
c00120ac:	75 4a                	jne    c00120f8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120ae:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120b2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120b5:	c1 eb 16             	shr    ebx,0x16
c00120b8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120bf:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120c3:	74 4d                	je     c0012112 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120c9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00120cd:	c1 e8 0a             	shr    eax,0xa
c00120d0:	80 fa 01             	cmp    dl,0x1
c00120d3:	19 d2                	sbb    edx,edx
c00120d5:	c1 e3 0c             	shl    ebx,0xc
c00120d8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00120dc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00120e2:	25 fc 0f 00 00       	and    eax,0xffc
c00120e7:	01 d8                	add    eax,ebx
c00120e9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120f0:	83 c4 1c             	add    esp,0x1c
c00120f3:	5b                   	pop    ebx
c00120f4:	5e                   	pop    esi
c00120f5:	5f                   	pop    edi
c00120f6:	5d                   	pop    ebp
c00120f7:	c3                   	ret    
c00120f8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00120fc:	83 ec 0c             	sub    esp,0xc
c00120ff:	68 d0 ac 02 c0       	push   0xc002acd0
c0012104:	e8 94 82 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012110:	eb 9c                	jmp    c00120ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012112:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012116:	e8 88 dc ff ff       	call   c000fda3 <Phys::allocatePage()>
c001211b:	83 ec 0c             	sub    esp,0xc
c001211e:	89 c5                	mov    ebp,eax
c0012120:	8b 0d d0 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7d0
c0012126:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001212a:	6a 01                	push   0x1
c001212c:	e8 fc f4 ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0012131:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012138:	6a 01                	push   0x1
c001213a:	50                   	push   eax
c001213b:	55                   	push   ebp
c001213c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012142:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012146:	51                   	push   ecx
c0012147:	e8 7e fe ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001214c:	83 c4 1c             	add    esp,0x1c
c001214f:	68 00 10 00 00       	push   0x1000
c0012154:	6a 00                	push   0x0
c0012156:	50                   	push   eax
c0012157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001215b:	e8 f0 e5 fe ff       	call   c0000750 <memset>
c0012160:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012164:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012167:	e8 f1 f7 ff ff       	call   c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c001216c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001216f:	83 c4 10             	add    esp,0x10
c0012172:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012175:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012179:	e9 47 ff ff ff       	jmp    c00120c5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001217e <VAS::VAS(bool)>:
c001217e:	53                   	push   ebx
c001217f:	83 ec 28             	sub    esp,0x28
c0012182:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012186:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001218a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001218e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012195:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012199:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121a8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121ab:	e8 f3 db ff ff       	call   c000fda3 <Phys::allocatePage()>
c00121b0:	89 c2                	mov    edx,eax
c00121b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00121b9:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c00121bf:	83 ec 0c             	sub    esp,0xc
c00121c2:	6a 01                	push   0x1
c00121c4:	e8 64 f4 ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c00121c9:	83 c4 10             	add    esp,0x10
c00121cc:	89 c2                	mov    edx,eax
c00121ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121d5:	83 ec 0c             	sub    esp,0xc
c00121d8:	6a 03                	push   0x3
c00121da:	6a 01                	push   0x1
c00121dc:	52                   	push   edx
c00121dd:	50                   	push   eax
c00121de:	53                   	push   ebx
c00121df:	e8 e6 fd ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121e4:	83 c4 20             	add    esp,0x20
c00121e7:	89 c2                	mov    edx,eax
c00121e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121f0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121f8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012200:	7f 1c                	jg     c001221e <VAS::VAS(bool)+0xa0>
c0012202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012206:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012209:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001220d:	c1 e2 02             	shl    edx,0x2
c0012210:	01 d0                	add    eax,edx
c0012212:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012218:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001221c:	eb da                	jmp    c00121f8 <VAS::VAS(bool)+0x7a>
c001221e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012226:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001222e:	7f 7a                	jg     c00122aa <VAS::VAS(bool)+0x12c>
c0012230:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012234:	2d 00 02 00 00       	sub    eax,0x200
c0012239:	c1 e0 0c             	shl    eax,0xc
c001223c:	83 c8 03             	or     eax,0x3
c001223f:	89 c2                	mov    edx,eax
c0012241:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012246:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001224c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012252:	83 e0 10             	and    eax,0x10
c0012255:	84 c0                	test   al,al
c0012257:	74 07                	je     c0012260 <VAS::VAS(bool)+0xe2>
c0012259:	b8 00 01 00 00       	mov    eax,0x100
c001225e:	eb 05                	jmp    c0012265 <VAS::VAS(bool)+0xe7>
c0012260:	b8 00 00 00 00       	mov    eax,0x0
c0012265:	09 d0                	or     eax,edx
c0012267:	89 c1                	mov    ecx,eax
c0012269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012270:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012274:	c1 e2 02             	shl    edx,0x2
c0012277:	01 d0                	add    eax,edx
c0012279:	89 ca                	mov    edx,ecx
c001227b:	89 10                	mov    DWORD PTR [eax],edx
c001227d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012281:	2d 40 03 00 00       	sub    eax,0x340
c0012286:	83 f8 7f             	cmp    eax,0x7f
c0012289:	77 16                	ja     c00122a1 <VAS::VAS(bool)+0x123>
c001228b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001228f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012292:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012296:	c1 e2 02             	shl    edx,0x2
c0012299:	01 d0                	add    eax,edx
c001229b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122a1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122a5:	e9 7c ff ff ff       	jmp    c0012226 <VAS::VAS(bool)+0xa8>
c00122aa:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00122af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122b5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122bb:	83 e0 10             	and    eax,0x10
c00122be:	84 c0                	test   al,al
c00122c0:	74 07                	je     c00122c9 <VAS::VAS(bool)+0x14b>
c00122c2:	b8 03 41 00 00       	mov    eax,0x4103
c00122c7:	eb 05                	jmp    c00122ce <VAS::VAS(bool)+0x150>
c00122c9:	b8 03 40 00 00       	mov    eax,0x4003
c00122ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122d2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00122d5:	81 c2 20 0c 00 00    	add    edx,0xc20
c00122db:	89 02                	mov    DWORD PTR [edx],eax
c00122dd:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00122e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00122ee:	83 ec 08             	sub    esp,0x8
c00122f1:	50                   	push   eax
c00122f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122f6:	e8 b3 fc ff ff       	call   c0011fae <VAS::setCPUSpecific(unsigned long)>
c00122fb:	83 c4 10             	add    esp,0x10
c00122fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012302:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012305:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001230a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012310:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012316:	83 e0 10             	and    eax,0x10
c0012319:	84 c0                	test   al,al
c001231b:	74 07                	je     c0012324 <VAS::VAS(bool)+0x1a6>
c001231d:	b8 00 01 00 00       	mov    eax,0x100
c0012322:	eb 05                	jmp    c0012329 <VAS::VAS(bool)+0x1ab>
c0012324:	b8 00 00 00 00       	mov    eax,0x0
c0012329:	09 c2                	or     edx,eax
c001232b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012332:	05 fc 0f 00 00       	add    eax,0xffc
c0012337:	83 ca 03             	or     edx,0x3
c001233a:	89 10                	mov    DWORD PTR [eax],edx
c001233c:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012341:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012347:	83 ec 0c             	sub    esp,0xc
c001234a:	50                   	push   eax
c001234b:	e8 e8 1d 00 00       	call   c0014138 <Device::getName()>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	83 ec 08             	sub    esp,0x8
c0012356:	68 cc ad 02 c0       	push   0xc002adcc
c001235b:	50                   	push   eax
c001235c:	e8 37 e5 fe ff       	call   c0000898 <strcmp>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	85 c0                	test   eax,eax
c0012366:	0f 94 c0             	sete   al
c0012369:	84 c0                	test   al,al
c001236b:	0f 84 87 00 00 00    	je     c00123f8 <VAS::VAS(bool)+0x27a>
c0012371:	fa                   	cli    
c0012372:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0012377:	40                   	inc    eax
c0012378:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001237d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012382:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012388:	05 7c 09 00 00       	add    eax,0x97c
c001238d:	83 ec 0c             	sub    esp,0xc
c0012390:	50                   	push   eax
c0012391:	e8 54 cf ff ff       	call   c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	25 00 f0 ff ff       	and    eax,0xfffff000
c001239e:	89 c3                	mov    ebx,eax
c00123a0:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00123a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ab:	05 7c 09 00 00       	add    eax,0x97c
c00123b0:	83 ec 0c             	sub    esp,0xc
c00123b3:	50                   	push   eax
c00123b4:	e8 31 cf ff ff       	call   c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123b9:	83 c4 10             	add    esp,0x10
c00123bc:	83 ec 08             	sub    esp,0x8
c00123bf:	50                   	push   eax
c00123c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123c4:	e8 75 f5 ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00123ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123d3:	6a 11                	push   0x11
c00123d5:	53                   	push   ebx
c00123d6:	50                   	push   eax
c00123d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123db:	e8 f4 f8 ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123e0:	83 c4 10             	add    esp,0x10
c00123e3:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00123e8:	48                   	dec    eax
c00123e9:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00123ee:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00123f3:	85 c0                	test   eax,eax
c00123f5:	75 01                	jne    c00123f8 <VAS::VAS(bool)+0x27a>
c00123f7:	fb                   	sti    
c00123f8:	90                   	nop
c00123f9:	83 c4 28             	add    esp,0x28
c00123fc:	5b                   	pop    ebx
c00123fd:	c3                   	ret    

c00123fe <VAS::evict(unsigned long)>:
c00123fe:	55                   	push   ebp
c00123ff:	57                   	push   edi
c0012400:	56                   	push   esi
c0012401:	53                   	push   ebx
c0012402:	83 ec 28             	sub    esp,0x28
c0012405:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012409:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001240d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012411:	68 da ad 02 c0       	push   0xc002adda
c0012416:	e8 e4 05 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001241b:	e8 4e f3 ff ff       	call   c001176e <Virt::allocateSwapfilePage()>
c0012420:	5a                   	pop    edx
c0012421:	89 c7                	mov    edi,eax
c0012423:	59                   	pop    ecx
c0012424:	50                   	push   eax
c0012425:	68 f7 ad 02 c0       	push   0xc002adf7
c001242a:	e8 d0 05 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	8b 1d 0c d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d60c
c0012438:	85 db                	test   ebx,ebx
c001243a:	7e 3d                	jle    c0012479 <VAS::evict(unsigned long)+0x7b>
c001243c:	89 ee                	mov    esi,ebp
c001243e:	31 db                	xor    ebx,ebx
c0012440:	83 ec 0c             	sub    esp,0xc
c0012443:	57                   	push   edi
c0012444:	e8 13 f3 ff ff       	call   c001175c <Virt::swapIDToSector(unsigned long)>
c0012449:	89 34 24             	mov    DWORD PTR [esp],esi
c001244c:	01 d8                	add    eax,ebx
c001244e:	6a 01                	push   0x1
c0012450:	31 d2                	xor    edx,edx
c0012452:	43                   	inc    ebx
c0012453:	52                   	push   edx
c0012454:	81 c6 00 02 00 00    	add    esi,0x200
c001245a:	50                   	push   eax
c001245b:	0f be 05 18 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d618
c0012462:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012469:	e8 58 3f 00 00       	call   c00163c6 <LogicalDisk::write(unsigned long long, int, void*)>
c001246e:	83 c4 20             	add    esp,0x20
c0012471:	39 1d 0c d6 02 c0    	cmp    DWORD PTR ds:0xc002d60c,ebx
c0012477:	7f c7                	jg     c0012440 <VAS::evict(unsigned long)+0x42>
c0012479:	83 ec 08             	sub    esp,0x8
c001247c:	c1 e7 0b             	shl    edi,0xb
c001247f:	55                   	push   ebp
c0012480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012484:	e8 b5 f4 ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c0012489:	5a                   	pop    edx
c001248a:	89 c6                	mov    esi,eax
c001248c:	59                   	pop    ecx
c001248d:	ff 30                	push   DWORD PTR [eax]
c001248f:	68 07 ae 02 c0       	push   0xc002ae07
c0012494:	e8 66 05 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012499:	8b 16                	mov    edx,DWORD PTR [esi]
c001249b:	89 d3                	mov    ebx,edx
c001249d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124a9:	09 d7                	or     edi,edx
c00124ab:	89 3e                	mov    DWORD PTR [esi],edi
c00124ad:	5e                   	pop    esi
c00124ae:	58                   	pop    eax
c00124af:	57                   	push   edi
c00124b0:	68 20 ae 02 c0       	push   0xc002ae20
c00124b5:	e8 45 05 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00124ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124bd:	ff 05 c8 e7 02 c0    	inc    DWORD PTR ds:0xc002e7c8
c00124c3:	e8 6a d8 ff ff       	call   c000fd32 <Phys::freePage(unsigned long)>
c00124c8:	0f 20 d8             	mov    eax,cr3
c00124cb:	0f 22 d8             	mov    cr3,eax
c00124ce:	ff 35 c8 e7 02 c0    	push   DWORD PTR ds:0xc002e7c8
c00124d4:	55                   	push   ebp
c00124d5:	53                   	push   ebx
c00124d6:	68 f4 ac 02 c0       	push   0xc002acf4
c00124db:	e8 1f 05 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00124e0:	a1 c4 e7 02 c0       	mov    eax,ds:0xc002e7c4
c00124e5:	c7 44 24 50 39 ae 02 c0 	mov    DWORD PTR [esp+0x50],0xc002ae39
c00124ed:	8d 50 01             	lea    edx,[eax+0x1]
c00124f0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00124f4:	89 15 c4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c4,edx
c00124fa:	83 c4 3c             	add    esp,0x3c
c00124fd:	5b                   	pop    ebx
c00124fe:	5e                   	pop    esi
c00124ff:	5f                   	pop    edi
c0012500:	5d                   	pop    ebp
c0012501:	e9 f9 04 00 00       	jmp    c00129ff <Dbg::kprintf(char const*, ...)>

c0012506 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012506:	55                   	push   ebp
c0012507:	57                   	push   edi
c0012508:	56                   	push   esi
c0012509:	53                   	push   ebx
c001250a:	83 ec 24             	sub    esp,0x24
c001250d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012511:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012515:	68 4a ae 02 c0       	push   0xc002ae4a
c001251a:	e8 e0 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001251f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012523:	58                   	pop    eax
c0012524:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c001252a:	5a                   	pop    edx
c001252b:	57                   	push   edi
c001252c:	53                   	push   ebx
c001252d:	e8 0c f4 ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c0012532:	59                   	pop    ecx
c0012533:	5e                   	pop    esi
c0012534:	89 c6                	mov    esi,eax
c0012536:	ff 30                	push   DWORD PTR [eax]
c0012538:	68 5d ae 02 c0       	push   0xc002ae5d
c001253d:	e8 bd 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012542:	83 c4 10             	add    esp,0x10
c0012545:	85 ff                	test   edi,edi
c0012547:	74 0a                	je     c0012553 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012549:	8b 2e                	mov    ebp,DWORD PTR [esi]
c001254b:	f7 c5 01 00 00 00    	test   ebp,0x1
c0012551:	74 0a                	je     c001255d <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012553:	83 c4 1c             	add    esp,0x1c
c0012556:	31 c0                	xor    eax,eax
c0012558:	5b                   	pop    ebx
c0012559:	5e                   	pop    esi
c001255a:	5f                   	pop    edi
c001255b:	5d                   	pop    ebp
c001255c:	c3                   	ret    
c001255d:	83 ec 08             	sub    esp,0x8
c0012560:	c1 ed 0b             	shr    ebp,0xb
c0012563:	55                   	push   ebp
c0012564:	68 6b ae 02 c0       	push   0xc002ae6b
c0012569:	e8 91 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001256e:	e8 30 d8 ff ff       	call   c000fda3 <Phys::allocatePage()>
c0012573:	59                   	pop    ecx
c0012574:	5a                   	pop    edx
c0012575:	50                   	push   eax
c0012576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001257a:	68 76 ae 02 c0       	push   0xc002ae76
c001257f:	e8 7b 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012584:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012588:	8b 16                	mov    edx,DWORD PTR [esi]
c001258a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012590:	09 d0                	or     eax,edx
c0012592:	0d 01 08 00 00       	or     eax,0x801
c0012597:	89 06                	mov    DWORD PTR [esi],eax
c0012599:	59                   	pop    ecx
c001259a:	5e                   	pop    esi
c001259b:	50                   	push   eax
c001259c:	68 8b ae 02 c0       	push   0xc002ae8b
c00125a1:	e8 59 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00125a6:	0f 20 d8             	mov    eax,cr3
c00125a9:	83 c4 0c             	add    esp,0xc
c00125ac:	53                   	push   ebx
c00125ad:	50                   	push   eax
c00125ae:	68 a3 ae 02 c0       	push   0xc002aea3
c00125b3:	e8 47 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00125b8:	c7 04 24 bb ae 02 c0 	mov    DWORD PTR [esp],0xc002aebb
c00125bf:	e8 3b 04 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00125c4:	83 c4 10             	add    esp,0x10
c00125c7:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c00125cc:	85 c0                	test   eax,eax
c00125ce:	7e 3d                	jle    c001260d <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c00125d0:	89 fe                	mov    esi,edi
c00125d2:	31 db                	xor    ebx,ebx
c00125d4:	83 ec 0c             	sub    esp,0xc
c00125d7:	55                   	push   ebp
c00125d8:	e8 7f f1 ff ff       	call   c001175c <Virt::swapIDToSector(unsigned long)>
c00125dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00125e0:	01 d8                	add    eax,ebx
c00125e2:	6a 01                	push   0x1
c00125e4:	31 d2                	xor    edx,edx
c00125e6:	43                   	inc    ebx
c00125e7:	52                   	push   edx
c00125e8:	81 c6 00 02 00 00    	add    esi,0x200
c00125ee:	50                   	push   eax
c00125ef:	0f be 05 18 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d618
c00125f6:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c00125fd:	e8 58 3d 00 00       	call   c001635a <LogicalDisk::read(unsigned long long, int, void*)>
c0012602:	83 c4 20             	add    esp,0x20
c0012605:	39 1d 0c d6 02 c0    	cmp    DWORD PTR ds:0xc002d60c,ebx
c001260b:	7f c7                	jg     c00125d4 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c001260d:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0012612:	48                   	dec    eax
c0012613:	52                   	push   edx
c0012614:	a3 c8 e7 02 c0       	mov    ds:0xc002e7c8,eax
c0012619:	50                   	push   eax
c001261a:	57                   	push   edi
c001261b:	68 cb ae 02 c0       	push   0xc002aecb
c0012620:	e8 da 03 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012625:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012628:	e8 11 f1 ff ff       	call   c001173e <Virt::freeSwapfilePage(unsigned long)>
c001262d:	c7 04 24 e0 ae 02 c0 	mov    DWORD PTR [esp],0xc002aee0
c0012634:	e8 c6 03 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012639:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001263e:	83 c4 10             	add    esp,0x10
c0012641:	48                   	dec    eax
c0012642:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0012647:	85 c0                	test   eax,eax
c0012649:	75 01                	jne    c001264c <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c001264b:	fb                   	sti    
c001264c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012650:	25 ff 0f 00 00       	and    eax,0xfff
c0012655:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001265a:	77 20                	ja     c001267c <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c001265c:	0f 20 d8             	mov    eax,cr3
c001265f:	0f 22 d8             	mov    cr3,eax
c0012662:	83 ec 0c             	sub    esp,0xc
c0012665:	68 06 af 02 c0       	push   0xc002af06
c001266a:	e8 90 03 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001266f:	83 c4 10             	add    esp,0x10
c0012672:	b0 01                	mov    al,0x1
c0012674:	83 c4 1c             	add    esp,0x1c
c0012677:	5b                   	pop    ebx
c0012678:	5e                   	pop    esi
c0012679:	5f                   	pop    edi
c001267a:	5d                   	pop    ebp
c001267b:	c3                   	ret    
c001267c:	83 ec 0c             	sub    esp,0xc
c001267f:	68 f6 ae 02 c0       	push   0xc002aef6
c0012684:	e8 76 03 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	eb ce                	jmp    c001265c <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c001268e <VAS::scanForEviction()>:
c001268e:	55                   	push   ebp
c001268f:	31 ed                	xor    ebp,ebp
c0012691:	57                   	push   edi
c0012692:	56                   	push   esi
c0012693:	53                   	push   ebx
c0012694:	83 ec 0c             	sub    esp,0xc
c0012697:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001269b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001269e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126a4:	75 0e                	jne    c00126b4 <VAS::scanForEviction()+0x26>
c00126a6:	89 da                	mov    edx,ebx
c00126a8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126ab:	c1 ea 16             	shr    edx,0x16
c00126ae:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126b2:	74 4e                	je     c0012702 <VAS::scanForEviction()+0x74>
c00126b4:	53                   	push   ebx
c00126b5:	56                   	push   esi
c00126b6:	e8 83 f2 ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c00126bb:	5f                   	pop    edi
c00126bc:	8b 38                	mov    edi,DWORD PTR [eax]
c00126be:	5a                   	pop    edx
c00126bf:	89 fa                	mov    edx,edi
c00126c1:	81 e2 01 08 00 00    	and    edx,0x801
c00126c7:	81 fa 01 08 00 00    	cmp    edx,0x801
c00126cd:	74 3e                	je     c001270d <VAS::scanForEviction()+0x7f>
c00126cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d5:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00126db:	76 2b                	jbe    c0012708 <VAS::scanForEviction()+0x7a>
c00126dd:	45                   	inc    ebp
c00126de:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00126e5:	83 fd 04             	cmp    ebp,0x4
c00126e8:	74 35                	je     c001271f <VAS::scanForEviction()+0x91>
c00126ea:	31 db                	xor    ebx,ebx
c00126ec:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126f2:	75 c0                	jne    c00126b4 <VAS::scanForEviction()+0x26>
c00126f4:	89 da                	mov    edx,ebx
c00126f6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126f9:	c1 ea 16             	shr    edx,0x16
c00126fc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012700:	75 b2                	jne    c00126b4 <VAS::scanForEviction()+0x26>
c0012702:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012708:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001270b:	eb 91                	jmp    c001269e <VAS::scanForEviction()+0x10>
c001270d:	f7 c7 20 00 00 00    	test   edi,0x20
c0012713:	74 22                	je     c0012737 <VAS::scanForEviction()+0xa9>
c0012715:	83 e7 df             	and    edi,0xffffffdf
c0012718:	89 38                	mov    DWORD PTR [eax],edi
c001271a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001271d:	eb b0                	jmp    c00126cf <VAS::scanForEviction()+0x41>
c001271f:	83 ec 0c             	sub    esp,0xc
c0012722:	68 24 ad 02 c0       	push   0xc002ad24
c0012727:	e8 71 7c 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001272c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001272f:	83 c4 10             	add    esp,0x10
c0012732:	e9 67 ff ff ff       	jmp    c001269e <VAS::scanForEviction()+0x10>
c0012737:	83 ec 08             	sub    esp,0x8
c001273a:	53                   	push   ebx
c001273b:	68 14 af 02 c0       	push   0xc002af14
c0012740:	e8 ba 02 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012745:	58                   	pop    eax
c0012746:	5a                   	pop    edx
c0012747:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001274a:	56                   	push   esi
c001274b:	e8 ae fc ff ff       	call   c00123fe <VAS::evict(unsigned long)>
c0012750:	59                   	pop    ecx
c0012751:	5b                   	pop    ebx
c0012752:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012755:	68 28 af 02 c0       	push   0xc002af28
c001275a:	e8 a0 02 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001275f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012766:	89 f8                	mov    eax,edi
c0012768:	83 c4 1c             	add    esp,0x1c
c001276b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	5f                   	pop    edi
c0012773:	5d                   	pop    ebp
c0012774:	c3                   	ret    

c0012775 <mapVASFirstTime>:
c0012775:	55                   	push   ebp
c0012776:	57                   	push   edi
c0012777:	56                   	push   esi
c0012778:	53                   	push   ebx
c0012779:	83 ec 0c             	sub    esp,0xc
c001277c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012781:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012784:	4a                   	dec    edx
c0012785:	0f 84 fe 00 00 00    	je     c0012889 <mapVASFirstTime+0x114>
c001278b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001278e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012791:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012796:	c1 e5 15             	shl    ebp,0x15
c0012799:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001279e:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00127a4:	29 eb                	sub    ebx,ebp
c00127a6:	29 ef                	sub    edi,ebp
c00127a8:	83 ec 08             	sub    esp,0x8
c00127ab:	53                   	push   ebx
c00127ac:	68 54 af 02 c0       	push   0xc002af54
c00127b1:	e8 49 02 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00127b6:	e8 e8 d5 ff ff       	call   c000fda3 <Phys::allocatePage()>
c00127bb:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00127c2:	6a 01                	push   0x1
c00127c4:	53                   	push   ebx
c00127c5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00127cb:	50                   	push   eax
c00127cc:	56                   	push   esi
c00127cd:	e8 f8 f7 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d2:	83 c4 20             	add    esp,0x20
c00127d5:	39 fb                	cmp    ebx,edi
c00127d7:	75 cf                	jne    c00127a8 <mapVASFirstTime+0x33>
c00127d9:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00127de:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00127e3:	29 eb                	sub    ebx,ebp
c00127e5:	29 ef                	sub    edi,ebp
c00127e7:	83 ec 08             	sub    esp,0x8
c00127ea:	53                   	push   ebx
c00127eb:	68 70 af 02 c0       	push   0xc002af70
c00127f0:	e8 0a 02 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00127f5:	58                   	pop    eax
c00127f6:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00127fa:	5a                   	pop    edx
c00127fb:	19 c0                	sbb    eax,eax
c00127fd:	83 e0 04             	and    eax,0x4
c0012800:	05 03 04 00 00       	add    eax,0x403
c0012805:	50                   	push   eax
c0012806:	68 95 ae 02 c0       	push   0xc002ae95
c001280b:	e8 ef 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012810:	e8 8e d5 ff ff       	call   c000fda3 <Phys::allocatePage()>
c0012815:	59                   	pop    ecx
c0012816:	89 c5                	mov    ebp,eax
c0012818:	58                   	pop    eax
c0012819:	55                   	push   ebp
c001281a:	68 84 af 02 c0       	push   0xc002af84
c001281f:	e8 db 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012824:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012828:	19 d2                	sbb    edx,edx
c001282a:	83 e2 04             	and    edx,0x4
c001282d:	81 c2 03 04 00 00    	add    edx,0x403
c0012833:	89 14 24             	mov    DWORD PTR [esp],edx
c0012836:	6a 01                	push   0x1
c0012838:	53                   	push   ebx
c0012839:	55                   	push   ebp
c001283a:	56                   	push   esi
c001283b:	e8 8a f7 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012840:	83 c4 18             	add    esp,0x18
c0012843:	53                   	push   ebx
c0012844:	56                   	push   esi
c0012845:	e8 f4 f0 ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c001284a:	5a                   	pop    edx
c001284b:	59                   	pop    ecx
c001284c:	ff 30                	push   DWORD PTR [eax]
c001284e:	68 a0 af 02 c0       	push   0xc002afa0
c0012853:	e8 a7 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012858:	0f 20 d8             	mov    eax,cr3
c001285b:	83 c4 0c             	add    esp,0xc
c001285e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012864:	56                   	push   esi
c0012865:	50                   	push   eax
c0012866:	68 a3 ae 02 c0       	push   0xc002aea3
c001286b:	e8 8f 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	39 df                	cmp    edi,ebx
c0012875:	0f 85 6c ff ff ff    	jne    c00127e7 <mapVASFirstTime+0x72>
c001287b:	0f 20 d8             	mov    eax,cr3
c001287e:	0f 22 d8             	mov    cr3,eax
c0012881:	83 c4 0c             	add    esp,0xc
c0012884:	5b                   	pop    ebx
c0012885:	5e                   	pop    esi
c0012886:	5f                   	pop    edi
c0012887:	5d                   	pop    ebp
c0012888:	c3                   	ret    
c0012889:	83 ec 0c             	sub    esp,0xc
c001288c:	68 3b af 02 c0       	push   0xc002af3b
c0012891:	e8 69 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012896:	83 c4 10             	add    esp,0x10
c0012899:	83 c4 0c             	add    esp,0xc
c001289c:	5b                   	pop    ebx
c001289d:	5e                   	pop    esi
c001289e:	5f                   	pop    edi
c001289f:	5d                   	pop    ebp
c00128a0:	c3                   	ret    

c00128a1 <__cxa_atexit>:
c00128a1:	31 c0                	xor    eax,eax
c00128a3:	c3                   	ret    

c00128a4 <__cxa_finalize>:
c00128a4:	c3                   	ret    

c00128a5 <__stack_chk_fail>:
c00128a5:	55                   	push   ebp
c00128a6:	89 e5                	mov    ebp,esp
c00128a8:	83 ec 14             	sub    esp,0x14
c00128ab:	68 ab af 02 c0       	push   0xc002afab
c00128b0:	e8 4a 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00128b5:	58                   	pop    eax
c00128b6:	5a                   	pop    edx
c00128b7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00128ba:	68 fb af 02 c0       	push   0xc002affb
c00128bf:	e8 3b 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00128c4:	59                   	pop    ecx
c00128c5:	58                   	pop    eax
c00128c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128cc:	68 fb af 02 c0       	push   0xc002affb
c00128d1:	e8 29 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00128d6:	5a                   	pop    edx
c00128d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128da:	59                   	pop    ecx
c00128db:	8b 00                	mov    eax,DWORD PTR [eax]
c00128dd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128e0:	68 fb af 02 c0       	push   0xc002affb
c00128e5:	e8 15 01 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00128ea:	5a                   	pop    edx
c00128eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128ee:	59                   	pop    ecx
c00128ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128f6:	68 fb af 02 c0       	push   0xc002affb
c00128fb:	e8 ff 00 00 00       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0012900:	c7 04 24 03 b0 02 c0 	mov    DWORD PTR [esp],0xc002b003
c0012907:	e8 91 7a 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	c9                   	leave  
c0012910:	c3                   	ret    

c0012911 <__cxa_pure_virtual>:
c0012911:	83 ec 18             	sub    esp,0x18
c0012914:	68 1b b0 02 c0       	push   0xc002b01b
c0012919:	e8 7f 7a 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001291e:	83 c4 1c             	add    esp,0x1c
c0012921:	c3                   	ret    

c0012922 <operator new[](unsigned long)>:
c0012922:	e9 80 d0 ff ff       	jmp    c000f9a7 <malloc>

c0012927 <operator delete(void*, unsigned long)>:
c0012927:	e9 9b d0 ff ff       	jmp    c000f9c7 <rfree>

c001292c <operator delete[](void*)>:
c001292c:	e9 96 d0 ff ff       	jmp    c000f9c7 <rfree>

c0012931 <operator delete[](void*, unsigned long)>:
c0012931:	e9 91 d0 ff ff       	jmp    c000f9c7 <rfree>

c0012936 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012936:	55                   	push   ebp
c0012937:	b9 11 00 00 00       	mov    ecx,0x11
c001293c:	57                   	push   edi
c001293d:	56                   	push   esi
c001293e:	be 0e aa 02 c0       	mov    esi,0xc002aa0e
c0012943:	53                   	push   ebx
c0012944:	83 ec 20             	sub    esp,0x20
c0012947:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001294b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001294f:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012953:	fc                   	cld    
c0012954:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012956:	89 ee                	mov    esi,ebp
c0012958:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001295c:	eb 02                	jmp    c0012960 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001295e:	89 c6                	mov    esi,eax
c0012960:	31 d2                	xor    edx,edx
c0012962:	41                   	inc    ecx
c0012963:	89 f0                	mov    eax,esi
c0012965:	f7 f3                	div    ebx
c0012967:	39 de                	cmp    esi,ebx
c0012969:	73 f3                	jae    c001295e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001296b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001296e:	eb 02                	jmp    c0012972 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012970:	89 c5                	mov    ebp,eax
c0012972:	31 d2                	xor    edx,edx
c0012974:	49                   	dec    ecx
c0012975:	89 e8                	mov    eax,ebp
c0012977:	f7 f3                	div    ebx
c0012979:	39 dd                	cmp    ebp,ebx
c001297b:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001297f:	88 11                	mov    BYTE PTR [ecx],dl
c0012981:	73 ed                	jae    c0012970 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012983:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012987:	83 c4 20             	add    esp,0x20
c001298a:	5b                   	pop    ebx
c001298b:	5e                   	pop    esi
c001298c:	5f                   	pop    edi
c001298d:	5d                   	pop    ebp
c001298e:	c3                   	ret    

c001298f <Dbg::logc(char)>:
c001298f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012993:	ba fd 03 00 00       	mov    edx,0x3fd
c0012998:	ec                   	in     al,dx
c0012999:	a8 20                	test   al,0x20
c001299b:	74 fb                	je     c0012998 <Dbg::logc(char)+0x9>
c001299d:	ba f8 03 00 00       	mov    edx,0x3f8
c00129a2:	88 c8                	mov    al,cl
c00129a4:	ee                   	out    dx,al
c00129a5:	c3                   	ret    

c00129a6 <Dbg::logs(char*)>:
c00129a6:	53                   	push   ebx
c00129a7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00129ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129ae:	84 c0                	test   al,al
c00129b0:	74 0f                	je     c00129c1 <Dbg::logs(char*)+0x1b>
c00129b2:	50                   	push   eax
c00129b3:	43                   	inc    ebx
c00129b4:	e8 d6 ff ff ff       	call   c001298f <Dbg::logc(char)>
c00129b9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129bc:	5a                   	pop    edx
c00129bd:	84 c0                	test   al,al
c00129bf:	75 f1                	jne    c00129b2 <Dbg::logs(char*)+0xc>
c00129c1:	5b                   	pop    ebx
c00129c2:	c3                   	ret    

c00129c3 <Dbg::logWriteInt(unsigned int)>:
c00129c3:	83 ec 10             	sub    esp,0x10
c00129c6:	6a 0a                	push   0xa
c00129c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129cc:	50                   	push   eax
c00129cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d1:	e8 60 ff ff ff       	call   c0012936 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129d6:	50                   	push   eax
c00129d7:	e8 ca ff ff ff       	call   c00129a6 <Dbg::logs(char*)>
c00129dc:	83 c4 20             	add    esp,0x20
c00129df:	c3                   	ret    

c00129e0 <Dbg::logWriteIntBase(unsigned int, int)>:
c00129e0:	83 ec 10             	sub    esp,0x10
c00129e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129eb:	50                   	push   eax
c00129ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f0:	e8 41 ff ff ff       	call   c0012936 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129f5:	50                   	push   eax
c00129f6:	e8 ab ff ff ff       	call   c00129a6 <Dbg::logs(char*)>
c00129fb:	83 c4 20             	add    esp,0x20
c00129fe:	c3                   	ret    

c00129ff <Dbg::kprintf(char const*, ...)>:
c00129ff:	55                   	push   ebp
c0012a00:	57                   	push   edi
c0012a01:	56                   	push   esi
c0012a02:	53                   	push   ebx
c0012a03:	83 ec 0c             	sub    esp,0xc
c0012a06:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a0a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012a0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a12:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a15:	84 c0                	test   al,al
c0012a17:	74 4a                	je     c0012a63 <Dbg::kprintf(char const*, ...)+0x64>
c0012a19:	31 db                	xor    ebx,ebx
c0012a1b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012a1e:	3c 25                	cmp    al,0x25
c0012a20:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012a23:	0f 85 e4 00 00 00    	jne    c0012b0d <Dbg::kprintf(char const*, ...)+0x10e>
c0012a29:	83 c3 02             	add    ebx,0x2
c0012a2c:	8a 07                	mov    al,BYTE PTR [edi]
c0012a2e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012a31:	83 e8 25             	sub    eax,0x25
c0012a34:	3c 53                	cmp    al,0x53
c0012a36:	0f 87 ba 00 00 00    	ja     c0012af6 <Dbg::kprintf(char const*, ...)+0xf7>
c0012a3c:	0f b6 c0             	movzx  eax,al
c0012a3f:	ff 24 85 30 b0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4fd0]
c0012a46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a4a:	89 c8                	mov    eax,ecx
c0012a4c:	83 c1 04             	add    ecx,0x4
c0012a4f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a53:	ff 30                	push   DWORD PTR [eax]
c0012a55:	e8 69 ff ff ff       	call   c00129c3 <Dbg::logWriteInt(unsigned int)>
c0012a5a:	5f                   	pop    edi
c0012a5b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012a5f:	84 c0                	test   al,al
c0012a61:	75 b8                	jne    c0012a1b <Dbg::kprintf(char const*, ...)+0x1c>
c0012a63:	83 c4 0c             	add    esp,0xc
c0012a66:	5b                   	pop    ebx
c0012a67:	5e                   	pop    esi
c0012a68:	5f                   	pop    edi
c0012a69:	5d                   	pop    ebp
c0012a6a:	c3                   	ret    
c0012a6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a6f:	89 c8                	mov    eax,ecx
c0012a71:	83 c1 04             	add    ecx,0x4
c0012a74:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a78:	ff 30                	push   DWORD PTR [eax]
c0012a7a:	e8 27 ff ff ff       	call   c00129a6 <Dbg::logs(char*)>
c0012a7f:	58                   	pop    eax
c0012a80:	eb d9                	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012a82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a86:	89 d0                	mov    eax,edx
c0012a88:	83 c2 04             	add    edx,0x4
c0012a8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a8f:	ff 30                	push   DWORD PTR [eax]
c0012a91:	e8 2d ff ff ff       	call   c00129c3 <Dbg::logWriteInt(unsigned int)>
c0012a96:	58                   	pop    eax
c0012a97:	eb c2                	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012a99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a9d:	89 d0                	mov    eax,edx
c0012a9f:	83 c2 04             	add    edx,0x4
c0012aa2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012aa5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012aa9:	50                   	push   eax
c0012aaa:	e8 e0 fe ff ff       	call   c001298f <Dbg::logc(char)>
c0012aaf:	58                   	pop    eax
c0012ab0:	eb a9                	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012ab2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ab6:	89 c8                	mov    eax,ecx
c0012ab8:	83 c1 04             	add    ecx,0x4
c0012abb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012abf:	6a 10                	push   0x10
c0012ac1:	ff 30                	push   DWORD PTR [eax]
c0012ac3:	e8 18 ff ff ff       	call   c00129e0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ac8:	59                   	pop    ecx
c0012ac9:	5f                   	pop    edi
c0012aca:	eb 8f                	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012acc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ad0:	89 d0                	mov    eax,edx
c0012ad2:	83 c2 08             	add    edx,0x8
c0012ad5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ad9:	6a 10                	push   0x10
c0012adb:	ff 30                	push   DWORD PTR [eax]
c0012add:	e8 fe fe ff ff       	call   c00129e0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ae2:	58                   	pop    eax
c0012ae3:	5a                   	pop    edx
c0012ae4:	e9 72 ff ff ff       	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012ae9:	6a 25                	push   0x25
c0012aeb:	e8 9f fe ff ff       	call   c001298f <Dbg::logc(char)>
c0012af0:	58                   	pop    eax
c0012af1:	e9 65 ff ff ff       	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012af6:	6a 25                	push   0x25
c0012af8:	e8 92 fe ff ff       	call   c001298f <Dbg::logc(char)>
c0012afd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012b00:	50                   	push   eax
c0012b01:	e8 89 fe ff ff       	call   c001298f <Dbg::logc(char)>
c0012b06:	5a                   	pop    edx
c0012b07:	59                   	pop    ecx
c0012b08:	e9 4e ff ff ff       	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012b0d:	50                   	push   eax
c0012b0e:	89 eb                	mov    ebx,ebp
c0012b10:	e8 7a fe ff ff       	call   c001298f <Dbg::logc(char)>
c0012b15:	89 fd                	mov    ebp,edi
c0012b17:	58                   	pop    eax
c0012b18:	e9 3e ff ff ff       	jmp    c0012a5b <Dbg::kprintf(char const*, ...)+0x5c>
c0012b1d:	90                   	nop

c0012b1e <File::read(unsigned long long, void*, int*)>:
c0012b1e:	53                   	push   ebx
c0012b1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b2e:	3c 19                	cmp    al,0x19
c0012b30:	77 35                	ja     c0012b67 <File::read(unsigned long long, void*, int*)+0x49>
c0012b32:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0012b39:	85 c0                	test   eax,eax
c0012b3b:	74 2a                	je     c0012b67 <File::read(unsigned long long, void*, int*)+0x49>
c0012b3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b43:	85 c0                	test   eax,eax
c0012b45:	74 20                	je     c0012b67 <File::read(unsigned long long, void*, int*)+0x49>
c0012b47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b4b:	74 21                	je     c0012b6e <File::read(unsigned long long, void*, int*)+0x50>
c0012b4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b53:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b61:	5b                   	pop    ebx
c0012b62:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012b65:	ff e0                	jmp    eax
c0012b67:	b8 0b 00 00 00       	mov    eax,0xb
c0012b6c:	eb 05                	jmp    c0012b73 <File::read(unsigned long long, void*, int*)+0x55>
c0012b6e:	b8 05 00 00 00       	mov    eax,0x5
c0012b73:	5b                   	pop    ebx
c0012b74:	c3                   	ret    
c0012b75:	90                   	nop

c0012b76 <File::write(unsigned long long, void*, int*)>:
c0012b76:	53                   	push   ebx
c0012b77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b86:	3c 19                	cmp    al,0x19
c0012b88:	77 35                	ja     c0012bbf <File::write(unsigned long long, void*, int*)+0x49>
c0012b8a:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0012b91:	85 c0                	test   eax,eax
c0012b93:	74 2a                	je     c0012bbf <File::write(unsigned long long, void*, int*)+0x49>
c0012b95:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b9b:	85 c0                	test   eax,eax
c0012b9d:	74 20                	je     c0012bbf <File::write(unsigned long long, void*, int*)+0x49>
c0012b9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ba3:	74 21                	je     c0012bc6 <File::write(unsigned long long, void*, int*)+0x50>
c0012ba5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ba7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012bab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bb9:	5b                   	pop    ebx
c0012bba:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012bbd:	ff e0                	jmp    eax
c0012bbf:	b8 0b 00 00 00       	mov    eax,0xb
c0012bc4:	eb 05                	jmp    c0012bcb <File::write(unsigned long long, void*, int*)+0x55>
c0012bc6:	b8 05 00 00 00       	mov    eax,0x5
c0012bcb:	5b                   	pop    ebx
c0012bcc:	c3                   	ret    
c0012bcd:	90                   	nop

c0012bce <Directory::read(unsigned long long, void*, int*)>:
c0012bce:	53                   	push   ebx
c0012bcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bd3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012bd7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012bde:	3c 19                	cmp    al,0x19
c0012be0:	77 35                	ja     c0012c17 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012be2:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0012be9:	85 c0                	test   eax,eax
c0012beb:	74 2a                	je     c0012c17 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012bf3:	85 c0                	test   eax,eax
c0012bf5:	74 20                	je     c0012c17 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bf7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bfb:	74 21                	je     c0012c1e <Directory::read(unsigned long long, void*, int*)+0x50>
c0012bfd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c03:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c11:	5b                   	pop    ebx
c0012c12:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012c15:	ff e0                	jmp    eax
c0012c17:	b8 0b 00 00 00       	mov    eax,0xb
c0012c1c:	eb 05                	jmp    c0012c23 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012c1e:	b8 05 00 00 00       	mov    eax,0x5
c0012c23:	5b                   	pop    ebx
c0012c24:	c3                   	ret    
c0012c25:	90                   	nop

c0012c26 <Directory::write(unsigned long long, void*, int*)>:
c0012c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c2a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012c31:	b8 0b 00 00 00       	mov    eax,0xb
c0012c36:	80 fa 19             	cmp    dl,0x19
c0012c39:	77 18                	ja     c0012c53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c3b:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0012c42:	85 d2                	test   edx,edx
c0012c44:	74 0d                	je     c0012c53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c46:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012c4d:	19 c0                	sbb    eax,eax
c0012c4f:	83 e0 0a             	and    eax,0xa
c0012c52:	40                   	inc    eax
c0012c53:	c3                   	ret    

c0012c54 <File::isAtty()>:
c0012c54:	31 c0                	xor    eax,eax
c0012c56:	c3                   	ret    
c0012c57:	90                   	nop

c0012c58 <Directory::isAtty()>:
c0012c58:	31 c0                	xor    eax,eax
c0012c5a:	c3                   	ret    
c0012c5b:	90                   	nop

c0012c5c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012c5c:	b8 0a 00 00 00       	mov    eax,0xa
c0012c61:	c3                   	ret    

c0012c62 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012c62:	b8 0a 00 00 00       	mov    eax,0xa
c0012c67:	c3                   	ret    

c0012c68 <Filesystem::allocateSwapfile(char const*, int)>:
c0012c68:	31 c0                	xor    eax,eax
c0012c6a:	31 d2                	xor    edx,edx
c0012c6c:	c3                   	ret    
c0012c6d:	90                   	nop

c0012c6e <File::~File()>:
c0012c6e:	83 ec 0c             	sub    esp,0xc
c0012c71:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0012c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7a:	89 10                	mov    DWORD PTR [eax],edx
c0012c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	50                   	push   eax
c0012c84:	e8 43 e7 ff ff       	call   c00113cc <UnixFile::~UnixFile()>
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	90                   	nop
c0012c8d:	83 c4 0c             	add    esp,0xc
c0012c90:	c3                   	ret    
c0012c91:	90                   	nop

c0012c92 <File::~File()>:
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	83 ec 0c             	sub    esp,0xc
c0012c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c9c:	e8 cd ff ff ff       	call   c0012c6e <File::~File()>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	83 ec 08             	sub    esp,0x8
c0012ca7:	68 14 01 00 00       	push   0x114
c0012cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb0:	e8 72 fc ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	83 c4 0c             	add    esp,0xc
c0012cbb:	c3                   	ret    

c0012cbc <Directory::~Directory()>:
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c0012cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc8:	89 10                	mov    DWORD PTR [eax],edx
c0012cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cce:	83 ec 0c             	sub    esp,0xc
c0012cd1:	50                   	push   eax
c0012cd2:	e8 f5 e6 ff ff       	call   c00113cc <UnixFile::~UnixFile()>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	90                   	nop
c0012cdb:	83 c4 0c             	add    esp,0xc
c0012cde:	c3                   	ret    
c0012cdf:	90                   	nop

c0012ce0 <Directory::~Directory()>:
c0012ce0:	83 ec 0c             	sub    esp,0xc
c0012ce3:	83 ec 0c             	sub    esp,0xc
c0012ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cea:	e8 cd ff ff ff       	call   c0012cbc <Directory::~Directory()>
c0012cef:	83 c4 10             	add    esp,0x10
c0012cf2:	83 ec 08             	sub    esp,0x8
c0012cf5:	68 14 01 00 00       	push   0x114
c0012cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfe:	e8 24 fc ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	83 c4 0c             	add    esp,0xc
c0012d09:	c3                   	ret    

c0012d0a <Filesystem::Filesystem()>:
c0012d0a:	ba 88 b1 02 c0       	mov    edx,0xc002b188
c0012d0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d13:	89 10                	mov    DWORD PTR [eax],edx
c0012d15:	8b 15 d4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7d4
c0012d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d26:	a3 d4 e7 02 c0       	mov    ds:0xc002e7d4,eax
c0012d2b:	90                   	nop
c0012d2c:	c3                   	ret    
c0012d2d:	90                   	nop

c0012d2e <Filesystem::~Filesystem()>:
c0012d2e:	ba 88 b1 02 c0       	mov    edx,0xc002b188
c0012d33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d37:	89 10                	mov    DWORD PTR [eax],edx
c0012d39:	90                   	nop
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <Filesystem::~Filesystem()>:
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d43:	e8 e6 ff ff ff       	call   c0012d2e <Filesystem::~Filesystem()>
c0012d48:	83 c4 04             	add    esp,0x4
c0012d4b:	83 ec 08             	sub    esp,0x8
c0012d4e:	6a 08                	push   0x8
c0012d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d54:	e8 ce fb ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	83 c4 0c             	add    esp,0xc
c0012d5f:	c3                   	ret    

c0012d60 <Fs::getcwd(Process*, char*, int)>:
c0012d60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d64:	31 c0                	xor    eax,eax
c0012d66:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d69:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012d6d:	7d 15                	jge    c0012d84 <Fs::getcwd(Process*, char*, int)+0x24>
c0012d6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d73:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012d7a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012d7d:	84 c9                	test   cl,cl
c0012d7f:	74 06                	je     c0012d87 <Fs::getcwd(Process*, char*, int)+0x27>
c0012d81:	40                   	inc    eax
c0012d82:	eb e2                	jmp    c0012d66 <Fs::getcwd(Process*, char*, int)+0x6>
c0012d84:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012d87:	31 c0                	xor    eax,eax
c0012d89:	c3                   	ret    

c0012d8a <Fs::initVFS()>:
c0012d8a:	83 ec 18             	sub    esp,0x18
c0012d8d:	6a 08                	push   0x8
c0012d8f:	e8 13 cc ff ff       	call   c000f9a7 <malloc>
c0012d94:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d97:	e8 dc e1 00 00       	call   c0020f78 <FAT::FAT()>
c0012d9c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012da3:	e8 ff cb ff ff       	call   c000f9a7 <malloc>
c0012da8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012dab:	e8 d4 f3 00 00       	call   c0022184 <ISO9660::ISO9660()>
c0012db0:	83 c4 1c             	add    esp,0x1c
c0012db3:	c3                   	ret    

c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012db4:	55                   	push   ebp
c0012db5:	57                   	push   edi
c0012db6:	56                   	push   esi
c0012db7:	53                   	push   ebx
c0012db8:	81 ec 10 04 00 00    	sub    esp,0x410
c0012dbe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012dc5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012dcc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012dd3:	68 00 04 00 00       	push   0x400
c0012dd8:	6a 00                	push   0x0
c0012dda:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012dde:	56                   	push   esi
c0012ddf:	e8 6c d9 fe ff       	call   c0000750 <memset>
c0012de4:	83 c4 10             	add    esp,0x10
c0012de7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012deb:	75 0b                	jne    c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ded:	50                   	push   eax
c0012dee:	50                   	push   eax
c0012def:	57                   	push   edi
c0012df0:	56                   	push   esi
c0012df1:	e8 16 da fe ff       	call   c000080c <strcpy>
c0012df6:	eb 41                	jmp    c0012e39 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012df8:	8a 07                	mov    al,BYTE PTR [edi]
c0012dfa:	3c 5c                	cmp    al,0x5c
c0012dfc:	74 04                	je     c0012e02 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012dfe:	3c 2f                	cmp    al,0x2f
c0012e00:	75 18                	jne    c0012e1a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012e02:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012e05:	3c 60                	cmp    al,0x60
c0012e07:	7e 03                	jle    c0012e0c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012e09:	83 e8 20             	sub    eax,0x20
c0012e0c:	88 04 24             	mov    BYTE PTR [esp],al
c0012e0f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e16:	50                   	push   eax
c0012e17:	50                   	push   eax
c0012e18:	eb 18                	jmp    c0012e32 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012e1a:	50                   	push   eax
c0012e1b:	50                   	push   eax
c0012e1c:	55                   	push   ebp
c0012e1d:	56                   	push   esi
c0012e1e:	e8 e9 d9 fe ff       	call   c000080c <strcpy>
c0012e23:	5a                   	pop    edx
c0012e24:	59                   	pop    ecx
c0012e25:	68 0a c8 02 c0       	push   0xc002c80a
c0012e2a:	56                   	push   esi
c0012e2b:	e8 1c db fe ff       	call   c000094c <strcat>
c0012e30:	5d                   	pop    ebp
c0012e31:	58                   	pop    eax
c0012e32:	57                   	push   edi
c0012e33:	56                   	push   esi
c0012e34:	e8 13 db fe ff       	call   c000094c <strcat>
c0012e39:	83 c4 10             	add    esp,0x10
c0012e3c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012e3f:	3c 60                	cmp    al,0x60
c0012e41:	7e 03                	jle    c0012e46 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012e43:	83 e8 20             	sub    eax,0x20
c0012e46:	88 04 24             	mov    BYTE PTR [esp],al
c0012e49:	88 03                	mov    BYTE PTR [ebx],al
c0012e4b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e52:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012e58:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012e5c:	bf 03 00 00 00       	mov    edi,0x3
c0012e61:	b8 03 00 00 00       	mov    eax,0x3
c0012e66:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012e69:	84 d2                	test   dl,dl
c0012e6b:	0f 84 91 00 00 00    	je     c0012f02 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012e71:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012e74:	80 fa 5c             	cmp    dl,0x5c
c0012e77:	74 05                	je     c0012e7e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012e79:	80 fa 2f             	cmp    dl,0x2f
c0012e7c:	75 12                	jne    c0012e90 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e7e:	89 c5                	mov    ebp,eax
c0012e80:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e85:	74 09                	je     c0012e90 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e87:	40                   	inc    eax
c0012e88:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012e8c:	89 cf                	mov    edi,ecx
c0012e8e:	eb d6                	jmp    c0012e66 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012e90:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012e95:	75 5b                	jne    c0012ef2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e97:	80 fa 2e             	cmp    dl,0x2e
c0012e9a:	75 56                	jne    c0012ef2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e9c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012ea0:	74 19                	je     c0012ebb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012ea2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ea7:	74 53                	je     c0012efc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ea9:	89 f9                	mov    ecx,edi
c0012eab:	41                   	inc    ecx
c0012eac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012eaf:	80 fa 2f             	cmp    dl,0x2f
c0012eb2:	74 f7                	je     c0012eab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012eb4:	80 fa 5c             	cmp    dl,0x5c
c0012eb7:	74 f2                	je     c0012eab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012eb9:	eb d1                	jmp    c0012e8c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ebb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ec0:	74 3a                	je     c0012efc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ec2:	83 f8 03             	cmp    eax,0x3
c0012ec5:	74 c5                	je     c0012e8c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ec7:	41                   	inc    ecx
c0012ec8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ecb:	80 fa 2f             	cmp    dl,0x2f
c0012ece:	74 f7                	je     c0012ec7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ed0:	80 fa 5c             	cmp    dl,0x5c
c0012ed3:	74 f2                	je     c0012ec7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ed5:	48                   	dec    eax
c0012ed6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012eda:	75 06                	jne    c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012edc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ee0:	eb f3                	jmp    c0012ed5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012ee2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ee6:	74 07                	je     c0012eef <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ee8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012eec:	48                   	dec    eax
c0012eed:	eb f3                	jmp    c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012eef:	40                   	inc    eax
c0012ef0:	eb 9a                	jmp    c0012e8c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ef2:	80 fa 2f             	cmp    dl,0x2f
c0012ef5:	74 95                	je     c0012e8c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ef7:	80 fa 5c             	cmp    dl,0x5c
c0012efa:	74 90                	je     c0012e8c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012efc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012eff:	40                   	inc    eax
c0012f00:	eb 8a                	jmp    c0012e8c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f06:	83 ec 0c             	sub    esp,0xc
c0012f09:	53                   	push   ebx
c0012f0a:	e8 5d d8 fe ff       	call   c000076c <strlen>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012f17:	75 26                	jne    c0012f3f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012f19:	83 ec 0c             	sub    esp,0xc
c0012f1c:	53                   	push   ebx
c0012f1d:	e8 4a d8 fe ff       	call   c000076c <strlen>
c0012f22:	83 c4 10             	add    esp,0x10
c0012f25:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012f2a:	74 26                	je     c0012f52 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012f2c:	83 ec 0c             	sub    esp,0xc
c0012f2f:	53                   	push   ebx
c0012f30:	e8 37 d8 fe ff       	call   c000076c <strlen>
c0012f35:	83 c4 10             	add    esp,0x10
c0012f38:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f3d:	eb c7                	jmp    c0012f06 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012f3f:	83 ec 0c             	sub    esp,0xc
c0012f42:	53                   	push   ebx
c0012f43:	e8 24 d8 fe ff       	call   c000076c <strlen>
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f50:	74 c7                	je     c0012f19 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012f52:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012f58:	5b                   	pop    ebx
c0012f59:	5e                   	pop    esi
c0012f5a:	5f                   	pop    edi
c0012f5b:	5d                   	pop    ebp
c0012f5c:	c3                   	ret    
c0012f5d:	90                   	nop

c0012f5e <File::File(char const*, Process*)>:
c0012f5e:	83 ec 0c             	sub    esp,0xc
c0012f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f65:	83 ec 08             	sub    esp,0x8
c0012f68:	6a 00                	push   0x0
c0012f6a:	50                   	push   eax
c0012f6b:	e8 7a e2 ff ff       	call   c00111ea <UnixFile::UnixFile(int)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0012f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7c:	89 10                	mov    DWORD PTR [eax],edx
c0012f7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f82:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8c:	83 c0 0d             	add    eax,0xd
c0012f8f:	83 ec 04             	sub    esp,0x4
c0012f92:	52                   	push   edx
c0012f93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f97:	50                   	push   eax
c0012f98:	e8 17 fe ff ff       	call   c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012fa7:	8d 50 bf             	lea    edx,[eax-0x41]
c0012faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012fbc:	90                   	nop
c0012fbd:	83 c4 0c             	add    esp,0xc
c0012fc0:	c3                   	ret    
c0012fc1:	90                   	nop

c0012fc2 <File::open(FileOpenMode)>:
c0012fc2:	53                   	push   ebx
c0012fc3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc8:	83 ec 08             	sub    esp,0x8
c0012fcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fcf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012fd6:	80 fa 19             	cmp    dl,0x19
c0012fd9:	77 40                	ja     c001301b <File::open(FileOpenMode)+0x59>
c0012fdb:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0012fe2:	85 d2                	test   edx,edx
c0012fe4:	74 35                	je     c001301b <File::open(FileOpenMode)+0x59>
c0012fe6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fec:	85 d2                	test   edx,edx
c0012fee:	74 2b                	je     c001301b <File::open(FileOpenMode)+0x59>
c0012ff0:	b8 06 00 00 00       	mov    eax,0x6
c0012ff5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ff9:	75 20                	jne    c001301b <File::open(FileOpenMode)+0x59>
c0012ffb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ffd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013003:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013007:	51                   	push   ecx
c0013008:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001300b:	51                   	push   ecx
c001300c:	52                   	push   edx
c001300d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013010:	83 c4 10             	add    esp,0x10
c0013013:	85 c0                	test   eax,eax
c0013015:	75 04                	jne    c001301b <File::open(FileOpenMode)+0x59>
c0013017:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001301b:	83 c4 08             	add    esp,0x8
c001301e:	5b                   	pop    ebx
c001301f:	c3                   	ret    

c0013020 <File::close()>:
c0013020:	53                   	push   ebx
c0013021:	b8 0b 00 00 00       	mov    eax,0xb
c0013026:	83 ec 08             	sub    esp,0x8
c0013029:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001302d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013034:	80 fa 19             	cmp    dl,0x19
c0013037:	77 41                	ja     c001307a <File::close()+0x5a>
c0013039:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c0013040:	85 db                	test   ebx,ebx
c0013042:	74 36                	je     c001307a <File::close()+0x5a>
c0013044:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001304b:	74 2d                	je     c001307a <File::close()+0x5a>
c001304d:	b8 05 00 00 00       	mov    eax,0x5
c0013052:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013056:	74 22                	je     c001307a <File::close()+0x5a>
c0013058:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001305c:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c0013063:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013069:	53                   	push   ebx
c001306a:	53                   	push   ebx
c001306b:	8b 10                	mov    edx,DWORD PTR [eax]
c001306d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013073:	50                   	push   eax
c0013074:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	83 c4 08             	add    esp,0x8
c001307d:	5b                   	pop    ebx
c001307e:	c3                   	ret    
c001307f:	90                   	nop

c0013080 <File::seek(unsigned long long)>:
c0013080:	56                   	push   esi
c0013081:	53                   	push   ebx
c0013082:	b8 0b 00 00 00       	mov    eax,0xb
c0013087:	51                   	push   ecx
c0013088:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001308c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013090:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013097:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001309b:	80 fa 19             	cmp    dl,0x19
c001309e:	77 31                	ja     c00130d1 <File::seek(unsigned long long)+0x51>
c00130a0:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00130a7:	85 d2                	test   edx,edx
c00130a9:	74 26                	je     c00130d1 <File::seek(unsigned long long)+0x51>
c00130ab:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130b1:	85 d2                	test   edx,edx
c00130b3:	74 1c                	je     c00130d1 <File::seek(unsigned long long)+0x51>
c00130b5:	b8 05 00 00 00       	mov    eax,0x5
c00130ba:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00130be:	74 11                	je     c00130d1 <File::seek(unsigned long long)+0x51>
c00130c0:	8b 02                	mov    eax,DWORD PTR [edx]
c00130c2:	53                   	push   ebx
c00130c3:	51                   	push   ecx
c00130c4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00130ca:	52                   	push   edx
c00130cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00130ce:	83 c4 10             	add    esp,0x10
c00130d1:	5a                   	pop    edx
c00130d2:	5b                   	pop    ebx
c00130d3:	5e                   	pop    esi
c00130d4:	c3                   	ret    
c00130d5:	90                   	nop

c00130d6 <File::tell(unsigned long long*)>:
c00130d6:	83 ec 0c             	sub    esp,0xc
c00130d9:	b8 0b 00 00 00       	mov    eax,0xb
c00130de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130e2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130e9:	80 fa 19             	cmp    dl,0x19
c00130ec:	77 34                	ja     c0013122 <File::tell(unsigned long long*)+0x4c>
c00130ee:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00130f5:	85 d2                	test   edx,edx
c00130f7:	74 29                	je     c0013122 <File::tell(unsigned long long*)+0x4c>
c00130f9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130ff:	85 d2                	test   edx,edx
c0013101:	74 1f                	je     c0013122 <File::tell(unsigned long long*)+0x4c>
c0013103:	b8 05 00 00 00       	mov    eax,0x5
c0013108:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001310c:	74 14                	je     c0013122 <File::tell(unsigned long long*)+0x4c>
c001310e:	50                   	push   eax
c001310f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013111:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013115:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001311b:	52                   	push   edx
c001311c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	83 c4 0c             	add    esp,0xc
c0013125:	c3                   	ret    

c0013126 <File::rewind()>:
c0013126:	83 ec 10             	sub    esp,0x10
c0013129:	6a 00                	push   0x0
c001312b:	6a 00                	push   0x0
c001312d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013131:	e8 4a ff ff ff       	call   c0013080 <File::seek(unsigned long long)>
c0013136:	83 c4 1c             	add    esp,0x1c
c0013139:	c3                   	ret    

c001313a <File::unlink()>:
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	b8 0b 00 00 00       	mov    eax,0xb
c0013142:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013146:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001314d:	80 f9 19             	cmp    cl,0x19
c0013150:	77 2f                	ja     c0013181 <File::unlink()+0x47>
c0013152:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013159:	85 c9                	test   ecx,ecx
c001315b:	74 24                	je     c0013181 <File::unlink()+0x47>
c001315d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013163:	85 c9                	test   ecx,ecx
c0013165:	74 1a                	je     c0013181 <File::unlink()+0x47>
c0013167:	b8 06 00 00 00       	mov    eax,0x6
c001316c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013170:	75 0f                	jne    c0013181 <File::unlink()+0x47>
c0013172:	83 c2 0d             	add    edx,0xd
c0013175:	50                   	push   eax
c0013176:	50                   	push   eax
c0013177:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013179:	52                   	push   edx
c001317a:	51                   	push   ecx
c001317b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	83 c4 0c             	add    esp,0xc
c0013184:	c3                   	ret    
c0013185:	90                   	nop

c0013186 <File::rename(char const*)>:
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	b8 0b 00 00 00       	mov    eax,0xb
c001318e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013192:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013199:	80 f9 19             	cmp    cl,0x19
c001319c:	77 32                	ja     c00131d0 <File::rename(char const*)+0x4a>
c001319e:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00131a5:	85 c9                	test   ecx,ecx
c00131a7:	74 27                	je     c00131d0 <File::rename(char const*)+0x4a>
c00131a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131af:	85 c9                	test   ecx,ecx
c00131b1:	74 1d                	je     c00131d0 <File::rename(char const*)+0x4a>
c00131b3:	b8 06 00 00 00       	mov    eax,0x6
c00131b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131bc:	75 12                	jne    c00131d0 <File::rename(char const*)+0x4a>
c00131be:	83 c2 0d             	add    edx,0xd
c00131c1:	50                   	push   eax
c00131c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131c8:	52                   	push   edx
c00131c9:	51                   	push   ecx
c00131ca:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	83 c4 0c             	add    esp,0xc
c00131d3:	c3                   	ret    

c00131d4 <File::chfatattr(unsigned char, unsigned char)>:
c00131d4:	57                   	push   edi
c00131d5:	b8 0b 00 00 00       	mov    eax,0xb
c00131da:	56                   	push   esi
c00131db:	53                   	push   ebx
c00131dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00131e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00131ef:	80 f9 19             	cmp    cl,0x19
c00131f2:	77 37                	ja     c001322b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131f4:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00131fb:	85 c9                	test   ecx,ecx
c00131fd:	74 2c                	je     c001322b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013205:	85 c9                	test   ecx,ecx
c0013207:	74 22                	je     c001322b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013209:	b8 06 00 00 00       	mov    eax,0x6
c001320e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013212:	75 17                	jne    c001322b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013214:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013216:	89 f0                	mov    eax,esi
c0013218:	83 c2 0d             	add    edx,0xd
c001321b:	0f b6 f0             	movzx  esi,al
c001321e:	0f b6 db             	movzx  ebx,bl
c0013221:	56                   	push   esi
c0013222:	53                   	push   ebx
c0013223:	52                   	push   edx
c0013224:	51                   	push   ecx
c0013225:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	5b                   	pop    ebx
c001322c:	5e                   	pop    esi
c001322d:	5f                   	pop    edi
c001322e:	c3                   	ret    
c001322f:	90                   	nop

c0013230 <File::exists()>:
c0013230:	83 ec 0c             	sub    esp,0xc
c0013233:	31 c0                	xor    eax,eax
c0013235:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013239:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013240:	80 f9 19             	cmp    cl,0x19
c0013243:	77 24                	ja     c0013269 <File::exists()+0x39>
c0013245:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001324c:	85 c9                	test   ecx,ecx
c001324e:	74 19                	je     c0013269 <File::exists()+0x39>
c0013250:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013256:	85 c9                	test   ecx,ecx
c0013258:	74 0f                	je     c0013269 <File::exists()+0x39>
c001325a:	83 c2 0d             	add    edx,0xd
c001325d:	50                   	push   eax
c001325e:	50                   	push   eax
c001325f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013261:	52                   	push   edx
c0013262:	51                   	push   ecx
c0013263:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	83 c4 0c             	add    esp,0xc
c001326c:	c3                   	ret    
c001326d:	90                   	nop

c001326e <File::stat(unsigned long long*, bool*)>:
c001326e:	56                   	push   esi
c001326f:	53                   	push   ebx
c0013270:	50                   	push   eax
c0013271:	b8 0b 00 00 00       	mov    eax,0xb
c0013276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001327a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001327e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013285:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013289:	80 f9 19             	cmp    cl,0x19
c001328c:	77 3d                	ja     c00132cb <File::stat(unsigned long long*, bool*)+0x5d>
c001328e:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013295:	85 c9                	test   ecx,ecx
c0013297:	74 32                	je     c00132cb <File::stat(unsigned long long*, bool*)+0x5d>
c0013299:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001329f:	85 c9                	test   ecx,ecx
c00132a1:	74 28                	je     c00132cb <File::stat(unsigned long long*, bool*)+0x5d>
c00132a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132a5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132a9:	74 13                	je     c00132be <File::stat(unsigned long long*, bool*)+0x50>
c00132ab:	83 ec 04             	sub    esp,0x4
c00132ae:	56                   	push   esi
c00132af:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00132b5:	51                   	push   ecx
c00132b6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00132b9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00132bc:	eb 0a                	jmp    c00132c8 <File::stat(unsigned long long*, bool*)+0x5a>
c00132be:	53                   	push   ebx
c00132bf:	83 c2 0d             	add    edx,0xd
c00132c2:	56                   	push   esi
c00132c3:	52                   	push   edx
c00132c4:	51                   	push   ecx
c00132c5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00132c8:	83 c4 10             	add    esp,0x10
c00132cb:	5a                   	pop    edx
c00132cc:	5b                   	pop    ebx
c00132cd:	5e                   	pop    esi
c00132ce:	c3                   	ret    

c00132cf <Fs::setcwd(Process*, char*)>:
c00132cf:	55                   	push   ebp
c00132d0:	57                   	push   edi
c00132d1:	56                   	push   esi
c00132d2:	53                   	push   ebx
c00132d3:	81 ec 20 02 00 00    	sub    esp,0x220
c00132d9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00132e0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00132e6:	57                   	push   edi
c00132e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00132ee:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00132f2:	56                   	push   esi
c00132f3:	e8 bc fa ff ff       	call   c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00132f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00132fb:	e8 6c d4 fe ff       	call   c000076c <strlen>
c0013300:	83 c4 10             	add    esp,0x10
c0013303:	83 f8 02             	cmp    eax,0x2
c0013306:	77 17                	ja     c001331f <Fs::setcwd(Process*, char*)+0x50>
c0013308:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001330d:	83 e8 41             	sub    eax,0x41
c0013310:	83 f8 19             	cmp    eax,0x19
c0013313:	76 24                	jbe    c0013339 <Fs::setcwd(Process*, char*)+0x6a>
c0013315:	b8 03 00 00 00       	mov    eax,0x3
c001331a:	e9 e0 00 00 00       	jmp    c00133ff <Fs::setcwd(Process*, char*)+0x130>
c001331f:	83 ec 0c             	sub    esp,0xc
c0013322:	56                   	push   esi
c0013323:	e8 44 d4 fe ff       	call   c000076c <strlen>
c0013328:	83 c4 10             	add    esp,0x10
c001332b:	83 f8 03             	cmp    eax,0x3
c001332e:	75 34                	jne    c0013364 <Fs::setcwd(Process*, char*)+0x95>
c0013330:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013335:	75 2d                	jne    c0013364 <Fs::setcwd(Process*, char*)+0x95>
c0013337:	eb cf                	jmp    c0013308 <Fs::setcwd(Process*, char*)+0x39>
c0013339:	8b 14 85 60 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13a0]
c0013340:	b8 05 00 00 00       	mov    eax,0x5
c0013345:	85 d2                	test   edx,edx
c0013347:	0f 84 b2 00 00 00    	je     c00133ff <Fs::setcwd(Process*, char*)+0x130>
c001334d:	b8 06 00 00 00       	mov    eax,0x6
c0013352:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013359:	0f 85 92 00 00 00    	jne    c00133f1 <Fs::setcwd(Process*, char*)+0x122>
c001335f:	e9 9b 00 00 00       	jmp    c00133ff <Fs::setcwd(Process*, char*)+0x130>
c0013364:	83 ec 0c             	sub    esp,0xc
c0013367:	68 14 01 00 00       	push   0x114
c001336c:	e8 36 c6 ff ff       	call   c000f9a7 <malloc>
c0013371:	83 c4 0c             	add    esp,0xc
c0013374:	89 c3                	mov    ebx,eax
c0013376:	55                   	push   ebp
c0013377:	56                   	push   esi
c0013378:	50                   	push   eax
c0013379:	e8 e0 fb ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001337e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013383:	83 c4 0c             	add    esp,0xc
c0013386:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001338a:	50                   	push   eax
c001338b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001338f:	50                   	push   eax
c0013390:	53                   	push   ebx
c0013391:	e8 d8 fe ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	83 f8 02             	cmp    eax,0x2
c001339c:	74 04                	je     c00133a2 <Fs::setcwd(Process*, char*)+0xd3>
c001339e:	85 c0                	test   eax,eax
c00133a0:	74 1c                	je     c00133be <Fs::setcwd(Process*, char*)+0xef>
c00133a2:	b8 01 00 00 00       	mov    eax,0x1
c00133a7:	85 db                	test   ebx,ebx
c00133a9:	74 54                	je     c00133ff <Fs::setcwd(Process*, char*)+0x130>
c00133ab:	83 ec 0c             	sub    esp,0xc
c00133ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133b0:	53                   	push   ebx
c00133b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133b4:	83 c4 10             	add    esp,0x10
c00133b7:	b8 01 00 00 00       	mov    eax,0x1
c00133bc:	eb 41                	jmp    c00133ff <Fs::setcwd(Process*, char*)+0x130>
c00133be:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00133c3:	75 1c                	jne    c00133e1 <Fs::setcwd(Process*, char*)+0x112>
c00133c5:	b8 02 00 00 00       	mov    eax,0x2
c00133ca:	85 db                	test   ebx,ebx
c00133cc:	74 31                	je     c00133ff <Fs::setcwd(Process*, char*)+0x130>
c00133ce:	83 ec 0c             	sub    esp,0xc
c00133d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133d3:	53                   	push   ebx
c00133d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133d7:	83 c4 10             	add    esp,0x10
c00133da:	b8 02 00 00 00       	mov    eax,0x2
c00133df:	eb 1e                	jmp    c00133ff <Fs::setcwd(Process*, char*)+0x130>
c00133e1:	85 db                	test   ebx,ebx
c00133e3:	74 0c                	je     c00133f1 <Fs::setcwd(Process*, char*)+0x122>
c00133e5:	83 ec 0c             	sub    esp,0xc
c00133e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133ea:	53                   	push   ebx
c00133eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	50                   	push   eax
c00133f2:	50                   	push   eax
c00133f3:	56                   	push   esi
c00133f4:	57                   	push   edi
c00133f5:	e8 12 d4 fe ff       	call   c000080c <strcpy>
c00133fa:	83 c4 10             	add    esp,0x10
c00133fd:	31 c0                	xor    eax,eax
c00133ff:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013405:	5b                   	pop    ebx
c0013406:	5e                   	pop    esi
c0013407:	5f                   	pop    edi
c0013408:	5d                   	pop    ebp
c0013409:	c3                   	ret    

c001340a <Directory::Directory(char const*, Process*)>:
c001340a:	83 ec 0c             	sub    esp,0xc
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	83 ec 08             	sub    esp,0x8
c0013414:	6a 00                	push   0x0
c0013416:	50                   	push   eax
c0013417:	e8 ce dd ff ff       	call   c00111ea <UnixFile::UnixFile(int)>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c0013424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013428:	89 10                	mov    DWORD PTR [eax],edx
c001342a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001342e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013438:	83 c0 0d             	add    eax,0xd
c001343b:	83 ec 04             	sub    esp,0x4
c001343e:	52                   	push   edx
c001343f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013443:	50                   	push   eax
c0013444:	e8 6b f9 ff ff       	call   c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013449:	83 c4 10             	add    esp,0x10
c001344c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013450:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013453:	8d 50 bf             	lea    edx,[eax-0x41]
c0013456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013468:	90                   	nop
c0013469:	83 c4 0c             	add    esp,0xc
c001346c:	c3                   	ret    
c001346d:	90                   	nop

c001346e <Directory::open()>:
c001346e:	53                   	push   ebx
c001346f:	b8 0b 00 00 00       	mov    eax,0xb
c0013474:	83 ec 08             	sub    esp,0x8
c0013477:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001347b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013482:	80 fa 19             	cmp    dl,0x19
c0013485:	77 3d                	ja     c00134c4 <Directory::open()+0x56>
c0013487:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c001348e:	85 d2                	test   edx,edx
c0013490:	74 32                	je     c00134c4 <Directory::open()+0x56>
c0013492:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013498:	85 d2                	test   edx,edx
c001349a:	74 28                	je     c00134c4 <Directory::open()+0x56>
c001349c:	b8 06 00 00 00       	mov    eax,0x6
c00134a1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134a5:	75 1d                	jne    c00134c4 <Directory::open()+0x56>
c00134a7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134ad:	50                   	push   eax
c00134ae:	8b 02                	mov    eax,DWORD PTR [edx]
c00134b0:	51                   	push   ecx
c00134b1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134b4:	51                   	push   ecx
c00134b5:	52                   	push   edx
c00134b6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00134b9:	83 c4 10             	add    esp,0x10
c00134bc:	85 c0                	test   eax,eax
c00134be:	75 04                	jne    c00134c4 <Directory::open()+0x56>
c00134c0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134c4:	83 c4 08             	add    esp,0x8
c00134c7:	5b                   	pop    ebx
c00134c8:	c3                   	ret    
c00134c9:	90                   	nop

c00134ca <Directory::close()>:
c00134ca:	53                   	push   ebx
c00134cb:	b8 0b 00 00 00       	mov    eax,0xb
c00134d0:	83 ec 08             	sub    esp,0x8
c00134d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134d7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134de:	80 fa 19             	cmp    dl,0x19
c00134e1:	77 41                	ja     c0013524 <Directory::close()+0x5a>
c00134e3:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c00134ea:	85 db                	test   ebx,ebx
c00134ec:	74 36                	je     c0013524 <Directory::close()+0x5a>
c00134ee:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134f5:	74 2d                	je     c0013524 <Directory::close()+0x5a>
c00134f7:	b8 05 00 00 00       	mov    eax,0x5
c00134fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013500:	74 22                	je     c0013524 <Directory::close()+0x5a>
c0013502:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013506:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c001350d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013513:	53                   	push   ebx
c0013514:	53                   	push   ebx
c0013515:	8b 10                	mov    edx,DWORD PTR [eax]
c0013517:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001351d:	50                   	push   eax
c001351e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013521:	83 c4 10             	add    esp,0x10
c0013524:	83 c4 08             	add    esp,0x8
c0013527:	5b                   	pop    ebx
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <Directory::unlink()>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	b8 0b 00 00 00       	mov    eax,0xb
c0013532:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013536:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001353d:	80 f9 19             	cmp    cl,0x19
c0013540:	77 2f                	ja     c0013571 <Directory::unlink()+0x47>
c0013542:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013549:	85 c9                	test   ecx,ecx
c001354b:	74 24                	je     c0013571 <Directory::unlink()+0x47>
c001354d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013553:	85 c9                	test   ecx,ecx
c0013555:	74 1a                	je     c0013571 <Directory::unlink()+0x47>
c0013557:	b8 06 00 00 00       	mov    eax,0x6
c001355c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013560:	75 0f                	jne    c0013571 <Directory::unlink()+0x47>
c0013562:	83 c2 0d             	add    edx,0xd
c0013565:	50                   	push   eax
c0013566:	50                   	push   eax
c0013567:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013569:	52                   	push   edx
c001356a:	51                   	push   ecx
c001356b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	83 c4 0c             	add    esp,0xc
c0013574:	c3                   	ret    
c0013575:	90                   	nop

c0013576 <Directory::rename(char const*)>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013582:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013589:	80 f9 19             	cmp    cl,0x19
c001358c:	77 32                	ja     c00135c0 <Directory::rename(char const*)+0x4a>
c001358e:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013595:	85 c9                	test   ecx,ecx
c0013597:	74 27                	je     c00135c0 <Directory::rename(char const*)+0x4a>
c0013599:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001359f:	85 c9                	test   ecx,ecx
c00135a1:	74 1d                	je     c00135c0 <Directory::rename(char const*)+0x4a>
c00135a3:	b8 06 00 00 00       	mov    eax,0x6
c00135a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135ac:	75 12                	jne    c00135c0 <Directory::rename(char const*)+0x4a>
c00135ae:	83 c2 0d             	add    edx,0xd
c00135b1:	50                   	push   eax
c00135b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135b8:	52                   	push   edx
c00135b9:	51                   	push   ecx
c00135ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	83 c4 0c             	add    esp,0xc
c00135c3:	c3                   	ret    

c00135c4 <Directory::exists()>:
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	31 c0                	xor    eax,eax
c00135c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135cd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d4:	80 f9 19             	cmp    cl,0x19
c00135d7:	77 24                	ja     c00135fd <Directory::exists()+0x39>
c00135d9:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00135e0:	85 c9                	test   ecx,ecx
c00135e2:	74 19                	je     c00135fd <Directory::exists()+0x39>
c00135e4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ea:	85 c9                	test   ecx,ecx
c00135ec:	74 0f                	je     c00135fd <Directory::exists()+0x39>
c00135ee:	83 c2 0d             	add    edx,0xd
c00135f1:	50                   	push   eax
c00135f2:	50                   	push   eax
c00135f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f5:	52                   	push   edx
c00135f6:	51                   	push   ecx
c00135f7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	83 c4 0c             	add    esp,0xc
c0013600:	c3                   	ret    
c0013601:	90                   	nop

c0013602 <Directory::read(dirent*)>:
c0013602:	83 ec 1c             	sub    esp,0x1c
c0013605:	b8 0b 00 00 00       	mov    eax,0xb
c001360a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001360e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013615:	80 fa 19             	cmp    dl,0x19
c0013618:	77 30                	ja     c001364a <Directory::read(dirent*)+0x48>
c001361a:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013621:	85 d2                	test   edx,edx
c0013623:	74 25                	je     c001364a <Directory::read(dirent*)+0x48>
c0013625:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001362c:	74 1c                	je     c001364a <Directory::read(dirent*)+0x48>
c001362e:	83 ec 0c             	sub    esp,0xc
c0013631:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013633:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013637:	52                   	push   edx
c0013638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001363c:	6a 00                	push   0x0
c001363e:	68 10 01 00 00       	push   0x110
c0013643:	51                   	push   ecx
c0013644:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013647:	83 c4 20             	add    esp,0x20
c001364a:	83 c4 1c             	add    esp,0x1c
c001364d:	c3                   	ret    

c001364e <Directory::create()>:
c001364e:	83 ec 0c             	sub    esp,0xc
c0013651:	b8 0b 00 00 00       	mov    eax,0xb
c0013656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001365a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013661:	80 f9 19             	cmp    cl,0x19
c0013664:	77 2f                	ja     c0013695 <Directory::create()+0x47>
c0013666:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001366d:	85 c9                	test   ecx,ecx
c001366f:	74 24                	je     c0013695 <Directory::create()+0x47>
c0013671:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013677:	85 c9                	test   ecx,ecx
c0013679:	74 1a                	je     c0013695 <Directory::create()+0x47>
c001367b:	b8 06 00 00 00       	mov    eax,0x6
c0013680:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013684:	75 0f                	jne    c0013695 <Directory::create()+0x47>
c0013686:	83 c2 0d             	add    edx,0xd
c0013689:	50                   	push   eax
c001368a:	50                   	push   eax
c001368b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001368d:	52                   	push   edx
c001368e:	51                   	push   ecx
c001368f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013692:	83 c4 10             	add    esp,0x10
c0013695:	83 c4 0c             	add    esp,0xc
c0013698:	c3                   	ret    
c0013699:	90                   	nop

c001369a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001369a:	b8 0a 00 00 00       	mov    eax,0xa
c001369f:	c3                   	ret    

c00136a0 <Bus::Bus(char const*)>:
c00136a0:	83 ec 0c             	sub    esp,0xc
c00136a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a7:	83 ec 08             	sub    esp,0x8
c00136aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ae:	50                   	push   eax
c00136af:	e8 88 09 00 00       	call   c001403c <Device::Device(char const*)>
c00136b4:	83 c4 10             	add    esp,0x10
c00136b7:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c00136bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c0:	89 10                	mov    DWORD PTR [eax],edx
c00136c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00136d0:	90                   	nop
c00136d1:	83 c4 0c             	add    esp,0xc
c00136d4:	c3                   	ret    
c00136d5:	90                   	nop

c00136d6 <Bus::~Bus()>:
c00136d6:	83 ec 0c             	sub    esp,0xc
c00136d9:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c00136de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e2:	89 10                	mov    DWORD PTR [eax],edx
c00136e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e8:	83 ec 0c             	sub    esp,0xc
c00136eb:	50                   	push   eax
c00136ec:	e8 15 06 00 00       	call   c0013d06 <Device::~Device()>
c00136f1:	83 c4 10             	add    esp,0x10
c00136f4:	90                   	nop
c00136f5:	83 c4 0c             	add    esp,0xc
c00136f8:	c3                   	ret    
c00136f9:	90                   	nop

c00136fa <Bus::~Bus()>:
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	83 ec 0c             	sub    esp,0xc
c0013700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013704:	e8 cd ff ff ff       	call   c00136d6 <Bus::~Bus()>
c0013709:	83 c4 10             	add    esp,0x10
c001370c:	83 ec 08             	sub    esp,0x8
c001370f:	68 58 01 00 00       	push   0x158
c0013714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013718:	e8 0a f2 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	83 c4 0c             	add    esp,0xc
c0013723:	c3                   	ret    

c0013724 <Buzzer::Buzzer(char const*)>:
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372b:	83 ec 08             	sub    esp,0x8
c001372e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013732:	50                   	push   eax
c0013733:	e8 04 09 00 00       	call   c001403c <Device::Device(char const*)>
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c0013740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013744:	89 10                	mov    DWORD PTR [eax],edx
c0013746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013758:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013762:	90                   	nop
c0013763:	83 c4 0c             	add    esp,0xc
c0013766:	c3                   	ret    
c0013767:	90                   	nop

c0013768 <Buzzer::~Buzzer()>:
c0013768:	83 ec 0c             	sub    esp,0xc
c001376b:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c0013770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013774:	89 10                	mov    DWORD PTR [eax],edx
c0013776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	50                   	push   eax
c001377e:	e8 83 05 00 00       	call   c0013d06 <Device::~Device()>
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	90                   	nop
c0013787:	83 c4 0c             	add    esp,0xc
c001378a:	c3                   	ret    
c001378b:	90                   	nop

c001378c <Buzzer::~Buzzer()>:
c001378c:	83 ec 0c             	sub    esp,0xc
c001378f:	83 ec 0c             	sub    esp,0xc
c0013792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013796:	e8 cd ff ff ff       	call   c0013768 <Buzzer::~Buzzer()>
c001379b:	83 c4 10             	add    esp,0x10
c001379e:	83 ec 08             	sub    esp,0x8
c00137a1:	68 5c 01 00 00       	push   0x15c
c00137a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137aa:	e8 78 f1 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00137af:	83 c4 10             	add    esp,0x10
c00137b2:	83 c4 0c             	add    esp,0xc
c00137b5:	c3                   	ret    

c00137b6 <Buzzer::stop()>:
c00137b6:	83 ec 14             	sub    esp,0x14
c00137b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00137bf:	6a 00                	push   0x0
c00137c1:	50                   	push   eax
c00137c2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137c5:	83 c4 1c             	add    esp,0x1c
c00137c8:	c3                   	ret    

c00137c9 <beepThread(void*)>:
c00137c9:	53                   	push   ebx
c00137ca:	83 ec 08             	sub    esp,0x8
c00137cd:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00137d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137d6:	48                   	dec    eax
c00137d7:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00137dc:	75 01                	jne    c00137df <beepThread(void*)+0x16>
c00137de:	fb                   	sti    
c00137df:	50                   	push   eax
c00137e0:	50                   	push   eax
c00137e1:	b8 40 42 0f 00       	mov    eax,0xf4240
c00137e6:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00137ec:	52                   	push   edx
c00137ed:	50                   	push   eax
c00137ee:	e8 16 aa 00 00       	call   c001e209 <nanoSleep(unsigned long long)>
c00137f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137f6:	e8 bb ff ff ff       	call   c00137b6 <Buzzer::stop()>
c00137fb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013803:	83 c4 18             	add    esp,0x18
c0013806:	5b                   	pop    ebx
c0013807:	e9 f9 a8 00 00       	jmp    c001e105 <blockTask(TaskState)>

c001380c <Buzzer::beep(int, int, bool)>:
c001380c:	57                   	push   edi
c001380d:	56                   	push   esi
c001380e:	53                   	push   ebx
c001380f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013813:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013817:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001381b:	52                   	push   edx
c001381c:	52                   	push   edx
c001381d:	8b 06                	mov    eax,DWORD PTR [esi]
c001381f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013823:	56                   	push   esi
c0013824:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013827:	83 c4 10             	add    esp,0x10
c001382a:	89 f8                	mov    eax,edi
c001382c:	84 c0                	test   al,al
c001382e:	74 1f                	je     c001384f <Buzzer::beep(int, int, bool)+0x43>
c0013830:	50                   	push   eax
c0013831:	50                   	push   eax
c0013832:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013838:	99                   	cdq    
c0013839:	52                   	push   edx
c001383a:	50                   	push   eax
c001383b:	e8 c9 a9 00 00       	call   c001e209 <nanoSleep(unsigned long long)>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013847:	5b                   	pop    ebx
c0013848:	5e                   	pop    esi
c0013849:	5f                   	pop    edi
c001384a:	e9 67 ff ff ff       	jmp    c00137b6 <Buzzer::stop()>
c001384f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013855:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001385a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013862:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013866:	c7 44 24 14 c9 37 01 c0 	mov    DWORD PTR [esp+0x14],0xc00137c9
c001386e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013872:	5b                   	pop    ebx
c0013873:	5e                   	pop    esi
c0013874:	5f                   	pop    edi
c0013875:	e9 90 a4 00 00       	jmp    c001dd0a <Process::createThread(void (*)(void*), void*, int)>

c001387a <User::loadClockSettings(int)>:
c001387a:	53                   	push   ebx
c001387b:	83 ec 14             	sub    esp,0x14
c001387e:	68 14 01 00 00       	push   0x114
c0013883:	e8 1f c1 ff ff       	call   c000f9a7 <malloc>
c0013888:	83 c4 0c             	add    esp,0xc
c001388b:	89 c3                	mov    ebx,eax
c001388d:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c0013893:	68 7c b2 02 c0       	push   0xc002b27c
c0013898:	50                   	push   eax
c0013899:	e8 c0 f6 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001389e:	58                   	pop    eax
c001389f:	5a                   	pop    edx
c00138a0:	6a 01                	push   0x1
c00138a2:	53                   	push   ebx
c00138a3:	e8 1a f7 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c00138a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138ab:	e8 70 f7 ff ff       	call   c0013020 <File::close()>
c00138b0:	83 c4 10             	add    esp,0x10
c00138b3:	85 db                	test   ebx,ebx
c00138b5:	74 0f                	je     c00138c6 <User::loadClockSettings(int)+0x4c>
c00138b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00138bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00138c0:	83 c4 08             	add    esp,0x8
c00138c3:	5b                   	pop    ebx
c00138c4:	ff e0                	jmp    eax
c00138c6:	83 c4 08             	add    esp,0x8
c00138c9:	5b                   	pop    ebx
c00138ca:	c3                   	ret    
c00138cb:	90                   	nop

c00138cc <Clock::Clock(char const*)>:
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d3:	83 ec 08             	sub    esp,0x8
c00138d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138da:	50                   	push   eax
c00138db:	e8 5c 07 00 00       	call   c001403c <Device::Device(char const*)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c00138e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ec:	89 10                	mov    DWORD PTR [eax],edx
c00138ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00138fc:	90                   	nop
c00138fd:	83 c4 0c             	add    esp,0xc
c0013900:	c3                   	ret    
c0013901:	90                   	nop

c0013902 <Clock::~Clock()>:
c0013902:	83 ec 0c             	sub    esp,0xc
c0013905:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c001390a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390e:	89 10                	mov    DWORD PTR [eax],edx
c0013910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013914:	83 ec 0c             	sub    esp,0xc
c0013917:	50                   	push   eax
c0013918:	e8 e9 03 00 00       	call   c0013d06 <Device::~Device()>
c001391d:	83 c4 10             	add    esp,0x10
c0013920:	90                   	nop
c0013921:	83 c4 0c             	add    esp,0xc
c0013924:	c3                   	ret    
c0013925:	90                   	nop

c0013926 <Clock::~Clock()>:
c0013926:	83 ec 0c             	sub    esp,0xc
c0013929:	83 ec 0c             	sub    esp,0xc
c001392c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013930:	e8 cd ff ff ff       	call   c0013902 <Clock::~Clock()>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	83 ec 08             	sub    esp,0x8
c001393b:	68 58 01 00 00       	push   0x158
c0013940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013944:	e8 de ef ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	83 c4 0c             	add    esp,0xc
c001394f:	c3                   	ret    

c0013950 <Clock::timeInSecondsLocal()>:
c0013950:	53                   	push   ebx
c0013951:	83 ec 14             	sub    esp,0x14
c0013954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013958:	8b 10                	mov    edx,DWORD PTR [eax]
c001395a:	50                   	push   eax
c001395b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001395e:	0f b6 0d dc e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7dc
c0013965:	03 0d e0 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7e0
c001396b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013971:	89 cb                	mov    ebx,ecx
c0013973:	c1 fb 1f             	sar    ebx,0x1f
c0013976:	01 c8                	add    eax,ecx
c0013978:	11 da                	adc    edx,ebx
c001397a:	83 c4 10             	add    esp,0x10
c001397d:	31 c9                	xor    ecx,ecx
c001397f:	80 3d dd e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7dd,0x0
c0013986:	74 05                	je     c001398d <Clock::timeInSecondsLocal()+0x3d>
c0013988:	b9 08 07 00 00       	mov    ecx,0x708
c001398d:	31 db                	xor    ebx,ebx
c001398f:	01 c8                	add    eax,ecx
c0013991:	11 da                	adc    edx,ebx
c0013993:	83 c4 08             	add    esp,0x8
c0013996:	5b                   	pop    ebx
c0013997:	c3                   	ret    

c0013998 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013998:	57                   	push   edi
c0013999:	56                   	push   esi
c001399a:	53                   	push   ebx
c001399b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001399f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00139a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139a9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00139ac:	0f b6 05 dc e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e7dc
c00139b3:	03 05 e0 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7e0
c00139b9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00139bf:	99                   	cdq    
c00139c0:	29 c6                	sub    esi,eax
c00139c2:	19 d7                	sbb    edi,edx
c00139c4:	89 f0                	mov    eax,esi
c00139c6:	89 fa                	mov    edx,edi
c00139c8:	31 f6                	xor    esi,esi
c00139ca:	80 3d dd e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7dd,0x0
c00139d1:	74 05                	je     c00139d8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00139d3:	be 08 07 00 00       	mov    esi,0x708
c00139d8:	31 ff                	xor    edi,edi
c00139da:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00139de:	29 f0                	sub    eax,esi
c00139e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139e4:	19 fa                	sbb    edx,edi
c00139e6:	89 d8                	mov    eax,ebx
c00139e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139ec:	5b                   	pop    ebx
c00139ed:	5e                   	pop    esi
c00139ee:	5f                   	pop    edi
c00139ef:	ff e0                	jmp    eax

c00139f1 <datetimeToSeconds(datetime_t)>:
c00139f1:	55                   	push   ebp
c00139f2:	57                   	push   edi
c00139f3:	56                   	push   esi
c00139f4:	53                   	push   ebx
c00139f5:	83 ec 14             	sub    esp,0x14
c00139f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00139fc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013a00:	89 d3                	mov    ebx,edx
c0013a02:	0f b6 c6             	movzx  eax,dh
c0013a05:	c1 eb 10             	shr    ebx,0x10
c0013a08:	48                   	dec    eax
c0013a09:	66 81 eb 6c 07       	sub    bx,0x76c
c0013a0e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013a12:	0f b6 f5             	movzx  esi,ch
c0013a15:	89 cf                	mov    edi,ecx
c0013a17:	6b f6 3c             	imul   esi,esi,0x3c
c0013a1a:	c1 ef 10             	shr    edi,0x10
c0013a1d:	0f b6 c9             	movzx  ecx,cl
c0013a20:	89 f8                	mov    eax,edi
c0013a22:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a28:	0f b6 f8             	movzx  edi,al
c0013a2b:	0f b6 d2             	movzx  edx,dl
c0013a2e:	01 fe                	add    esi,edi
c0013a30:	01 f1                	add    ecx,esi
c0013a32:	0f b7 f3             	movzx  esi,bx
c0013a35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013a39:	c1 f9 1f             	sar    ecx,0x1f
c0013a3c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013a41:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a45:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013a4a:	8b 0c 8d e0 b2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4d20]
c0013a51:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013a55:	76 29                	jbe    c0013a80 <datetimeToSeconds(datetime_t)+0x8f>
c0013a57:	f6 c3 03             	test   bl,0x3
c0013a5a:	75 24                	jne    c0013a80 <datetimeToSeconds(datetime_t)+0x8f>
c0013a5c:	31 d2                	xor    edx,edx
c0013a5e:	bf 64 00 00 00       	mov    edi,0x64
c0013a63:	89 d8                	mov    eax,ebx
c0013a65:	66 f7 f7             	div    di
c0013a68:	66 85 d2             	test   dx,dx
c0013a6b:	75 12                	jne    c0013a7f <datetimeToSeconds(datetime_t)+0x8e>
c0013a6d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013a73:	bf 90 01 00 00       	mov    edi,0x190
c0013a78:	99                   	cdq    
c0013a79:	f7 ff                	idiv   edi
c0013a7b:	85 d2                	test   edx,edx
c0013a7d:	75 01                	jne    c0013a80 <datetimeToSeconds(datetime_t)+0x8f>
c0013a7f:	41                   	inc    ecx
c0013a80:	66 83 fb 46          	cmp    bx,0x46
c0013a84:	76 45                	jbe    c0013acb <datetimeToSeconds(datetime_t)+0xda>
c0013a86:	bb 46 00 00 00       	mov    ebx,0x46
c0013a8b:	bf 64 00 00 00       	mov    edi,0x64
c0013a90:	bd 90 01 00 00       	mov    ebp,0x190
c0013a95:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a9a:	f6 c3 03             	test   bl,0x3
c0013a9d:	75 23                	jne    c0013ac2 <datetimeToSeconds(datetime_t)+0xd1>
c0013a9f:	89 d8                	mov    eax,ebx
c0013aa1:	99                   	cdq    
c0013aa2:	f7 ff                	idiv   edi
c0013aa4:	b8 6e 01 00 00       	mov    eax,0x16e
c0013aa9:	85 d2                	test   edx,edx
c0013aab:	75 15                	jne    c0013ac2 <datetimeToSeconds(datetime_t)+0xd1>
c0013aad:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013ab3:	99                   	cdq    
c0013ab4:	f7 fd                	idiv   ebp
c0013ab6:	83 fa 01             	cmp    edx,0x1
c0013ab9:	19 c0                	sbb    eax,eax
c0013abb:	f7 d0                	not    eax
c0013abd:	05 6e 01 00 00       	add    eax,0x16e
c0013ac2:	01 c1                	add    ecx,eax
c0013ac4:	43                   	inc    ebx
c0013ac5:	39 f3                	cmp    ebx,esi
c0013ac7:	7c cc                	jl     c0013a95 <datetimeToSeconds(datetime_t)+0xa4>
c0013ac9:	eb 35                	jmp    c0013b00 <datetimeToSeconds(datetime_t)+0x10f>
c0013acb:	74 33                	je     c0013b00 <datetimeToSeconds(datetime_t)+0x10f>
c0013acd:	b8 45 00 00 00       	mov    eax,0x45
c0013ad2:	89 c2                	mov    edx,eax
c0013ad4:	83 e2 03             	and    edx,0x3
c0013ad7:	39 f0                	cmp    eax,esi
c0013ad9:	7e 0f                	jle    c0013aea <datetimeToSeconds(datetime_t)+0xf9>
c0013adb:	83 fa 01             	cmp    edx,0x1
c0013ade:	19 d2                	sbb    edx,edx
c0013ae0:	48                   	dec    eax
c0013ae1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ae8:	eb e8                	jmp    c0013ad2 <datetimeToSeconds(datetime_t)+0xe1>
c0013aea:	b8 6d 01 00 00       	mov    eax,0x16d
c0013aef:	85 d2                	test   edx,edx
c0013af1:	75 0b                	jne    c0013afe <datetimeToSeconds(datetime_t)+0x10d>
c0013af3:	66 83 fb 01          	cmp    bx,0x1
c0013af7:	19 c0                	sbb    eax,eax
c0013af9:	05 6e 01 00 00       	add    eax,0x16e
c0013afe:	29 c1                	sub    ecx,eax
c0013b00:	b8 80 51 01 00       	mov    eax,0x15180
c0013b05:	f7 e9                	imul   ecx
c0013b07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013b0b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013b0f:	83 c4 14             	add    esp,0x14
c0013b12:	5b                   	pop    ebx
c0013b13:	5e                   	pop    esi
c0013b14:	5f                   	pop    edi
c0013b15:	5d                   	pop    ebp
c0013b16:	c3                   	ret    
c0013b17:	90                   	nop

c0013b18 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013b18:	57                   	push   edi
c0013b19:	56                   	push   esi
c0013b1a:	53                   	push   ebx
c0013b1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b21:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013b24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b2c:	e8 c0 fe ff ff       	call   c00139f1 <datetimeToSeconds(datetime_t)>
c0013b31:	59                   	pop    ecx
c0013b32:	0f b6 0d dc e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7dc
c0013b39:	5b                   	pop    ebx
c0013b3a:	03 0d e0 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7e0
c0013b40:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b46:	89 cb                	mov    ebx,ecx
c0013b48:	c1 fb 1f             	sar    ebx,0x1f
c0013b4b:	29 c8                	sub    eax,ecx
c0013b4d:	19 da                	sbb    edx,ebx
c0013b4f:	31 c9                	xor    ecx,ecx
c0013b51:	80 3d dd e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7dd,0x0
c0013b58:	74 05                	je     c0013b5f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013b5a:	b9 08 07 00 00       	mov    ecx,0x708
c0013b5f:	31 db                	xor    ebx,ebx
c0013b61:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013b65:	29 c8                	sub    eax,ecx
c0013b67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b6b:	19 da                	sbb    edx,ebx
c0013b6d:	89 f8                	mov    eax,edi
c0013b6f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b73:	5b                   	pop    ebx
c0013b74:	5e                   	pop    esi
c0013b75:	5f                   	pop    edi
c0013b76:	ff e0                	jmp    eax

c0013b78 <secondsToDatetime(unsigned long long)>:
c0013b78:	55                   	push   ebp
c0013b79:	57                   	push   edi
c0013b7a:	56                   	push   esi
c0013b7b:	53                   	push   ebx
c0013b7c:	83 ec 1c             	sub    esp,0x1c
c0013b7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b83:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013b87:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013b8b:	6a 00                	push   0x0
c0013b8d:	68 80 51 01 00       	push   0x15180
c0013b92:	55                   	push   ebp
c0013b93:	57                   	push   edi
c0013b94:	e8 3b 32 01 00       	call   c0026dd4 <__udivdi3>
c0013b99:	83 c4 10             	add    esp,0x10
c0013b9c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013ba2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ba6:	6a 00                	push   0x0
c0013ba8:	68 80 51 01 00       	push   0x15180
c0013bad:	55                   	push   ebp
c0013bae:	57                   	push   edi
c0013baf:	bf 10 0e 00 00       	mov    edi,0xe10
c0013bb4:	e8 1b 33 01 00       	call   c0026ed4 <__umoddi3>
c0013bb9:	83 c4 10             	add    esp,0x10
c0013bbc:	99                   	cdq    
c0013bbd:	f7 ff                	idiv   edi
c0013bbf:	bf 3c 00 00 00       	mov    edi,0x3c
c0013bc4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013bc7:	89 d0                	mov    eax,edx
c0013bc9:	99                   	cdq    
c0013bca:	f7 ff                	idiv   edi
c0013bcc:	85 db                	test   ebx,ebx
c0013bce:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013bd1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013bd4:	79 11                	jns    c0013be7 <secondsToDatetime(unsigned long long)+0x6f>
c0013bd6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013bda:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013be0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013be5:	eb 07                	jmp    c0013bee <secondsToDatetime(unsigned long long)+0x76>
c0013be7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013bec:	89 d8                	mov    eax,ebx
c0013bee:	bf b4 05 00 00       	mov    edi,0x5b4
c0013bf3:	99                   	cdq    
c0013bf4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013bf9:	f7 f9                	idiv   ecx
c0013bfb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013c00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013c04:	31 d2                	xor    edx,edx
c0013c06:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013c0e:	01 c3                	add    ebx,eax
c0013c10:	89 d8                	mov    eax,ebx
c0013c12:	f7 f1                	div    ecx
c0013c14:	31 d2                	xor    edx,edx
c0013c16:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013c19:	89 d8                	mov    eax,ebx
c0013c1b:	f7 f7                	div    edi
c0013c1d:	31 d2                	xor    edx,edx
c0013c1f:	29 c1                	sub    ecx,eax
c0013c21:	89 d8                	mov    eax,ebx
c0013c23:	f7 f5                	div    ebp
c0013c25:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013c2a:	29 c1                	sub    ecx,eax
c0013c2c:	31 d2                	xor    edx,edx
c0013c2e:	89 c8                	mov    eax,ecx
c0013c30:	f7 f5                	div    ebp
c0013c32:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c3b:	31 d2                	xor    edx,edx
c0013c3d:	89 c8                	mov    eax,ecx
c0013c3f:	f7 f5                	div    ebp
c0013c41:	31 d2                	xor    edx,edx
c0013c43:	01 c3                	add    ebx,eax
c0013c45:	89 c8                	mov    eax,ecx
c0013c47:	f7 f7                	div    edi
c0013c49:	bf 99 00 00 00       	mov    edi,0x99
c0013c4e:	29 c3                	sub    ebx,eax
c0013c50:	31 d2                	xor    edx,edx
c0013c52:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013c5a:	29 c3                	sub    ebx,eax
c0013c5c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013c5f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013c62:	bb 05 00 00 00       	mov    ebx,0x5
c0013c67:	83 c1 02             	add    ecx,0x2
c0013c6a:	89 c8                	mov    eax,ecx
c0013c6c:	f7 f7                	div    edi
c0013c6e:	31 d2                	xor    edx,edx
c0013c70:	89 c7                	mov    edi,eax
c0013c72:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013c78:	83 c0 02             	add    eax,0x2
c0013c7b:	f7 f3                	div    ebx
c0013c7d:	89 eb                	mov    ebx,ebp
c0013c7f:	29 c3                	sub    ebx,eax
c0013c81:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013c87:	88 1e                	mov    BYTE PTR [esi],bl
c0013c89:	19 c0                	sbb    eax,eax
c0013c8b:	31 d2                	xor    edx,edx
c0013c8d:	83 e0 0c             	and    eax,0xc
c0013c90:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013c94:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013c9c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013ca0:	83 f9 01             	cmp    ecx,0x1
c0013ca3:	0f 96 c2             	setbe  dl
c0013ca6:	41                   	inc    ecx
c0013ca7:	01 d0                	add    eax,edx
c0013ca9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013cac:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013cb0:	83 c4 1c             	add    esp,0x1c
c0013cb3:	89 f0                	mov    eax,esi
c0013cb5:	5b                   	pop    ebx
c0013cb6:	5e                   	pop    esi
c0013cb7:	5f                   	pop    edi
c0013cb8:	5d                   	pop    ebp
c0013cb9:	c2 04 00             	ret    0x4

c0013cbc <Clock::timeInDatetimeLocal()>:
c0013cbc:	53                   	push   ebx
c0013cbd:	83 ec 14             	sub    esp,0x14
c0013cc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cc8:	e8 83 fc ff ff       	call   c0013950 <Clock::timeInSecondsLocal()>
c0013ccd:	83 c4 0c             	add    esp,0xc
c0013cd0:	52                   	push   edx
c0013cd1:	50                   	push   eax
c0013cd2:	53                   	push   ebx
c0013cd3:	e8 a0 fe ff ff       	call   c0013b78 <secondsToDatetime(unsigned long long)>
c0013cd8:	89 d8                	mov    eax,ebx
c0013cda:	83 c4 14             	add    esp,0x14
c0013cdd:	5b                   	pop    ebx
c0013cde:	c2 04 00             	ret    0x4
c0013ce1:	90                   	nop

c0013ce2 <Device::hibernate()>:
c0013ce2:	c3                   	ret    
c0013ce3:	90                   	nop

c0013ce4 <Device::wake()>:
c0013ce4:	c3                   	ret    
c0013ce5:	90                   	nop

c0013ce6 <Device::detect()>:
c0013ce6:	c3                   	ret    
c0013ce7:	90                   	nop

c0013ce8 <Device::disableLegacy()>:
c0013ce8:	c3                   	ret    
c0013ce9:	90                   	nop

c0013cea <Device::powerSaving(PowerSavingLevel)>:
c0013cea:	c3                   	ret    
c0013ceb:	90                   	nop

c0013cec <DriverlessDevice::close(int, int, void*)>:
c0013cec:	31 c0                	xor    eax,eax
c0013cee:	c3                   	ret    
c0013cef:	90                   	nop

c0013cf0 <DriverlessDevice::detect()>:
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <DriverlessDevice::open(int, int, void*)>:
c0013cf2:	83 ec 18             	sub    esp,0x18
c0013cf5:	68 10 b3 02 c0       	push   0xc002b310
c0013cfa:	e8 9e 66 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0013cff:	83 c8 ff             	or     eax,0xffffffff
c0013d02:	83 c4 1c             	add    esp,0x1c
c0013d05:	c3                   	ret    

c0013d06 <Device::~Device()>:
c0013d06:	ba 70 b3 02 c0       	mov    edx,0xc002b370
c0013d0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d0f:	89 10                	mov    DWORD PTR [eax],edx
c0013d11:	90                   	nop
c0013d12:	c3                   	ret    
c0013d13:	90                   	nop

c0013d14 <Device::~Device()>:
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d1b:	e8 e6 ff ff ff       	call   c0013d06 <Device::~Device()>
c0013d20:	83 c4 04             	add    esp,0x4
c0013d23:	83 ec 08             	sub    esp,0x8
c0013d26:	68 58 01 00 00       	push   0x158
c0013d2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2f:	e8 f3 eb ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	83 c4 0c             	add    esp,0xc
c0013d3a:	c3                   	ret    
c0013d3b:	90                   	nop

c0013d3c <Device::findAndLoadDriver()>:
c0013d3c:	c7 44 24 04 2e b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b32e
c0013d44:	e9 b6 ec ff ff       	jmp    c00129ff <Dbg::kprintf(char const*, ...)>
c0013d49:	90                   	nop

c0013d4a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013d4a:	57                   	push   edi
c0013d4b:	b9 09 00 00 00       	mov    ecx,0x9
c0013d50:	56                   	push   esi
c0013d51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d55:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013d59:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013d63:	81 c7 18 01 00 00    	add    edi,0x118
c0013d69:	fc                   	cld    
c0013d6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013d6c:	5e                   	pop    esi
c0013d6d:	5f                   	pop    edi
c0013d6e:	c3                   	ret    
c0013d6f:	90                   	nop

c0013d70 <Device::preOpenACPI(void*, char*, char*)>:
c0013d70:	57                   	push   edi
c0013d71:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013d76:	56                   	push   esi
c0013d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d7f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013d89:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013d8f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013d95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d9b:	b9 0e 00 00 00       	mov    ecx,0xe
c0013da0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013da6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013daa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013dac:	5e                   	pop    esi
c0013dad:	5f                   	pop    edi
c0013dae:	c3                   	ret    
c0013daf:	90                   	nop

c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013db4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013db9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013dc0:	75 0b                	jne    c0013dcd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dc4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013dc8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013dcb:	eb 1e                	jmp    c0013deb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013dcd:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0013dd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013dd8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013dde:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013de0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013de4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013de8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013deb:	ff e0                	jmp    eax
c0013ded:	90                   	nop

c0013dee <Device::getParent()>:
c0013dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013df2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013df8:	c3                   	ret    
c0013df9:	90                   	nop

c0013dfa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dfe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013e03:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013e0a:	75 0b                	jne    c0013e17 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e0e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e12:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013e15:	eb 1e                	jmp    c0013e35 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013e17:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0013e1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e22:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013e28:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e2a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e32:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013e35:	ff e0                	jmp    eax
c0013e37:	90                   	nop

c0013e38 <Device::addChild(Device*)>:
c0013e38:	53                   	push   ebx
c0013e39:	83 ec 08             	sub    esp,0x8
c0013e3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e44:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013e4a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013e50:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e52:	85 d2                	test   edx,edx
c0013e54:	74 04                	je     c0013e5a <Device::addChild(Device*)+0x22>
c0013e56:	89 d3                	mov    ebx,edx
c0013e58:	eb f6                	jmp    c0013e50 <Device::addChild(Device*)+0x18>
c0013e5a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013e5d:	83 ec 0c             	sub    esp,0xc
c0013e60:	6a 08                	push   0x8
c0013e62:	e8 40 bb ff ff       	call   c000f9a7 <malloc>
c0013e67:	89 03                	mov    DWORD PTR [ebx],eax
c0013e69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e76:	83 c4 18             	add    esp,0x18
c0013e79:	5b                   	pop    ebx
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <Device::removeAllChildren()>:
c0013e7c:	56                   	push   esi
c0013e7d:	53                   	push   ebx
c0013e7e:	52                   	push   edx
c0013e7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e83:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013e89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e8c:	74 17                	je     c0013ea5 <Device::removeAllChildren()+0x29>
c0013e8e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013e91:	85 c0                	test   eax,eax
c0013e93:	74 0c                	je     c0013ea1 <Device::removeAllChildren()+0x25>
c0013e95:	83 ec 0c             	sub    esp,0xc
c0013e98:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e9a:	50                   	push   eax
c0013e9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013e9e:	83 c4 10             	add    esp,0x10
c0013ea1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea3:	eb e4                	jmp    c0013e89 <Device::removeAllChildren()+0xd>
c0013ea5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013eab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013eb1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013eb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ebe:	58                   	pop    eax
c0013ebf:	5b                   	pop    ebx
c0013ec0:	5e                   	pop    esi
c0013ec1:	c3                   	ret    

c0013ec2 <Device::hibernateAll()>:
c0013ec2:	53                   	push   ebx
c0013ec3:	83 ec 14             	sub    esp,0x14
c0013ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ecc:	53                   	push   ebx
c0013ecd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013ed0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ed6:	83 c4 10             	add    esp,0x10
c0013ed9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013edc:	74 0f                	je     c0013eed <Device::hibernateAll()+0x2b>
c0013ede:	83 ec 0c             	sub    esp,0xc
c0013ee1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ee4:	e8 d9 ff ff ff       	call   c0013ec2 <Device::hibernateAll()>
c0013ee9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eeb:	eb e9                	jmp    c0013ed6 <Device::hibernateAll()+0x14>
c0013eed:	83 c4 08             	add    esp,0x8
c0013ef0:	5b                   	pop    ebx
c0013ef1:	c3                   	ret    

c0013ef2 <Device::wakeAll()>:
c0013ef2:	53                   	push   ebx
c0013ef3:	83 ec 14             	sub    esp,0x14
c0013ef6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013efa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013efc:	53                   	push   ebx
c0013efd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013f00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f0c:	74 0f                	je     c0013f1d <Device::wakeAll()+0x2b>
c0013f0e:	83 ec 0c             	sub    esp,0xc
c0013f11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f14:	e8 d9 ff ff ff       	call   c0013ef2 <Device::wakeAll()>
c0013f19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f1b:	eb e9                	jmp    c0013f06 <Device::wakeAll()+0x14>
c0013f1d:	83 c4 08             	add    esp,0x8
c0013f20:	5b                   	pop    ebx
c0013f21:	c3                   	ret    

c0013f22 <Device::detectAll()>:
c0013f22:	53                   	push   ebx
c0013f23:	83 ec 14             	sub    esp,0x14
c0013f26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f2c:	53                   	push   ebx
c0013f2d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013f30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f3c:	74 0f                	je     c0013f4d <Device::detectAll()+0x2b>
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f44:	e8 d9 ff ff ff       	call   c0013f22 <Device::detectAll()>
c0013f49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f4b:	eb e9                	jmp    c0013f36 <Device::detectAll()+0x14>
c0013f4d:	83 c4 08             	add    esp,0x8
c0013f50:	5b                   	pop    ebx
c0013f51:	c3                   	ret    

c0013f52 <Device::disableLegacyAll()>:
c0013f52:	53                   	push   ebx
c0013f53:	83 ec 14             	sub    esp,0x14
c0013f56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f5c:	53                   	push   ebx
c0013f5d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013f60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f6c:	74 0f                	je     c0013f7d <Device::disableLegacyAll()+0x2b>
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f74:	e8 d9 ff ff ff       	call   c0013f52 <Device::disableLegacyAll()>
c0013f79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f7b:	eb e9                	jmp    c0013f66 <Device::disableLegacyAll()+0x14>
c0013f7d:	83 c4 08             	add    esp,0x8
c0013f80:	5b                   	pop    ebx
c0013f81:	c3                   	ret    

c0013f82 <Device::loadDriversForAll()>:
c0013f82:	53                   	push   ebx
c0013f83:	83 ec 08             	sub    esp,0x8
c0013f86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f8a:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013f91:	75 0c                	jne    c0013f9f <Device::loadDriversForAll()+0x1d>
c0013f93:	83 ec 0c             	sub    esp,0xc
c0013f96:	53                   	push   ebx
c0013f97:	e8 a0 fd ff ff       	call   c0013d3c <Device::findAndLoadDriver()>
c0013f9c:	83 c4 10             	add    esp,0x10
c0013f9f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fa8:	74 12                	je     c0013fbc <Device::loadDriversForAll()+0x3a>
c0013faa:	83 ec 0c             	sub    esp,0xc
c0013fad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fb0:	e8 cd ff ff ff       	call   c0013f82 <Device::loadDriversForAll()>
c0013fb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	eb e9                	jmp    c0013fa5 <Device::loadDriversForAll()+0x23>
c0013fbc:	83 c4 08             	add    esp,0x8
c0013fbf:	5b                   	pop    ebx
c0013fc0:	c3                   	ret    
c0013fc1:	90                   	nop

c0013fc2 <Device::closeAll()>:
c0013fc2:	53                   	push   ebx
c0013fc3:	83 ec 08             	sub    esp,0x8
c0013fc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fcc:	6a 00                	push   0x0
c0013fce:	6a 00                	push   0x0
c0013fd0:	6a 00                	push   0x0
c0013fd2:	53                   	push   ebx
c0013fd3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fe2:	74 0f                	je     c0013ff3 <Device::closeAll()+0x31>
c0013fe4:	83 ec 0c             	sub    esp,0xc
c0013fe7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fea:	e8 d3 ff ff ff       	call   c0013fc2 <Device::closeAll()>
c0013fef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ff1:	eb e9                	jmp    c0013fdc <Device::closeAll()+0x1a>
c0013ff3:	83 c4 08             	add    esp,0x8
c0013ff6:	5b                   	pop    ebx
c0013ff7:	c3                   	ret    

c0013ff8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ff8:	56                   	push   esi
c0013ff9:	53                   	push   ebx
c0013ffa:	83 ec 0c             	sub    esp,0xc
c0013ffd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014001:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014005:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014007:	56                   	push   esi
c0014008:	53                   	push   ebx
c0014009:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001400c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014018:	74 0f                	je     c0014029 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001401a:	52                   	push   edx
c001401b:	52                   	push   edx
c001401c:	56                   	push   esi
c001401d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014020:	e8 d3 ff ff ff       	call   c0013ff8 <Device::powerSavingAll(PowerSavingLevel)>
c0014025:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014027:	eb e9                	jmp    c0014012 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014029:	58                   	pop    eax
c001402a:	5b                   	pop    ebx
c001402b:	5e                   	pop    esi
c001402c:	c3                   	ret    
c001402d:	90                   	nop

c001402e <Device::setName(char const*)>:
c001402e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014036:	e9 d1 c7 fe ff       	jmp    c000080c <strcpy>
c001403b:	90                   	nop

c001403c <Device::Device(char const*)>:
c001403c:	83 ec 1c             	sub    esp,0x1c
c001403f:	ba 70 b3 02 c0       	mov    edx,0xc002b370
c0014044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014048:	89 10                	mov    DWORD PTR [eax],edx
c001404a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001404e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001405c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001406a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014078:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014082:	83 ec 08             	sub    esp,0x8
c0014085:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014089:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001408d:	e8 9c ff ff ff       	call   c001402e <Device::setName(char const*)>
c0014092:	83 c4 10             	add    esp,0x10
c0014095:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001409d:	83 ec 0c             	sub    esp,0xc
c00140a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140a4:	e8 fe b8 ff ff       	call   c000f9a7 <malloc>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140bd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00140c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00140ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00140fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140fe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001410c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001411a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014128:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014132:	90                   	nop
c0014133:	83 c4 1c             	add    esp,0x1c
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <Device::getName()>:
c0014138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001413c:	05 d0 00 00 00       	add    eax,0xd0
c0014141:	c3                   	ret    

c0014142 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014142:	83 ec 0c             	sub    esp,0xc
c0014145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014149:	83 ec 08             	sub    esp,0x8
c001414c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014150:	50                   	push   eax
c0014151:	e8 e6 fe ff ff       	call   c001403c <Device::Device(char const*)>
c0014156:	83 c4 10             	add    esp,0x10
c0014159:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c001415e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014162:	89 10                	mov    DWORD PTR [eax],edx
c0014164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014168:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014172:	90                   	nop
c0014173:	83 c4 0c             	add    esp,0xc
c0014176:	c3                   	ret    
c0014177:	90                   	nop

c0014178 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014178:	57                   	push   edi
c0014179:	56                   	push   esi
c001417a:	53                   	push   ebx
c001417b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001417f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014183:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014187:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001418d:	75 0c                	jne    c001419b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001418f:	52                   	push   edx
c0014190:	52                   	push   edx
c0014191:	53                   	push   ebx
c0014192:	56                   	push   esi
c0014193:	e8 78 4b 01 00       	call   c0028d10 <LinkedList<Device>::addElement(Device*)>
c0014198:	83 c4 10             	add    esp,0x10
c001419b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00141a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00141a4:	74 12                	je     c00141b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00141a6:	50                   	push   eax
c00141a7:	57                   	push   edi
c00141a8:	56                   	push   esi
c00141a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00141ac:	e8 c7 ff ff ff       	call   c0014178 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00141b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00141b3:	83 c4 10             	add    esp,0x10
c00141b6:	eb e9                	jmp    c00141a1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00141b8:	5b                   	pop    ebx
c00141b9:	5e                   	pop    esi
c00141ba:	5f                   	pop    edi
c00141bb:	c3                   	ret    

c00141bc <getDevicesOfType(DeviceType)>:
c00141bc:	53                   	push   ebx
c00141bd:	83 ec 14             	sub    esp,0x14
c00141c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141c4:	53                   	push   ebx
c00141c5:	e8 22 4c 01 00       	call   c0028dec <LinkedList<Device>::LinkedList()>
c00141ca:	83 c4 0c             	add    esp,0xc
c00141cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141d1:	53                   	push   ebx
c00141d2:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c00141d8:	e8 9b ff ff ff       	call   c0014178 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00141dd:	89 d8                	mov    eax,ebx
c00141df:	83 c4 18             	add    esp,0x18
c00141e2:	5b                   	pop    ebx
c00141e3:	c2 04 00             	ret    0x4

c00141e6 <HardDiskController::HardDiskController(char const*)>:
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ed:	83 ec 08             	sub    esp,0x8
c00141f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f4:	50                   	push   eax
c00141f5:	e8 42 fe ff ff       	call   c001403c <Device::Device(char const*)>
c00141fa:	83 c4 10             	add    esp,0x10
c00141fd:	ba c8 b3 02 c0       	mov    edx,0xc002b3c8
c0014202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014206:	89 10                	mov    DWORD PTR [eax],edx
c0014208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014216:	90                   	nop
c0014217:	83 c4 0c             	add    esp,0xc
c001421a:	c3                   	ret    
c001421b:	90                   	nop

c001421c <HardDiskController::~HardDiskController()>:
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	ba c8 b3 02 c0       	mov    edx,0xc002b3c8
c0014224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014228:	89 10                	mov    DWORD PTR [eax],edx
c001422a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	50                   	push   eax
c0014232:	e8 cf fa ff ff       	call   c0013d06 <Device::~Device()>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	90                   	nop
c001423b:	83 c4 0c             	add    esp,0xc
c001423e:	c3                   	ret    
c001423f:	90                   	nop

c0014240 <HardDiskController::~HardDiskController()>:
c0014240:	83 ec 0c             	sub    esp,0xc
c0014243:	83 ec 0c             	sub    esp,0xc
c0014246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424a:	e8 cd ff ff ff       	call   c001421c <HardDiskController::~HardDiskController()>
c001424f:	83 c4 10             	add    esp,0x10
c0014252:	83 ec 08             	sub    esp,0x8
c0014255:	68 58 01 00 00       	push   0x158
c001425a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001425e:	e8 c4 e6 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0014263:	83 c4 10             	add    esp,0x10
c0014266:	83 c4 0c             	add    esp,0xc
c0014269:	c3                   	ret    

c001426a <PhysicalDisk::eject()>:
c001426a:	83 c8 ff             	or     eax,0xffffffff
c001426d:	c3                   	ret    

c001426e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014275:	83 ec 08             	sub    esp,0x8
c0014278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427c:	50                   	push   eax
c001427d:	e8 ba fd ff ff       	call   c001403c <Device::Device(char const*)>
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c001428a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001428e:	89 10                	mov    DWORD PTR [eax],edx
c0014290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014294:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001429b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001429f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00142a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142aa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00142b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142bc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00142c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142d0:	90                   	nop
c00142d1:	83 c4 0c             	add    esp,0xc
c00142d4:	c3                   	ret    
c00142d5:	90                   	nop

c00142d6 <PhysicalDisk::startCache()>:
c00142d6:	56                   	push   esi
c00142d7:	53                   	push   ebx
c00142d8:	83 ec 10             	sub    esp,0x10
c00142db:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142df:	6a 44                	push   0x44
c00142e1:	e8 c1 b6 ff ff       	call   c000f9a7 <malloc>
c00142e6:	89 c6                	mov    esi,eax
c00142e8:	58                   	pop    eax
c00142e9:	5a                   	pop    edx
c00142ea:	53                   	push   ebx
c00142eb:	56                   	push   esi
c00142ec:	e8 77 28 00 00       	call   c0016b68 <VCache::VCache(PhysicalDisk*)>
c00142f1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00142f7:	83 c4 14             	add    esp,0x14
c00142fa:	5b                   	pop    ebx
c00142fb:	5e                   	pop    esi
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <PhysicalDisk::~PhysicalDisk()>:
c00142fe:	83 ec 0c             	sub    esp,0xc
c0014301:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c0014306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430a:	89 10                	mov    DWORD PTR [eax],edx
c001430c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	50                   	push   eax
c0014314:	e8 ed f9 ff ff       	call   c0013d06 <Device::~Device()>
c0014319:	83 c4 10             	add    esp,0x10
c001431c:	90                   	nop
c001431d:	83 c4 0c             	add    esp,0xc
c0014320:	c3                   	ret    
c0014321:	90                   	nop

c0014322 <PhysicalDisk::~PhysicalDisk()>:
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	83 ec 0c             	sub    esp,0xc
c0014328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001432c:	e8 cd ff ff ff       	call   c00142fe <PhysicalDisk::~PhysicalDisk()>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	83 ec 08             	sub    esp,0x8
c0014337:	68 6c 01 00 00       	push   0x16c
c001433c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014340:	e8 e2 e5 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0014345:	83 c4 10             	add    esp,0x10
c0014348:	83 c4 0c             	add    esp,0xc
c001434b:	c3                   	ret    

c001434c <FPU::FPU(char const*)>:
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014353:	83 ec 08             	sub    esp,0x8
c0014356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001435a:	50                   	push   eax
c001435b:	e8 dc fc ff ff       	call   c001403c <Device::Device(char const*)>
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	ba 38 b4 02 c0       	mov    edx,0xc002b438
c0014368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001436c:	89 10                	mov    DWORD PTR [eax],edx
c001436e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014372:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001437c:	90                   	nop
c001437d:	83 c4 0c             	add    esp,0xc
c0014380:	c3                   	ret    
c0014381:	90                   	nop

c0014382 <FPU::~FPU()>:
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	ba 38 b4 02 c0       	mov    edx,0xc002b438
c001438a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438e:	89 10                	mov    DWORD PTR [eax],edx
c0014390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014394:	83 ec 0c             	sub    esp,0xc
c0014397:	50                   	push   eax
c0014398:	e8 69 f9 ff ff       	call   c0013d06 <Device::~Device()>
c001439d:	83 c4 10             	add    esp,0x10
c00143a0:	90                   	nop
c00143a1:	83 c4 0c             	add    esp,0xc
c00143a4:	c3                   	ret    
c00143a5:	90                   	nop

c00143a6 <FPU::~FPU()>:
c00143a6:	83 ec 0c             	sub    esp,0xc
c00143a9:	83 ec 0c             	sub    esp,0xc
c00143ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143b0:	e8 cd ff ff ff       	call   c0014382 <FPU::~FPU()>
c00143b5:	83 c4 10             	add    esp,0x10
c00143b8:	83 ec 08             	sub    esp,0x8
c00143bb:	68 58 01 00 00       	push   0x158
c00143c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143c4:	e8 5e e5 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00143c9:	83 c4 10             	add    esp,0x10
c00143cc:	83 c4 0c             	add    esp,0xc
c00143cf:	c3                   	ret    

c00143d0 <setupFPU()>:
c00143d0:	53                   	push   ebx
c00143d1:	83 ec 08             	sub    esp,0x8
c00143d4:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c00143da:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00143e1:	74 19                	je     c00143fc <setupFPU()+0x2c>
c00143e3:	83 ec 0c             	sub    esp,0xc
c00143e6:	68 58 01 00 00       	push   0x158
c00143eb:	e8 b7 b5 ff ff       	call   c000f9a7 <malloc>
c00143f0:	89 c3                	mov    ebx,eax
c00143f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00143f5:	e8 5a 15 01 00       	call   c0025954 <AVX::AVX()>
c00143fa:	eb 5b                	jmp    c0014457 <setupFPU()+0x87>
c00143fc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014402:	84 c0                	test   al,al
c0014404:	79 19                	jns    c001441f <setupFPU()+0x4f>
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	68 58 01 00 00       	push   0x158
c001440e:	e8 94 b5 ff ff       	call   c000f9a7 <malloc>
c0014413:	89 c3                	mov    ebx,eax
c0014415:	89 04 24             	mov    DWORD PTR [esp],eax
c0014418:	e8 5d 16 01 00       	call   c0025a7a <SSE::SSE()>
c001441d:	eb 38                	jmp    c0014457 <setupFPU()+0x87>
c001441f:	a8 20                	test   al,0x20
c0014421:	74 19                	je     c001443c <setupFPU()+0x6c>
c0014423:	83 ec 0c             	sub    esp,0xc
c0014426:	68 58 01 00 00       	push   0x158
c001442b:	e8 77 b5 ff ff       	call   c000f9a7 <malloc>
c0014430:	89 c3                	mov    ebx,eax
c0014432:	89 04 24             	mov    DWORD PTR [esp],eax
c0014435:	e8 aa 15 01 00       	call   c00259e4 <MMX::MMX()>
c001443a:	eb 1b                	jmp    c0014457 <setupFPU()+0x87>
c001443c:	a8 10                	test   al,0x10
c001443e:	74 1c                	je     c001445c <setupFPU()+0x8c>
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	68 58 01 00 00       	push   0x158
c0014448:	e8 5a b5 ff ff       	call   c000f9a7 <malloc>
c001444d:	89 c3                	mov    ebx,eax
c001444f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014452:	e8 b1 16 01 00       	call   c0025b08 <x87::x87()>
c0014457:	83 c4 10             	add    esp,0x10
c001445a:	eb 24                	jmp    c0014480 <setupFPU()+0xb0>
c001445c:	83 e0 ef             	and    eax,0xffffffef
c001445f:	83 ec 0c             	sub    esp,0xc
c0014462:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014468:	68 24 b4 02 c0       	push   0xc002b424
c001446d:	e8 8d e5 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014472:	0f 20 c0             	mov    eax,cr0
c0014475:	83 c8 04             	or     eax,0x4
c0014478:	0f 22 c0             	mov    cr0,eax
c001447b:	31 db                	xor    ebx,ebx
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	89 d8                	mov    eax,ebx
c0014482:	83 c4 08             	add    esp,0x8
c0014485:	5b                   	pop    ebx
c0014486:	c3                   	ret    
c0014487:	90                   	nop

c0014488 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001448c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014490:	c1 e0 04             	shl    eax,0x4
c0014493:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014497:	8d 50 10             	lea    edx,[eax+0x10]
c001449a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00144a0:	74 08                	je     c00144aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00144a2:	83 c0 04             	add    eax,0x4
c00144a5:	39 d0                	cmp    eax,edx
c00144a7:	75 f1                	jne    c001449a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00144a9:	c3                   	ret    
c00144aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00144b4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00144be:	eb e2                	jmp    c00144a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00144c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00144c0:	57                   	push   edi
c00144c1:	31 c0                	xor    eax,eax
c00144c3:	56                   	push   esi
c00144c4:	53                   	push   ebx
c00144c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00144c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00144d1:	89 da                	mov    edx,ebx
c00144d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00144d7:	c1 e2 04             	shl    edx,0x4
c00144da:	01 ca                	add    edx,ecx
c00144dc:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00144e4:	74 16                	je     c00144fc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00144e6:	40                   	inc    eax
c00144e7:	83 f8 04             	cmp    eax,0x4
c00144ea:	75 f0                	jne    c00144dc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00144ec:	c7 44 24 10 68 b4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b468
c00144f4:	5b                   	pop    ebx
c00144f5:	5e                   	pop    esi
c00144f6:	5f                   	pop    edi
c00144f7:	e9 a1 5e 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c00144fc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00144ff:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014502:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014508:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001450e:	5b                   	pop    ebx
c001450f:	5e                   	pop    esi
c0014510:	5f                   	pop    edi
c0014511:	c3                   	ret    

c0014512 <doubleFault(regs*, void*)>:
c0014512:	55                   	push   ebp
c0014513:	89 e5                	mov    ebp,esp
c0014515:	83 ec 08             	sub    esp,0x8
c0014518:	83 ec 0c             	sub    esp,0xc
c001451b:	68 75 b4 02 c0       	push   0xc002b475
c0014520:	e8 78 5e 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0014525:	83 c4 10             	add    esp,0x10
c0014528:	90                   	nop
c0014529:	c9                   	leave  
c001452a:	c3                   	ret    
c001452b:	90                   	nop

c001452c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001452c:	56                   	push   esi
c001452d:	53                   	push   ebx
c001452e:	50                   	push   eax
c001452f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014533:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014537:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001453c:	75 35                	jne    c0014573 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001453e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014541:	31 d2                	xor    edx,edx
c0014543:	89 c1                	mov    ecx,eax
c0014545:	c1 e1 04             	shl    ecx,0x4
c0014548:	01 f1                	add    ecx,esi
c001454a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014552:	74 3e                	je     c0014592 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014554:	42                   	inc    edx
c0014555:	83 fa 04             	cmp    edx,0x4
c0014558:	75 f0                	jne    c001454a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	68 8f b4 02 c0       	push   0xc002b48f
c0014562:	e8 36 5e 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0014567:	83 c4 10             	add    esp,0x10
c001456a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001456f:	5a                   	pop    edx
c0014570:	5b                   	pop    ebx
c0014571:	5e                   	pop    esi
c0014572:	c3                   	ret    
c0014573:	83 ec 0c             	sub    esp,0xc
c0014576:	56                   	push   esi
c0014577:	e8 bc fb ff ff       	call   c0014138 <Device::getName()>
c001457c:	83 c4 10             	add    esp,0x10
c001457f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014582:	75 ba                	jne    c001453e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014584:	83 fb 0f             	cmp    ebx,0xf
c0014587:	7f 29                	jg     c00145b2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014589:	0f b6 9b c0 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2740]
c0014590:	eb ac                	jmp    c001453e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014592:	8d 04 82             	lea    eax,[edx+eax*4]
c0014595:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014599:	8d 04 86             	lea    eax,[esi+eax*4]
c001459c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00145a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145a6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00145ac:	89 d8                	mov    eax,ebx
c00145ae:	5a                   	pop    edx
c00145af:	5b                   	pop    ebx
c00145b0:	5e                   	pop    esi
c00145b1:	c3                   	ret    
c00145b2:	83 ec 0c             	sub    esp,0xc
c00145b5:	68 82 b4 02 c0       	push   0xc002b482
c00145ba:	e8 de 5d 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00145bf:	83 c4 10             	add    esp,0x10
c00145c2:	e9 77 ff ff ff       	jmp    c001453e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00145c7:	90                   	nop

c00145c8 <InterruptController::clearAllHandlers(int, bool)>:
c00145c8:	56                   	push   esi
c00145c9:	53                   	push   ebx
c00145ca:	52                   	push   edx
c00145cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145d3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00145d8:	75 61                	jne    c001463b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00145da:	8d 46 20             	lea    eax,[esi+0x20]
c00145dd:	c1 e6 04             	shl    esi,0x4
c00145e0:	c1 e0 04             	shl    eax,0x4
c00145e3:	01 de                	add    esi,ebx
c00145e5:	01 d8                	add    eax,ebx
c00145e7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00145f1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00145fb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014605:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001460f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014619:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014623:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001462d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014637:	58                   	pop    eax
c0014638:	5b                   	pop    ebx
c0014639:	5e                   	pop    esi
c001463a:	c3                   	ret    
c001463b:	83 ec 0c             	sub    esp,0xc
c001463e:	53                   	push   ebx
c001463f:	e8 f4 fa ff ff       	call   c0014138 <Device::getName()>
c0014644:	83 c4 10             	add    esp,0x10
c0014647:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001464a:	75 8e                	jne    c00145da <InterruptController::clearAllHandlers(int, bool)+0x12>
c001464c:	83 fe 0f             	cmp    esi,0xf
c001464f:	7f 09                	jg     c001465a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014651:	0f b6 b6 c0 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2740]
c0014658:	eb 80                	jmp    c00145da <InterruptController::clearAllHandlers(int, bool)+0x12>
c001465a:	83 ec 0c             	sub    esp,0xc
c001465d:	68 9c b4 02 c0       	push   0xc002b49c
c0014662:	e8 36 5d 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0014667:	83 c4 10             	add    esp,0x10
c001466a:	e9 6b ff ff ff       	jmp    c00145da <InterruptController::clearAllHandlers(int, bool)+0x12>
c001466f:	90                   	nop

c0014670 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014670:	56                   	push   esi
c0014671:	53                   	push   ebx
c0014672:	52                   	push   edx
c0014673:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014677:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001467b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014680:	75 3a                	jne    c00146bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014682:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014686:	8d 50 20             	lea    edx,[eax+0x20]
c0014689:	c1 e2 04             	shl    edx,0x4
c001468c:	8d 04 16             	lea    eax,[esi+edx*1]
c001468f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014693:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014699:	74 0b                	je     c00146a6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001469b:	83 c0 04             	add    eax,0x4
c001469e:	39 d0                	cmp    eax,edx
c00146a0:	75 f1                	jne    c0014693 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00146a2:	58                   	pop    eax
c00146a3:	5b                   	pop    ebx
c00146a4:	5e                   	pop    esi
c00146a5:	c3                   	ret    
c00146a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146b0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00146ba:	eb df                	jmp    c001469b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	56                   	push   esi
c00146c0:	e8 73 fa ff ff       	call   c0014138 <Device::getName()>
c00146c5:	83 c4 10             	add    esp,0x10
c00146c8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146cb:	75 b5                	jne    c0014682 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146cd:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00146d2:	7f 11                	jg     c00146e5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00146d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146d8:	0f b6 80 c0 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2740]
c00146df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146e3:	eb 9d                	jmp    c0014682 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146e5:	83 ec 0c             	sub    esp,0xc
c00146e8:	68 a9 b4 02 c0       	push   0xc002b4a9
c00146ed:	e8 ab 5c 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	eb 8b                	jmp    c0014682 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00146f7 <nmiHandler(regs*, void*)>:
c00146f7:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00146fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014700:	e9 c7 a8 ff ff       	jmp    c000efcc <Computer::handleNMI()>

c0014705 <int_handler>:
c0014705:	55                   	push   ebp
c0014706:	57                   	push   edi
c0014707:	56                   	push   esi
c0014708:	53                   	push   ebx
c0014709:	83 ec 0c             	sub    esp,0xc
c001470c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014710:	80 3d 84 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f184,0x0
c0014717:	74 0b                	je     c0014724 <int_handler+0x1f>
c0014719:	fa                   	cli    
c001471a:	f4                   	hlt    
c001471b:	80 3d 84 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f184,0x0
c0014722:	75 f5                	jne    c0014719 <int_handler+0x14>
c0014724:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014729:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001472c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014732:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014738:	8d 43 e0             	lea    eax,[ebx-0x20]
c001473b:	83 f8 17             	cmp    eax,0x17
c001473e:	77 13                	ja     c0014753 <int_handler+0x4e>
c0014740:	83 ec 08             	sub    esp,0x8
c0014743:	8b 17                	mov    edx,DWORD PTR [edi]
c0014745:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014748:	0f b6 c0             	movzx  eax,al
c001474b:	50                   	push   eax
c001474c:	57                   	push   edi
c001474d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014750:	83 c4 10             	add    esp,0x10
c0014753:	83 c3 15             	add    ebx,0x15
c0014756:	c1 e3 04             	shl    ebx,0x4
c0014759:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001475d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014764:	31 db                	xor    ebx,ebx
c0014766:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001476a:	85 c0                	test   eax,eax
c001476c:	74 13                	je     c0014781 <int_handler+0x7c>
c001476e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014771:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014775:	74 1c                	je     c0014793 <int_handler+0x8e>
c0014777:	83 ec 08             	sub    esp,0x8
c001477a:	52                   	push   edx
c001477b:	56                   	push   esi
c001477c:	ff d0                	call   eax
c001477e:	83 c4 10             	add    esp,0x10
c0014781:	43                   	inc    ebx
c0014782:	83 fb 04             	cmp    ebx,0x4
c0014785:	75 df                	jne    c0014766 <int_handler+0x61>
c0014787:	83 c4 0c             	add    esp,0xc
c001478a:	31 c0                	xor    eax,eax
c001478c:	5b                   	pop    ebx
c001478d:	31 d2                	xor    edx,edx
c001478f:	5e                   	pop    esi
c0014790:	5f                   	pop    edi
c0014791:	5d                   	pop    ebp
c0014792:	c3                   	ret    
c0014793:	83 ec 08             	sub    esp,0x8
c0014796:	52                   	push   edx
c0014797:	56                   	push   esi
c0014798:	ff d0                	call   eax
c001479a:	83 c4 10             	add    esp,0x10
c001479d:	83 c4 0c             	add    esp,0xc
c00147a0:	5b                   	pop    ebx
c00147a1:	5e                   	pop    esi
c00147a2:	5f                   	pop    edi
c00147a3:	5d                   	pop    ebp
c00147a4:	c3                   	ret    
c00147a5:	90                   	nop

c00147a6 <InterruptController::InterruptController(char const*)>:
c00147a6:	83 ec 1c             	sub    esp,0x1c
c00147a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147ad:	83 ec 08             	sub    esp,0x8
c00147b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147b4:	50                   	push   eax
c00147b5:	e8 82 f8 ff ff       	call   c001403c <Device::Device(char const*)>
c00147ba:	83 c4 10             	add    esp,0x10
c00147bd:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c00147c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147c6:	89 10                	mov    DWORD PTR [eax],edx
c00147c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147cc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00147d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147de:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00147e6:	7f 5e                	jg     c0014846 <InterruptController::InterruptController(char const*)+0xa0>
c00147e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147f0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00147f5:	7f 49                	jg     c0014840 <InterruptController::InterruptController(char const*)+0x9a>
c00147f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014806:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001480a:	01 ca                	add    edx,ecx
c001480c:	83 c2 54             	add    edx,0x54
c001480f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001481b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001481f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014826:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001482a:	01 ca                	add    edx,ecx
c001482c:	81 c2 54 04 00 00    	add    edx,0x454
c0014832:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001483a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001483e:	eb b0                	jmp    c00147f0 <InterruptController::InterruptController(char const*)+0x4a>
c0014840:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014844:	eb 98                	jmp    c00147de <InterruptController::InterruptController(char const*)+0x38>
c0014846:	90                   	nop
c0014847:	83 c4 1c             	add    esp,0x1c
c001484a:	c3                   	ret    
c001484b:	90                   	nop

c001484c <InterruptController::~InterruptController()>:
c001484c:	83 ec 0c             	sub    esp,0xc
c001484f:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c0014854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014858:	89 10                	mov    DWORD PTR [eax],edx
c001485a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485e:	83 ec 0c             	sub    esp,0xc
c0014861:	50                   	push   eax
c0014862:	e8 9f f4 ff ff       	call   c0013d06 <Device::~Device()>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	90                   	nop
c001486b:	83 c4 0c             	add    esp,0xc
c001486e:	c3                   	ret    
c001486f:	90                   	nop

c0014870 <InterruptController::~InterruptController()>:
c0014870:	83 ec 0c             	sub    esp,0xc
c0014873:	83 ec 0c             	sub    esp,0xc
c0014876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487a:	e8 cd ff ff ff       	call   c001484c <InterruptController::~InterruptController()>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	83 ec 08             	sub    esp,0x8
c0014885:	68 58 21 00 00       	push   0x2158
c001488a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488e:	e8 94 e0 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	83 c4 0c             	add    esp,0xc
c0014899:	c3                   	ret    

c001489a <displayDebugInfo(regs*)>:
c001489a:	55                   	push   ebp
c001489b:	57                   	push   edi
c001489c:	56                   	push   esi
c001489d:	53                   	push   ebx
c001489e:	83 ec 24             	sub    esp,0x24
c00148a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00148a5:	0f 20 c2             	mov    edx,cr0
c00148a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00148ac:	0f 20 d7             	mov    edi,cr2
c00148af:	0f 20 de             	mov    esi,cr3
c00148b2:	0f 20 e5             	mov    ebp,cr4
c00148b5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00148b8:	68 b6 b4 02 c0       	push   0xc002b4b6
c00148bd:	e8 3d e1 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00148c2:	59                   	pop    ecx
c00148c3:	58                   	pop    eax
c00148c4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148c7:	68 c1 b4 02 c0       	push   0xc002b4c1
c00148cc:	e8 2e e1 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00148d1:	58                   	pop    eax
c00148d2:	5a                   	pop    edx
c00148d3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00148d6:	68 cc b4 02 c0       	push   0xc002b4cc
c00148db:	e8 1f e1 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00148e0:	59                   	pop    ecx
c00148e1:	58                   	pop    eax
c00148e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148e5:	68 d7 b4 02 c0       	push   0xc002b4d7
c00148ea:	e8 10 e1 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00148ef:	58                   	pop    eax
c00148f0:	5a                   	pop    edx
c00148f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00148f4:	68 e2 b4 02 c0       	push   0xc002b4e2
c00148f9:	e8 01 e1 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00148fe:	59                   	pop    ecx
c00148ff:	58                   	pop    eax
c0014900:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014903:	68 ed b4 02 c0       	push   0xc002b4ed
c0014908:	e8 f2 e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001490d:	58                   	pop    eax
c001490e:	5a                   	pop    edx
c001490f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014912:	68 f8 b4 02 c0       	push   0xc002b4f8
c0014917:	e8 e3 e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001491c:	59                   	pop    ecx
c001491d:	58                   	pop    eax
c001491e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014921:	68 03 b5 02 c0       	push   0xc002b503
c0014926:	e8 d4 e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001492b:	58                   	pop    eax
c001492c:	5a                   	pop    edx
c001492d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014930:	68 0e b5 02 c0       	push   0xc002b50e
c0014935:	e8 c5 e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001493a:	59                   	pop    ecx
c001493b:	58                   	pop    eax
c001493c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001493f:	68 1d b5 02 c0       	push   0xc002b51d
c0014944:	e8 b6 e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014949:	58                   	pop    eax
c001494a:	5a                   	pop    edx
c001494b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001494e:	68 28 b5 02 c0       	push   0xc002b528
c0014953:	e8 a7 e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014958:	59                   	pop    ecx
c0014959:	58                   	pop    eax
c001495a:	57                   	push   edi
c001495b:	68 33 b5 02 c0       	push   0xc002b533
c0014960:	e8 9a e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014965:	58                   	pop    eax
c0014966:	5a                   	pop    edx
c0014967:	56                   	push   esi
c0014968:	68 3e b5 02 c0       	push   0xc002b53e
c001496d:	e8 8d e0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014972:	59                   	pop    ecx
c0014973:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014978:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497e:	e8 de bd ff ff       	call   c0010761 <setActiveTerminal(VgaText*)>
c0014983:	58                   	pop    eax
c0014984:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014987:	5a                   	pop    edx
c0014988:	c1 e0 05             	shl    eax,0x5
c001498b:	05 20 d6 02 c0       	add    eax,0xc002d620
c0014990:	50                   	push   eax
c0014991:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014996:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499c:	e8 cd c2 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00149a1:	59                   	pop    ecx
c00149a2:	58                   	pop    eax
c00149a3:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149a8:	68 49 b5 02 c0       	push   0xc002b549
c00149ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b3:	e8 b6 c2 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00149b8:	58                   	pop    eax
c00149b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149be:	5a                   	pop    edx
c00149bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149c2:	83 c0 0c             	add    eax,0xc
c00149c5:	50                   	push   eax
c00149c6:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d1:	e8 98 c2 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00149d6:	59                   	pop    ecx
c00149d7:	58                   	pop    eax
c00149d8:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149dd:	68 52 b5 02 c0       	push   0xc002b552
c00149e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e8:	e8 81 c2 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00149ed:	58                   	pop    eax
c00149ee:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149f3:	5a                   	pop    edx
c00149f4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fd:	e8 26 c2 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014a02:	59                   	pop    ecx
c0014a03:	58                   	pop    eax
c0014a04:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a09:	68 5a b5 02 c0       	push   0xc002b55a
c0014a0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a14:	e8 55 c2 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014a19:	58                   	pop    eax
c0014a1a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a1f:	5a                   	pop    edx
c0014a20:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a29:	e8 fa c1 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014a2e:	59                   	pop    ecx
c0014a2f:	58                   	pop    eax
c0014a30:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a35:	68 62 b5 02 c0       	push   0xc002b562
c0014a3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a40:	e8 29 c2 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014a45:	58                   	pop    eax
c0014a46:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a4b:	5a                   	pop    edx
c0014a4c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a55:	e8 ce c1 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014a5a:	59                   	pop    ecx
c0014a5b:	58                   	pop    eax
c0014a5c:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a61:	68 6a b5 02 c0       	push   0xc002b56a
c0014a66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6c:	e8 fd c1 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014a71:	58                   	pop    eax
c0014a72:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a77:	5a                   	pop    edx
c0014a78:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014a7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a81:	e8 a2 c1 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014a86:	59                   	pop    ecx
c0014a87:	58                   	pop    eax
c0014a88:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a8d:	68 72 b5 02 c0       	push   0xc002b572
c0014a92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a98:	e8 d1 c1 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014a9d:	58                   	pop    eax
c0014a9e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014aa3:	5a                   	pop    edx
c0014aa4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014aa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aad:	e8 76 c1 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014ab2:	59                   	pop    ecx
c0014ab3:	58                   	pop    eax
c0014ab4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014ab9:	68 7a b5 02 c0       	push   0xc002b57a
c0014abe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac4:	e8 a5 c1 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014ac9:	58                   	pop    eax
c0014aca:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014acf:	5a                   	pop    edx
c0014ad0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ad3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad9:	e8 4a c1 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014ade:	59                   	pop    ecx
c0014adf:	58                   	pop    eax
c0014ae0:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014ae5:	68 82 b5 02 c0       	push   0xc002b582
c0014aea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af0:	e8 79 c1 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014af5:	58                   	pop    eax
c0014af6:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014afb:	5a                   	pop    edx
c0014afc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b00:	52                   	push   edx
c0014b01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b07:	e8 1c c1 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014b0c:	59                   	pop    ecx
c0014b0d:	58                   	pop    eax
c0014b0e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b13:	68 8b b5 02 c0       	push   0xc002b58b
c0014b18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1e:	e8 4b c1 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014b23:	58                   	pop    eax
c0014b24:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b29:	5a                   	pop    edx
c0014b2a:	57                   	push   edi
c0014b2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b31:	e8 f2 c0 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014b36:	59                   	pop    ecx
c0014b37:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b3c:	5f                   	pop    edi
c0014b3d:	68 93 b5 02 c0       	push   0xc002b593
c0014b42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b48:	e8 21 c1 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014b4d:	58                   	pop    eax
c0014b4e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b53:	5a                   	pop    edx
c0014b54:	56                   	push   esi
c0014b55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5b:	e8 c8 c0 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014b60:	59                   	pop    ecx
c0014b61:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b66:	5e                   	pop    esi
c0014b67:	68 9b b5 02 c0       	push   0xc002b59b
c0014b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b72:	e8 f7 c0 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014b77:	5f                   	pop    edi
c0014b78:	58                   	pop    eax
c0014b79:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b7e:	55                   	push   ebp
c0014b7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b85:	e8 9e c0 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014b8a:	58                   	pop    eax
c0014b8b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b90:	5a                   	pop    edx
c0014b91:	68 a3 b5 02 c0       	push   0xc002b5a3
c0014b96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9c:	e8 cd c0 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014ba1:	0f 21 c0             	mov    eax,db0
c0014ba4:	59                   	pop    ecx
c0014ba5:	5e                   	pop    esi
c0014ba6:	50                   	push   eax
c0014ba7:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb2:	e8 71 c0 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014bb7:	5f                   	pop    edi
c0014bb8:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bbd:	5d                   	pop    ebp
c0014bbe:	68 ac b5 02 c0       	push   0xc002b5ac
c0014bc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc9:	e8 a0 c0 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014bce:	0f 21 c8             	mov    eax,db1
c0014bd1:	5a                   	pop    edx
c0014bd2:	59                   	pop    ecx
c0014bd3:	50                   	push   eax
c0014bd4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bdf:	e8 44 c0 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014be4:	5e                   	pop    esi
c0014be5:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bea:	5f                   	pop    edi
c0014beb:	68 b4 b5 02 c0       	push   0xc002b5b4
c0014bf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf6:	e8 73 c0 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014bfb:	0f 21 d0             	mov    eax,db2
c0014bfe:	5d                   	pop    ebp
c0014bff:	5a                   	pop    edx
c0014c00:	50                   	push   eax
c0014c01:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c0c:	e8 17 c0 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014c11:	59                   	pop    ecx
c0014c12:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c17:	5e                   	pop    esi
c0014c18:	68 bc b5 02 c0       	push   0xc002b5bc
c0014c1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c23:	e8 46 c0 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014c28:	0f 21 d8             	mov    eax,db3
c0014c2b:	5f                   	pop    edi
c0014c2c:	5d                   	pop    ebp
c0014c2d:	50                   	push   eax
c0014c2e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c39:	e8 ea bf ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014c3e:	58                   	pop    eax
c0014c3f:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c44:	5a                   	pop    edx
c0014c45:	68 c4 b5 02 c0       	push   0xc002b5c4
c0014c4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c50:	e8 19 c0 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014c55:	0f 21 f0             	mov    eax,db6
c0014c58:	59                   	pop    ecx
c0014c59:	5e                   	pop    esi
c0014c5a:	50                   	push   eax
c0014c5b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c66:	e8 bd bf ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014c6b:	5f                   	pop    edi
c0014c6c:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c71:	5d                   	pop    ebp
c0014c72:	68 cc b5 02 c0       	push   0xc002b5cc
c0014c77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c7d:	e8 ec bf ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014c82:	0f 21 f8             	mov    eax,db7
c0014c85:	5a                   	pop    edx
c0014c86:	59                   	pop    ecx
c0014c87:	50                   	push   eax
c0014c88:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c93:	e8 90 bf ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014c98:	5e                   	pop    esi
c0014c99:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c9c:	e8 78 88 00 00       	call   c001d519 <Thr::getDriverNameFromAddress(unsigned long)>
c0014ca1:	83 c4 10             	add    esp,0x10
c0014ca4:	85 c0                	test   eax,eax
c0014ca6:	74 7d                	je     c0014d25 <displayDebugInfo(regs*)+0x48b>
c0014ca8:	89 c6                	mov    esi,eax
c0014caa:	50                   	push   eax
c0014cab:	50                   	push   eax
c0014cac:	56                   	push   esi
c0014cad:	68 d4 b5 02 c0       	push   0xc002b5d4
c0014cb2:	e8 48 dd ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014cb7:	5a                   	pop    edx
c0014cb8:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014cbd:	59                   	pop    ecx
c0014cbe:	68 e2 b5 02 c0       	push   0xc002b5e2
c0014cc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc9:	e8 a0 bf ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014cce:	5f                   	pop    edi
c0014ccf:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014cd4:	5d                   	pop    ebp
c0014cd5:	56                   	push   esi
c0014cd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cdc:	e8 8d bf ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014ce1:	58                   	pop    eax
c0014ce2:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014ce7:	5a                   	pop    edx
c0014ce8:	68 ee b5 02 c0       	push   0xc002b5ee
c0014ced:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf3:	e8 76 bf ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014cf8:	59                   	pop    ecx
c0014cf9:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014cfe:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014d04:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d07:	e8 44 88 00 00       	call   c001d550 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014d0c:	5b                   	pop    ebx
c0014d0d:	5d                   	pop    ebp
c0014d0e:	50                   	push   eax
c0014d0f:	57                   	push   edi
c0014d10:	e8 13 bf ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c0014d15:	58                   	pop    eax
c0014d16:	5a                   	pop    edx
c0014d17:	56                   	push   esi
c0014d18:	68 fa b5 02 c0       	push   0xc002b5fa
c0014d1d:	e8 dd dc ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014d22:	83 c4 10             	add    esp,0x10
c0014d25:	fa                   	cli    
c0014d26:	f4                   	hlt    
c0014d27:	eb fe                	jmp    c0014d27 <displayDebugInfo(regs*)+0x48d>

c0014d29 <x87EmulHandler(regs*, void*)>:
c0014d29:	83 ec 0c             	sub    esp,0xc
c0014d2c:	0f 20 c2             	mov    edx,cr0
c0014d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d34:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014d38:	75 4b                	jne    c0014d85 <x87EmulHandler(regs*, void*)+0x5c>
c0014d3a:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014d3f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014d45:	85 c0                	test   eax,eax
c0014d47:	74 05                	je     c0014d4e <x87EmulHandler(regs*, void*)+0x25>
c0014d49:	83 e2 08             	and    edx,0x8
c0014d4c:	75 17                	jne    c0014d65 <x87EmulHandler(regs*, void*)+0x3c>
c0014d4e:	83 ec 0c             	sub    esp,0xc
c0014d51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d55:	e8 a5 ab 00 00       	call   c001f8ff <Vm::x87Handler(regs*)>
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	84 c0                	test   al,al
c0014d5f:	74 24                	je     c0014d85 <x87EmulHandler(regs*, void*)+0x5c>
c0014d61:	83 c4 0c             	add    esp,0xc
c0014d64:	c3                   	ret    
c0014d65:	83 ec 0c             	sub    esp,0xc
c0014d68:	68 20 b6 02 c0       	push   0xc002b620
c0014d6d:	e8 8d dc ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014d72:	0f 06                	clts   
c0014d74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d79:	83 c4 10             	add    esp,0x10
c0014d7c:	a3 e8 e7 02 c0       	mov    ds:0xc002e7e8,eax
c0014d81:	83 c4 0c             	add    esp,0xc
c0014d84:	c3                   	ret    
c0014d85:	83 ec 0c             	sub    esp,0xc
c0014d88:	68 0a b6 02 c0       	push   0xc002b60a
c0014d8d:	e8 6d dc ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014d92:	5a                   	pop    edx
c0014d93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d97:	e8 fe fa ff ff       	call   c001489a <displayDebugInfo(regs*)>

c0014d9c <gpFault(regs*, void*)>:
c0014d9c:	53                   	push   ebx
c0014d9d:	83 ec 14             	sub    esp,0x14
c0014da0:	c7 05 e4 e7 02 c0 d8 ed 01 c0 	mov    DWORD PTR ds:0xc002e7e4,0xc001edd8
c0014daa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014dae:	53                   	push   ebx
c0014daf:	e8 24 a0 00 00       	call   c001edd8 <Vm::faultHandler(regs*)>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	84 c0                	test   al,al
c0014db9:	74 05                	je     c0014dc0 <gpFault(regs*, void*)+0x24>
c0014dbb:	83 c4 08             	add    esp,0x8
c0014dbe:	5b                   	pop    ebx
c0014dbf:	c3                   	ret    
c0014dc0:	83 ec 0c             	sub    esp,0xc
c0014dc3:	68 2d b6 02 c0       	push   0xc002b62d
c0014dc8:	e8 32 dc ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014dcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dd0:	e8 c5 fa ff ff       	call   c001489a <displayDebugInfo(regs*)>

c0014dd5 <pgFault(regs*, void*)>:
c0014dd5:	53                   	push   ebx
c0014dd6:	83 ec 10             	sub    esp,0x10
c0014dd9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ddd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014de0:	68 48 b6 02 c0       	push   0xc002b648
c0014de5:	e8 15 dc ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014dea:	0f 20 d0             	mov    eax,cr2
c0014ded:	5a                   	pop    edx
c0014dee:	59                   	pop    ecx
c0014def:	50                   	push   eax
c0014df0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014df5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014df8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014dfe:	e8 03 d7 ff ff       	call   c0012506 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014e03:	83 c4 10             	add    esp,0x10
c0014e06:	84 c0                	test   al,al
c0014e08:	74 05                	je     c0014e0f <pgFault(regs*, void*)+0x3a>
c0014e0a:	83 c4 08             	add    esp,0x8
c0014e0d:	5b                   	pop    ebx
c0014e0e:	c3                   	ret    
c0014e0f:	83 ec 0c             	sub    esp,0xc
c0014e12:	68 5d b6 02 c0       	push   0xc002b65d
c0014e17:	e8 e3 db ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014e1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e1f:	e8 76 fa ff ff       	call   c001489a <displayDebugInfo(regs*)>

c0014e24 <otherISRHandler(regs*, void*)>:
c0014e24:	53                   	push   ebx
c0014e25:	83 ec 0c             	sub    esp,0xc
c0014e28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e2c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e2f:	50                   	push   eax
c0014e30:	50                   	push   eax
c0014e31:	68 6a b6 02 c0       	push   0xc002b66a
c0014e36:	e8 c4 db ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014e3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e3e:	e8 57 fa ff ff       	call   c001489a <displayDebugInfo(regs*)>

c0014e43 <opcodeFault(regs*, void*)>:
c0014e43:	55                   	push   ebp
c0014e44:	89 e5                	mov    ebp,esp
c0014e46:	56                   	push   esi
c0014e47:	53                   	push   ebx
c0014e48:	83 ec 40             	sub    esp,0x40
c0014e4b:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014e50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e56:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014e5c:	84 c0                	test   al,al
c0014e5e:	74 24                	je     c0014e84 <opcodeFault(regs*, void*)+0x41>
c0014e60:	83 ec 0c             	sub    esp,0xc
c0014e63:	68 88 b6 02 c0       	push   0xc002b688
c0014e68:	e8 92 db ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e76:	8d 50 19             	lea    edx,[eax+0x19]
c0014e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7f:	e9 d5 05 00 00       	jmp    c0015459 <opcodeFault(regs*, void*)+0x616>
c0014e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e87:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e8a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014e8d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014e91:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014e9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea3:	3c f0                	cmp    al,0xf0
c0014ea5:	75 17                	jne    c0014ebe <opcodeFault(regs*, void*)+0x7b>
c0014ea7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ead:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eb0:	8d 50 01             	lea    edx,[eax+0x1]
c0014eb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eb9:	e9 da 00 00 00       	jmp    c0014f98 <opcodeFault(regs*, void*)+0x155>
c0014ebe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec3:	3c f2                	cmp    al,0xf2
c0014ec5:	74 09                	je     c0014ed0 <opcodeFault(regs*, void*)+0x8d>
c0014ec7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eca:	8a 00                	mov    al,BYTE PTR [eax]
c0014ecc:	3c f3                	cmp    al,0xf3
c0014ece:	75 1b                	jne    c0014eeb <opcodeFault(regs*, void*)+0xa8>
c0014ed0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ed4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014edd:	8d 50 01             	lea    edx,[eax+0x1]
c0014ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ee6:	e9 ad 00 00 00       	jmp    c0014f98 <opcodeFault(regs*, void*)+0x155>
c0014eeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eee:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef0:	3c 66                	cmp    al,0x66
c0014ef2:	75 1f                	jne    c0014f13 <opcodeFault(regs*, void*)+0xd0>
c0014ef4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ef8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014efc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f05:	8d 50 01             	lea    edx,[eax+0x1]
c0014f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f0e:	e9 85 00 00 00       	jmp    c0014f98 <opcodeFault(regs*, void*)+0x155>
c0014f13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f16:	8a 00                	mov    al,BYTE PTR [eax]
c0014f18:	3c 67                	cmp    al,0x67
c0014f1a:	75 18                	jne    c0014f34 <opcodeFault(regs*, void*)+0xf1>
c0014f1c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f29:	8d 50 01             	lea    edx,[eax+0x1]
c0014f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f32:	eb 64                	jmp    c0014f98 <opcodeFault(regs*, void*)+0x155>
c0014f34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f37:	8a 00                	mov    al,BYTE PTR [eax]
c0014f39:	3c 2e                	cmp    al,0x2e
c0014f3b:	74 09                	je     c0014f46 <opcodeFault(regs*, void*)+0x103>
c0014f3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f40:	8a 00                	mov    al,BYTE PTR [eax]
c0014f42:	3c 3e                	cmp    al,0x3e
c0014f44:	75 18                	jne    c0014f5e <opcodeFault(regs*, void*)+0x11b>
c0014f46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f4a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f53:	8d 50 01             	lea    edx,[eax+0x1]
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5c:	eb 3a                	jmp    c0014f98 <opcodeFault(regs*, void*)+0x155>
c0014f5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f61:	8a 00                	mov    al,BYTE PTR [eax]
c0014f63:	3c 36                	cmp    al,0x36
c0014f65:	74 1b                	je     c0014f82 <opcodeFault(regs*, void*)+0x13f>
c0014f67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f6c:	3c 26                	cmp    al,0x26
c0014f6e:	74 12                	je     c0014f82 <opcodeFault(regs*, void*)+0x13f>
c0014f70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f73:	8a 00                	mov    al,BYTE PTR [eax]
c0014f75:	3c 64                	cmp    al,0x64
c0014f77:	74 09                	je     c0014f82 <opcodeFault(regs*, void*)+0x13f>
c0014f79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f7e:	3c 65                	cmp    al,0x65
c0014f80:	75 16                	jne    c0014f98 <opcodeFault(regs*, void*)+0x155>
c0014f82:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f86:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f8f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f95:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9d:	3c 0f                	cmp    al,0xf
c0014f9f:	0f 85 ad 00 00 00    	jne    c0015052 <opcodeFault(regs*, void*)+0x20f>
c0014fa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa8:	40                   	inc    eax
c0014fa9:	8a 00                	mov    al,BYTE PTR [eax]
c0014fab:	3c c2                	cmp    al,0xc2
c0014fad:	74 0e                	je     c0014fbd <opcodeFault(regs*, void*)+0x17a>
c0014faf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb2:	40                   	inc    eax
c0014fb3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb5:	3c c3                	cmp    al,0xc3
c0014fb7:	0f 85 95 00 00 00    	jne    c0015052 <opcodeFault(regs*, void*)+0x20f>
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	68 ab b6 02 c0       	push   0xc002b6ab
c0014fc5:	e8 35 da ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fdc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe2:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe4:	8d 50 fe             	lea    edx,[eax-0x2]
c0014fe7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fea:	88 10                	mov    BYTE PTR [eax],dl
c0014fec:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014fef:	50                   	push   eax
c0014ff0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ff3:	50                   	push   eax
c0014ff4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ff7:	50                   	push   eax
c0014ff8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ffb:	e8 b6 4a 00 00       	call   c0019ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015000:	83 c4 10             	add    esp,0x10
c0015003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015006:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015009:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001500c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001500f:	01 d0                	add    eax,edx
c0015011:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015017:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001501a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001501d:	48                   	dec    eax
c001501e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015024:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015027:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	83 ec 04             	sub    esp,0x4
c0015030:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015033:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015036:	50                   	push   eax
c0015037:	e8 78 b1 fe ff       	call   c00001b4 <voodooXADD>
c001503c:	83 c4 10             	add    esp,0x10
c001503f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015042:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015045:	01 c2                	add    edx,eax
c0015047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001504d:	e9 07 04 00 00       	jmp    c0015459 <opcodeFault(regs*, void*)+0x616>
c0015052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015055:	8a 00                	mov    al,BYTE PTR [eax]
c0015057:	3c 0f                	cmp    al,0xf
c0015059:	0f 85 8b 01 00 00    	jne    c00151ea <opcodeFault(regs*, void*)+0x3a7>
c001505f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015062:	40                   	inc    eax
c0015063:	8a 00                	mov    al,BYTE PTR [eax]
c0015065:	3c c7                	cmp    al,0xc7
c0015067:	0f 86 7d 01 00 00    	jbe    c00151ea <opcodeFault(regs*, void*)+0x3a7>
c001506d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015070:	40                   	inc    eax
c0015071:	8a 00                	mov    al,BYTE PTR [eax]
c0015073:	3c cf                	cmp    al,0xcf
c0015075:	0f 87 6f 01 00 00    	ja     c00151ea <opcodeFault(regs*, void*)+0x3a7>
c001507b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507e:	40                   	inc    eax
c001507f:	8a 00                	mov    al,BYTE PTR [eax]
c0015081:	83 c0 38             	add    eax,0x38
c0015084:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015087:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001508b:	75 0b                	jne    c0015098 <opcodeFault(regs*, void*)+0x255>
c001508d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015090:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015093:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015096:	eb 75                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c0015098:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001509c:	75 0b                	jne    c00150a9 <opcodeFault(regs*, void*)+0x266>
c001509e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150a7:	eb 64                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c00150a9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00150ad:	75 0b                	jne    c00150ba <opcodeFault(regs*, void*)+0x277>
c00150af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150b8:	eb 53                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c00150ba:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00150be:	75 0b                	jne    c00150cb <opcodeFault(regs*, void*)+0x288>
c00150c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150c9:	eb 42                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c00150cb:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00150cf:	75 0b                	jne    c00150dc <opcodeFault(regs*, void*)+0x299>
c00150d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00150d7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150da:	eb 31                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c00150dc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00150e0:	75 0b                	jne    c00150ed <opcodeFault(regs*, void*)+0x2aa>
c00150e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00150e8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150eb:	eb 20                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c00150ed:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00150f1:	75 0b                	jne    c00150fe <opcodeFault(regs*, void*)+0x2bb>
c00150f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150fc:	eb 0f                	jmp    c001510d <opcodeFault(regs*, void*)+0x2ca>
c00150fe:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015102:	75 09                	jne    c001510d <opcodeFault(regs*, void*)+0x2ca>
c0015104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015107:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001510a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001510d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015111:	74 10                	je     c0015123 <opcodeFault(regs*, void*)+0x2e0>
c0015113:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001511a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015121:	eb 2d                	jmp    c0015150 <opcodeFault(regs*, void*)+0x30d>
c0015123:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015126:	c1 e0 18             	shl    eax,0x18
c0015129:	89 c2                	mov    edx,eax
c001512b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001512e:	c1 e0 08             	shl    eax,0x8
c0015131:	25 00 00 ff 00       	and    eax,0xff0000
c0015136:	09 c2                	or     edx,eax
c0015138:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001513b:	c1 e8 08             	shr    eax,0x8
c001513e:	25 00 ff 00 00       	and    eax,0xff00
c0015143:	09 c2                	or     edx,eax
c0015145:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015148:	c1 e8 18             	shr    eax,0x18
c001514b:	09 d0                	or     eax,edx
c001514d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015150:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015154:	75 0b                	jne    c0015161 <opcodeFault(regs*, void*)+0x31e>
c0015156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015159:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001515c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001515f:	eb 75                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c0015161:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015165:	75 0b                	jne    c0015172 <opcodeFault(regs*, void*)+0x32f>
c0015167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001516d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015170:	eb 64                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c0015172:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015176:	75 0b                	jne    c0015183 <opcodeFault(regs*, void*)+0x340>
c0015178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001517e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015181:	eb 53                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c0015183:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015187:	75 0b                	jne    c0015194 <opcodeFault(regs*, void*)+0x351>
c0015189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001518f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015192:	eb 42                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c0015194:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015198:	75 0b                	jne    c00151a5 <opcodeFault(regs*, void*)+0x362>
c001519a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151a0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00151a3:	eb 31                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c00151a5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151a9:	75 0b                	jne    c00151b6 <opcodeFault(regs*, void*)+0x373>
c00151ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151b4:	eb 20                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c00151b6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151ba:	75 0b                	jne    c00151c7 <opcodeFault(regs*, void*)+0x384>
c00151bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151c2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00151c5:	eb 0f                	jmp    c00151d6 <opcodeFault(regs*, void*)+0x393>
c00151c7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00151cb:	75 09                	jne    c00151d6 <opcodeFault(regs*, void*)+0x393>
c00151cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00151d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151dc:	8d 50 02             	lea    edx,[eax+0x2]
c00151df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151e5:	e9 6f 02 00 00       	jmp    c0015459 <opcodeFault(regs*, void*)+0x616>
c00151ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ed:	8a 00                	mov    al,BYTE PTR [eax]
c00151ef:	3c 0f                	cmp    al,0xf
c00151f1:	0f 85 8d 01 00 00    	jne    c0015384 <opcodeFault(regs*, void*)+0x541>
c00151f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151fa:	40                   	inc    eax
c00151fb:	8a 00                	mov    al,BYTE PTR [eax]
c00151fd:	3c c7                	cmp    al,0xc7
c00151ff:	0f 85 7f 01 00 00    	jne    c0015384 <opcodeFault(regs*, void*)+0x541>
c0015205:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001520e:	8d 50 01             	lea    edx,[eax+0x1]
c0015211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015214:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015217:	8d 45 ba             	lea    eax,[ebp-0x46]
c001521a:	50                   	push   eax
c001521b:	8d 45 bb             	lea    eax,[ebp-0x45]
c001521e:	50                   	push   eax
c001521f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015222:	50                   	push   eax
c0015223:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015226:	e8 8b 48 00 00       	call   c0019ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001522b:	83 c4 10             	add    esp,0x10
c001522e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015231:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015234:	83 f0 01             	xor    eax,0x1
c0015237:	84 c0                	test   al,al
c0015239:	0f 84 45 01 00 00    	je     c0015384 <opcodeFault(regs*, void*)+0x541>
c001523f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015242:	3c 01                	cmp    al,0x1
c0015244:	0f 85 3a 01 00 00    	jne    c0015384 <opcodeFault(regs*, void*)+0x541>
c001524a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001524d:	83 f0 01             	xor    eax,0x1
c0015250:	84 c0                	test   al,al
c0015252:	0f 84 2c 01 00 00    	je     c0015384 <opcodeFault(regs*, void*)+0x541>
c0015258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001525e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015261:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015268:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001526b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001526e:	89 c2                	mov    edx,eax
c0015270:	b8 00 00 00 00       	mov    eax,0x0
c0015275:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015278:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001527b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015281:	ba 00 00 00 00       	mov    edx,0x0
c0015286:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015289:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001528c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015292:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015295:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001529c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001529f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152a2:	89 c2                	mov    edx,eax
c00152a4:	b8 00 00 00 00       	mov    eax,0x0
c00152a9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00152ac:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00152af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00152b5:	ba 00 00 00 00       	mov    edx,0x0
c00152ba:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00152bd:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00152c0:	fa                   	cli    
c00152c1:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00152c6:	40                   	inc    eax
c00152c7:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00152cc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00152cf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00152d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d4:	89 c1                	mov    ecx,eax
c00152d6:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00152d9:	89 cb                	mov    ebx,ecx
c00152db:	89 d0                	mov    eax,edx
c00152dd:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00152e0:	89 c6                	mov    esi,eax
c00152e2:	89 f0                	mov    eax,esi
c00152e4:	09 d8                	or     eax,ebx
c00152e6:	85 c0                	test   eax,eax
c00152e8:	75 21                	jne    c001530b <opcodeFault(regs*, void*)+0x4c8>
c00152ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00152ed:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152f0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152f3:	89 01                	mov    DWORD PTR [ecx],eax
c00152f5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00152f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152fe:	83 c8 40             	or     eax,0x40
c0015301:	89 c2                	mov    edx,eax
c0015303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015306:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015309:	eb 3e                	jmp    c0015349 <opcodeFault(regs*, void*)+0x506>
c001530b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001530e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015311:	8b 00                	mov    eax,DWORD PTR [eax]
c0015313:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015316:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015319:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001531c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015322:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015325:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015328:	89 d0                	mov    eax,edx
c001532a:	31 d2                	xor    edx,edx
c001532c:	89 c3                	mov    ebx,eax
c001532e:	89 d6                	mov    esi,edx
c0015330:	89 da                	mov    edx,ebx
c0015332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015335:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001533e:	83 e0 bf             	and    eax,0xffffffbf
c0015341:	89 c2                	mov    edx,eax
c0015343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015346:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015349:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001534e:	48                   	dec    eax
c001534f:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015354:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015359:	85 c0                	test   eax,eax
c001535b:	75 01                	jne    c001535e <opcodeFault(regs*, void*)+0x51b>
c001535d:	fb                   	sti    
c001535e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015361:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015364:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015367:	01 c2                	add    edx,eax
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536f:	83 ec 0c             	sub    esp,0xc
c0015372:	68 ba b6 02 c0       	push   0xc002b6ba
c0015377:	e8 83 d6 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001537c:	83 c4 10             	add    esp,0x10
c001537f:	e9 d5 00 00 00       	jmp    c0015459 <opcodeFault(regs*, void*)+0x616>
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	68 cd b6 02 c0       	push   0xc002b6cd
c001538c:	e8 6e d6 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015397:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153a0:	c1 e0 04             	shl    eax,0x4
c00153a3:	01 d0                	add    eax,edx
c00153a5:	83 c0 03             	add    eax,0x3
c00153a8:	8a 00                	mov    al,BYTE PTR [eax]
c00153aa:	0f b6 d8             	movzx  ebx,al
c00153ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153b9:	c1 e0 04             	shl    eax,0x4
c00153bc:	01 d0                	add    eax,edx
c00153be:	83 c0 02             	add    eax,0x2
c00153c1:	8a 00                	mov    al,BYTE PTR [eax]
c00153c3:	0f b6 c8             	movzx  ecx,al
c00153c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153d2:	c1 e0 04             	shl    eax,0x4
c00153d5:	01 d0                	add    eax,edx
c00153d7:	40                   	inc    eax
c00153d8:	8a 00                	mov    al,BYTE PTR [eax]
c00153da:	0f b6 d0             	movzx  edx,al
c00153dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00153e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e9:	c1 e0 04             	shl    eax,0x4
c00153ec:	01 f0                	add    eax,esi
c00153ee:	8a 00                	mov    al,BYTE PTR [eax]
c00153f0:	0f b6 c0             	movzx  eax,al
c00153f3:	83 ec 0c             	sub    esp,0xc
c00153f6:	53                   	push   ebx
c00153f7:	51                   	push   ecx
c00153f8:	52                   	push   edx
c00153f9:	50                   	push   eax
c00153fa:	68 e0 b6 02 c0       	push   0xc002b6e0
c00153ff:	e8 fb d5 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0015404:	83 c4 20             	add    esp,0x20
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540d:	83 c0 03             	add    eax,0x3
c0015410:	8a 00                	mov    al,BYTE PTR [eax]
c0015412:	0f b6 d8             	movzx  ebx,al
c0015415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015418:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541b:	83 c0 02             	add    eax,0x2
c001541e:	8a 00                	mov    al,BYTE PTR [eax]
c0015420:	0f b6 c8             	movzx  ecx,al
c0015423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015426:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015429:	40                   	inc    eax
c001542a:	8a 00                	mov    al,BYTE PTR [eax]
c001542c:	0f b6 d0             	movzx  edx,al
c001542f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015432:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015435:	8a 00                	mov    al,BYTE PTR [eax]
c0015437:	0f b6 c0             	movzx  eax,al
c001543a:	83 ec 0c             	sub    esp,0xc
c001543d:	53                   	push   ebx
c001543e:	51                   	push   ecx
c001543f:	52                   	push   edx
c0015440:	50                   	push   eax
c0015441:	68 08 b7 02 c0       	push   0xc002b708
c0015446:	e8 b4 d5 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001544b:	83 c4 20             	add    esp,0x20
c001544e:	83 ec 0c             	sub    esp,0xc
c0015451:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015454:	e8 41 f4 ff ff       	call   c001489a <displayDebugInfo(regs*)>
c0015459:	8d 65 f8             	lea    esp,[ebp-0x8]
c001545c:	5b                   	pop    ebx
c001545d:	5e                   	pop    esi
c001545e:	5d                   	pop    ebp
c001545f:	c3                   	ret    

c0015460 <displayProgramFault(char const*)>:
c0015460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015465:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015468:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001546e:	85 c0                	test   eax,eax
c0015470:	74 15                	je     c0015487 <displayProgramFault(char const*)+0x27>
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	6a 04                	push   0x4
c0015477:	6a 0f                	push   0xf
c0015479:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001547d:	50                   	push   eax
c001547e:	e8 e7 b4 ff ff       	call   c001096a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015483:	83 c4 1c             	add    esp,0x1c
c0015486:	c3                   	ret    
c0015487:	c3                   	ret    

c0015488 <setupInterruptController()>:
c0015488:	55                   	push   ebp
c0015489:	89 e5                	mov    ebp,esp
c001548b:	53                   	push   ebx
c001548c:	83 ec 24             	sub    esp,0x24
c001548f:	b8 00 00 00 00       	mov    eax,0x0
c0015494:	85 c0                	test   eax,eax
c0015496:	0f 95 c0             	setne  al
c0015499:	84 c0                	test   al,al
c001549b:	74 5b                	je     c00154f8 <setupInterruptController()+0x70>
c001549d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00154a4:	83 ec 0c             	sub    esp,0xc
c00154a7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00154aa:	e8 f8 a4 ff ff       	call   c000f9a7 <malloc>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	89 c3                	mov    ebx,eax
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	53                   	push   ebx
c00154b8:	e8 89 08 01 00       	call   c0025d46 <APIC::APIC()>
c00154bd:	83 c4 10             	add    esp,0x10
c00154c0:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00154c3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00154c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cb:	83 c0 08             	add    eax,0x8
c00154ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d0:	6a 00                	push   0x0
c00154d2:	6a 00                	push   0x0
c00154d4:	6a 00                	push   0x0
c00154d6:	52                   	push   edx
c00154d7:	ff d0                	call   eax
c00154d9:	83 c4 10             	add    esp,0x10
c00154dc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00154e1:	83 ec 08             	sub    esp,0x8
c00154e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154e7:	50                   	push   eax
c00154e8:	e8 4b e9 ff ff       	call   c0013e38 <Device::addChild(Device*)>
c00154ed:	83 c4 10             	add    esp,0x10
c00154f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154f3:	e9 79 03 00 00       	jmp    c0015871 <setupInterruptController()+0x3e9>
c00154f8:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c00154fd:	84 c0                	test   al,al
c00154ff:	75 14                	jne    c0015515 <setupInterruptController()+0x8d>
c0015501:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015506:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001550c:	83 e2 fe             	and    edx,0xfffffffe
c001550f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015515:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001551a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015520:	83 e0 01             	and    eax,0x1
c0015523:	84 c0                	test   al,al
c0015525:	0f 95 c0             	setne  al
c0015528:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001552b:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015532:	83 ec 0c             	sub    esp,0xc
c0015535:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015538:	e8 6a a4 ff ff       	call   c000f9a7 <malloc>
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	89 c3                	mov    ebx,eax
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	53                   	push   ebx
c0015546:	e8 53 0d 01 00       	call   c002629e <PIC::PIC()>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015551:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015554:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015557:	8b 00                	mov    eax,DWORD PTR [eax]
c0015559:	83 c0 08             	add    eax,0x8
c001555c:	8b 00                	mov    eax,DWORD PTR [eax]
c001555e:	6a 00                	push   0x0
c0015560:	6a 00                	push   0x0
c0015562:	6a 00                	push   0x0
c0015564:	52                   	push   edx
c0015565:	ff d0                	call   eax
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001556e:	74 73                	je     c00155e3 <setupInterruptController()+0x15b>
c0015570:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015573:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015576:	8b 00                	mov    eax,DWORD PTR [eax]
c0015578:	83 c0 0c             	add    eax,0xc
c001557b:	8b 00                	mov    eax,DWORD PTR [eax]
c001557d:	6a 00                	push   0x0
c001557f:	6a 00                	push   0x0
c0015581:	6a 00                	push   0x0
c0015583:	52                   	push   edx
c0015584:	ff d0                	call   eax
c0015586:	83 c4 10             	add    esp,0x10
c0015589:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001558d:	74 15                	je     c00155a4 <setupInterruptController()+0x11c>
c001558f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015592:	8b 00                	mov    eax,DWORD PTR [eax]
c0015594:	83 c0 04             	add    eax,0x4
c0015597:	8b 00                	mov    eax,DWORD PTR [eax]
c0015599:	83 ec 0c             	sub    esp,0xc
c001559c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559f:	ff d0                	call   eax
c00155a1:	83 c4 10             	add    esp,0x10
c00155a4:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155ab:	83 ec 0c             	sub    esp,0xc
c00155ae:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155b1:	e8 f1 a3 ff ff       	call   c000f9a7 <malloc>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	89 c3                	mov    ebx,eax
c00155bb:	83 ec 0c             	sub    esp,0xc
c00155be:	53                   	push   ebx
c00155bf:	e8 82 07 01 00       	call   c0025d46 <APIC::APIC()>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00155ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d2:	83 c0 08             	add    eax,0x8
c00155d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d7:	6a 00                	push   0x0
c00155d9:	6a 00                	push   0x0
c00155db:	6a 00                	push   0x0
c00155dd:	52                   	push   edx
c00155de:	ff d0                	call   eax
c00155e0:	83 c4 10             	add    esp,0x10
c00155e3:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00155e8:	83 ec 08             	sub    esp,0x8
c00155eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ee:	50                   	push   eax
c00155ef:	e8 44 e8 ff ff       	call   c0013e38 <Device::addChild(Device*)>
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	c7 05 e8 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e8,0x0
c0015601:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015604:	8b 00                	mov    eax,DWORD PTR [eax]
c0015606:	83 c0 24             	add    eax,0x24
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	6a 00                	push   0x0
c001560d:	68 24 4e 01 c0       	push   0xc0014e24
c0015612:	6a 00                	push   0x0
c0015614:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015617:	ff d0                	call   eax
c0015619:	83 c4 10             	add    esp,0x10
c001561c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015621:	83 c0 24             	add    eax,0x24
c0015624:	8b 00                	mov    eax,DWORD PTR [eax]
c0015626:	6a 00                	push   0x0
c0015628:	68 24 4e 01 c0       	push   0xc0014e24
c001562d:	6a 01                	push   0x1
c001562f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015632:	ff d0                	call   eax
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563a:	8b 00                	mov    eax,DWORD PTR [eax]
c001563c:	83 c0 24             	add    eax,0x24
c001563f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015641:	6a 00                	push   0x0
c0015643:	68 f7 46 01 c0       	push   0xc00146f7
c0015648:	6a 02                	push   0x2
c001564a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564d:	ff d0                	call   eax
c001564f:	83 c4 10             	add    esp,0x10
c0015652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015655:	8b 00                	mov    eax,DWORD PTR [eax]
c0015657:	83 c0 24             	add    eax,0x24
c001565a:	8b 00                	mov    eax,DWORD PTR [eax]
c001565c:	6a 00                	push   0x0
c001565e:	68 24 4e 01 c0       	push   0xc0014e24
c0015663:	6a 03                	push   0x3
c0015665:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015668:	ff d0                	call   eax
c001566a:	83 c4 10             	add    esp,0x10
c001566d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015670:	8b 00                	mov    eax,DWORD PTR [eax]
c0015672:	83 c0 24             	add    eax,0x24
c0015675:	8b 00                	mov    eax,DWORD PTR [eax]
c0015677:	6a 00                	push   0x0
c0015679:	68 24 4e 01 c0       	push   0xc0014e24
c001567e:	6a 04                	push   0x4
c0015680:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015683:	ff d0                	call   eax
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568b:	8b 00                	mov    eax,DWORD PTR [eax]
c001568d:	83 c0 24             	add    eax,0x24
c0015690:	8b 00                	mov    eax,DWORD PTR [eax]
c0015692:	6a 00                	push   0x0
c0015694:	68 24 4e 01 c0       	push   0xc0014e24
c0015699:	6a 05                	push   0x5
c001569b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569e:	ff d0                	call   eax
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a8:	83 c0 24             	add    eax,0x24
c00156ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ad:	6a 00                	push   0x0
c00156af:	68 43 4e 01 c0       	push   0xc0014e43
c00156b4:	6a 06                	push   0x6
c00156b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b9:	ff d0                	call   eax
c00156bb:	83 c4 10             	add    esp,0x10
c00156be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c3:	83 c0 24             	add    eax,0x24
c00156c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c8:	6a 00                	push   0x0
c00156ca:	68 29 4d 01 c0       	push   0xc0014d29
c00156cf:	6a 07                	push   0x7
c00156d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d4:	ff d0                	call   eax
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156de:	83 c0 24             	add    eax,0x24
c00156e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e3:	6a 00                	push   0x0
c00156e5:	68 12 45 01 c0       	push   0xc0014512
c00156ea:	6a 08                	push   0x8
c00156ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ef:	ff d0                	call   eax
c00156f1:	83 c4 10             	add    esp,0x10
c00156f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f9:	83 c0 24             	add    eax,0x24
c00156fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fe:	6a 00                	push   0x0
c0015700:	68 24 4e 01 c0       	push   0xc0014e24
c0015705:	6a 09                	push   0x9
c0015707:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001570a:	ff d0                	call   eax
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015712:	8b 00                	mov    eax,DWORD PTR [eax]
c0015714:	83 c0 24             	add    eax,0x24
c0015717:	8b 00                	mov    eax,DWORD PTR [eax]
c0015719:	6a 00                	push   0x0
c001571b:	68 24 4e 01 c0       	push   0xc0014e24
c0015720:	6a 0a                	push   0xa
c0015722:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015725:	ff d0                	call   eax
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572d:	8b 00                	mov    eax,DWORD PTR [eax]
c001572f:	83 c0 24             	add    eax,0x24
c0015732:	8b 00                	mov    eax,DWORD PTR [eax]
c0015734:	6a 00                	push   0x0
c0015736:	68 24 4e 01 c0       	push   0xc0014e24
c001573b:	6a 0b                	push   0xb
c001573d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015740:	ff d0                	call   eax
c0015742:	83 c4 10             	add    esp,0x10
c0015745:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015748:	8b 00                	mov    eax,DWORD PTR [eax]
c001574a:	83 c0 24             	add    eax,0x24
c001574d:	8b 00                	mov    eax,DWORD PTR [eax]
c001574f:	6a 00                	push   0x0
c0015751:	68 24 4e 01 c0       	push   0xc0014e24
c0015756:	6a 0c                	push   0xc
c0015758:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001575b:	ff d0                	call   eax
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015763:	8b 00                	mov    eax,DWORD PTR [eax]
c0015765:	83 c0 24             	add    eax,0x24
c0015768:	8b 00                	mov    eax,DWORD PTR [eax]
c001576a:	6a 00                	push   0x0
c001576c:	68 9c 4d 01 c0       	push   0xc0014d9c
c0015771:	6a 0d                	push   0xd
c0015773:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015776:	ff d0                	call   eax
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001577e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015780:	83 c0 24             	add    eax,0x24
c0015783:	8b 00                	mov    eax,DWORD PTR [eax]
c0015785:	6a 00                	push   0x0
c0015787:	68 d5 4d 01 c0       	push   0xc0014dd5
c001578c:	6a 0e                	push   0xe
c001578e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015791:	ff d0                	call   eax
c0015793:	83 c4 10             	add    esp,0x10
c0015796:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015799:	8b 00                	mov    eax,DWORD PTR [eax]
c001579b:	83 c0 24             	add    eax,0x24
c001579e:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a0:	6a 00                	push   0x0
c00157a2:	68 24 4e 01 c0       	push   0xc0014e24
c00157a7:	6a 0f                	push   0xf
c00157a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ac:	ff d0                	call   eax
c00157ae:	83 c4 10             	add    esp,0x10
c00157b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b6:	83 c0 24             	add    eax,0x24
c00157b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bb:	6a 00                	push   0x0
c00157bd:	68 24 4e 01 c0       	push   0xc0014e24
c00157c2:	6a 10                	push   0x10
c00157c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c7:	ff d0                	call   eax
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d1:	83 c0 24             	add    eax,0x24
c00157d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d6:	6a 00                	push   0x0
c00157d8:	68 24 4e 01 c0       	push   0xc0014e24
c00157dd:	6a 11                	push   0x11
c00157df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e2:	ff d0                	call   eax
c00157e4:	83 c4 10             	add    esp,0x10
c00157e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ec:	83 c0 24             	add    eax,0x24
c00157ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f1:	6a 00                	push   0x0
c00157f3:	68 24 4e 01 c0       	push   0xc0014e24
c00157f8:	6a 12                	push   0x12
c00157fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157fd:	ff d0                	call   eax
c00157ff:	83 c4 10             	add    esp,0x10
c0015802:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015805:	8b 00                	mov    eax,DWORD PTR [eax]
c0015807:	83 c0 24             	add    eax,0x24
c001580a:	8b 00                	mov    eax,DWORD PTR [eax]
c001580c:	6a 00                	push   0x0
c001580e:	68 24 4e 01 c0       	push   0xc0014e24
c0015813:	6a 13                	push   0x13
c0015815:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015818:	ff d0                	call   eax
c001581a:	83 c4 10             	add    esp,0x10
c001581d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015820:	8b 00                	mov    eax,DWORD PTR [eax]
c0015822:	83 c0 24             	add    eax,0x24
c0015825:	8b 00                	mov    eax,DWORD PTR [eax]
c0015827:	6a 00                	push   0x0
c0015829:	68 24 4e 01 c0       	push   0xc0014e24
c001582e:	6a 14                	push   0x14
c0015830:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015833:	ff d0                	call   eax
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001583b:	8b 00                	mov    eax,DWORD PTR [eax]
c001583d:	83 c0 24             	add    eax,0x24
c0015840:	8b 00                	mov    eax,DWORD PTR [eax]
c0015842:	6a 00                	push   0x0
c0015844:	68 24 4e 01 c0       	push   0xc0014e24
c0015849:	6a 1e                	push   0x1e
c001584b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001584e:	ff d0                	call   eax
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015856:	8b 00                	mov    eax,DWORD PTR [eax]
c0015858:	83 c0 24             	add    eax,0x24
c001585b:	8b 00                	mov    eax,DWORD PTR [eax]
c001585d:	6a 00                	push   0x0
c001585f:	68 8f c5 01 c0       	push   0xc001c58f
c0015864:	6a 60                	push   0x60
c0015866:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015869:	ff d0                	call   eax
c001586b:	83 c4 10             	add    esp,0x10
c001586e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015871:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015874:	c9                   	leave  
c0015875:	c3                   	ret    

c0015876 <InterruptController::convertLegacyIRQNumber(int)>:
c0015876:	55                   	push   ebp
c0015877:	89 e5                	mov    ebp,esp
c0015879:	83 ec 08             	sub    esp,0x8
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	83 ec 0c             	sub    esp,0xc
c0015882:	50                   	push   eax
c0015883:	e8 b0 e8 ff ff       	call   c0014138 <Device::getName()>
c0015888:	83 c4 10             	add    esp,0x10
c001588b:	8a 00                	mov    al,BYTE PTR [eax]
c001588d:	3c 41                	cmp    al,0x41
c001588f:	0f 94 c0             	sete   al
c0015892:	84 c0                	test   al,al
c0015894:	74 28                	je     c00158be <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015896:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001589a:	7f 12                	jg     c00158ae <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001589c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001589f:	05 c0 d8 02 c0       	add    eax,0xc002d8c0
c00158a4:	8a 00                	mov    al,BYTE PTR [eax]
c00158a6:	0f b6 c0             	movzx  eax,al
c00158a9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158ac:	eb 10                	jmp    c00158be <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158ae:	83 ec 0c             	sub    esp,0xc
c00158b1:	68 30 b7 02 c0       	push   0xc002b730
c00158b6:	e8 e2 4a 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00158bb:	83 c4 10             	add    esp,0x10
c00158be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158c1:	c9                   	leave  
c00158c2:	c3                   	ret    
c00158c3:	90                   	nop

c00158c4 <startGUI(void*)>:
c00158c4:	55                   	push   ebp
c00158c5:	89 e5                	mov    ebp,esp
c00158c7:	53                   	push   ebx
c00158c8:	83 ec 04             	sub    esp,0x4
c00158cb:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00158d0:	48                   	dec    eax
c00158d1:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00158d6:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00158db:	85 c0                	test   eax,eax
c00158dd:	75 01                	jne    c00158e0 <startGUI(void*)+0x1c>
c00158df:	fb                   	sti    
c00158e0:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c00158e6:	83 ec 08             	sub    esp,0x8
c00158e9:	6a 01                	push   0x1
c00158eb:	68 b0 b7 02 c0       	push   0xc002b7b0
c00158f0:	e8 75 7c 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	83 ec 08             	sub    esp,0x8
c00158fb:	53                   	push   ebx
c00158fc:	50                   	push   eax
c00158fd:	e8 99 7e 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c001590b:	83 ec 08             	sub    esp,0x8
c001590e:	6a 01                	push   0x1
c0015910:	68 ca b7 02 c0       	push   0xc002b7ca
c0015915:	e8 50 7c 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	83 ec 08             	sub    esp,0x8
c0015920:	53                   	push   ebx
c0015921:	50                   	push   eax
c0015922:	e8 74 7e 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	90                   	nop
c001592b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001592e:	c9                   	leave  
c001592f:	c3                   	ret    

c0015930 <startGUIVESA(void*)>:
c0015930:	55                   	push   ebp
c0015931:	89 e5                	mov    ebp,esp
c0015933:	53                   	push   ebx
c0015934:	83 ec 04             	sub    esp,0x4
c0015937:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001593c:	48                   	dec    eax
c001593d:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015942:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015947:	85 c0                	test   eax,eax
c0015949:	75 01                	jne    c001594c <startGUIVESA(void*)+0x1c>
c001594b:	fb                   	sti    
c001594c:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015952:	83 ec 08             	sub    esp,0x8
c0015955:	6a 01                	push   0x1
c0015957:	68 e4 b7 02 c0       	push   0xc002b7e4
c001595c:	e8 09 7c 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c0015961:	83 c4 10             	add    esp,0x10
c0015964:	83 ec 08             	sub    esp,0x8
c0015967:	53                   	push   ebx
c0015968:	50                   	push   eax
c0015969:	e8 2d 7e 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015977:	83 ec 08             	sub    esp,0x8
c001597a:	6a 01                	push   0x1
c001597c:	68 ca b7 02 c0       	push   0xc002b7ca
c0015981:	e8 e4 7b 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	83 ec 08             	sub    esp,0x8
c001598c:	53                   	push   ebx
c001598d:	50                   	push   eax
c001598e:	e8 08 7e 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0015993:	83 c4 10             	add    esp,0x10
c0015996:	90                   	nop
c0015997:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001599a:	c9                   	leave  
c001599b:	c3                   	ret    

c001599c <sendKeyToTerminal(unsigned char)>:
c001599c:	55                   	push   ebp
c001599d:	89 e5                	mov    ebp,esp
c001599f:	83 ec 28             	sub    esp,0x28
c00159a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159a8:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c00159ad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159b1:	83 ec 08             	sub    esp,0x8
c00159b4:	52                   	push   edx
c00159b5:	50                   	push   eax
c00159b6:	e8 57 b4 ff ff       	call   c0010e12 <VgaText::receiveKey(unsigned char)>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159c2:	0f 85 8f 00 00 00    	jne    c0015a57 <sendKeyToTerminal(unsigned char)+0xbb>
c00159c8:	fa                   	cli    
c00159c9:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00159ce:	40                   	inc    eax
c00159cf:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00159d4:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c00159d9:	40                   	inc    eax
c00159da:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c00159df:	a1 00 e8 02 c0       	mov    eax,ds:0xc002e800
c00159e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159e7:	c7 05 00 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e800,0x0
c00159f1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f5:	74 1f                	je     c0015a16 <sendKeyToTerminal(unsigned char)+0x7a>
c00159f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a03:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a0c:	e8 b0 89 00 00       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	eb db                	jmp    c00159f1 <sendKeyToTerminal(unsigned char)+0x55>
c0015a16:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c0015a1b:	48                   	dec    eax
c0015a1c:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c0015a21:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c0015a26:	85 c0                	test   eax,eax
c0015a28:	75 18                	jne    c0015a42 <sendKeyToTerminal(unsigned char)+0xa6>
c0015a2a:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c0015a2f:	85 c0                	test   eax,eax
c0015a31:	74 0f                	je     c0015a42 <sendKeyToTerminal(unsigned char)+0xa6>
c0015a33:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c0015a3d:	e8 ed 84 00 00       	call   c001df2f <schedule()>
c0015a42:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015a47:	48                   	dec    eax
c0015a48:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015a4d:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015a52:	85 c0                	test   eax,eax
c0015a54:	75 01                	jne    c0015a57 <sendKeyToTerminal(unsigned char)+0xbb>
c0015a56:	fb                   	sti    
c0015a57:	90                   	nop
c0015a58:	c9                   	leave  
c0015a59:	c3                   	ret    

c0015a5a <sendKeyboardToken(KeyboardToken)>:
c0015a5a:	55                   	push   ebp
c0015a5b:	89 e5                	mov    ebp,esp
c0015a5d:	83 ec 18             	sub    esp,0x18
c0015a60:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a66:	0f b7 c0             	movzx  eax,ax
c0015a69:	83 f2 01             	xor    edx,0x1
c0015a6c:	88 90 20 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd17e0],dl
c0015a72:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0015a77:	85 c0                	test   eax,eax
c0015a79:	74 24                	je     c0015a9f <sendKeyboardToken(KeyboardToken)+0x45>
c0015a7b:	8b 0d 08 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e808
c0015a81:	83 ec 04             	sub    esp,0x4
c0015a84:	68 20 e8 02 c0       	push   0xc002e820
c0015a89:	83 ec 08             	sub    esp,0x8
c0015a8c:	89 e2                	mov    edx,esp
c0015a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a91:	89 02                	mov    DWORD PTR [edx],eax
c0015a93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a96:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a9a:	ff d1                	call   ecx
c0015a9c:	83 c4 10             	add    esp,0x10
c0015a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa2:	66 3d 03 02          	cmp    ax,0x203
c0015aa6:	75 07                	jne    c0015aaf <sendKeyboardToken(KeyboardToken)+0x55>
c0015aa8:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015aad:	84 c0                	test   al,al
c0015aaf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ab3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ab6:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015abb:	38 c2                	cmp    dl,al
c0015abd:	74 1c                	je     c0015adb <sendKeyboardToken(KeyboardToken)+0x81>
c0015abf:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ac2:	a2 28 ec 02 c0       	mov    ds:0xc002ec28,al
c0015ac7:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015acc:	0f b6 c0             	movzx  eax,al
c0015acf:	83 ec 0c             	sub    esp,0xc
c0015ad2:	50                   	push   eax
c0015ad3:	e8 7a a9 ff ff       	call   c0010452 <setTerminalScrollLock(bool)>
c0015ad8:	83 c4 10             	add    esp,0x10
c0015adb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ade:	84 c0                	test   al,al
c0015ae0:	0f 84 ae 00 00 00    	je     c0015b94 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae9:	66 3d 10 03          	cmp    ax,0x310
c0015aed:	75 06                	jne    c0015af5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015aef:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af8:	66 3d 11 03          	cmp    ax,0x311
c0015afc:	75 06                	jne    c0015b04 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015afe:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b07:	66 3d 12 03          	cmp    ax,0x312
c0015b0b:	75 06                	jne    c0015b13 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b0d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b16:	66 3d 13 03          	cmp    ax,0x313
c0015b1a:	75 06                	jne    c0015b22 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015b1c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b25:	66 3d 14 03          	cmp    ax,0x314
c0015b29:	75 06                	jne    c0015b31 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015b2b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b34:	66 3d 15 03          	cmp    ax,0x315
c0015b38:	75 06                	jne    c0015b40 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b3a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b43:	66 3d 16 03          	cmp    ax,0x316
c0015b47:	75 06                	jne    c0015b4f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b49:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b52:	66 3d 17 03          	cmp    ax,0x317
c0015b56:	75 06                	jne    c0015b5e <sendKeyboardToken(KeyboardToken)+0x104>
c0015b58:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b61:	66 3d 18 03          	cmp    ax,0x318
c0015b65:	75 06                	jne    c0015b6d <sendKeyboardToken(KeyboardToken)+0x113>
c0015b67:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b70:	66 3d 19 03          	cmp    ax,0x319
c0015b74:	75 06                	jne    c0015b7c <sendKeyboardToken(KeyboardToken)+0x122>
c0015b76:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7f:	66 3d 1a 03          	cmp    ax,0x31a
c0015b83:	0f 85 c9 00 00 00    	jne    c0015c52 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b89:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b8f:	e9 be 00 00 00       	jmp    c0015c52 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b97:	66 3d 10 03          	cmp    ax,0x310
c0015b9b:	75 0a                	jne    c0015ba7 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015b9d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015ba3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015baa:	66 3d 11 03          	cmp    ax,0x311
c0015bae:	75 0a                	jne    c0015bba <sendKeyboardToken(KeyboardToken)+0x160>
c0015bb0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015bb6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbd:	66 3d 12 03          	cmp    ax,0x312
c0015bc1:	75 0a                	jne    c0015bcd <sendKeyboardToken(KeyboardToken)+0x173>
c0015bc3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015bc9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd0:	66 3d 13 03          	cmp    ax,0x313
c0015bd4:	75 0a                	jne    c0015be0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015bd6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015bdc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be3:	66 3d 14 03          	cmp    ax,0x314
c0015be7:	75 0a                	jne    c0015bf3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015be9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015bef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf6:	66 3d 15 03          	cmp    ax,0x315
c0015bfa:	75 0a                	jne    c0015c06 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015bfc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c02:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c09:	66 3d 16 03          	cmp    ax,0x316
c0015c0d:	75 0a                	jne    c0015c19 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c0f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1c:	66 3d 17 03          	cmp    ax,0x317
c0015c20:	75 0a                	jne    c0015c2c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015c22:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015c28:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2f:	66 3d 18 03          	cmp    ax,0x318
c0015c33:	75 0a                	jne    c0015c3f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015c35:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015c3b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c42:	66 3d 19 03          	cmp    ax,0x319
c0015c46:	75 0a                	jne    c0015c52 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c48:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c4e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c55:	66 3d 00 02          	cmp    ax,0x200
c0015c59:	75 2c                	jne    c0015c87 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c5b:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c0015c60:	83 f0 01             	xor    eax,0x1
c0015c63:	84 c0                	test   al,al
c0015c65:	74 20                	je     c0015c87 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c67:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0015c6c:	6a 01                	push   0x1
c0015c6e:	6a 00                	push   0x0
c0015c70:	68 c4 58 01 c0       	push   0xc00158c4
c0015c75:	50                   	push   eax
c0015c76:	e8 8f 80 00 00       	call   c001dd0a <Process::createThread(void (*)(void*), void*, int)>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0015c85:	eb 33                	jmp    c0015cba <sendKeyboardToken(KeyboardToken)+0x260>
c0015c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8a:	66 3d 01 02          	cmp    ax,0x201
c0015c8e:	75 2a                	jne    c0015cba <sendKeyboardToken(KeyboardToken)+0x260>
c0015c90:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c0015c95:	83 f0 01             	xor    eax,0x1
c0015c98:	84 c0                	test   al,al
c0015c9a:	74 1e                	je     c0015cba <sendKeyboardToken(KeyboardToken)+0x260>
c0015c9c:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0015ca1:	6a 01                	push   0x1
c0015ca3:	6a 00                	push   0x0
c0015ca5:	68 30 59 01 c0       	push   0xc0015930
c0015caa:	50                   	push   eax
c0015cab:	e8 5a 80 00 00       	call   c001dd0a <Process::createThread(void (*)(void*), void*, int)>
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0015cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbd:	66 3d 1d 03          	cmp    ax,0x31d
c0015cc1:	75 06                	jne    c0015cc9 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015cc3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ccc:	66 3d 1c 03          	cmp    ax,0x31c
c0015cd0:	75 06                	jne    c0015cd8 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015cd2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdb:	66 3d 1b 03          	cmp    ax,0x31b
c0015cdf:	75 06                	jne    c0015ce7 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ce1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015ce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cea:	66 3d 1e 03          	cmp    ax,0x31e
c0015cee:	75 06                	jne    c0015cf6 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015cf0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf9:	66 3d 1f 03          	cmp    ax,0x31f
c0015cfd:	75 06                	jne    c0015d05 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015cff:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d08:	66 3d 1a 03          	cmp    ax,0x31a
c0015d0c:	75 06                	jne    c0015d14 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d0e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d14:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d18:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d1b:	83 f0 01             	xor    eax,0x1
c0015d1e:	84 c0                	test   al,al
c0015d20:	74 77                	je     c0015d99 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015d22:	a0 21 e9 02 c0       	mov    al,ds:0xc002e921
c0015d27:	84 c0                	test   al,al
c0015d29:	74 41                	je     c0015d6c <sendKeyboardToken(KeyboardToken)+0x312>
c0015d2b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d2f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d33:	74 2b                	je     c0015d60 <sendKeyboardToken(KeyboardToken)+0x306>
c0015d35:	8b 15 24 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec24
c0015d3b:	89 d0                	mov    eax,edx
c0015d3d:	c1 e0 02             	shl    eax,0x2
c0015d40:	01 d0                	add    eax,edx
c0015d42:	01 c0                	add    eax,eax
c0015d44:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c0015d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d4c:	0f b7 c0             	movzx  eax,ax
c0015d4f:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d52:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015d57:	01 d0                	add    eax,edx
c0015d59:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c0015d5e:	eb 6d                	jmp    c0015dcd <sendKeyboardToken(KeyboardToken)+0x373>
c0015d60:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0015d6a:	eb 61                	jmp    c0015dcd <sendKeyboardToken(KeyboardToken)+0x373>
c0015d6c:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015d71:	85 c0                	test   eax,eax
c0015d73:	74 18                	je     c0015d8d <sendKeyboardToken(KeyboardToken)+0x333>
c0015d75:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015d7a:	0f b6 c0             	movzx  eax,al
c0015d7d:	83 ec 0c             	sub    esp,0xc
c0015d80:	50                   	push   eax
c0015d81:	e8 16 fc ff ff       	call   c001599c <sendKeyToTerminal(unsigned char)>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d8d:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0015d97:	eb 34                	jmp    c0015dcd <sendKeyboardToken(KeyboardToken)+0x373>
c0015d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9c:	66 3d 01 01          	cmp    ax,0x101
c0015da0:	75 2b                	jne    c0015dcd <sendKeyboardToken(KeyboardToken)+0x373>
c0015da2:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015da7:	85 c0                	test   eax,eax
c0015da9:	74 18                	je     c0015dc3 <sendKeyboardToken(KeyboardToken)+0x369>
c0015dab:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015db0:	0f b6 c0             	movzx  eax,al
c0015db3:	83 ec 0c             	sub    esp,0xc
c0015db6:	50                   	push   eax
c0015db7:	e8 e0 fb ff ff       	call   c001599c <sendKeyToTerminal(unsigned char)>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015dc3:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0015dcd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015dd0:	83 f0 01             	xor    eax,0x1
c0015dd3:	84 c0                	test   al,al
c0015dd5:	74 4c                	je     c0015e23 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015dd7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dda:	83 f0 01             	xor    eax,0x1
c0015ddd:	84 c0                	test   al,al
c0015ddf:	74 42                	je     c0015e23 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015de1:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015de6:	83 f0 01             	xor    eax,0x1
c0015de9:	84 c0                	test   al,al
c0015deb:	74 36                	je     c0015e23 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df0:	66 83 f8 1f          	cmp    ax,0x1f
c0015df4:	76 09                	jbe    c0015dff <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df9:	66 83 f8 7e          	cmp    ax,0x7e
c0015dfd:	76 12                	jbe    c0015e11 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e02:	66 83 f8 0a          	cmp    ax,0xa
c0015e06:	74 09                	je     c0015e11 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0b:	66 83 f8 08          	cmp    ax,0x8
c0015e0f:	75 12                	jne    c0015e23 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e14:	0f b6 c0             	movzx  eax,al
c0015e17:	83 ec 0c             	sub    esp,0xc
c0015e1a:	50                   	push   eax
c0015e1b:	e8 7c fb ff ff       	call   c001599c <sendKeyToTerminal(unsigned char)>
c0015e20:	83 c4 10             	add    esp,0x10
c0015e23:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e26:	83 f0 01             	xor    eax,0x1
c0015e29:	84 c0                	test   al,al
c0015e2b:	74 4f                	je     c0015e7c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e2d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e30:	83 f0 01             	xor    eax,0x1
c0015e33:	84 c0                	test   al,al
c0015e35:	74 45                	je     c0015e7c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e37:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015e3c:	84 c0                	test   al,al
c0015e3e:	74 3c                	je     c0015e7c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e43:	66 83 f8 3f          	cmp    ax,0x3f
c0015e47:	76 33                	jbe    c0015e7c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4c:	66 83 f8 7f          	cmp    ax,0x7f
c0015e50:	77 2a                	ja     c0015e7c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e55:	88 c2                	mov    dl,al
c0015e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5a:	66 83 f8 5f          	cmp    ax,0x5f
c0015e5e:	76 04                	jbe    c0015e64 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e60:	b0 20                	mov    al,0x20
c0015e62:	eb 02                	jmp    c0015e66 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e64:	b0 00                	mov    al,0x0
c0015e66:	29 c2                	sub    edx,eax
c0015e68:	88 d0                	mov    al,dl
c0015e6a:	83 e8 40             	sub    eax,0x40
c0015e6d:	0f b6 c0             	movzx  eax,al
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	50                   	push   eax
c0015e74:	e8 23 fb ff ff       	call   c001599c <sendKeyToTerminal(unsigned char)>
c0015e79:	83 c4 10             	add    esp,0x10
c0015e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7f:	66 3d 00 03          	cmp    ax,0x300
c0015e83:	75 0f                	jne    c0015e94 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e88:	83 f0 01             	xor    eax,0x1
c0015e8b:	84 c0                	test   al,al
c0015e8d:	74 05                	je     c0015e94 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e8f:	e8 2f a9 ff ff       	call   c00107c3 <doTerminalCycle()>
c0015e94:	90                   	nop
c0015e95:	c9                   	leave  
c0015e96:	c3                   	ret    

c0015e97 <clearInternalKeybuffer(VgaText*)>:
c0015e97:	55                   	push   ebp
c0015e98:	89 e5                	mov    ebp,esp
c0015e9a:	83 ec 08             	sub    esp,0x8
c0015e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea0:	05 98 01 00 00       	add    eax,0x198
c0015ea5:	83 ec 0c             	sub    esp,0xc
c0015ea8:	50                   	push   eax
c0015ea9:	e8 be a8 fe ff       	call   c000076c <strlen>
c0015eae:	83 c4 10             	add    esp,0x10
c0015eb1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015eb4:	81 c2 98 01 00 00    	add    edx,0x198
c0015eba:	83 ec 04             	sub    esp,0x4
c0015ebd:	50                   	push   eax
c0015ebe:	6a 00                	push   0x0
c0015ec0:	52                   	push   edx
c0015ec1:	e8 8a a8 fe ff       	call   c0000750 <memset>
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	90                   	nop
c0015eca:	c9                   	leave  
c0015ecb:	c3                   	ret    

c0015ecc <readKeyboard(VgaText*, char*, unsigned long)>:
c0015ecc:	55                   	push   ebp
c0015ecd:	89 e5                	mov    ebp,esp
c0015ecf:	83 ec 18             	sub    esp,0x18
c0015ed2:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0015ed7:	85 c0                	test   eax,eax
c0015ed9:	74 2a                	je     c0015f05 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015edb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ee1:	8b 0d 08 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e808
c0015ee7:	83 ec 04             	sub    esp,0x4
c0015eea:	68 20 e8 02 c0       	push   0xc002e820
c0015eef:	83 ec 08             	sub    esp,0x8
c0015ef2:	89 e2                	mov    edx,esp
c0015ef4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015ef7:	89 02                	mov    DWORD PTR [edx],eax
c0015ef9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015efc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f00:	ff d1                	call   ecx
c0015f02:	83 c4 10             	add    esp,0x10
c0015f05:	fb                   	sti    
c0015f06:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015f0d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015f11:	0f 84 a1 00 00 00    	je     c0015fb8 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f20:	84 c0                	test   al,al
c0015f22:	75 28                	jne    c0015f4c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015f24:	fa                   	cli    
c0015f25:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015f2a:	40                   	inc    eax
c0015f2b:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015f30:	e8 fa 7f 00 00       	call   c001df2f <schedule()>
c0015f35:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015f3a:	48                   	dec    eax
c0015f3b:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015f40:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015f45:	85 c0                	test   eax,eax
c0015f47:	75 ce                	jne    c0015f17 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f49:	fb                   	sti    
c0015f4a:	eb cb                	jmp    c0015f17 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f4f:	8d 50 01             	lea    edx,[eax+0x1]
c0015f52:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f58:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015f5e:	88 10                	mov    BYTE PTR [eax],dl
c0015f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f63:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f69:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	05 98 01 00 00       	add    eax,0x198
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	50                   	push   eax
c0015f78:	e8 ef a7 fe ff       	call   c000076c <strlen>
c0015f7d:	83 c4 10             	add    esp,0x10
c0015f80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f83:	81 c2 98 01 00 00    	add    edx,0x198
c0015f89:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f8f:	81 c2 98 01 00 00    	add    edx,0x198
c0015f95:	83 ec 04             	sub    esp,0x4
c0015f98:	50                   	push   eax
c0015f99:	51                   	push   ecx
c0015f9a:	52                   	push   edx
c0015f9b:	e8 e8 a6 fe ff       	call   c0000688 <memmove>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015fa6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015fa9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015fad:	0f 85 5a ff ff ff    	jne    c0015f0d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fb6:	eb 03                	jmp    c0015fbb <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015fb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fbb:	c9                   	leave  
c0015fbc:	c3                   	ret    
c0015fbd:	90                   	nop

c0015fbe <Keyboard::Keyboard(char const*)>:
c0015fbe:	83 ec 0c             	sub    esp,0xc
c0015fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc5:	83 ec 08             	sub    esp,0x8
c0015fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fcc:	50                   	push   eax
c0015fcd:	e8 6a e0 ff ff       	call   c001403c <Device::Device(char const*)>
c0015fd2:	83 c4 10             	add    esp,0x10
c0015fd5:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c0015fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fde:	89 10                	mov    DWORD PTR [eax],edx
c0015fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015fee:	c6 05 04 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e804,0x1
c0015ff5:	90                   	nop
c0015ff6:	83 c4 0c             	add    esp,0xc
c0015ff9:	c3                   	ret    

c0015ffa <Keyboard::~Keyboard()>:
c0015ffa:	83 ec 0c             	sub    esp,0xc
c0015ffd:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c0016002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016006:	89 10                	mov    DWORD PTR [eax],edx
c0016008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600c:	83 ec 0c             	sub    esp,0xc
c001600f:	50                   	push   eax
c0016010:	e8 f1 dc ff ff       	call   c0013d06 <Device::~Device()>
c0016015:	83 c4 10             	add    esp,0x10
c0016018:	90                   	nop
c0016019:	83 c4 0c             	add    esp,0xc
c001601c:	c3                   	ret    
c001601d:	90                   	nop

c001601e <Keyboard::~Keyboard()>:
c001601e:	83 ec 0c             	sub    esp,0xc
c0016021:	83 ec 0c             	sub    esp,0xc
c0016024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016028:	e8 cd ff ff ff       	call   c0015ffa <Keyboard::~Keyboard()>
c001602d:	83 c4 10             	add    esp,0x10
c0016030:	83 ec 08             	sub    esp,0x8
c0016033:	68 5c 01 00 00       	push   0x15c
c0016038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001603c:	e8 e6 c8 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	83 c4 0c             	add    esp,0xc
c0016047:	c3                   	ret    

c0016048 <LogicalDisk::close(int, int, void*)>:
c0016048:	83 c8 ff             	or     eax,0xffffffff
c001604b:	c3                   	ret    

c001604c <LogicalDisk::~LogicalDisk()>:
c001604c:	83 ec 0c             	sub    esp,0xc
c001604f:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0016054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016058:	89 10                	mov    DWORD PTR [eax],edx
c001605a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605e:	83 ec 0c             	sub    esp,0xc
c0016061:	50                   	push   eax
c0016062:	e8 9f dc ff ff       	call   c0013d06 <Device::~Device()>
c0016067:	83 c4 10             	add    esp,0x10
c001606a:	90                   	nop
c001606b:	83 c4 0c             	add    esp,0xc
c001606e:	c3                   	ret    
c001606f:	90                   	nop

c0016070 <LogicalDisk::~LogicalDisk()>:
c0016070:	83 ec 0c             	sub    esp,0xc
c0016073:	83 ec 0c             	sub    esp,0xc
c0016076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001607a:	e8 cd ff ff ff       	call   c001604c <LogicalDisk::~LogicalDisk()>
c001607f:	83 c4 10             	add    esp,0x10
c0016082:	83 ec 08             	sub    esp,0x8
c0016085:	68 74 01 00 00       	push   0x174
c001608a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001608e:	e8 94 c8 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	83 c4 0c             	add    esp,0xc
c0016099:	c3                   	ret    

c001609a <LogicalDisk::open(int, int, void*)>:
c001609a:	83 ec 18             	sub    esp,0x18
c001609d:	68 34 b8 02 c0       	push   0xc002b834
c00160a2:	e8 f6 42 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00160a7:	83 c8 ff             	or     eax,0xffffffff
c00160aa:	83 c4 1c             	add    esp,0x1c
c00160ad:	c3                   	ret    

c00160ae <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00160ae:	53                   	push   ebx
c00160af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00160b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160bb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00160c1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00160c7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00160cd:	77 10                	ja     c00160df <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00160cf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00160d5:	89 d3                	mov    ebx,edx
c00160d7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00160dd:	72 05                	jb     c00160e4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00160df:	83 c8 ff             	or     eax,0xffffffff
c00160e2:	89 c2                	mov    edx,eax
c00160e4:	5b                   	pop    ebx
c00160e5:	c3                   	ret    

c00160e6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00160e6:	56                   	push   esi
c00160e7:	83 c8 ff             	or     eax,0xffffffff
c00160ea:	53                   	push   ebx
c00160eb:	89 c2                	mov    edx,eax
c00160ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160f1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00160f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160f9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160ff:	77 27                	ja     c0016128 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016101:	89 d8                	mov    eax,ebx
c0016103:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016109:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001610f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016114:	89 c2                	mov    edx,eax
c0016116:	73 10                	jae    c0016128 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016118:	89 c8                	mov    eax,ecx
c001611a:	89 da                	mov    edx,ebx
c001611c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016122:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016128:	5b                   	pop    ebx
c0016129:	5e                   	pop    esi
c001612a:	c3                   	ret    
c001612b:	90                   	nop

c001612c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001612c:	83 ec 1c             	sub    esp,0x1c
c001612f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016137:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001613b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001613f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016143:	89 04 24             	mov    DWORD PTR [esp],eax
c0016146:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001614a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001614e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016152:	83 ec 08             	sub    esp,0x8
c0016155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016159:	50                   	push   eax
c001615a:	e8 dd de ff ff       	call   c001403c <Device::Device(char const*)>
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0016167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001616b:	89 10                	mov    DWORD PTR [eax],edx
c001616d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016171:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001617c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016187:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016191:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016199:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001619d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00161a3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00161a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00161b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161b4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00161ba:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00161c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161c8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00161ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161dc:	90                   	nop
c00161dd:	83 c4 1c             	add    esp,0x1c
c00161e0:	c3                   	ret    
c00161e1:	90                   	nop

c00161e2 <LogicalDisk::assignDriveLetter()>:
c00161e2:	55                   	push   ebp
c00161e3:	57                   	push   edi
c00161e4:	56                   	push   esi
c00161e5:	53                   	push   ebx
c00161e6:	83 ec 14             	sub    esp,0x14
c00161e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161ed:	8b 3d 40 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec40
c00161f3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00161f9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00161fd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016203:	8b 3d 44 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec44
c0016209:	3c 01                	cmp    al,0x1
c001620b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001620f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016213:	19 c0                	sbb    eax,eax
c0016215:	83 e0 02             	and    eax,0x2
c0016218:	83 c0 41             	add    eax,0x41
c001621b:	0f be e8             	movsx  ebp,al
c001621e:	3c 43                	cmp    al,0x43
c0016220:	75 10                	jne    c0016232 <LogicalDisk::assignDriveLetter()+0x50>
c0016222:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016229:	75 5d                	jne    c0016288 <LogicalDisk::assignDriveLetter()+0xa6>
c001622b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016230:	75 56                	jne    c0016288 <LogicalDisk::assignDriveLetter()+0xa6>
c0016232:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016235:	ba 01 00 00 00       	mov    edx,0x1
c001623a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001623e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016242:	d3 e2                	shl    edx,cl
c0016244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016248:	89 d7                	mov    edi,edx
c001624a:	89 d6                	mov    esi,edx
c001624c:	c1 ff 1f             	sar    edi,0x1f
c001624f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016253:	21 f9                	and    ecx,edi
c0016255:	09 d1                	or     ecx,edx
c0016257:	75 2f                	jne    c0016288 <LogicalDisk::assignDriveLetter()+0xa6>
c0016259:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001625d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016261:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016267:	09 f2                	or     edx,esi
c0016269:	89 15 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,edx
c001626f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016273:	09 fa                	or     edx,edi
c0016275:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016279:	89 15 44 ec 02 c0    	mov    DWORD PTR ds:0xc002ec44,edx
c001627f:	89 1c bd 60 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd13a0],ebx
c0016286:	eb 08                	jmp    c0016290 <LogicalDisk::assignDriveLetter()+0xae>
c0016288:	45                   	inc    ebp
c0016289:	40                   	inc    eax
c001628a:	3c 5b                	cmp    al,0x5b
c001628c:	75 90                	jne    c001621e <LogicalDisk::assignDriveLetter()+0x3c>
c001628e:	31 c0                	xor    eax,eax
c0016290:	83 c4 14             	add    esp,0x14
c0016293:	5b                   	pop    ebx
c0016294:	5e                   	pop    esi
c0016295:	5f                   	pop    edi
c0016296:	5d                   	pop    ebp
c0016297:	c3                   	ret    

c0016298 <LogicalDisk::mount()>:
c0016298:	56                   	push   esi
c0016299:	53                   	push   ebx
c001629a:	53                   	push   ebx
c001629b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001629f:	8b 1d d4 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d4
c00162a5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00162af:	85 db                	test   ebx,ebx
c00162b1:	74 27                	je     c00162da <LogicalDisk::mount()+0x42>
c00162b3:	51                   	push   ecx
c00162b4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162bd:	83 e8 41             	sub    eax,0x41
c00162c0:	50                   	push   eax
c00162c1:	56                   	push   esi
c00162c2:	53                   	push   ebx
c00162c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162c6:	83 c4 10             	add    esp,0x10
c00162c9:	84 c0                	test   al,al
c00162cb:	74 08                	je     c00162d5 <LogicalDisk::mount()+0x3d>
c00162cd:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00162d3:	eb 07                	jmp    c00162dc <LogicalDisk::mount()+0x44>
c00162d5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00162d8:	eb d5                	jmp    c00162af <LogicalDisk::mount()+0x17>
c00162da:	31 c0                	xor    eax,eax
c00162dc:	5a                   	pop    edx
c00162dd:	5b                   	pop    ebx
c00162de:	5e                   	pop    esi
c00162df:	c3                   	ret    

c00162e0 <LogicalDisk::unmount()>:
c00162e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162e4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162ee:	c3                   	ret    
c00162ef:	90                   	nop

c00162f0 <LogicalDisk::eject()>:
c00162f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00162fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00162fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016300:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016303:	90                   	nop

c0016304 <LogicalDisk::unassignDriveLetter()>:
c0016304:	57                   	push   edi
c0016305:	56                   	push   esi
c0016306:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001630a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016311:	84 c9                	test   cl,cl
c0016313:	75 0f                	jne    c0016324 <LogicalDisk::unassignDriveLetter()+0x20>
c0016315:	c7 44 24 0c 58 b8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b858
c001631d:	5e                   	pop    esi
c001631e:	5f                   	pop    edi
c001631f:	e9 79 40 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c0016324:	83 e9 41             	sub    ecx,0x41
c0016327:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001632e:	b8 01 00 00 00       	mov    eax,0x1
c0016333:	c7 04 8d 60 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd13a0],0x0
c001633e:	d3 e0                	shl    eax,cl
c0016340:	89 c7                	mov    edi,eax
c0016342:	f7 d0                	not    eax
c0016344:	c1 ff 1f             	sar    edi,0x1f
c0016347:	21 05 40 ec 02 c0    	and    DWORD PTR ds:0xc002ec40,eax
c001634d:	89 fe                	mov    esi,edi
c001634f:	f7 d6                	not    esi
c0016351:	21 35 44 ec 02 c0    	and    DWORD PTR ds:0xc002ec44,esi
c0016357:	5e                   	pop    esi
c0016358:	5f                   	pop    edi
c0016359:	c3                   	ret    

c001635a <LogicalDisk::read(unsigned long long, int, void*)>:
c001635a:	57                   	push   edi
c001635b:	56                   	push   esi
c001635c:	53                   	push   ebx
c001635d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016361:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016365:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001636d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016373:	77 41                	ja     c00163b6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016375:	99                   	cdq    
c0016376:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001637c:	01 c8                	add    eax,ecx
c001637e:	11 da                	adc    edx,ebx
c0016380:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016386:	19 d7                	sbb    edi,edx
c0016388:	72 33                	jb     c00163bd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001638a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016390:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016396:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001639a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001639e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163ae:	5b                   	pop    ebx
c00163af:	5e                   	pop    esi
c00163b0:	5f                   	pop    edi
c00163b1:	e9 1c 0b 00 00       	jmp    c0016ed2 <VCache::read(unsigned long long, int, void*)>
c00163b6:	b8 05 00 00 00       	mov    eax,0x5
c00163bb:	eb 05                	jmp    c00163c2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00163bd:	b8 07 00 00 00       	mov    eax,0x7
c00163c2:	5b                   	pop    ebx
c00163c3:	5e                   	pop    esi
c00163c4:	5f                   	pop    edi
c00163c5:	c3                   	ret    

c00163c6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00163c6:	57                   	push   edi
c00163c7:	56                   	push   esi
c00163c8:	53                   	push   ebx
c00163c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00163cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163d9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163df:	77 41                	ja     c0016422 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00163e1:	99                   	cdq    
c00163e2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163e8:	01 c8                	add    eax,ecx
c00163ea:	11 da                	adc    edx,ebx
c00163ec:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163f2:	19 d7                	sbb    edi,edx
c00163f4:	72 33                	jb     c0016429 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00163f6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163fc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016402:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016406:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001640a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016410:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016416:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001641a:	5b                   	pop    ebx
c001641b:	5e                   	pop    esi
c001641c:	5f                   	pop    edi
c001641d:	e9 86 09 00 00       	jmp    c0016da8 <VCache::write(unsigned long long, int, void*)>
c0016422:	b8 05 00 00 00       	mov    eax,0x5
c0016427:	eb 05                	jmp    c001642e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016429:	b8 07 00 00 00       	mov    eax,0x7
c001642e:	5b                   	pop    ebx
c001642f:	5e                   	pop    esi
c0016430:	5f                   	pop    edi
c0016431:	c3                   	ret    

c0016432 <Mouse::Mouse(char const*)>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016439:	83 ec 08             	sub    esp,0x8
c001643c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016440:	50                   	push   eax
c0016441:	e8 f6 db ff ff       	call   c001403c <Device::Device(char const*)>
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	ba ac b8 02 c0       	mov    edx,0xc002b8ac
c001644e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016452:	89 10                	mov    DWORD PTR [eax],edx
c0016454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016458:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016462:	90                   	nop
c0016463:	83 c4 0c             	add    esp,0xc
c0016466:	c3                   	ret    
c0016467:	90                   	nop

c0016468 <Mouse::~Mouse()>:
c0016468:	83 ec 0c             	sub    esp,0xc
c001646b:	ba ac b8 02 c0       	mov    edx,0xc002b8ac
c0016470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016474:	89 10                	mov    DWORD PTR [eax],edx
c0016476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	50                   	push   eax
c001647e:	e8 83 d8 ff ff       	call   c0013d06 <Device::~Device()>
c0016483:	83 c4 10             	add    esp,0x10
c0016486:	90                   	nop
c0016487:	83 c4 0c             	add    esp,0xc
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <Mouse::~Mouse()>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	83 ec 0c             	sub    esp,0xc
c0016492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016496:	e8 cd ff ff ff       	call   c0016468 <Mouse::~Mouse()>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	83 ec 08             	sub    esp,0x8
c00164a1:	68 58 01 00 00       	push   0x158
c00164a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164aa:	e8 78 c4 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	83 c4 0c             	add    esp,0xc
c00164b5:	c3                   	ret    

c00164b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164b6:	55                   	push   ebp
c00164b7:	57                   	push   edi
c00164b8:	56                   	push   esi
c00164b9:	53                   	push   ebx
c00164ba:	81 ec 28 01 00 00    	sub    esp,0x128
c00164c0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00164c7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00164ce:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00164d5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00164dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00164e4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164eb:	e8 48 dc ff ff       	call   c0014138 <Device::getName()>
c00164f0:	5a                   	pop    edx
c00164f1:	59                   	pop    ecx
c00164f2:	50                   	push   eax
c00164f3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00164f7:	55                   	push   ebp
c00164f8:	e8 0f a3 fe ff       	call   c000080c <strcpy>
c00164fd:	5b                   	pop    ebx
c00164fe:	58                   	pop    eax
c00164ff:	68 d0 b8 02 c0       	push   0xc002b8d0
c0016504:	55                   	push   ebp
c0016505:	e8 42 a4 fe ff       	call   c000094c <strcat>
c001650a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016511:	e8 91 94 ff ff       	call   c000f9a7 <malloc>
c0016516:	83 c4 0c             	add    esp,0xc
c0016519:	89 c3                	mov    ebx,eax
c001651b:	57                   	push   edi
c001651c:	56                   	push   esi
c001651d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016521:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016525:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001652c:	55                   	push   ebp
c001652d:	50                   	push   eax
c001652e:	e8 f9 fb ff ff       	call   c001612c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016533:	83 c4 14             	add    esp,0x14
c0016536:	53                   	push   ebx
c0016537:	e8 a6 fc ff ff       	call   c00161e2 <LogicalDisk::assignDriveLetter()>
c001653c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001653f:	e8 54 fd ff ff       	call   c0016298 <LogicalDisk::mount()>
c0016544:	58                   	pop    eax
c0016545:	5a                   	pop    edx
c0016546:	53                   	push   ebx
c0016547:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001654e:	e8 e5 d8 ff ff       	call   c0013e38 <Device::addChild(Device*)>
c0016553:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016559:	5b                   	pop    ebx
c001655a:	5e                   	pop    esi
c001655b:	5f                   	pop    edi
c001655c:	5d                   	pop    ebp
c001655d:	c3                   	ret    

c001655e <createPartitionsForDisk(PhysicalDisk*)>:
c001655e:	55                   	push   ebp
c001655f:	57                   	push   edi
c0016560:	56                   	push   esi
c0016561:	53                   	push   ebx
c0016562:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016568:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001656f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016575:	3d 00 02 00 00       	cmp    eax,0x200
c001657a:	74 27                	je     c00165a3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001657c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016582:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016588:	83 ec 10             	sub    esp,0x10
c001658b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001658f:	99                   	cdq    
c0016590:	c1 e6 0a             	shl    esi,0xa
c0016593:	52                   	push   edx
c0016594:	89 fd                	mov    ebp,edi
c0016596:	50                   	push   eax
c0016597:	55                   	push   ebp
c0016598:	56                   	push   esi
c0016599:	e8 36 08 01 00       	call   c0026dd4 <__udivdi3>
c001659e:	e9 b1 00 00 00       	jmp    c0016654 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165a3:	83 ec 0c             	sub    esp,0xc
c00165a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165a8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00165ac:	56                   	push   esi
c00165ad:	6a 01                	push   0x1
c00165af:	6a 00                	push   0x0
c00165b1:	6a 00                	push   0x0
c00165b3:	53                   	push   ebx
c00165b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00165b7:	83 c4 20             	add    esp,0x20
c00165ba:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00165c2:	75 0a                	jne    c00165ce <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00165c4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00165cc:	74 2c                	je     c00165fa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00165ce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165d4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165da:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165e0:	83 ec 10             	sub    esp,0x10
c00165e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165e7:	89 f7                	mov    edi,esi
c00165e9:	c1 e0 0a             	shl    eax,0xa
c00165ec:	c1 ff 1f             	sar    edi,0x1f
c00165ef:	57                   	push   edi
c00165f0:	56                   	push   esi
c00165f1:	52                   	push   edx
c00165f2:	50                   	push   eax
c00165f3:	e8 dc 07 01 00       	call   c0026dd4 <__udivdi3>
c00165f8:	eb 5a                	jmp    c0016654 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165fa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016601:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016608:	83 e1 7f             	and    ecx,0x7f
c001660b:	83 e0 7f             	and    eax,0x7f
c001660e:	01 c1                	add    ecx,eax
c0016610:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016617:	83 e0 7f             	and    eax,0x7f
c001661a:	01 c1                	add    ecx,eax
c001661c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016623:	83 e0 7f             	and    eax,0x7f
c0016626:	00 c1                	add    cl,al
c0016628:	74 41                	je     c001666b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001662a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016630:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016636:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001663c:	83 ec 10             	sub    esp,0x10
c001663f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016643:	89 f7                	mov    edi,esi
c0016645:	c1 e0 0a             	shl    eax,0xa
c0016648:	c1 ff 1f             	sar    edi,0x1f
c001664b:	57                   	push   edi
c001664c:	56                   	push   esi
c001664d:	52                   	push   edx
c001664e:	50                   	push   eax
c001664f:	e8 80 07 01 00       	call   c0026dd4 <__udivdi3>
c0016654:	83 c4 14             	add    esp,0x14
c0016657:	52                   	push   edx
c0016658:	50                   	push   eax
c0016659:	6a 00                	push   0x0
c001665b:	6a 00                	push   0x0
c001665d:	53                   	push   ebx
c001665e:	e8 53 fe ff ff       	call   c00164b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016663:	83 c4 20             	add    esp,0x20
c0016666:	e9 79 01 00 00       	jmp    c00167e4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001666b:	89 f0                	mov    eax,esi
c001666d:	31 f6                	xor    esi,esi
c001666f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016676:	75 02                	jne    c001667a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016678:	89 f1                	mov    ecx,esi
c001667a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016681:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016688:	c1 e2 08             	shl    edx,0x8
c001668b:	c1 e7 10             	shl    edi,0x10
c001668e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016696:	09 fa                	or     edx,edi
c0016698:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00166a0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00166a7:	83 c0 10             	add    eax,0x10
c00166aa:	09 fa                	or     edx,edi
c00166ac:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00166b3:	c1 e7 18             	shl    edi,0x18
c00166b6:	09 fa                	or     edx,edi
c00166b8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00166bf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00166c3:	c1 e7 10             	shl    edi,0x10
c00166c6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00166cd:	c1 e2 08             	shl    edx,0x8
c00166d0:	09 fa                	or     edx,edi
c00166d2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00166d9:	09 fa                	or     edx,edi
c00166db:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00166e2:	c1 e7 18             	shl    edi,0x18
c00166e5:	09 fa                	or     edx,edi
c00166e7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00166eb:	46                   	inc    esi
c00166ec:	83 fe 04             	cmp    esi,0x4
c00166ef:	0f 85 7a ff ff ff    	jne    c001666f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00166f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f9:	83 f0 01             	xor    eax,0x1
c00166fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016700:	75 57                	jne    c0016759 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016706:	83 f0 01             	xor    eax,0x1
c0016709:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001670d:	75 4a                	jne    c0016759 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001670f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016713:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001671b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016723:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016729:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001672f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016735:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016739:	89 f7                	mov    edi,esi
c001673b:	c1 e0 0a             	shl    eax,0xa
c001673e:	c1 ff 1f             	sar    edi,0x1f
c0016741:	57                   	push   edi
c0016742:	56                   	push   esi
c0016743:	52                   	push   edx
c0016744:	50                   	push   eax
c0016745:	e8 8a 06 01 00       	call   c0026dd4 <__udivdi3>
c001674a:	83 c4 10             	add    esp,0x10
c001674d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016751:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016755:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016759:	84 c9                	test   cl,cl
c001675b:	74 53                	je     c00167b0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001675d:	0f b6 c9             	movzx  ecx,cl
c0016760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016764:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016768:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001676c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016774:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016778:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001677c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016780:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016784:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001678c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016790:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016794:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016798:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001679c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00167a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167a8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00167ac:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00167b0:	31 ed                	xor    ebp,ebp
c00167b2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00167b6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00167ba:	89 f8                	mov    eax,edi
c00167bc:	09 f0                	or     eax,esi
c00167be:	74 1e                	je     c00167de <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167c0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00167c4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00167c8:	89 d1                	mov    ecx,edx
c00167ca:	09 c1                	or     ecx,eax
c00167cc:	74 10                	je     c00167de <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167ce:	83 ec 0c             	sub    esp,0xc
c00167d1:	57                   	push   edi
c00167d2:	56                   	push   esi
c00167d3:	52                   	push   edx
c00167d4:	50                   	push   eax
c00167d5:	53                   	push   ebx
c00167d6:	e8 db fc ff ff       	call   c00164b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00167db:	83 c4 20             	add    esp,0x20
c00167de:	45                   	inc    ebp
c00167df:	83 fd 04             	cmp    ebp,0x4
c00167e2:	75 ce                	jne    c00167b2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00167e4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00167ea:	5b                   	pop    ebx
c00167eb:	5e                   	pop    esi
c00167ec:	5f                   	pop    edi
c00167ed:	5d                   	pop    ebp
c00167ee:	c3                   	ret    
c00167ef:	90                   	nop

c00167f0 <Serial::Serial(char const*)>:
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f7:	83 ec 08             	sub    esp,0x8
c00167fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167fe:	50                   	push   eax
c00167ff:	e8 38 d8 ff ff       	call   c001403c <Device::Device(char const*)>
c0016804:	83 c4 10             	add    esp,0x10
c0016807:	ba e4 b8 02 c0       	mov    edx,0xc002b8e4
c001680c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016810:	89 10                	mov    DWORD PTR [eax],edx
c0016812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016816:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016820:	90                   	nop
c0016821:	83 c4 0c             	add    esp,0xc
c0016824:	c3                   	ret    
c0016825:	90                   	nop

c0016826 <Serial::~Serial()>:
c0016826:	83 ec 0c             	sub    esp,0xc
c0016829:	ba e4 b8 02 c0       	mov    edx,0xc002b8e4
c001682e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016832:	89 10                	mov    DWORD PTR [eax],edx
c0016834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016838:	83 ec 0c             	sub    esp,0xc
c001683b:	50                   	push   eax
c001683c:	e8 c5 d4 ff ff       	call   c0013d06 <Device::~Device()>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	90                   	nop
c0016845:	83 c4 0c             	add    esp,0xc
c0016848:	c3                   	ret    
c0016849:	90                   	nop

c001684a <Serial::~Serial()>:
c001684a:	83 ec 0c             	sub    esp,0xc
c001684d:	83 ec 0c             	sub    esp,0xc
c0016850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016854:	e8 cd ff ff ff       	call   c0016826 <Serial::~Serial()>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	83 ec 08             	sub    esp,0x8
c001685f:	68 58 01 00 00       	push   0x158
c0016864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016868:	e8 ba c0 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	83 c4 0c             	add    esp,0xc
c0016873:	c3                   	ret    

c0016874 <Timer::Timer(char const*)>:
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687b:	83 ec 08             	sub    esp,0x8
c001687e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016882:	50                   	push   eax
c0016883:	e8 b4 d7 ff ff       	call   c001403c <Device::Device(char const*)>
c0016888:	83 c4 10             	add    esp,0x10
c001688b:	ba 28 b9 02 c0       	mov    edx,0xc002b928
c0016890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016894:	89 10                	mov    DWORD PTR [eax],edx
c0016896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001689a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00168a4:	90                   	nop
c00168a5:	83 c4 0c             	add    esp,0xc
c00168a8:	c3                   	ret    
c00168a9:	90                   	nop

c00168aa <Timer::~Timer()>:
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	ba 28 b9 02 c0       	mov    edx,0xc002b928
c00168b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b6:	89 10                	mov    DWORD PTR [eax],edx
c00168b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	50                   	push   eax
c00168c0:	e8 41 d4 ff ff       	call   c0013d06 <Device::~Device()>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	90                   	nop
c00168c9:	83 c4 0c             	add    esp,0xc
c00168cc:	c3                   	ret    
c00168cd:	90                   	nop

c00168ce <Timer::~Timer()>:
c00168ce:	83 ec 0c             	sub    esp,0xc
c00168d1:	83 ec 0c             	sub    esp,0xc
c00168d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168d8:	e8 cd ff ff ff       	call   c00168aa <Timer::~Timer()>
c00168dd:	83 c4 10             	add    esp,0x10
c00168e0:	83 ec 08             	sub    esp,0x8
c00168e3:	68 5c 01 00 00       	push   0x15c
c00168e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ec:	e8 36 c0 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	83 c4 0c             	add    esp,0xc
c00168f7:	c3                   	ret    

c00168f8 <Timer::read()>:
c00168f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016902:	c3                   	ret    

c0016903 <timerHandler(unsigned long long)>:
c0016903:	55                   	push   ebp
c0016904:	57                   	push   edi
c0016905:	56                   	push   esi
c0016906:	53                   	push   ebx
c0016907:	83 ec 0c             	sub    esp,0xc
c001690a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001690e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016912:	01 35 d0 ec 02 c0    	add    DWORD PTR ds:0xc002ecd0,esi
c0016918:	11 3d d4 ec 02 c0    	adc    DWORD PTR ds:0xc002ecd4,edi
c001691e:	80 3d 6d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e66d,0x0
c0016925:	0f 84 42 01 00 00    	je     c0016a6d <timerHandler(unsigned long long)+0x16a>
c001692b:	fa                   	cli    
c001692c:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0016932:	83 ec 0c             	sub    esp,0xc
c0016935:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001693b:	68 78 fb 02 c0       	push   0xc002fb78
c0016940:	e8 e9 24 01 00       	call   c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	84 c0                	test   al,al
c001694a:	0f 85 a2 00 00 00    	jne    c00169f2 <timerHandler(unsigned long long)+0xef>
c0016950:	83 ec 0c             	sub    esp,0xc
c0016953:	68 78 fb 02 c0       	push   0xc002fb78
c0016958:	e8 ed 24 01 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001695d:	83 c4 10             	add    esp,0x10
c0016960:	89 c3                	mov    ebx,eax
c0016962:	83 ec 0c             	sub    esp,0xc
c0016965:	68 78 fb 02 c0       	push   0xc002fb78
c001696a:	e8 db 24 01 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001696f:	c7 04 24 78 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb78
c0016976:	89 c5                	mov    ebp,eax
c0016978:	e8 d5 24 01 00       	call   c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001697d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016980:	83 c4 10             	add    esp,0x10
c0016983:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016986:	39 15 d0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecd0,edx
c001698c:	a1 d4 ec 02 c0       	mov    eax,ds:0xc002ecd4
c0016991:	19 c8                	sbb    eax,ecx
c0016993:	72 21                	jb     c00169b6 <timerHandler(unsigned long long)+0xb3>
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	55                   	push   ebp
c0016999:	e8 23 7a 00 00       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	39 eb                	cmp    ebx,ebp
c00169a3:	75 21                	jne    c00169c6 <timerHandler(unsigned long long)+0xc3>
c00169a5:	83 ec 0c             	sub    esp,0xc
c00169a8:	68 78 fb 02 c0       	push   0xc002fb78
c00169ad:	e8 98 24 01 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169b2:	89 c3                	mov    ebx,eax
c00169b4:	eb 0d                	jmp    c00169c3 <timerHandler(unsigned long long)+0xc0>
c00169b6:	50                   	push   eax
c00169b7:	50                   	push   eax
c00169b8:	55                   	push   ebp
c00169b9:	68 78 fb 02 c0       	push   0xc002fb78
c00169be:	e8 3d 25 01 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169c3:	83 c4 10             	add    esp,0x10
c00169c6:	83 ec 0c             	sub    esp,0xc
c00169c9:	68 78 fb 02 c0       	push   0xc002fb78
c00169ce:	e8 5b 24 01 00       	call   c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169d3:	83 c4 10             	add    esp,0x10
c00169d6:	84 c0                	test   al,al
c00169d8:	75 18                	jne    c00169f2 <timerHandler(unsigned long long)+0xef>
c00169da:	83 ec 0c             	sub    esp,0xc
c00169dd:	68 78 fb 02 c0       	push   0xc002fb78
c00169e2:	e8 63 24 01 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	39 d8                	cmp    eax,ebx
c00169ec:	0f 85 70 ff ff ff    	jne    c0016962 <timerHandler(unsigned long long)+0x5f>
c00169f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169f7:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00169fb:	74 3d                	je     c0016a3a <timerHandler(unsigned long long)+0x137>
c00169fd:	80 3d 6c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e66c,0x0
c0016a04:	74 34                	je     c0016a3a <timerHandler(unsigned long long)+0x137>
c0016a06:	fa                   	cli    
c0016a07:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0016a0d:	31 d2                	xor    edx,edx
c0016a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a14:	89 f9                	mov    ecx,edi
c0016a16:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a1e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a21:	39 c6                	cmp    esi,eax
c0016a23:	19 d1                	sbb    ecx,edx
c0016a25:	72 05                	jb     c0016a2c <timerHandler(unsigned long long)+0x129>
c0016a27:	e8 03 75 00 00       	call   c001df2f <schedule()>
c0016a2c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0016a31:	48                   	dec    eax
c0016a32:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0016a37:	75 01                	jne    c0016a3a <timerHandler(unsigned long long)+0x137>
c0016a39:	fb                   	sti    
c0016a3a:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c0016a3f:	48                   	dec    eax
c0016a40:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c0016a45:	75 18                	jne    c0016a5f <timerHandler(unsigned long long)+0x15c>
c0016a47:	83 3d 60 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb60,0x0
c0016a4e:	74 0f                	je     c0016a5f <timerHandler(unsigned long long)+0x15c>
c0016a50:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c0016a5a:	e8 d0 74 00 00       	call   c001df2f <schedule()>
c0016a5f:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0016a64:	48                   	dec    eax
c0016a65:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0016a6a:	75 01                	jne    c0016a6d <timerHandler(unsigned long long)+0x16a>
c0016a6c:	fb                   	sti    
c0016a6d:	83 c4 0c             	add    esp,0xc
c0016a70:	5b                   	pop    ebx
c0016a71:	5e                   	pop    esi
c0016a72:	5f                   	pop    edi
c0016a73:	5d                   	pop    ebp
c0016a74:	c3                   	ret    

c0016a75 <setupTimer(int)>:
c0016a75:	57                   	push   edi
c0016a76:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016a7b:	56                   	push   esi
c0016a7c:	53                   	push   ebx
c0016a7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a81:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a87:	83 ec 0c             	sub    esp,0xc
c0016a8a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a90:	e8 a3 d6 ff ff       	call   c0014138 <Device::getName()>
c0016a95:	83 c4 10             	add    esp,0x10
c0016a98:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016a9b:	0f 85 8d 00 00 00    	jne    c0016b2e <setupTimer(int)+0xb9>
c0016aa1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016aa6:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016aad:	74 7f                	je     c0016b2e <setupTimer(int)+0xb9>
c0016aaf:	83 ec 0c             	sub    esp,0xc
c0016ab2:	68 5c 01 00 00       	push   0x15c
c0016ab7:	e8 eb 8e ff ff       	call   c000f9a7 <malloc>
c0016abc:	89 04 24             	mov    DWORD PTR [esp],eax
c0016abf:	89 c3                	mov    ebx,eax
c0016ac1:	e8 e2 fe 00 00       	call   c00269a8 <PIT::PIT()>
c0016ac6:	59                   	pop    ecx
c0016ac7:	5f                   	pop    edi
c0016ac8:	53                   	push   ebx
c0016ac9:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0016acf:	e8 64 d3 ff ff       	call   c0013e38 <Device::addChild(Device*)>
c0016ad4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ad6:	6a 00                	push   0x0
c0016ad8:	6a 00                	push   0x0
c0016ada:	56                   	push   esi
c0016adb:	53                   	push   ebx
c0016adc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016adf:	83 c4 14             	add    esp,0x14
c0016ae2:	68 60 01 00 00       	push   0x160
c0016ae7:	e8 bb 8e ff ff       	call   c000f9a7 <malloc>
c0016aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aef:	89 c7                	mov    edi,eax
c0016af1:	e8 62 fd 00 00       	call   c0026858 <APICTimer::APICTimer()>
c0016af6:	6a 00                	push   0x0
c0016af8:	6a 00                	push   0x0
c0016afa:	56                   	push   esi
c0016afb:	57                   	push   edi
c0016afc:	e8 59 fc 00 00       	call   c002675a <APICTimer::open(int, int, void*)>
c0016b01:	83 c4 20             	add    esp,0x20
c0016b04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b06:	6a 00                	push   0x0
c0016b08:	6a 00                	push   0x0
c0016b0a:	6a 00                	push   0x0
c0016b0c:	53                   	push   ebx
c0016b0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b10:	58                   	pop    eax
c0016b11:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016b16:	5a                   	pop    edx
c0016b17:	57                   	push   edi
c0016b18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b1e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b24:	e8 0f d3 ff ff       	call   c0013e38 <Device::addChild(Device*)>
c0016b29:	83 c4 10             	add    esp,0x10
c0016b2c:	eb 33                	jmp    c0016b61 <setupTimer(int)+0xec>
c0016b2e:	83 ec 0c             	sub    esp,0xc
c0016b31:	68 5c 01 00 00       	push   0x15c
c0016b36:	e8 6c 8e ff ff       	call   c000f9a7 <malloc>
c0016b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b3e:	89 c3                	mov    ebx,eax
c0016b40:	e8 63 fe 00 00       	call   c00269a8 <PIT::PIT()>
c0016b45:	58                   	pop    eax
c0016b46:	5a                   	pop    edx
c0016b47:	53                   	push   ebx
c0016b48:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0016b4e:	e8 e5 d2 ff ff       	call   c0013e38 <Device::addChild(Device*)>
c0016b53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b55:	6a 00                	push   0x0
c0016b57:	6a 00                	push   0x0
c0016b59:	56                   	push   esi
c0016b5a:	53                   	push   ebx
c0016b5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b5e:	83 c4 20             	add    esp,0x20
c0016b61:	89 d8                	mov    eax,ebx
c0016b63:	5b                   	pop    ebx
c0016b64:	5e                   	pop    esi
c0016b65:	5f                   	pop    edi
c0016b66:	c3                   	ret    
c0016b67:	90                   	nop

c0016b68 <VCache::VCache(PhysicalDisk*)>:
c0016b68:	53                   	push   ebx
c0016b69:	83 ec 18             	sub    esp,0x18
c0016b6c:	ba 78 ba 02 c0       	mov    edx,0xc002ba78
c0016b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b75:	89 10                	mov    DWORD PTR [eax],edx
c0016b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b7b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b86:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b91:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016b98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016b9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016baa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016bcf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bda:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bf9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016c01:	83 ec 0c             	sub    esp,0xc
c0016c04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c08:	e8 9a 8d ff ff       	call   c000f9a7 <malloc>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	89 c3                	mov    ebx,eax
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	53                   	push   ebx
c0016c16:	e8 dd 70 00 00       	call   c001dcf8 <Mutex::Mutex()>
c0016c1b:	83 c4 10             	add    esp,0x10
c0016c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c22:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c2d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c34:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c3f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c50:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c60:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c63:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c72:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c78:	05 00 01 00 00       	add    eax,0x100
c0016c7d:	c1 e0 04             	shl    eax,0x4
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	50                   	push   eax
c0016c84:	e8 1e 8d ff ff       	call   c000f9a7 <malloc>
c0016c89:	83 c4 10             	add    esp,0x10
c0016c8c:	89 c2                	mov    edx,eax
c0016c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c99:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ca8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cb2:	c1 e0 07             	shl    eax,0x7
c0016cb5:	83 ec 0c             	sub    esp,0xc
c0016cb8:	50                   	push   eax
c0016cb9:	e8 e9 8c ff ff       	call   c000f9a7 <malloc>
c0016cbe:	83 c4 10             	add    esp,0x10
c0016cc1:	89 c2                	mov    edx,eax
c0016cc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016cca:	90                   	nop
c0016ccb:	83 c4 18             	add    esp,0x18
c0016cce:	5b                   	pop    ebx
c0016ccf:	c3                   	ret    

c0016cd0 <VCache::invalidateReadBuffer()>:
c0016cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cd4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016cda:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016cde:	c3                   	ret    
c0016cdf:	90                   	nop

c0016ce0 <VCache::writeWriteBuffer()>:
c0016ce0:	53                   	push   ebx
c0016ce1:	83 ec 0c             	sub    esp,0xc
c0016ce4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016ce8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016ceb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016cee:	68 50 b9 02 c0       	push   0xc002b950
c0016cf3:	e8 07 bd ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016cf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cfb:	5a                   	pop    edx
c0016cfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cfe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d01:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d04:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016d0a:	50                   	push   eax
c0016d0b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d0e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016d15:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016d1c:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016d20:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016d27:	83 c4 28             	add    esp,0x28
c0016d2a:	5b                   	pop    ebx
c0016d2b:	c3                   	ret    

c0016d2c <VCache::~VCache()>:
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	ba 78 ba 02 c0       	mov    edx,0xc002ba78
c0016d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d38:	89 10                	mov    DWORD PTR [eax],edx
c0016d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d41:	84 c0                	test   al,al
c0016d43:	74 0f                	je     c0016d54 <VCache::~VCache()+0x28>
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4c:	e8 8f ff ff ff       	call   c0016ce0 <VCache::writeWriteBuffer()>
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d5b:	83 ec 0c             	sub    esp,0xc
c0016d5e:	50                   	push   eax
c0016d5f:	e8 53 8c ff ff       	call   c000f9b7 <free>
c0016d64:	83 c4 10             	add    esp,0x10
c0016d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	50                   	push   eax
c0016d72:	e8 40 8c ff ff       	call   c000f9b7 <free>
c0016d77:	83 c4 10             	add    esp,0x10
c0016d7a:	90                   	nop
c0016d7b:	83 c4 0c             	add    esp,0xc
c0016d7e:	c3                   	ret    
c0016d7f:	90                   	nop

c0016d80 <VCache::~VCache()>:
c0016d80:	83 ec 0c             	sub    esp,0xc
c0016d83:	83 ec 0c             	sub    esp,0xc
c0016d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d8a:	e8 9d ff ff ff       	call   c0016d2c <VCache::~VCache()>
c0016d8f:	83 c4 10             	add    esp,0x10
c0016d92:	83 ec 08             	sub    esp,0x8
c0016d95:	6a 44                	push   0x44
c0016d97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9b:	e8 87 bb ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0016da0:	83 c4 10             	add    esp,0x10
c0016da3:	83 c4 0c             	add    esp,0xc
c0016da6:	c3                   	ret    
c0016da7:	90                   	nop

c0016da8 <VCache::write(unsigned long long, int, void*)>:
c0016da8:	55                   	push   ebp
c0016da9:	57                   	push   edi
c0016daa:	56                   	push   esi
c0016dab:	53                   	push   ebx
c0016dac:	83 ec 18             	sub    esp,0x18
c0016daf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016db3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016db7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016dbb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016dbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dc2:	e8 77 74 00 00       	call   c001e23e <Semaphore::acquire()>
c0016dc7:	c7 04 24 74 b9 02 c0 	mov    DWORD PTR [esp],0xc002b974
c0016dce:	e8 2c bc ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016dda:	74 0c                	je     c0016de8 <VCache::write(unsigned long long, int, void*)+0x40>
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	53                   	push   ebx
c0016de0:	e8 eb fe ff ff       	call   c0016cd0 <VCache::invalidateReadBuffer()>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016dec:	74 66                	je     c0016e54 <VCache::write(unsigned long long, int, void*)+0xac>
c0016dee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016df1:	99                   	cdq    
c0016df2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016df5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016df8:	31 f0                	xor    eax,esi
c0016dfa:	89 d1                	mov    ecx,edx
c0016dfc:	89 ca                	mov    edx,ecx
c0016dfe:	31 fa                	xor    edx,edi
c0016e00:	09 d0                	or     eax,edx
c0016e02:	75 44                	jne    c0016e48 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016e04:	83 fd 01             	cmp    ebp,0x1
c0016e07:	75 3f                	jne    c0016e48 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016e09:	83 ec 0c             	sub    esp,0xc
c0016e0c:	68 9b b9 02 c0       	push   0xc002b99b
c0016e11:	e8 e9 bb ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016e16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e19:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016e1c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e22:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e26:	0f af f9             	imul   edi,ecx
c0016e29:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016e2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e2e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	40                   	inc    eax
c0016e35:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016e38:	83 c0 80             	add    eax,0xffffff80
c0016e3b:	75 75                	jne    c0016eb2 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e3d:	83 ec 0c             	sub    esp,0xc
c0016e40:	53                   	push   ebx
c0016e41:	e8 9a fe ff ff       	call   c0016ce0 <VCache::writeWriteBuffer()>
c0016e46:	eb 41                	jmp    c0016e89 <VCache::write(unsigned long long, int, void*)+0xe1>
c0016e48:	83 ec 0c             	sub    esp,0xc
c0016e4b:	53                   	push   ebx
c0016e4c:	e8 8f fe ff ff       	call   c0016ce0 <VCache::writeWriteBuffer()>
c0016e51:	83 c4 10             	add    esp,0x10
c0016e54:	83 fd 7f             	cmp    ebp,0x7f
c0016e57:	7f 35                	jg     c0016e8e <VCache::write(unsigned long long, int, void*)+0xe6>
c0016e59:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e5c:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e5f:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e62:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e66:	56                   	push   esi
c0016e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e6b:	6a 01                	push   0x1
c0016e6d:	68 b1 b9 02 c0       	push   0xc002b9b1
c0016e72:	e8 88 bb ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016e77:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e7a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016e7d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	eb 24                	jmp    c0016eb2 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e8e:	52                   	push   edx
c0016e8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e93:	55                   	push   ebp
c0016e94:	68 d2 b9 02 c0       	push   0xc002b9d2
c0016e99:	e8 61 bb ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016e9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ea1:	59                   	pop    ecx
c0016ea2:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ea4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016ea8:	55                   	push   ebp
c0016ea9:	57                   	push   edi
c0016eaa:	56                   	push   esi
c0016eab:	50                   	push   eax
c0016eac:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016eaf:	83 c4 20             	add    esp,0x20
c0016eb2:	83 ec 0c             	sub    esp,0xc
c0016eb5:	68 ef b9 02 c0       	push   0xc002b9ef
c0016eba:	e8 40 bb ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016ebf:	58                   	pop    eax
c0016ec0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ec3:	e8 e2 79 00 00       	call   c001e8aa <Semaphore::release()>
c0016ec8:	83 c4 1c             	add    esp,0x1c
c0016ecb:	31 c0                	xor    eax,eax
c0016ecd:	5b                   	pop    ebx
c0016ece:	5e                   	pop    esi
c0016ecf:	5f                   	pop    edi
c0016ed0:	5d                   	pop    ebp
c0016ed1:	c3                   	ret    

c0016ed2 <VCache::read(unsigned long long, int, void*)>:
c0016ed2:	55                   	push   ebp
c0016ed3:	57                   	push   edi
c0016ed4:	56                   	push   esi
c0016ed5:	53                   	push   ebx
c0016ed6:	83 ec 28             	sub    esp,0x28
c0016ed9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016edd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016ee1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ee9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016eed:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016ef1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016ef5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ef8:	e8 41 73 00 00       	call   c001e23e <Semaphore::acquire()>
c0016efd:	c7 04 24 0f ba 02 c0 	mov    DWORD PTR [esp],0xc002ba0f
c0016f04:	e8 f6 ba ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016f09:	83 c4 10             	add    esp,0x10
c0016f0c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016f10:	74 0c                	je     c0016f1e <VCache::read(unsigned long long, int, void*)+0x4c>
c0016f12:	83 ec 0c             	sub    esp,0xc
c0016f15:	53                   	push   ebx
c0016f16:	e8 c5 fd ff ff       	call   c0016ce0 <VCache::writeWriteBuffer()>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	83 fe 01             	cmp    esi,0x1
c0016f21:	75 79                	jne    c0016f9c <VCache::read(unsigned long long, int, void*)+0xca>
c0016f23:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f26:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016f2d:	75 6d                	jne    c0016f9c <VCache::read(unsigned long long, int, void*)+0xca>
c0016f2f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f32:	89 d1                	mov    ecx,edx
c0016f34:	f7 d9                	neg    ecx
c0016f36:	89 cf                	mov    edi,ecx
c0016f38:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f3c:	c1 ff 1f             	sar    edi,0x1f
c0016f3f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016f42:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f46:	89 ce                	mov    esi,ecx
c0016f48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f4c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f50:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f54:	89 cf                	mov    edi,ecx
c0016f56:	74 0a                	je     c0016f62 <VCache::read(unsigned long long, int, void*)+0x90>
c0016f58:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f5b:	75 05                	jne    c0016f62 <VCache::read(unsigned long long, int, void*)+0x90>
c0016f5d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f60:	74 1c                	je     c0016f7e <VCache::read(unsigned long long, int, void*)+0xac>
c0016f62:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f66:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016f69:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f71:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f74:	52                   	push   edx
c0016f75:	57                   	push   edi
c0016f76:	56                   	push   esi
c0016f77:	50                   	push   eax
c0016f78:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f7b:	83 c4 20             	add    esp,0x20
c0016f7e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f81:	89 ef                	mov    edi,ebp
c0016f83:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f89:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f8c:	8d 70 ff             	lea    esi,[eax-0x1]
c0016f8f:	23 34 24             	and    esi,DWORD PTR [esp]
c0016f92:	0f af f1             	imul   esi,ecx
c0016f95:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016f98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f9a:	eb 30                	jmp    c0016fcc <VCache::read(unsigned long long, int, void*)+0xfa>
c0016f9c:	83 ec 0c             	sub    esp,0xc
c0016f9f:	53                   	push   ebx
c0016fa0:	e8 2b fd ff ff       	call   c0016cd0 <VCache::invalidateReadBuffer()>
c0016fa5:	83 c4 0c             	add    esp,0xc
c0016fa8:	55                   	push   ebp
c0016fa9:	56                   	push   esi
c0016faa:	68 35 ba 02 c0       	push   0xc002ba35
c0016faf:	e8 4b ba ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016fb4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fb9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016fbc:	56                   	push   esi
c0016fbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fc5:	50                   	push   eax
c0016fc6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016fc9:	83 c4 20             	add    esp,0x20
c0016fcc:	83 ec 0c             	sub    esp,0xc
c0016fcf:	68 51 ba 02 c0       	push   0xc002ba51
c0016fd4:	e8 26 ba ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0016fd9:	58                   	pop    eax
c0016fda:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fdd:	e8 c8 78 00 00       	call   c001e8aa <Semaphore::release()>
c0016fe2:	83 c4 2c             	add    esp,0x2c
c0016fe5:	31 c0                	xor    eax,eax
c0016fe7:	5b                   	pop    ebx
c0016fe8:	5e                   	pop    esi
c0016fe9:	5f                   	pop    edi
c0016fea:	5d                   	pop    ebp
c0016feb:	c3                   	ret    

c0016fec <Video::putrect(int, int, int, int, unsigned int)>:
c0016fec:	55                   	push   ebp
c0016fed:	57                   	push   edi
c0016fee:	56                   	push   esi
c0016fef:	53                   	push   ebx
c0016ff0:	83 ec 1c             	sub    esp,0x1c
c0016ff3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ff7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ffb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016fff:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017003:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001700b:	01 df                	add    edi,ebx
c001700d:	39 fb                	cmp    ebx,edi
c001700f:	7d 1f                	jge    c0017030 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017011:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017015:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017019:	7d 12                	jge    c001702d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001701b:	8b 16                	mov    edx,DWORD PTR [esi]
c001701d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017021:	53                   	push   ebx
c0017022:	55                   	push   ebp
c0017023:	45                   	inc    ebp
c0017024:	56                   	push   esi
c0017025:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	eb e8                	jmp    c0017015 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001702d:	43                   	inc    ebx
c001702e:	eb dd                	jmp    c001700d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017030:	83 c4 1c             	add    esp,0x1c
c0017033:	5b                   	pop    ebx
c0017034:	5e                   	pop    esi
c0017035:	5f                   	pop    edi
c0017036:	5d                   	pop    ebp
c0017037:	c3                   	ret    

c0017038 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017038:	55                   	push   ebp
c0017039:	57                   	push   edi
c001703a:	31 ff                	xor    edi,edi
c001703c:	56                   	push   esi
c001703d:	53                   	push   ebx
c001703e:	83 ec 1c             	sub    esp,0x1c
c0017041:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017045:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017049:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017050:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017055:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017059:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001705d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017061:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017064:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017068:	01 f9                	add    ecx,edi
c001706a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001706e:	7d 2f                	jge    c001709f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017070:	31 f6                	xor    esi,esi
c0017072:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017076:	01 f2                	add    edx,esi
c0017078:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001707c:	7d 1a                	jge    c0017098 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001707e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017081:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017084:	46                   	inc    esi
c0017085:	51                   	push   ecx
c0017086:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001708a:	52                   	push   edx
c001708b:	55                   	push   ebp
c001708c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001708f:	83 c4 10             	add    esp,0x10
c0017092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017096:	eb da                	jmp    c0017072 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017098:	47                   	inc    edi
c0017099:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001709d:	eb c5                	jmp    c0017064 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001709f:	83 c4 1c             	add    esp,0x1c
c00170a2:	5b                   	pop    ebx
c00170a3:	5e                   	pop    esi
c00170a4:	5f                   	pop    edi
c00170a5:	5d                   	pop    ebp
c00170a6:	c3                   	ret    
c00170a7:	90                   	nop

c00170a8 <Video::blit(unsigned int*, int, int, int, int)>:
c00170a8:	55                   	push   ebp
c00170a9:	57                   	push   edi
c00170aa:	56                   	push   esi
c00170ab:	53                   	push   ebx
c00170ac:	83 ec 1c             	sub    esp,0x1c
c00170af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00170b7:	85 c0                	test   eax,eax
c00170b9:	79 02                	jns    c00170bd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00170bb:	31 c0                	xor    eax,eax
c00170bd:	c1 e0 02             	shl    eax,0x2
c00170c0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170cc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00170d0:	39 d8                	cmp    eax,ebx
c00170d2:	7e 49                	jle    c001711d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00170d4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170da:	7c 41                	jl     c001711d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00170dc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00170e0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170e4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170e8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00170ec:	39 f9                	cmp    ecx,edi
c00170ee:	7e 22                	jle    c0017112 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00170f0:	83 c5 04             	add    ebp,0x4
c00170f3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170f9:	7c 14                	jl     c001710f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00170fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017100:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017104:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017108:	56                   	push   esi
c0017109:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	47                   	inc    edi
c0017110:	eb d2                	jmp    c00170e4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017116:	43                   	inc    ebx
c0017117:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001711b:	eb ab                	jmp    c00170c8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001711d:	83 c4 1c             	add    esp,0x1c
c0017120:	5b                   	pop    ebx
c0017121:	5e                   	pop    esi
c0017122:	5f                   	pop    edi
c0017123:	5d                   	pop    ebp
c0017124:	c3                   	ret    
c0017125:	90                   	nop

c0017126 <Video::clearScreen(unsigned int)>:
c0017126:	57                   	push   edi
c0017127:	56                   	push   esi
c0017128:	53                   	push   ebx
c0017129:	31 db                	xor    ebx,ebx
c001712b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001712f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017135:	7e 1f                	jle    c0017156 <Video::clearScreen(unsigned int)+0x30>
c0017137:	31 ff                	xor    edi,edi
c0017139:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001713f:	7e 12                	jle    c0017153 <Video::clearScreen(unsigned int)+0x2d>
c0017141:	8b 06                	mov    eax,DWORD PTR [esi]
c0017143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017147:	53                   	push   ebx
c0017148:	57                   	push   edi
c0017149:	47                   	inc    edi
c001714a:	56                   	push   esi
c001714b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001714e:	83 c4 10             	add    esp,0x10
c0017151:	eb e6                	jmp    c0017139 <Video::clearScreen(unsigned int)+0x13>
c0017153:	43                   	inc    ebx
c0017154:	eb d9                	jmp    c001712f <Video::clearScreen(unsigned int)+0x9>
c0017156:	5b                   	pop    ebx
c0017157:	5e                   	pop    esi
c0017158:	5f                   	pop    edi
c0017159:	c3                   	ret    

c001715a <Video::putpixel(int, int, unsigned int)>:
c001715a:	c7 44 24 04 80 ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ba80
c0017162:	e9 36 32 00 00       	jmp    c001a39d <Krnl::panic(char const*)>
c0017167:	90                   	nop

c0017168 <Video::Video(char const*)>:
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001716f:	83 ec 08             	sub    esp,0x8
c0017172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017176:	50                   	push   eax
c0017177:	e8 c0 ce ff ff       	call   c001403c <Device::Device(char const*)>
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	ba f0 ba 02 c0       	mov    edx,0xc002baf0
c0017184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017188:	89 10                	mov    DWORD PTR [eax],edx
c001718a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017198:	90                   	nop
c0017199:	83 c4 0c             	add    esp,0xc
c001719c:	c3                   	ret    
c001719d:	90                   	nop

c001719e <Video::~Video()>:
c001719e:	83 ec 0c             	sub    esp,0xc
c00171a1:	ba f0 ba 02 c0       	mov    edx,0xc002baf0
c00171a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171aa:	89 10                	mov    DWORD PTR [eax],edx
c00171ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b0:	83 ec 0c             	sub    esp,0xc
c00171b3:	50                   	push   eax
c00171b4:	e8 4d cb ff ff       	call   c0013d06 <Device::~Device()>
c00171b9:	83 c4 10             	add    esp,0x10
c00171bc:	90                   	nop
c00171bd:	83 c4 0c             	add    esp,0xc
c00171c0:	c3                   	ret    
c00171c1:	90                   	nop

c00171c2 <Video::~Video()>:
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	83 ec 0c             	sub    esp,0xc
c00171c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171cc:	e8 cd ff ff ff       	call   c001719e <Video::~Video()>
c00171d1:	83 c4 10             	add    esp,0x10
c00171d4:	83 ec 08             	sub    esp,0x8
c00171d7:	68 64 01 00 00       	push   0x164
c00171dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171e0:	e8 42 b7 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00171e5:	83 c4 10             	add    esp,0x10
c00171e8:	83 c4 0c             	add    esp,0xc
c00171eb:	c3                   	ret    

c00171ec <Video::isMonochrome()>:
c00171ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171f0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00171f6:	c3                   	ret    
c00171f7:	90                   	nop

c00171f8 <Video::getWidth()>:
c00171f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017202:	c3                   	ret    
c0017203:	90                   	nop

c0017204 <Video::getHeight()>:
c0017204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017208:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001720e:	c3                   	ret    
c001720f:	90                   	nop

c0017210 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017210:	55                   	push   ebp
c0017211:	57                   	push   edi
c0017212:	56                   	push   esi
c0017213:	53                   	push   ebx
c0017214:	83 ec 2c             	sub    esp,0x2c
c0017217:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001721b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001721f:	83 f8 01             	cmp    eax,0x1
c0017222:	19 c9                	sbb    ecx,ecx
c0017224:	31 db                	xor    ebx,ebx
c0017226:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001722a:	89 cd                	mov    ebp,ecx
c001722c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017234:	f7 d5                	not    ebp
c0017236:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001723c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017240:	01 d8                	add    eax,ebx
c0017242:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017246:	56                   	push   esi
c0017247:	e8 b8 ff ff ff       	call   c0017204 <Video::getHeight()>
c001724c:	59                   	pop    ecx
c001724d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017251:	7e 70                	jle    c00172c3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017253:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017257:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001725b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001725e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017266:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001726d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017271:	89 f8                	mov    eax,edi
c0017273:	83 c0 20             	add    eax,0x20
c0017276:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001727a:	56                   	push   esi
c001727b:	e8 78 ff ff ff       	call   c00171f8 <Video::getWidth()>
c0017280:	5a                   	pop    edx
c0017281:	39 c7                	cmp    edi,eax
c0017283:	7d 34                	jge    c00172b9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017285:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001728a:	74 05                	je     c0017291 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001728c:	8b 06                	mov    eax,DWORD PTR [esi]
c001728e:	55                   	push   ebp
c001728f:	eb 0d                	jmp    c001729e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017291:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017296:	74 12                	je     c00172aa <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017298:	8b 06                	mov    eax,DWORD PTR [esi]
c001729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001729e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00172a2:	57                   	push   edi
c00172a3:	56                   	push   esi
c00172a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172a7:	83 c4 10             	add    esp,0x10
c00172aa:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00172ae:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00172b2:	47                   	inc    edi
c00172b3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00172b7:	75 c1                	jne    c001727a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00172b9:	43                   	inc    ebx
c00172ba:	83 fb 20             	cmp    ebx,0x20
c00172bd:	0f 85 79 ff ff ff    	jne    c001723c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00172c3:	83 c4 2c             	add    esp,0x2c
c00172c6:	5b                   	pop    ebx
c00172c7:	5e                   	pop    esi
c00172c8:	5f                   	pop    edi
c00172c9:	5d                   	pop    ebp
c00172ca:	c3                   	ret    
c00172cb:	90                   	nop

c00172cc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00172cc:	55                   	push   ebp
c00172cd:	57                   	push   edi
c00172ce:	56                   	push   esi
c00172cf:	53                   	push   ebx
c00172d0:	83 ec 28             	sub    esp,0x28
c00172d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00172d7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00172db:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00172df:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00172e3:	c1 e6 08             	shl    esi,0x8
c00172e6:	01 c6                	add    esi,eax
c00172e8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00172ec:	c1 e0 08             	shl    eax,0x8
c00172ef:	01 d0                	add    eax,edx
c00172f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172f9:	0f af c6             	imul   eax,esi
c00172fc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017303:	50                   	push   eax
c0017304:	e8 9e 86 ff ff       	call   c000f9a7 <malloc>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	89 c7                	mov    edi,eax
c001730e:	85 c0                	test   eax,eax
c0017310:	75 10                	jne    c0017322 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0017312:	83 ec 0c             	sub    esp,0xc
c0017315:	68 a1 ba 02 c0       	push   0xc002baa1
c001731a:	e8 7e 30 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017325:	ba 12 00 00 00       	mov    edx,0x12
c001732a:	84 c0                	test   al,al
c001732c:	74 11                	je     c001733f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001732e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0017332:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0017336:	c1 fa 03             	sar    edx,0x3
c0017339:	0f af d1             	imul   edx,ecx
c001733c:	83 c2 12             	add    edx,0x12
c001733f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017343:	74 04                	je     c0017349 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017345:	85 f6                	test   esi,esi
c0017347:	75 12                	jne    c001735b <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017349:	83 ec 0c             	sub    esp,0xc
c001734c:	68 b1 ba 02 c0       	push   0xc002bab1
c0017351:	e8 a9 b6 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0017356:	e9 b8 00 00 00       	jmp    c0017413 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001735b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001735f:	80 f9 02             	cmp    cl,0x2
c0017362:	0f 85 96 00 00 00    	jne    c00173fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017368:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001736d:	75 0e                	jne    c001737d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001736f:	84 c0                	test   al,al
c0017371:	75 0a                	jne    c001737d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017373:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017376:	83 e8 18             	sub    eax,0x18
c0017379:	a8 f7                	test   al,0xf7
c001737b:	74 0a                	je     c0017387 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001737d:	83 ec 0c             	sub    esp,0xc
c0017380:	68 c6 ba 02 c0       	push   0xc002bac6
c0017385:	eb 7f                	jmp    c0017406 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017387:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001738f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017397:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001739b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00173a3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00173a7:	75 0c                	jne    c00173b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00173a9:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00173ae:	c1 e0 18             	shl    eax,0x18
c00173b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173b5:	45                   	inc    ebp
c00173b6:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00173bb:	c1 e1 10             	shl    ecx,0x10
c00173be:	89 c8                	mov    eax,ecx
c00173c0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00173c5:	c1 e1 08             	shl    ecx,0x8
c00173c8:	09 c1                	or     ecx,eax
c00173ca:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00173ce:	09 c1                	or     ecx,eax
c00173d0:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00173d4:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00173d8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00173dc:	c1 f8 03             	sar    eax,0x3
c00173df:	01 c2                	add    edx,eax
c00173e1:	89 e8                	mov    eax,ebp
c00173e3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00173e7:	39 c6                	cmp    esi,eax
c00173e9:	7f b0                	jg     c001739b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00173eb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173f3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00173f6:	7e 22                	jle    c001741a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00173f8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00173fc:	eb 99                	jmp    c0017397 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00173fe:	50                   	push   eax
c00173ff:	50                   	push   eax
c0017400:	51                   	push   ecx
c0017401:	68 d4 ba 02 c0       	push   0xc002bad4
c0017406:	e8 f4 b5 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001740b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001740e:	e8 a4 85 ff ff       	call   c000f9b7 <free>
c0017413:	83 c4 10             	add    esp,0x10
c0017416:	31 ff                	xor    edi,edi
c0017418:	eb 0f                	jmp    c0017429 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001741a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001741e:	89 30                	mov    DWORD PTR [eax],esi
c0017420:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017424:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017427:	89 30                	mov    DWORD PTR [eax],esi
c0017429:	83 c4 1c             	add    esp,0x1c
c001742c:	89 f8                	mov    eax,edi
c001742e:	5b                   	pop    ebx
c001742f:	5e                   	pop    esi
c0017430:	5f                   	pop    edi
c0017431:	5d                   	pop    ebp
c0017432:	c3                   	ret    
c0017433:	90                   	nop

c0017434 <Video::putTGA(int, int, unsigned char*, int)>:
c0017434:	55                   	push   ebp
c0017435:	57                   	push   edi
c0017436:	56                   	push   esi
c0017437:	53                   	push   ebx
c0017438:	83 ec 28             	sub    esp,0x28
c001743b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001743f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017443:	50                   	push   eax
c0017444:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017448:	50                   	push   eax
c0017449:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001744d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017451:	56                   	push   esi
c0017452:	e8 75 fe ff ff       	call   c00172cc <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017457:	83 c4 20             	add    esp,0x20
c001745a:	85 c0                	test   eax,eax
c001745c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017460:	74 35                	je     c0017497 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017462:	89 c7                	mov    edi,eax
c0017464:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017468:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001746c:	39 d8                	cmp    eax,ebx
c001746e:	7e 27                	jle    c0017497 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017470:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017474:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017478:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001747c:	39 e8                	cmp    eax,ebp
c001747e:	7e 14                	jle    c0017494 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017480:	8b 06                	mov    eax,DWORD PTR [esi]
c0017482:	83 c7 04             	add    edi,0x4
c0017485:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017488:	53                   	push   ebx
c0017489:	55                   	push   ebp
c001748a:	45                   	inc    ebp
c001748b:	56                   	push   esi
c001748c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	eb e0                	jmp    c0017474 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017494:	43                   	inc    ebx
c0017495:	eb cd                	jmp    c0017464 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017497:	83 c4 1c             	add    esp,0x1c
c001749a:	5b                   	pop    ebx
c001749b:	5e                   	pop    esi
c001749c:	5f                   	pop    edi
c001749d:	5d                   	pop    ebp
c001749e:	c3                   	ret    
c001749f:	90                   	nop

c00174a0 <ACPI::close(int, int, void*)>:
c00174a0:	83 ec 1c             	sub    esp,0x1c
c00174a3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00174ab:	74 0a                	je     c00174b7 <ACPI::close(int, int, void*)+0x17>
c00174ad:	b8 00 00 00 00       	mov    eax,0x0
c00174b2:	e9 8a 00 00 00       	jmp    c0017541 <ACPI::close(int, int, void*)+0xa1>
c00174b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00174bc:	75 27                	jne    c00174e5 <ACPI::close(int, int, void*)+0x45>
c00174be:	a1 e8 ec 02 c0       	mov    eax,ds:0xc002ece8
c00174c3:	85 c0                	test   eax,eax
c00174c5:	74 07                	je     c00174ce <ACPI::close(int, int, void*)+0x2e>
c00174c7:	a1 e8 ec 02 c0       	mov    eax,ds:0xc002ece8
c00174cc:	ff d0                	call   eax
c00174ce:	83 ec 0c             	sub    esp,0xc
c00174d1:	68 30 bb 02 c0       	push   0xc002bb30
c00174d6:	e8 c2 2e 00 00       	call   c001a39d <Krnl::panic(char const*)>
c00174db:	83 c4 10             	add    esp,0x10
c00174de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174e3:	eb 5c                	jmp    c0017541 <ACPI::close(int, int, void*)+0xa1>
c00174e5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174ea:	75 50                	jne    c001753c <ACPI::close(int, int, void*)+0x9c>
c00174ec:	a1 e4 ec 02 c0       	mov    eax,ds:0xc002ece4
c00174f1:	85 c0                	test   eax,eax
c00174f3:	74 07                	je     c00174fc <ACPI::close(int, int, void*)+0x5c>
c00174f5:	a1 e4 ec 02 c0       	mov    eax,ds:0xc002ece4
c00174fa:	ff d0                	call   eax
c00174fc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017501:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017506:	83 e0 02             	and    eax,0x2
c0017509:	74 1c                	je     c0017527 <ACPI::close(int, int, void*)+0x87>
c001750b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017516:	89 c2                	mov    edx,eax
c0017518:	ec                   	in     al,dx
c0017519:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001751d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017521:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017525:	eb da                	jmp    c0017501 <ACPI::close(int, int, void*)+0x61>
c0017527:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001752e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017533:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017537:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001753b:	ee                   	out    dx,al
c001753c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017541:	83 c4 1c             	add    esp,0x1c
c0017544:	c3                   	ret    

c0017545 <findRSDP()>:
c0017545:	83 ec 1c             	sub    esp,0x1c
c0017548:	83 ec 0c             	sub    esp,0xc
c001754b:	68 0b bc 02 c0       	push   0xc002bc0b
c0017550:	e8 ac 84 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001755d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017563:	83 e0 04             	and    eax,0x4
c0017566:	84 c0                	test   al,al
c0017568:	75 0a                	jne    c0017574 <findRSDP()+0x2f>
c001756a:	b8 00 00 00 00       	mov    eax,0x0
c001756f:	e9 9a 00 00 00       	jmp    c001760e <findRSDP()+0xc9>
c0017574:	a1 b4 e6 02 c0       	mov    eax,ds:0xc002e6b4
c0017579:	3d ff 07 00 00       	cmp    eax,0x7ff
c001757e:	7f 1b                	jg     c001759b <findRSDP()+0x56>
c0017580:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017585:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001758b:	83 e2 fb             	and    edx,0xfffffffb
c001758e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017594:	b8 00 00 00 00       	mov    eax,0x0
c0017599:	eb 73                	jmp    c001760e <findRSDP()+0xc9>
c001759b:	83 ec 0c             	sub    esp,0xc
c001759e:	68 1b bc 02 c0       	push   0xc002bc1b
c00175a3:	e8 59 84 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00175b3:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00175bb:	77 3c                	ja     c00175f9 <findRSDP()+0xb4>
c00175bd:	83 ec 04             	sub    esp,0x4
c00175c0:	6a 08                	push   0x8
c00175c2:	68 34 bc 02 c0       	push   0xc002bc34
c00175c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175cb:	e8 7c 90 fe ff       	call   c000064c <memcmp>
c00175d0:	83 c4 10             	add    esp,0x10
c00175d3:	85 c0                	test   eax,eax
c00175d5:	0f 94 c0             	sete   al
c00175d8:	84 c0                	test   al,al
c00175da:	74 16                	je     c00175f2 <findRSDP()+0xad>
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	68 3d bc 02 c0       	push   0xc002bc3d
c00175e4:	e8 18 84 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175f0:	eb 1c                	jmp    c001760e <findRSDP()+0xc9>
c00175f2:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00175f7:	eb ba                	jmp    c00175b3 <findRSDP()+0x6e>
c00175f9:	83 ec 0c             	sub    esp,0xc
c00175fc:	68 4b bc 02 c0       	push   0xc002bc4b
c0017601:	e8 fb 83 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017606:	83 c4 10             	add    esp,0x10
c0017609:	b8 00 00 00 00       	mov    eax,0x0
c001760e:	83 c4 1c             	add    esp,0x1c
c0017611:	c3                   	ret    

c0017612 <loadACPITables(unsigned char*)>:
c0017612:	57                   	push   edi
c0017613:	56                   	push   esi
c0017614:	53                   	push   ebx
c0017615:	83 ec 60             	sub    esp,0x60
c0017618:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001761d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017623:	83 e0 04             	and    eax,0x4
c0017626:	84 c0                	test   al,al
c0017628:	0f 84 33 02 00 00    	je     c0017861 <loadACPITables(unsigned char*)+0x24f>
c001762e:	a0 00 ef 02 c0       	mov    al,ds:0xc002ef00
c0017633:	84 c0                	test   al,al
c0017635:	74 75                	je     c00176ac <loadACPITables(unsigned char*)+0x9a>
c0017637:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001763b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001763f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017643:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017646:	83 e8 24             	sub    eax,0x24
c0017649:	c1 e8 03             	shr    eax,0x3
c001764c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017650:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017658:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001765c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017660:	0f 8d b2 00 00 00    	jge    c0017718 <loadACPITables(unsigned char*)+0x106>
c0017666:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001766a:	83 c0 24             	add    eax,0x24
c001766d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017671:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017675:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017679:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001767d:	c1 e0 03             	shl    eax,0x3
c0017680:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017684:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017688:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001768b:	8b 00                	mov    eax,DWORD PTR [eax]
c001768d:	89 c1                	mov    ecx,eax
c001768f:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0017694:	8d 50 01             	lea    edx,[eax+0x1]
c0017697:	89 15 ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,edx
c001769d:	89 ca                	mov    edx,ecx
c001769f:	89 14 c5 04 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd12fc],edx
c00176a6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00176aa:	eb ac                	jmp    c0017658 <loadACPITables(unsigned char*)+0x46>
c00176ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176bb:	83 e8 24             	sub    eax,0x24
c00176be:	c1 e8 02             	shr    eax,0x2
c00176c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176c5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00176cd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00176d1:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00176d5:	7d 41                	jge    c0017718 <loadACPITables(unsigned char*)+0x106>
c00176d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176db:	83 c0 24             	add    eax,0x24
c00176de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176e6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00176ea:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00176ee:	c1 e0 02             	shl    eax,0x2
c00176f1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00176f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176fb:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0017700:	8d 50 01             	lea    edx,[eax+0x1]
c0017703:	89 15 ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,edx
c0017709:	89 ca                	mov    edx,ecx
c001770b:	89 14 c5 04 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd12fc],edx
c0017712:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017716:	eb b5                	jmp    c00176cd <loadACPITables(unsigned char*)+0xbb>
c0017718:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017720:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0017725:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017729:	0f 8d 33 01 00 00    	jge    c0017862 <loadACPITables(unsigned char*)+0x250>
c001772f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017733:	8b 04 c5 04 ed 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd12fc]
c001773a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001773e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017742:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001774a:	25 ff 0f 00 00       	and    eax,0xfff
c001774f:	89 c6                	mov    esi,eax
c0017751:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0017757:	83 ec 0c             	sub    esp,0xc
c001775a:	6a 01                	push   0x1
c001775c:	e8 cc 9e ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0017761:	83 c4 10             	add    esp,0x10
c0017764:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017768:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001776e:	83 ec 0c             	sub    esp,0xc
c0017771:	6a 01                	push   0x1
c0017773:	6a 01                	push   0x1
c0017775:	50                   	push   eax
c0017776:	52                   	push   edx
c0017777:	53                   	push   ebx
c0017778:	e8 4d a8 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001777d:	83 c4 20             	add    esp,0x20
c0017780:	09 f0                	or     eax,esi
c0017782:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017786:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001778a:	c1 e0 03             	shl    eax,0x3
c001778d:	05 00 ed 02 c0       	add    eax,0xc002ed00
c0017792:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001779a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001779e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00177a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00177ba:	89 c6                	mov    esi,eax
c00177bc:	89 d7                	mov    edi,edx
c00177be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177c0:	89 c8                	mov    eax,ecx
c00177c2:	89 fa                	mov    edx,edi
c00177c4:	89 f3                	mov    ebx,esi
c00177c6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00177ca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00177ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177e1:	05 00 10 00 00       	add    eax,0x1000
c00177e6:	c1 e8 0c             	shr    eax,0xc
c00177e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177f9:	25 ff 0f 00 00       	and    eax,0xfff
c00177fe:	89 c6                	mov    esi,eax
c0017800:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0017806:	83 ec 0c             	sub    esp,0xc
c0017809:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001780d:	e8 1b 9e ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0017812:	83 c4 10             	add    esp,0x10
c0017815:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017819:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001781f:	83 ec 0c             	sub    esp,0xc
c0017822:	6a 01                	push   0x1
c0017824:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017828:	50                   	push   eax
c0017829:	52                   	push   edx
c001782a:	53                   	push   ebx
c001782b:	e8 9a a7 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017830:	83 c4 20             	add    esp,0x20
c0017833:	09 f0                	or     eax,esi
c0017835:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001783d:	83 ec 0c             	sub    esp,0xc
c0017840:	50                   	push   eax
c0017841:	e8 17 a1 ff ff       	call   c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c0017846:	83 c4 10             	add    esp,0x10
c0017849:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001784d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017851:	89 14 c5 04 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd12fc],edx
c0017858:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001785c:	e9 bf fe ff ff       	jmp    c0017720 <loadACPITables(unsigned char*)+0x10e>
c0017861:	90                   	nop
c0017862:	83 c4 60             	add    esp,0x60
c0017865:	5b                   	pop    ebx
c0017866:	5e                   	pop    esi
c0017867:	5f                   	pop    edi
c0017868:	c3                   	ret    

c0017869 <findRSDT(unsigned char*)>:
c0017869:	57                   	push   edi
c001786a:	56                   	push   esi
c001786b:	53                   	push   ebx
c001786c:	83 ec 50             	sub    esp,0x50
c001786f:	83 ec 0c             	sub    esp,0xc
c0017872:	68 5f bc 02 c0       	push   0xc002bc5f
c0017877:	e8 85 81 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001787c:	83 c4 10             	add    esp,0x10
c001787f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017884:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001788a:	83 e0 04             	and    eax,0x4
c001788d:	84 c0                	test   al,al
c001788f:	75 0a                	jne    c001789b <findRSDT(unsigned char*)+0x32>
c0017891:	b8 00 00 00 00       	mov    eax,0x0
c0017896:	e9 81 01 00 00       	jmp    c0017a1c <findRSDT(unsigned char*)+0x1b3>
c001789b:	83 ec 0c             	sub    esp,0xc
c001789e:	68 71 bc 02 c0       	push   0xc002bc71
c00178a3:	e8 59 81 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00178a8:	83 c4 10             	add    esp,0x10
c00178ab:	89 e0                	mov    eax,esp
c00178ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178b1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00178b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00178b9:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00178c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178cd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00178d1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00178d5:	89 c6                	mov    esi,eax
c00178d7:	89 d7                	mov    edi,edx
c00178d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178db:	89 c8                	mov    eax,ecx
c00178dd:	89 fa                	mov    edx,edi
c00178df:	89 f3                	mov    ebx,esi
c00178e1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00178e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00178e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178ed:	83 ec 0c             	sub    esp,0xc
c00178f0:	68 83 bc 02 c0       	push   0xc002bc83
c00178f5:	e8 07 81 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017901:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017905:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001790d:	83 ec 0c             	sub    esp,0xc
c0017910:	68 95 bc 02 c0       	push   0xc002bc95
c0017915:	e8 e7 80 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017921:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017925:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001792d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017931:	83 ec 04             	sub    esp,0x4
c0017934:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017938:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001793c:	68 54 bb 02 c0       	push   0xc002bb54
c0017941:	e8 b9 b0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001794d:	25 ff 0f 00 00       	and    eax,0xfff
c0017952:	89 c6                	mov    esi,eax
c0017954:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c001795a:	83 ec 0c             	sub    esp,0xc
c001795d:	6a 02                	push   0x2
c001795f:	e8 c9 9c ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001796b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	6a 01                	push   0x1
c0017976:	6a 02                	push   0x2
c0017978:	50                   	push   eax
c0017979:	52                   	push   edx
c001797a:	53                   	push   ebx
c001797b:	e8 4a a6 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017980:	83 c4 20             	add    esp,0x20
c0017983:	09 f0                	or     eax,esi
c0017985:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017989:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001798d:	25 ff 0f 00 00       	and    eax,0xfff
c0017992:	89 c6                	mov    esi,eax
c0017994:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c001799a:	83 ec 0c             	sub    esp,0xc
c001799d:	6a 02                	push   0x2
c001799f:	e8 89 9c ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c00179a4:	83 c4 10             	add    esp,0x10
c00179a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179b1:	83 ec 0c             	sub    esp,0xc
c00179b4:	6a 01                	push   0x1
c00179b6:	6a 02                	push   0x2
c00179b8:	50                   	push   eax
c00179b9:	52                   	push   edx
c00179ba:	53                   	push   ebx
c00179bb:	e8 0a a6 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179c0:	83 c4 20             	add    esp,0x20
c00179c3:	09 f0                	or     eax,esi
c00179c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00179c9:	83 ec 04             	sub    esp,0x4
c00179cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179d4:	68 74 bb 02 c0       	push   0xc002bb74
c00179d9:	e8 21 b0 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00179e6:	75 11                	jne    c00179f9 <findRSDT(unsigned char*)+0x190>
c00179e8:	c6 05 00 ef 02 c0 00 	mov    BYTE PTR ds:0xc002ef00,0x0
c00179ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179f7:	eb 1f                	jmp    c0017a18 <findRSDT(unsigned char*)+0x1af>
c00179f9:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00179fe:	75 11                	jne    c0017a11 <findRSDT(unsigned char*)+0x1a8>
c0017a00:	c6 05 00 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef00,0x1
c0017a07:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a0b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a0f:	eb 07                	jmp    c0017a18 <findRSDT(unsigned char*)+0x1af>
c0017a11:	b8 00 00 00 00       	mov    eax,0x0
c0017a16:	eb 04                	jmp    c0017a1c <findRSDT(unsigned char*)+0x1b3>
c0017a18:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a1c:	83 c4 50             	add    esp,0x50
c0017a1f:	5b                   	pop    ebx
c0017a20:	5e                   	pop    esi
c0017a21:	5f                   	pop    edi
c0017a22:	c3                   	ret    

c0017a23 <findDataTable(unsigned char*, char*)>:
c0017a23:	83 ec 1c             	sub    esp,0x1c
c0017a26:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017a2b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a31:	83 e0 04             	and    eax,0x4
c0017a34:	84 c0                	test   al,al
c0017a36:	75 07                	jne    c0017a3f <findDataTable(unsigned char*, char*)+0x1c>
c0017a38:	b8 00 00 00 00       	mov    eax,0x0
c0017a3d:	eb 52                	jmp    c0017a91 <findDataTable(unsigned char*, char*)+0x6e>
c0017a3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a47:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0017a4c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017a50:	7d 3a                	jge    c0017a8c <findDataTable(unsigned char*, char*)+0x69>
c0017a52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a56:	c1 e0 03             	shl    eax,0x3
c0017a59:	05 00 ed 02 c0       	add    eax,0xc002ed00
c0017a5e:	83 ec 04             	sub    esp,0x4
c0017a61:	6a 04                	push   0x4
c0017a63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a67:	50                   	push   eax
c0017a68:	e8 df 8b fe ff       	call   c000064c <memcmp>
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	85 c0                	test   eax,eax
c0017a72:	0f 94 c0             	sete   al
c0017a75:	84 c0                	test   al,al
c0017a77:	74 0d                	je     c0017a86 <findDataTable(unsigned char*, char*)+0x63>
c0017a79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a7d:	8b 04 c5 04 ed 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd12fc]
c0017a84:	eb 0b                	jmp    c0017a91 <findDataTable(unsigned char*, char*)+0x6e>
c0017a86:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a8a:	eb bb                	jmp    c0017a47 <findDataTable(unsigned char*, char*)+0x24>
c0017a8c:	b8 00 00 00 00       	mov    eax,0x0
c0017a91:	83 c4 1c             	add    esp,0x1c
c0017a94:	c3                   	ret    

c0017a95 <scanMADT()>:
c0017a95:	53                   	push   ebx
c0017a96:	83 ec 38             	sub    esp,0x38
c0017a99:	83 ec 0c             	sub    esp,0xc
c0017a9c:	68 a7 bc 02 c0       	push   0xc002bca7
c0017aa1:	e8 5b 7f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0017aae:	25 00 04 00 00       	and    eax,0x400
c0017ab3:	74 14                	je     c0017ac9 <scanMADT()+0x34>
c0017ab5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017aba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ac0:	83 e2 fb             	and    edx,0xfffffffb
c0017ac3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ac9:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017ace:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ad4:	83 e0 04             	and    eax,0x4
c0017ad7:	84 c0                	test   al,al
c0017ad9:	0f 84 7a 04 00 00    	je     c0017f59 <scanMADT()+0x4c4>
c0017adf:	83 ec 0c             	sub    esp,0xc
c0017ae2:	68 b4 bc 02 c0       	push   0xc002bcb4
c0017ae7:	e8 15 7f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017aec:	83 c4 10             	add    esp,0x10
c0017aef:	e8 51 fa ff ff       	call   c0017545 <findRSDP()>
c0017af4:	a3 0c ef 02 c0       	mov    ds:0xc002ef0c,eax
c0017af9:	a1 0c ef 02 c0       	mov    eax,ds:0xc002ef0c
c0017afe:	85 c0                	test   eax,eax
c0017b00:	75 19                	jne    c0017b1b <scanMADT()+0x86>
c0017b02:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017b07:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b0d:	83 e2 fb             	and    edx,0xfffffffb
c0017b10:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b16:	e9 42 04 00 00       	jmp    c0017f5d <scanMADT()+0x4c8>
c0017b1b:	83 ec 0c             	sub    esp,0xc
c0017b1e:	68 c6 bc 02 c0       	push   0xc002bcc6
c0017b23:	e8 d9 7e ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	a1 0c ef 02 c0       	mov    eax,ds:0xc002ef0c
c0017b30:	83 ec 0c             	sub    esp,0xc
c0017b33:	50                   	push   eax
c0017b34:	e8 30 fd ff ff       	call   c0017869 <findRSDT(unsigned char*)>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	a3 08 ef 02 c0       	mov    ds:0xc002ef08,eax
c0017b41:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0017b46:	85 c0                	test   eax,eax
c0017b48:	75 19                	jne    c0017b63 <scanMADT()+0xce>
c0017b4a:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017b4f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b55:	83 e2 fb             	and    edx,0xfffffffb
c0017b58:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b5e:	e9 fa 03 00 00       	jmp    c0017f5d <scanMADT()+0x4c8>
c0017b63:	83 ec 0c             	sub    esp,0xc
c0017b66:	68 d6 bc 02 c0       	push   0xc002bcd6
c0017b6b:	e8 91 7e ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	50                   	push   eax
c0017b7c:	e8 91 fa ff ff       	call   c0017612 <loadACPITables(unsigned char*)>
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0017b89:	83 ec 08             	sub    esp,0x8
c0017b8c:	68 ee bc 02 c0       	push   0xc002bcee
c0017b91:	50                   	push   eax
c0017b92:	e8 8c fe ff ff       	call   c0017a23 <findDataTable(unsigned char*, char*)>
c0017b97:	83 c4 10             	add    esp,0x10
c0017b9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b9e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ba3:	75 19                	jne    c0017bbe <scanMADT()+0x129>
c0017ba5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017baa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bb0:	83 e2 fe             	and    edx,0xfffffffe
c0017bb3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bb9:	e9 9f 03 00 00       	jmp    c0017f5d <scanMADT()+0x4c8>
c0017bbe:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017bc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bcd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017bd1:	0f 87 86 03 00 00    	ja     c0017f5d <scanMADT()+0x4c8>
c0017bd7:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017bdf:	0f 87 78 03 00 00    	ja     c0017f5d <scanMADT()+0x4c8>
c0017be5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017bed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf1:	8d 50 01             	lea    edx,[eax+0x1]
c0017bf4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bfc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c00:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c08:	8d 50 01             	lea    edx,[eax+0x1]
c0017c0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c13:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c17:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c1b:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017c20:	0f 86 36 03 00 00    	jbe    c0017f5c <scanMADT()+0x4c7>
c0017c26:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017c2b:	75 57                	jne    c0017c84 <scanMADT()+0x1ef>
c0017c2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c31:	8d 50 01             	lea    edx,[eax+0x1]
c0017c34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c38:	8a 15 00 f1 02 c0    	mov    dl,BYTE PTR ds:0xc002f100
c0017c3e:	0f b6 d2             	movzx  edx,dl
c0017c41:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c45:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c49:	88 82 40 f1 02 c0    	mov    BYTE PTR [edx-0x3ffd0ec0],al
c0017c4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c53:	8d 50 01             	lea    edx,[eax+0x1]
c0017c56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c5a:	8a 15 00 f1 02 c0    	mov    dl,BYTE PTR ds:0xc002f100
c0017c60:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c63:	88 0d 00 f1 02 c0    	mov    BYTE PTR ds:0xc002f100,cl
c0017c69:	0f b6 d2             	movzx  edx,dl
c0017c6c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c70:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c74:	88 82 20 f1 02 c0    	mov    BYTE PTR [edx-0x3ffd0ee0],al
c0017c7a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c7f:	e9 c1 02 00 00       	jmp    c0017f45 <scanMADT()+0x4b0>
c0017c84:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017c89:	0f 85 14 01 00 00    	jne    c0017da3 <scanMADT()+0x30e>
c0017c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c93:	8d 50 01             	lea    edx,[eax+0x1]
c0017c96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c9a:	8a 15 c0 ef 02 c0    	mov    dl,BYTE PTR ds:0xc002efc0
c0017ca0:	0f b6 d2             	movzx  edx,dl
c0017ca3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ca7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017cab:	88 82 e0 ef 02 c0    	mov    BYTE PTR [edx-0x3ffd1020],al
c0017cb1:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017cb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbd:	01 d0                	add    eax,edx
c0017cbf:	83 c0 2c             	add    eax,0x2c
c0017cc2:	8a 00                	mov    al,BYTE PTR [eax]
c0017cc4:	0f b6 d0             	movzx  edx,al
c0017cc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ccb:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cd6:	0f b6 c0             	movzx  eax,al
c0017cd9:	c1 e0 08             	shl    eax,0x8
c0017cdc:	89 d1                	mov    ecx,edx
c0017cde:	09 c1                	or     ecx,eax
c0017ce0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce4:	8d 50 02             	lea    edx,[eax+0x2]
c0017ce7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ceb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cef:	0f b6 c0             	movzx  eax,al
c0017cf2:	c1 e0 10             	shl    eax,0x10
c0017cf5:	09 c1                	or     ecx,eax
c0017cf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cfb:	8d 50 03             	lea    edx,[eax+0x3]
c0017cfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d02:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d06:	0f b6 c0             	movzx  eax,al
c0017d09:	c1 e0 18             	shl    eax,0x18
c0017d0c:	09 c1                	or     ecx,eax
c0017d0e:	89 ca                	mov    edx,ecx
c0017d10:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0017d15:	0f b6 c0             	movzx  eax,al
c0017d18:	89 14 85 00 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1000],edx
c0017d1f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d2c:	01 d0                	add    eax,edx
c0017d2e:	83 c0 2c             	add    eax,0x2c
c0017d31:	8a 00                	mov    al,BYTE PTR [eax]
c0017d33:	0f b6 d0             	movzx  edx,al
c0017d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d45:	0f b6 c0             	movzx  eax,al
c0017d48:	c1 e0 08             	shl    eax,0x8
c0017d4b:	89 d1                	mov    ecx,edx
c0017d4d:	09 c1                	or     ecx,eax
c0017d4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d53:	8d 50 02             	lea    edx,[eax+0x2]
c0017d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d5e:	0f b6 c0             	movzx  eax,al
c0017d61:	c1 e0 10             	shl    eax,0x10
c0017d64:	09 c1                	or     ecx,eax
c0017d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d6a:	8d 50 03             	lea    edx,[eax+0x3]
c0017d6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d75:	0f b6 c0             	movzx  eax,al
c0017d78:	c1 e0 18             	shl    eax,0x18
c0017d7b:	09 c1                	or     ecx,eax
c0017d7d:	89 ca                	mov    edx,ecx
c0017d7f:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0017d84:	0f b6 c0             	movzx  eax,al
c0017d87:	89 14 85 80 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f80],edx
c0017d8e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d93:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0017d98:	40                   	inc    eax
c0017d99:	a2 c0 ef 02 c0       	mov    ds:0xc002efc0,al
c0017d9e:	e9 a2 01 00 00       	jmp    c0017f45 <scanMADT()+0x4b0>
c0017da3:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017da8:	0f 85 e9 00 00 00    	jne    c0017e97 <scanMADT()+0x402>
c0017dae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db2:	8d 50 01             	lea    edx,[eax+0x1]
c0017db5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017db9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dc1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017dc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc9:	8d 50 01             	lea    edx,[eax+0x1]
c0017dcc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dd4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dd8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ddc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017de0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de4:	01 d0                	add    eax,edx
c0017de6:	83 c0 2c             	add    eax,0x2c
c0017de9:	8a 00                	mov    al,BYTE PTR [eax]
c0017deb:	0f b6 d0             	movzx  edx,al
c0017dee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017df5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017dfd:	0f b6 c0             	movzx  eax,al
c0017e00:	c1 e0 08             	shl    eax,0x8
c0017e03:	89 d1                	mov    ecx,edx
c0017e05:	09 c1                	or     ecx,eax
c0017e07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e0b:	8d 50 02             	lea    edx,[eax+0x2]
c0017e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e16:	0f b6 c0             	movzx  eax,al
c0017e19:	c1 e0 10             	shl    eax,0x10
c0017e1c:	09 c1                	or     ecx,eax
c0017e1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e22:	8d 50 03             	lea    edx,[eax+0x3]
c0017e25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e29:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e2d:	0f b6 c0             	movzx  eax,al
c0017e30:	c1 e0 18             	shl    eax,0x18
c0017e33:	09 c8                	or     eax,ecx
c0017e35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e39:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e46:	01 d0                	add    eax,edx
c0017e48:	83 c0 2c             	add    eax,0x2c
c0017e4b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e4d:	0f b6 c0             	movzx  eax,al
c0017e50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e54:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e5b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e5f:	0f b6 d2             	movzx  edx,dl
c0017e62:	c1 e2 08             	shl    edx,0x8
c0017e65:	09 d0                	or     eax,edx
c0017e67:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017e6c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017e71:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e7a:	88 90 c0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2740],dl
c0017e80:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017e85:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017e8a:	66 89 84 12 a0 ef 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1060],ax
c0017e92:	e9 ae 00 00 00       	jmp    c0017f45 <scanMADT()+0x4b0>
c0017e97:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017e9c:	0f 85 97 00 00 00    	jne    c0017f39 <scanMADT()+0x4a4>
c0017ea2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ead:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eb5:	0f b6 c0             	movzx  eax,al
c0017eb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ebc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec4:	01 d0                	add    eax,edx
c0017ec6:	83 c0 2c             	add    eax,0x2c
c0017ec9:	8a 00                	mov    al,BYTE PTR [eax]
c0017ecb:	0f b6 d0             	movzx  edx,al
c0017ece:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017edd:	0f b6 c0             	movzx  eax,al
c0017ee0:	c1 e0 08             	shl    eax,0x8
c0017ee3:	09 d0                	or     eax,edx
c0017ee5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ee9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f01:	0f b6 c0             	movzx  eax,al
c0017f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f0c:	c1 e0 08             	shl    eax,0x8
c0017f0f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017f13:	89 c1                	mov    ecx,eax
c0017f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f19:	c1 e0 18             	shl    eax,0x18
c0017f1c:	89 c3                	mov    ebx,eax
c0017f1e:	a1 10 ef 02 c0       	mov    eax,ds:0xc002ef10
c0017f23:	8d 50 01             	lea    edx,[eax+0x1]
c0017f26:	89 15 10 ef 02 c0    	mov    DWORD PTR ds:0xc002ef10,edx
c0017f2c:	09 d9                	or     ecx,ebx
c0017f2e:	89 ca                	mov    edx,ecx
c0017f30:	89 14 85 20 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10e0],edx
c0017f37:	eb 0c                	jmp    c0017f45 <scanMADT()+0x4b0>
c0017f39:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f3e:	75 05                	jne    c0017f45 <scanMADT()+0x4b0>
c0017f40:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017f45:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f4e:	01 d0                	add    eax,edx
c0017f50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f54:	e9 6d fc ff ff       	jmp    c0017bc6 <scanMADT()+0x131>
c0017f59:	90                   	nop
c0017f5a:	eb 01                	jmp    c0017f5d <scanMADT()+0x4c8>
c0017f5c:	90                   	nop
c0017f5d:	83 c4 38             	add    esp,0x38
c0017f60:	5b                   	pop    ebx
c0017f61:	c3                   	ret    

c0017f62 <ACPI::ACPI()>:
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f69:	83 ec 08             	sub    esp,0x8
c0017f6c:	68 f3 bc 02 c0       	push   0xc002bcf3
c0017f71:	50                   	push   eax
c0017f72:	e8 c5 c0 ff ff       	call   c001403c <Device::Device(char const*)>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	ba 5c be 02 c0       	mov    edx,0xc002be5c
c0017f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f83:	89 10                	mov    DWORD PTR [eax],edx
c0017f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f89:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f94:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa2:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017fac:	83 ec 0c             	sub    esp,0xc
c0017faf:	68 f8 bc 02 c0       	push   0xc002bcf8
c0017fb4:	e8 48 7a ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0017fb9:	83 c4 10             	add    esp,0x10
c0017fbc:	e8 d4 fa ff ff       	call   c0017a95 <scanMADT()>
c0017fc1:	90                   	nop
c0017fc2:	83 c4 0c             	add    esp,0xc
c0017fc5:	c3                   	ret    

c0017fc6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017fc6:	83 ec 2c             	sub    esp,0x2c
c0017fc9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017fcd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017fd1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fd5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017fd9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017fde:	88 d0                	mov    al,dl
c0017fe0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017fe4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017fe9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ff1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ff5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ffb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017fff:	0f 8d 97 00 00 00    	jge    c001809c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018005:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018009:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001800d:	83 c2 2a             	add    edx,0x2a
c0018010:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018014:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018019:	75 78                	jne    c0018093 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001801b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001801f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018023:	83 c2 2a             	add    edx,0x2a
c0018026:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001802a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001802e:	75 63                	jne    c0018093 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018030:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018035:	74 3a                	je     c0018071 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018037:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001803b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001803f:	83 c2 2a             	add    edx,0x2a
c0018042:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018046:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001804a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001804d:	39 c2                	cmp    edx,eax
c001804f:	74 10                	je     c0018061 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018051:	83 ec 0c             	sub    esp,0xc
c0018054:	68 94 bb 02 c0       	push   0xc002bb94
c0018059:	e8 3f 23 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001805e:	83 c4 10             	add    esp,0x10
c0018061:	83 ec 0c             	sub    esp,0xc
c0018064:	68 06 bd 02 c0       	push   0xc002bd06
c0018069:	e8 2f 23 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001806e:	83 c4 10             	add    esp,0x10
c0018071:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018075:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018079:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001807d:	83 c2 2a             	add    edx,0x2a
c0018080:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018084:	8b 02                	mov    eax,DWORD PTR [edx]
c0018086:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018089:	89 01                	mov    DWORD PTR [ecx],eax
c001808b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001808e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018093:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018097:	e9 55 ff ff ff       	jmp    c0017ff1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001809c:	90                   	nop
c001809d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a1:	83 c4 2c             	add    esp,0x2c
c00180a4:	c2 04 00             	ret    0x4
c00180a7:	90                   	nop

c00180a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00180a8:	83 ec 1c             	sub    esp,0x1c
c00180ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00180b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180b7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180bc:	88 c8                	mov    al,cl
c00180be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00180c2:	88 d0                	mov    al,dl
c00180c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180cc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00180d9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00180dd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00180e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180ef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00180f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00180fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018105:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018109:	8d 48 01             	lea    ecx,[eax+0x1]
c001810c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018110:	83 c2 2a             	add    edx,0x2a
c0018113:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001811b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018125:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018128:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001812c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018134:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001813a:	8d 50 01             	lea    edx,[eax+0x1]
c001813d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018141:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018151:	3d 00 02 00 00       	cmp    eax,0x200
c0018156:	75 10                	jne    c0018168 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018158:	83 ec 0c             	sub    esp,0xc
c001815b:	68 15 bd 02 c0       	push   0xc002bd15
c0018160:	e8 38 22 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0018165:	83 c4 10             	add    esp,0x10
c0018168:	90                   	nop
c0018169:	83 c4 1c             	add    esp,0x1c
c001816c:	c3                   	ret    
c001816d:	90                   	nop

c001816e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001816e:	b8 00 00 00 00       	mov    eax,0x0
c0018173:	c3                   	ret    

c0018174 <ACPI::detectPCI()>:
c0018174:	53                   	push   ebx
c0018175:	83 ec 28             	sub    esp,0x28
c0018178:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001817d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0018182:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018187:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001818d:	83 e0 04             	and    eax,0x4
c0018190:	84 c0                	test   al,al
c0018192:	74 2b                	je     c00181bf <ACPI::detectPCI()+0x4b>
c0018194:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0018199:	83 ec 08             	sub    esp,0x8
c001819c:	68 32 bd 02 c0       	push   0xc002bd32
c00181a1:	50                   	push   eax
c00181a2:	e8 7c f8 ff ff       	call   c0017a23 <findDataTable(unsigned char*, char*)>
c00181a7:	83 c4 10             	add    esp,0x10
c00181aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181ae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00181b3:	74 0a                	je     c00181bf <ACPI::detectPCI()+0x4b>
c00181b5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181ba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181bf:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c00181c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181cb:	8a 00                	mov    al,BYTE PTR [eax]
c00181cd:	3c 01                	cmp    al,0x1
c00181cf:	75 0c                	jne    c00181dd <ACPI::detectPCI()+0x69>
c00181d1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181d6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181db:	eb 26                	jmp    c0018203 <ACPI::detectPCI()+0x8f>
c00181dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181e1:	8a 00                	mov    al,BYTE PTR [eax]
c00181e3:	3c 02                	cmp    al,0x2
c00181e5:	75 1c                	jne    c0018203 <ACPI::detectPCI()+0x8f>
c00181e7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181ec:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181f1:	74 10                	je     c0018203 <ACPI::detectPCI()+0x8f>
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	68 c4 bb 02 c0       	push   0xc002bbc4
c00181fb:	e8 9d 21 00 00       	call   c001a39d <Krnl::panic(char const*)>
c0018200:	83 c4 10             	add    esp,0x10
c0018203:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018207:	83 f0 01             	xor    eax,0x1
c001820a:	84 c0                	test   al,al
c001820c:	74 3f                	je     c001824d <ACPI::detectPCI()+0xd9>
c001820e:	e8 3d 7f fe ff       	call   c0000150 <manualPCIProbe>
c0018213:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018217:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001821c:	75 0c                	jne    c001822a <ACPI::detectPCI()+0xb6>
c001821e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018223:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018228:	eb 23                	jmp    c001824d <ACPI::detectPCI()+0xd9>
c001822a:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001822f:	75 1c                	jne    c001824d <ACPI::detectPCI()+0xd9>
c0018231:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018236:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001823b:	74 10                	je     c001824d <ACPI::detectPCI()+0xd9>
c001823d:	83 ec 0c             	sub    esp,0xc
c0018240:	68 c4 bb 02 c0       	push   0xc002bbc4
c0018245:	e8 53 21 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001824a:	83 c4 10             	add    esp,0x10
c001824d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018252:	74 7e                	je     c00182d2 <ACPI::detectPCI()+0x15e>
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	68 37 bd 02 c0       	push   0xc002bd37
c001825c:	e8 a0 77 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001826c:	83 ec 0c             	sub    esp,0xc
c001826f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018273:	e8 2f 77 ff ff       	call   c000f9a7 <malloc>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	89 c3                	mov    ebx,eax
c001827d:	83 ec 0c             	sub    esp,0xc
c0018280:	53                   	push   ebx
c0018281:	e8 18 a7 00 00       	call   c002299e <PCI::PCI()>
c0018286:	83 c4 10             	add    esp,0x10
c0018289:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001828d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018291:	83 ec 08             	sub    esp,0x8
c0018294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018298:	50                   	push   eax
c0018299:	e8 9a bb ff ff       	call   c0013e38 <Device::addChild(Device*)>
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a7:	83 c0 08             	add    eax,0x8
c00182aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00182ac:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00182b1:	74 07                	je     c00182ba <ACPI::detectPCI()+0x146>
c00182b3:	ba 01 00 00 00       	mov    edx,0x1
c00182b8:	eb 05                	jmp    c00182bf <ACPI::detectPCI()+0x14b>
c00182ba:	ba 02 00 00 00       	mov    edx,0x2
c00182bf:	6a 00                	push   0x0
c00182c1:	6a 00                	push   0x0
c00182c3:	52                   	push   edx
c00182c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182c8:	ff d0                	call   eax
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	e9 9e 00 00 00       	jmp    c0018370 <ACPI::detectPCI()+0x1fc>
c00182d2:	83 ec 0c             	sub    esp,0xc
c00182d5:	68 4f bd 02 c0       	push   0xc002bd4f
c00182da:	e8 20 a7 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00182df:	83 c4 10             	add    esp,0x10
c00182e2:	83 ec 0c             	sub    esp,0xc
c00182e5:	68 5a bd 02 c0       	push   0xc002bd5a
c00182ea:	e8 12 77 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00182f9:	83 ec 0c             	sub    esp,0xc
c00182fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018300:	e8 a2 76 ff ff       	call   c000f9a7 <malloc>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	89 c3                	mov    ebx,eax
c001830a:	83 ec 0c             	sub    esp,0xc
c001830d:	53                   	push   ebx
c001830e:	e8 f5 b1 00 00       	call   c0023508 <IDE::IDE()>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001831a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001831e:	83 ec 08             	sub    esp,0x8
c0018321:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018325:	50                   	push   eax
c0018326:	e8 0d bb ff ff       	call   c0013e38 <Device::addChild(Device*)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018332:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001833c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018340:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0018349:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001834d:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0018356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001835a:	8b 00                	mov    eax,DWORD PTR [eax]
c001835c:	83 c0 08             	add    eax,0x8
c001835f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018361:	6a 00                	push   0x0
c0018363:	6a 00                	push   0x0
c0018365:	6a 00                	push   0x0
c0018367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001836b:	ff d0                	call   eax
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	90                   	nop
c0018371:	83 c4 28             	add    esp,0x28
c0018374:	5b                   	pop    ebx
c0018375:	c3                   	ret    

c0018376 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018376:	83 ec 1c             	sub    esp,0x1c
c0018379:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001837d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018380:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018384:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018389:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001838e:	83 ec 08             	sub    esp,0x8
c0018391:	52                   	push   edx
c0018392:	50                   	push   eax
c0018393:	e8 5a 6a ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c0018398:	83 c4 10             	add    esp,0x10
c001839b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001839f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00183a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183a9:	83 ec 04             	sub    esp,0x4
c00183ac:	6a 01                	push   0x1
c00183ae:	52                   	push   edx
c00183af:	50                   	push   eax
c00183b0:	e8 f9 6b ff ff       	call   c000efae <Computer::writeCMOS(unsigned char, unsigned char)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	90                   	nop
c00183b9:	83 c4 1c             	add    esp,0x1c
c00183bc:	c3                   	ret    
c00183bd:	90                   	nop

c00183be <ACPI::sleep()>:
c00183be:	83 ec 0c             	sub    esp,0xc
c00183c1:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c00183c6:	85 c0                	test   eax,eax
c00183c8:	74 07                	je     c00183d1 <ACPI::sleep()+0x13>
c00183ca:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c00183cf:	ff d0                	call   eax
c00183d1:	90                   	nop
c00183d2:	83 c4 0c             	add    esp,0xc
c00183d5:	c3                   	ret    

c00183d6 <ACPI::open(int, int, void*)>:
c00183d6:	57                   	push   edi
c00183d7:	56                   	push   esi
c00183d8:	53                   	push   ebx
c00183d9:	81 ec 60 01 00 00    	sub    esp,0x160
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00183e9:	e8 86 fd ff ff       	call   c0018174 <ACPI::detectPCI()>
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	83 ec 0c             	sub    esp,0xc
c00183f4:	68 ec bb 02 c0       	push   0xc002bbec
c00183f9:	e8 03 76 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	83 ec 0c             	sub    esp,0xc
c0018404:	68 6f bd 02 c0       	push   0xc002bd6f
c0018409:	e8 e5 46 00 00       	call   c001caf3 <Thr::loadKernelSymbolTable(char const*)>
c001840e:	83 c4 10             	add    esp,0x10
c0018411:	83 ec 0c             	sub    esp,0xc
c0018414:	68 8d bd 02 c0       	push   0xc002bd8d
c0018419:	e8 e3 75 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	83 ec 04             	sub    esp,0x4
c0018424:	6a 0c                	push   0xc
c0018426:	68 a8 bd 02 c0       	push   0xc002bda8
c001842b:	68 b9 bd 02 c0       	push   0xc002bdb9
c0018430:	e8 24 2d 00 00       	call   c001b159 <Reg::readIntWithDefault(char*, char*, int)>
c0018435:	83 c4 10             	add    esp,0x10
c0018438:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001843f:	83 ec 0c             	sub    esp,0xc
c0018442:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018449:	e8 e9 93 ff ff       	call   c0011837 <Virt::setupPageSwapping(int)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	83 ec 0c             	sub    esp,0xc
c0018454:	68 ec a4 02 c0       	push   0xc002a4ec
c0018459:	e8 a3 75 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001845e:	83 c4 10             	add    esp,0x10
c0018461:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0018467:	83 ec 08             	sub    esp,0x8
c001846a:	6a 01                	push   0x1
c001846c:	68 c0 bd 02 c0       	push   0xc002bdc0
c0018471:	e8 f4 50 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	83 ec 08             	sub    esp,0x8
c001847c:	53                   	push   ebx
c001847d:	50                   	push   eax
c001847e:	e8 18 53 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001848d:	83 ec 08             	sub    esp,0x8
c0018490:	6a 12                	push   0x12
c0018492:	50                   	push   eax
c0018493:	e8 24 bd ff ff       	call   c00141bc <getDevicesOfType(DeviceType)>
c0018498:	83 c4 0c             	add    esp,0xc
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184a5:	50                   	push   eax
c00184a6:	e8 79 0b 01 00       	call   c0029024 <LinkedList<Device>::isEmpty()>
c00184ab:	83 c4 10             	add    esp,0x10
c00184ae:	83 f0 01             	xor    eax,0x1
c00184b1:	84 c0                	test   al,al
c00184b3:	0f 84 43 01 00 00    	je     c00185fc <ACPI::open(int, int, void*)+0x226>
c00184b9:	83 ec 0c             	sub    esp,0xc
c00184bc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184c3:	50                   	push   eax
c00184c4:	e8 77 0b 01 00       	call   c0029040 <LinkedList<Device>::getFirstElement()>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00184d3:	83 ec 0c             	sub    esp,0xc
c00184d6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184dd:	50                   	push   eax
c00184de:	e8 65 0b 01 00       	call   c0029048 <LinkedList<Device>::removeFirst()>
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00184ed:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00184f4:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00184fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184ff:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018505:	ba 09 00 00 00       	mov    edx,0x9
c001850a:	fc                   	cld    
c001850b:	89 c7                	mov    edi,eax
c001850d:	89 de                	mov    esi,ebx
c001850f:	89 d1                	mov    ecx,edx
c0018511:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018513:	83 ec 08             	sub    esp,0x8
c0018516:	8d 44 24 38          	lea    eax,[esp+0x38]
c001851a:	50                   	push   eax
c001851b:	83 ec 24             	sub    esp,0x24
c001851e:	89 e0                	mov    eax,esp
c0018520:	89 c3                	mov    ebx,eax
c0018522:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018526:	ba 09 00 00 00       	mov    edx,0x9
c001852b:	89 df                	mov    edi,ebx
c001852d:	89 c6                	mov    esi,eax
c001852f:	89 d1                	mov    ecx,edx
c0018531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018533:	e8 44 a9 00 00       	call   c0022e7c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018538:	83 c4 30             	add    esp,0x30
c001853b:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018542:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001854a:	0f 84 4b ff ff ff    	je     c001849b <ACPI::open(int, int, void*)+0xc5>
c0018550:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001855b:	83 ec 0c             	sub    esp,0xc
c001855e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018565:	e8 3d 74 ff ff       	call   c000f9a7 <malloc>
c001856a:	83 c4 10             	add    esp,0x10
c001856d:	89 c3                	mov    ebx,eax
c001856f:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0018574:	83 ec 04             	sub    esp,0x4
c0018577:	50                   	push   eax
c0018578:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001857f:	53                   	push   ebx
c0018580:	e8 d9 a9 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c0018585:	83 c4 10             	add    esp,0x10
c0018588:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001858f:	83 ec 0c             	sub    esp,0xc
c0018592:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018599:	e8 92 ac ff ff       	call   c0013230 <File::exists()>
c001859e:	83 c4 10             	add    esp,0x10
c00185a1:	84 c0                	test   al,al
c00185a3:	74 27                	je     c00185cc <ACPI::open(int, int, void*)+0x1f6>
c00185a5:	83 ec 08             	sub    esp,0x8
c00185a8:	6a 01                	push   0x1
c00185aa:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00185b1:	e8 b4 4f 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c00185b6:	83 c4 10             	add    esp,0x10
c00185b9:	83 ec 08             	sub    esp,0x8
c00185bc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00185c3:	50                   	push   eax
c00185c4:	e8 d2 51 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c00185c9:	83 c4 10             	add    esp,0x10
c00185cc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00185d4:	0f 84 c1 fe ff ff    	je     c001849b <ACPI::open(int, int, void*)+0xc5>
c00185da:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00185e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e3:	83 c0 08             	add    eax,0x8
c00185e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185f2:	ff d0                	call   eax
c00185f4:	83 c4 10             	add    esp,0x10
c00185f7:	e9 9f fe ff ff       	jmp    c001849b <ACPI::open(int, int, void*)+0xc5>
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018606:	50                   	push   eax
c0018607:	e8 16 0a 01 00       	call   c0029022 <LinkedList<Device>::~LinkedList()>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0018615:	83 ec 08             	sub    esp,0x8
c0018618:	6a 01                	push   0x1
c001861a:	68 db bd 02 c0       	push   0xc002bddb
c001861f:	e8 46 4f 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	83 ec 08             	sub    esp,0x8
c001862a:	53                   	push   ebx
c001862b:	50                   	push   eax
c001862c:	e8 6a 51 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c001863a:	83 ec 08             	sub    esp,0x8
c001863d:	6a 01                	push   0x1
c001863f:	68 f8 bd 02 c0       	push   0xc002bdf8
c0018644:	e8 21 4f 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c0018649:	83 c4 10             	add    esp,0x10
c001864c:	83 ec 08             	sub    esp,0x8
c001864f:	53                   	push   ebx
c0018650:	50                   	push   eax
c0018651:	e8 45 51 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0018656:	83 c4 10             	add    esp,0x10
c0018659:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001865e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018664:	83 e0 04             	and    eax,0x4
c0018667:	84 c0                	test   al,al
c0018669:	0f 84 0d 01 00 00    	je     c001877c <ACPI::open(int, int, void*)+0x3a6>
c001866f:	83 ec 0c             	sub    esp,0xc
c0018672:	68 15 be 02 c0       	push   0xc002be15
c0018677:	e8 85 73 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001868a:	83 ec 0c             	sub    esp,0xc
c001868d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018694:	e8 0e 73 ff ff       	call   c000f9a7 <malloc>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	89 c3                	mov    ebx,eax
c001869e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00186a3:	83 ec 04             	sub    esp,0x4
c00186a6:	50                   	push   eax
c00186a7:	68 32 be 02 c0       	push   0xc002be32
c00186ac:	53                   	push   ebx
c00186ad:	e8 ac a8 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00186bc:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00186c4:	74 1a                	je     c00186e0 <ACPI::open(int, int, void*)+0x30a>
c00186c6:	83 ec 0c             	sub    esp,0xc
c00186c9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00186d0:	e8 5b ab ff ff       	call   c0013230 <File::exists()>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	84 c0                	test   al,al
c00186da:	74 04                	je     c00186e0 <ACPI::open(int, int, void*)+0x30a>
c00186dc:	b0 01                	mov    al,0x1
c00186de:	eb 02                	jmp    c00186e2 <ACPI::open(int, int, void*)+0x30c>
c00186e0:	b0 00                	mov    al,0x0
c00186e2:	84 c0                	test   al,al
c00186e4:	74 25                	je     c001870b <ACPI::open(int, int, void*)+0x335>
c00186e6:	83 ec 08             	sub    esp,0x8
c00186e9:	6a 01                	push   0x1
c00186eb:	68 32 be 02 c0       	push   0xc002be32
c00186f0:	e8 75 4e 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	83 ec 08             	sub    esp,0x8
c00186fb:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018702:	50                   	push   eax
c0018703:	e8 93 50 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c0018708:	83 c4 10             	add    esp,0x10
c001870b:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018713:	74 27                	je     c001873c <ACPI::open(int, int, void*)+0x366>
c0018715:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001871d:	74 1d                	je     c001873c <ACPI::open(int, int, void*)+0x366>
c001871f:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018726:	8b 00                	mov    eax,DWORD PTR [eax]
c0018728:	83 c0 08             	add    eax,0x8
c001872b:	8b 00                	mov    eax,DWORD PTR [eax]
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018737:	ff d0                	call   eax
c0018739:	83 c4 10             	add    esp,0x10
c001873c:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0018741:	83 ec 08             	sub    esp,0x8
c0018744:	68 4f be 02 c0       	push   0xc002be4f
c0018749:	50                   	push   eax
c001874a:	e8 d4 f2 ff ff       	call   c0017a23 <findDataTable(unsigned char*, char*)>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018759:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018761:	74 19                	je     c001877c <ACPI::open(int, int, void*)+0x3a6>
c0018763:	83 ec 08             	sub    esp,0x8
c0018766:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001876d:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018774:	e8 fd fb ff ff       	call   c0018376 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018779:	83 c4 10             	add    esp,0x10
c001877c:	b8 00 00 00 00       	mov    eax,0x0
c0018781:	81 c4 60 01 00 00    	add    esp,0x160
c0018787:	5b                   	pop    ebx
c0018788:	5e                   	pop    esi
c0018789:	5f                   	pop    edi
c001878a:	c3                   	ret    
c001878b:	90                   	nop

c001878c <CPU::close(int, int, void*)>:
c001878c:	31 c0                	xor    eax,eax
c001878e:	c3                   	ret    
c001878f:	90                   	nop

c0018790 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018790:	55                   	push   ebp
c0018791:	57                   	push   edi
c0018792:	56                   	push   esi
c0018793:	53                   	push   ebx
c0018794:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018798:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001879c:	89 ce                	mov    esi,ecx
c001879e:	89 d5                	mov    ebp,edx
c00187a0:	80 f9 04             	cmp    cl,0x4
c00187a3:	75 28                	jne    c00187cd <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187a5:	8d 42 f9             	lea    eax,[edx-0x7]
c00187a8:	3c 03                	cmp    al,0x3
c00187aa:	0f 86 63 01 00 00    	jbe    c0018913 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187b0:	80 fa 03             	cmp    dl,0x3
c00187b3:	0f 84 5a 01 00 00    	je     c0018913 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187b9:	8d 7a f2             	lea    edi,[edx-0xe]
c00187bc:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00187c1:	89 fb                	mov    ebx,edi
c00187c3:	80 fb 01             	cmp    bl,0x1
c00187c6:	77 4e                	ja     c0018816 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187c8:	e9 52 01 00 00       	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cd:	80 f9 05             	cmp    cl,0x5
c00187d0:	75 4d                	jne    c001881f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187d2:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00187d7:	80 fa 03             	cmp    dl,0x3
c00187da:	0f 86 3f 01 00 00    	jbe    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e0:	8d 7a fa             	lea    edi,[edx-0x6]
c00187e3:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c00187e8:	89 fb                	mov    ebx,edi
c00187ea:	80 fb 01             	cmp    bl,0x1
c00187ed:	0f 86 2c 01 00 00    	jbe    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f3:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c00187f8:	80 fa 08             	cmp    dl,0x8
c00187fb:	0f 84 1e 01 00 00    	je     c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018801:	89 d7                	mov    edi,edx
c0018803:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018808:	83 e7 fb             	and    edi,0xfffffffb
c001880b:	89 fb                	mov    ebx,edi
c001880d:	80 fb 09             	cmp    bl,0x9
c0018810:	0f 84 09 01 00 00    	je     c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018816:	31 c0                	xor    eax,eax
c0018818:	89 eb                	mov    ebx,ebp
c001881a:	0f b6 fb             	movzx  edi,bl
c001881d:	eb 30                	jmp    c001884f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001881f:	31 c0                	xor    eax,eax
c0018821:	80 f9 06             	cmp    cl,0x6
c0018824:	75 f2                	jne    c0018818 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018826:	80 fa 0a             	cmp    dl,0xa
c0018829:	77 ed                	ja     c0018818 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001882b:	bf de 05 00 00       	mov    edi,0x5de
c0018830:	0f a3 d7             	bt     edi,edx
c0018833:	73 e3                	jae    c0018818 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018835:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c001883a:	e9 e0 00 00 00       	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883f:	39 c7                	cmp    edi,eax
c0018841:	0f 84 d3 00 00 00    	je     c001891a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018847:	40                   	inc    eax
c0018848:	3d d0 00 00 00       	cmp    eax,0xd0
c001884d:	74 09                	je     c0018858 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001884f:	89 f3                	mov    ebx,esi
c0018851:	80 fb 0f             	cmp    bl,0xf
c0018854:	75 f1                	jne    c0018847 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018856:	eb e7                	jmp    c001883f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018858:	80 f9 10             	cmp    cl,0x10
c001885b:	75 14                	jne    c0018871 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001885d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018860:	83 e0 fb             	and    eax,0xfffffffb
c0018863:	3c 02                	cmp    al,0x2
c0018865:	76 34                	jbe    c001889b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018867:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c001886c:	80 fa 02             	cmp    dl,0x2
c001886f:	eb 24                	jmp    c0018895 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018871:	80 f9 11             	cmp    cl,0x11
c0018874:	75 13                	jne    c0018889 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018876:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c001887b:	80 fa 03             	cmp    dl,0x3
c001887e:	0f 85 9b 00 00 00    	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018884:	e9 91 00 00 00       	jmp    c001891a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018889:	80 f9 12             	cmp    cl,0x12
c001888c:	75 14                	jne    c00188a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001888e:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018893:	fe ca                	dec    dl
c0018895:	0f 85 84 00 00 00    	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889b:	b8 00 db 02 c0       	mov    eax,0xc002db00
c00188a0:	eb 7d                	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a2:	80 f9 14             	cmp    cl,0x14
c00188a5:	75 12                	jne    c00188b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188a7:	4a                   	dec    edx
c00188a8:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00188ad:	80 fa 01             	cmp    dl,0x1
c00188b0:	77 6d                	ja     c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b2:	b8 10 db 02 c0       	mov    eax,0xc002db10
c00188b7:	eb 66                	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b9:	80 f9 15             	cmp    cl,0x15
c00188bc:	75 31                	jne    c00188ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188be:	b8 20 db 02 c0       	mov    eax,0xc002db20
c00188c3:	80 fa 01             	cmp    dl,0x1
c00188c6:	74 57                	je     c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c8:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00188cd:	80 fa 13             	cmp    dl,0x13
c00188d0:	76 0c                	jbe    c00188de <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188d2:	80 fa 30             	cmp    dl,0x30
c00188d5:	75 48                	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d7:	b8 40 db 02 c0       	mov    eax,0xc002db40
c00188dc:	eb 41                	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188de:	b9 04 00 09 00       	mov    ecx,0x90004
c00188e3:	0f a3 d1             	bt     ecx,edx
c00188e6:	73 37                	jae    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e8:	b8 30 db 02 c0       	mov    eax,0xc002db30
c00188ed:	eb 30                	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ef:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00188f4:	80 f9 16             	cmp    cl,0x16
c00188f7:	75 26                	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f9:	b8 50 db 02 c0       	mov    eax,0xc002db50
c00188fe:	84 d2                	test   dl,dl
c0018900:	74 1d                	je     c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018902:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018907:	80 fa 30             	cmp    dl,0x30
c001890a:	75 13                	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890c:	b8 60 db 02 c0       	mov    eax,0xc002db60
c0018911:	eb 0c                	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018913:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018918:	eb 05                	jmp    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891a:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c001891f:	5b                   	pop    ebx
c0018920:	5e                   	pop    esi
c0018921:	5f                   	pop    edi
c0018922:	5d                   	pop    ebp
c0018923:	c3                   	ret    

c0018924 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018924:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018928:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001892c:	80 f9 04             	cmp    cl,0x4
c001892f:	75 6b                	jne    c001899c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018931:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018936:	80 fa 01             	cmp    dl,0x1
c0018939:	0f 86 92 02 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893f:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018944:	80 fa 02             	cmp    dl,0x2
c0018947:	0f 84 84 02 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894d:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018952:	80 fa 03             	cmp    dl,0x3
c0018955:	0f 84 76 02 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895b:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018960:	80 fa 04             	cmp    dl,0x4
c0018963:	0f 84 68 02 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018969:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c001896e:	80 fa 05             	cmp    dl,0x5
c0018971:	0f 84 5a 02 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018977:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c001897c:	80 fa 07             	cmp    dl,0x7
c001897f:	0f 84 4c 02 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018985:	83 ea 08             	sub    edx,0x8
c0018988:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c001898d:	80 fa 01             	cmp    dl,0x1
c0018990:	0f 87 3b 02 00 00    	ja     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018996:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c001899b:	c3                   	ret    
c001899c:	80 f9 05             	cmp    cl,0x5
c001899f:	75 45                	jne    c00189e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189a1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189a4:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00189a9:	80 f9 02             	cmp    cl,0x2
c00189ac:	0f 86 1f 02 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b2:	80 fa 04             	cmp    dl,0x4
c00189b5:	0f 84 f3 01 00 00    	je     c0018bae <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189bb:	80 fa 07             	cmp    dl,0x7
c00189be:	0f 84 0d 02 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c4:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c00189c9:	80 fa 08             	cmp    dl,0x8
c00189cc:	0f 84 ff 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d2:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00189d7:	80 fa 09             	cmp    dl,0x9
c00189da:	0f 85 f1 01 00 00    	jne    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e0:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00189e5:	c3                   	ret    
c00189e6:	80 f9 06             	cmp    cl,0x6
c00189e9:	0f 85 85 01 00 00    	jne    c0018b74 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189ef:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c00189f4:	80 fa 01             	cmp    dl,0x1
c00189f7:	0f 84 d4 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a00:	3c 01                	cmp    al,0x1
c0018a02:	0f 86 ac 01 00 00    	jbe    c0018bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a08:	80 fa 03             	cmp    dl,0x3
c0018a0b:	0f 84 a3 01 00 00    	je     c0018bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a11:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a14:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a19:	80 f9 01             	cmp    cl,0x1
c0018a1c:	0f 86 af 01 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a22:	80 fa 09             	cmp    dl,0x9
c0018a25:	0f 84 8f 01 00 00    	je     c0018bba <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a2b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a2e:	80 f9 01             	cmp    cl,0x1
c0018a31:	0f 86 9a 01 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a37:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a3c:	80 fa 0d             	cmp    dl,0xd
c0018a3f:	0f 84 8c 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a45:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018a4a:	80 fa 0e             	cmp    dl,0xe
c0018a4d:	0f 84 7e 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a53:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018a58:	80 fa 0f             	cmp    dl,0xf
c0018a5b:	0f 84 70 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a61:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a66:	80 fa 15             	cmp    dl,0x15
c0018a69:	0f 84 62 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a72:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018a77:	80 f9 01             	cmp    cl,0x1
c0018a7a:	0f 86 51 01 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a80:	80 fa 1a             	cmp    dl,0x1a
c0018a83:	0f 84 37 01 00 00    	je     c0018bc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a89:	80 fa 1c             	cmp    dl,0x1c
c0018a8c:	0f 84 34 01 00 00    	je     c0018bc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a92:	80 fa 1d             	cmp    dl,0x1d
c0018a95:	0f 84 36 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9b:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018aa0:	80 fa 25             	cmp    dl,0x25
c0018aa3:	0f 84 28 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa9:	8d 4a da             	lea    ecx,[edx-0x26]
c0018aac:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018ab1:	80 f9 01             	cmp    cl,0x1
c0018ab4:	0f 86 17 01 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aba:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018abf:	80 fa 2a             	cmp    dl,0x2a
c0018ac2:	0f 84 09 01 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac8:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018acd:	80 fa 2c             	cmp    dl,0x2c
c0018ad0:	0f 84 fb 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad6:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018adb:	80 fa 2d             	cmp    dl,0x2d
c0018ade:	0f 84 ed 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae4:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018ae9:	80 fa 2e             	cmp    dl,0x2e
c0018aec:	0f 84 df 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af2:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018af7:	80 fa 2f             	cmp    dl,0x2f
c0018afa:	0f 84 d1 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b00:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b03:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b08:	80 f9 01             	cmp    cl,0x1
c0018b0b:	0f 86 c0 00 00 00    	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b11:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b16:	80 fa 37             	cmp    dl,0x37
c0018b19:	0f 84 b2 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1f:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b24:	80 fa 3a             	cmp    dl,0x3a
c0018b27:	0f 84 a4 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018b32:	80 fa 3c             	cmp    dl,0x3c
c0018b35:	0f 84 96 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3b:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018b40:	80 fa 3d             	cmp    dl,0x3d
c0018b43:	0f 84 88 00 00 00    	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b49:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b4e:	80 fa 3e             	cmp    dl,0x3e
c0018b51:	74 7e                	je     c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b53:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b56:	3c 01                	cmp    al,0x1
c0018b58:	76 72                	jbe    c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b5a:	80 fa 3f             	cmp    dl,0x3f
c0018b5d:	74 6d                	je     c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b5f:	80 fa 4a             	cmp    dl,0x4a
c0018b62:	74 0a                	je     c0018b6e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b64:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018b69:	80 fa 4d             	cmp    dl,0x4d
c0018b6c:	75 63                	jne    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6e:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b73:	c3                   	ret    
c0018b74:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018b79:	80 f9 0b             	cmp    cl,0xb
c0018b7c:	75 0a                	jne    c0018b88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b7e:	fe ca                	dec    dl
c0018b80:	75 4f                	jne    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b82:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018b87:	c3                   	ret    
c0018b88:	80 f9 0f             	cmp    cl,0xf
c0018b8b:	75 44                	jne    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8d:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018b92:	80 fa 02             	cmp    dl,0x2
c0018b95:	76 3a                	jbe    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b97:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b9a:	3c 01                	cmp    al,0x1
c0018b9c:	76 0a                	jbe    c0018ba8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b9e:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018ba3:	80 fa 06             	cmp    dl,0x6
c0018ba6:	75 29                	jne    c0018bd1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba8:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018bad:	c3                   	ret    
c0018bae:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018bb3:	c3                   	ret    
c0018bb4:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018bb9:	c3                   	ret    
c0018bba:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018bbf:	c3                   	ret    
c0018bc0:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018bc5:	c3                   	ret    
c0018bc6:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018bcb:	c3                   	ret    
c0018bcc:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018bd1:	c3                   	ret    

c0018bd2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bd2:	60                   	pusha  
c0018bd3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bdf:	9c                   	pushf  
c0018be0:	fa                   	cli    
c0018be1:	0f 09                	wbinvd 
c0018be3:	0f 30                	wrmsr  
c0018be5:	9d                   	popf   
c0018be6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bea:	89 02                	mov    DWORD PTR [edx],eax
c0018bec:	61                   	popa   
c0018bed:	c3                   	ret    

c0018bee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bee:	60                   	pusha  
c0018bef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bf3:	9c                   	pushf  
c0018bf4:	fa                   	cli    
c0018bf5:	0f 09                	wbinvd 
c0018bf7:	31 c0                	xor    eax,eax
c0018bf9:	31 d2                	xor    edx,edx
c0018bfb:	0f 32                	rdmsr  
c0018bfd:	9d                   	popf   
c0018bfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c02:	89 02                	mov    DWORD PTR [edx],eax
c0018c04:	61                   	popa   
c0018c05:	c3                   	ret    

c0018c06 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c06:	56                   	push   esi
c0018c07:	53                   	push   ebx
c0018c08:	83 ec 10             	sub    esp,0x10
c0018c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c0f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c14:	75 5d                	jne    c0018c73 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c16:	83 f8 08             	cmp    eax,0x8
c0018c19:	75 09                	jne    c0018c24 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c1b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c20:	7e 13                	jle    c0018c35 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c22:	eb 30                	jmp    c0018c54 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c24:	83 f8 06             	cmp    eax,0x6
c0018c27:	7c 4a                	jl     c0018c73 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c29:	83 f8 07             	cmp    eax,0x7
c0018c2c:	7e 07                	jle    c0018c35 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c2e:	83 f8 09             	cmp    eax,0x9
c0018c31:	74 21                	je     c0018c54 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c33:	eb 3e                	jmp    c0018c73 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c35:	89 e6                	mov    esi,esp
c0018c37:	8b 1d a8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6a8
c0018c3d:	56                   	push   esi
c0018c3e:	c1 eb 15             	shr    ebx,0x15
c0018c41:	68 82 00 00 c0       	push   0xc0000082
c0018c46:	83 e3 7e             	and    ebx,0x7e
c0018c49:	e8 a0 ff ff ff       	call   c0018bee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c4e:	56                   	push   esi
c0018c4f:	6a 00                	push   0x0
c0018c51:	53                   	push   ebx
c0018c52:	eb 12                	jmp    c0018c66 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c54:	89 e3                	mov    ebx,esp
c0018c56:	53                   	push   ebx
c0018c57:	68 82 00 00 c0       	push   0xc0000082
c0018c5c:	e8 8d ff ff ff       	call   c0018bee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c61:	53                   	push   ebx
c0018c62:	6a 00                	push   0x0
c0018c64:	6a 00                	push   0x0
c0018c66:	68 82 00 00 c0       	push   0xc0000082
c0018c6b:	e8 62 ff ff ff       	call   c0018bd2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c70:	83 c4 18             	add    esp,0x18
c0018c73:	83 c4 10             	add    esp,0x10
c0018c76:	5b                   	pop    ebx
c0018c77:	5e                   	pop    esi
c0018c78:	c3                   	ret    
c0018c79:	90                   	nop

c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c7a:	55                   	push   ebp
c0018c7b:	57                   	push   edi
c0018c7c:	56                   	push   esi
c0018c7d:	53                   	push   ebx
c0018c7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c82:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c86:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c8a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c8e:	39 05 80 db 02 c0    	cmp    DWORD PTR ds:0xc002db80,eax
c0018c94:	75 23                	jne    c0018cb9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c96:	a1 6c f1 02 c0       	mov    eax,ds:0xc002f16c
c0018c9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c9f:	89 06                	mov    DWORD PTR [esi],eax
c0018ca1:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c0018ca6:	89 07                	mov    DWORD PTR [edi],eax
c0018ca8:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c0018cad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cb0:	a1 60 f1 02 c0       	mov    eax,ds:0xc002f160
c0018cb5:	89 02                	mov    DWORD PTR [edx],eax
c0018cb7:	eb 3f                	jmp    c0018cf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cb9:	31 c9                	xor    ecx,ecx
c0018cbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cbf:	0f a2                	cpuid  
c0018cc1:	89 06                	mov    DWORD PTR [esi],eax
c0018cc3:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cc9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018ccc:	89 10                	mov    DWORD PTR [eax],edx
c0018cce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cd2:	a3 80 db 02 c0       	mov    ds:0xc002db80,eax
c0018cd7:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cd9:	a3 6c f1 02 c0       	mov    ds:0xc002f16c,eax
c0018cde:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ce0:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c0018ce5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018ce8:	a3 64 f1 02 c0       	mov    ds:0xc002f164,eax
c0018ced:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cf3:	a3 60 f1 02 c0       	mov    ds:0xc002f160,eax
c0018cf8:	5b                   	pop    ebx
c0018cf9:	5e                   	pop    esi
c0018cfa:	5f                   	pop    edi
c0018cfb:	5d                   	pop    ebp
c0018cfc:	c3                   	ret    
c0018cfd:	90                   	nop

c0018cfe <CPU::cpuidCheckEDX(unsigned int)>:
c0018cfe:	83 ec 10             	sub    esp,0x10
c0018d01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d05:	50                   	push   eax
c0018d06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0a:	50                   	push   eax
c0018d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0f:	50                   	push   eax
c0018d10:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d14:	50                   	push   eax
c0018d15:	6a 01                	push   0x1
c0018d17:	e8 5e ff ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d20:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d24:	0f 95 c0             	setne  al
c0018d27:	83 c4 24             	add    esp,0x24
c0018d2a:	c3                   	ret    
c0018d2b:	90                   	nop

c0018d2c <CPU::cpuidCheckECX(unsigned int)>:
c0018d2c:	83 ec 10             	sub    esp,0x10
c0018d2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d33:	50                   	push   eax
c0018d34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d38:	50                   	push   eax
c0018d39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3d:	50                   	push   eax
c0018d3e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d42:	50                   	push   eax
c0018d43:	6a 01                	push   0x1
c0018d45:	e8 30 ff ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d4e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d52:	0f 95 c0             	setne  al
c0018d55:	83 c4 24             	add    esp,0x24
c0018d58:	c3                   	ret    
c0018d59:	90                   	nop

c0018d5a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d5a:	83 ec 10             	sub    esp,0x10
c0018d5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d61:	50                   	push   eax
c0018d62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d66:	50                   	push   eax
c0018d67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6b:	50                   	push   eax
c0018d6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d70:	50                   	push   eax
c0018d71:	6a 07                	push   0x7
c0018d73:	e8 02 ff ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d7c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d80:	0f 95 c0             	setne  al
c0018d83:	83 c4 24             	add    esp,0x24
c0018d86:	c3                   	ret    
c0018d87:	90                   	nop

c0018d88 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d88:	83 ec 10             	sub    esp,0x10
c0018d8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8f:	50                   	push   eax
c0018d90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d94:	50                   	push   eax
c0018d95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d99:	50                   	push   eax
c0018d9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9e:	50                   	push   eax
c0018d9f:	6a 07                	push   0x7
c0018da1:	e8 d4 fe ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018daa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dae:	0f 95 c0             	setne  al
c0018db1:	83 c4 24             	add    esp,0x24
c0018db4:	c3                   	ret    
c0018db5:	90                   	nop

c0018db6 <CPU::CPU()>:
c0018db6:	83 ec 0c             	sub    esp,0xc
c0018db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dbd:	83 ec 08             	sub    esp,0x8
c0018dc0:	68 d5 bf 02 c0       	push   0xc002bfd5
c0018dc5:	50                   	push   eax
c0018dc6:	e8 71 b2 ff ff       	call   c001403c <Device::Device(char const*)>
c0018dcb:	83 c4 10             	add    esp,0x10
c0018dce:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c0018dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd7:	89 10                	mov    DWORD PTR [eax],edx
c0018dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ddd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018deb:	05 78 01 00 00       	add    eax,0x178
c0018df0:	83 ec 0c             	sub    esp,0xc
c0018df3:	50                   	push   eax
c0018df4:	e8 9f 62 ff ff       	call   c000f098 <GDT::GDT()>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e00:	05 7c 09 00 00       	add    eax,0x97c
c0018e05:	83 ec 0c             	sub    esp,0xc
c0018e08:	50                   	push   eax
c0018e09:	e8 da 64 ff ff       	call   c000f2e8 <IDT::IDT()>
c0018e0e:	83 c4 10             	add    esp,0x10
c0018e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e15:	05 7c 11 00 00       	add    eax,0x117c
c0018e1a:	83 ec 0c             	sub    esp,0xc
c0018e1d:	50                   	push   eax
c0018e1e:	e8 51 81 ff ff       	call   c0010f74 <TSS::TSS()>
c0018e23:	83 c4 10             	add    esp,0x10
c0018e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e35:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e3f:	90                   	nop
c0018e40:	83 c4 0c             	add    esp,0xc
c0018e43:	c3                   	ret    

c0018e44 <CPU::displayFeatures()>:
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <CPU::detectFeatures()>:
c0018e46:	55                   	push   ebp
c0018e47:	57                   	push   edi
c0018e48:	56                   	push   esi
c0018e49:	53                   	push   ebx
c0018e4a:	83 ec 50             	sub    esp,0x50
c0018e4d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e51:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e5b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e62:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e68:	6a 0d                	push   0xd
c0018e6a:	6a 00                	push   0x0
c0018e6c:	55                   	push   ebp
c0018e6d:	e8 de 78 fe ff       	call   c0000750 <memset>
c0018e72:	83 c4 10             	add    esp,0x10
c0018e75:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018e7a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e81:	0f 84 22 09 00 00    	je     c00197a9 <CPU::detectFeatures()+0x963>
c0018e87:	83 ec 0c             	sub    esp,0xc
c0018e8a:	89 ef                	mov    edi,ebp
c0018e8c:	6a 10                	push   0x10
c0018e8e:	e8 6b fe ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018e93:	83 e0 01             	and    eax,0x1
c0018e96:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e99:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e9f:	83 e0 fd             	and    eax,0xfffffffd
c0018ea2:	09 d0                	or     eax,edx
c0018ea4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eaa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018eb1:	e8 48 fe ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018eb6:	83 e0 01             	and    eax,0x1
c0018eb9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ec0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ec6:	83 e0 fb             	and    eax,0xfffffffb
c0018ec9:	09 d0                	or     eax,edx
c0018ecb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ed1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018ed8:	e8 21 fe ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018edd:	83 e0 01             	and    eax,0x1
c0018ee0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ee7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eed:	83 e0 f7             	and    eax,0xfffffff7
c0018ef0:	09 d0                	or     eax,edx
c0018ef2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ef8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018eff:	e8 fa fd ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018f04:	83 e0 01             	and    eax,0x1
c0018f07:	c1 e0 04             	shl    eax,0x4
c0018f0a:	88 c2                	mov    dl,al
c0018f0c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f12:	83 e0 ef             	and    eax,0xffffffef
c0018f15:	09 d0                	or     eax,edx
c0018f17:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f1d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018f24:	e8 d5 fd ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018f29:	83 e0 01             	and    eax,0x1
c0018f2c:	c1 e0 05             	shl    eax,0x5
c0018f2f:	88 c2                	mov    dl,al
c0018f31:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f37:	83 e0 df             	and    eax,0xffffffdf
c0018f3a:	09 d0                	or     eax,edx
c0018f3c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f42:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f49:	e8 b0 fd ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018f4e:	83 e0 01             	and    eax,0x1
c0018f51:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f54:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f5a:	83 e0 fd             	and    eax,0xfffffffd
c0018f5d:	09 d0                	or     eax,edx
c0018f5f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f65:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f6c:	e8 8d fd ff ff       	call   c0018cfe <CPU::cpuidCheckEDX(unsigned int)>
c0018f71:	83 e0 01             	and    eax,0x1
c0018f74:	c1 e0 06             	shl    eax,0x6
c0018f77:	88 c2                	mov    dl,al
c0018f79:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f7f:	83 e0 bf             	and    eax,0xffffffbf
c0018f82:	09 d0                	or     eax,edx
c0018f84:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f8a:	58                   	pop    eax
c0018f8b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f8f:	50                   	push   eax
c0018f90:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f94:	50                   	push   eax
c0018f95:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f99:	56                   	push   esi
c0018f9a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f9e:	50                   	push   eax
c0018f9f:	6a 00                	push   0x0
c0018fa1:	e8 d4 fc ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fa6:	b8 04 00 00 00       	mov    eax,0x4
c0018fab:	89 c1                	mov    ecx,eax
c0018fad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018faf:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018fb5:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018fb9:	89 c1                	mov    ecx,eax
c0018fbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fbd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018fc3:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018fc7:	89 c1                	mov    ecx,eax
c0018fc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fcb:	83 c4 18             	add    esp,0x18
c0018fce:	68 80 be 02 c0       	push   0xc002be80
c0018fd3:	55                   	push   ebp
c0018fd4:	e8 bf 78 fe ff       	call   c0000898 <strcmp>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	85 c0                	test   eax,eax
c0018fde:	75 0f                	jne    c0018fef <CPU::detectFeatures()+0x1a9>
c0018fe0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018fea:	e9 22 02 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0018fef:	50                   	push   eax
c0018ff0:	50                   	push   eax
c0018ff1:	68 8d be 02 c0       	push   0xc002be8d
c0018ff6:	55                   	push   ebp
c0018ff7:	e8 9c 78 fe ff       	call   c0000898 <strcmp>
c0018ffc:	83 c4 10             	add    esp,0x10
c0018fff:	85 c0                	test   eax,eax
c0019001:	74 dd                	je     c0018fe0 <CPU::detectFeatures()+0x19a>
c0019003:	50                   	push   eax
c0019004:	50                   	push   eax
c0019005:	68 9a be 02 c0       	push   0xc002be9a
c001900a:	55                   	push   ebp
c001900b:	e8 88 78 fe ff       	call   c0000898 <strcmp>
c0019010:	83 c4 10             	add    esp,0x10
c0019013:	85 c0                	test   eax,eax
c0019015:	74 2a                	je     c0019041 <CPU::detectFeatures()+0x1fb>
c0019017:	50                   	push   eax
c0019018:	50                   	push   eax
c0019019:	68 a7 be 02 c0       	push   0xc002bea7
c001901e:	55                   	push   ebp
c001901f:	e8 74 78 fe ff       	call   c0000898 <strcmp>
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	85 c0                	test   eax,eax
c0019029:	74 16                	je     c0019041 <CPU::detectFeatures()+0x1fb>
c001902b:	50                   	push   eax
c001902c:	50                   	push   eax
c001902d:	68 b4 be 02 c0       	push   0xc002beb4
c0019032:	55                   	push   ebp
c0019033:	e8 60 78 fe ff       	call   c0000898 <strcmp>
c0019038:	83 c4 10             	add    esp,0x10
c001903b:	85 c0                	test   eax,eax
c001903d:	74 48                	je     c0019087 <CPU::detectFeatures()+0x241>
c001903f:	eb 0f                	jmp    c0019050 <CPU::detectFeatures()+0x20a>
c0019041:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001904b:	e9 c1 01 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0019050:	50                   	push   eax
c0019051:	50                   	push   eax
c0019052:	68 c1 be 02 c0       	push   0xc002bec1
c0019057:	55                   	push   ebp
c0019058:	e8 3b 78 fe ff       	call   c0000898 <strcmp>
c001905d:	83 c4 10             	add    esp,0x10
c0019060:	85 c0                	test   eax,eax
c0019062:	74 23                	je     c0019087 <CPU::detectFeatures()+0x241>
c0019064:	57                   	push   edi
c0019065:	57                   	push   edi
c0019066:	68 ce be 02 c0       	push   0xc002bece
c001906b:	55                   	push   ebp
c001906c:	e8 27 78 fe ff       	call   c0000898 <strcmp>
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	85 c0                	test   eax,eax
c0019076:	75 1e                	jne    c0019096 <CPU::detectFeatures()+0x250>
c0019078:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019082:	e9 8a 01 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0019087:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019091:	e9 7b 01 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0019096:	56                   	push   esi
c0019097:	56                   	push   esi
c0019098:	68 db be 02 c0       	push   0xc002bedb
c001909d:	55                   	push   ebp
c001909e:	e8 f5 77 fe ff       	call   c0000898 <strcmp>
c00190a3:	83 c4 10             	add    esp,0x10
c00190a6:	85 c0                	test   eax,eax
c00190a8:	75 0f                	jne    c00190b9 <CPU::detectFeatures()+0x273>
c00190aa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00190b4:	e9 58 01 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c00190b9:	51                   	push   ecx
c00190ba:	51                   	push   ecx
c00190bb:	68 9a be 02 c0       	push   0xc002be9a
c00190c0:	55                   	push   ebp
c00190c1:	e8 d2 77 fe ff       	call   c0000898 <strcmp>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	85 c0                	test   eax,eax
c00190cb:	75 0f                	jne    c00190dc <CPU::detectFeatures()+0x296>
c00190cd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00190d7:	e9 35 01 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c00190dc:	52                   	push   edx
c00190dd:	52                   	push   edx
c00190de:	68 e8 be 02 c0       	push   0xc002bee8
c00190e3:	55                   	push   ebp
c00190e4:	e8 af 77 fe ff       	call   c0000898 <strcmp>
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	85 c0                	test   eax,eax
c00190ee:	75 0f                	jne    c00190ff <CPU::detectFeatures()+0x2b9>
c00190f0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00190fa:	e9 12 01 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c00190ff:	50                   	push   eax
c0019100:	50                   	push   eax
c0019101:	68 f5 be 02 c0       	push   0xc002bef5
c0019106:	55                   	push   ebp
c0019107:	e8 8c 77 fe ff       	call   c0000898 <strcmp>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	85 c0                	test   eax,eax
c0019111:	75 0f                	jne    c0019122 <CPU::detectFeatures()+0x2dc>
c0019113:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001911d:	e9 ef 00 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0019122:	50                   	push   eax
c0019123:	50                   	push   eax
c0019124:	68 02 bf 02 c0       	push   0xc002bf02
c0019129:	55                   	push   ebp
c001912a:	e8 69 77 fe ff       	call   c0000898 <strcmp>
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	85 c0                	test   eax,eax
c0019134:	75 0f                	jne    c0019145 <CPU::detectFeatures()+0x2ff>
c0019136:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019140:	e9 cc 00 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0019145:	50                   	push   eax
c0019146:	50                   	push   eax
c0019147:	68 0f bf 02 c0       	push   0xc002bf0f
c001914c:	55                   	push   ebp
c001914d:	e8 46 77 fe ff       	call   c0000898 <strcmp>
c0019152:	83 c4 10             	add    esp,0x10
c0019155:	85 c0                	test   eax,eax
c0019157:	75 0f                	jne    c0019168 <CPU::detectFeatures()+0x322>
c0019159:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019163:	e9 a9 00 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c0019168:	50                   	push   eax
c0019169:	50                   	push   eax
c001916a:	68 1c bf 02 c0       	push   0xc002bf1c
c001916f:	55                   	push   ebp
c0019170:	e8 23 77 fe ff       	call   c0000898 <strcmp>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	85 c0                	test   eax,eax
c001917a:	75 0f                	jne    c001918b <CPU::detectFeatures()+0x345>
c001917c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019186:	e9 86 00 00 00       	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c001918b:	50                   	push   eax
c001918c:	50                   	push   eax
c001918d:	68 29 bf 02 c0       	push   0xc002bf29
c0019192:	55                   	push   ebp
c0019193:	e8 00 77 fe ff       	call   c0000898 <strcmp>
c0019198:	83 c4 10             	add    esp,0x10
c001919b:	85 c0                	test   eax,eax
c001919d:	75 0c                	jne    c00191ab <CPU::detectFeatures()+0x365>
c001919f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00191a9:	eb 66                	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c00191ab:	50                   	push   eax
c00191ac:	50                   	push   eax
c00191ad:	68 36 bf 02 c0       	push   0xc002bf36
c00191b2:	55                   	push   ebp
c00191b3:	e8 e0 76 fe ff       	call   c0000898 <strcmp>
c00191b8:	83 c4 10             	add    esp,0x10
c00191bb:	85 c0                	test   eax,eax
c00191bd:	75 0c                	jne    c00191cb <CPU::detectFeatures()+0x385>
c00191bf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00191c9:	eb 46                	jmp    c0019211 <CPU::detectFeatures()+0x3cb>
c00191cb:	57                   	push   edi
c00191cc:	57                   	push   edi
c00191cd:	68 43 bf 02 c0       	push   0xc002bf43
c00191d2:	55                   	push   ebp
c00191d3:	e8 c0 76 fe ff       	call   c0000898 <strcmp>
c00191d8:	83 c4 10             	add    esp,0x10
c00191db:	85 c0                	test   eax,eax
c00191dd:	74 e0                	je     c00191bf <CPU::detectFeatures()+0x379>
c00191df:	56                   	push   esi
c00191e0:	56                   	push   esi
c00191e1:	68 50 bf 02 c0       	push   0xc002bf50
c00191e6:	55                   	push   ebp
c00191e7:	e8 ac 76 fe ff       	call   c0000898 <strcmp>
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	85 c0                	test   eax,eax
c00191f1:	74 cc                	je     c00191bf <CPU::detectFeatures()+0x379>
c00191f3:	51                   	push   ecx
c00191f4:	51                   	push   ecx
c00191f5:	68 5d bf 02 c0       	push   0xc002bf5d
c00191fa:	55                   	push   ebp
c00191fb:	e8 98 76 fe ff       	call   c0000898 <strcmp>
c0019200:	83 c4 10             	add    esp,0x10
c0019203:	85 c0                	test   eax,eax
c0019205:	74 b8                	je     c00191bf <CPU::detectFeatures()+0x379>
c0019207:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019211:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019216:	0f 86 be 00 00 00    	jbe    c00192da <CPU::detectFeatures()+0x494>
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	68 80 00 00 00       	push   0x80
c0019224:	e8 31 fb ff ff       	call   c0018d5a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019229:	83 e0 01             	and    eax,0x1
c001922c:	c1 e0 06             	shl    eax,0x6
c001922f:	88 c2                	mov    dl,al
c0019231:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019237:	83 e0 bf             	and    eax,0xffffffbf
c001923a:	09 d0                	or     eax,edx
c001923c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019242:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019249:	e8 0c fb ff ff       	call   c0018d5a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001924e:	83 e0 01             	and    eax,0x1
c0019251:	c1 e0 04             	shl    eax,0x4
c0019254:	88 c2                	mov    dl,al
c0019256:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001925c:	83 e0 ef             	and    eax,0xffffffef
c001925f:	09 d0                	or     eax,edx
c0019261:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019267:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001926e:	e8 e7 fa ff ff       	call   c0018d5a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019273:	c1 e0 07             	shl    eax,0x7
c0019276:	88 c2                	mov    dl,al
c0019278:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001927e:	83 e0 7f             	and    eax,0x7f
c0019281:	09 d0                	or     eax,edx
c0019283:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019289:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019290:	e8 f3 fa ff ff       	call   c0018d88 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019295:	83 e0 01             	and    eax,0x1
c0019298:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001929f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192a5:	83 e0 f7             	and    eax,0xfffffff7
c00192a8:	09 d0                	or     eax,edx
c00192aa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00192b7:	e8 cc fa ff ff       	call   c0018d88 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	83 e0 01             	and    eax,0x1
c00192c2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00192c9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192cf:	83 e0 fb             	and    eax,0xfffffffb
c00192d2:	09 d0                	or     eax,edx
c00192d4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192da:	83 ec 0c             	sub    esp,0xc
c00192dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192e1:	50                   	push   eax
c00192e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192e6:	50                   	push   eax
c00192e7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192eb:	56                   	push   esi
c00192ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192f0:	50                   	push   eax
c00192f1:	6a 01                	push   0x1
c00192f3:	e8 82 f9 ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192f8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192fc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019302:	88 ca                	mov    dl,cl
c0019304:	83 e0 f0             	and    eax,0xfffffff0
c0019307:	83 e2 0f             	and    edx,0xf
c001930a:	09 d0                	or     eax,edx
c001930c:	88 ca                	mov    dl,cl
c001930e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019314:	c0 ea 04             	shr    dl,0x4
c0019317:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001931b:	0f b6 c2             	movzx  eax,dl
c001931e:	83 c4 20             	add    esp,0x20
c0019321:	c1 e0 06             	shl    eax,0x6
c0019324:	89 c7                	mov    edi,eax
c0019326:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001932c:	66 25 3f c0          	and    ax,0xc03f
c0019330:	09 f8                	or     eax,edi
c0019332:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019339:	89 c8                	mov    eax,ecx
c001933b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019342:	c1 e8 08             	shr    eax,0x8
c0019345:	83 e5 3f             	and    ebp,0x3f
c0019348:	83 e0 0f             	and    eax,0xf
c001934b:	89 c7                	mov    edi,eax
c001934d:	c1 e7 06             	shl    edi,0x6
c0019350:	09 ef                	or     edi,ebp
c0019352:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019359:	89 fa                	mov    edx,edi
c001935b:	83 e5 c0             	and    ebp,0xffffffc0
c001935e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019364:	88 c2                	mov    dl,al
c0019366:	c0 ea 02             	shr    dl,0x2
c0019369:	89 d7                	mov    edi,edx
c001936b:	09 ef                	or     edi,ebp
c001936d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019373:	89 fa                	mov    edx,edi
c0019375:	83 e5 cf             	and    ebp,0xffffffcf
c0019378:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001937e:	89 cf                	mov    edi,ecx
c0019380:	c1 ef 0c             	shr    edi,0xc
c0019383:	83 e7 03             	and    edi,0x3
c0019386:	c1 e7 04             	shl    edi,0x4
c0019389:	09 ef                	or     edi,ebp
c001938b:	3c 06                	cmp    al,0x6
c001938d:	89 fa                	mov    edx,edi
c001938f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019395:	74 04                	je     c001939b <CPU::detectFeatures()+0x555>
c0019397:	3c 0f                	cmp    al,0xf
c0019399:	75 5c                	jne    c00193f7 <CPU::detectFeatures()+0x5b1>
c001939b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001939f:	89 cf                	mov    edi,ecx
c00193a1:	c1 ef 10             	shr    edi,0x10
c00193a4:	c1 e7 04             	shl    edi,0x4
c00193a7:	09 fa                	or     edx,edi
c00193a9:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00193af:	0f b6 d2             	movzx  edx,dl
c00193b2:	66 81 e7 3f c0       	and    di,0xc03f
c00193b7:	c1 e2 06             	shl    edx,0x6
c00193ba:	09 fa                	or     edx,edi
c00193bc:	3c 0f                	cmp    al,0xf
c00193be:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00193c5:	75 30                	jne    c00193f7 <CPU::detectFeatures()+0x5b1>
c00193c7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00193cd:	c1 e9 14             	shr    ecx,0x14
c00193d0:	83 e0 3f             	and    eax,0x3f
c00193d3:	83 c1 0f             	add    ecx,0xf
c00193d6:	88 ca                	mov    dl,cl
c00193d8:	c0 e9 02             	shr    cl,0x2
c00193db:	c1 e2 06             	shl    edx,0x6
c00193de:	09 d0                	or     eax,edx
c00193e0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00193e6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00193ec:	83 e0 c0             	and    eax,0xffffffc0
c00193ef:	09 c1                	or     ecx,eax
c00193f1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00193f7:	83 ec 0c             	sub    esp,0xc
c00193fa:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019401:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019405:	50                   	push   eax
c0019406:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001940a:	55                   	push   ebp
c001940b:	56                   	push   esi
c001940c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019410:	57                   	push   edi
c0019411:	68 00 00 00 80       	push   0x80000000
c0019416:	e8 5f f8 ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001941b:	83 c4 20             	add    esp,0x20
c001941e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019426:	76 22                	jbe    c001944a <CPU::detectFeatures()+0x604>
c0019428:	83 ec 0c             	sub    esp,0xc
c001942b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001942f:	50                   	push   eax
c0019430:	55                   	push   ebp
c0019431:	56                   	push   esi
c0019432:	57                   	push   edi
c0019433:	68 01 00 00 80       	push   0x80000001
c0019438:	e8 3d f8 ff ff       	call   c0018c7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001943d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019447:	83 c4 20             	add    esp,0x20
c001944a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019450:	83 f8 01             	cmp    eax,0x1
c0019453:	75 6f                	jne    c00194c4 <CPU::detectFeatures()+0x67e>
c0019455:	51                   	push   ecx
c0019456:	51                   	push   ecx
c0019457:	68 69 bf 02 c0       	push   0xc002bf69
c001945c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019460:	56                   	push   esi
c0019461:	e8 a6 73 fe ff       	call   c000080c <strcpy>
c0019466:	5f                   	pop    edi
c0019467:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001946d:	5d                   	pop    ebp
c001946e:	66 c1 e8 06          	shr    ax,0x6
c0019472:	0f b6 c0             	movzx  eax,al
c0019475:	50                   	push   eax
c0019476:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001947c:	c1 e8 0e             	shr    eax,0xe
c001947f:	0f b6 c0             	movzx  eax,al
c0019482:	50                   	push   eax
c0019483:	e8 9c f4 ff ff       	call   c0018924 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019488:	5a                   	pop    edx
c0019489:	59                   	pop    ecx
c001948a:	50                   	push   eax
c001948b:	56                   	push   esi
c001948c:	e8 bb 74 fe ff       	call   c000094c <strcat>
c0019491:	5f                   	pop    edi
c0019492:	5d                   	pop    ebp
c0019493:	56                   	push   esi
c0019494:	53                   	push   ebx
c0019495:	e8 94 ab ff ff       	call   c001402e <Device::setName(char const*)>
c001949a:	58                   	pop    eax
c001949b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194a1:	5a                   	pop    edx
c00194a2:	68 70 bf 02 c0       	push   0xc002bf70
c00194a7:	50                   	push   eax
c00194a8:	e8 eb 73 fe ff       	call   c0000898 <strcmp>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	85 c0                	test   eax,eax
c00194b2:	0f 85 71 03 00 00    	jne    c0019829 <CPU::detectFeatures()+0x9e3>
c00194b8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00194bf:	e9 65 03 00 00       	jmp    c0019829 <CPU::detectFeatures()+0x9e3>
c00194c4:	83 f8 02             	cmp    eax,0x2
c00194c7:	0f 85 b5 00 00 00    	jne    c0019582 <CPU::detectFeatures()+0x73c>
c00194cd:	57                   	push   edi
c00194ce:	57                   	push   edi
c00194cf:	68 82 bf 02 c0       	push   0xc002bf82
c00194d4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00194d8:	56                   	push   esi
c00194d9:	e8 2e 73 fe ff       	call   c000080c <strcpy>
c00194de:	5d                   	pop    ebp
c00194df:	58                   	pop    eax
c00194e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194e6:	66 c1 e8 06          	shr    ax,0x6
c00194ea:	0f b6 c0             	movzx  eax,al
c00194ed:	50                   	push   eax
c00194ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f4:	c1 e8 0e             	shr    eax,0xe
c00194f7:	0f b6 c0             	movzx  eax,al
c00194fa:	50                   	push   eax
c00194fb:	e8 90 f2 ff ff       	call   c0018790 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019500:	5a                   	pop    edx
c0019501:	59                   	pop    ecx
c0019502:	50                   	push   eax
c0019503:	56                   	push   esi
c0019504:	e8 43 74 fe ff       	call   c000094c <strcat>
c0019509:	5f                   	pop    edi
c001950a:	5d                   	pop    ebp
c001950b:	56                   	push   esi
c001950c:	53                   	push   ebx
c001950d:	e8 1c ab ff ff       	call   c001402e <Device::setName(char const*)>
c0019512:	58                   	pop    eax
c0019513:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019519:	5a                   	pop    edx
c001951a:	68 87 bf 02 c0       	push   0xc002bf87
c001951f:	50                   	push   eax
c0019520:	e8 73 73 fe ff       	call   c0000898 <strcmp>
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	85 c0                	test   eax,eax
c001952a:	75 20                	jne    c001954c <CPU::detectFeatures()+0x706>
c001952c:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0019532:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019538:	a8 01                	test   al,0x1
c001953a:	74 10                	je     c001954c <CPU::detectFeatures()+0x706>
c001953c:	83 e0 fe             	and    eax,0xfffffffe
c001953f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019545:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001954c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019552:	c1 e8 0e             	shr    eax,0xe
c0019555:	3c 05                	cmp    al,0x5
c0019557:	0f 85 cc 02 00 00    	jne    c0019829 <CPU::detectFeatures()+0x9e3>
c001955d:	56                   	push   esi
c001955e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019564:	83 e0 0f             	and    eax,0xf
c0019567:	50                   	push   eax
c0019568:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001956e:	66 c1 e8 06          	shr    ax,0x6
c0019572:	0f b6 c0             	movzx  eax,al
c0019575:	50                   	push   eax
c0019576:	6a 05                	push   0x5
c0019578:	e8 89 f6 ff ff       	call   c0018c06 <CPU::AMD_K6_writeback(int, int, int)>
c001957d:	e9 1f 02 00 00       	jmp    c00197a1 <CPU::detectFeatures()+0x95b>
c0019582:	8d 50 fd             	lea    edx,[eax-0x3]
c0019585:	83 fa 01             	cmp    edx,0x1
c0019588:	76 09                	jbe    c0019593 <CPU::detectFeatures()+0x74d>
c001958a:	83 f8 06             	cmp    eax,0x6
c001958d:	0f 85 91 01 00 00    	jne    c0019724 <CPU::detectFeatures()+0x8de>
c0019593:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019599:	c1 ea 0e             	shr    edx,0xe
c001959c:	80 fa 05             	cmp    dl,0x5
c001959f:	75 7b                	jne    c001961c <CPU::detectFeatures()+0x7d6>
c00195a1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195a7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195ac:	66 81 fa 00 01       	cmp    dx,0x100
c00195b1:	75 0c                	jne    c00195bf <CPU::detectFeatures()+0x779>
c00195b3:	51                   	push   ecx
c00195b4:	51                   	push   ecx
c00195b5:	68 8e bf 02 c0       	push   0xc002bf8e
c00195ba:	e9 dc 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c00195bf:	66 81 fa 00 02       	cmp    dx,0x200
c00195c4:	75 0c                	jne    c00195d2 <CPU::detectFeatures()+0x78c>
c00195c6:	52                   	push   edx
c00195c7:	52                   	push   edx
c00195c8:	68 a1 bf 02 c0       	push   0xc002bfa1
c00195cd:	e9 c9 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c00195d2:	66 81 fa 40 02       	cmp    dx,0x240
c00195d7:	75 0c                	jne    c00195e5 <CPU::detectFeatures()+0x79f>
c00195d9:	50                   	push   eax
c00195da:	50                   	push   eax
c00195db:	68 b3 bf 02 c0       	push   0xc002bfb3
c00195e0:	e9 b6 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c00195e5:	83 f8 06             	cmp    eax,0x6
c00195e8:	75 0c                	jne    c00195f6 <CPU::detectFeatures()+0x7b0>
c00195ea:	50                   	push   eax
c00195eb:	50                   	push   eax
c00195ec:	68 c5 bf 02 c0       	push   0xc002bfc5
c00195f1:	e9 a5 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c00195f6:	83 f8 04             	cmp    eax,0x4
c00195f9:	75 0c                	jne    c0019607 <CPU::detectFeatures()+0x7c1>
c00195fb:	50                   	push   eax
c00195fc:	50                   	push   eax
c00195fd:	68 d1 bf 02 c0       	push   0xc002bfd1
c0019602:	e9 94 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019607:	83 f8 03             	cmp    eax,0x3
c001960a:	0f 85 19 02 00 00    	jne    c0019829 <CPU::detectFeatures()+0x9e3>
c0019610:	50                   	push   eax
c0019611:	50                   	push   eax
c0019612:	68 d9 bf 02 c0       	push   0xc002bfd9
c0019617:	e9 7f 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c001961c:	80 fa 06             	cmp    dl,0x6
c001961f:	0f 85 db 00 00 00    	jne    c0019700 <CPU::detectFeatures()+0x8ba>
c0019625:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001962b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019630:	66 81 fa 80 01       	cmp    dx,0x180
c0019635:	75 0c                	jne    c0019643 <CPU::detectFeatures()+0x7fd>
c0019637:	50                   	push   eax
c0019638:	50                   	push   eax
c0019639:	68 e4 bf 02 c0       	push   0xc002bfe4
c001963e:	e9 58 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019643:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019649:	66 f7 c1 80 ff       	test   cx,0xff80
c001964e:	75 0c                	jne    c001965c <CPU::detectFeatures()+0x816>
c0019650:	50                   	push   eax
c0019651:	50                   	push   eax
c0019652:	68 f4 bf 02 c0       	push   0xc002bff4
c0019657:	e9 3f 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c001965c:	66 81 fa 40 02       	cmp    dx,0x240
c0019661:	75 0c                	jne    c001966f <CPU::detectFeatures()+0x829>
c0019663:	55                   	push   ebp
c0019664:	55                   	push   ebp
c0019665:	68 fb bf 02 c0       	push   0xc002bffb
c001966a:	e9 2c 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c001966f:	66 81 fa 80 02       	cmp    dx,0x280
c0019674:	75 0c                	jne    c0019682 <CPU::detectFeatures()+0x83c>
c0019676:	57                   	push   edi
c0019677:	57                   	push   edi
c0019678:	68 04 c0 02 c0       	push   0xc002c004
c001967d:	e9 19 01 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019682:	66 81 fa 40 03       	cmp    dx,0x340
c0019687:	74 ed                	je     c0019676 <CPU::detectFeatures()+0x830>
c0019689:	66 81 fa c0 03       	cmp    dx,0x3c0
c001968e:	75 0c                	jne    c001969c <CPU::detectFeatures()+0x856>
c0019690:	56                   	push   esi
c0019691:	56                   	push   esi
c0019692:	68 0b c0 02 c0       	push   0xc002c00b
c0019697:	e9 ff 00 00 00       	jmp    c001979b <CPU::detectFeatures()+0x955>
c001969c:	83 f8 06             	cmp    eax,0x6
c001969f:	0f 84 45 ff ff ff    	je     c00195ea <CPU::detectFeatures()+0x7a4>
c00196a5:	83 f8 04             	cmp    eax,0x4
c00196a8:	0f 84 4d ff ff ff    	je     c00195fb <CPU::detectFeatures()+0x7b5>
c00196ae:	83 f8 03             	cmp    eax,0x3
c00196b1:	0f 85 72 01 00 00    	jne    c0019829 <CPU::detectFeatures()+0x9e3>
c00196b7:	51                   	push   ecx
c00196b8:	51                   	push   ecx
c00196b9:	68 14 c0 02 c0       	push   0xc002c014
c00196be:	53                   	push   ebx
c00196bf:	e8 6a a9 ff ff       	call   c001402e <Device::setName(char const*)>
c00196c4:	b1 c1                	mov    cl,0xc1
c00196c6:	88 c8                	mov    al,cl
c00196c8:	e6 22                	out    0x22,al
c00196ca:	e4 23                	in     al,0x23
c00196cc:	88 c2                	mov    dl,al
c00196ce:	88 c8                	mov    al,cl
c00196d0:	e6 22                	out    0x22,al
c00196d2:	88 d0                	mov    al,dl
c00196d4:	83 c8 10             	or     eax,0x10
c00196d7:	e6 23                	out    0x23,al
c00196d9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00196e0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00196e3:	89 d0                	mov    eax,edx
c00196e5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00196eb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00196ef:	40                   	inc    eax
c00196f0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00196f6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00196fb:	e9 a1 00 00 00       	jmp    c00197a1 <CPU::detectFeatures()+0x95b>
c0019700:	83 f8 06             	cmp    eax,0x6
c0019703:	0f 84 e1 fe ff ff    	je     c00195ea <CPU::detectFeatures()+0x7a4>
c0019709:	83 f8 04             	cmp    eax,0x4
c001970c:	0f 84 e9 fe ff ff    	je     c00195fb <CPU::detectFeatures()+0x7b5>
c0019712:	83 f8 03             	cmp    eax,0x3
c0019715:	0f 85 0e 01 00 00    	jne    c0019829 <CPU::detectFeatures()+0x9e3>
c001971b:	52                   	push   edx
c001971c:	52                   	push   edx
c001971d:	68 1f c0 02 c0       	push   0xc002c01f
c0019722:	eb 77                	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019724:	83 f8 07             	cmp    eax,0x7
c0019727:	75 09                	jne    c0019732 <CPU::detectFeatures()+0x8ec>
c0019729:	50                   	push   eax
c001972a:	50                   	push   eax
c001972b:	68 29 c0 02 c0       	push   0xc002c029
c0019730:	eb 69                	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019732:	83 f8 0a             	cmp    eax,0xa
c0019735:	75 09                	jne    c0019740 <CPU::detectFeatures()+0x8fa>
c0019737:	50                   	push   eax
c0019738:	50                   	push   eax
c0019739:	68 34 c0 02 c0       	push   0xc002c034
c001973e:	eb 5b                	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019740:	83 f8 0b             	cmp    eax,0xb
c0019743:	75 09                	jne    c001974e <CPU::detectFeatures()+0x908>
c0019745:	50                   	push   eax
c0019746:	50                   	push   eax
c0019747:	68 3c c0 02 c0       	push   0xc002c03c
c001974c:	eb 4d                	jmp    c001979b <CPU::detectFeatures()+0x955>
c001974e:	83 f8 08             	cmp    eax,0x8
c0019751:	75 09                	jne    c001975c <CPU::detectFeatures()+0x916>
c0019753:	50                   	push   eax
c0019754:	50                   	push   eax
c0019755:	68 45 c0 02 c0       	push   0xc002c045
c001975a:	eb 3f                	jmp    c001979b <CPU::detectFeatures()+0x955>
c001975c:	83 f8 09             	cmp    eax,0x9
c001975f:	75 09                	jne    c001976a <CPU::detectFeatures()+0x924>
c0019761:	50                   	push   eax
c0019762:	50                   	push   eax
c0019763:	68 4d c0 02 c0       	push   0xc002c04d
c0019768:	eb 31                	jmp    c001979b <CPU::detectFeatures()+0x955>
c001976a:	83 f8 05             	cmp    eax,0x5
c001976d:	75 09                	jne    c0019778 <CPU::detectFeatures()+0x932>
c001976f:	50                   	push   eax
c0019770:	50                   	push   eax
c0019771:	68 55 c0 02 c0       	push   0xc002c055
c0019776:	eb 23                	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019778:	83 f8 0c             	cmp    eax,0xc
c001977b:	75 09                	jne    c0019786 <CPU::detectFeatures()+0x940>
c001977d:	55                   	push   ebp
c001977e:	55                   	push   ebp
c001977f:	68 63 c0 02 c0       	push   0xc002c063
c0019784:	eb 15                	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019786:	83 f8 0d             	cmp    eax,0xd
c0019789:	75 09                	jne    c0019794 <CPU::detectFeatures()+0x94e>
c001978b:	57                   	push   edi
c001978c:	57                   	push   edi
c001978d:	68 6e c0 02 c0       	push   0xc002c06e
c0019792:	eb 07                	jmp    c001979b <CPU::detectFeatures()+0x955>
c0019794:	56                   	push   esi
c0019795:	56                   	push   esi
c0019796:	68 82 c0 02 c0       	push   0xc002c082
c001979b:	53                   	push   ebx
c001979c:	e8 8d a8 ff ff       	call   c001402e <Device::setName(char const*)>
c00197a1:	83 c4 10             	add    esp,0x10
c00197a4:	e9 80 00 00 00       	jmp    c0019829 <CPU::detectFeatures()+0x9e3>
c00197a9:	51                   	push   ecx
c00197aa:	51                   	push   ecx
c00197ab:	68 ce be 02 c0       	push   0xc002bece
c00197b0:	55                   	push   ebp
c00197b1:	e8 56 70 fe ff       	call   c000080c <strcpy>
c00197b6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00197c0:	e8 e9 6a fe ff       	call   c00002ae <is486>
c00197c5:	83 c4 10             	add    esp,0x10
c00197c8:	85 c0                	test   eax,eax
c00197ca:	74 2b                	je     c00197f7 <CPU::detectFeatures()+0x9b1>
c00197cc:	52                   	push   edx
c00197cd:	52                   	push   edx
c00197ce:	68 8e c0 02 c0       	push   0xc002c08e
c00197d3:	53                   	push   ebx
c00197d4:	e8 55 a8 ff ff       	call   c001402e <Device::setName(char const*)>
c00197d9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00197e0:	0f 20 c0             	mov    eax,cr0
c00197e3:	83 e0 14             	and    eax,0x14
c00197e6:	83 c4 10             	add    esp,0x10
c00197e9:	83 f8 04             	cmp    eax,0x4
c00197ec:	75 1f                	jne    c001980d <CPU::detectFeatures()+0x9c7>
c00197ee:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00197f5:	eb 32                	jmp    c0019829 <CPU::detectFeatures()+0x9e3>
c00197f7:	50                   	push   eax
c00197f8:	50                   	push   eax
c00197f9:	68 99 c0 02 c0       	push   0xc002c099
c00197fe:	53                   	push   ebx
c00197ff:	e8 2a a8 ff ff       	call   c001402e <Device::setName(char const*)>
c0019804:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001980b:	eb d3                	jmp    c00197e0 <CPU::detectFeatures()+0x99a>
c001980d:	e8 77 6a fe ff       	call   c0000289 <hasLegacyFPU>
c0019812:	83 e0 01             	and    eax,0x1
c0019815:	8d 14 00             	lea    edx,[eax+eax*1]
c0019818:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001981e:	83 e0 fd             	and    eax,0xfffffffd
c0019821:	09 d0                	or     eax,edx
c0019823:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019829:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019830:	83 c4 4c             	add    esp,0x4c
c0019833:	5b                   	pop    ebx
c0019834:	5e                   	pop    esi
c0019835:	5f                   	pop    edi
c0019836:	5d                   	pop    ebp
c0019837:	c3                   	ret    

c0019838 <CPU::setupSMEP()>:
c0019838:	0f 20 e0             	mov    eax,cr4
c001983b:	0d 00 00 10 00       	or     eax,0x100000
c0019840:	0f 22 e0             	mov    cr4,eax
c0019843:	c3                   	ret    

c0019844 <CPU::setupUMIP()>:
c0019844:	0f 20 e0             	mov    eax,cr4
c0019847:	80 cc 08             	or     ah,0x8
c001984a:	0f 22 e0             	mov    cr4,eax
c001984d:	c3                   	ret    

c001984e <CPU::setupTSC()>:
c001984e:	0f 20 e0             	mov    eax,cr4
c0019851:	83 c8 04             	or     eax,0x4
c0019854:	0f 22 e0             	mov    cr4,eax
c0019857:	c3                   	ret    

c0019858 <CPU::setupLargePages()>:
c0019858:	0f 20 e0             	mov    eax,cr4
c001985b:	83 c8 10             	or     eax,0x10
c001985e:	0f 22 e0             	mov    cr4,eax
c0019861:	c3                   	ret    

c0019862 <CPU::setupPAT()>:
c0019862:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019867:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001986e:	74 2c                	je     c001989c <CPU::setupPAT()+0x3a>
c0019870:	53                   	push   ebx
c0019871:	83 ec 10             	sub    esp,0x10
c0019874:	68 77 02 00 00       	push   0x277
c0019879:	50                   	push   eax
c001987a:	e8 03 55 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c001987f:	83 e2 f8             	and    edx,0xfffffff8
c0019882:	83 ca 01             	or     edx,0x1
c0019885:	52                   	push   edx
c0019886:	50                   	push   eax
c0019887:	68 77 02 00 00       	push   0x277
c001988c:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0019892:	e8 17 55 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c0019897:	83 c4 28             	add    esp,0x28
c001989a:	5b                   	pop    ebx
c001989b:	c3                   	ret    
c001989c:	c3                   	ret    
c001989d:	90                   	nop

c001989e <CPU::setupMTRR()>:
c001989e:	c3                   	ret    
c001989f:	90                   	nop

c00198a0 <CPU::setupGlobalPages()>:
c00198a0:	0f 20 e0             	mov    eax,cr4
c00198a3:	0c 80                	or     al,0x80
c00198a5:	0f 22 e0             	mov    cr4,eax
c00198a8:	c3                   	ret    
c00198a9:	90                   	nop

c00198aa <CPU::allowUsermodeDataAccess()>:
c00198aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198ae:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00198b5:	74 03                	je     c00198ba <CPU::allowUsermodeDataAccess()+0x10>
c00198b7:	0f 01 cb             	stac   
c00198ba:	c3                   	ret    
c00198bb:	90                   	nop

c00198bc <CPU::prohibitUsermodeDataAccess()>:
c00198bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198c0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00198c7:	74 03                	je     c00198cc <CPU::prohibitUsermodeDataAccess()+0x10>
c00198c9:	0f 01 ca             	clac   
c00198cc:	c3                   	ret    
c00198cd:	90                   	nop

c00198ce <CPU::setupSMAP()>:
c00198ce:	0f 20 e0             	mov    eax,cr4
c00198d1:	0d 00 00 20 00       	or     eax,0x200000
c00198d6:	0f 22 e0             	mov    cr4,eax
c00198d9:	eb e1                	jmp    c00198bc <CPU::prohibitUsermodeDataAccess()>
c00198db:	90                   	nop

c00198dc <CPU::setupFeatures()>:
c00198dc:	83 ec 0c             	sub    esp,0xc
c00198df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198e3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00198ea:	74 07                	je     c00198f3 <CPU::setupFeatures()+0x17>
c00198ec:	52                   	push   edx
c00198ed:	e8 46 ff ff ff       	call   c0019838 <CPU::setupSMEP()>
c00198f2:	58                   	pop    eax
c00198f3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00198fa:	74 07                	je     c0019903 <CPU::setupFeatures()+0x27>
c00198fc:	52                   	push   edx
c00198fd:	e8 cc ff ff ff       	call   c00198ce <CPU::setupSMAP()>
c0019902:	58                   	pop    eax
c0019903:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001990a:	74 07                	je     c0019913 <CPU::setupFeatures()+0x37>
c001990c:	52                   	push   edx
c001990d:	e8 32 ff ff ff       	call   c0019844 <CPU::setupUMIP()>
c0019912:	58                   	pop    eax
c0019913:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001991a:	74 07                	je     c0019923 <CPU::setupFeatures()+0x47>
c001991c:	52                   	push   edx
c001991d:	e8 2c ff ff ff       	call   c001984e <CPU::setupTSC()>
c0019922:	58                   	pop    eax
c0019923:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001992a:	74 07                	je     c0019933 <CPU::setupFeatures()+0x57>
c001992c:	52                   	push   edx
c001992d:	e8 26 ff ff ff       	call   c0019858 <CPU::setupLargePages()>
c0019932:	59                   	pop    ecx
c0019933:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001993a:	74 07                	je     c0019943 <CPU::setupFeatures()+0x67>
c001993c:	52                   	push   edx
c001993d:	e8 5e ff ff ff       	call   c00198a0 <CPU::setupGlobalPages()>
c0019942:	58                   	pop    eax
c0019943:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001994a:	74 0c                	je     c0019958 <CPU::setupFeatures()+0x7c>
c001994c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019950:	83 c4 0c             	add    esp,0xc
c0019953:	e9 0a ff ff ff       	jmp    c0019862 <CPU::setupPAT()>
c0019958:	83 c4 0c             	add    esp,0xc
c001995b:	c3                   	ret    

c001995c <CPU::open(int, int, void*)>:
c001995c:	57                   	push   edi
c001995d:	56                   	push   esi
c001995e:	53                   	push   ebx
c001995f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019963:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019967:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001996d:	83 ec 0c             	sub    esp,0xc
c0019970:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019976:	68 a4 c0 02 c0       	push   0xc002c0a4
c001997b:	e8 81 60 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019980:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019986:	89 04 24             	mov    DWORD PTR [esp],eax
c0019989:	e8 6c 57 ff ff       	call   c000f0fa <GDT::setup()>
c001998e:	c7 04 24 b6 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0b6
c0019995:	e8 67 60 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001999a:	83 c4 0c             	add    esp,0xc
c001999d:	6a 00                	push   0x0
c001999f:	68 ef be ad de       	push   0xdeadbeef
c00199a4:	57                   	push   edi
c00199a5:	e8 0a 76 ff ff       	call   c0010fb4 <TSS::setup(unsigned long, unsigned long)>
c00199aa:	c7 04 24 c8 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0c8
c00199b1:	e8 4b 60 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00199b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199b9:	e8 d6 75 ff ff       	call   c0010f94 <TSS::flush()>
c00199be:	c7 04 24 dc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0dc
c00199c5:	e8 37 60 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00199ca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00199d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d3:	e8 86 59 ff ff       	call   c000f35e <IDT::setup()>
c00199d8:	c7 04 24 ee c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ee
c00199df:	e8 1d 60 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00199e4:	b8 00 04 00 00       	mov    eax,0x400
c00199e9:	0f 23 f8             	mov    db7,eax
c00199ec:	c7 04 24 0c c1 02 c0 	mov    DWORD PTR [esp],0xc002c10c
c00199f3:	e8 09 60 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c00199f8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019a02:	e8 9c 63 ff ff       	call   c000fda3 <Phys::allocatePage()>
c0019a07:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a0d:	89 30                	mov    DWORD PTR [eax],esi
c0019a0f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a15:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019a18:	c7 04 24 2e c1 02 c0 	mov    DWORD PTR [esp],0xc002c12e
c0019a1f:	e8 dd 5f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019a24:	58                   	pop    eax
c0019a25:	5a                   	pop    edx
c0019a26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a30:	e8 79 85 ff ff       	call   c0011fae <VAS::setCPUSpecific(unsigned long)>
c0019a35:	c7 04 24 56 c1 02 c0 	mov    DWORD PTR [esp],0xc002c156
c0019a3c:	e8 c0 5f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019a41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a44:	e8 fd f3 ff ff       	call   c0018e46 <CPU::detectFeatures()>
c0019a49:	c7 04 24 79 c1 02 c0 	mov    DWORD PTR [esp],0xc002c179
c0019a50:	e8 ac 5f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019a55:	e8 2e ba ff ff       	call   c0015488 <setupInterruptController()>
c0019a5a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a60:	c7 04 24 9d c1 02 c0 	mov    DWORD PTR [esp],0xc002c19d
c0019a67:	e8 95 5f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019a6c:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0019a71:	83 e0 10             	and    eax,0x10
c0019a74:	83 f8 01             	cmp    eax,0x1
c0019a77:	19 c0                	sbb    eax,eax
c0019a79:	83 e0 46             	and    eax,0x46
c0019a7c:	83 c0 1e             	add    eax,0x1e
c0019a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a82:	e8 ee cf ff ff       	call   c0016a75 <setupTimer(int)>
c0019a87:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019a8d:	c7 04 24 b8 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b8
c0019a94:	e8 68 5f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019a99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a9c:	e8 3b fe ff ff       	call   c00198dc <CPU::setupFeatures()>
c0019aa1:	c7 04 24 d3 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d3
c0019aa8:	e8 54 5f ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	31 c0                	xor    eax,eax
c0019ab2:	5b                   	pop    ebx
c0019ab3:	5e                   	pop    esi
c0019ab4:	5f                   	pop    edi
c0019ab5:	c3                   	ret    

c0019ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ab6:	57                   	push   edi
c0019ab7:	56                   	push   esi
c0019ab8:	53                   	push   ebx
c0019ab9:	51                   	push   ecx
c0019aba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019abe:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ac1:	0f 02 c0             	lar    eax,ax
c0019ac4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ac7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019acb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019ace:	88 ca                	mov    dl,cl
c0019ad0:	c0 ea 06             	shr    dl,0x6
c0019ad3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ad7:	89 ca                	mov    edx,ecx
c0019ad9:	66 c1 ea 03          	shr    dx,0x3
c0019add:	83 e2 07             	and    edx,0x7
c0019ae0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ae5:	88 17                	mov    BYTE PTR [edi],dl
c0019ae7:	0f 84 a6 01 00 00    	je     c0019c93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019aed:	83 e1 07             	and    ecx,0x7
c0019af0:	80 f9 04             	cmp    cl,0x4
c0019af3:	0f 84 98 00 00 00    	je     c0019b91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019af9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019afe:	0f 95 c0             	setne  al
c0019b01:	80 f9 05             	cmp    cl,0x5
c0019b04:	0f 95 c2             	setne  dl
c0019b07:	08 c2                	or     dl,al
c0019b09:	74 79                	je     c0019b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b0b:	84 c9                	test   cl,cl
c0019b0d:	75 05                	jne    c0019b14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b0f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b12:	eb 3c                	jmp    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b14:	80 f9 01             	cmp    cl,0x1
c0019b17:	75 05                	jne    c0019b1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b19:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b1c:	eb 32                	jmp    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b1e:	80 f9 02             	cmp    cl,0x2
c0019b21:	75 05                	jne    c0019b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019b23:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b26:	eb 28                	jmp    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b28:	31 c0                	xor    eax,eax
c0019b2a:	80 f9 03             	cmp    cl,0x3
c0019b2d:	75 05                	jne    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019b2f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b32:	eb 1c                	jmp    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b34:	80 f9 05             	cmp    cl,0x5
c0019b37:	75 05                	jne    c0019b3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019b39:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b3c:	eb 12                	jmp    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b3e:	80 f9 06             	cmp    cl,0x6
c0019b41:	75 05                	jne    c0019b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b43:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b46:	eb 08                	jmp    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b48:	80 f9 07             	cmp    cl,0x7
c0019b4b:	75 03                	jne    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b4d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b50:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b55:	75 10                	jne    c0019b67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b57:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b5b:	b9 03 00 00 00       	mov    ecx,0x3
c0019b60:	01 d0                	add    eax,edx
c0019b62:	e9 37 01 00 00       	jmp    c0019c9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b67:	b9 02 00 00 00       	mov    ecx,0x2
c0019b6c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b71:	0f 85 27 01 00 00    	jne    c0019c9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b77:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b7a:	b9 06 00 00 00       	mov    ecx,0x6
c0019b7f:	e9 1a 01 00 00       	jmp    c0019c9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b84:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019b87:	b9 06 00 00 00       	mov    ecx,0x6
c0019b8c:	e9 0f 01 00 00       	jmp    c0019ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b91:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019b94:	88 ca                	mov    dl,cl
c0019b96:	c0 ea 06             	shr    dl,0x6
c0019b99:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019b9d:	89 ca                	mov    edx,ecx
c0019b9f:	66 c1 ea 03          	shr    dx,0x3
c0019ba3:	83 e2 07             	and    edx,0x7
c0019ba6:	80 e1 07             	and    cl,0x7
c0019ba9:	75 05                	jne    c0019bb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019bab:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019bae:	eb 4c                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bb0:	80 f9 01             	cmp    cl,0x1
c0019bb3:	75 05                	jne    c0019bba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019bb5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019bb8:	eb 42                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bba:	80 f9 02             	cmp    cl,0x2
c0019bbd:	75 05                	jne    c0019bc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019bbf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019bc2:	eb 38                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bc4:	80 f9 03             	cmp    cl,0x3
c0019bc7:	75 05                	jne    c0019bce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019bc9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019bcc:	eb 2e                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bce:	80 f9 04             	cmp    cl,0x4
c0019bd1:	75 12                	jne    c0019be5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019bd3:	f6 c4 60             	test   ah,0x60
c0019bd6:	75 08                	jne    c0019be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019bd8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019bdb:	8d 78 14             	lea    edi,[eax+0x14]
c0019bde:	eb 1c                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019be0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019be3:	eb 17                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019be5:	80 f9 05             	cmp    cl,0x5
c0019be8:	75 05                	jne    c0019bef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019bea:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019bed:	eb 0d                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bef:	80 f9 06             	cmp    cl,0x6
c0019bf2:	75 05                	jne    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019bf4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019bf7:	eb 03                	jmp    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bf9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019bfc:	84 d2                	test   dl,dl
c0019bfe:	75 05                	jne    c0019c05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c00:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c03:	eb 3c                	jmp    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c05:	80 fa 01             	cmp    dl,0x1
c0019c08:	75 05                	jne    c0019c0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c0a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c0d:	eb 32                	jmp    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c0f:	80 fa 02             	cmp    dl,0x2
c0019c12:	75 05                	jne    c0019c19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c14:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c17:	eb 28                	jmp    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c19:	80 fa 03             	cmp    dl,0x3
c0019c1c:	75 05                	jne    c0019c23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019c1e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c21:	eb 1e                	jmp    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c23:	31 c0                	xor    eax,eax
c0019c25:	80 fa 04             	cmp    dl,0x4
c0019c28:	74 17                	je     c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c2a:	80 fa 05             	cmp    dl,0x5
c0019c2d:	75 05                	jne    c0019c34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019c2f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c32:	eb 0d                	jmp    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c34:	80 fa 06             	cmp    dl,0x6
c0019c37:	75 05                	jne    c0019c3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019c39:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c3c:	eb 03                	jmp    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c3e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c41:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c46:	0f 94 c2             	sete   dl
c0019c49:	80 f9 05             	cmp    cl,0x5
c0019c4c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c50:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c55:	d3 e0                	shl    eax,cl
c0019c57:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c5b:	74 0a                	je     c0019c67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c5d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c60:	b9 07 00 00 00       	mov    ecx,0x7
c0019c65:	eb 37                	jmp    c0019c9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c67:	01 f8                	add    eax,edi
c0019c69:	b9 03 00 00 00       	mov    ecx,0x3
c0019c6e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c73:	74 2b                	je     c0019ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c75:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c7a:	75 0d                	jne    c0019c89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c7c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c80:	01 c8                	add    eax,ecx
c0019c82:	b9 04 00 00 00       	mov    ecx,0x4
c0019c87:	eb 17                	jmp    c0019ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c89:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c8c:	b9 07 00 00 00       	mov    ecx,0x7
c0019c91:	eb 0d                	jmp    c0019ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c93:	b9 02 00 00 00       	mov    ecx,0x2
c0019c98:	b2 01                	mov    dl,0x1
c0019c9a:	31 c0                	xor    eax,eax
c0019c9c:	eb 02                	jmp    c0019ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c9e:	31 d2                	xor    edx,edx
c0019ca0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ca4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ca6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019caa:	88 11                	mov    BYTE PTR [ecx],dl
c0019cac:	5a                   	pop    edx
c0019cad:	5b                   	pop    ebx
c0019cae:	5e                   	pop    esi
c0019caf:	5f                   	pop    edi
c0019cb0:	c3                   	ret    

c0019cb1 <Krnl::smpEntry()>:
c0019cb1:	eb fe                	jmp    c0019cb1 <Krnl::smpEntry()>

c0019cb3 <Krnl::startCPU(int)>:
c0019cb3:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019cb8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019cbf:	0f 84 36 01 00 00    	je     c0019dfb <Krnl::startCPU(int)+0x148>
c0019cc5:	53                   	push   ebx
c0019cc6:	83 ec 10             	sub    esp,0x10
c0019cc9:	fa                   	cli    
c0019cca:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0019cd0:	6a 1b                	push   0x1b
c0019cd2:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0019cd8:	e8 a5 50 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019cdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ce2:	89 c3                	mov    ebx,eax
c0019ce4:	58                   	pop    eax
c0019ce5:	5a                   	pop    edx
c0019ce6:	53                   	push   ebx
c0019ce7:	68 1c c2 02 c0       	push   0xc002c21c
c0019cec:	e8 0e 8d ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0019cf1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cff:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d09:	c1 e0 18             	shl    eax,0x18
c0019d0c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d12:	83 c4 10             	add    esp,0x10
c0019d15:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d1b:	09 c2                	or     edx,eax
c0019d1d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019d23:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019d29:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d2f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d35:	80 cd c5             	or     ch,0xc5
c0019d38:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d3e:	f3 90                	pause  
c0019d40:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d42:	0f ba e1 0c          	bt     ecx,0xc
c0019d46:	72 f6                	jb     c0019d3e <Krnl::startCPU(int)+0x8b>
c0019d48:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d4e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d54:	09 c1                	or     ecx,eax
c0019d56:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d5c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d62:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d68:	80 cd 85             	or     ch,0x85
c0019d6b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d71:	f3 90                	pause  
c0019d73:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d75:	0f ba e1 0c          	bt     ecx,0xc
c0019d79:	72 f6                	jb     c0019d71 <Krnl::startCPU(int)+0xbe>
c0019d7b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d85:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d8b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d91:	09 c1                	or     ecx,eax
c0019d93:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d99:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d9f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019da5:	81 c9 02 06 00 00    	or     ecx,0x602
c0019dab:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019db1:	f3 90                	pause  
c0019db3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019db5:	0f ba e1 0c          	bt     ecx,0xc
c0019db9:	72 f6                	jb     c0019db1 <Krnl::startCPU(int)+0xfe>
c0019dbb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dc5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019dcb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019dd1:	09 c8                	or     eax,ecx
c0019dd3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019dd9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ddf:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019de4:	0d 02 06 00 00       	or     eax,0x602
c0019de9:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019def:	f3 90                	pause  
c0019df1:	8b 02                	mov    eax,DWORD PTR [edx]
c0019df3:	0f ba e0 0c          	bt     eax,0xc
c0019df7:	72 f6                	jb     c0019def <Krnl::startCPU(int)+0x13c>
c0019df9:	eb fe                	jmp    c0019df9 <Krnl::startCPU(int)+0x146>
c0019dfb:	c3                   	ret    

c0019dfc <Krnl::startCPUs()>:
c0019dfc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019e01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e07:	88 c2                	mov    dl,al
c0019e09:	83 e2 0a             	and    edx,0xa
c0019e0c:	80 fa 0a             	cmp    dl,0xa
c0019e0f:	75 09                	jne    c0019e1a <Krnl::startCPUs()+0x1e>
c0019e11:	a8 01                	test   al,0x1
c0019e13:	74 05                	je     c0019e1a <Krnl::startCPUs()+0x1e>
c0019e15:	e9 81 63 fe ff       	jmp    c000019b <prepareTramp>
c0019e1a:	c3                   	ret    
c0019e1b:	90                   	nop

c0019e1c <EnvVarContainer::getEnv(char const*)>:
c0019e1c:	57                   	push   edi
c0019e1d:	56                   	push   esi
c0019e1e:	53                   	push   ebx
c0019e1f:	31 db                	xor    ebx,ebx
c0019e21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e25:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019e27:	7e 2b                	jle    c0019e54 <EnvVarContainer::getEnv(char const*)+0x38>
c0019e29:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019e30:	50                   	push   eax
c0019e31:	50                   	push   eax
c0019e32:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e35:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019e38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e3c:	e8 57 6a fe ff       	call   c0000898 <strcmp>
c0019e41:	83 c4 10             	add    esp,0x10
c0019e44:	85 c0                	test   eax,eax
c0019e46:	75 09                	jne    c0019e51 <EnvVarContainer::getEnv(char const*)+0x35>
c0019e48:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e4b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e4f:	eb 05                	jmp    c0019e56 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e51:	43                   	inc    ebx
c0019e52:	eb d1                	jmp    c0019e25 <EnvVarContainer::getEnv(char const*)+0x9>
c0019e54:	31 c0                	xor    eax,eax
c0019e56:	5b                   	pop    ebx
c0019e57:	5e                   	pop    esi
c0019e58:	5f                   	pop    edi
c0019e59:	c3                   	ret    

c0019e5a <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e5a:	55                   	push   ebp
c0019e5b:	57                   	push   edi
c0019e5c:	56                   	push   esi
c0019e5d:	53                   	push   ebx
c0019e5e:	83 ec 28             	sub    esp,0x28
c0019e61:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e65:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e69:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e6d:	56                   	push   esi
c0019e6e:	e8 f9 68 fe ff       	call   c000076c <strlen>
c0019e73:	40                   	inc    eax
c0019e74:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e77:	e8 2b 5b ff ff       	call   c000f9a7 <malloc>
c0019e7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e83:	e8 e4 68 fe ff       	call   c000076c <strlen>
c0019e88:	40                   	inc    eax
c0019e89:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e8c:	e8 16 5b ff ff       	call   c000f9a7 <malloc>
c0019e91:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e98:	e8 cf 68 fe ff       	call   c000076c <strlen>
c0019e9d:	83 c4 0c             	add    esp,0xc
c0019ea0:	40                   	inc    eax
c0019ea1:	50                   	push   eax
c0019ea2:	6a 00                	push   0x0
c0019ea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ea8:	e8 a3 68 fe ff       	call   c0000750 <memset>
c0019ead:	89 34 24             	mov    DWORD PTR [esp],esi
c0019eb0:	e8 b7 68 fe ff       	call   c000076c <strlen>
c0019eb5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019eb9:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ebc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ebe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ec1:	89 de                	mov    esi,ebx
c0019ec3:	e8 a4 68 fe ff       	call   c000076c <strlen>
c0019ec8:	83 c4 0c             	add    esp,0xc
c0019ecb:	40                   	inc    eax
c0019ecc:	50                   	push   eax
c0019ecd:	6a 00                	push   0x0
c0019ecf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ed3:	e8 78 68 fe ff       	call   c0000750 <memset>
c0019ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019edb:	e8 8c 68 fe ff       	call   c000076c <strlen>
c0019ee0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ee4:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ee7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ee9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019eec:	40                   	inc    eax
c0019eed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019ef0:	c1 e0 03             	shl    eax,0x3
c0019ef3:	5a                   	pop    edx
c0019ef4:	59                   	pop    ecx
c0019ef5:	50                   	push   eax
c0019ef6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ef9:	e8 95 5a ff ff       	call   c000f993 <realloc>
c0019efe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f02:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f05:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019f08:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f0c:	b9 08 00 00 00       	mov    ecx,0x8
c0019f11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f13:	83 c4 2c             	add    esp,0x2c
c0019f16:	5b                   	pop    ebx
c0019f17:	5e                   	pop    esi
c0019f18:	5f                   	pop    edi
c0019f19:	5d                   	pop    ebp
c0019f1a:	c3                   	ret    
c0019f1b:	90                   	nop

c0019f1c <EnvVarContainer::deleteEnv(char const*)>:
c0019f1c:	c3                   	ret    
c0019f1d:	90                   	nop

c0019f1e <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019f1e:	55                   	push   ebp
c0019f1f:	57                   	push   edi
c0019f20:	56                   	push   esi
c0019f21:	53                   	push   ebx
c0019f22:	81 ec 38 01 00 00    	sub    esp,0x138
c0019f28:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019f2f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019f36:	68 14 01 00 00       	push   0x114
c0019f3b:	e8 67 5a ff ff       	call   c000f9a7 <malloc>
c0019f40:	83 c4 0c             	add    esp,0xc
c0019f43:	89 c3                	mov    ebx,eax
c0019f45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019f48:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f4f:	50                   	push   eax
c0019f50:	e8 09 90 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c0019f55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f58:	e8 d3 92 ff ff       	call   c0013230 <File::exists()>
c0019f5d:	83 c4 10             	add    esp,0x10
c0019f60:	84 c0                	test   al,al
c0019f62:	75 31                	jne    c0019f95 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019f64:	50                   	push   eax
c0019f65:	50                   	push   eax
c0019f66:	6a 12                	push   0x12
c0019f68:	53                   	push   ebx
c0019f69:	e8 54 90 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c0019f6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f70:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f73:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f76:	e8 f1 67 fe ff       	call   c000076c <strlen>
c0019f7b:	5a                   	pop    edx
c0019f7c:	31 d2                	xor    edx,edx
c0019f7e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f82:	51                   	push   ecx
c0019f83:	56                   	push   esi
c0019f84:	52                   	push   edx
c0019f85:	50                   	push   eax
c0019f86:	53                   	push   ebx
c0019f87:	ff d7                	call   edi
c0019f89:	83 c4 14             	add    esp,0x14
c0019f8c:	53                   	push   ebx
c0019f8d:	e8 8e 90 ff ff       	call   c0013020 <File::close()>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	56                   	push   esi
c0019f96:	31 f6                	xor    esi,esi
c0019f98:	68 00 01 00 00       	push   0x100
c0019f9d:	6a 00                	push   0x0
c0019f9f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019fa3:	50                   	push   eax
c0019fa4:	e8 a7 67 fe ff       	call   c0000750 <memset>
c0019fa9:	5f                   	pop    edi
c0019faa:	58                   	pop    eax
c0019fab:	6a 01                	push   0x1
c0019fad:	53                   	push   ebx
c0019fae:	e8 0f 90 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c0019fb3:	83 c4 10             	add    esp,0x10
c0019fb6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019fbe:	83 ec 0c             	sub    esp,0xc
c0019fc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019fc7:	51                   	push   ecx
c0019fc8:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019fcc:	52                   	push   edx
c0019fcd:	6a 00                	push   0x0
c0019fcf:	6a 01                	push   0x1
c0019fd1:	53                   	push   ebx
c0019fd2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019fd5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019fd9:	83 c4 20             	add    esp,0x20
c0019fdc:	3c 0d                	cmp    al,0xd
c0019fde:	0f 84 09 01 00 00    	je     c001a0ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019fe4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019fe9:	0f 84 ef 00 00 00    	je     c001a0de <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019fef:	3c 0a                	cmp    al,0xa
c0019ff1:	74 13                	je     c001a006 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019ff3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ff8:	74 0c                	je     c001a006 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019ffa:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a000:	0f 8e d8 00 00 00    	jle    c001a0de <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001a006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a00a:	83 ec 0c             	sub    esp,0xc
c001a00d:	8d 78 01             	lea    edi,[eax+0x1]
c001a010:	57                   	push   edi
c001a011:	e8 91 59 ff ff       	call   c000f9a7 <malloc>
c001a016:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a01a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a01e:	8d 56 04             	lea    edx,[esi+0x4]
c001a021:	89 14 24             	mov    DWORD PTR [esp],edx
c001a024:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a028:	e8 7a 59 ff ff       	call   c000f9a7 <malloc>
c001a02d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a031:	83 c4 0c             	add    esp,0xc
c001a034:	57                   	push   edi
c001a035:	6a 00                	push   0x0
c001a037:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a03b:	e8 10 67 fe ff       	call   c0000750 <memset>
c001a040:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a044:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a048:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a04c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a04e:	83 c4 0c             	add    esp,0xc
c001a051:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a055:	52                   	push   edx
c001a056:	6a 00                	push   0x0
c001a058:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a05c:	e8 ef 66 fe ff       	call   c0000750 <memset>
c001a061:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a065:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a069:	89 34 24             	mov    DWORD PTR [esp],esi
c001a06c:	e8 fb 66 fe ff       	call   c000076c <strlen>
c001a071:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a075:	89 c1                	mov    ecx,eax
c001a077:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a079:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a07c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001a07f:	40                   	inc    eax
c001a080:	83 c4 10             	add    esp,0x10
c001a083:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a086:	85 d2                	test   edx,edx
c001a088:	75 0c                	jne    c001a096 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001a08a:	83 ec 0c             	sub    esp,0xc
c001a08d:	6a 08                	push   0x8
c001a08f:	e8 13 59 ff ff       	call   c000f9a7 <malloc>
c001a094:	eb 0c                	jmp    c001a0a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001a096:	c1 e0 03             	shl    eax,0x3
c001a099:	51                   	push   ecx
c001a09a:	51                   	push   ecx
c001a09b:	50                   	push   eax
c001a09c:	52                   	push   edx
c001a09d:	e8 f1 58 ff ff       	call   c000f993 <realloc>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a0a8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0ab:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001a0ae:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a0b2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a0b6:	b9 08 00 00 00       	mov    ecx,0x8
c001a0bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0bd:	31 f6                	xor    esi,esi
c001a0bf:	50                   	push   eax
c001a0c0:	68 00 01 00 00       	push   0x100
c001a0c5:	6a 00                	push   0x0
c001a0c7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0cb:	50                   	push   eax
c001a0cc:	e8 7f 66 fe ff       	call   c0000750 <memset>
c001a0d1:	83 c4 10             	add    esp,0x10
c001a0d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0dc:	eb 0f                	jmp    c001a0ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0de:	3c 3d                	cmp    al,0x3d
c001a0e0:	74 07                	je     c001a0e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001a0e2:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a0e6:	46                   	inc    esi
c001a0e7:	eb 04                	jmp    c001a0ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a0ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0f2:	0f 85 c6 fe ff ff    	jne    c0019fbe <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001a0f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0fe:	5b                   	pop    ebx
c001a0ff:	5e                   	pop    esi
c001a100:	5f                   	pop    edi
c001a101:	5d                   	pop    ebp
c001a102:	c3                   	ret    
c001a103:	90                   	nop

c001a104 <EnvVarContainer::__loadSystem()>:
c001a104:	83 ec 10             	sub    esp,0x10
c001a107:	68 a0 db 02 c0       	push   0xc002dba0
c001a10c:	68 2d c2 02 c0       	push   0xc002c22d
c001a111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a115:	e8 04 fe ff ff       	call   c0019f1e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a11a:	83 c4 1c             	add    esp,0x1c
c001a11d:	c3                   	ret    

c001a11e <EnvVarContainer::__loadUser()>:
c001a11e:	c3                   	ret    
c001a11f:	90                   	nop

c001a120 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a124:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a12e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a132:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a139:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a140:	90                   	nop
c001a141:	c3                   	ret    

c001a142 <EnvVarContainer::~EnvVarContainer()>:
c001a142:	83 ec 0c             	sub    esp,0xc
c001a145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a149:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a14c:	85 c0                	test   eax,eax
c001a14e:	74 1d                	je     c001a16d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a154:	8b 00                	mov    eax,DWORD PTR [eax]
c001a156:	85 c0                	test   eax,eax
c001a158:	74 13                	je     c001a16d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a161:	83 ec 0c             	sub    esp,0xc
c001a164:	50                   	push   eax
c001a165:	e8 4d 58 ff ff       	call   c000f9b7 <free>
c001a16a:	83 c4 10             	add    esp,0x10
c001a16d:	90                   	nop
c001a16e:	83 c4 0c             	add    esp,0xc
c001a171:	c3                   	ret    

c001a172 <Krnl::getEnv(Process*, char const*)>:
c001a172:	53                   	push   ebx
c001a173:	83 ec 08             	sub    esp,0x8
c001a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a17a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a17e:	39 05 90 fb 02 c0    	cmp    DWORD PTR ds:0xc002fb90,eax
c001a184:	74 04                	je     c001a18a <Krnl::getEnv(Process*, char const*)+0x18>
c001a186:	85 c0                	test   eax,eax
c001a188:	75 0b                	jne    c001a195 <Krnl::getEnv(Process*, char const*)+0x23>
c001a18a:	a1 74 f1 02 c0       	mov    eax,ds:0xc002f174
c001a18f:	85 c0                	test   eax,eax
c001a191:	75 19                	jne    c001a1ac <Krnl::getEnv(Process*, char const*)+0x3a>
c001a193:	eb 27                	jmp    c001a1bc <Krnl::getEnv(Process*, char const*)+0x4a>
c001a195:	52                   	push   edx
c001a196:	52                   	push   edx
c001a197:	53                   	push   ebx
c001a198:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a19e:	e8 79 fc ff ff       	call   c0019e1c <EnvVarContainer::getEnv(char const*)>
c001a1a3:	83 c4 10             	add    esp,0x10
c001a1a6:	85 c0                	test   eax,eax
c001a1a8:	75 28                	jne    c001a1d2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a1aa:	eb de                	jmp    c001a18a <Krnl::getEnv(Process*, char const*)+0x18>
c001a1ac:	52                   	push   edx
c001a1ad:	52                   	push   edx
c001a1ae:	53                   	push   ebx
c001a1af:	50                   	push   eax
c001a1b0:	e8 67 fc ff ff       	call   c0019e1c <EnvVarContainer::getEnv(char const*)>
c001a1b5:	83 c4 10             	add    esp,0x10
c001a1b8:	85 c0                	test   eax,eax
c001a1ba:	75 16                	jne    c001a1d2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a1bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1c0:	a1 78 f1 02 c0       	mov    eax,ds:0xc002f178
c001a1c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a1c9:	83 c4 08             	add    esp,0x8
c001a1cc:	5b                   	pop    ebx
c001a1cd:	e9 4a fc ff ff       	jmp    c0019e1c <EnvVarContainer::getEnv(char const*)>
c001a1d2:	83 c4 08             	add    esp,0x8
c001a1d5:	5b                   	pop    ebx
c001a1d6:	c3                   	ret    

c001a1d7 <Krnl::setEnvSystem(char const*, char const*)>:
c001a1d7:	83 ec 10             	sub    esp,0x10
c001a1da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1e2:	ff 35 78 f1 02 c0    	push   DWORD PTR ds:0xc002f178
c001a1e8:	e8 6d fc ff ff       	call   c0019e5a <EnvVarContainer::setEnv(char const*, char const*)>
c001a1ed:	83 c4 1c             	add    esp,0x1c
c001a1f0:	c3                   	ret    

c001a1f1 <Krnl::setEnvUser(char const*, char const*)>:
c001a1f1:	a1 74 f1 02 c0       	mov    eax,ds:0xc002f174
c001a1f6:	85 c0                	test   eax,eax
c001a1f8:	74 15                	je     c001a20f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a1fa:	83 ec 10             	sub    esp,0x10
c001a1fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a201:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a205:	50                   	push   eax
c001a206:	e8 4f fc ff ff       	call   c0019e5a <EnvVarContainer::setEnv(char const*, char const*)>
c001a20b:	83 c4 1c             	add    esp,0x1c
c001a20e:	c3                   	ret    
c001a20f:	c3                   	ret    

c001a210 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a214:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a21e:	e9 37 fc ff ff       	jmp    c0019e5a <EnvVarContainer::setEnv(char const*, char const*)>

c001a223 <Krnl::deleteEnvSystem(char const*)>:
c001a223:	c3                   	ret    

c001a224 <Krnl::deleteEnvUser(char const*)>:
c001a224:	c3                   	ret    

c001a225 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a225:	c3                   	ret    

c001a226 <Krnl::newProcessEnv(Process*)>:
c001a226:	83 ec 28             	sub    esp,0x28
c001a229:	6a 0c                	push   0xc
c001a22b:	e8 77 57 ff ff       	call   c000f9a7 <malloc>
c001a230:	5a                   	pop    edx
c001a231:	59                   	pop    ecx
c001a232:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a236:	50                   	push   eax
c001a237:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a23b:	e8 e0 fe ff ff       	call   c001a120 <EnvVarContainer::EnvVarContainer(Process*)>
c001a240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a244:	83 c4 2c             	add    esp,0x2c
c001a247:	c3                   	ret    

c001a248 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a248:	57                   	push   edi
c001a249:	56                   	push   esi
c001a24a:	53                   	push   ebx
c001a24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a24f:	83 ec 0c             	sub    esp,0xc
c001a252:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a258:	6a 0c                	push   0xc
c001a25a:	e8 48 57 ff ff       	call   c000f9a7 <malloc>
c001a25f:	89 c3                	mov    ebx,eax
c001a261:	58                   	pop    eax
c001a262:	5a                   	pop    edx
c001a263:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a267:	53                   	push   ebx
c001a268:	e8 b3 fe ff ff       	call   c001a120 <EnvVarContainer::EnvVarContainer(Process*)>
c001a26d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a26f:	89 03                	mov    DWORD PTR [ebx],eax
c001a271:	c1 e0 03             	shl    eax,0x3
c001a274:	89 04 24             	mov    DWORD PTR [esp],eax
c001a277:	e8 2b 57 ff ff       	call   c000f9a7 <malloc>
c001a27c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a27f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a281:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a284:	c1 e1 03             	shl    ecx,0x3
c001a287:	89 c7                	mov    edi,eax
c001a289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a28b:	83 c4 10             	add    esp,0x10
c001a28e:	89 d8                	mov    eax,ebx
c001a290:	5b                   	pop    ebx
c001a291:	5e                   	pop    esi
c001a292:	5f                   	pop    edi
c001a293:	c3                   	ret    

c001a294 <Krnl::loadSystemEnv()>:
c001a294:	53                   	push   ebx
c001a295:	83 ec 14             	sub    esp,0x14
c001a298:	6a 0c                	push   0xc
c001a29a:	e8 08 57 ff ff       	call   c000f9a7 <malloc>
c001a29f:	89 c3                	mov    ebx,eax
c001a2a1:	58                   	pop    eax
c001a2a2:	5a                   	pop    edx
c001a2a3:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001a2a9:	53                   	push   ebx
c001a2aa:	e8 71 fe ff ff       	call   c001a120 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2b2:	89 1d 78 f1 02 c0    	mov    DWORD PTR ds:0xc002f178,ebx
c001a2b8:	e8 47 fe ff ff       	call   c001a104 <EnvVarContainer::__loadSystem()>
c001a2bd:	83 c4 18             	add    esp,0x18
c001a2c0:	5b                   	pop    ebx
c001a2c1:	c3                   	ret    

c001a2c2 <Krnl::loadUserEnv()>:
c001a2c2:	53                   	push   ebx
c001a2c3:	83 ec 14             	sub    esp,0x14
c001a2c6:	6a 0c                	push   0xc
c001a2c8:	e8 da 56 ff ff       	call   c000f9a7 <malloc>
c001a2cd:	89 c3                	mov    ebx,eax
c001a2cf:	58                   	pop    eax
c001a2d0:	5a                   	pop    edx
c001a2d1:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001a2d7:	53                   	push   ebx
c001a2d8:	e8 43 fe ff ff       	call   c001a120 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2dd:	89 1d 74 f1 02 c0    	mov    DWORD PTR ds:0xc002f174,ebx
c001a2e3:	83 c4 18             	add    esp,0x18
c001a2e6:	5b                   	pop    ebx
c001a2e7:	c3                   	ret    

c001a2e8 <Krnl::flushEnv()>:
c001a2e8:	c3                   	ret    

c001a2e9 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ed:	8b 15 74 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f174
c001a2f3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2f9:	a1 78 f1 02 c0       	mov    eax,ds:0xc002f178
c001a2fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001a300:	03 01                	add    eax,DWORD PTR [ecx]
c001a302:	85 d2                	test   edx,edx
c001a304:	74 02                	je     c001a308 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a306:	03 02                	add    eax,DWORD PTR [edx]
c001a308:	c3                   	ret    

c001a309 <Krnl::getProcessEnvPair(Process*, int)>:
c001a309:	57                   	push   edi
c001a30a:	56                   	push   esi
c001a30b:	8b 35 74 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f174
c001a311:	53                   	push   ebx
c001a312:	85 f6                	test   esi,esi
c001a314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a31c:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a322:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a326:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a328:	75 16                	jne    c001a340 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a32a:	39 c2                	cmp    edx,eax
c001a32c:	7c 16                	jl     c001a344 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a32e:	8b 0d 78 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f178
c001a334:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a336:	01 c6                	add    esi,eax
c001a338:	39 d6                	cmp    esi,edx
c001a33a:	7e 3c                	jle    c001a378 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a33c:	29 c2                	sub    edx,eax
c001a33e:	eb 04                	jmp    c001a344 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a340:	39 c2                	cmp    edx,eax
c001a342:	7d 05                	jge    c001a349 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a344:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a347:	eb 20                	jmp    c001a369 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a349:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a34b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a34e:	39 d1                	cmp    ecx,edx
c001a350:	7e 04                	jle    c001a356 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a352:	29 c2                	sub    edx,eax
c001a354:	eb 10                	jmp    c001a366 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a356:	8b 35 78 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f178
c001a35c:	03 0e                	add    ecx,DWORD PTR [esi]
c001a35e:	39 d1                	cmp    ecx,edx
c001a360:	7e 16                	jle    c001a378 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a362:	29 c2                	sub    edx,eax
c001a364:	29 fa                	sub    edx,edi
c001a366:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a369:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a36c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a36e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a371:	89 03                	mov    DWORD PTR [ebx],eax
c001a373:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a376:	eb 1d                	jmp    c001a395 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	68 4f c2 02 c0       	push   0xc002c24f
c001a380:	e8 18 00 00 00       	call   c001a39d <Krnl::panic(char const*)>
c001a385:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a38b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	89 d8                	mov    eax,ebx
c001a397:	5b                   	pop    ebx
c001a398:	5e                   	pop    esi
c001a399:	5f                   	pop    edi
c001a39a:	c2 04 00             	ret    0x4

c001a39d <Krnl::panic(char const*)>:
c001a39d:	55                   	push   ebp
c001a39e:	89 e5                	mov    ebp,esp
c001a3a0:	53                   	push   ebx
c001a3a1:	83 ec 10             	sub    esp,0x10
c001a3a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a3a7:	fa                   	cli    
c001a3a8:	c6 05 84 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f184,0x1
c001a3af:	53                   	push   ebx
c001a3b0:	e8 4c 56 ff ff       	call   c000fa01 <Krnl::setBootMessage(char const*)>
c001a3b5:	58                   	pop    eax
c001a3b6:	c6 05 a0 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d5a0,0x0
c001a3bd:	5a                   	pop    edx
c001a3be:	53                   	push   ebx
c001a3bf:	68 69 c2 02 c0       	push   0xc002c269
c001a3c4:	e8 36 86 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001a3c9:	59                   	pop    ecx
c001a3ca:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a3cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d5:	e8 87 63 ff ff       	call   c0010761 <setActiveTerminal(VgaText*)>
c001a3da:	83 c4 0c             	add    esp,0xc
c001a3dd:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a3e2:	6a 01                	push   0x1
c001a3e4:	6a 0f                	push   0xf
c001a3e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ec:	e8 cf 61 ff ff       	call   c00105c0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3f1:	58                   	pop    eax
c001a3f2:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a3f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3fd:	e8 e0 66 ff ff       	call   c0010ae2 <VgaText::clearScreen()>
c001a402:	58                   	pop    eax
c001a403:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a408:	5a                   	pop    edx
c001a409:	68 82 c2 02 c0       	push   0xc002c282
c001a40e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a414:	e8 55 68 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a419:	59                   	pop    ecx
c001a41a:	58                   	pop    eax
c001a41b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a420:	68 28 c3 02 c0       	push   0xc002c328
c001a425:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a42b:	e8 3e 68 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a430:	58                   	pop    eax
c001a431:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a436:	5a                   	pop    edx
c001a437:	68 9e c2 02 c0       	push   0xc002c29e
c001a43c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a442:	e8 27 68 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a447:	59                   	pop    ecx
c001a448:	58                   	pop    eax
c001a449:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a44e:	53                   	push   ebx
c001a44f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a455:	e8 14 68 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a45a:	58                   	pop    eax
c001a45b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a460:	5a                   	pop    edx
c001a461:	68 be c2 02 c0       	push   0xc002c2be
c001a466:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a46c:	e8 fd 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a471:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c001a476:	83 c4 10             	add    esp,0x10
c001a479:	85 c0                	test   eax,eax
c001a47b:	74 02                	je     c001a47f <Krnl::panic(char const*)+0xe2>
c001a47d:	ff d0                	call   eax
c001a47f:	83 ec 0c             	sub    esp,0xc
c001a482:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a485:	e8 8f 30 00 00       	call   c001d519 <Thr::getDriverNameFromAddress(unsigned long)>
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	89 c3                	mov    ebx,eax
c001a48f:	85 c0                	test   eax,eax
c001a491:	0f 84 4e 02 00 00    	je     c001a6e5 <Krnl::panic(char const*)+0x348>
c001a497:	83 ec 08             	sub    esp,0x8
c001a49a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a49f:	68 64 c3 02 c0       	push   0xc002c364
c001a4a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4aa:	e8 bf 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a4af:	58                   	pop    eax
c001a4b0:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4b5:	5a                   	pop    edx
c001a4b6:	68 9e c2 02 c0       	push   0xc002c29e
c001a4bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4c1:	e8 a8 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a4c6:	59                   	pop    ecx
c001a4c7:	58                   	pop    eax
c001a4c8:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4cd:	53                   	push   ebx
c001a4ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d4:	e8 95 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	83 ec 08             	sub    esp,0x8
c001a4df:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4e4:	68 bd c2 02 c0       	push   0xc002c2bd
c001a4e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ef:	e8 7a 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a4f4:	58                   	pop    eax
c001a4f5:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4fa:	5a                   	pop    edx
c001a4fb:	68 bc c3 02 c0       	push   0xc002c3bc
c001a500:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a506:	e8 63 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a50b:	59                   	pop    ecx
c001a50c:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a511:	5b                   	pop    ebx
c001a512:	68 fc c3 02 c0       	push   0xc002c3fc
c001a517:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a51d:	e8 4c 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a522:	58                   	pop    eax
c001a523:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a528:	5a                   	pop    edx
c001a529:	68 a9 c2 02 c0       	push   0xc002c2a9
c001a52e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a534:	e8 35 67 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a539:	59                   	pop    ecx
c001a53a:	5b                   	pop    ebx
c001a53b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a53e:	68 c1 c2 02 c0       	push   0xc002c2c1
c001a543:	e8 b7 84 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001a548:	58                   	pop    eax
c001a549:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a54c:	5a                   	pop    edx
c001a54d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a550:	68 ca c2 02 c0       	push   0xc002c2ca
c001a555:	e8 a5 84 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001a55a:	59                   	pop    ecx
c001a55b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a55e:	5b                   	pop    ebx
c001a55f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a561:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a564:	68 d3 c2 02 c0       	push   0xc002c2d3
c001a569:	e8 91 84 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001a56e:	58                   	pop    eax
c001a56f:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a574:	5a                   	pop    edx
c001a575:	68 40 c4 02 c0       	push   0xc002c440
c001a57a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a580:	e8 e9 66 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a585:	59                   	pop    ecx
c001a586:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a58b:	5b                   	pop    ebx
c001a58c:	68 dc c2 02 c0       	push   0xc002c2dc
c001a591:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a597:	e8 d2 66 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a59c:	0f 20 c0             	mov    eax,cr0
c001a59f:	5a                   	pop    edx
c001a5a0:	59                   	pop    ecx
c001a5a1:	50                   	push   eax
c001a5a2:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ad:	e8 76 66 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a5b2:	5b                   	pop    ebx
c001a5b3:	58                   	pop    eax
c001a5b4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5b9:	68 e6 c2 02 c0       	push   0xc002c2e6
c001a5be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c4:	e8 a5 66 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a5c9:	0f 20 d0             	mov    eax,cr2
c001a5cc:	5a                   	pop    edx
c001a5cd:	59                   	pop    ecx
c001a5ce:	50                   	push   eax
c001a5cf:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5da:	e8 49 66 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a5df:	5b                   	pop    ebx
c001a5e0:	58                   	pop    eax
c001a5e1:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5e6:	68 f0 c2 02 c0       	push   0xc002c2f0
c001a5eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f1:	e8 78 66 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a5f6:	0f 20 d8             	mov    eax,cr3
c001a5f9:	5a                   	pop    edx
c001a5fa:	59                   	pop    ecx
c001a5fb:	50                   	push   eax
c001a5fc:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a601:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a607:	e8 1c 66 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a60c:	5b                   	pop    ebx
c001a60d:	58                   	pop    eax
c001a60e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a613:	68 03 c3 02 c0       	push   0xc002c303
c001a618:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a61e:	e8 4b 66 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a623:	0f 20 e0             	mov    eax,cr4
c001a626:	5a                   	pop    edx
c001a627:	59                   	pop    ecx
c001a628:	50                   	push   eax
c001a629:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a62e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a634:	e8 ef 65 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a639:	5b                   	pop    ebx
c001a63a:	58                   	pop    eax
c001a63b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a640:	68 0d c3 02 c0       	push   0xc002c30d
c001a645:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a64b:	e8 1e 66 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a650:	5a                   	pop    edx
c001a651:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a656:	59                   	pop    ecx
c001a657:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a65d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a660:	50                   	push   eax
c001a661:	e8 c2 65 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a666:	5b                   	pop    ebx
c001a667:	58                   	pop    eax
c001a668:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a66d:	68 24 c3 02 c0       	push   0xc002c324
c001a672:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a678:	e8 f1 65 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a67d:	5a                   	pop    edx
c001a67e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a683:	59                   	pop    ecx
c001a684:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a68a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a68d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a690:	50                   	push   eax
c001a691:	e8 92 65 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a696:	5b                   	pop    ebx
c001a697:	58                   	pop    eax
c001a698:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a69d:	68 24 c3 02 c0       	push   0xc002c324
c001a6a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a8:	e8 c1 65 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a6ad:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a6b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6bb:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6bd:	59                   	pop    ecx
c001a6be:	5b                   	pop    ebx
c001a6bf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6c2:	50                   	push   eax
c001a6c3:	e8 60 65 ff ff       	call   c0010c28 <VgaText::putx(unsigned int)>
c001a6c8:	83 c4 10             	add    esp,0x10
c001a6cb:	b2 fe                	mov    dl,0xfe
c001a6cd:	e4 60                	in     al,0x60
c001a6cf:	3c 1c                	cmp    al,0x1c
c001a6d1:	74 04                	je     c001a6d7 <Krnl::panic(char const*)+0x33a>
c001a6d3:	3c 5a                	cmp    al,0x5a
c001a6d5:	75 f6                	jne    c001a6cd <Krnl::panic(char const*)+0x330>
c001a6d7:	e4 64                	in     al,0x64
c001a6d9:	a8 02                	test   al,0x2
c001a6db:	75 fa                	jne    c001a6d7 <Krnl::panic(char const*)+0x33a>
c001a6dd:	88 d0                	mov    al,dl
c001a6df:	e6 64                	out    0x64,al
c001a6e1:	fa                   	cli    
c001a6e2:	f4                   	hlt    
c001a6e3:	eb e8                	jmp    c001a6cd <Krnl::panic(char const*)+0x330>
c001a6e5:	50                   	push   eax
c001a6e6:	50                   	push   eax
c001a6e7:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a6ec:	68 90 c3 02 c0       	push   0xc002c390
c001a6f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f7:	e8 72 65 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a6fc:	58                   	pop    eax
c001a6fd:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a702:	5a                   	pop    edx
c001a703:	68 9e c2 02 c0       	push   0xc002c29e
c001a708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70e:	e8 5b 65 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a713:	59                   	pop    ecx
c001a714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a719:	5b                   	pop    ebx
c001a71a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a71d:	83 c0 0c             	add    eax,0xc
c001a720:	50                   	push   eax
c001a721:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72c:	e8 3d 65 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	e9 a3 fd ff ff       	jmp    c001a4dc <Krnl::panic(char const*)+0x13f>

c001a739 <Net::switchEndian16(unsigned short)>:
c001a739:	83 ec 04             	sub    esp,0x4
c001a73c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a740:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a744:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a748:	c1 f8 08             	sar    eax,0x8
c001a74b:	89 c2                	mov    edx,eax
c001a74d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a751:	c1 e0 08             	shl    eax,0x8
c001a754:	09 d0                	or     eax,edx
c001a756:	83 c4 04             	add    esp,0x4
c001a759:	c3                   	ret    

c001a75a <Net::switchEndian32(unsigned int)>:
c001a75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a75e:	c1 e8 18             	shr    eax,0x18
c001a761:	89 c2                	mov    edx,eax
c001a763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a767:	c1 e0 08             	shl    eax,0x8
c001a76a:	25 00 00 ff 00       	and    eax,0xff0000
c001a76f:	09 c2                	or     edx,eax
c001a771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a775:	c1 e8 08             	shr    eax,0x8
c001a778:	25 00 ff 00 00       	and    eax,0xff00
c001a77d:	09 c2                	or     edx,eax
c001a77f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a783:	c1 e0 18             	shl    eax,0x18
c001a786:	09 d0                	or     eax,edx
c001a788:	c3                   	ret    

c001a789 <Net::crc32Calc(unsigned char*, int)>:
c001a789:	83 ec 10             	sub    esp,0x10
c001a78c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a791:	75 07                	jne    c001a79a <Net::crc32Calc(unsigned char*, int)+0x11>
c001a793:	b8 00 00 00 00       	mov    eax,0x0
c001a798:	eb 7c                	jmp    c001a816 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a79a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a79f:	7f 07                	jg     c001a7a8 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a7a1:	b8 00 00 00 00       	mov    eax,0x0
c001a7a6:	eb 6e                	jmp    c001a816 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7a8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a7b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7bc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a7c0:	7d 4e                	jge    c001a810 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a7c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7ca:	01 d0                	add    eax,edx
c001a7cc:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ce:	0f b6 c0             	movzx  eax,al
c001a7d1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a7d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7dd:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a7e2:	7f 26                	jg     c001a80a <Net::crc32Calc(unsigned char*, int)+0x81>
c001a7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7e8:	83 e0 01             	and    eax,0x1
c001a7eb:	74 0d                	je     c001a7fa <Net::crc32Calc(unsigned char*, int)+0x71>
c001a7ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7f1:	d1 e8                	shr    eax,1
c001a7f3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a7f8:	eb 06                	jmp    c001a800 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7fe:	d1 e8                	shr    eax,1
c001a800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a804:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a808:	eb d3                	jmp    c001a7dd <Net::crc32Calc(unsigned char*, int)+0x54>
c001a80a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a80e:	eb a8                	jmp    c001a7b8 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a814:	f7 d0                	not    eax
c001a816:	83 c4 10             	add    esp,0x10
c001a819:	c3                   	ret    

c001a81a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a81a:	57                   	push   edi
c001a81b:	56                   	push   esi
c001a81c:	53                   	push   ebx
c001a81d:	83 ec 60             	sub    esp,0x60
c001a820:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a827:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a82b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a833:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a838:	7f 1a                	jg     c001a854 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a83a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a841:	8d 50 01             	lea    edx,[eax+0x1]
c001a844:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a84b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a84e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a852:	eb df                	jmp    c001a833 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a854:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a85b:	8d 50 01             	lea    edx,[eax+0x1]
c001a85e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a865:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a868:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a86f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a873:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a877:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a87b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a88b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a88f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a893:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a897:	89 c6                	mov    esi,eax
c001a899:	89 d7                	mov    edi,edx
c001a89b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a89d:	89 c8                	mov    eax,ecx
c001a89f:	89 fa                	mov    edx,edi
c001a8a1:	89 f3                	mov    ebx,esi
c001a8a3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a8a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8ae:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8c1:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a8c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8c9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8dd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8e1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8e5:	89 c6                	mov    esi,eax
c001a8e7:	89 d7                	mov    edi,edx
c001a8e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8eb:	89 c8                	mov    eax,ecx
c001a8ed:	89 fa                	mov    edx,edi
c001a8ef:	89 f3                	mov    ebx,esi
c001a8f1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a8f5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a8f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8fd:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a905:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a90c:	0f b7 c0             	movzx  eax,ax
c001a90f:	c1 f8 08             	sar    eax,0x8
c001a912:	89 c1                	mov    ecx,eax
c001a914:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a91b:	8d 50 01             	lea    edx,[eax+0x1]
c001a91e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a925:	88 ca                	mov    dl,cl
c001a927:	88 10                	mov    BYTE PTR [eax],dl
c001a929:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a930:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a937:	8d 48 01             	lea    ecx,[eax+0x1]
c001a93a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a941:	88 10                	mov    BYTE PTR [eax],dl
c001a943:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a947:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a94b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a952:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a956:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a95a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a95e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a962:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a966:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a96a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a96e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a972:	89 c6                	mov    esi,eax
c001a974:	89 d7                	mov    edi,edx
c001a976:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a978:	89 c8                	mov    eax,ecx
c001a97a:	89 fa                	mov    edx,edi
c001a97c:	89 f3                	mov    ebx,esi
c001a97e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a98a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a98e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a995:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a99c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a9a0:	50                   	push   eax
c001a9a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a9a5:	e8 df fd ff ff       	call   c001a789 <Net::crc32Calc(unsigned char*, int)>
c001a9aa:	83 c4 08             	add    esp,0x8
c001a9ad:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9b5:	c1 e8 18             	shr    eax,0x18
c001a9b8:	89 c1                	mov    ecx,eax
c001a9ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9c1:	8d 50 01             	lea    edx,[eax+0x1]
c001a9c4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9cb:	88 ca                	mov    dl,cl
c001a9cd:	88 10                	mov    BYTE PTR [eax],dl
c001a9cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9d3:	c1 e8 10             	shr    eax,0x10
c001a9d6:	89 c1                	mov    ecx,eax
c001a9d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9df:	8d 50 01             	lea    edx,[eax+0x1]
c001a9e2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9e9:	88 ca                	mov    dl,cl
c001a9eb:	88 10                	mov    BYTE PTR [eax],dl
c001a9ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9f1:	c1 e8 08             	shr    eax,0x8
c001a9f4:	89 c1                	mov    ecx,eax
c001a9f6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9fd:	8d 50 01             	lea    edx,[eax+0x1]
c001aa00:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa07:	88 ca                	mov    dl,cl
c001aa09:	88 10                	mov    BYTE PTR [eax],dl
c001aa0b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa12:	8d 50 01             	lea    edx,[eax+0x1]
c001aa15:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa1c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aa20:	88 10                	mov    BYTE PTR [eax],dl
c001aa22:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa26:	83 c4 60             	add    esp,0x60
c001aa29:	5b                   	pop    ebx
c001aa2a:	5e                   	pop    esi
c001aa2b:	5f                   	pop    edi
c001aa2c:	c3                   	ret    

c001aa2d <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa2d:	57                   	push   edi
c001aa2e:	56                   	push   esi
c001aa2f:	53                   	push   ebx
c001aa30:	83 ec 70             	sub    esp,0x70
c001aa33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa3a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aa3e:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aa46:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa4d:	83 c0 0e             	add    eax,0xe
c001aa50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa5f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa7b:	89 c6                	mov    esi,eax
c001aa7d:	89 d7                	mov    edi,edx
c001aa7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa81:	89 c8                	mov    eax,ecx
c001aa83:	89 fa                	mov    edx,edi
c001aa85:	89 f3                	mov    ebx,esi
c001aa87:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa8b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa93:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa9b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaa2:	83 c0 08             	add    eax,0x8
c001aaa5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aaa9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aab0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aab4:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aabc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aac0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aac4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aac8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aacc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aad0:	89 c6                	mov    esi,eax
c001aad2:	89 d7                	mov    edi,edx
c001aad4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aad6:	89 c8                	mov    eax,ecx
c001aad8:	89 fa                	mov    edx,edi
c001aada:	89 f3                	mov    ebx,esi
c001aadc:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aae0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aae4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aae8:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aaf0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaf7:	8d 50 01             	lea    edx,[eax+0x1]
c001aafa:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab01:	8a 00                	mov    al,BYTE PTR [eax]
c001ab03:	0f b6 c0             	movzx  eax,al
c001ab06:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ab0b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab12:	8d 50 01             	lea    edx,[eax+0x1]
c001ab15:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab1c:	8a 00                	mov    al,BYTE PTR [eax]
c001ab1e:	0f b6 c0             	movzx  eax,al
c001ab21:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ab26:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ab2b:	c1 e0 08             	shl    eax,0x8
c001ab2e:	89 c2                	mov    edx,eax
c001ab30:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab34:	09 d0                	or     eax,edx
c001ab36:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab3d:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab41:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ab49:	75 46                	jne    c001ab91 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab4b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab52:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab55:	66 3d dc 05          	cmp    ax,0x5dc
c001ab59:	77 16                	ja     c001ab71 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab62:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab65:	0f b7 c0             	movzx  eax,ax
c001ab68:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ab6f:	eb 20                	jmp    c001ab91 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab71:	83 ec 0c             	sub    esp,0xc
c001ab74:	68 68 c4 02 c0       	push   0xc002c468
c001ab79:	e8 81 7e ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001ab7e:	83 c4 10             	add    esp,0x10
c001ab81:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab88:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab8c:	e9 17 01 00 00       	jmp    c001aca8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab91:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab98:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab9f:	8b 12                	mov    edx,DWORD PTR [edx]
c001aba1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aba5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001abac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001abb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abc8:	89 c6                	mov    esi,eax
c001abca:	89 d7                	mov    edi,edx
c001abcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abce:	89 c8                	mov    eax,ecx
c001abd0:	89 fa                	mov    edx,edi
c001abd2:	89 f3                	mov    ebx,esi
c001abd4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001abd8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001abdc:	89 04 24             	mov    DWORD PTR [esp],eax
c001abdf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abe6:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001abed:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abf4:	8d 50 01             	lea    edx,[eax+0x1]
c001abf7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abfe:	8a 00                	mov    al,BYTE PTR [eax]
c001ac00:	0f b6 c0             	movzx  eax,al
c001ac03:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ac07:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac11:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac18:	8a 00                	mov    al,BYTE PTR [eax]
c001ac1a:	0f b6 c0             	movzx  eax,al
c001ac1d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ac21:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac28:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac32:	8a 00                	mov    al,BYTE PTR [eax]
c001ac34:	0f b6 c0             	movzx  eax,al
c001ac37:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ac3b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac42:	8d 50 01             	lea    edx,[eax+0x1]
c001ac45:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac4c:	8a 00                	mov    al,BYTE PTR [eax]
c001ac4e:	0f b6 c0             	movzx  eax,al
c001ac51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac55:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac59:	c1 e0 18             	shl    eax,0x18
c001ac5c:	89 c2                	mov    edx,eax
c001ac5e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac62:	c1 e0 10             	shl    eax,0x10
c001ac65:	09 c2                	or     edx,eax
c001ac67:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ac6b:	c1 e0 08             	shl    eax,0x8
c001ac6e:	09 d0                	or     eax,edx
c001ac70:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ac74:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac78:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac7f:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac83:	83 e8 04             	sub    eax,0x4
c001ac86:	83 ec 08             	sub    esp,0x8
c001ac89:	50                   	push   eax
c001ac8a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac8e:	e8 f6 fa ff ff       	call   c001a789 <Net::crc32Calc(unsigned char*, int)>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac9a:	0f 94 c2             	sete   dl
c001ac9d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aca4:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001aca7:	90                   	nop
c001aca8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acaf:	83 c4 70             	add    esp,0x70
c001acb2:	5b                   	pop    ebx
c001acb3:	5e                   	pop    esi
c001acb4:	5f                   	pop    edi
c001acb5:	c2 04 00             	ret    0x4

c001acb8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acb8:	55                   	push   ebp
c001acb9:	57                   	push   edi
c001acba:	56                   	push   esi
c001acbb:	53                   	push   ebx
c001acbc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acc2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acc9:	8a 1e                	mov    bl,BYTE PTR [esi]
c001accb:	8d 6e 01             	lea    ebp,[esi+0x1]
c001acce:	80 fb 40             	cmp    bl,0x40
c001acd1:	75 1b                	jne    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acd3:	8a 16                	mov    dl,BYTE PTR [esi]
c001acd5:	84 d2                	test   dl,dl
c001acd7:	0f 84 f1 00 00 00    	je     c001adce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acdd:	8d 46 01             	lea    eax,[esi+0x1]
c001ace0:	80 fa 3a             	cmp    dl,0x3a
c001ace3:	74 04                	je     c001ace9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ace5:	89 c6                	mov    esi,eax
c001ace7:	eb ea                	jmp    c001acd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ace9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acec:	89 c6                	mov    esi,eax
c001acee:	50                   	push   eax
c001acef:	6a 40                	push   0x40
c001acf1:	6a 00                	push   0x0
c001acf3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acf7:	50                   	push   eax
c001acf8:	e8 53 5a fe ff       	call   c0000750 <memset>
c001acfd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad04:	31 c0                	xor    eax,eax
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad0b:	84 c9                	test   cl,cl
c001ad0d:	0f 84 bb 00 00 00    	je     c001adce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad13:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad18:	0f 8f b0 00 00 00    	jg     c001adce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1e:	80 f9 0a             	cmp    cl,0xa
c001ad21:	0f 85 98 00 00 00    	jne    c001adbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad27:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad2c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad30:	a8 df                	test   al,0xdf
c001ad32:	0f 94 c1             	sete   cl
c001ad35:	3c 23                	cmp    al,0x23
c001ad37:	0f 94 c2             	sete   dl
c001ad3a:	08 d1                	or     cl,dl
c001ad3c:	75 4a                	jne    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad3e:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad41:	80 fa 01             	cmp    dl,0x1
c001ad44:	76 42                	jbe    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad46:	3c 5b                	cmp    al,0x5b
c001ad48:	75 42                	jne    c001ad8c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad4a:	80 fb 40             	cmp    bl,0x40
c001ad4d:	75 39                	jne    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4f:	83 ec 0c             	sub    esp,0xc
c001ad52:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad56:	52                   	push   edx
c001ad57:	e8 10 5a fe ff       	call   c000076c <strlen>
c001ad5c:	83 c4 10             	add    esp,0x10
c001ad5f:	83 f8 3f             	cmp    eax,0x3f
c001ad62:	77 6a                	ja     c001adce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad64:	50                   	push   eax
c001ad65:	50                   	push   eax
c001ad66:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad6a:	52                   	push   edx
c001ad6b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad6f:	52                   	push   edx
c001ad70:	e8 97 5a fe ff       	call   c000080c <strcpy>
c001ad75:	58                   	pop    eax
c001ad76:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad7a:	52                   	push   edx
c001ad7b:	e8 ec 59 fe ff       	call   c000076c <strlen>
c001ad80:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad85:	83 c4 10             	add    esp,0x10
c001ad88:	31 d2                	xor    edx,edx
c001ad8a:	eb 3a                	jmp    c001adc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad8c:	80 fb 40             	cmp    bl,0x40
c001ad8f:	74 06                	je     c001ad97 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad91:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad95:	eb 20                	jmp    c001adb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad97:	50                   	push   eax
c001ad98:	50                   	push   eax
c001ad99:	55                   	push   ebp
c001ad9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad9e:	50                   	push   eax
c001ad9f:	e8 f4 5a fe ff       	call   c0000898 <strcmp>
c001ada4:	83 c4 10             	add    esp,0x10
c001ada7:	85 c0                	test   eax,eax
c001ada9:	75 dd                	jne    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adab:	eb e4                	jmp    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adad:	8d 50 01             	lea    edx,[eax+0x1]
c001adb0:	80 f9 3d             	cmp    cl,0x3d
c001adb3:	74 1d                	je     c001add2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adb5:	89 d0                	mov    eax,edx
c001adb7:	8a 08                	mov    cl,BYTE PTR [eax]
c001adb9:	84 c9                	test   cl,cl
c001adbb:	75 f0                	jne    c001adad <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adbd:	eb 0f                	jmp    c001adce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adbf:	8d 50 01             	lea    edx,[eax+0x1]
c001adc2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001adc6:	47                   	inc    edi
c001adc7:	89 d0                	mov    eax,edx
c001adc9:	e9 3b ff ff ff       	jmp    c001ad09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adce:	31 c0                	xor    eax,eax
c001add0:	eb 33                	jmp    c001ae05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001add2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001add6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001add9:	50                   	push   eax
c001adda:	50                   	push   eax
c001addb:	8d 44 24 60          	lea    eax,[esp+0x60]
c001addf:	50                   	push   eax
c001ade0:	56                   	push   esi
c001ade1:	e8 b2 5a fe ff       	call   c0000898 <strcmp>
c001ade6:	83 c4 10             	add    esp,0x10
c001ade9:	85 c0                	test   eax,eax
c001adeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adef:	75 97                	jne    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf1:	51                   	push   ecx
c001adf2:	51                   	push   ecx
c001adf3:	52                   	push   edx
c001adf4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adfb:	e8 0c 5a fe ff       	call   c000080c <strcpy>
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	b0 01                	mov    al,0x1
c001ae05:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae0b:	5b                   	pop    ebx
c001ae0c:	5e                   	pop    esi
c001ae0d:	5f                   	pop    edi
c001ae0e:	5d                   	pop    ebp
c001ae0f:	c3                   	ret    

c001ae10 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae10:	57                   	push   edi
c001ae11:	56                   	push   esi
c001ae12:	53                   	push   ebx
c001ae13:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae19:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae20:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae27:	53                   	push   ebx
c001ae28:	e8 3f 59 fe ff       	call   c000076c <strlen>
c001ae2d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae30:	89 c7                	mov    edi,eax
c001ae32:	e8 35 59 fe ff       	call   c000076c <strlen>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae3e:	3d ff 00 00 00       	cmp    eax,0xff
c001ae43:	0f 87 d3 00 00 00    	ja     c001af1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae49:	57                   	push   edi
c001ae4a:	57                   	push   edi
c001ae4b:	56                   	push   esi
c001ae4c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae50:	56                   	push   esi
c001ae51:	e8 b6 59 fe ff       	call   c000080c <strcpy>
c001ae56:	58                   	pop    eax
c001ae57:	5a                   	pop    edx
c001ae58:	68 0a c8 02 c0       	push   0xc002c80a
c001ae5d:	56                   	push   esi
c001ae5e:	e8 e9 5a fe ff       	call   c000094c <strcat>
c001ae63:	59                   	pop    ecx
c001ae64:	5f                   	pop    edi
c001ae65:	53                   	push   ebx
c001ae66:	56                   	push   esi
c001ae67:	e8 e0 5a fe ff       	call   c000094c <strcat>
c001ae6c:	58                   	pop    eax
c001ae6d:	5a                   	pop    edx
c001ae6e:	68 b4 c4 02 c0       	push   0xc002c4b4
c001ae73:	56                   	push   esi
c001ae74:	e8 d3 5a fe ff       	call   c000094c <strcat>
c001ae79:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae80:	e8 22 4b ff ff       	call   c000f9a7 <malloc>
c001ae85:	83 c4 0c             	add    esp,0xc
c001ae88:	89 c3                	mov    ebx,eax
c001ae8a:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001ae90:	56                   	push   esi
c001ae91:	50                   	push   eax
c001ae92:	e8 c7 80 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	85 db                	test   ebx,ebx
c001ae9c:	74 7e                	je     c001af1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae9e:	51                   	push   ecx
c001ae9f:	51                   	push   ecx
c001aea0:	6a 01                	push   0x1
c001aea2:	53                   	push   ebx
c001aea3:	e8 1a 81 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	85 c0                	test   eax,eax
c001aead:	74 08                	je     c001aeb7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aeaf:	83 ec 0c             	sub    esp,0xc
c001aeb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeb4:	53                   	push   ebx
c001aeb5:	eb 5f                	jmp    c001af16 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aeb7:	52                   	push   edx
c001aeb8:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aebc:	50                   	push   eax
c001aebd:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aec1:	50                   	push   eax
c001aec2:	53                   	push   ebx
c001aec3:	e8 a6 83 ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c001aec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aecc:	83 c4 10             	add    esp,0x10
c001aecf:	89 c1                	mov    ecx,eax
c001aed1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aed5:	74 31                	je     c001af08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aed7:	83 ec 0c             	sub    esp,0xc
c001aeda:	50                   	push   eax
c001aedb:	e8 c7 4a ff ff       	call   c000f9a7 <malloc>
c001aee0:	89 c6                	mov    esi,eax
c001aee2:	58                   	pop    eax
c001aee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aee5:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aee9:	52                   	push   edx
c001aeea:	56                   	push   esi
c001aeeb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef3:	53                   	push   ebx
c001aef4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aef7:	83 c4 20             	add    esp,0x20
c001aefa:	85 c0                	test   eax,eax
c001aefc:	75 0a                	jne    c001af08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aefe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af02:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af06:	74 18                	je     c001af20 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	53                   	push   ebx
c001af0c:	e8 0f 81 ff ff       	call   c0013020 <File::close()>
c001af11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af19:	83 c4 10             	add    esp,0x10
c001af1c:	31 c0                	xor    eax,eax
c001af1e:	eb 3b                	jmp    c001af5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af20:	83 ec 0c             	sub    esp,0xc
c001af23:	53                   	push   ebx
c001af24:	e8 f7 80 ff ff       	call   c0013020 <File::close()>
c001af29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af31:	83 c4 0c             	add    esp,0xc
c001af34:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af3b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af42:	56                   	push   esi
c001af43:	e8 70 fd ff ff       	call   c001acb8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af48:	89 34 24             	mov    DWORD PTR [esp],esi
c001af4b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af4f:	e8 63 4a ff ff       	call   c000f9b7 <free>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af5b:	81 c4 20 01 00 00    	add    esp,0x120
c001af61:	5b                   	pop    ebx
c001af62:	5e                   	pop    esi
c001af63:	5f                   	pop    edi
c001af64:	c3                   	ret    

c001af65 <Reg::getLine(char*, char*, char*)>:
c001af65:	57                   	push   edi
c001af66:	56                   	push   esi
c001af67:	53                   	push   ebx
c001af68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af70:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af74:	57                   	push   edi
c001af75:	56                   	push   esi
c001af76:	53                   	push   ebx
c001af77:	68 b9 c4 02 c0       	push   0xc002c4b9
c001af7c:	e8 8f fe ff ff       	call   c001ae10 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af81:	83 c4 10             	add    esp,0x10
c001af84:	84 c0                	test   al,al
c001af86:	75 10                	jne    c001af98 <Reg::getLine(char*, char*, char*)+0x33>
c001af88:	57                   	push   edi
c001af89:	56                   	push   esi
c001af8a:	53                   	push   ebx
c001af8b:	68 de c4 02 c0       	push   0xc002c4de
c001af90:	e8 7b fe ff ff       	call   c001ae10 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af95:	83 c4 10             	add    esp,0x10
c001af98:	5b                   	pop    ebx
c001af99:	5e                   	pop    esi
c001af9a:	5f                   	pop    edi
c001af9b:	c3                   	ret    

c001af9c <Reg::readInt(char*, char*, int*)>:
c001af9c:	55                   	push   ebp
c001af9d:	57                   	push   edi
c001af9e:	56                   	push   esi
c001af9f:	53                   	push   ebx
c001afa0:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afa6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afaa:	57                   	push   edi
c001afab:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb9:	e8 a7 ff ff ff       	call   c001af65 <Reg::getLine(char*, char*, char*)>
c001afbe:	83 c4 10             	add    esp,0x10
c001afc1:	84 c0                	test   al,al
c001afc3:	0f 84 b3 00 00 00    	je     c001b07c <Reg::readInt(char*, char*, int*)+0xe0>
c001afc9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afcd:	80 fa 2b             	cmp    dl,0x2b
c001afd0:	74 0c                	je     c001afde <Reg::readInt(char*, char*, int*)+0x42>
c001afd2:	80 fa 2d             	cmp    dl,0x2d
c001afd5:	75 0e                	jne    c001afe5 <Reg::readInt(char*, char*, int*)+0x49>
c001afd7:	ba 01 00 00 00       	mov    edx,0x1
c001afdc:	eb 0b                	jmp    c001afe9 <Reg::readInt(char*, char*, int*)+0x4d>
c001afde:	ba 01 00 00 00       	mov    edx,0x1
c001afe3:	eb 02                	jmp    c001afe7 <Reg::readInt(char*, char*, int*)+0x4b>
c001afe5:	31 d2                	xor    edx,edx
c001afe7:	31 c0                	xor    eax,eax
c001afe9:	be 0a 00 00 00       	mov    esi,0xa
c001afee:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aff3:	75 20                	jne    c001b015 <Reg::readInt(char*, char*, int*)+0x79>
c001aff5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aff9:	80 f9 78             	cmp    cl,0x78
c001affc:	75 0a                	jne    c001b008 <Reg::readInt(char*, char*, int*)+0x6c>
c001affe:	83 c2 02             	add    edx,0x2
c001b001:	be 10 00 00 00       	mov    esi,0x10
c001b006:	eb 0d                	jmp    c001b015 <Reg::readInt(char*, char*, int*)+0x79>
c001b008:	80 f9 62             	cmp    cl,0x62
c001b00b:	75 08                	jne    c001b015 <Reg::readInt(char*, char*, int*)+0x79>
c001b00d:	83 c2 02             	add    edx,0x2
c001b010:	be 02 00 00 00       	mov    esi,0x2
c001b015:	01 d7                	add    edi,edx
c001b017:	31 d2                	xor    edx,edx
c001b019:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b01b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b01f:	80 fb 0d             	cmp    bl,0xd
c001b022:	0f 94 c3             	sete   bl
c001b025:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b02a:	0f 94 c1             	sete   cl
c001b02d:	08 cb                	or     bl,cl
c001b02f:	75 3a                	jne    c001b06b <Reg::readInt(char*, char*, int*)+0xcf>
c001b031:	0f af d6             	imul   edx,esi
c001b034:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b039:	83 fe 10             	cmp    esi,0x10
c001b03c:	75 26                	jne    c001b064 <Reg::readInt(char*, char*, int*)+0xc8>
c001b03e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b042:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b045:	89 e9                	mov    ecx,ebp
c001b047:	80 f9 05             	cmp    cl,0x5
c001b04a:	77 06                	ja     c001b052 <Reg::readInt(char*, char*, int*)+0xb6>
c001b04c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b050:	eb 16                	jmp    c001b068 <Reg::readInt(char*, char*, int*)+0xcc>
c001b052:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b056:	83 e9 61             	sub    ecx,0x61
c001b059:	80 f9 05             	cmp    cl,0x5
c001b05c:	77 06                	ja     c001b064 <Reg::readInt(char*, char*, int*)+0xc8>
c001b05e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b062:	eb 04                	jmp    c001b068 <Reg::readInt(char*, char*, int*)+0xcc>
c001b064:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b068:	47                   	inc    edi
c001b069:	eb ae                	jmp    c001b019 <Reg::readInt(char*, char*, int*)+0x7d>
c001b06b:	84 c0                	test   al,al
c001b06d:	74 02                	je     c001b071 <Reg::readInt(char*, char*, int*)+0xd5>
c001b06f:	f7 da                	neg    edx
c001b071:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b078:	89 10                	mov    DWORD PTR [eax],edx
c001b07a:	88 d8                	mov    al,bl
c001b07c:	81 c4 ec 00 00 00    	add    esp,0xec
c001b082:	5b                   	pop    ebx
c001b083:	5e                   	pop    esi
c001b084:	5f                   	pop    edi
c001b085:	5d                   	pop    ebp
c001b086:	c3                   	ret    

c001b087 <Reg::readString(char*, char*, char*, int)>:
c001b087:	57                   	push   edi
c001b088:	56                   	push   esi
c001b089:	53                   	push   ebx
c001b08a:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b090:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b097:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b09b:	57                   	push   edi
c001b09c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0a3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0aa:	e8 b6 fe ff ff       	call   c001af65 <Reg::getLine(char*, char*, char*)>
c001b0af:	83 c4 10             	add    esp,0x10
c001b0b2:	89 c6                	mov    esi,eax
c001b0b4:	84 c0                	test   al,al
c001b0b6:	74 44                	je     c001b0fc <Reg::readString(char*, char*, char*, int)+0x75>
c001b0b8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0bf:	31 c0                	xor    eax,eax
c001b0c1:	4a                   	dec    edx
c001b0c2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0c5:	84 c9                	test   cl,cl
c001b0c7:	74 0f                	je     c001b0d8 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0c9:	39 c2                	cmp    edx,eax
c001b0cb:	7e 0b                	jle    c001b0d8 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0cd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0d0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0d5:	40                   	inc    eax
c001b0d6:	eb ea                	jmp    c001b0c2 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0d8:	83 ec 0c             	sub    esp,0xc
c001b0db:	53                   	push   ebx
c001b0dc:	e8 8b 56 fe ff       	call   c000076c <strlen>
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0e9:	75 11                	jne    c001b0fc <Reg::readString(char*, char*, char*, int)+0x75>
c001b0eb:	83 ec 0c             	sub    esp,0xc
c001b0ee:	53                   	push   ebx
c001b0ef:	e8 78 56 fe ff       	call   c000076c <strlen>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0fc:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b102:	89 f0                	mov    eax,esi
c001b104:	5b                   	pop    ebx
c001b105:	5e                   	pop    esi
c001b106:	5f                   	pop    edi
c001b107:	c3                   	ret    

c001b108 <Reg::readBool(char*, char*, bool*)>:
c001b108:	83 ec 20             	sub    esp,0x20
c001b10b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b10f:	50                   	push   eax
c001b110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b118:	e8 7f fe ff ff       	call   c001af9c <Reg::readInt(char*, char*, int*)>
c001b11d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b122:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b126:	0f 95 02             	setne  BYTE PTR [edx]
c001b129:	83 c4 2c             	add    esp,0x2c
c001b12c:	c3                   	ret    

c001b12d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b12d:	53                   	push   ebx
c001b12e:	83 ec 1c             	sub    esp,0x1c
c001b131:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b135:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b139:	50                   	push   eax
c001b13a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b13e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b142:	e8 c1 ff ff ff       	call   c001b108 <Reg::readBool(char*, char*, bool*)>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	84 c0                	test   al,al
c001b14c:	74 04                	je     c001b152 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b14e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b152:	88 d8                	mov    al,bl
c001b154:	83 c4 18             	add    esp,0x18
c001b157:	5b                   	pop    ebx
c001b158:	c3                   	ret    

c001b159 <Reg::readIntWithDefault(char*, char*, int)>:
c001b159:	53                   	push   ebx
c001b15a:	83 ec 1c             	sub    esp,0x1c
c001b15d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b161:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b165:	50                   	push   eax
c001b166:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16e:	e8 29 fe ff ff       	call   c001af9c <Reg::readInt(char*, char*, int*)>
c001b173:	83 c4 10             	add    esp,0x10
c001b176:	84 c0                	test   al,al
c001b178:	74 04                	je     c001b17e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b17a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b17e:	89 d8                	mov    eax,ebx
c001b180:	83 c4 18             	add    esp,0x18
c001b183:	5b                   	pop    ebx
c001b184:	c3                   	ret    

c001b185 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b185:	57                   	push   edi
c001b186:	56                   	push   esi
c001b187:	56                   	push   esi
c001b188:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b18c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b190:	56                   	push   esi
c001b191:	57                   	push   edi
c001b192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b19a:	e8 e8 fe ff ff       	call   c001b087 <Reg::readString(char*, char*, char*, int)>
c001b19f:	83 c4 10             	add    esp,0x10
c001b1a2:	84 c0                	test   al,al
c001b1a4:	75 1a                	jne    c001b1c0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b1a6:	51                   	push   ecx
c001b1a7:	56                   	push   esi
c001b1a8:	6a 00                	push   0x0
c001b1aa:	57                   	push   edi
c001b1ab:	e8 a0 55 fe ff       	call   c0000750 <memset>
c001b1b0:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b1b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1b9:	83 c4 10             	add    esp,0x10
c001b1bc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1c0:	89 f8                	mov    eax,edi
c001b1c2:	5a                   	pop    edx
c001b1c3:	5e                   	pop    esi
c001b1c4:	5f                   	pop    edi
c001b1c5:	c3                   	ret    

c001b1c6 <Sys::eject(regs*)>:
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	83 ca ff             	or     edx,0xffffffff
c001b1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1d3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1d8:	83 e9 41             	sub    ecx,0x41
c001b1db:	83 f9 19             	cmp    ecx,0x19
c001b1de:	77 18                	ja     c001b1f8 <Sys::eject(regs*)+0x32>
c001b1e0:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001b1e7:	85 c9                	test   ecx,ecx
c001b1e9:	74 0d                	je     c001b1f8 <Sys::eject(regs*)+0x32>
c001b1eb:	83 ec 0c             	sub    esp,0xc
c001b1ee:	51                   	push   ecx
c001b1ef:	e8 fc b0 ff ff       	call   c00162f0 <LogicalDisk::eject()>
c001b1f4:	83 c4 10             	add    esp,0x10
c001b1f7:	99                   	cdq    
c001b1f8:	83 c4 0c             	add    esp,0xc
c001b1fb:	c3                   	ret    

c001b1fc <Sys::exit(regs*)>:
c001b1fc:	83 ec 18             	sub    esp,0x18
c001b1ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b203:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b206:	e8 d3 35 00 00       	call   c001e7de <terminateTask(int)>
c001b20b:	83 c8 ff             	or     eax,0xffffffff
c001b20e:	83 c4 1c             	add    esp,0x1c
c001b211:	89 c2                	mov    edx,eax
c001b213:	c3                   	ret    

c001b214 <Sys::getCwd(regs*)>:
c001b214:	83 ec 10             	sub    esp,0x10
c001b217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b21b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b21e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b221:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b226:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b229:	e8 32 7b ff ff       	call   c0012d60 <Fs::getcwd(Process*, char*, int)>
c001b22e:	83 c4 1c             	add    esp,0x1c
c001b231:	99                   	cdq    
c001b232:	c3                   	ret    

c001b233 <Sys::getPID(regs*)>:
c001b233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b238:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b23b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b23d:	99                   	cdq    
c001b23e:	c3                   	ret    

c001b23f <Sys::getRAMData(regs*)>:
c001b23f:	8b 0d b4 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6b4
c001b245:	69 05 b0 e6 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e6b0,0xc8
c001b24f:	99                   	cdq    
c001b250:	f7 f9                	idiv   ecx
c001b252:	c1 e0 18             	shl    eax,0x18
c001b255:	09 c8                	or     eax,ecx
c001b257:	99                   	cdq    
c001b258:	c3                   	ret    

c001b259 <Sys::getVGAPtr(regs*)>:
c001b259:	55                   	push   ebp
c001b25a:	57                   	push   edi
c001b25b:	56                   	push   esi
c001b25c:	53                   	push   ebx
c001b25d:	83 ec 18             	sub    esp,0x18
c001b260:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b264:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b267:	e8 be 30 00 00       	call   c001e32a <Thr::processFromPID(int)>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	89 c1                	mov    ecx,eax
c001b271:	b8 01 00 00 00       	mov    eax,0x1
c001b276:	85 c9                	test   ecx,ecx
c001b278:	74 59                	je     c001b2d3 <Sys::getVGAPtr(regs*)+0x7a>
c001b27a:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b280:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b284:	74 0c                	je     c001b292 <Sys::getVGAPtr(regs*)+0x39>
c001b286:	83 ec 0c             	sub    esp,0xc
c001b289:	53                   	push   ebx
c001b28a:	e8 d2 54 ff ff       	call   c0010761 <setActiveTerminal(VgaText*)>
c001b28f:	83 c4 10             	add    esp,0x10
c001b292:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b295:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b298:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b29d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b29f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b2a2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2a5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b2ab:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b2b1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2b4:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b2b7:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b2bd:	50                   	push   eax
c001b2be:	50                   	push   eax
c001b2bf:	53                   	push   ebx
c001b2c0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2c3:	05 a8 0f 00 00       	add    eax,0xfa8
c001b2c8:	50                   	push   eax
c001b2c9:	e8 3e 55 fe ff       	call   c000080c <strcpy>
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	31 c0                	xor    eax,eax
c001b2d3:	83 c4 0c             	add    esp,0xc
c001b2d6:	31 d2                	xor    edx,edx
c001b2d8:	5b                   	pop    ebx
c001b2d9:	5e                   	pop    esi
c001b2da:	5f                   	pop    edi
c001b2db:	5d                   	pop    ebp
c001b2dc:	c3                   	ret    

c001b2dd <Sys::loadDLL(regs*)>:
c001b2dd:	56                   	push   esi
c001b2de:	53                   	push   ebx
c001b2df:	31 d2                	xor    edx,edx
c001b2e1:	51                   	push   ecx
c001b2e2:	b8 01 00 00 00       	mov    eax,0x1
c001b2e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2eb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2ef:	0f 84 8c 00 00 00    	je     c001b381 <Sys::loadDLL(regs*)+0xa4>
c001b2f5:	83 ec 0c             	sub    esp,0xc
c001b2f8:	68 14 01 00 00       	push   0x114
c001b2fd:	e8 a5 46 ff ff       	call   c000f9a7 <malloc>
c001b302:	83 c4 0c             	add    esp,0xc
c001b305:	89 c3                	mov    ebx,eax
c001b307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b30c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b30f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b312:	53                   	push   ebx
c001b313:	e8 46 7c ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001b318:	83 c4 10             	add    esp,0x10
c001b31b:	31 d2                	xor    edx,edx
c001b31d:	b8 02 00 00 00       	mov    eax,0x2
c001b322:	85 db                	test   ebx,ebx
c001b324:	74 5b                	je     c001b381 <Sys::loadDLL(regs*)+0xa4>
c001b326:	83 ec 0c             	sub    esp,0xc
c001b329:	53                   	push   ebx
c001b32a:	e8 01 7f ff ff       	call   c0013230 <File::exists()>
c001b32f:	83 c4 10             	add    esp,0x10
c001b332:	84 c0                	test   al,al
c001b334:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b336:	75 11                	jne    c001b349 <Sys::loadDLL(regs*)+0x6c>
c001b338:	83 ec 0c             	sub    esp,0xc
c001b33b:	53                   	push   ebx
c001b33c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b33f:	83 c4 10             	add    esp,0x10
c001b342:	b8 03 00 00 00       	mov    eax,0x3
c001b347:	eb 36                	jmp    c001b37f <Sys::loadDLL(regs*)+0xa2>
c001b349:	83 ec 0c             	sub    esp,0xc
c001b34c:	53                   	push   ebx
c001b34d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b350:	58                   	pop    eax
c001b351:	5a                   	pop    edx
c001b352:	6a 00                	push   0x0
c001b354:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b357:	e8 0e 22 00 00       	call   c001d56a <Thr::loadDLL(char const*, bool)>
c001b35c:	83 c4 10             	add    esp,0x10
c001b35f:	89 c1                	mov    ecx,eax
c001b361:	31 d2                	xor    edx,edx
c001b363:	b8 04 00 00 00       	mov    eax,0x4
c001b368:	85 c9                	test   ecx,ecx
c001b36a:	74 15                	je     c001b381 <Sys::loadDLL(regs*)+0xa4>
c001b36c:	53                   	push   ebx
c001b36d:	53                   	push   ebx
c001b36e:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c001b374:	51                   	push   ecx
c001b375:	e8 21 24 00 00       	call   c001d79b <Thr::executeDLL(unsigned long, void*)>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	31 c0                	xor    eax,eax
c001b37f:	31 d2                	xor    edx,edx
c001b381:	59                   	pop    ecx
c001b382:	5b                   	pop    ebx
c001b383:	5e                   	pop    esi
c001b384:	c3                   	ret    

c001b385 <Sys::read(regs*)>:
c001b385:	57                   	push   edi
c001b386:	56                   	push   esi
c001b387:	53                   	push   ebx
c001b388:	83 ec 10             	sub    esp,0x10
c001b38b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b38f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b392:	83 f8 02             	cmp    eax,0x2
c001b395:	77 10                	ja     c001b3a7 <Sys::read(regs*)+0x22>
c001b397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b39c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b39f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3a5:	eb 0e                	jmp    c001b3b5 <Sys::read(regs*)+0x30>
c001b3a7:	83 ec 0c             	sub    esp,0xc
c001b3aa:	50                   	push   eax
c001b3ab:	e8 27 61 ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	89 c1                	mov    ecx,eax
c001b3b5:	83 c8 ff             	or     eax,0xffffffff
c001b3b8:	85 c9                	test   ecx,ecx
c001b3ba:	89 c2                	mov    edx,eax
c001b3bc:	74 28                	je     c001b3e6 <Sys::read(regs*)+0x61>
c001b3be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3c6:	31 ff                	xor    edi,edi
c001b3c8:	83 ec 0c             	sub    esp,0xc
c001b3cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3cd:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3d1:	52                   	push   edx
c001b3d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3d5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3d8:	57                   	push   edi
c001b3d9:	56                   	push   esi
c001b3da:	51                   	push   ecx
c001b3db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3e2:	83 c4 20             	add    esp,0x20
c001b3e5:	99                   	cdq    
c001b3e6:	83 c4 10             	add    esp,0x10
c001b3e9:	5b                   	pop    ebx
c001b3ea:	5e                   	pop    esi
c001b3eb:	5f                   	pop    edi
c001b3ec:	c3                   	ret    

c001b3ed <Sys::sbrk(regs*)>:
c001b3ed:	56                   	push   esi
c001b3ee:	53                   	push   ebx
c001b3ef:	50                   	push   eax
c001b3f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3fc:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b3ff:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b405:	85 db                	test   ebx,ebx
c001b407:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b40a:	74 02                	je     c001b40e <Sys::sbrk(regs*)+0x21>
c001b40c:	79 06                	jns    c001b414 <Sys::sbrk(regs*)+0x27>
c001b40e:	89 f0                	mov    eax,esi
c001b410:	31 d2                	xor    edx,edx
c001b412:	eb 2a                	jmp    c001b43e <Sys::sbrk(regs*)+0x51>
c001b414:	83 c8 ff             	or     eax,0xffffffff
c001b417:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b41d:	89 c2                	mov    edx,eax
c001b41f:	77 1d                	ja     c001b43e <Sys::sbrk(regs*)+0x51>
c001b421:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b427:	50                   	push   eax
c001b428:	c1 ea 0c             	shr    edx,0xc
c001b42b:	68 07 0c 00 00       	push   0xc07
c001b430:	52                   	push   edx
c001b431:	51                   	push   ecx
c001b432:	e8 9f 69 ff ff       	call   c0011dd6 <VAS::allocatePages(int, int)>
c001b437:	89 f0                	mov    eax,esi
c001b439:	31 d2                	xor    edx,edx
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	59                   	pop    ecx
c001b43f:	5b                   	pop    ebx
c001b440:	5e                   	pop    esi
c001b441:	c3                   	ret    

c001b442 <Sys::setCwd(regs*)>:
c001b442:	83 ec 14             	sub    esp,0x14
c001b445:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b449:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b44c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b451:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b454:	e8 76 7e ff ff       	call   c00132cf <Fs::setcwd(Process*, char*)>
c001b459:	83 c4 1c             	add    esp,0x1c
c001b45c:	99                   	cdq    
c001b45d:	c3                   	ret    

c001b45e <Sys::setTime(regs*)>:
c001b45e:	55                   	push   ebp
c001b45f:	31 c9                	xor    ecx,ecx
c001b461:	57                   	push   edi
c001b462:	bd 0c 00 00 00       	mov    ebp,0xc
c001b467:	56                   	push   esi
c001b468:	53                   	push   ebx
c001b469:	31 db                	xor    ebx,ebx
c001b46b:	83 ec 10             	sub    esp,0x10
c001b46e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b472:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b475:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b478:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b47b:	89 c2                	mov    edx,eax
c001b47d:	66 81 ef 6c 07       	sub    di,0x76c
c001b482:	83 e2 1f             	and    edx,0x1f
c001b485:	c1 e7 10             	shl    edi,0x10
c001b488:	42                   	inc    edx
c001b489:	c1 e8 05             	shr    eax,0x5
c001b48c:	88 d1                	mov    cl,dl
c001b48e:	31 d2                	xor    edx,edx
c001b490:	f7 f5                	div    ebp
c001b492:	89 dd                	mov    ebp,ebx
c001b494:	88 d5                	mov    ch,dl
c001b496:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b49c:	0f b7 c1             	movzx  eax,cx
c001b49f:	31 d2                	xor    edx,edx
c001b4a1:	09 f8                	or     eax,edi
c001b4a3:	bf 3c 00 00 00       	mov    edi,0x3c
c001b4a8:	89 c1                	mov    ecx,eax
c001b4aa:	89 f0                	mov    eax,esi
c001b4ac:	f7 f7                	div    edi
c001b4ae:	c1 e2 10             	shl    edx,0x10
c001b4b1:	09 d5                	or     ebp,edx
c001b4b3:	31 d2                	xor    edx,edx
c001b4b5:	89 eb                	mov    ebx,ebp
c001b4b7:	f7 f7                	div    edi
c001b4b9:	bf 10 0e 00 00       	mov    edi,0xe10
c001b4be:	88 d7                	mov    bh,dl
c001b4c0:	89 f0                	mov    eax,esi
c001b4c2:	31 d2                	xor    edx,edx
c001b4c4:	f7 f7                	div    edi
c001b4c6:	bf 18 00 00 00       	mov    edi,0x18
c001b4cb:	31 d2                	xor    edx,edx
c001b4cd:	f7 f7                	div    edi
c001b4cf:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b4d4:	88 d3                	mov    bl,dl
c001b4d6:	53                   	push   ebx
c001b4d7:	51                   	push   ecx
c001b4d8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4de:	e8 35 86 ff ff       	call   c0013b18 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4e3:	83 c4 1c             	add    esp,0x1c
c001b4e6:	83 f0 01             	xor    eax,0x1
c001b4e9:	5b                   	pop    ebx
c001b4ea:	0f b6 c0             	movzx  eax,al
c001b4ed:	5e                   	pop    esi
c001b4ee:	31 d2                	xor    edx,edx
c001b4f0:	5f                   	pop    edi
c001b4f1:	5d                   	pop    ebp
c001b4f2:	c3                   	ret    

c001b4f3 <Sys::timezone(regs*)>:
c001b4f3:	53                   	push   ebx
c001b4f4:	83 ec 08             	sub    esp,0x8
c001b4f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4fb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4ff:	75 17                	jne    c001b518 <Sys::timezone(regs*)+0x25>
c001b501:	83 ec 0c             	sub    esp,0xc
c001b504:	68 f9 c4 02 c0       	push   0xc002c4f9
c001b509:	e8 f1 74 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001b50e:	83 c8 ff             	or     eax,0xffffffff
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	89 c2                	mov    edx,eax
c001b516:	eb 20                	jmp    c001b538 <Sys::timezone(regs*)+0x45>
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	68 0e c5 02 c0       	push   0xc002c50e
c001b520:	e8 da 74 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001b525:	58                   	pop    eax
c001b526:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b529:	e8 4c 83 ff ff       	call   c001387a <User::loadClockSettings(int)>
c001b52e:	83 c4 10             	add    esp,0x10
c001b531:	b8 01 00 00 00       	mov    eax,0x1
c001b536:	31 d2                	xor    edx,edx
c001b538:	83 c4 08             	add    esp,0x8
c001b53b:	5b                   	pop    ebx
c001b53c:	c3                   	ret    

c001b53d <Sys::write(regs*)>:
c001b53d:	57                   	push   edi
c001b53e:	56                   	push   esi
c001b53f:	53                   	push   ebx
c001b540:	83 ec 10             	sub    esp,0x10
c001b543:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b547:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b54a:	83 f8 02             	cmp    eax,0x2
c001b54d:	77 10                	ja     c001b55f <Sys::write(regs*)+0x22>
c001b54f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b554:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b557:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b55d:	eb 0e                	jmp    c001b56d <Sys::write(regs*)+0x30>
c001b55f:	83 ec 0c             	sub    esp,0xc
c001b562:	50                   	push   eax
c001b563:	e8 6f 5f ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b568:	83 c4 10             	add    esp,0x10
c001b56b:	89 c1                	mov    ecx,eax
c001b56d:	83 c8 ff             	or     eax,0xffffffff
c001b570:	85 c9                	test   ecx,ecx
c001b572:	89 c2                	mov    edx,eax
c001b574:	74 28                	je     c001b59e <Sys::write(regs*)+0x61>
c001b576:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b57e:	31 ff                	xor    edi,edi
c001b580:	83 ec 0c             	sub    esp,0xc
c001b583:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b585:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b589:	52                   	push   edx
c001b58a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b58d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b590:	57                   	push   edi
c001b591:	56                   	push   esi
c001b592:	51                   	push   ecx
c001b593:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b59a:	83 c4 20             	add    esp,0x20
c001b59d:	99                   	cdq    
c001b59e:	83 c4 10             	add    esp,0x10
c001b5a1:	5b                   	pop    ebx
c001b5a2:	5e                   	pop    esi
c001b5a3:	5f                   	pop    edi
c001b5a4:	c3                   	ret    

c001b5a5 <Sys::wsbe(regs*)>:
c001b5a5:	57                   	push   edi
c001b5a6:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5ab:	56                   	push   esi
c001b5ac:	be 4d c5 02 c0       	mov    esi,0xc002c54d
c001b5b1:	53                   	push   ebx
c001b5b2:	83 ec 30             	sub    esp,0x30
c001b5b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5b9:	fc                   	cld    
c001b5ba:	83 ec 0c             	sub    esp,0xc
c001b5bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5bf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5cb:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5d1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5d3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5d6:	57                   	push   edi
c001b5d7:	e8 90 51 fe ff       	call   c000076c <strlen>
c001b5dc:	5a                   	pop    edx
c001b5dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5e1:	52                   	push   edx
c001b5e2:	31 d2                	xor    edx,edx
c001b5e4:	57                   	push   edi
c001b5e5:	52                   	push   edx
c001b5e6:	50                   	push   eax
c001b5e7:	56                   	push   esi
c001b5e8:	ff d3                	call   ebx
c001b5ea:	83 c4 14             	add    esp,0x14
c001b5ed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5f1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5f4:	e8 e5 31 00 00       	call   c001e7de <terminateTask(int)>
c001b5f9:	83 c4 40             	add    esp,0x40
c001b5fc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b601:	5b                   	pop    ebx
c001b602:	31 d2                	xor    edx,edx
c001b604:	5e                   	pop    esi
c001b605:	5f                   	pop    edi
c001b606:	c3                   	ret    

c001b607 <Sys::yield(regs*)>:
c001b607:	57                   	push   edi
c001b608:	56                   	push   esi
c001b609:	53                   	push   ebx
c001b60a:	fa                   	cli    
c001b60b:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001b611:	e8 19 29 00 00       	call   c001df2f <schedule()>
c001b616:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001b61b:	48                   	dec    eax
c001b61c:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001b621:	75 01                	jne    c001b624 <Sys::yield(regs*)+0x1d>
c001b623:	fb                   	sti    
c001b624:	8b 35 d0 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecd0
c001b62a:	8b 3d d4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecd4
c001b630:	89 f0                	mov    eax,esi
c001b632:	89 fb                	mov    ebx,edi
c001b634:	89 f1                	mov    ecx,esi
c001b636:	c1 e0 07             	shl    eax,0x7
c001b639:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b63d:	25 80 30 0f 00       	and    eax,0xf3080
c001b642:	c1 eb 17             	shr    ebx,0x17
c001b645:	31 c8                	xor    eax,ecx
c001b647:	89 da                	mov    edx,ebx
c001b649:	5b                   	pop    ebx
c001b64a:	5e                   	pop    esi
c001b64b:	5f                   	pop    edi
c001b64c:	c3                   	ret    

c001b64d <sysCallSeekDir(regs*)>:
c001b64d:	31 c0                	xor    eax,eax
c001b64f:	31 d2                	xor    edx,edx
c001b651:	c3                   	ret    

c001b652 <sysCallTellDir(regs*)>:
c001b652:	31 c0                	xor    eax,eax
c001b654:	31 d2                	xor    edx,edx
c001b656:	c3                   	ret    

c001b657 <sysCallVerify(regs*)>:
c001b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b65b:	31 d2                	xor    edx,edx
c001b65d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b660:	c3                   	ret    

c001b661 <sysCallGetArgc(regs*)>:
c001b661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b666:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b669:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b66f:	99                   	cdq    
c001b670:	c3                   	ret    

c001b671 <sysFormatDisk(regs*)>:
c001b671:	56                   	push   esi
c001b672:	53                   	push   ebx
c001b673:	53                   	push   ebx
c001b674:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b678:	8b 1d d4 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d4
c001b67e:	eb 25                	jmp    c001b6a5 <sysFormatDisk(regs*)+0x34>
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b686:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b688:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b68b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b68e:	50                   	push   eax
c001b68f:	ff 34 85 60 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13a0]
c001b696:	53                   	push   ebx
c001b697:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b69a:	83 c4 20             	add    esp,0x20
c001b69d:	83 f8 08             	cmp    eax,0x8
c001b6a0:	75 12                	jne    c001b6b4 <sysFormatDisk(regs*)+0x43>
c001b6a2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6a5:	85 db                	test   ebx,ebx
c001b6a7:	75 d7                	jne    c001b680 <sysFormatDisk(regs*)+0xf>
c001b6a9:	59                   	pop    ecx
c001b6aa:	b8 03 00 00 00       	mov    eax,0x3
c001b6af:	31 d2                	xor    edx,edx
c001b6b1:	5b                   	pop    ebx
c001b6b2:	5e                   	pop    esi
c001b6b3:	c3                   	ret    
c001b6b4:	85 c0                	test   eax,eax
c001b6b6:	74 1b                	je     c001b6d3 <sysFormatDisk(regs*)+0x62>
c001b6b8:	83 f8 09             	cmp    eax,0x9
c001b6bb:	74 0b                	je     c001b6c8 <sysFormatDisk(regs*)+0x57>
c001b6bd:	59                   	pop    ecx
c001b6be:	b8 02 00 00 00       	mov    eax,0x2
c001b6c3:	31 d2                	xor    edx,edx
c001b6c5:	5b                   	pop    ebx
c001b6c6:	5e                   	pop    esi
c001b6c7:	c3                   	ret    
c001b6c8:	59                   	pop    ecx
c001b6c9:	b8 01 00 00 00       	mov    eax,0x1
c001b6ce:	31 d2                	xor    edx,edx
c001b6d0:	5b                   	pop    ebx
c001b6d1:	5e                   	pop    esi
c001b6d2:	c3                   	ret    
c001b6d3:	59                   	pop    ecx
c001b6d4:	31 c0                	xor    eax,eax
c001b6d6:	31 d2                	xor    edx,edx
c001b6d8:	5b                   	pop    ebx
c001b6d9:	5e                   	pop    esi
c001b6da:	c3                   	ret    

c001b6db <sysSetDiskVolumeLabel(regs*)>:
c001b6db:	56                   	push   esi
c001b6dc:	53                   	push   ebx
c001b6dd:	53                   	push   ebx
c001b6de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6e2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6e5:	83 f8 19             	cmp    eax,0x19
c001b6e8:	77 29                	ja     c001b713 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6ea:	8b 0c 85 60 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13a0]
c001b6f1:	85 c9                	test   ecx,ecx
c001b6f3:	74 1e                	je     c001b713 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6f8:	85 d2                	test   edx,edx
c001b6fa:	74 17                	je     c001b713 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6fc:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b702:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b704:	52                   	push   edx
c001b705:	50                   	push   eax
c001b706:	51                   	push   ecx
c001b707:	53                   	push   ebx
c001b708:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	99                   	cdq    
c001b70f:	59                   	pop    ecx
c001b710:	5b                   	pop    ebx
c001b711:	5e                   	pop    esi
c001b712:	c3                   	ret    
c001b713:	59                   	pop    ecx
c001b714:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b719:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b71e:	5b                   	pop    ebx
c001b71f:	5e                   	pop    esi
c001b720:	c3                   	ret    

c001b721 <sysGetDiskVolumeLabel(regs*)>:
c001b721:	57                   	push   edi
c001b722:	56                   	push   esi
c001b723:	53                   	push   ebx
c001b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b728:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b72b:	83 fa 19             	cmp    edx,0x19
c001b72e:	77 34                	ja     c001b764 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b730:	8b 0c 95 60 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd13a0]
c001b737:	85 c9                	test   ecx,ecx
c001b739:	74 29                	je     c001b764 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b73b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b73e:	85 db                	test   ebx,ebx
c001b740:	74 22                	je     c001b764 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b742:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b745:	85 c0                	test   eax,eax
c001b747:	74 1b                	je     c001b764 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b749:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b74f:	83 ec 0c             	sub    esp,0xc
c001b752:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b754:	50                   	push   eax
c001b755:	53                   	push   ebx
c001b756:	52                   	push   edx
c001b757:	51                   	push   ecx
c001b758:	56                   	push   esi
c001b759:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b75c:	83 c4 20             	add    esp,0x20
c001b75f:	99                   	cdq    
c001b760:	5b                   	pop    ebx
c001b761:	5e                   	pop    esi
c001b762:	5f                   	pop    edi
c001b763:	c3                   	ret    
c001b764:	5b                   	pop    ebx
c001b765:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b76a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b76f:	5e                   	pop    esi
c001b770:	5f                   	pop    edi
c001b771:	c3                   	ret    

c001b772 <sysShutdown(regs*)>:
c001b772:	83 ec 0c             	sub    esp,0xc
c001b775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b779:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b77c:	85 c0                	test   eax,eax
c001b77e:	74 18                	je     c001b798 <sysShutdown(regs*)+0x26>
c001b780:	83 f8 01             	cmp    eax,0x1
c001b783:	74 38                	je     c001b7bd <sysShutdown(regs*)+0x4b>
c001b785:	83 f8 02             	cmp    eax,0x2
c001b788:	74 24                	je     c001b7ae <sysShutdown(regs*)+0x3c>
c001b78a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b78f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b794:	83 c4 0c             	add    esp,0xc
c001b797:	c3                   	ret    
c001b798:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b79d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b79f:	6a 00                	push   0x0
c001b7a1:	6a 00                	push   0x0
c001b7a3:	6a 00                	push   0x0
c001b7a5:	50                   	push   eax
c001b7a6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7a9:	83 c4 10             	add    esp,0x10
c001b7ac:	eb dc                	jmp    c001b78a <sysShutdown(regs*)+0x18>
c001b7ae:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b7b3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7b5:	6a 00                	push   0x0
c001b7b7:	6a 00                	push   0x0
c001b7b9:	6a 01                	push   0x1
c001b7bb:	eb e8                	jmp    c001b7a5 <sysShutdown(regs*)+0x33>
c001b7bd:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c001b7c2:	85 c0                	test   eax,eax
c001b7c4:	74 02                	je     c001b7c8 <sysShutdown(regs*)+0x56>
c001b7c6:	ff d0                	call   eax
c001b7c8:	31 c0                	xor    eax,eax
c001b7ca:	31 d2                	xor    edx,edx
c001b7cc:	83 c4 0c             	add    esp,0xc
c001b7cf:	c3                   	ret    

c001b7d0 <sysCallRealpath(regs*)>:
c001b7d0:	83 ec 0c             	sub    esp,0xc
c001b7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7da:	85 d2                	test   edx,edx
c001b7dc:	74 07                	je     c001b7e5 <sysCallRealpath(regs*)+0x15>
c001b7de:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7e1:	85 c0                	test   eax,eax
c001b7e3:	75 0b                	jne    c001b7f0 <sysCallRealpath(regs*)+0x20>
c001b7e5:	b8 01 00 00 00       	mov    eax,0x1
c001b7ea:	31 d2                	xor    edx,edx
c001b7ec:	83 c4 0c             	add    esp,0xc
c001b7ef:	c3                   	ret    
c001b7f0:	51                   	push   ecx
c001b7f1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7f7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7fa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b800:	51                   	push   ecx
c001b801:	52                   	push   edx
c001b802:	50                   	push   eax
c001b803:	e8 ac 75 ff ff       	call   c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b808:	83 c4 10             	add    esp,0x10
c001b80b:	31 c0                	xor    eax,eax
c001b80d:	31 d2                	xor    edx,edx
c001b80f:	83 c4 0c             	add    esp,0xc
c001b812:	c3                   	ret    

c001b813 <sysCallReadDir(regs*)>:
c001b813:	53                   	push   ebx
c001b814:	83 ec 18             	sub    esp,0x18
c001b817:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b81b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b81e:	83 f8 02             	cmp    eax,0x2
c001b821:	76 60                	jbe    c001b883 <sysCallReadDir(regs*)+0x70>
c001b823:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b82a:	77 48                	ja     c001b874 <sysCallReadDir(regs*)+0x61>
c001b82c:	83 ec 0c             	sub    esp,0xc
c001b82f:	50                   	push   eax
c001b830:	e8 a2 5c ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	85 c0                	test   eax,eax
c001b83a:	74 38                	je     c001b874 <sysCallReadDir(regs*)+0x61>
c001b83c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b844:	83 ec 0c             	sub    esp,0xc
c001b847:	8b 10                	mov    edx,DWORD PTR [eax]
c001b849:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b84d:	51                   	push   ecx
c001b84e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b851:	6a 00                	push   0x0
c001b853:	68 10 01 00 00       	push   0x110
c001b858:	50                   	push   eax
c001b859:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b85c:	83 c4 20             	add    esp,0x20
c001b85f:	85 c0                	test   eax,eax
c001b861:	74 29                	je     c001b88c <sysCallReadDir(regs*)+0x79>
c001b863:	83 f8 07             	cmp    eax,0x7
c001b866:	74 1b                	je     c001b883 <sysCallReadDir(regs*)+0x70>
c001b868:	b8 02 00 00 00       	mov    eax,0x2
c001b86d:	31 d2                	xor    edx,edx
c001b86f:	83 c4 18             	add    esp,0x18
c001b872:	5b                   	pop    ebx
c001b873:	c3                   	ret    
c001b874:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b879:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b87e:	83 c4 18             	add    esp,0x18
c001b881:	5b                   	pop    ebx
c001b882:	c3                   	ret    
c001b883:	b8 01 00 00 00       	mov    eax,0x1
c001b888:	31 d2                	xor    edx,edx
c001b88a:	eb e3                	jmp    c001b86f <sysCallReadDir(regs*)+0x5c>
c001b88c:	31 c0                	xor    eax,eax
c001b88e:	31 d2                	xor    edx,edx
c001b890:	eb dd                	jmp    c001b86f <sysCallReadDir(regs*)+0x5c>

c001b892 <sysCallIsATTY(regs*)>:
c001b892:	83 ec 0c             	sub    esp,0xc
c001b895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b899:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b89c:	83 f8 02             	cmp    eax,0x2
c001b89f:	76 07                	jbe    c001b8a8 <sysCallIsATTY(regs*)+0x16>
c001b8a1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8a6:	75 26                	jne    c001b8ce <sysCallIsATTY(regs*)+0x3c>
c001b8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8b6:	85 c0                	test   eax,eax
c001b8b8:	74 24                	je     c001b8de <sysCallIsATTY(regs*)+0x4c>
c001b8ba:	83 ec 0c             	sub    esp,0xc
c001b8bd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8bf:	50                   	push   eax
c001b8c0:	ff 12                	call   DWORD PTR [edx]
c001b8c2:	31 d2                	xor    edx,edx
c001b8c4:	0f b6 c0             	movzx  eax,al
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	83 c4 0c             	add    esp,0xc
c001b8cd:	c3                   	ret    
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	50                   	push   eax
c001b8d2:	e8 00 5c ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	85 c0                	test   eax,eax
c001b8dc:	75 dc                	jne    c001b8ba <sysCallIsATTY(regs*)+0x28>
c001b8de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8e8:	83 c4 0c             	add    esp,0xc
c001b8eb:	c3                   	ret    

c001b8ec <sysCallSeek(regs*)>:
c001b8ec:	53                   	push   ebx
c001b8ed:	83 ec 08             	sub    esp,0x8
c001b8f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8f7:	8d 50 fd             	lea    edx,[eax-0x3]
c001b8fa:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b900:	77 32                	ja     c001b934 <sysCallSeek(regs*)+0x48>
c001b902:	83 ec 0c             	sub    esp,0xc
c001b905:	50                   	push   eax
c001b906:	e8 cc 5b ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b90b:	83 c4 0c             	add    esp,0xc
c001b90e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b911:	31 db                	xor    ebx,ebx
c001b913:	53                   	push   ebx
c001b914:	51                   	push   ecx
c001b915:	50                   	push   eax
c001b916:	e8 65 77 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001b91b:	83 c4 10             	add    esp,0x10
c001b91e:	85 c0                	test   eax,eax
c001b920:	0f 95 c0             	setne  al
c001b923:	31 d2                	xor    edx,edx
c001b925:	0f b6 c0             	movzx  eax,al
c001b928:	f7 d8                	neg    eax
c001b92a:	83 d2 00             	adc    edx,0x0
c001b92d:	83 c4 08             	add    esp,0x8
c001b930:	f7 da                	neg    edx
c001b932:	5b                   	pop    ebx
c001b933:	c3                   	ret    
c001b934:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b939:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b93e:	83 c4 08             	add    esp,0x8
c001b941:	5b                   	pop    ebx
c001b942:	c3                   	ret    

c001b943 <sysCallTell(regs*)>:
c001b943:	53                   	push   ebx
c001b944:	83 ec 08             	sub    esp,0x8
c001b947:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b94b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b94e:	83 f8 02             	cmp    eax,0x2
c001b951:	76 4d                	jbe    c001b9a0 <sysCallTell(regs*)+0x5d>
c001b953:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b958:	76 19                	jbe    c001b973 <sysCallTell(regs*)+0x30>
c001b95a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b95d:	31 d2                	xor    edx,edx
c001b95f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b965:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b96c:	31 c0                	xor    eax,eax
c001b96e:	83 c4 08             	add    esp,0x8
c001b971:	5b                   	pop    ebx
c001b972:	c3                   	ret    
c001b973:	83 ec 0c             	sub    esp,0xc
c001b976:	50                   	push   eax
c001b977:	e8 5b 5b ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b97c:	5a                   	pop    edx
c001b97d:	59                   	pop    ecx
c001b97e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b981:	50                   	push   eax
c001b982:	e8 4f 77 ff ff       	call   c00130d6 <File::tell(unsigned long long*)>
c001b987:	83 c4 10             	add    esp,0x10
c001b98a:	85 c0                	test   eax,eax
c001b98c:	0f 95 c0             	setne  al
c001b98f:	31 d2                	xor    edx,edx
c001b991:	0f b6 c0             	movzx  eax,al
c001b994:	f7 d8                	neg    eax
c001b996:	83 d2 00             	adc    edx,0x0
c001b999:	83 c4 08             	add    esp,0x8
c001b99c:	f7 da                	neg    edx
c001b99e:	5b                   	pop    ebx
c001b99f:	c3                   	ret    
c001b9a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9aa:	83 c4 08             	add    esp,0x8
c001b9ad:	5b                   	pop    ebx
c001b9ae:	c3                   	ret    

c001b9af <sysCallSize(regs*)>:
c001b9af:	53                   	push   ebx
c001b9b0:	83 ec 18             	sub    esp,0x18
c001b9b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9ba:	83 f8 02             	cmp    eax,0x2
c001b9bd:	76 53                	jbe    c001ba12 <sysCallSize(regs*)+0x63>
c001b9bf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9c4:	76 19                	jbe    c001b9df <sysCallSize(regs*)+0x30>
c001b9c6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9c9:	31 d2                	xor    edx,edx
c001b9cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9d8:	31 c0                	xor    eax,eax
c001b9da:	83 c4 18             	add    esp,0x18
c001b9dd:	5b                   	pop    ebx
c001b9de:	c3                   	ret    
c001b9df:	83 ec 0c             	sub    esp,0xc
c001b9e2:	50                   	push   eax
c001b9e3:	e8 ef 5a ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001b9e8:	83 c4 0c             	add    esp,0xc
c001b9eb:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9ef:	52                   	push   edx
c001b9f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9f3:	50                   	push   eax
c001b9f4:	e8 75 78 ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c001b9f9:	83 c4 10             	add    esp,0x10
c001b9fc:	85 c0                	test   eax,eax
c001b9fe:	0f 95 c0             	setne  al
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	0f b6 c0             	movzx  eax,al
c001ba06:	f7 d8                	neg    eax
c001ba08:	83 d2 00             	adc    edx,0x0
c001ba0b:	83 c4 18             	add    esp,0x18
c001ba0e:	f7 da                	neg    edx
c001ba10:	5b                   	pop    ebx
c001ba11:	c3                   	ret    
c001ba12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba17:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1c:	83 c4 18             	add    esp,0x18
c001ba1f:	5b                   	pop    ebx
c001ba20:	c3                   	ret    

c001ba21 <sysCallSizeFromFilename(regs*)>:
c001ba21:	57                   	push   edi
c001ba22:	56                   	push   esi
c001ba23:	53                   	push   ebx
c001ba24:	83 ec 20             	sub    esp,0x20
c001ba27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba2b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001ba2e:	83 fb 02             	cmp    ebx,0x2
c001ba31:	0f 86 88 00 00 00    	jbe    c001babf <sysCallSizeFromFilename(regs*)+0x9e>
c001ba37:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba3d:	76 1b                	jbe    c001ba5a <sysCallSizeFromFilename(regs*)+0x39>
c001ba3f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba42:	31 d2                	xor    edx,edx
c001ba44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba51:	83 c4 20             	add    esp,0x20
c001ba54:	31 c0                	xor    eax,eax
c001ba56:	5b                   	pop    ebx
c001ba57:	5e                   	pop    esi
c001ba58:	5f                   	pop    edi
c001ba59:	c3                   	ret    
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	68 14 01 00 00       	push   0x114
c001ba62:	e8 40 3f ff ff       	call   c000f9a7 <malloc>
c001ba67:	83 c4 0c             	add    esp,0xc
c001ba6a:	89 c7                	mov    edi,eax
c001ba6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba71:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba74:	53                   	push   ebx
c001ba75:	57                   	push   edi
c001ba76:	e8 e3 74 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001ba7b:	83 c4 0c             	add    esp,0xc
c001ba7e:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba82:	50                   	push   eax
c001ba83:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba86:	57                   	push   edi
c001ba87:	e8 e2 77 ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	85 ff                	test   edi,edi
c001ba91:	74 14                	je     c001baa7 <sysCallSizeFromFilename(regs*)+0x86>
c001ba93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba97:	8b 17                	mov    edx,DWORD PTR [edi]
c001ba99:	83 ec 0c             	sub    esp,0xc
c001ba9c:	57                   	push   edi
c001ba9d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baa7:	85 c0                	test   eax,eax
c001baa9:	0f 95 c0             	setne  al
c001baac:	31 d2                	xor    edx,edx
c001baae:	0f b6 c0             	movzx  eax,al
c001bab1:	f7 d8                	neg    eax
c001bab3:	83 d2 00             	adc    edx,0x0
c001bab6:	83 c4 20             	add    esp,0x20
c001bab9:	f7 da                	neg    edx
c001babb:	5b                   	pop    ebx
c001babc:	5e                   	pop    esi
c001babd:	5f                   	pop    edi
c001babe:	c3                   	ret    
c001babf:	83 c4 20             	add    esp,0x20
c001bac2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bac7:	5b                   	pop    ebx
c001bac8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bacd:	5e                   	pop    esi
c001bace:	5f                   	pop    edi
c001bacf:	c3                   	ret    

c001bad0 <sysCallClose(regs*)>:
c001bad0:	53                   	push   ebx
c001bad1:	83 ec 08             	sub    esp,0x8
c001bad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001badb:	83 f8 02             	cmp    eax,0x2
c001bade:	76 41                	jbe    c001bb21 <sysCallClose(regs*)+0x51>
c001bae0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001bae6:	83 fa 01             	cmp    edx,0x1
c001bae9:	76 2d                	jbe    c001bb18 <sysCallClose(regs*)+0x48>
c001baeb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baf0:	77 2f                	ja     c001bb21 <sysCallClose(regs*)+0x51>
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	50                   	push   eax
c001baf6:	e8 dc 59 ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001bafb:	89 c3                	mov    ebx,eax
c001bafd:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb00:	e8 1b 75 ff ff       	call   c0013020 <File::close()>
c001bb05:	83 c4 10             	add    esp,0x10
c001bb08:	85 db                	test   ebx,ebx
c001bb0a:	74 0c                	je     c001bb18 <sysCallClose(regs*)+0x48>
c001bb0c:	83 ec 0c             	sub    esp,0xc
c001bb0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb11:	53                   	push   ebx
c001bb12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	31 c0                	xor    eax,eax
c001bb1a:	31 d2                	xor    edx,edx
c001bb1c:	83 c4 08             	add    esp,0x8
c001bb1f:	5b                   	pop    ebx
c001bb20:	c3                   	ret    
c001bb21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb2b:	83 c4 08             	add    esp,0x8
c001bb2e:	5b                   	pop    ebx
c001bb2f:	c3                   	ret    

c001bb30 <sysCallOpenDir(regs*)>:
c001bb30:	56                   	push   esi
c001bb31:	53                   	push   ebx
c001bb32:	53                   	push   ebx
c001bb33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb37:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb3a:	85 f6                	test   esi,esi
c001bb3c:	74 59                	je     c001bb97 <sysCallOpenDir(regs*)+0x67>
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	68 14 01 00 00       	push   0x114
c001bb46:	e8 5c 3e ff ff       	call   c000f9a7 <malloc>
c001bb4b:	83 c4 0c             	add    esp,0xc
c001bb4e:	89 c6                	mov    esi,eax
c001bb50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb5b:	56                   	push   esi
c001bb5c:	e8 a9 78 ff ff       	call   c001340a <Directory::Directory(char const*, Process*)>
c001bb61:	83 c4 10             	add    esp,0x10
c001bb64:	85 f6                	test   esi,esi
c001bb66:	74 2f                	je     c001bb97 <sysCallOpenDir(regs*)+0x67>
c001bb68:	83 ec 0c             	sub    esp,0xc
c001bb6b:	56                   	push   esi
c001bb6c:	e8 fd 78 ff ff       	call   c001346e <Directory::open()>
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	85 c0                	test   eax,eax
c001bb76:	75 1f                	jne    c001bb97 <sysCallOpenDir(regs*)+0x67>
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	56                   	push   esi
c001bb7c:	e8 61 56 ff ff       	call   c00111e2 <UnixFile::getFileDescriptor()>
c001bb81:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	89 02                	mov    DWORD PTR [edx],eax
c001bb89:	c1 f8 1f             	sar    eax,0x1f
c001bb8c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb8f:	31 c0                	xor    eax,eax
c001bb91:	59                   	pop    ecx
c001bb92:	31 d2                	xor    edx,edx
c001bb94:	5b                   	pop    ebx
c001bb95:	5e                   	pop    esi
c001bb96:	c3                   	ret    
c001bb97:	59                   	pop    ecx
c001bb98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bba2:	5b                   	pop    ebx
c001bba3:	5e                   	pop    esi
c001bba4:	c3                   	ret    

c001bba5 <sysCallCloseDir(regs*)>:
c001bba5:	53                   	push   ebx
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbb0:	8d 50 fd             	lea    edx,[eax-0x3]
c001bbb3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001bbb9:	77 2f                	ja     c001bbea <sysCallCloseDir(regs*)+0x45>
c001bbbb:	83 ec 0c             	sub    esp,0xc
c001bbbe:	50                   	push   eax
c001bbbf:	e8 13 59 ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001bbc4:	89 c3                	mov    ebx,eax
c001bbc6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbc9:	e8 fc 78 ff ff       	call   c00134ca <Directory::close()>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	85 db                	test   ebx,ebx
c001bbd3:	74 0c                	je     c001bbe1 <sysCallCloseDir(regs*)+0x3c>
c001bbd5:	83 ec 0c             	sub    esp,0xc
c001bbd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbda:	53                   	push   ebx
c001bbdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	31 c0                	xor    eax,eax
c001bbe3:	31 d2                	xor    edx,edx
c001bbe5:	83 c4 08             	add    esp,0x8
c001bbe8:	5b                   	pop    ebx
c001bbe9:	c3                   	ret    
c001bbea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbf4:	83 c4 08             	add    esp,0x8
c001bbf7:	5b                   	pop    ebx
c001bbf8:	c3                   	ret    

c001bbf9 <sysCallMakeDir(regs*)>:
c001bbf9:	56                   	push   esi
c001bbfa:	53                   	push   ebx
c001bbfb:	83 ec 10             	sub    esp,0x10
c001bbfe:	68 14 01 00 00       	push   0x114
c001bc03:	e8 9f 3d ff ff       	call   c000f9a7 <malloc>
c001bc08:	83 c4 0c             	add    esp,0xc
c001bc0b:	89 c3                	mov    ebx,eax
c001bc0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc12:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc19:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc1c:	53                   	push   ebx
c001bc1d:	e8 e8 77 ff ff       	call   c001340a <Directory::Directory(char const*, Process*)>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	85 db                	test   ebx,ebx
c001bc27:	74 32                	je     c001bc5b <sysCallMakeDir(regs*)+0x62>
c001bc29:	83 ec 0c             	sub    esp,0xc
c001bc2c:	53                   	push   ebx
c001bc2d:	e8 1c 7a ff ff       	call   c001364e <Directory::create()>
c001bc32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc35:	89 c6                	mov    esi,eax
c001bc37:	e8 8e 78 ff ff       	call   c00134ca <Directory::close()>
c001bc3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc44:	83 c4 10             	add    esp,0x10
c001bc47:	31 c0                	xor    eax,eax
c001bc49:	59                   	pop    ecx
c001bc4a:	85 f6                	test   esi,esi
c001bc4c:	5b                   	pop    ebx
c001bc4d:	0f 95 c0             	setne  al
c001bc50:	5e                   	pop    esi
c001bc51:	31 d2                	xor    edx,edx
c001bc53:	f7 d8                	neg    eax
c001bc55:	83 d2 00             	adc    edx,0x0
c001bc58:	f7 da                	neg    edx
c001bc5a:	c3                   	ret    
c001bc5b:	59                   	pop    ecx
c001bc5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc61:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc66:	5b                   	pop    ebx
c001bc67:	5e                   	pop    esi
c001bc68:	c3                   	ret    

c001bc69 <sysCallWait(regs*)>:
c001bc69:	83 ec 10             	sub    esp,0x10
c001bc6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc70:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc73:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc76:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc79:	e8 b4 24 00 00       	call   c001e132 <waitTask(int, int*, int)>
c001bc7e:	83 c4 1c             	add    esp,0x1c
c001bc81:	99                   	cdq    
c001bc82:	c3                   	ret    

c001bc83 <sysCallNotImpl(regs*)>:
c001bc83:	83 ec 18             	sub    esp,0x18
c001bc86:	68 79 c5 02 c0       	push   0xc002c579
c001bc8b:	e8 0d e7 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001bc90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc95:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc9a:	83 c4 1c             	add    esp,0x1c
c001bc9d:	c3                   	ret    

c001bc9e <sysPanic(regs*)>:
c001bc9e:	83 ec 18             	sub    esp,0x18
c001bca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bca5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bca8:	e8 f0 e6 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001bcad:	b8 01 00 00 00       	mov    eax,0x1
c001bcb2:	31 d2                	xor    edx,edx
c001bcb4:	83 c4 1c             	add    esp,0x1c
c001bcb7:	c3                   	ret    

c001bcb8 <sysCallRmdir(regs*)>:
c001bcb8:	56                   	push   esi
c001bcb9:	53                   	push   ebx
c001bcba:	83 ec 20             	sub    esp,0x20
c001bcbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcc1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcc4:	68 14 01 00 00       	push   0x114
c001bcc9:	e8 d9 3c ff ff       	call   c000f9a7 <malloc>
c001bcce:	83 c4 0c             	add    esp,0xc
c001bcd1:	89 c3                	mov    ebx,eax
c001bcd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcdb:	56                   	push   esi
c001bcdc:	53                   	push   ebx
c001bcdd:	e8 7c 72 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001bce2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bce5:	e8 50 74 ff ff       	call   c001313a <File::unlink()>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	85 db                	test   ebx,ebx
c001bcef:	74 14                	je     c001bd05 <sysCallRmdir(regs*)+0x4d>
c001bcf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcf5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcf7:	83 ec 0c             	sub    esp,0xc
c001bcfa:	53                   	push   ebx
c001bcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd05:	85 c0                	test   eax,eax
c001bd07:	0f 95 c0             	setne  al
c001bd0a:	31 d2                	xor    edx,edx
c001bd0c:	0f b6 c0             	movzx  eax,al
c001bd0f:	f7 d8                	neg    eax
c001bd11:	83 d2 00             	adc    edx,0x0
c001bd14:	83 c4 14             	add    esp,0x14
c001bd17:	f7 da                	neg    edx
c001bd19:	5b                   	pop    ebx
c001bd1a:	5e                   	pop    esi
c001bd1b:	c3                   	ret    

c001bd1c <sysCallUnlink(regs*)>:
c001bd1c:	56                   	push   esi
c001bd1d:	53                   	push   ebx
c001bd1e:	83 ec 20             	sub    esp,0x20
c001bd21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd25:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd28:	68 14 01 00 00       	push   0x114
c001bd2d:	e8 75 3c ff ff       	call   c000f9a7 <malloc>
c001bd32:	83 c4 0c             	add    esp,0xc
c001bd35:	89 c3                	mov    ebx,eax
c001bd37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd3c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd3f:	56                   	push   esi
c001bd40:	53                   	push   ebx
c001bd41:	e8 18 72 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001bd46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd49:	e8 ec 73 ff ff       	call   c001313a <File::unlink()>
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	85 db                	test   ebx,ebx
c001bd53:	74 14                	je     c001bd69 <sysCallUnlink(regs*)+0x4d>
c001bd55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd59:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd5b:	83 ec 0c             	sub    esp,0xc
c001bd5e:	53                   	push   ebx
c001bd5f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd69:	85 c0                	test   eax,eax
c001bd6b:	0f 95 c0             	setne  al
c001bd6e:	31 d2                	xor    edx,edx
c001bd70:	0f b6 c0             	movzx  eax,al
c001bd73:	f7 d8                	neg    eax
c001bd75:	83 d2 00             	adc    edx,0x0
c001bd78:	83 c4 14             	add    esp,0x14
c001bd7b:	f7 da                	neg    edx
c001bd7d:	5b                   	pop    ebx
c001bd7e:	5e                   	pop    esi
c001bd7f:	c3                   	ret    

c001bd80 <sysCallGetArgv(regs*)>:
c001bd80:	83 ec 0c             	sub    esp,0xc
c001bd83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd87:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd8a:	85 c0                	test   eax,eax
c001bd8c:	78 2b                	js     c001bdb9 <sysCallGetArgv(regs*)+0x39>
c001bd8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd94:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd97:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bd9d:	7d 1a                	jge    c001bdb9 <sysCallGetArgv(regs*)+0x39>
c001bd9f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bda6:	85 c0                	test   eax,eax
c001bda8:	74 17                	je     c001bdc1 <sysCallGetArgv(regs*)+0x41>
c001bdaa:	83 ec 08             	sub    esp,0x8
c001bdad:	50                   	push   eax
c001bdae:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bdb1:	e8 56 4a fe ff       	call   c000080c <strcpy>
c001bdb6:	83 c4 10             	add    esp,0x10
c001bdb9:	31 c0                	xor    eax,eax
c001bdbb:	31 d2                	xor    edx,edx
c001bdbd:	83 c4 0c             	add    esp,0xc
c001bdc0:	c3                   	ret    
c001bdc1:	b8 01 00 00 00       	mov    eax,0x1
c001bdc6:	31 d2                	xor    edx,edx
c001bdc8:	83 c4 0c             	add    esp,0xc
c001bdcb:	c3                   	ret    

c001bdcc <sysCallTTYName(regs*)>:
c001bdcc:	56                   	push   esi
c001bdcd:	53                   	push   ebx
c001bdce:	53                   	push   ebx
c001bdcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdd3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bdd6:	85 c0                	test   eax,eax
c001bdd8:	74 5f                	je     c001be39 <sysCallTTYName(regs*)+0x6d>
c001bdda:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bddd:	83 f8 02             	cmp    eax,0x2
c001bde0:	77 3e                	ja     c001be20 <sysCallTTYName(regs*)+0x54>
c001bde2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdea:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bdf0:	85 db                	test   ebx,ebx
c001bdf2:	74 45                	je     c001be39 <sysCallTTYName(regs*)+0x6d>
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdf9:	53                   	push   ebx
c001bdfa:	ff 10                	call   DWORD PTR [eax]
c001bdfc:	83 c4 10             	add    esp,0x10
c001bdff:	84 c0                	test   al,al
c001be01:	74 41                	je     c001be44 <sysCallTTYName(regs*)+0x78>
c001be03:	83 ec 08             	sub    esp,0x8
c001be06:	81 c3 82 00 00 00    	add    ebx,0x82
c001be0c:	53                   	push   ebx
c001be0d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be10:	e8 f7 49 fe ff       	call   c000080c <strcpy>
c001be15:	83 c4 10             	add    esp,0x10
c001be18:	31 c0                	xor    eax,eax
c001be1a:	59                   	pop    ecx
c001be1b:	31 d2                	xor    edx,edx
c001be1d:	5b                   	pop    ebx
c001be1e:	5e                   	pop    esi
c001be1f:	c3                   	ret    
c001be20:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be25:	74 bb                	je     c001bde2 <sysCallTTYName(regs*)+0x16>
c001be27:	83 ec 0c             	sub    esp,0xc
c001be2a:	50                   	push   eax
c001be2b:	e8 a7 56 ff ff       	call   c00114d7 <getFromFileDescriptor(int)>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	89 c3                	mov    ebx,eax
c001be35:	85 db                	test   ebx,ebx
c001be37:	75 bb                	jne    c001bdf4 <sysCallTTYName(regs*)+0x28>
c001be39:	59                   	pop    ecx
c001be3a:	b8 01 00 00 00       	mov    eax,0x1
c001be3f:	31 d2                	xor    edx,edx
c001be41:	5b                   	pop    ebx
c001be42:	5e                   	pop    esi
c001be43:	c3                   	ret    
c001be44:	59                   	pop    ecx
c001be45:	b8 02 00 00 00       	mov    eax,0x2
c001be4a:	31 d2                	xor    edx,edx
c001be4c:	5b                   	pop    ebx
c001be4d:	5e                   	pop    esi
c001be4e:	c3                   	ret    

c001be4f <sysCallUSleep(regs*)>:
c001be4f:	83 ec 14             	sub    esp,0x14
c001be52:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be5b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be62:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be65:	01 ca                	add    edx,ecx
c001be67:	52                   	push   edx
c001be68:	50                   	push   eax
c001be69:	e8 9b 23 00 00       	call   c001e209 <nanoSleep(unsigned long long)>
c001be6e:	31 c0                	xor    eax,eax
c001be70:	31 d2                	xor    edx,edx
c001be72:	83 c4 1c             	add    esp,0x1c
c001be75:	c3                   	ret    

c001be76 <sysCallSpawn(regs*)>:
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	50                   	push   eax
c001be79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be7d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be80:	85 c0                	test   eax,eax
c001be82:	75 08                	jne    c001be8c <sysCallSpawn(regs*)+0x16>
c001be84:	59                   	pop    ecx
c001be85:	31 c0                	xor    eax,eax
c001be87:	31 d2                	xor    edx,edx
c001be89:	5b                   	pop    ebx
c001be8a:	5e                   	pop    esi
c001be8b:	c3                   	ret    
c001be8c:	83 ec 0c             	sub    esp,0xc
c001be8f:	68 3f 07 00 00       	push   0x73f
c001be94:	e8 0e 3b ff ff       	call   c000f9a7 <malloc>
c001be99:	83 c4 10             	add    esp,0x10
c001be9c:	89 c6                	mov    esi,eax
c001be9e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bea1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bea4:	85 c0                	test   eax,eax
c001bea6:	75 32                	jne    c001beda <sysCallSpawn(regs*)+0x64>
c001bea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bead:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beb0:	52                   	push   edx
c001beb1:	50                   	push   eax
c001beb2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001beb5:	56                   	push   esi
c001beb6:	e8 73 1a 00 00       	call   c001d92e <Process::Process(char const*, Process*, char**)>
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bec5:	75 bd                	jne    c001be84 <sysCallSpawn(regs*)+0xe>
c001bec7:	83 ec 0c             	sub    esp,0xc
c001beca:	56                   	push   esi
c001becb:	e8 40 1f 00 00       	call   c001de10 <Process::createUserThread()>
c001bed0:	8b 06                	mov    eax,DWORD PTR [esi]
c001bed2:	83 c4 10             	add    esp,0x10
c001bed5:	99                   	cdq    
c001bed6:	59                   	pop    ecx
c001bed7:	5b                   	pop    ebx
c001bed8:	5e                   	pop    esi
c001bed9:	c3                   	ret    
c001beda:	31 c0                	xor    eax,eax
c001bedc:	eb d2                	jmp    c001beb0 <sysCallSpawn(regs*)+0x3a>

c001bede <sysCallGetEnv(regs*)>:
c001bede:	57                   	push   edi
c001bedf:	56                   	push   esi
c001bee0:	53                   	push   ebx
c001bee1:	83 ec 1c             	sub    esp,0x1c
c001bee4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beed:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bef0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bef3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bef6:	e8 ee e3 ff ff       	call   c001a2e9 <Krnl::getProcessTotalEnvCount(Process*)>
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	39 c7                	cmp    edi,eax
c001bf00:	7c 14                	jl     c001bf16 <sysCallGetEnv(regs*)+0x38>
c001bf02:	85 f6                	test   esi,esi
c001bf04:	75 0b                	jne    c001bf11 <sysCallGetEnv(regs*)+0x33>
c001bf06:	83 c4 10             	add    esp,0x10
c001bf09:	31 c0                	xor    eax,eax
c001bf0b:	5b                   	pop    ebx
c001bf0c:	31 d2                	xor    edx,edx
c001bf0e:	5e                   	pop    esi
c001bf0f:	5f                   	pop    edi
c001bf10:	c3                   	ret    
c001bf11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf14:	eb f0                	jmp    c001bf06 <sysCallGetEnv(regs*)+0x28>
c001bf16:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf1a:	52                   	push   edx
c001bf1b:	57                   	push   edi
c001bf1c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf22:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf25:	50                   	push   eax
c001bf26:	e8 de e3 ff ff       	call   c001a309 <Krnl::getProcessEnvPair(Process*, int)>
c001bf2b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf32:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf36:	83 c4 0c             	add    esp,0xc
c001bf39:	85 c9                	test   ecx,ecx
c001bf3b:	75 23                	jne    c001bf60 <sysCallGetEnv(regs*)+0x82>
c001bf3d:	83 ec 0c             	sub    esp,0xc
c001bf40:	50                   	push   eax
c001bf41:	e8 26 48 fe ff       	call   c000076c <strlen>
c001bf46:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf49:	89 c3                	mov    ebx,eax
c001bf4b:	e8 1c 48 fe ff       	call   c000076c <strlen>
c001bf50:	83 c4 10             	add    esp,0x10
c001bf53:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf57:	83 c4 10             	add    esp,0x10
c001bf5a:	31 d2                	xor    edx,edx
c001bf5c:	5b                   	pop    ebx
c001bf5d:	5e                   	pop    esi
c001bf5e:	5f                   	pop    edi
c001bf5f:	c3                   	ret    
c001bf60:	83 ec 08             	sub    esp,0x8
c001bf63:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf66:	50                   	push   eax
c001bf67:	56                   	push   esi
c001bf68:	e8 9f 48 fe ff       	call   c000080c <strcpy>
c001bf6d:	58                   	pop    eax
c001bf6e:	5a                   	pop    edx
c001bf6f:	68 93 c5 02 c0       	push   0xc002c593
c001bf74:	56                   	push   esi
c001bf75:	e8 d2 49 fe ff       	call   c000094c <strcat>
c001bf7a:	59                   	pop    ecx
c001bf7b:	5b                   	pop    ebx
c001bf7c:	57                   	push   edi
c001bf7d:	56                   	push   esi
c001bf7e:	e8 c9 49 fe ff       	call   c000094c <strcat>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	e9 7b ff ff ff       	jmp    c001bf06 <sysCallGetEnv(regs*)+0x28>

c001bf8b <sysAppSettings(regs*)>:
c001bf8b:	57                   	push   edi
c001bf8c:	56                   	push   esi
c001bf8d:	56                   	push   esi
c001bf8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf92:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf95:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bf9b:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfa0:	66 3d c0 09          	cmp    ax,0x9c0
c001bfa4:	75 2e                	jne    c001bfd4 <sysAppSettings(regs*)+0x49>
c001bfa6:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bfac:	83 e0 1f             	and    eax,0x1f
c001bfaf:	3c 01                	cmp    al,0x1
c001bfb1:	74 2c                	je     c001bfdf <sysAppSettings(regs*)+0x54>
c001bfb3:	3c 07                	cmp    al,0x7
c001bfb5:	0f 84 b3 00 00 00    	je     c001c06e <sysAppSettings(regs*)+0xe3>
c001bfbb:	84 c0                	test   al,al
c001bfbd:	0f 84 d2 00 00 00    	je     c001c095 <sysAppSettings(regs*)+0x10a>
c001bfc3:	3c 08                	cmp    al,0x8
c001bfc5:	74 63                	je     c001c02a <sysAppSettings(regs*)+0x9f>
c001bfc7:	59                   	pop    ecx
c001bfc8:	0f b6 c0             	movzx  eax,al
c001bfcb:	5e                   	pop    esi
c001bfcc:	05 e8 03 00 00       	add    eax,0x3e8
c001bfd1:	5f                   	pop    edi
c001bfd2:	99                   	cdq    
c001bfd3:	c3                   	ret    
c001bfd4:	b8 01 00 00 00       	mov    eax,0x1
c001bfd9:	59                   	pop    ecx
c001bfda:	31 d2                	xor    edx,edx
c001bfdc:	5e                   	pop    esi
c001bfdd:	5f                   	pop    edi
c001bfde:	c3                   	ret    
c001bfdf:	50                   	push   eax
c001bfe0:	68 00 01 00 00       	push   0x100
c001bfe5:	6a 00                	push   0x0
c001bfe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfef:	83 c0 0c             	add    eax,0xc
c001bff2:	50                   	push   eax
c001bff3:	e8 58 47 fe ff       	call   c0000750 <memset>
c001bff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bffd:	b9 ff 00 00 00       	mov    ecx,0xff
c001c002:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c005:	83 c7 0c             	add    edi,0xc
c001c008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c00a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c00f:	5a                   	pop    edx
c001c010:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c013:	59                   	pop    ecx
c001c014:	8d 50 0c             	lea    edx,[eax+0xc]
c001c017:	52                   	push   edx
c001c018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c01e:	e8 dd 45 ff ff       	call   c0010600 <VgaText::setTitle(char*)>
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	31 c0                	xor    eax,eax
c001c028:	eb af                	jmp    c001bfd9 <sysAppSettings(regs*)+0x4e>
c001c02a:	83 ec 08             	sub    esp,0x8
c001c02d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c033:	83 e0 0f             	and    eax,0xf
c001c036:	50                   	push   eax
c001c037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c03f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c045:	e8 a6 45 ff ff       	call   c00105f0 <VgaText::setTitleColour(VgaColour)>
c001c04a:	5f                   	pop    edi
c001c04b:	58                   	pop    eax
c001c04c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c052:	c1 e8 04             	shr    eax,0x4
c001c055:	83 e0 0f             	and    eax,0xf
c001c058:	50                   	push   eax
c001c059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c061:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c067:	e8 74 45 ff ff       	call   c00105e0 <VgaText::setTitleTextColour(VgaColour)>
c001c06c:	eb b5                	jmp    c001c023 <sysAppSettings(regs*)+0x98>
c001c06e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c073:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c076:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c07c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c082:	c0 e8 06             	shr    al,0x6
c001c085:	83 e0 01             	and    eax,0x1
c001c088:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c08e:	31 c0                	xor    eax,eax
c001c090:	e9 44 ff ff ff       	jmp    c001bfd9 <sysAppSettings(regs*)+0x4e>
c001c095:	b8 02 00 00 00       	mov    eax,0x2
c001c09a:	e9 3a ff ff ff       	jmp    c001bfd9 <sysAppSettings(regs*)+0x4e>

c001c09f <sysSetFatAttrib(regs*)>:
c001c09f:	57                   	push   edi
c001c0a0:	56                   	push   esi
c001c0a1:	53                   	push   ebx
c001c0a2:	83 ec 1c             	sub    esp,0x1c
c001c0a5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0a9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0ac:	68 14 01 00 00       	push   0x114
c001c0b1:	e8 f1 38 ff ff       	call   c000f9a7 <malloc>
c001c0b6:	83 c4 0c             	add    esp,0xc
c001c0b9:	89 c3                	mov    ebx,eax
c001c0bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0c3:	57                   	push   edi
c001c0c4:	53                   	push   ebx
c001c0c5:	e8 94 6e ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001c0ca:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c0cd:	83 c4 0c             	add    esp,0xc
c001c0d0:	0f b6 d4             	movzx  edx,ah
c001c0d3:	0f b6 c0             	movzx  eax,al
c001c0d6:	52                   	push   edx
c001c0d7:	50                   	push   eax
c001c0d8:	53                   	push   ebx
c001c0d9:	e8 f6 70 ff ff       	call   c00131d4 <File::chfatattr(unsigned char, unsigned char)>
c001c0de:	83 c4 10             	add    esp,0x10
c001c0e1:	85 db                	test   ebx,ebx
c001c0e3:	74 14                	je     c001c0f9 <sysSetFatAttrib(regs*)+0x5a>
c001c0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c0eb:	83 ec 0c             	sub    esp,0xc
c001c0ee:	53                   	push   ebx
c001c0ef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0f2:	83 c4 10             	add    esp,0x10
c001c0f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0f9:	85 c0                	test   eax,eax
c001c0fb:	0f 95 c0             	setne  al
c001c0fe:	31 d2                	xor    edx,edx
c001c100:	0f b6 c0             	movzx  eax,al
c001c103:	f7 d8                	neg    eax
c001c105:	83 d2 00             	adc    edx,0x0
c001c108:	83 c4 10             	add    esp,0x10
c001c10b:	f7 da                	neg    edx
c001c10d:	5b                   	pop    ebx
c001c10e:	5e                   	pop    esi
c001c10f:	5f                   	pop    edi
c001c110:	c3                   	ret    

c001c111 <sysPipe(regs*)>:
c001c111:	57                   	push   edi
c001c112:	56                   	push   esi
c001c113:	53                   	push   ebx
c001c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c118:	83 ec 0c             	sub    esp,0xc
c001c11b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c11e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c121:	6a 20                	push   0x20
c001c123:	e8 7f 38 ff ff       	call   c000f9a7 <malloc>
c001c128:	89 c3                	mov    ebx,eax
c001c12a:	58                   	pop    eax
c001c12b:	5a                   	pop    edx
c001c12c:	68 00 50 00 00       	push   0x5000
c001c131:	53                   	push   ebx
c001c132:	e8 41 42 ff ff       	call   c0010378 <Pipe::Pipe(int)>
c001c137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c13a:	e8 a3 50 ff ff       	call   c00111e2 <UnixFile::getFileDescriptor()>
c001c13f:	89 07                	mov    DWORD PTR [edi],eax
c001c141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c144:	e8 99 50 ff ff       	call   c00111e2 <UnixFile::getFileDescriptor()>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	89 06                	mov    DWORD PTR [esi],eax
c001c14e:	31 d2                	xor    edx,edx
c001c150:	5b                   	pop    ebx
c001c151:	31 c0                	xor    eax,eax
c001c153:	5e                   	pop    esi
c001c154:	5f                   	pop    edi
c001c155:	c3                   	ret    

c001c156 <sysGetUnixTime(regs*)>:
c001c156:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001c15b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c161:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c165:	e9 e6 77 ff ff       	jmp    c0013950 <Clock::timeInSecondsLocal()>

c001c16a <string_ends_with(char const*, char const*)>:
c001c16a:	57                   	push   edi
c001c16b:	56                   	push   esi
c001c16c:	53                   	push   ebx
c001c16d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c171:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c175:	83 ec 0c             	sub    esp,0xc
c001c178:	53                   	push   ebx
c001c179:	e8 ee 45 fe ff       	call   c000076c <strlen>
c001c17e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c181:	89 c6                	mov    esi,eax
c001c183:	e8 e4 45 fe ff       	call   c000076c <strlen>
c001c188:	83 c4 10             	add    esp,0x10
c001c18b:	39 c6                	cmp    esi,eax
c001c18d:	7d 06                	jge    c001c195 <string_ends_with(char const*, char const*)+0x2b>
c001c18f:	5b                   	pop    ebx
c001c190:	31 c0                	xor    eax,eax
c001c192:	5e                   	pop    esi
c001c193:	5f                   	pop    edi
c001c194:	c3                   	ret    
c001c195:	83 ec 08             	sub    esp,0x8
c001c198:	29 c6                	sub    esi,eax
c001c19a:	57                   	push   edi
c001c19b:	01 f3                	add    ebx,esi
c001c19d:	53                   	push   ebx
c001c19e:	e8 f5 46 fe ff       	call   c0000898 <strcmp>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	85 c0                	test   eax,eax
c001c1a8:	5b                   	pop    ebx
c001c1a9:	0f 94 c0             	sete   al
c001c1ac:	5e                   	pop    esi
c001c1ad:	0f b6 c0             	movzx  eax,al
c001c1b0:	5f                   	pop    edi
c001c1b1:	c3                   	ret    

c001c1b2 <sysCallOpen(regs*)>:
c001c1b2:	56                   	push   esi
c001c1b3:	53                   	push   ebx
c001c1b4:	81 ec 04 01 00 00    	sub    esp,0x104
c001c1ba:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c1c1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c1c4:	85 c9                	test   ecx,ecx
c001c1c6:	0f 84 ad 01 00 00    	je     c001c379 <sysCallOpen(regs*)+0x1c7>
c001c1cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c1cf:	85 c0                	test   eax,eax
c001c1d1:	0f 84 a2 01 00 00    	je     c001c379 <sysCallOpen(regs*)+0x1c7>
c001c1d7:	52                   	push   edx
c001c1d8:	68 95 c5 02 c0       	push   0xc002c595
c001c1dd:	50                   	push   eax
c001c1de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c1e2:	56                   	push   esi
c001c1e3:	e8 cc 6b ff ff       	call   c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c1e8:	89 34 24             	mov    DWORD PTR [esp],esi
c001c1eb:	e8 7c 45 fe ff       	call   c000076c <strlen>
c001c1f0:	83 c4 10             	add    esp,0x10
c001c1f3:	48                   	dec    eax
c001c1f4:	74 1d                	je     c001c213 <sysCallOpen(regs*)+0x61>
c001c1f6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c1f9:	eb 0f                	jmp    c001c20a <sysCallOpen(regs*)+0x58>
c001c1fb:	80 fa 3a             	cmp    dl,0x3a
c001c1fe:	74 0f                	je     c001c20f <sysCallOpen(regs*)+0x5d>
c001c200:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c204:	48                   	dec    eax
c001c205:	74 0c                	je     c001c213 <sysCallOpen(regs*)+0x61>
c001c207:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c20a:	80 fa 2e             	cmp    dl,0x2e
c001c20d:	75 ec                	jne    c001c1fb <sysCallOpen(regs*)+0x49>
c001c20f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c213:	83 ec 08             	sub    esp,0x8
c001c216:	68 99 c5 02 c0       	push   0xc002c599
c001c21b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c21e:	e8 47 ff ff ff       	call   c001c16a <string_ends_with(char const*, char const*)>
c001c223:	83 c4 10             	add    esp,0x10
c001c226:	85 c0                	test   eax,eax
c001c228:	74 1d                	je     c001c247 <sysCallOpen(regs*)+0x95>
c001c22a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c22d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c233:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c23a:	81 c4 04 01 00 00    	add    esp,0x104
c001c240:	31 c0                	xor    eax,eax
c001c242:	31 d2                	xor    edx,edx
c001c244:	5b                   	pop    ebx
c001c245:	5e                   	pop    esi
c001c246:	c3                   	ret    
c001c247:	83 ec 08             	sub    esp,0x8
c001c24a:	68 9e c5 02 c0       	push   0xc002c59e
c001c24f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c252:	e8 13 ff ff ff       	call   c001c16a <string_ends_with(char const*, char const*)>
c001c257:	83 c4 10             	add    esp,0x10
c001c25a:	85 c0                	test   eax,eax
c001c25c:	75 cc                	jne    c001c22a <sysCallOpen(regs*)+0x78>
c001c25e:	83 ec 08             	sub    esp,0x8
c001c261:	68 9a c5 02 c0       	push   0xc002c59a
c001c266:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c269:	e8 2a 46 fe ff       	call   c0000898 <strcmp>
c001c26e:	83 c4 10             	add    esp,0x10
c001c271:	85 c0                	test   eax,eax
c001c273:	74 b5                	je     c001c22a <sysCallOpen(regs*)+0x78>
c001c275:	83 ec 08             	sub    esp,0x8
c001c278:	68 99 c5 02 c0       	push   0xc002c599
c001c27d:	56                   	push   esi
c001c27e:	e8 e7 fe ff ff       	call   c001c16a <string_ends_with(char const*, char const*)>
c001c283:	83 c4 10             	add    esp,0x10
c001c286:	85 c0                	test   eax,eax
c001c288:	75 a0                	jne    c001c22a <sysCallOpen(regs*)+0x78>
c001c28a:	83 ec 08             	sub    esp,0x8
c001c28d:	68 a3 c5 02 c0       	push   0xc002c5a3
c001c292:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c295:	e8 d0 fe ff ff       	call   c001c16a <string_ends_with(char const*, char const*)>
c001c29a:	83 c4 10             	add    esp,0x10
c001c29d:	85 c0                	test   eax,eax
c001c29f:	0f 85 e7 00 00 00    	jne    c001c38c <sysCallOpen(regs*)+0x1da>
c001c2a5:	83 ec 08             	sub    esp,0x8
c001c2a8:	68 a8 c5 02 c0       	push   0xc002c5a8
c001c2ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2b0:	e8 b5 fe ff ff       	call   c001c16a <string_ends_with(char const*, char const*)>
c001c2b5:	83 c4 10             	add    esp,0x10
c001c2b8:	85 c0                	test   eax,eax
c001c2ba:	0f 85 cc 00 00 00    	jne    c001c38c <sysCallOpen(regs*)+0x1da>
c001c2c0:	83 ec 08             	sub    esp,0x8
c001c2c3:	68 a4 c5 02 c0       	push   0xc002c5a4
c001c2c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2cb:	e8 c8 45 fe ff       	call   c0000898 <strcmp>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	85 c0                	test   eax,eax
c001c2d5:	0f 84 b1 00 00 00    	je     c001c38c <sysCallOpen(regs*)+0x1da>
c001c2db:	83 ec 08             	sub    esp,0x8
c001c2de:	68 a3 c5 02 c0       	push   0xc002c5a3
c001c2e3:	56                   	push   esi
c001c2e4:	e8 81 fe ff ff       	call   c001c16a <string_ends_with(char const*, char const*)>
c001c2e9:	83 c4 10             	add    esp,0x10
c001c2ec:	85 c0                	test   eax,eax
c001c2ee:	0f 85 98 00 00 00    	jne    c001c38c <sysCallOpen(regs*)+0x1da>
c001c2f4:	83 ec 0c             	sub    esp,0xc
c001c2f7:	68 14 01 00 00       	push   0x114
c001c2fc:	e8 a6 36 ff ff       	call   c000f9a7 <malloc>
c001c301:	83 c4 0c             	add    esp,0xc
c001c304:	89 c6                	mov    esi,eax
c001c306:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c30b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c30e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c311:	56                   	push   esi
c001c312:	e8 47 6c ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001c317:	83 c4 10             	add    esp,0x10
c001c31a:	85 f6                	test   esi,esi
c001c31c:	74 5b                	je     c001c379 <sysCallOpen(regs*)+0x1c7>
c001c31e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c321:	0f b6 c2             	movzx  eax,dl
c001c324:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c327:	89 d0                	mov    eax,edx
c001c329:	83 e0 01             	and    eax,0x1
c001c32c:	f6 c2 02             	test   dl,0x2
c001c32f:	74 03                	je     c001c334 <sysCallOpen(regs*)+0x182>
c001c331:	83 c8 02             	or     eax,0x2
c001c334:	f6 c2 04             	test   dl,0x4
c001c337:	74 03                	je     c001c33c <sysCallOpen(regs*)+0x18a>
c001c339:	83 c8 04             	or     eax,0x4
c001c33c:	f6 c2 08             	test   dl,0x8
c001c33f:	74 03                	je     c001c344 <sysCallOpen(regs*)+0x192>
c001c341:	83 c8 0a             	or     eax,0xa
c001c344:	83 e2 10             	and    edx,0x10
c001c347:	74 03                	je     c001c34c <sysCallOpen(regs*)+0x19a>
c001c349:	83 c8 12             	or     eax,0x12
c001c34c:	83 ec 08             	sub    esp,0x8
c001c34f:	50                   	push   eax
c001c350:	56                   	push   esi
c001c351:	e8 6c 6c ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c001c356:	83 c4 10             	add    esp,0x10
c001c359:	85 c0                	test   eax,eax
c001c35b:	75 1c                	jne    c001c379 <sysCallOpen(regs*)+0x1c7>
c001c35d:	83 ec 0c             	sub    esp,0xc
c001c360:	56                   	push   esi
c001c361:	e8 7c 4e ff ff       	call   c00111e2 <UnixFile::getFileDescriptor()>
c001c366:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c369:	83 c4 10             	add    esp,0x10
c001c36c:	89 02                	mov    DWORD PTR [edx],eax
c001c36e:	c1 f8 1f             	sar    eax,0x1f
c001c371:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c374:	e9 c1 fe ff ff       	jmp    c001c23a <sysCallOpen(regs*)+0x88>
c001c379:	81 c4 04 01 00 00    	add    esp,0x104
c001c37f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c384:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c389:	5b                   	pop    ebx
c001c38a:	5e                   	pop    esi
c001c38b:	c3                   	ret    
c001c38c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c38f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c395:	e9 99 fe ff ff       	jmp    c001c233 <sysCallOpen(regs*)+0x81>

c001c39a <Sys::loadSyscalls()>:
c001c39a:	c7 05 a0 f1 02 c0 07 b6 01 c0 	mov    DWORD PTR ds:0xc002f1a0,0xc001b607
c001c3a4:	c7 05 a4 f1 02 c0 fc b1 01 c0 	mov    DWORD PTR ds:0xc002f1a4,0xc001b1fc
c001c3ae:	c7 05 a8 f1 02 c0 ed b3 01 c0 	mov    DWORD PTR ds:0xc002f1a8,0xc001b3ed
c001c3b8:	c7 05 ac f1 02 c0 3d b5 01 c0 	mov    DWORD PTR ds:0xc002f1ac,0xc001b53d
c001c3c2:	c7 05 b0 f1 02 c0 85 b3 01 c0 	mov    DWORD PTR ds:0xc002f1b0,0xc001b385
c001c3cc:	c7 05 b4 f1 02 c0 33 b2 01 c0 	mov    DWORD PTR ds:0xc002f1b4,0xc001b233
c001c3d6:	c7 05 b8 f1 02 c0 14 b2 01 c0 	mov    DWORD PTR ds:0xc002f1b8,0xc001b214
c001c3e0:	c7 05 bc f1 02 c0 42 b4 01 c0 	mov    DWORD PTR ds:0xc002f1bc,0xc001b442
c001c3ea:	c7 05 c4 f1 02 c0 d0 ba 01 c0 	mov    DWORD PTR ds:0xc002f1c4,0xc001bad0
c001c3f4:	c7 05 c0 f1 02 c0 b2 c1 01 c0 	mov    DWORD PTR ds:0xc002f1c0,0xc001c1b2
c001c3fe:	c7 05 c8 f1 02 c0 30 bb 01 c0 	mov    DWORD PTR ds:0xc002f1c8,0xc001bb30
c001c408:	c7 05 cc f1 02 c0 13 b8 01 c0 	mov    DWORD PTR ds:0xc002f1cc,0xc001b813
c001c412:	c7 05 d0 f1 02 c0 4d b6 01 c0 	mov    DWORD PTR ds:0xc002f1d0,0xc001b64d
c001c41c:	c7 05 d4 f1 02 c0 52 b6 01 c0 	mov    DWORD PTR ds:0xc002f1d4,0xc001b652
c001c426:	c7 05 d8 f1 02 c0 f9 bb 01 c0 	mov    DWORD PTR ds:0xc002f1d8,0xc001bbf9
c001c430:	c7 05 dc f1 02 c0 a5 bb 01 c0 	mov    DWORD PTR ds:0xc002f1dc,0xc001bba5
c001c43a:	c7 05 e0 f1 02 c0 ec b8 01 c0 	mov    DWORD PTR ds:0xc002f1e0,0xc001b8ec
c001c444:	c7 05 e4 f1 02 c0 43 b9 01 c0 	mov    DWORD PTR ds:0xc002f1e4,0xc001b943
c001c44e:	c7 05 e8 f1 02 c0 af b9 01 c0 	mov    DWORD PTR ds:0xc002f1e8,0xc001b9af
c001c458:	c7 05 ec f1 02 c0 57 b6 01 c0 	mov    DWORD PTR ds:0xc002f1ec,0xc001b657
c001c462:	c7 05 f0 f1 02 c0 69 bc 01 c0 	mov    DWORD PTR ds:0xc002f1f0,0xc001bc69
c001c46c:	c7 05 f4 f1 02 c0 83 bc 01 c0 	mov    DWORD PTR ds:0xc002f1f4,0xc001bc83
c001c476:	c7 05 f8 f1 02 c0 83 bc 01 c0 	mov    DWORD PTR ds:0xc002f1f8,0xc001bc83
c001c480:	c7 05 fc f1 02 c0 b8 bc 01 c0 	mov    DWORD PTR ds:0xc002f1fc,0xc001bcb8
c001c48a:	c7 05 00 f2 02 c0 1c bd 01 c0 	mov    DWORD PTR ds:0xc002f200,0xc001bd1c
c001c494:	c7 05 04 f2 02 c0 61 b6 01 c0 	mov    DWORD PTR ds:0xc002f204,0xc001b661
c001c49e:	c7 05 08 f2 02 c0 80 bd 01 c0 	mov    DWORD PTR ds:0xc002f208,0xc001bd80
c001c4a8:	c7 05 0c f2 02 c0 d0 b7 01 c0 	mov    DWORD PTR ds:0xc002f20c,0xc001b7d0
c001c4b2:	c7 05 10 f2 02 c0 cc bd 01 c0 	mov    DWORD PTR ds:0xc002f210,0xc001bdcc
c001c4bc:	c7 05 14 f2 02 c0 92 b8 01 c0 	mov    DWORD PTR ds:0xc002f214,0xc001b892
c001c4c6:	c7 05 18 f2 02 c0 4f be 01 c0 	mov    DWORD PTR ds:0xc002f218,0xc001be4f
c001c4d0:	c7 05 1c f2 02 c0 21 ba 01 c0 	mov    DWORD PTR ds:0xc002f21c,0xc001ba21
c001c4da:	c7 05 20 f2 02 c0 76 be 01 c0 	mov    DWORD PTR ds:0xc002f220,0xc001be76
c001c4e4:	c7 05 24 f2 02 c0 de be 01 c0 	mov    DWORD PTR ds:0xc002f224,0xc001bede
c001c4ee:	c7 05 28 f2 02 c0 8b bf 01 c0 	mov    DWORD PTR ds:0xc002f228,0xc001bf8b
c001c4f8:	c7 05 2c f2 02 c0 71 b6 01 c0 	mov    DWORD PTR ds:0xc002f22c,0xc001b671
c001c502:	c7 05 30 f2 02 c0 db b6 01 c0 	mov    DWORD PTR ds:0xc002f230,0xc001b6db
c001c50c:	c7 05 34 f2 02 c0 21 b7 01 c0 	mov    DWORD PTR ds:0xc002f234,0xc001b721
c001c516:	c7 05 38 f2 02 c0 9f c0 01 c0 	mov    DWORD PTR ds:0xc002f238,0xc001c09f
c001c520:	c7 05 3c f2 02 c0 9e bc 01 c0 	mov    DWORD PTR ds:0xc002f23c,0xc001bc9e
c001c52a:	c7 05 40 f2 02 c0 72 b7 01 c0 	mov    DWORD PTR ds:0xc002f240,0xc001b772
c001c534:	c7 05 44 f2 02 c0 11 c1 01 c0 	mov    DWORD PTR ds:0xc002f244,0xc001c111
c001c53e:	c7 05 48 f2 02 c0 56 c1 01 c0 	mov    DWORD PTR ds:0xc002f248,0xc001c156
c001c548:	c7 05 4c f2 02 c0 dd b2 01 c0 	mov    DWORD PTR ds:0xc002f24c,0xc001b2dd
c001c552:	c7 05 50 f2 02 c0 5e b4 01 c0 	mov    DWORD PTR ds:0xc002f250,0xc001b45e
c001c55c:	c7 05 54 f2 02 c0 f3 b4 01 c0 	mov    DWORD PTR ds:0xc002f254,0xc001b4f3
c001c566:	c7 05 58 f2 02 c0 c6 b1 01 c0 	mov    DWORD PTR ds:0xc002f258,0xc001b1c6
c001c570:	c7 05 5c f2 02 c0 a5 b5 01 c0 	mov    DWORD PTR ds:0xc002f25c,0xc001b5a5
c001c57a:	c7 05 60 f2 02 c0 3f b2 01 c0 	mov    DWORD PTR ds:0xc002f260,0xc001b23f
c001c584:	c7 05 64 f2 02 c0 59 b2 01 c0 	mov    DWORD PTR ds:0xc002f264,0xc001b259
c001c58e:	c3                   	ret    

c001c58f <Sys::systemCall(regs*, void*)>:
c001c58f:	53                   	push   ebx
c001c590:	83 ec 08             	sub    esp,0x8
c001c593:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c597:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c59a:	83 f8 7f             	cmp    eax,0x7f
c001c59d:	77 16                	ja     c001c5b5 <Sys::systemCall(regs*, void*)+0x26>
c001c59f:	8b 14 85 a0 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0e60]
c001c5a6:	85 d2                	test   edx,edx
c001c5a8:	74 0b                	je     c001c5b5 <Sys::systemCall(regs*, void*)+0x26>
c001c5aa:	83 ec 0c             	sub    esp,0xc
c001c5ad:	53                   	push   ebx
c001c5ae:	ff d2                	call   edx
c001c5b0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c5b3:	eb 0d                	jmp    c001c5c2 <Sys::systemCall(regs*, void*)+0x33>
c001c5b5:	52                   	push   edx
c001c5b6:	52                   	push   edx
c001c5b7:	50                   	push   eax
c001c5b8:	68 ad c5 02 c0       	push   0xc002c5ad
c001c5bd:	e8 3d 64 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001c5c2:	83 c4 10             	add    esp,0x10
c001c5c5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c5ca:	31 d2                	xor    edx,edx
c001c5cc:	83 c4 08             	add    esp,0x8
c001c5cf:	5b                   	pop    ebx
c001c5d0:	c3                   	ret    

c001c5d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c5d1:	55                   	push   ebp
c001c5d2:	57                   	push   edi
c001c5d3:	56                   	push   esi
c001c5d4:	53                   	push   ebx
c001c5d5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c5db:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c5e2:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c5e9:	85 c0                	test   eax,eax
c001c5eb:	0f 95 c1             	setne  cl
c001c5ee:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c5f6:	0f 94 c2             	sete   dl
c001c5f9:	84 d1                	test   cl,dl
c001c5fb:	74 23                	je     c001c620 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c5fd:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c603:	74 1b                	je     c001c620 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c605:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c60b:	89 da                	mov    edx,ebx
c001c60d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c613:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c619:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c620:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c627:	05 ff 0f 00 00       	add    eax,0xfff
c001c62c:	83 ec 0c             	sub    esp,0xc
c001c62f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c633:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c639:	c1 e8 0c             	shr    eax,0xc
c001c63c:	89 fe                	mov    esi,edi
c001c63e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c642:	c1 ee 0c             	shr    esi,0xc
c001c645:	6a 01                	push   0x1
c001c647:	e8 e1 4f ff ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c001c64c:	89 c5                	mov    ebp,eax
c001c64e:	58                   	pop    eax
c001c64f:	5a                   	pop    edx
c001c650:	56                   	push   esi
c001c651:	68 c1 c5 02 c0       	push   0xc002c5c1
c001c656:	e8 a4 63 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001c65b:	59                   	pop    ecx
c001c65c:	58                   	pop    eax
c001c65d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c661:	68 d3 c5 02 c0       	push   0xc002c5d3
c001c666:	e8 94 63 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001c66b:	83 c4 10             	add    esp,0x10
c001c66e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c674:	0f 86 31 01 00 00    	jbe    c001c7ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c67a:	c1 e6 0c             	shl    esi,0xc
c001c67d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c680:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c683:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c687:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c68e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c691:	01 df                	add    edi,ebx
c001c693:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c696:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c69a:	0f 84 08 01 00 00    	je     c001c7a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c6a0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c6a6:	76 05                	jbe    c001c6ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c6a8:	bf 00 10 00 00       	mov    edi,0x1000
c001c6ad:	83 ec 0c             	sub    esp,0xc
c001c6b0:	31 d2                	xor    edx,edx
c001c6b2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c6bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c6bf:	50                   	push   eax
c001c6c0:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c6c4:	56                   	push   esi
c001c6c5:	52                   	push   edx
c001c6c6:	57                   	push   edi
c001c6c7:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c6ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6d1:	83 c4 20             	add    esp,0x20
c001c6d4:	85 c0                	test   eax,eax
c001c6d6:	74 0a                	je     c001c6e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c6d8:	53                   	push   ebx
c001c6d9:	53                   	push   ebx
c001c6da:	50                   	push   eax
c001c6db:	68 e5 c5 02 c0       	push   0xc002c5e5
c001c6e0:	eb 0f                	jmp    c001c6f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c6e2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c6e6:	74 20                	je     c001c708 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c6e8:	51                   	push   ecx
c001c6e9:	51                   	push   ecx
c001c6ea:	6a 00                	push   0x0
c001c6ec:	68 10 c6 02 c0       	push   0xc002c610
c001c6f1:	e8 09 63 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001c6f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6f9:	e8 5f 52 ff ff       	call   c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c001c6fe:	83 c4 10             	add    esp,0x10
c001c701:	31 c0                	xor    eax,eax
c001c703:	e9 68 01 00 00       	jmp    c001c870 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c708:	fa                   	cli    
c001c709:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001c70f:	e8 8f 36 ff ff       	call   c000fda3 <Phys::allocatePage()>
c001c714:	6a 07                	push   0x7
c001c716:	89 c7                	mov    edi,eax
c001c718:	55                   	push   ebp
c001c719:	50                   	push   eax
c001c71a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c71f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c722:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c728:	e8 a7 55 ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c72d:	83 c4 0c             	add    esp,0xc
c001c730:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c737:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c73d:	6a 00                	push   0x0
c001c73f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c744:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c747:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c74d:	e8 dc 53 ff ff       	call   c0011b2e <VAS::mapOtherVASIn(bool, VAS*)>
c001c752:	58                   	pop    eax
c001c753:	5a                   	pop    edx
c001c754:	68 07 0c 00 00       	push   0xc07
c001c759:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c75d:	57                   	push   edi
c001c75e:	89 ef                	mov    edi,ebp
c001c760:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c767:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c76d:	6a 00                	push   0x0
c001c76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c774:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c777:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c77d:	e8 0e 59 ff ff       	call   c0012090 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c782:	b9 00 10 00 00       	mov    ecx,0x1000
c001c787:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c789:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001c78e:	83 c4 20             	add    esp,0x20
c001c791:	48                   	dec    eax
c001c792:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001c797:	85 c0                	test   eax,eax
c001c799:	75 01                	jne    c001c79c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c79b:	fb                   	sti    
c001c79c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c7a3:	e9 df fe ff ff       	jmp    c001c687 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c7a8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c7ab:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c7b3:	0f 86 a9 00 00 00    	jbe    c001c862 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c7b9:	fa                   	cli    
c001c7ba:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001c7c0:	51                   	push   ecx
c001c7c1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c7c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7ce:	6a 00                	push   0x0
c001c7d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7d8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7de:	e8 4b 53 ff ff       	call   c0011b2e <VAS::mapOtherVASIn(bool, VAS*)>
c001c7e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c7e7:	c1 e6 0c             	shl    esi,0xc
c001c7ea:	01 de                	add    esi,ebx
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	39 de                	cmp    esi,ebx
c001c7f1:	74 61                	je     c001c854 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c7f3:	e8 ab 35 ff ff       	call   c000fda3 <Phys::allocatePage()>
c001c7f8:	6a 07                	push   0x7
c001c7fa:	89 c7                	mov    edi,eax
c001c7fc:	55                   	push   ebp
c001c7fd:	50                   	push   eax
c001c7fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c803:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c806:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c80c:	e8 c3 54 ff ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c811:	58                   	pop    eax
c001c812:	5a                   	pop    edx
c001c813:	68 07 0c 00 00       	push   0xc07
c001c818:	53                   	push   ebx
c001c819:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c81f:	57                   	push   edi
c001c820:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c827:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c82d:	6a 00                	push   0x0
c001c82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c837:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c83d:	e8 4e 58 ff ff       	call   c0012090 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c842:	83 c4 1c             	add    esp,0x1c
c001c845:	68 00 10 00 00       	push   0x1000
c001c84a:	6a 00                	push   0x0
c001c84c:	55                   	push   ebp
c001c84d:	e8 fe 3e fe ff       	call   c0000750 <memset>
c001c852:	eb 98                	jmp    c001c7ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c854:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001c859:	48                   	dec    eax
c001c85a:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001c85f:	75 01                	jne    c001c862 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c861:	fb                   	sti    
c001c862:	83 ec 0c             	sub    esp,0xc
c001c865:	55                   	push   ebp
c001c866:	e8 f2 50 ff ff       	call   c001195d <Virt::freeKernelVirtualPages(unsigned long)>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	b0 01                	mov    al,0x1
c001c870:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c876:	5b                   	pop    ebx
c001c877:	5e                   	pop    esi
c001c878:	5f                   	pop    edi
c001c879:	5d                   	pop    ebp
c001c87a:	c3                   	ret    

c001c87b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c87b:	55                   	push   ebp
c001c87c:	57                   	push   edi
c001c87d:	56                   	push   esi
c001c87e:	53                   	push   ebx
c001c87f:	83 ec 48             	sub    esp,0x48
c001c882:	68 14 01 00 00       	push   0x114
c001c887:	e8 1b 31 ff ff       	call   c000f9a7 <malloc>
c001c88c:	83 c4 0c             	add    esp,0xc
c001c88f:	89 c6                	mov    esi,eax
c001c891:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c895:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c899:	50                   	push   eax
c001c89a:	e8 bf 66 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001c89f:	58                   	pop    eax
c001c8a0:	5a                   	pop    edx
c001c8a1:	6a 01                	push   0x1
c001c8a3:	56                   	push   esi
c001c8a4:	e8 19 67 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c001c8a9:	83 c4 10             	add    esp,0x10
c001c8ac:	85 c0                	test   eax,eax
c001c8ae:	0f 85 47 01 00 00    	jne    c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8b4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	6a 34                	push   0x34
c001c8c1:	e8 e1 30 ff ff       	call   c000f9a7 <malloc>
c001c8c6:	89 c3                	mov    ebx,eax
c001c8c8:	58                   	pop    eax
c001c8c9:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8cb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c8cf:	57                   	push   edi
c001c8d0:	53                   	push   ebx
c001c8d1:	6a 00                	push   0x0
c001c8d3:	6a 34                	push   0x34
c001c8d5:	56                   	push   esi
c001c8d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8d9:	83 c4 20             	add    esp,0x20
c001c8dc:	85 c0                	test   eax,eax
c001c8de:	0f 85 17 01 00 00    	jne    c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8e4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c8ea:	0f 85 0b 01 00 00    	jne    c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8f3:	85 c0                	test   eax,eax
c001c8f5:	0f 84 00 01 00 00    	je     c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8fb:	31 d2                	xor    edx,edx
c001c8fd:	55                   	push   ebp
c001c8fe:	52                   	push   edx
c001c8ff:	50                   	push   eax
c001c900:	56                   	push   esi
c001c901:	e8 7a 67 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001c906:	83 c4 10             	add    esp,0x10
c001c909:	85 c0                	test   eax,eax
c001c90b:	0f 85 ea 00 00 00    	jne    c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c917:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c91b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c91f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c923:	0f af c2             	imul   eax,edx
c001c926:	50                   	push   eax
c001c927:	e8 7b 30 ff ff       	call   c000f9a7 <malloc>
c001c92c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c92e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c932:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c935:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c939:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c93d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c941:	0f af c2             	imul   eax,edx
c001c944:	99                   	cdq    
c001c945:	52                   	push   edx
c001c946:	50                   	push   eax
c001c947:	56                   	push   esi
c001c948:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c94b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c94e:	83 c4 20             	add    esp,0x20
c001c951:	85 c0                	test   eax,eax
c001c953:	0f 84 a2 00 00 00    	je     c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c959:	31 d2                	xor    edx,edx
c001c95b:	51                   	push   ecx
c001c95c:	52                   	push   edx
c001c95d:	50                   	push   eax
c001c95e:	56                   	push   esi
c001c95f:	e8 1c 67 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001c964:	83 c4 10             	add    esp,0x10
c001c967:	85 c0                	test   eax,eax
c001c969:	0f 85 8c 00 00 00    	jne    c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c96f:	83 ec 0c             	sub    esp,0xc
c001c972:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c976:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c97a:	31 ed                	xor    ebp,ebp
c001c97c:	0f af c2             	imul   eax,edx
c001c97f:	50                   	push   eax
c001c980:	e8 22 30 ff ff       	call   c000f9a7 <malloc>
c001c985:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c98b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c992:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c996:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c99a:	0f af c2             	imul   eax,edx
c001c99d:	99                   	cdq    
c001c99e:	52                   	push   edx
c001c99f:	50                   	push   eax
c001c9a0:	56                   	push   esi
c001c9a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9a4:	83 c4 20             	add    esp,0x20
c001c9a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c9af:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c9b3:	0f 86 80 00 00 00    	jbe    c001ca39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c9b9:	0f b7 fd             	movzx  edi,bp
c001c9bc:	c1 e7 05             	shl    edi,0x5
c001c9bf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c9c3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c9c6:	75 6b                	jne    c001ca33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c9c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c9cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9cf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c9d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9d6:	52                   	push   edx
c001c9d7:	31 d2                	xor    edx,edx
c001c9d9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c9dc:	52                   	push   edx
c001c9dd:	50                   	push   eax
c001c9de:	56                   	push   esi
c001c9df:	e8 9c 66 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001c9e4:	83 c4 10             	add    esp,0x10
c001c9e7:	85 c0                	test   eax,eax
c001c9e9:	74 17                	je     c001ca02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c9eb:	83 ec 0c             	sub    esp,0xc
c001c9ee:	68 3c c6 02 c0       	push   0xc002c63c
c001c9f3:	e8 07 60 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001c9f8:	83 c4 10             	add    esp,0x10
c001c9fb:	31 c0                	xor    eax,eax
c001c9fd:	e9 87 00 00 00       	jmp    c001ca89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca02:	83 ec 0c             	sub    esp,0xc
c001ca05:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca08:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca0b:	50                   	push   eax
c001ca0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca14:	56                   	push   esi
c001ca15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca19:	e8 b3 fb ff ff       	call   c001c5d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca22:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca26:	83 c4 20             	add    esp,0x20
c001ca29:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca2d:	73 04                	jae    c001ca33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca33:	45                   	inc    ebp
c001ca34:	e9 76 ff ff ff       	jmp    c001c9af <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca39:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca45:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ca4b:	83 ec 0c             	sub    esp,0xc
c001ca4e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ca54:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca59:	05 00 10 00 00       	add    eax,0x1000
c001ca5e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca65:	e8 4d 2f ff ff       	call   c000f9b7 <free>
c001ca6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6d:	e8 45 2f ff ff       	call   c000f9b7 <free>
c001ca72:	58                   	pop    eax
c001ca73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca77:	e8 3b 2f ff ff       	call   c000f9b7 <free>
c001ca7c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca7f:	e8 9c 65 ff ff       	call   c0013020 <File::close()>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	b0 01                	mov    al,0x1
c001ca89:	83 c4 3c             	add    esp,0x3c
c001ca8c:	5b                   	pop    ebx
c001ca8d:	5e                   	pop    esi
c001ca8e:	5f                   	pop    edi
c001ca8f:	5d                   	pop    ebp
c001ca90:	c3                   	ret    

c001ca91 <Thr::runtimeReferenceHelper()>:
c001ca91:	83 ec 18             	sub    esp,0x18
c001ca94:	68 44 c6 02 c0       	push   0xc002c644
c001ca99:	e8 61 5f ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001ca9e:	fa                   	cli    
c001ca9f:	83 c4 10             	add    esp,0x10
c001caa2:	eb fe                	jmp    c001caa2 <Thr::runtimeReferenceHelper()+0x11>

c001caa4 <Thr::getAddressOfKernelSymbol(char const*)>:
c001caa4:	57                   	push   edi
c001caa5:	56                   	push   esi
c001caa6:	53                   	push   ebx
c001caa7:	31 db                	xor    ebx,ebx
c001caa9:	39 1d 40 fb 02 c0    	cmp    DWORD PTR ds:0xc002fb40,ebx
c001caaf:	7e 3c                	jle    c001caed <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cab1:	8b 34 9d c0 fa 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0540]
c001cab8:	31 ff                	xor    edi,edi
c001caba:	39 3c 9d c0 f9 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0640],edi
c001cac1:	7e 27                	jle    c001caea <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cac3:	50                   	push   eax
c001cac4:	50                   	push   eax
c001cac5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cac9:	8b 06                	mov    eax,DWORD PTR [esi]
c001cacb:	03 04 9d 40 fa 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd05c0]
c001cad2:	50                   	push   eax
c001cad3:	e8 c0 3d fe ff       	call   c0000898 <strcmp>
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	85 c0                	test   eax,eax
c001cadd:	75 05                	jne    c001cae4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cadf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cae2:	eb 0b                	jmp    c001caef <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cae4:	83 c6 10             	add    esi,0x10
c001cae7:	47                   	inc    edi
c001cae8:	eb d0                	jmp    c001caba <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001caea:	43                   	inc    ebx
c001caeb:	eb bc                	jmp    c001caa9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001caed:	31 c0                	xor    eax,eax
c001caef:	5b                   	pop    ebx
c001caf0:	5e                   	pop    esi
c001caf1:	5f                   	pop    edi
c001caf2:	c3                   	ret    

c001caf3 <Thr::loadKernelSymbolTable(char const*)>:
c001caf3:	55                   	push   ebp
c001caf4:	57                   	push   edi
c001caf5:	56                   	push   esi
c001caf6:	53                   	push   ebx
c001caf7:	83 ec 68             	sub    esp,0x68
c001cafa:	8b 35 90 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fb90
c001cb00:	68 14 01 00 00       	push   0x114
c001cb05:	e8 9d 2e ff ff       	call   c000f9a7 <malloc>
c001cb0a:	83 c4 0c             	add    esp,0xc
c001cb0d:	89 c3                	mov    ebx,eax
c001cb0f:	56                   	push   esi
c001cb10:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb14:	50                   	push   eax
c001cb15:	e8 44 64 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001cb1a:	5e                   	pop    esi
c001cb1b:	5f                   	pop    edi
c001cb1c:	6a 01                	push   0x1
c001cb1e:	53                   	push   ebx
c001cb1f:	e8 9e 64 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c001cb24:	83 c4 10             	add    esp,0x10
c001cb27:	85 c0                	test   eax,eax
c001cb29:	74 0a                	je     c001cb35 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb2b:	83 ec 0c             	sub    esp,0xc
c001cb2e:	68 66 c6 02 c0       	push   0xc002c666
c001cb33:	eb 34                	jmp    c001cb69 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb35:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	6a 34                	push   0x34
c001cb42:	e8 60 2e ff ff       	call   c000f9a7 <malloc>
c001cb47:	59                   	pop    ecx
c001cb48:	89 c7                	mov    edi,eax
c001cb4a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb50:	56                   	push   esi
c001cb51:	57                   	push   edi
c001cb52:	6a 00                	push   0x0
c001cb54:	6a 34                	push   0x34
c001cb56:	53                   	push   ebx
c001cb57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb5a:	83 c4 20             	add    esp,0x20
c001cb5d:	85 c0                	test   eax,eax
c001cb5f:	74 17                	je     c001cb78 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb61:	83 ec 0c             	sub    esp,0xc
c001cb64:	68 7d c6 02 c0       	push   0xc002c67d
c001cb69:	e8 2f d8 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001cb6e:	83 c4 10             	add    esp,0x10
c001cb71:	31 c0                	xor    eax,eax
c001cb73:	e9 31 02 00 00       	jmp    c001cda9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cb78:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cb7e:	75 e1                	jne    c001cb61 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb80:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cb83:	85 c0                	test   eax,eax
c001cb85:	74 da                	je     c001cb61 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb87:	52                   	push   edx
c001cb88:	31 d2                	xor    edx,edx
c001cb8a:	52                   	push   edx
c001cb8b:	50                   	push   eax
c001cb8c:	53                   	push   ebx
c001cb8d:	e8 ee 64 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001cb92:	83 c4 10             	add    esp,0x10
c001cb95:	85 c0                	test   eax,eax
c001cb97:	75 c8                	jne    c001cb61 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cba0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cba4:	31 ed                	xor    ebp,ebp
c001cba6:	0f af c2             	imul   eax,edx
c001cba9:	50                   	push   eax
c001cbaa:	e8 f8 2d ff ff       	call   c000f9a7 <malloc>
c001cbaf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbb5:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbbc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbc0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbc4:	0f af c2             	imul   eax,edx
c001cbc7:	99                   	cdq    
c001cbc8:	52                   	push   edx
c001cbc9:	50                   	push   eax
c001cbca:	53                   	push   ebx
c001cbcb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbce:	83 c4 20             	add    esp,0x20
c001cbd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbd9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cbe1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cbe9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cbf1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cbf5:	0f 86 aa 00 00 00    	jbe    c001cca5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cbfb:	0f b7 f5             	movzx  esi,bp
c001cbfe:	6b f6 28             	imul   esi,esi,0x28
c001cc01:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc0c:	50                   	push   eax
c001cc0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc11:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc15:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc17:	6b c0 28             	imul   eax,eax,0x28
c001cc1a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc1e:	89 d0                	mov    eax,edx
c001cc20:	31 d2                	xor    edx,edx
c001cc22:	52                   	push   edx
c001cc23:	50                   	push   eax
c001cc24:	53                   	push   ebx
c001cc25:	e8 56 64 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001cc2a:	83 c4 0c             	add    esp,0xc
c001cc2d:	6a 20                	push   0x20
c001cc2f:	6a 00                	push   0x0
c001cc31:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc35:	52                   	push   edx
c001cc36:	e8 15 3b fe ff       	call   c0000750 <memset>
c001cc3b:	58                   	pop    eax
c001cc3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc3e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc42:	51                   	push   ecx
c001cc43:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc47:	52                   	push   edx
c001cc48:	6a 00                	push   0x0
c001cc4a:	6a 1f                	push   0x1f
c001cc4c:	53                   	push   ebx
c001cc4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc50:	83 c4 18             	add    esp,0x18
c001cc53:	68 94 c6 02 c0       	push   0xc002c694
c001cc58:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc5c:	52                   	push   edx
c001cc5d:	e8 36 3c fe ff       	call   c0000898 <strcmp>
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	85 c0                	test   eax,eax
c001cc67:	75 0f                	jne    c001cc78 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cc69:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc78:	50                   	push   eax
c001cc79:	50                   	push   eax
c001cc7a:	68 9c c6 02 c0       	push   0xc002c69c
c001cc7f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cc83:	50                   	push   eax
c001cc84:	e8 0f 3c fe ff       	call   c0000898 <strcmp>
c001cc89:	83 c4 10             	add    esp,0x10
c001cc8c:	85 c0                	test   eax,eax
c001cc8e:	75 0f                	jne    c001cc9f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cc90:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc9f:	45                   	inc    ebp
c001cca0:	e9 4c ff ff ff       	jmp    c001cbf1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cca5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ccaa:	75 10                	jne    c001ccbc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	68 a4 c6 02 c0       	push   0xc002c6a4
c001ccb4:	e8 e4 d6 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ccc1:	75 10                	jne    c001ccd3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ccc3:	83 ec 0c             	sub    esp,0xc
c001ccc6:	68 a4 c6 02 c0       	push   0xc002c6a4
c001cccb:	e8 cd d6 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001ccd0:	83 c4 10             	add    esp,0x10
c001ccd3:	31 d2                	xor    edx,edx
c001ccd5:	50                   	push   eax
c001ccd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccda:	52                   	push   edx
c001ccdb:	50                   	push   eax
c001ccdc:	53                   	push   ebx
c001ccdd:	e8 9e 63 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001cce2:	5a                   	pop    edx
c001cce3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cce7:	e8 bb 2c ff ff       	call   c000f9a7 <malloc>
c001ccec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccf4:	31 c9                	xor    ecx,ecx
c001ccf6:	5e                   	pop    esi
c001ccf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccf9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ccfd:	55                   	push   ebp
c001ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd02:	51                   	push   ecx
c001cd03:	52                   	push   edx
c001cd04:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd08:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd0c:	53                   	push   ebx
c001cd0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd10:	83 c4 14             	add    esp,0x14
c001cd13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd17:	e8 8b 2c ff ff       	call   c000f9a7 <malloc>
c001cd1c:	89 c6                	mov    esi,eax
c001cd1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd23:	56                   	push   esi
c001cd24:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd2c:	51                   	push   ecx
c001cd2d:	52                   	push   edx
c001cd2e:	53                   	push   ebx
c001cd2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd36:	8b 15 40 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb40
c001cd3c:	83 c4 1c             	add    esp,0x1c
c001cd3f:	c1 e8 04             	shr    eax,0x4
c001cd42:	89 04 95 c0 f9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0640],eax
c001cd49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd4d:	31 d2                	xor    edx,edx
c001cd4f:	52                   	push   edx
c001cd50:	50                   	push   eax
c001cd51:	53                   	push   ebx
c001cd52:	e8 29 63 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001cd57:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd59:	31 d2                	xor    edx,edx
c001cd5b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd5e:	56                   	push   esi
c001cd5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd63:	52                   	push   edx
c001cd64:	50                   	push   eax
c001cd65:	53                   	push   ebx
c001cd66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd69:	83 c4 14             	add    esp,0x14
c001cd6c:	53                   	push   ebx
c001cd6d:	e8 ae 62 ff ff       	call   c0013020 <File::close()>
c001cd72:	5d                   	pop    ebp
c001cd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd77:	e8 3b 2c ff ff       	call   c000f9b7 <free>
c001cd7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd7f:	e8 33 2c ff ff       	call   c000f9b7 <free>
c001cd84:	a1 40 fb 02 c0       	mov    eax,ds:0xc002fb40
c001cd89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd8d:	8d 50 01             	lea    edx,[eax+0x1]
c001cd90:	89 0c 85 c0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0540],ecx
c001cd97:	89 34 85 40 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05c0],esi
c001cd9e:	89 15 40 fb 02 c0    	mov    DWORD PTR ds:0xc002fb40,edx
c001cda4:	83 c4 10             	add    esp,0x10
c001cda7:	b0 01                	mov    al,0x1
c001cda9:	83 c4 5c             	add    esp,0x5c
c001cdac:	5b                   	pop    ebx
c001cdad:	5e                   	pop    esi
c001cdae:	5f                   	pop    edi
c001cdaf:	5d                   	pop    ebp
c001cdb0:	c3                   	ret    

c001cdb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cdb1:	55                   	push   ebp
c001cdb2:	57                   	push   edi
c001cdb3:	56                   	push   esi
c001cdb4:	53                   	push   ebx
c001cdb5:	81 ec 68 03 00 00    	sub    esp,0x368
c001cdbb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cdc2:	8b 1d 90 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fb90
c001cdc8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cdcc:	68 14 01 00 00       	push   0x114
c001cdd1:	e8 d1 2b ff ff       	call   c000f9a7 <malloc>
c001cdd6:	83 c4 0c             	add    esp,0xc
c001cdd9:	89 c5                	mov    ebp,eax
c001cddb:	53                   	push   ebx
c001cddc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cde3:	50                   	push   eax
c001cde4:	e8 75 61 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001cde9:	5e                   	pop    esi
c001cdea:	5f                   	pop    edi
c001cdeb:	6a 01                	push   0x1
c001cded:	55                   	push   ebp
c001cdee:	e8 cf 61 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c001cdf3:	83 c4 10             	add    esp,0x10
c001cdf6:	85 c0                	test   eax,eax
c001cdf8:	0f 85 a7 06 00 00    	jne    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdfe:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce06:	83 ec 0c             	sub    esp,0xc
c001ce09:	6a 34                	push   0x34
c001ce0b:	e8 97 2b ff ff       	call   c000f9a7 <malloc>
c001ce10:	5b                   	pop    ebx
c001ce11:	89 c7                	mov    edi,eax
c001ce13:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce1a:	53                   	push   ebx
c001ce1b:	57                   	push   edi
c001ce1c:	6a 00                	push   0x0
c001ce1e:	6a 34                	push   0x34
c001ce20:	55                   	push   ebp
c001ce21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce24:	83 c4 20             	add    esp,0x20
c001ce27:	85 c0                	test   eax,eax
c001ce29:	0f 85 76 06 00 00    	jne    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce2f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce35:	0f 85 6a 06 00 00    	jne    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce3b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce3e:	85 c0                	test   eax,eax
c001ce40:	0f 84 5f 06 00 00    	je     c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce46:	31 d2                	xor    edx,edx
c001ce48:	51                   	push   ecx
c001ce49:	52                   	push   edx
c001ce4a:	50                   	push   eax
c001ce4b:	55                   	push   ebp
c001ce4c:	e8 2f 62 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001ce51:	83 c4 10             	add    esp,0x10
c001ce54:	85 c0                	test   eax,eax
c001ce56:	0f 85 49 06 00 00    	jne    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce5c:	83 ec 0c             	sub    esp,0xc
c001ce5f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce62:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce66:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ce6a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce6e:	0f af c2             	imul   eax,edx
c001ce71:	50                   	push   eax
c001ce72:	e8 30 2b ff ff       	call   c000f9a7 <malloc>
c001ce77:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce85:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce89:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce8d:	0f af c2             	imul   eax,edx
c001ce90:	99                   	cdq    
c001ce91:	52                   	push   edx
c001ce92:	50                   	push   eax
c001ce93:	55                   	push   ebp
c001ce94:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce97:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ce9a:	83 c4 20             	add    esp,0x20
c001ce9d:	85 c0                	test   eax,eax
c001ce9f:	0f 84 00 06 00 00    	je     c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cea5:	52                   	push   edx
c001cea6:	31 d2                	xor    edx,edx
c001cea8:	52                   	push   edx
c001cea9:	50                   	push   eax
c001ceaa:	55                   	push   ebp
c001ceab:	e8 d0 61 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001ceb0:	83 c4 10             	add    esp,0x10
c001ceb3:	85 c0                	test   eax,eax
c001ceb5:	0f 85 ea 05 00 00    	jne    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cec2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cec6:	31 f6                	xor    esi,esi
c001cec8:	0f af c2             	imul   eax,edx
c001cecb:	50                   	push   eax
c001cecc:	e8 d6 2a ff ff       	call   c000f9a7 <malloc>
c001ced1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ced4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ced8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cedb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cedf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cee3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cee7:	0f af c2             	imul   eax,edx
c001ceea:	99                   	cdq    
c001ceeb:	52                   	push   edx
c001ceec:	50                   	push   eax
c001ceed:	55                   	push   ebp
c001ceee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cef1:	83 c4 20             	add    esp,0x20
c001cef4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cef8:	0f 86 8a 00 00 00    	jbe    c001cf88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cefe:	0f b7 de             	movzx  ebx,si
c001cf01:	c1 e3 05             	shl    ebx,0x5
c001cf04:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf08:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf0b:	75 75                	jne    c001cf82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf10:	31 d2                	xor    edx,edx
c001cf12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf16:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf1d:	50                   	push   eax
c001cf1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf21:	52                   	push   edx
c001cf22:	50                   	push   eax
c001cf23:	55                   	push   ebp
c001cf24:	e8 57 61 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	85 c0                	test   eax,eax
c001cf2e:	0f 85 71 05 00 00    	jne    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf34:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf3b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf3e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf42:	31 d2                	xor    edx,edx
c001cf44:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf4f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf56:	50                   	push   eax
c001cf57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5f:	52                   	push   edx
c001cf60:	50                   	push   eax
c001cf61:	55                   	push   ebp
c001cf62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf65:	83 c4 1c             	add    esp,0x1c
c001cf68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cf6b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cf6e:	50                   	push   eax
c001cf6f:	6a 00                	push   0x0
c001cf71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf75:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cf79:	50                   	push   eax
c001cf7a:	e8 d1 37 fe ff       	call   c0000750 <memset>
c001cf7f:	83 c4 10             	add    esp,0x10
c001cf82:	46                   	inc    esi
c001cf83:	e9 6c ff ff ff       	jmp    c001cef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cf88:	53                   	push   ebx
c001cf89:	31 db                	xor    ebx,ebx
c001cf8b:	68 00 01 00 00       	push   0x100
c001cf90:	6a 00                	push   0x0
c001cf92:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cf96:	50                   	push   eax
c001cf97:	e8 b4 37 fe ff       	call   c0000750 <memset>
c001cf9c:	83 c4 0c             	add    esp,0xc
c001cf9f:	68 00 01 00 00       	push   0x100
c001cfa4:	6a 00                	push   0x0
c001cfa6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cfad:	50                   	push   eax
c001cfae:	e8 9d 37 fe ff       	call   c0000750 <memset>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cfbe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cfc6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cfce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cfd6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cfde:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cfe2:	0f 86 30 01 00 00    	jbe    c001d118 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cfe8:	0f b7 f3             	movzx  esi,bx
c001cfeb:	6b f6 28             	imul   esi,esi,0x28
c001cfee:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cff2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cff5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cff9:	52                   	push   edx
c001cffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cffe:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d002:	8b 06                	mov    eax,DWORD PTR [esi]
c001d004:	6b d2 28             	imul   edx,edx,0x28
c001d007:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d00b:	31 d2                	xor    edx,edx
c001d00d:	52                   	push   edx
c001d00e:	50                   	push   eax
c001d00f:	55                   	push   ebp
c001d010:	e8 6b 60 ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001d015:	83 c4 0c             	add    esp,0xc
c001d018:	6a 20                	push   0x20
c001d01a:	6a 00                	push   0x0
c001d01c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d023:	51                   	push   ecx
c001d024:	e8 27 37 fe ff       	call   c0000750 <memset>
c001d029:	59                   	pop    ecx
c001d02a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d02d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d031:	52                   	push   edx
c001d032:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d039:	51                   	push   ecx
c001d03a:	6a 00                	push   0x0
c001d03c:	6a 1f                	push   0x1f
c001d03e:	55                   	push   ebp
c001d03f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d042:	83 c4 1c             	add    esp,0x1c
c001d045:	6a 09                	push   0x9
c001d047:	68 be c6 02 c0       	push   0xc002c6be
c001d04c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d053:	51                   	push   ecx
c001d054:	e8 f3 35 fe ff       	call   c000064c <memcmp>
c001d059:	83 c4 10             	add    esp,0x10
c001d05c:	85 c0                	test   eax,eax
c001d05e:	75 21                	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d068:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d070:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d073:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d07a:	89 d0                	mov    eax,edx
c001d07c:	40                   	inc    eax
c001d07d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d081:	50                   	push   eax
c001d082:	6a 09                	push   0x9
c001d084:	68 c8 c6 02 c0       	push   0xc002c6c8
c001d089:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d090:	50                   	push   eax
c001d091:	e8 b6 35 fe ff       	call   c000064c <memcmp>
c001d096:	83 c4 10             	add    esp,0x10
c001d099:	85 c0                	test   eax,eax
c001d09b:	75 21                	jne    c001d0be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d09d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0a5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0b0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0b7:	89 d0                	mov    eax,edx
c001d0b9:	40                   	inc    eax
c001d0ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0be:	50                   	push   eax
c001d0bf:	50                   	push   eax
c001d0c0:	68 94 c6 02 c0       	push   0xc002c694
c001d0c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0cc:	50                   	push   eax
c001d0cd:	e8 c6 37 fe ff       	call   c0000898 <strcmp>
c001d0d2:	83 c4 10             	add    esp,0x10
c001d0d5:	85 c0                	test   eax,eax
c001d0d7:	75 0f                	jne    c001d0e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d0d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0e8:	50                   	push   eax
c001d0e9:	50                   	push   eax
c001d0ea:	68 9c c6 02 c0       	push   0xc002c69c
c001d0ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0f6:	50                   	push   eax
c001d0f7:	e8 9c 37 fe ff       	call   c0000898 <strcmp>
c001d0fc:	83 c4 10             	add    esp,0x10
c001d0ff:	85 c0                	test   eax,eax
c001d101:	75 0f                	jne    c001d112 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d103:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d10a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d10e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d112:	43                   	inc    ebx
c001d113:	e9 c6 fe ff ff       	jmp    c001cfde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d118:	31 d2                	xor    edx,edx
c001d11a:	50                   	push   eax
c001d11b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d11f:	52                   	push   edx
c001d120:	50                   	push   eax
c001d121:	55                   	push   ebp
c001d122:	e8 59 5f ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001d127:	58                   	pop    eax
c001d128:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d12c:	e8 76 28 ff ff       	call   c000f9a7 <malloc>
c001d131:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d134:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d138:	31 d2                	xor    edx,edx
c001d13a:	58                   	pop    eax
c001d13b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d13f:	53                   	push   ebx
c001d140:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d144:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	55                   	push   ebp
c001d14b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d14e:	83 c4 14             	add    esp,0x14
c001d151:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d155:	e8 4d 28 ff ff       	call   c000f9a7 <malloc>
c001d15a:	31 d2                	xor    edx,edx
c001d15c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d160:	83 c4 0c             	add    esp,0xc
c001d163:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d167:	52                   	push   edx
c001d168:	50                   	push   eax
c001d169:	55                   	push   ebp
c001d16a:	e8 11 5f ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001d16f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d172:	31 d2                	xor    edx,edx
c001d174:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d177:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d17b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d17f:	52                   	push   edx
c001d180:	50                   	push   eax
c001d181:	55                   	push   ebp
c001d182:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d185:	83 c4 20             	add    esp,0x20
c001d188:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d190:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d194:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d198:	0f 84 0b 03 00 00    	je     c001d4a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d19e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1a5:	31 d2                	xor    edx,edx
c001d1a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1ab:	c1 e8 03             	shr    eax,0x3
c001d1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d1b2:	51                   	push   ecx
c001d1b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1b7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d1bb:	52                   	push   edx
c001d1bc:	50                   	push   eax
c001d1bd:	55                   	push   ebp
c001d1be:	e8 bd 5e ff ff       	call   c0013080 <File::seek(unsigned long long)>
c001d1c3:	5b                   	pop    ebx
c001d1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d1cf:	e8 d3 27 ff ff       	call   c000f9a7 <malloc>
c001d1d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d1db:	31 d2                	xor    edx,edx
c001d1dd:	5e                   	pop    esi
c001d1de:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d1e2:	50                   	push   eax
c001d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1eb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d1f2:	52                   	push   edx
c001d1f3:	50                   	push   eax
c001d1f4:	55                   	push   ebp
c001d1f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1f8:	83 c4 20             	add    esp,0x20
c001d1fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d203:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d207:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d20b:	0f 8d 7c 02 00 00    	jge    c001d48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d211:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d219:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d21e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d221:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d225:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d229:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d22d:	89 d8                	mov    eax,ebx
c001d22f:	c1 e8 08             	shr    eax,0x8
c001d232:	89 c6                	mov    esi,eax
c001d234:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d238:	c1 e6 04             	shl    esi,0x4
c001d23b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d23f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d242:	85 d2                	test   edx,edx
c001d244:	0f 85 bf 00 00 00    	jne    c001d309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d24a:	83 ec 0c             	sub    esp,0xc
c001d24d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d251:	03 06                	add    eax,DWORD PTR [esi]
c001d253:	50                   	push   eax
c001d254:	e8 4b f8 ff ff       	call   c001caa4 <Thr::getAddressOfKernelSymbol(char const*)>
c001d259:	83 c4 10             	add    esp,0x10
c001d25c:	89 c2                	mov    edx,eax
c001d25e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d263:	85 c0                	test   eax,eax
c001d265:	0f 85 9e 00 00 00    	jne    c001d309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d26b:	83 ec 0c             	sub    esp,0xc
c001d26e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d272:	03 06                	add    eax,DWORD PTR [esi]
c001d274:	50                   	push   eax
c001d275:	e8 fb 14 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d27a:	83 c4 10             	add    esp,0x10
c001d27d:	89 c2                	mov    edx,eax
c001d27f:	85 c0                	test   eax,eax
c001d281:	0f 85 82 00 00 00    	jne    c001d309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d287:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d28b:	50                   	push   eax
c001d28c:	50                   	push   eax
c001d28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d291:	03 06                	add    eax,DWORD PTR [esi]
c001d293:	50                   	push   eax
c001d294:	68 d2 c6 02 c0       	push   0xc002c6d2
c001d299:	e8 61 57 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001d29e:	58                   	pop    eax
c001d29f:	5a                   	pop    edx
c001d2a0:	68 ec c6 02 c0       	push   0xc002c6ec
c001d2a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ac:	50                   	push   eax
c001d2ad:	e8 5a 35 fe ff       	call   c000080c <strcpy>
c001d2b2:	59                   	pop    ecx
c001d2b3:	58                   	pop    eax
c001d2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b8:	03 06                	add    eax,DWORD PTR [esi]
c001d2ba:	50                   	push   eax
c001d2bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2c2:	50                   	push   eax
c001d2c3:	e8 84 36 fe ff       	call   c000094c <strcat>
c001d2c8:	58                   	pop    eax
c001d2c9:	5a                   	pop    edx
c001d2ca:	68 82 c7 02 c0       	push   0xc002c782
c001d2cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d6:	50                   	push   eax
c001d2d7:	e8 70 36 fe ff       	call   c000094c <strcat>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d2e4:	0f 84 5d 01 00 00    	je     c001d447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2ea:	83 ec 0c             	sub    esp,0xc
c001d2ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f4:	50                   	push   eax
c001d2f5:	e8 a3 d0 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d2fa:	83 c4 10             	add    esp,0x10
c001d2fd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d301:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d305:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d309:	80 fb 01             	cmp    bl,0x1
c001d30c:	0f 85 88 00 00 00    	jne    c001d39a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d312:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d319:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d31d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d321:	01 ce                	add    esi,ecx
c001d323:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d329:	0f 94 c0             	sete   al
c001d32c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d332:	0f 94 c3             	sete   bl
c001d335:	09 c3                	or     ebx,eax
c001d337:	8b 06                	mov    eax,DWORD PTR [esi]
c001d339:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d33e:	74 41                	je     c001d381 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d340:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d343:	84 db                	test   bl,bl
c001d345:	75 15                	jne    c001d35c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d347:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d34b:	66 83 f8 0c          	cmp    ax,0xc
c001d34f:	76 05                	jbe    c001d356 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d351:	b8 0c 00 00 00       	mov    eax,0xc
c001d356:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d35a:	76 37                	jbe    c001d393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d35c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d360:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d365:	0f 84 dc 00 00 00    	je     c001d447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d36b:	83 ec 0c             	sub    esp,0xc
c001d36e:	68 03 c7 02 c0       	push   0xc002c703
c001d373:	e8 25 d0 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d378:	83 c4 10             	add    esp,0x10
c001d37b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d37f:	eb 12                	jmp    c001d393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d381:	01 c1                	add    ecx,eax
c001d383:	84 db                	test   bl,bl
c001d385:	75 0c                	jne    c001d393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d387:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d38b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d38f:	77 02                	ja     c001d393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d391:	01 d1                	add    ecx,edx
c001d393:	89 0e                	mov    DWORD PTR [esi],ecx
c001d395:	e9 ea 00 00 00       	jmp    c001d484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d39a:	80 fb 02             	cmp    bl,0x2
c001d39d:	75 7c                	jne    c001d41b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d39f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3a6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3aa:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3ae:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3b4:	74 20                	je     c001d3d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d3b6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3bc:	74 18                	je     c001d3d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d3be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3c2:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3c7:	66 83 f8 0e          	cmp    ax,0xe
c001d3cb:	77 03                	ja     c001d3d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d3cd:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d3d0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d3d4:	76 1f                	jbe    c001d3f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d3d6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d3da:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3df:	74 66                	je     c001d447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d3e1:	83 ec 0c             	sub    esp,0xc
c001d3e4:	68 1f c7 02 c0       	push   0xc002c71f
c001d3e9:	e8 af cf ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d3f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3f7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d3fc:	74 13                	je     c001d411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d3fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d402:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d409:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d40d:	01 c8                	add    eax,ecx
c001d40f:	eb 04                	jmp    c001d415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d411:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d415:	01 c2                	add    edx,eax
c001d417:	89 16                	mov    DWORD PTR [esi],edx
c001d419:	eb 69                	jmp    c001d484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d41b:	0f b6 db             	movzx  ebx,bl
c001d41e:	50                   	push   eax
c001d41f:	50                   	push   eax
c001d420:	53                   	push   ebx
c001d421:	68 3b c7 02 c0       	push   0xc002c73b
c001d426:	e8 d4 55 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001d42b:	83 c4 10             	add    esp,0x10
c001d42e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d433:	74 12                	je     c001d447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d435:	83 ec 0c             	sub    esp,0xc
c001d438:	68 46 c7 02 c0       	push   0xc002c746
c001d43d:	e8 5b cf ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	eb 3d                	jmp    c001d484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d447:	83 ec 0c             	sub    esp,0xc
c001d44a:	55                   	push   ebp
c001d44b:	e8 d0 5b ff ff       	call   c0013020 <File::close()>
c001d450:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d453:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d456:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d459:	59                   	pop    ecx
c001d45a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d45e:	e8 54 25 ff ff       	call   c000f9b7 <free>
c001d463:	5b                   	pop    ebx
c001d464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d468:	e8 4a 25 ff ff       	call   c000f9b7 <free>
c001d46d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d470:	e8 42 25 ff ff       	call   c000f9b7 <free>
c001d475:	5e                   	pop    esi
c001d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d47a:	e8 38 25 ff ff       	call   c000f9b7 <free>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	eb 21                	jmp    c001d4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d484:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d488:	e9 76 fd ff ff       	jmp    c001d203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d48d:	83 ec 0c             	sub    esp,0xc
c001d490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d494:	e8 1e 25 ff ff       	call   c000f9b7 <free>
c001d499:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d49d:	83 c4 10             	add    esp,0x10
c001d4a0:	e9 eb fc ff ff       	jmp    c001d190 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4a5:	31 c0                	xor    eax,eax
c001d4a7:	eb 33                	jmp    c001d4dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d4a9:	83 ec 0c             	sub    esp,0xc
c001d4ac:	55                   	push   ebp
c001d4ad:	e8 6e 5b ff ff       	call   c0013020 <File::close()>
c001d4b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4bb:	58                   	pop    eax
c001d4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4c0:	e8 f2 24 ff ff       	call   c000f9b7 <free>
c001d4c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4c8:	e8 ea 24 ff ff       	call   c000f9b7 <free>
c001d4cd:	5a                   	pop    edx
c001d4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4d2:	e8 e0 24 ff ff       	call   c000f9b7 <free>
c001d4d7:	83 c4 10             	add    esp,0x10
c001d4da:	b0 01                	mov    al,0x1
c001d4dc:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d4e2:	5b                   	pop    ebx
c001d4e3:	5e                   	pop    esi
c001d4e4:	5f                   	pop    edi
c001d4e5:	5d                   	pop    ebp
c001d4e6:	c3                   	ret    

c001d4e7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d4e7:	56                   	push   esi
c001d4e8:	31 d2                	xor    edx,edx
c001d4ea:	53                   	push   ebx
c001d4eb:	8b 1d a0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3a0
c001d4f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4f5:	39 d3                	cmp    ebx,edx
c001d4f7:	7e 1b                	jle    c001d514 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d4f9:	8b 04 95 c0 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a40]
c001d500:	39 c8                	cmp    eax,ecx
c001d502:	77 0d                	ja     c001d511 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d504:	8b 34 95 c0 f3 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0c40]
c001d50b:	01 c6                	add    esi,eax
c001d50d:	39 ce                	cmp    esi,ecx
c001d50f:	77 05                	ja     c001d516 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d511:	42                   	inc    edx
c001d512:	eb e1                	jmp    c001d4f5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d514:	31 c0                	xor    eax,eax
c001d516:	5b                   	pop    ebx
c001d517:	5e                   	pop    esi
c001d518:	c3                   	ret    

c001d519 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d519:	53                   	push   ebx
c001d51a:	31 c0                	xor    eax,eax
c001d51c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d520:	8b 1d a0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3a0
c001d526:	39 c3                	cmp    ebx,eax
c001d528:	7e 22                	jle    c001d54c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d52a:	8b 14 85 c0 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0a40]
c001d531:	39 ca                	cmp    edx,ecx
c001d533:	77 14                	ja     c001d549 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d535:	03 14 85 c0 f3 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0c40]
c001d53c:	39 ca                	cmp    edx,ecx
c001d53e:	76 09                	jbe    c001d549 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d540:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c001d547:	eb 05                	jmp    c001d54e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d549:	40                   	inc    eax
c001d54a:	eb da                	jmp    c001d526 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d54c:	31 c0                	xor    eax,eax
c001d54e:	5b                   	pop    ebx
c001d54f:	c3                   	ret    

c001d550 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d550:	53                   	push   ebx
c001d551:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d555:	53                   	push   ebx
c001d556:	e8 8c ff ff ff       	call   c001d4e7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d55b:	5a                   	pop    edx
c001d55c:	31 d2                	xor    edx,edx
c001d55e:	85 c0                	test   eax,eax
c001d560:	74 04                	je     c001d566 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d562:	89 da                	mov    edx,ebx
c001d564:	29 c2                	sub    edx,eax
c001d566:	89 d0                	mov    eax,edx
c001d568:	5b                   	pop    ebx
c001d569:	c3                   	ret    

c001d56a <Thr::loadDLL(char const*, bool)>:
c001d56a:	55                   	push   ebp
c001d56b:	57                   	push   edi
c001d56c:	56                   	push   esi
c001d56d:	53                   	push   ebx
c001d56e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d574:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d57b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d582:	56                   	push   esi
c001d583:	68 5e c7 02 c0       	push   0xc002c75e
c001d588:	e8 72 54 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001d58d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d594:	e8 0e 24 ff ff       	call   c000f9a7 <malloc>
c001d599:	83 c4 0c             	add    esp,0xc
c001d59c:	89 c3                	mov    ebx,eax
c001d59e:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001d5a4:	56                   	push   esi
c001d5a5:	50                   	push   eax
c001d5a6:	e8 b3 59 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001d5ab:	83 c4 10             	add    esp,0x10
c001d5ae:	85 db                	test   ebx,ebx
c001d5b0:	75 3c                	jne    c001d5ee <Thr::loadDLL(char const*, bool)+0x84>
c001d5b2:	89 f8                	mov    eax,edi
c001d5b4:	84 c0                	test   al,al
c001d5b6:	0f 84 d2 01 00 00    	je     c001d78e <Thr::loadDLL(char const*, bool)+0x224>
c001d5bc:	55                   	push   ebp
c001d5bd:	55                   	push   ebp
c001d5be:	68 6f c7 02 c0       	push   0xc002c76f
c001d5c3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d5c7:	55                   	push   ebp
c001d5c8:	e8 3f 32 fe ff       	call   c000080c <strcpy>
c001d5cd:	58                   	pop    eax
c001d5ce:	5a                   	pop    edx
c001d5cf:	56                   	push   esi
c001d5d0:	55                   	push   ebp
c001d5d1:	e8 76 33 fe ff       	call   c000094c <strcat>
c001d5d6:	59                   	pop    ecx
c001d5d7:	58                   	pop    eax
c001d5d8:	68 82 c7 02 c0       	push   0xc002c782
c001d5dd:	55                   	push   ebp
c001d5de:	e8 69 33 fe ff       	call   c000094c <strcat>
c001d5e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5e6:	e8 b2 cd ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d5eb:	83 c4 10             	add    esp,0x10
c001d5ee:	51                   	push   ecx
c001d5ef:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d5f3:	50                   	push   eax
c001d5f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d5f8:	50                   	push   eax
c001d5f9:	53                   	push   ebx
c001d5fa:	e8 6f 5c ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	85 db                	test   ebx,ebx
c001d604:	74 0c                	je     c001d612 <Thr::loadDLL(char const*, bool)+0xa8>
c001d606:	83 ec 0c             	sub    esp,0xc
c001d609:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d60b:	53                   	push   ebx
c001d60c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d60f:	83 c4 10             	add    esp,0x10
c001d612:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d617:	75 0a                	jne    c001d623 <Thr::loadDLL(char const*, bool)+0xb9>
c001d619:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d61d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d621:	75 3c                	jne    c001d65f <Thr::loadDLL(char const*, bool)+0xf5>
c001d623:	89 f8                	mov    eax,edi
c001d625:	84 c0                	test   al,al
c001d627:	0f 84 49 01 00 00    	je     c001d776 <Thr::loadDLL(char const*, bool)+0x20c>
c001d62d:	51                   	push   ecx
c001d62e:	51                   	push   ecx
c001d62f:	68 6f c7 02 c0       	push   0xc002c76f
c001d634:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d638:	53                   	push   ebx
c001d639:	e8 ce 31 fe ff       	call   c000080c <strcpy>
c001d63e:	5d                   	pop    ebp
c001d63f:	58                   	pop    eax
c001d640:	56                   	push   esi
c001d641:	53                   	push   ebx
c001d642:	e8 05 33 fe ff       	call   c000094c <strcat>
c001d647:	58                   	pop    eax
c001d648:	5a                   	pop    edx
c001d649:	68 82 c7 02 c0       	push   0xc002c782
c001d64e:	53                   	push   ebx
c001d64f:	e8 f8 32 fe ff       	call   c000094c <strcat>
c001d654:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d657:	e8 41 cd ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d65c:	83 c4 10             	add    esp,0x10
c001d65f:	52                   	push   edx
c001d660:	6a 03                	push   0x3
c001d662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d666:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d66a:	05 ff 0f 00 00       	add    eax,0xfff
c001d66f:	83 d2 00             	adc    edx,0x0
c001d672:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d676:	50                   	push   eax
c001d677:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c001d67d:	e8 54 47 ff ff       	call   c0011dd6 <VAS::allocatePages(int, int)>
c001d682:	59                   	pop    ecx
c001d683:	89 c3                	mov    ebx,eax
c001d685:	5d                   	pop    ebp
c001d686:	50                   	push   eax
c001d687:	68 25 a9 02 c0       	push   0xc002a925
c001d68c:	e8 6e 53 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001d691:	89 34 24             	mov    DWORD PTR [esp],esi
c001d694:	e8 d3 30 fe ff       	call   c000076c <strlen>
c001d699:	8b 2d a0 f3 02 c0    	mov    ebp,DWORD PTR ds:0xc002f3a0
c001d69f:	40                   	inc    eax
c001d6a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6a3:	e8 ff 22 ff ff       	call   c000f9a7 <malloc>
c001d6a8:	89 04 ad c0 f7 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0840],eax
c001d6af:	58                   	pop    eax
c001d6b0:	a1 a0 f3 02 c0       	mov    eax,ds:0xc002f3a0
c001d6b5:	5a                   	pop    edx
c001d6b6:	56                   	push   esi
c001d6b7:	ff 34 85 c0 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0840]
c001d6be:	e8 49 31 fe ff       	call   c000080c <strcpy>
c001d6c3:	a1 a0 f3 02 c0       	mov    eax,ds:0xc002f3a0
c001d6c8:	8d 50 01             	lea    edx,[eax+0x1]
c001d6cb:	89 1c 85 c0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a40],ebx
c001d6d2:	89 15 a0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a0,edx
c001d6d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d6dc:	83 c4 0c             	add    esp,0xc
c001d6df:	89 14 85 c0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c40],edx
c001d6e6:	6a 01                	push   0x1
c001d6e8:	53                   	push   ebx
c001d6e9:	56                   	push   esi
c001d6ea:	e8 c2 f6 ff ff       	call   c001cdb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d6ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d6fb:	0f 85 89 00 00 00    	jne    c001d78a <Thr::loadDLL(char const*, bool)+0x220>
c001d701:	89 f8                	mov    eax,edi
c001d703:	84 c0                	test   al,al
c001d705:	74 73                	je     c001d77a <Thr::loadDLL(char const*, bool)+0x210>
c001d707:	83 ec 0c             	sub    esp,0xc
c001d70a:	68 84 c7 02 c0       	push   0xc002c784
c001d70f:	e8 89 cc ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	eb 61                	jmp    c001d77a <Thr::loadDLL(char const*, bool)+0x210>
c001d719:	50                   	push   eax
c001d71a:	50                   	push   eax
c001d71b:	89 e8                	mov    eax,ebp
c001d71d:	c1 e0 0c             	shl    eax,0xc
c001d720:	01 d8                	add    eax,ebx
c001d722:	50                   	push   eax
c001d723:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c001d729:	e8 10 42 ff ff       	call   c001193e <VAS::getPageTableEntry(unsigned long)>
c001d72e:	83 c4 10             	add    esp,0x10
c001d731:	8b 00                	mov    eax,DWORD PTR [eax]
c001d733:	a8 60                	test   al,0x60
c001d735:	75 11                	jne    c001d748 <Thr::loadDLL(char const*, bool)+0x1de>
c001d737:	83 ec 0c             	sub    esp,0xc
c001d73a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d73f:	50                   	push   eax
c001d740:	e8 ed 25 ff ff       	call   c000fd32 <Phys::freePage(unsigned long)>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	45                   	inc    ebp
c001d749:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d74d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d751:	05 ff 0f 00 00       	add    eax,0xfff
c001d756:	bf 00 00 00 00       	mov    edi,0x0
c001d75b:	83 d2 00             	adc    edx,0x0
c001d75e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d762:	c1 ea 0c             	shr    edx,0xc
c001d765:	39 c5                	cmp    ebp,eax
c001d767:	89 d1                	mov    ecx,edx
c001d769:	89 f8                	mov    eax,edi
c001d76b:	19 c8                	sbb    eax,ecx
c001d76d:	72 aa                	jb     c001d719 <Thr::loadDLL(char const*, bool)+0x1af>
c001d76f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d774:	75 18                	jne    c001d78e <Thr::loadDLL(char const*, bool)+0x224>
c001d776:	31 db                	xor    ebx,ebx
c001d778:	eb 14                	jmp    c001d78e <Thr::loadDLL(char const*, bool)+0x224>
c001d77a:	83 ec 0c             	sub    esp,0xc
c001d77d:	68 a3 c7 02 c0       	push   0xc002c7a3
c001d782:	e8 16 cc ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	31 ed                	xor    ebp,ebp
c001d78c:	eb bb                	jmp    c001d749 <Thr::loadDLL(char const*, bool)+0x1df>
c001d78e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d794:	89 d8                	mov    eax,ebx
c001d796:	5b                   	pop    ebx
c001d797:	5e                   	pop    esi
c001d798:	5f                   	pop    edi
c001d799:	5d                   	pop    ebp
c001d79a:	c3                   	ret    

c001d79b <Thr::executeDLL(unsigned long, void*)>:
c001d79b:	56                   	push   esi
c001d79c:	53                   	push   ebx
c001d79d:	52                   	push   edx
c001d79e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d7a6:	85 db                	test   ebx,ebx
c001d7a8:	75 10                	jne    c001d7ba <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d7aa:	83 ec 0c             	sub    esp,0xc
c001d7ad:	68 bf c7 02 c0       	push   0xc002c7bf
c001d7b2:	e8 e6 cb ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	50                   	push   eax
c001d7bb:	50                   	push   eax
c001d7bc:	53                   	push   ebx
c001d7bd:	68 e9 c7 02 c0       	push   0xc002c7e9
c001d7c2:	e8 38 52 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001d7c7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7cb:	89 d8                	mov    eax,ebx
c001d7cd:	83 c4 14             	add    esp,0x14
c001d7d0:	5b                   	pop    ebx
c001d7d1:	5e                   	pop    esi
c001d7d2:	ff e0                	jmp    eax

c001d7d4 <userModeEntryPoint(void*)>:
c001d7d4:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001d7d9:	48                   	dec    eax
c001d7da:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001d7df:	75 01                	jne    c001d7e2 <userModeEntryPoint(void*)+0xe>
c001d7e1:	fb                   	sti    
c001d7e2:	fb                   	sti    
c001d7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d7eb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d7f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7f5:	e9 30 2b fe ff       	jmp    c000032a <goToUsermode>

c001d7fa <changeTSS>:
c001d7fa:	83 ec 14             	sub    esp,0x14
c001d7fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d802:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d805:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d80a:	c1 e2 15             	shl    edx,0x15
c001d80d:	29 d0                	sub    eax,edx
c001d80f:	50                   	push   eax
c001d810:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001d815:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d81b:	05 7c 11 00 00       	add    eax,0x117c
c001d820:	50                   	push   eax
c001d821:	e8 5c 37 ff ff       	call   c0010f82 <TSS::setESP(unsigned long)>
c001d826:	83 c4 1c             	add    esp,0x1c
c001d829:	c3                   	ret    

c001d82a <switchToThread(ThreadControlBlock*)>:
c001d82a:	57                   	push   edi
c001d82b:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001d830:	56                   	push   esi
c001d831:	85 c0                	test   eax,eax
c001d833:	53                   	push   ebx
c001d834:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d838:	0f 85 88 00 00 00    	jne    c001d8c6 <switchToThread(ThreadControlBlock*)+0x9c>
c001d83e:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d841:	3c ff                	cmp    al,0xff
c001d843:	74 7d                	je     c001d8c2 <switchToThread(ThreadControlBlock*)+0x98>
c001d845:	0f b6 d0             	movzx  edx,al
c001d848:	b8 84 03 00 00       	mov    eax,0x384
c001d84d:	29 d0                	sub    eax,edx
c001d84f:	c1 e0 10             	shl    eax,0x10
c001d852:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d855:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d858:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001d85d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d863:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d86a:	74 4a                	je     c001d8b6 <switchToThread(ThreadControlBlock*)+0x8c>
c001d86c:	0f 31                	rdtsc  
c001d86e:	a3 a8 fb 02 c0       	mov    ds:0xc002fba8,eax
c001d873:	89 c6                	mov    esi,eax
c001d875:	89 d7                	mov    edi,edx
c001d877:	2b 35 98 fb 02 c0    	sub    esi,DWORD PTR ds:0xc002fb98
c001d87d:	89 15 ac fb 02 c0    	mov    DWORD PTR ds:0xc002fbac,edx
c001d883:	1b 3d 9c fb 02 c0    	sbb    edi,DWORD PTR ds:0xc002fb9c
c001d889:	89 35 a0 fb 02 c0    	mov    DWORD PTR ds:0xc002fba0,esi
c001d88f:	a3 98 fb 02 c0       	mov    ds:0xc002fb98,eax
c001d894:	89 3d a4 fb 02 c0    	mov    DWORD PTR ds:0xc002fba4,edi
c001d89a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d8a0:	89 15 9c fb 02 c0    	mov    DWORD PTR ds:0xc002fb9c,edx
c001d8a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d8ac:	01 c6                	add    esi,eax
c001d8ae:	11 d7                	adc    edi,edx
c001d8b0:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d8b3:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d8b6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d8ba:	5b                   	pop    ebx
c001d8bb:	5e                   	pop    esi
c001d8bc:	5f                   	pop    edi
c001d8bd:	e9 a0 2a fe ff       	jmp    c0000362 <switchToThreadASM>
c001d8c2:	31 c0                	xor    eax,eax
c001d8c4:	eb 8f                	jmp    c001d855 <switchToThread(ThreadControlBlock*)+0x2b>
c001d8c6:	5b                   	pop    ebx
c001d8c7:	c7 05 60 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x1
c001d8d1:	5e                   	pop    esi
c001d8d2:	5f                   	pop    edi
c001d8d3:	c3                   	ret    

c001d8d4 <Process::addArgs(char**)>:
c001d8d4:	57                   	push   edi
c001d8d5:	56                   	push   esi
c001d8d6:	53                   	push   ebx
c001d8d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8df:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d8e9:	85 ff                	test   edi,edi
c001d8eb:	74 3d                	je     c001d92a <Process::addArgs(char**)+0x56>
c001d8ed:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8ef:	85 c0                	test   eax,eax
c001d8f1:	74 37                	je     c001d92a <Process::addArgs(char**)+0x56>
c001d8f3:	31 db                	xor    ebx,ebx
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	50                   	push   eax
c001d8f9:	e8 6e 2e fe ff       	call   c000076c <strlen>
c001d8fe:	40                   	inc    eax
c001d8ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001d902:	e8 a0 20 ff ff       	call   c000f9a7 <malloc>
c001d907:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d90e:	5a                   	pop    edx
c001d90f:	59                   	pop    ecx
c001d910:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d913:	43                   	inc    ebx
c001d914:	50                   	push   eax
c001d915:	e8 f2 2e fe ff       	call   c000080c <strcpy>
c001d91a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d920:	83 c4 10             	add    esp,0x10
c001d923:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d926:	85 c0                	test   eax,eax
c001d928:	75 cb                	jne    c001d8f5 <Process::addArgs(char**)+0x21>
c001d92a:	5b                   	pop    ebx
c001d92b:	5e                   	pop    esi
c001d92c:	5f                   	pop    edi
c001d92d:	c3                   	ret    

c001d92e <Process::Process(char const*, Process*, char**)>:
c001d92e:	56                   	push   esi
c001d92f:	53                   	push   ebx
c001d930:	83 ec 14             	sub    esp,0x14
c001d933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d937:	05 0c 02 00 00       	add    eax,0x20c
c001d93c:	bb 07 00 00 00       	mov    ebx,0x7
c001d941:	89 c6                	mov    esi,eax
c001d943:	85 db                	test   ebx,ebx
c001d945:	78 12                	js     c001d959 <Process::Process(char const*, Process*, char**)+0x2b>
c001d947:	83 ec 0c             	sub    esp,0xc
c001d94a:	56                   	push   esi
c001d94b:	e8 f6 b7 00 00       	call   c0029146 <ThreadControlBlock::ThreadControlBlock()>
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	83 c6 63             	add    esi,0x63
c001d956:	4b                   	dec    ebx
c001d957:	eb ea                	jmp    c001d943 <Process::Process(char const*, Process*, char**)+0x15>
c001d959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d95d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d964:	83 ec 0c             	sub    esp,0xc
c001d967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d96b:	e8 b6 c8 ff ff       	call   c001a226 <Krnl::newProcessEnv(Process*)>
c001d970:	83 c4 10             	add    esp,0x10
c001d973:	89 c2                	mov    edx,eax
c001d975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d979:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d983:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d98c:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001d991:	8d 50 01             	lea    edx,[eax+0x1]
c001d994:	89 15 f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,edx
c001d99a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d99e:	89 02                	mov    DWORD PTR [edx],eax
c001d9a0:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d9a8:	83 ec 0c             	sub    esp,0xc
c001d9ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9af:	e8 f3 1f ff ff       	call   c000f9a7 <malloc>
c001d9b4:	83 c4 10             	add    esp,0x10
c001d9b7:	89 c3                	mov    ebx,eax
c001d9b9:	83 ec 08             	sub    esp,0x8
c001d9bc:	6a 00                	push   0x0
c001d9be:	53                   	push   ebx
c001d9bf:	e8 ba 47 ff ff       	call   c001217e <VAS::VAS(bool)>
c001d9c4:	83 c4 10             	add    esp,0x10
c001d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d9d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9e7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9f7:	85 c0                	test   eax,eax
c001d9f9:	74 42                	je     c001da3d <Process::Process(char const*, Process*, char**)+0x10f>
c001d9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ff:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da05:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da19:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da1f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da29:	05 0c 01 00 00       	add    eax,0x10c
c001da2e:	83 ec 08             	sub    esp,0x8
c001da31:	52                   	push   edx
c001da32:	50                   	push   eax
c001da33:	e8 d4 2d fe ff       	call   c000080c <strcpy>
c001da38:	83 c4 10             	add    esp,0x10
c001da3b:	eb 63                	jmp    c001daa0 <Process::Process(char const*, Process*, char**)+0x172>
c001da3d:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001da45:	83 ec 0c             	sub    esp,0xc
c001da48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da4c:	e8 56 1f ff ff       	call   c000f9a7 <malloc>
c001da51:	83 c4 10             	add    esp,0x10
c001da54:	89 c3                	mov    ebx,eax
c001da56:	83 ec 08             	sub    esp,0x8
c001da59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da5d:	53                   	push   ebx
c001da5e:	e8 31 32 ff ff       	call   c0010c94 <VgaText::VgaText(char const*)>
c001da63:	83 c4 10             	add    esp,0x10
c001da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da6a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da74:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da7a:	83 ec 0c             	sub    esp,0xc
c001da7d:	50                   	push   eax
c001da7e:	e8 d0 29 ff ff       	call   c0010453 <addToTerminalCycle(VgaText*)>
c001da83:	83 c4 10             	add    esp,0x10
c001da86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8a:	05 0c 01 00 00       	add    eax,0x10c
c001da8f:	83 ec 08             	sub    esp,0x8
c001da92:	68 08 c8 02 c0       	push   0xc002c808
c001da97:	50                   	push   eax
c001da98:	e8 6f 2d fe ff       	call   c000080c <strcpy>
c001da9d:	83 c4 10             	add    esp,0x10
c001daa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa4:	83 c0 0c             	add    eax,0xc
c001daa7:	83 ec 08             	sub    esp,0x8
c001daaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daae:	50                   	push   eax
c001daaf:	e8 58 2d fe ff       	call   c000080c <strcpy>
c001dab4:	83 c4 10             	add    esp,0x10
c001dab7:	83 ec 08             	sub    esp,0x8
c001daba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dabe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dac2:	e8 0d fe ff ff       	call   c001d8d4 <Process::addArgs(char**)>
c001dac7:	83 c4 10             	add    esp,0x10
c001daca:	83 ec 08             	sub    esp,0x8
c001dacd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad5:	e8 a1 ed ff ff       	call   c001c87b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dae1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dae5:	83 f0 01             	xor    eax,0x1
c001dae8:	88 c2                	mov    dl,al
c001daea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daee:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001daf4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001daf9:	83 ec 08             	sub    esp,0x8
c001dafc:	50                   	push   eax
c001dafd:	68 60 c8 02 c0       	push   0xc002c860
c001db02:	e8 f8 4e ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001db07:	83 c4 10             	add    esp,0x10
c001db0a:	90                   	nop
c001db0b:	83 c4 14             	add    esp,0x14
c001db0e:	5b                   	pop    ebx
c001db0f:	5e                   	pop    esi
c001db10:	c3                   	ret    
c001db11:	90                   	nop

c001db12 <Process::Process(bool, char const*, Process*, char**)>:
c001db12:	56                   	push   esi
c001db13:	53                   	push   ebx
c001db14:	83 ec 24             	sub    esp,0x24
c001db17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001db1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db23:	05 0c 02 00 00       	add    eax,0x20c
c001db28:	bb 07 00 00 00       	mov    ebx,0x7
c001db2d:	89 c6                	mov    esi,eax
c001db2f:	85 db                	test   ebx,ebx
c001db31:	78 12                	js     c001db45 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db33:	83 ec 0c             	sub    esp,0xc
c001db36:	56                   	push   esi
c001db37:	e8 0a b6 00 00       	call   c0029146 <ThreadControlBlock::ThreadControlBlock()>
c001db3c:	83 c4 10             	add    esp,0x10
c001db3f:	83 c6 63             	add    esi,0x63
c001db42:	4b                   	dec    ebx
c001db43:	eb ea                	jmp    c001db2f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db49:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db50:	83 ec 0c             	sub    esp,0xc
c001db53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db57:	e8 ca c6 ff ff       	call   c001a226 <Krnl::newProcessEnv(Process*)>
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	89 c2                	mov    edx,eax
c001db61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db65:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db6f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db78:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001db7d:	8d 50 01             	lea    edx,[eax+0x1]
c001db80:	89 15 f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,edx
c001db86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db8a:	89 02                	mov    DWORD PTR [edx],eax
c001db8c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db94:	83 ec 0c             	sub    esp,0xc
c001db97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db9b:	e8 07 1e ff ff       	call   c000f9a7 <malloc>
c001dba0:	83 c4 10             	add    esp,0x10
c001dba3:	89 c3                	mov    ebx,eax
c001dba5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dbaa:	83 ec 08             	sub    esp,0x8
c001dbad:	50                   	push   eax
c001dbae:	53                   	push   ebx
c001dbaf:	e8 ca 45 ff ff       	call   c001217e <VAS::VAS(bool)>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dbd7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbe7:	85 c0                	test   eax,eax
c001dbe9:	74 42                	je     c001dc2d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dbeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbf5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbff:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc09:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc0f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc19:	05 0c 01 00 00       	add    eax,0x10c
c001dc1e:	83 ec 08             	sub    esp,0x8
c001dc21:	52                   	push   edx
c001dc22:	50                   	push   eax
c001dc23:	e8 e4 2b fe ff       	call   c000080c <strcpy>
c001dc28:	83 c4 10             	add    esp,0x10
c001dc2b:	eb 63                	jmp    c001dc90 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc2d:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dc35:	83 ec 0c             	sub    esp,0xc
c001dc38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc3c:	e8 66 1d ff ff       	call   c000f9a7 <malloc>
c001dc41:	83 c4 10             	add    esp,0x10
c001dc44:	89 c3                	mov    ebx,eax
c001dc46:	83 ec 08             	sub    esp,0x8
c001dc49:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc4d:	53                   	push   ebx
c001dc4e:	e8 41 30 ff ff       	call   c0010c94 <VgaText::VgaText(char const*)>
c001dc53:	83 c4 10             	add    esp,0x10
c001dc56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc64:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc6a:	83 ec 0c             	sub    esp,0xc
c001dc6d:	50                   	push   eax
c001dc6e:	e8 e0 27 ff ff       	call   c0010453 <addToTerminalCycle(VgaText*)>
c001dc73:	83 c4 10             	add    esp,0x10
c001dc76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc7a:	05 0c 01 00 00       	add    eax,0x10c
c001dc7f:	83 ec 08             	sub    esp,0x8
c001dc82:	68 08 c8 02 c0       	push   0xc002c808
c001dc87:	50                   	push   eax
c001dc88:	e8 7f 2b fe ff       	call   c000080c <strcpy>
c001dc8d:	83 c4 10             	add    esp,0x10
c001dc90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc94:	83 c0 0c             	add    eax,0xc
c001dc97:	83 ec 08             	sub    esp,0x8
c001dc9a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc9e:	50                   	push   eax
c001dc9f:	e8 68 2b fe ff       	call   c000080c <strcpy>
c001dca4:	83 c4 10             	add    esp,0x10
c001dca7:	83 ec 08             	sub    esp,0x8
c001dcaa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dcae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcb2:	e8 1d fc ff ff       	call   c001d8d4 <Process::addArgs(char**)>
c001dcb7:	83 c4 10             	add    esp,0x10
c001dcba:	90                   	nop
c001dcbb:	83 c4 24             	add    esp,0x24
c001dcbe:	5b                   	pop    ebx
c001dcbf:	5e                   	pop    esi
c001dcc0:	c3                   	ret    

c001dcc1 <taskStartupFunction>:
c001dcc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcc6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dcc9:	c3                   	ret    

c001dcca <Semaphore::Semaphore(int)>:
c001dcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcd2:	89 10                	mov    DWORD PTR [eax],edx
c001dcd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcd8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dcdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dce3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dcea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dcf5:	90                   	nop
c001dcf6:	c3                   	ret    
c001dcf7:	90                   	nop

c001dcf8 <Mutex::Mutex()>:
c001dcf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcfc:	6a 01                	push   0x1
c001dcfe:	50                   	push   eax
c001dcff:	e8 c6 ff ff ff       	call   c001dcca <Semaphore::Semaphore(int)>
c001dd04:	83 c4 08             	add    esp,0x8
c001dd07:	90                   	nop
c001dd08:	c3                   	ret    
c001dd09:	90                   	nop

c001dd0a <Process::createThread(void (*)(void*), void*, int)>:
c001dd0a:	55                   	push   ebp
c001dd0b:	31 c9                	xor    ecx,ecx
c001dd0d:	57                   	push   edi
c001dd0e:	56                   	push   esi
c001dd0f:	53                   	push   ebx
c001dd10:	83 ec 1c             	sub    esp,0x1c
c001dd13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd17:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dd1e:	89 f2                	mov    edx,esi
c001dd20:	0f b7 c2             	movzx  eax,dx
c001dd23:	83 e2 01             	and    edx,0x1
c001dd26:	74 16                	je     c001dd3e <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dd28:	d1 f8                	sar    eax,1
c001dd2a:	41                   	inc    ecx
c001dd2b:	89 c2                	mov    edx,eax
c001dd2d:	83 f9 10             	cmp    ecx,0x10
c001dd30:	75 ee                	jne    c001dd20 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dd32:	83 c4 1c             	add    esp,0x1c
c001dd35:	31 db                	xor    ebx,ebx
c001dd37:	89 d8                	mov    eax,ebx
c001dd39:	5b                   	pop    ebx
c001dd3a:	5e                   	pop    esi
c001dd3b:	5f                   	pop    edi
c001dd3c:	5d                   	pop    ebp
c001dd3d:	c3                   	ret    
c001dd3e:	b8 01 00 00 00       	mov    eax,0x1
c001dd43:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dd46:	d3 e0                	shl    eax,cl
c001dd48:	09 c6                	or     esi,eax
c001dd4a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dd4d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dd54:	89 c6                	mov    esi,eax
c001dd56:	c1 e6 05             	shl    esi,0x5
c001dd59:	01 f0                	add    eax,esi
c001dd5b:	01 d8                	add    eax,ebx
c001dd5d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dd64:	75 0a                	jne    c001dd70 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dd66:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dd70:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd76:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dd7a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dd7d:	01 ca                	add    edx,ecx
c001dd7f:	83 ec 08             	sub    esp,0x8
c001dd82:	89 d0                	mov    eax,edx
c001dd84:	c1 e0 05             	shl    eax,0x5
c001dd87:	01 d0                	add    eax,edx
c001dd89:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dd8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd91:	01 d8                	add    eax,ebx
c001dd93:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dd99:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dd9f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dda5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ddab:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ddb1:	89 cd                	mov    ebp,ecx
c001ddb3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001ddb7:	f7 dd                	neg    ebp
c001ddb9:	c1 e5 15             	shl    ebp,0x15
c001ddbc:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001ddc2:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001ddc8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001ddd2:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001ddd8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dde2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ddec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddf0:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001ddf7:	53                   	push   ebx
c001ddf8:	68 84 fb 02 c0       	push   0xc002fb84
c001ddfd:	e8 fe b0 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de02:	89 d8                	mov    eax,ebx
c001de04:	83 c4 10             	add    esp,0x10
c001de07:	83 c4 1c             	add    esp,0x1c
c001de0a:	5b                   	pop    ebx
c001de0b:	5e                   	pop    esi
c001de0c:	5f                   	pop    edi
c001de0d:	5d                   	pop    ebp
c001de0e:	c3                   	ret    
c001de0f:	90                   	nop

c001de10 <Process::createUserThread()>:
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	68 80 00 00 00       	push   0x80
c001de18:	6a 00                	push   0x0
c001de1a:	68 d4 d7 01 c0       	push   0xc001d7d4
c001de1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de23:	e8 e2 fe ff ff       	call   c001dd0a <Process::createThread(void (*)(void*), void*, int)>
c001de28:	83 c4 1c             	add    esp,0x1c
c001de2b:	c3                   	ret    

c001de2c <setupMultitasking(void (*)())>:
c001de2c:	56                   	push   esi
c001de2d:	53                   	push   ebx
c001de2e:	51                   	push   ecx
c001de2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de33:	eb 10                	jmp    c001de45 <setupMultitasking(void (*)())+0x19>
c001de35:	83 ec 0c             	sub    esp,0xc
c001de38:	68 84 fb 02 c0       	push   0xc002fb84
c001de3d:	e8 10 b0 00 00       	call   c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de42:	83 c4 10             	add    esp,0x10
c001de45:	83 ec 0c             	sub    esp,0xc
c001de48:	68 84 fb 02 c0       	push   0xc002fb84
c001de4d:	e8 dc af 00 00       	call   c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de52:	83 c4 10             	add    esp,0x10
c001de55:	84 c0                	test   al,al
c001de57:	74 dc                	je     c001de35 <setupMultitasking(void (*)())+0x9>
c001de59:	83 ec 0c             	sub    esp,0xc
c001de5c:	68 3f 07 00 00       	push   0x73f
c001de61:	e8 41 1b ff ff       	call   c000f9a7 <malloc>
c001de66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de6d:	89 c3                	mov    ebx,eax
c001de6f:	6a 00                	push   0x0
c001de71:	68 0c c8 02 c0       	push   0xc002c80c
c001de76:	6a 01                	push   0x1
c001de78:	50                   	push   eax
c001de79:	e8 94 fc ff ff       	call   c001db12 <Process::Process(bool, char const*, Process*, char**)>
c001de7e:	83 c4 14             	add    esp,0x14
c001de81:	89 1d 90 fb 02 c0    	mov    DWORD PTR ds:0xc002fb90,ebx
c001de87:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001de8d:	e8 cf 28 ff ff       	call   c0010761 <setActiveTerminal(VgaText*)>
c001de92:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001de9a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dea4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001deaa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dead:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001deb7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001debd:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dec3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001decd:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001ded7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dee1:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dee7:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001def1:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001def7:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df01:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df07:	58                   	pop    eax
c001df08:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df0e:	5a                   	pop    edx
c001df0f:	68 08 c8 02 c0       	push   0xc002c808
c001df14:	50                   	push   eax
c001df15:	e8 f2 28 fe ff       	call   c000080c <strcpy>
c001df1a:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df21:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df25:	83 c4 14             	add    esp,0x14
c001df28:	5b                   	pop    ebx
c001df29:	5e                   	pop    esi
c001df2a:	e9 25 24 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001df2f <schedule()>:
c001df2f:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001df34:	85 c0                	test   eax,eax
c001df36:	74 0b                	je     c001df43 <schedule()+0x14>
c001df38:	c7 05 60 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x1
c001df42:	c3                   	ret    
c001df43:	53                   	push   ebx
c001df44:	83 ec 14             	sub    esp,0x14
c001df47:	68 84 fb 02 c0       	push   0xc002fb84
c001df4c:	e8 dd ae 00 00       	call   c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df51:	83 c4 10             	add    esp,0x10
c001df54:	84 c0                	test   al,al
c001df56:	75 38                	jne    c001df90 <schedule()+0x61>
c001df58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df5d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001df60:	4a                   	dec    edx
c001df61:	74 32                	je     c001df95 <schedule()+0x66>
c001df63:	83 ec 0c             	sub    esp,0xc
c001df66:	68 84 fb 02 c0       	push   0xc002fb84
c001df6b:	e8 da ae 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df70:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001df77:	89 c3                	mov    ebx,eax
c001df79:	e8 d4 ae 00 00       	call   c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df7e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001df85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df88:	e8 9d f8 ff ff       	call   c001d82a <switchToThread(ThreadControlBlock*)>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	83 c4 08             	add    esp,0x8
c001df93:	5b                   	pop    ebx
c001df94:	c3                   	ret    
c001df95:	83 ec 08             	sub    esp,0x8
c001df98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001df9f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dfa5:	68 84 fb 02 c0       	push   0xc002fb84
c001dfaa:	e8 51 af 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfaf:	83 c4 10             	add    esp,0x10
c001dfb2:	eb af                	jmp    c001df63 <schedule()+0x34>

c001dfb4 <Semaphore::tryAcquire()>:
c001dfb4:	53                   	push   ebx
c001dfb5:	83 ec 08             	sub    esp,0x8
c001dfb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfbc:	fa                   	cli    
c001dfbd:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001dfc2:	8d 50 01             	lea    edx,[eax+0x1]
c001dfc5:	89 15 68 fb 02 c0    	mov    DWORD PTR ds:0xc002fb68,edx
c001dfcb:	8b 15 64 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb64
c001dfd1:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dfd4:	89 1d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ebx
c001dfda:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dfdd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dfdf:	7c 2a                	jl     c001e00b <Semaphore::tryAcquire()+0x57>
c001dfe1:	89 15 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,edx
c001dfe7:	85 d2                	test   edx,edx
c001dfe9:	75 0a                	jne    c001dff5 <Semaphore::tryAcquire()+0x41>
c001dfeb:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001dff1:	85 d2                	test   edx,edx
c001dff3:	75 5b                	jne    c001e050 <Semaphore::tryAcquire()+0x9c>
c001dff5:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001dffa:	85 c0                	test   eax,eax
c001dffc:	74 07                	je     c001e005 <Semaphore::tryAcquire()+0x51>
c001dffe:	31 c0                	xor    eax,eax
c001e000:	83 c4 08             	add    esp,0x8
c001e003:	5b                   	pop    ebx
c001e004:	c3                   	ret    
c001e005:	fb                   	sti    
c001e006:	83 c4 08             	add    esp,0x8
c001e009:	5b                   	pop    ebx
c001e00a:	c3                   	ret    
c001e00b:	43                   	inc    ebx
c001e00c:	89 15 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,edx
c001e012:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e015:	85 d2                	test   edx,edx
c001e017:	75 1f                	jne    c001e038 <Semaphore::tryAcquire()+0x84>
c001e019:	8b 0d 60 fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb60
c001e01f:	85 c9                	test   ecx,ecx
c001e021:	74 15                	je     c001e038 <Semaphore::tryAcquire()+0x84>
c001e023:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e02d:	e8 fd fe ff ff       	call   c001df2f <schedule()>
c001e032:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e037:	48                   	dec    eax
c001e038:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e03d:	85 c0                	test   eax,eax
c001e03f:	75 08                	jne    c001e049 <Semaphore::tryAcquire()+0x95>
c001e041:	fb                   	sti    
c001e042:	b0 01                	mov    al,0x1
c001e044:	83 c4 08             	add    esp,0x8
c001e047:	5b                   	pop    ebx
c001e048:	c3                   	ret    
c001e049:	b0 01                	mov    al,0x1
c001e04b:	83 c4 08             	add    esp,0x8
c001e04e:	5b                   	pop    ebx
c001e04f:	c3                   	ret    
c001e050:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e05a:	e8 d0 fe ff ff       	call   c001df2f <schedule()>
c001e05f:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e064:	48                   	dec    eax
c001e065:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e06a:	85 c0                	test   eax,eax
c001e06c:	75 90                	jne    c001dffe <Semaphore::tryAcquire()+0x4a>
c001e06e:	eb 95                	jmp    c001e005 <Semaphore::tryAcquire()+0x51>

c001e070 <Semaphore::assertLocked(char const*)>:
c001e070:	83 ec 0c             	sub    esp,0xc
c001e073:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e077:	fa                   	cli    
c001e078:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e07e:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e083:	8d 48 01             	lea    ecx,[eax+0x1]
c001e086:	89 0d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ecx
c001e08c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e08e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e091:	7c 24                	jl     c001e0b7 <Semaphore::assertLocked(char const*)+0x47>
c001e093:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e098:	85 c0                	test   eax,eax
c001e09a:	75 09                	jne    c001e0a5 <Semaphore::assertLocked(char const*)+0x35>
c001e09c:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e0a1:	85 c0                	test   eax,eax
c001e0a3:	75 29                	jne    c001e0ce <Semaphore::assertLocked(char const*)+0x5e>
c001e0a5:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e0aa:	48                   	dec    eax
c001e0ab:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e0b0:	75 01                	jne    c001e0b3 <Semaphore::assertLocked(char const*)+0x43>
c001e0b2:	fb                   	sti    
c001e0b3:	83 c4 0c             	add    esp,0xc
c001e0b6:	c3                   	ret    
c001e0b7:	83 ec 0c             	sub    esp,0xc
c001e0ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e0be:	e8 da c2 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001e0c3:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e0c8:	83 c4 10             	add    esp,0x10
c001e0cb:	48                   	dec    eax
c001e0cc:	eb c5                	jmp    c001e093 <Semaphore::assertLocked(char const*)+0x23>
c001e0ce:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e0d8:	e8 52 fe ff ff       	call   c001df2f <schedule()>
c001e0dd:	eb c6                	jmp    c001e0a5 <Semaphore::assertLocked(char const*)+0x35>

c001e0df <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0df:	83 ec 0c             	sub    esp,0xc
c001e0e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0ee:	e8 3c fe ff ff       	call   c001df2f <schedule()>
c001e0f3:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e0f8:	48                   	dec    eax
c001e0f9:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e0fe:	75 01                	jne    c001e101 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001e100:	fb                   	sti    
c001e101:	83 c4 0c             	add    esp,0xc
c001e104:	c3                   	ret    

c001e105 <blockTask(TaskState)>:
c001e105:	83 ec 0c             	sub    esp,0xc
c001e108:	fa                   	cli    
c001e109:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e10f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e113:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e118:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e11b:	e8 0f fe ff ff       	call   c001df2f <schedule()>
c001e120:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e125:	48                   	dec    eax
c001e126:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e12b:	75 01                	jne    c001e12e <blockTask(TaskState)+0x29>
c001e12d:	fb                   	sti    
c001e12e:	83 c4 0c             	add    esp,0xc
c001e131:	c3                   	ret    

c001e132 <waitTask(int, int*, int)>:
c001e132:	83 ec 18             	sub    esp,0x18
c001e135:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e13a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e13e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e141:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e14d:	6a 07                	push   0x7
c001e14f:	e8 b1 ff ff ff       	call   c001e105 <blockTask(TaskState)>
c001e154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e15f:	85 d2                	test   edx,edx
c001e161:	74 0a                	je     c001e16d <waitTask(int, int*, int)+0x3b>
c001e163:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e166:	89 02                	mov    DWORD PTR [edx],eax
c001e168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e16d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e170:	83 c4 0c             	add    esp,0xc
c001e173:	c3                   	ret    

c001e174 <nanoSleepUntil(unsigned long long)>:
c001e174:	83 ec 0c             	sub    esp,0xc
c001e177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e17f:	3b 05 d0 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ecd0
c001e185:	89 d1                	mov    ecx,edx
c001e187:	1b 0d d4 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ecd4
c001e18d:	73 04                	jae    c001e193 <nanoSleepUntil(unsigned long long)+0x1f>
c001e18f:	83 c4 0c             	add    esp,0xc
c001e192:	c3                   	ret    
c001e193:	fa                   	cli    
c001e194:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e19a:	83 ec 08             	sub    esp,0x8
c001e19d:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001e1a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1a9:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e1ac:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e1af:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1b5:	68 78 fb 02 c0       	push   0xc002fb78
c001e1ba:	e8 41 ad 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1c6:	e8 3a ff ff ff       	call   c001e105 <blockTask(TaskState)>
c001e1cb:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	48                   	dec    eax
c001e1d4:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e1d9:	85 c0                	test   eax,eax
c001e1db:	75 09                	jne    c001e1e6 <nanoSleepUntil(unsigned long long)+0x72>
c001e1dd:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e1e2:	85 c0                	test   eax,eax
c001e1e4:	75 12                	jne    c001e1f8 <nanoSleepUntil(unsigned long long)+0x84>
c001e1e6:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e1eb:	48                   	dec    eax
c001e1ec:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e1f1:	75 9c                	jne    c001e18f <nanoSleepUntil(unsigned long long)+0x1b>
c001e1f3:	fb                   	sti    
c001e1f4:	83 c4 0c             	add    esp,0xc
c001e1f7:	c3                   	ret    
c001e1f8:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e202:	e8 28 fd ff ff       	call   c001df2f <schedule()>
c001e207:	eb dd                	jmp    c001e1e6 <nanoSleepUntil(unsigned long long)+0x72>

c001e209 <nanoSleep(unsigned long long)>:
c001e209:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c001e20e:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c001e214:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e218:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e21c:	e9 53 ff ff ff       	jmp    c001e174 <nanoSleepUntil(unsigned long long)>

c001e221 <sleep(unsigned long long)>:
c001e221:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e229:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e22e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e232:	01 ca                	add    edx,ecx
c001e234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e238:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e23c:	eb cb                	jmp    c001e209 <nanoSleep(unsigned long long)>

c001e23e <Semaphore::acquire()>:
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e245:	fa                   	cli    
c001e246:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e24b:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e251:	8d 48 01             	lea    ecx,[eax+0x1]
c001e254:	89 0d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ecx
c001e25a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e25d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e25f:	7d 28                	jge    c001e289 <Semaphore::acquire()+0x4b>
c001e261:	41                   	inc    ecx
c001e262:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e265:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e26a:	85 c0                	test   eax,eax
c001e26c:	75 09                	jne    c001e277 <Semaphore::acquire()+0x39>
c001e26e:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e273:	85 c0                	test   eax,eax
c001e275:	75 5d                	jne    c001e2d4 <Semaphore::acquire()+0x96>
c001e277:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e27c:	48                   	dec    eax
c001e27d:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e282:	75 01                	jne    c001e285 <Semaphore::acquire()+0x47>
c001e284:	fb                   	sti    
c001e285:	83 c4 0c             	add    esp,0xc
c001e288:	c3                   	ret    
c001e289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e28e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e295:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e298:	85 c9                	test   ecx,ecx
c001e29a:	74 49                	je     c001e2e5 <Semaphore::acquire()+0xa7>
c001e29c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e29f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2a5:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e2a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ad:	83 ec 0c             	sub    esp,0xc
c001e2b0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e2b3:	68 88 c8 02 c0       	push   0xc002c888
c001e2b8:	e8 42 47 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001e2bd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e2c4:	e8 3c fe ff ff       	call   c001e105 <blockTask(TaskState)>
c001e2c9:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e2ce:	83 c4 10             	add    esp,0x10
c001e2d1:	48                   	dec    eax
c001e2d2:	eb 91                	jmp    c001e265 <Semaphore::acquire()+0x27>
c001e2d4:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e2de:	e8 4c fc ff ff       	call   c001df2f <schedule()>
c001e2e3:	eb 92                	jmp    c001e277 <Semaphore::acquire()+0x39>
c001e2e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e2ed:	eb b9                	jmp    c001e2a8 <Semaphore::acquire()+0x6a>

c001e2ef <taskReturned>:
c001e2ef:	83 ec 18             	sub    esp,0x18
c001e2f2:	68 a8 c8 02 c0       	push   0xc002c8a8
c001e2f7:	e8 a1 c0 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001e2fc:	83 c4 10             	add    esp,0x10
c001e2ff:	83 ec 0c             	sub    esp,0xc
c001e302:	6a 02                	push   0x2
c001e304:	e8 fc fd ff ff       	call   c001e105 <blockTask(TaskState)>
c001e309:	fa                   	cli    
c001e30a:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e310:	e8 1a fc ff ff       	call   c001df2f <schedule()>
c001e315:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e31a:	83 c4 10             	add    esp,0x10
c001e31d:	48                   	dec    eax
c001e31e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e323:	85 c0                	test   eax,eax
c001e325:	75 d8                	jne    c001e2ff <taskReturned+0x10>
c001e327:	fb                   	sti    
c001e328:	eb d5                	jmp    c001e2ff <taskReturned+0x10>

c001e32a <Thr::processFromPID(int)>:
c001e32a:	57                   	push   edi
c001e32b:	56                   	push   esi
c001e32c:	53                   	push   ebx
c001e32d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e331:	fa                   	cli    
c001e332:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e338:	83 ec 0c             	sub    esp,0xc
c001e33b:	68 84 fb 02 c0       	push   0xc002fb84
c001e340:	e8 05 ab 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e345:	83 c4 10             	add    esp,0x10
c001e348:	89 c7                	mov    edi,eax
c001e34a:	eb 14                	jmp    c001e360 <Thr::processFromPID(int)+0x36>
c001e34c:	83 ec 0c             	sub    esp,0xc
c001e34f:	68 84 fb 02 c0       	push   0xc002fb84
c001e354:	e8 f1 aa 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e359:	83 c4 10             	add    esp,0x10
c001e35c:	39 f8                	cmp    eax,edi
c001e35e:	74 49                	je     c001e3a9 <Thr::processFromPID(int)+0x7f>
c001e360:	83 ec 0c             	sub    esp,0xc
c001e363:	68 84 fb 02 c0       	push   0xc002fb84
c001e368:	e8 dd aa 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e36d:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e374:	89 c3                	mov    ebx,eax
c001e376:	e8 d7 aa 00 00       	call   c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e37b:	58                   	pop    eax
c001e37c:	5a                   	pop    edx
c001e37d:	53                   	push   ebx
c001e37e:	68 84 fb 02 c0       	push   0xc002fb84
c001e383:	e8 78 ab 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e388:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e38b:	83 c4 10             	add    esp,0x10
c001e38e:	39 30                	cmp    DWORD PTR [eax],esi
c001e390:	75 ba                	jne    c001e34c <Thr::processFromPID(int)+0x22>
c001e392:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e397:	48                   	dec    eax
c001e398:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e39d:	74 07                	je     c001e3a6 <Thr::processFromPID(int)+0x7c>
c001e39f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3a2:	5b                   	pop    ebx
c001e3a3:	5e                   	pop    esi
c001e3a4:	5f                   	pop    edi
c001e3a5:	c3                   	ret    
c001e3a6:	fb                   	sti    
c001e3a7:	eb f6                	jmp    c001e39f <Thr::processFromPID(int)+0x75>
c001e3a9:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e3ae:	48                   	dec    eax
c001e3af:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e3b4:	75 05                	jne    c001e3bb <Thr::processFromPID(int)+0x91>
c001e3b6:	fb                   	sti    
c001e3b7:	5b                   	pop    ebx
c001e3b8:	5e                   	pop    esi
c001e3b9:	5f                   	pop    edi
c001e3ba:	c3                   	ret    
c001e3bb:	5b                   	pop    ebx
c001e3bc:	31 c0                	xor    eax,eax
c001e3be:	5e                   	pop    esi
c001e3bf:	5f                   	pop    edi
c001e3c0:	c3                   	ret    

c001e3c1 <unblockTask(ThreadControlBlock*)>:
c001e3c1:	53                   	push   ebx
c001e3c2:	83 ec 08             	sub    esp,0x8
c001e3c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3c9:	fa                   	cli    
c001e3ca:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e3d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3d3:	85 c0                	test   eax,eax
c001e3d5:	74 5a                	je     c001e431 <unblockTask(ThreadControlBlock*)+0x70>
c001e3d7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3da:	48                   	dec    eax
c001e3db:	74 31                	je     c001e40e <unblockTask(ThreadControlBlock*)+0x4d>
c001e3dd:	83 ec 0c             	sub    esp,0xc
c001e3e0:	68 84 fb 02 c0       	push   0xc002fb84
c001e3e5:	e8 60 aa 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	85 c0                	test   eax,eax
c001e3ef:	75 17                	jne    c001e408 <unblockTask(ThreadControlBlock*)+0x47>
c001e3f1:	eb 50                	jmp    c001e443 <unblockTask(ThreadControlBlock*)+0x82>
c001e3f3:	83 ec 08             	sub    esp,0x8
c001e3f6:	50                   	push   eax
c001e3f7:	68 84 fb 02 c0       	push   0xc002fb84
c001e3fc:	e8 d1 ad 00 00       	call   c00291d2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e401:	83 c4 10             	add    esp,0x10
c001e404:	85 c0                	test   eax,eax
c001e406:	74 3b                	je     c001e443 <unblockTask(ThreadControlBlock*)+0x82>
c001e408:	39 c3                	cmp    ebx,eax
c001e40a:	75 e7                	jne    c001e3f3 <unblockTask(ThreadControlBlock*)+0x32>
c001e40c:	eb 10                	jmp    c001e41e <unblockTask(ThreadControlBlock*)+0x5d>
c001e40e:	83 ec 0c             	sub    esp,0xc
c001e411:	68 2a c8 02 c0       	push   0xc002c82a
c001e416:	e8 e4 45 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001e41b:	83 c4 10             	add    esp,0x10
c001e41e:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e423:	48                   	dec    eax
c001e424:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e429:	75 01                	jne    c001e42c <unblockTask(ThreadControlBlock*)+0x6b>
c001e42b:	fb                   	sti    
c001e42c:	83 c4 08             	add    esp,0x8
c001e42f:	5b                   	pop    ebx
c001e430:	c3                   	ret    
c001e431:	83 ec 0c             	sub    esp,0xc
c001e434:	68 13 c8 02 c0       	push   0xc002c813
c001e439:	e8 c1 45 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001e43e:	83 c4 10             	add    esp,0x10
c001e441:	eb db                	jmp    c001e41e <unblockTask(ThreadControlBlock*)+0x5d>
c001e443:	83 ec 08             	sub    esp,0x8
c001e446:	53                   	push   ebx
c001e447:	68 84 fb 02 c0       	push   0xc002fb84
c001e44c:	e8 af aa 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	eb c8                	jmp    c001e41e <unblockTask(ThreadControlBlock*)+0x5d>

c001e456 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e456:	55                   	push   ebp
c001e457:	57                   	push   edi
c001e458:	56                   	push   esi
c001e459:	53                   	push   ebx
c001e45a:	83 ec 1c             	sub    esp,0x1c
c001e45d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e461:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e464:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e46a:	85 ff                	test   edi,edi
c001e46c:	7e 20                	jle    c001e48e <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e46e:	31 f6                	xor    esi,esi
c001e470:	83 ec 0c             	sub    esp,0xc
c001e473:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e47a:	46                   	inc    esi
c001e47b:	e8 37 15 ff ff       	call   c000f9b7 <free>
c001e480:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e483:	83 c4 10             	add    esp,0x10
c001e486:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e48c:	7f e2                	jg     c001e470 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e48e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e498:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e49d:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4a0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4a3:	d3 c0                	rol    eax,cl
c001e4a5:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4ac:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4af:	89 f7                	mov    edi,esi
c001e4b1:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4b9:	0f 85 64 01 00 00    	jne    c001e623 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e4bf:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e4c5:	85 ed                	test   ebp,ebp
c001e4c7:	74 1b                	je     c001e4e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	55                   	push   ebp
c001e4cd:	e8 70 bc ff ff       	call   c001a142 <EnvVarContainer::~EnvVarContainer()>
c001e4d2:	59                   	pop    ecx
c001e4d3:	5e                   	pop    esi
c001e4d4:	6a 0c                	push   0xc
c001e4d6:	55                   	push   ebp
c001e4d7:	e8 4b 44 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c001e4dc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4df:	83 c4 10             	add    esp,0x10
c001e4e2:	89 f7                	mov    edi,esi
c001e4e4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4ea:	85 c0                	test   eax,eax
c001e4ec:	0f 84 aa 00 00 00    	je     c001e59c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4f2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4f9:	31 c9                	xor    ecx,ecx
c001e4fb:	eb 10                	jmp    c001e50d <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4fd:	41                   	inc    ecx
c001e4fe:	83 f9 10             	cmp    ecx,0x10
c001e501:	0f 84 95 00 00 00    	je     c001e59c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e507:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e50d:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e514:	d3 fa                	sar    edx,cl
c001e516:	83 e2 01             	and    edx,0x1
c001e519:	74 e2                	je     c001e4fd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e51b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e51e:	01 ca                	add    edx,ecx
c001e520:	89 d5                	mov    ebp,edx
c001e522:	c1 e5 05             	shl    ebp,0x5
c001e525:	01 ea                	add    edx,ebp
c001e527:	01 d0                	add    eax,edx
c001e529:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e52f:	83 fd 07             	cmp    ebp,0x7
c001e532:	75 c9                	jne    c001e4fd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e534:	05 40 02 00 00       	add    eax,0x240
c001e539:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e53c:	83 fd ff             	cmp    ebp,0xffffffff
c001e53f:	0f 8c e6 00 00 00    	jl     c001e62b <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e545:	0f 84 97 01 00 00    	je     c001e6e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e54b:	85 ed                	test   ebp,ebp
c001e54d:	0f 84 7e 01 00 00    	je     c001e6d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e553:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e555:	75 a6                	jne    c001e4fd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e557:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e55d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e561:	01 d0                	add    eax,edx
c001e563:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e567:	83 ec 0c             	sub    esp,0xc
c001e56a:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e570:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e573:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e579:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e580:	50                   	push   eax
c001e581:	e8 3b fe ff ff       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c001e586:	83 c4 10             	add    esp,0x10
c001e589:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e58c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e590:	89 f7                	mov    edi,esi
c001e592:	41                   	inc    ecx
c001e593:	83 f9 10             	cmp    ecx,0x10
c001e596:	0f 85 6b ff ff ff    	jne    c001e507 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e59c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5a2:	85 c0                	test   eax,eax
c001e5a4:	74 5d                	je     c001e603 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5a6:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5ac:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5b2:	74 4f                	je     c001e603 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5b4:	83 ec 0c             	sub    esp,0xc
c001e5b7:	68 84 fb 02 c0       	push   0xc002fb84
c001e5bc:	e8 89 a8 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5c1:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e5c8:	89 c7                	mov    edi,eax
c001e5ca:	e8 5f a8 00 00       	call   c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5cf:	83 c4 10             	add    esp,0x10
c001e5d2:	84 c0                	test   al,al
c001e5d4:	0f 84 c2 00 00 00    	je     c001e69c <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e5da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5dd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e5e3:	85 d2                	test   edx,edx
c001e5e5:	74 0f                	je     c001e5f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e5e7:	83 ec 0c             	sub    esp,0xc
c001e5ea:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5ec:	52                   	push   edx
c001e5ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5f3:	83 c4 10             	add    esp,0x10
c001e5f6:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e600:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e603:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e609:	85 db                	test   ebx,ebx
c001e60b:	74 16                	je     c001e623 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	53                   	push   ebx
c001e611:	e8 42 35 ff ff       	call   c0011b58 <VAS::~VAS()>
c001e616:	58                   	pop    eax
c001e617:	5a                   	pop    edx
c001e618:	6a 14                	push   0x14
c001e61a:	53                   	push   ebx
c001e61b:	e8 07 43 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c001e620:	83 c4 10             	add    esp,0x10
c001e623:	83 c4 1c             	add    esp,0x1c
c001e626:	5b                   	pop    ebx
c001e627:	5e                   	pop    esi
c001e628:	5f                   	pop    edi
c001e629:	5d                   	pop    ebp
c001e62a:	c3                   	ret    
c001e62b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e62f:	83 ec 0c             	sub    esp,0xc
c001e632:	68 dc c8 02 c0       	push   0xc002c8dc
c001e637:	e8 61 bd ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001e63c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e63f:	83 c4 10             	add    esp,0x10
c001e642:	89 f7                	mov    edi,esi
c001e644:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e648:	e9 b0 fe ff ff       	jmp    c001e4fd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e64d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e653:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e659:	75 1c                	jne    c001e677 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e65b:	83 ec 0c             	sub    esp,0xc
c001e65e:	68 44 c9 02 c0       	push   0xc002c944
c001e663:	e8 97 43 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001e668:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e66f:	e8 91 fa ff ff       	call   c001e105 <blockTask(TaskState)>
c001e674:	83 c4 10             	add    esp,0x10
c001e677:	83 ec 08             	sub    esp,0x8
c001e67a:	56                   	push   esi
c001e67b:	68 84 fb 02 c0       	push   0xc002fb84
c001e680:	e8 7b a8 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e685:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e68c:	e8 b9 a7 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	39 f8                	cmp    eax,edi
c001e696:	0f 84 3e ff ff ff    	je     c001e5da <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	68 84 fb 02 c0       	push   0xc002fb84
c001e6a4:	e8 a1 a7 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a9:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e6b0:	89 c6                	mov    esi,eax
c001e6b2:	e8 9b a7 00 00       	call   c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	39 f3                	cmp    ebx,esi
c001e6bc:	74 b9                	je     c001e677 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e6be:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6c4:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e6ca:	75 ab                	jne    c001e677 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e6cc:	e9 7c ff ff ff       	jmp    c001e64d <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e6d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6d5:	83 ec 0c             	sub    esp,0xc
c001e6d8:	68 10 c9 02 c0       	push   0xc002c910
c001e6dd:	e9 55 ff ff ff       	jmp    c001e637 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e6e2:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6eb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6ee:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e6f4:	01 d7                	add    edi,edx
c001e6f6:	89 f8                	mov    eax,edi
c001e6f8:	e9 66 fe ff ff       	jmp    c001e563 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e6fd <cleanerTaskFunction(void*)>:
c001e6fd:	53                   	push   ebx
c001e6fe:	83 ec 08             	sub    esp,0x8
c001e701:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e706:	48                   	dec    eax
c001e707:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e70c:	75 01                	jne    c001e70f <cleanerTaskFunction(void*)+0x12>
c001e70e:	fb                   	sti    
c001e70f:	fa                   	cli    
c001e710:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e715:	80 3d 4c fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb4c,0x0
c001e71c:	8d 50 01             	lea    edx,[eax+0x1]
c001e71f:	89 15 68 fb 02 c0    	mov    DWORD PTR ds:0xc002fb68,edx
c001e725:	0f 84 a1 00 00 00    	je     c001e7cc <cleanerTaskFunction(void*)+0xcf>
c001e72b:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e730:	85 c0                	test   eax,eax
c001e732:	75 01                	jne    c001e735 <cleanerTaskFunction(void*)+0x38>
c001e734:	fb                   	sti    
c001e735:	c6 05 4c fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb4c,0x0
c001e73c:	fa                   	cli    
c001e73d:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e743:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001e749:	fa                   	cli    
c001e74a:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e750:	eb 26                	jmp    c001e778 <cleanerTaskFunction(void*)+0x7b>
c001e752:	83 ec 0c             	sub    esp,0xc
c001e755:	68 6c fb 02 c0       	push   0xc002fb6c
c001e75a:	e8 eb a6 00 00       	call   c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e75f:	c7 04 24 6c fb 02 c0 	mov    DWORD PTR [esp],0xc002fb6c
c001e766:	89 c3                	mov    ebx,eax
c001e768:	e8 e5 a6 00 00       	call   c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e76d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e770:	e8 e1 fc ff ff       	call   c001e456 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e775:	83 c4 10             	add    esp,0x10
c001e778:	83 ec 0c             	sub    esp,0xc
c001e77b:	68 6c fb 02 c0       	push   0xc002fb6c
c001e780:	e8 a9 a6 00 00       	call   c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e785:	83 c4 10             	add    esp,0x10
c001e788:	84 c0                	test   al,al
c001e78a:	74 c6                	je     c001e752 <cleanerTaskFunction(void*)+0x55>
c001e78c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e791:	48                   	dec    eax
c001e792:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e797:	75 01                	jne    c001e79a <cleanerTaskFunction(void*)+0x9d>
c001e799:	fb                   	sti    
c001e79a:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e79f:	48                   	dec    eax
c001e7a0:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e7a5:	0f 85 56 ff ff ff    	jne    c001e701 <cleanerTaskFunction(void*)+0x4>
c001e7ab:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e7b0:	85 c0                	test   eax,eax
c001e7b2:	0f 84 49 ff ff ff    	je     c001e701 <cleanerTaskFunction(void*)+0x4>
c001e7b8:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e7c2:	e8 68 f7 ff ff       	call   c001df2f <schedule()>
c001e7c7:	e9 35 ff ff ff       	jmp    c001e701 <cleanerTaskFunction(void*)+0x4>
c001e7cc:	83 ec 0c             	sub    esp,0xc
c001e7cf:	6a 02                	push   0x2
c001e7d1:	e8 09 f9 ff ff       	call   c001e0df <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7d6:	83 c4 10             	add    esp,0x10
c001e7d9:	e9 57 ff ff ff       	jmp    c001e735 <cleanerTaskFunction(void*)+0x38>

c001e7de <terminateTask(int)>:
c001e7de:	83 ec 14             	sub    esp,0x14
c001e7e1:	fa                   	cli    
c001e7e2:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e7e8:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001e7ee:	fa                   	cli    
c001e7ef:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e7f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7fe:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e801:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e806:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e809:	50                   	push   eax
c001e80a:	68 6c fb 02 c0       	push   0xc002fb6c
c001e80f:	e8 ec a6 00 00       	call   c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e819:	83 c4 10             	add    esp,0x10
c001e81c:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e823:	a1 48 fb 02 c0       	mov    eax,ds:0xc002fb48
c001e828:	85 c0                	test   eax,eax
c001e82a:	74 53                	je     c001e87f <terminateTask(int)+0xa1>
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	c6 05 4c fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb4c,0x1
c001e836:	50                   	push   eax
c001e837:	e8 85 fb ff ff       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c001e83c:	83 c4 10             	add    esp,0x10
c001e83f:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e844:	48                   	dec    eax
c001e845:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e84a:	75 01                	jne    c001e84d <terminateTask(int)+0x6f>
c001e84c:	fb                   	sti    
c001e84d:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e852:	48                   	dec    eax
c001e853:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e858:	75 09                	jne    c001e863 <terminateTask(int)+0x85>
c001e85a:	83 3d 60 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb60,0x0
c001e861:	75 2e                	jne    c001e891 <terminateTask(int)+0xb3>
c001e863:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e868:	48                   	dec    eax
c001e869:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e86e:	75 01                	jne    c001e871 <terminateTask(int)+0x93>
c001e870:	fb                   	sti    
c001e871:	fa                   	cli    
c001e872:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e878:	e8 b2 f6 ff ff       	call   c001df2f <schedule()>
c001e87d:	eb e4                	jmp    c001e863 <terminateTask(int)+0x85>
c001e87f:	83 ec 0c             	sub    esp,0xc
c001e882:	68 41 c8 02 c0       	push   0xc002c841
c001e887:	e8 73 41 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001e88c:	83 c4 10             	add    esp,0x10
c001e88f:	eb ae                	jmp    c001e83f <terminateTask(int)+0x61>
c001e891:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e89b:	eb db                	jmp    c001e878 <terminateTask(int)+0x9a>

c001e89d <Thr::terminateFromIRQ(int)>:
c001e89d:	83 ec 18             	sub    esp,0x18
c001e8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a4:	e8 35 ff ff ff       	call   c001e7de <terminateTask(int)>
c001e8a9:	90                   	nop

c001e8aa <Semaphore::release()>:
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8b1:	fa                   	cli    
c001e8b2:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e8b7:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e8bd:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8c0:	89 0d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ecx
c001e8c6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e8c9:	85 c9                	test   ecx,ecx
c001e8cb:	74 3c                	je     c001e909 <Semaphore::release()+0x5f>
c001e8cd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e8d0:	83 ec 0c             	sub    esp,0xc
c001e8d3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e8d6:	51                   	push   ecx
c001e8d7:	e8 e5 fa ff ff       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c001e8dc:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e8e1:	83 c4 10             	add    esp,0x10
c001e8e4:	48                   	dec    eax
c001e8e5:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e8ea:	85 c0                	test   eax,eax
c001e8ec:	75 09                	jne    c001e8f7 <Semaphore::release()+0x4d>
c001e8ee:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e8f3:	85 c0                	test   eax,eax
c001e8f5:	75 17                	jne    c001e90e <Semaphore::release()+0x64>
c001e8f7:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e8fc:	48                   	dec    eax
c001e8fd:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e902:	75 01                	jne    c001e905 <Semaphore::release()+0x5b>
c001e904:	fb                   	sti    
c001e905:	83 c4 0c             	add    esp,0xc
c001e908:	c3                   	ret    
c001e909:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e90c:	eb d7                	jmp    c001e8e5 <Semaphore::release()+0x3b>
c001e90e:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e918:	e8 12 f6 ff ff       	call   c001df2f <schedule()>
c001e91d:	eb d8                	jmp    c001e8f7 <Semaphore::release()+0x4d>

c001e91f <__static_initialization_and_destruction_0(int, int)>:
c001e91f:	83 ec 0c             	sub    esp,0xc
c001e922:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e927:	0f 85 88 00 00 00    	jne    c001e9b5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e92d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e935:	75 7e                	jne    c001e9b5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e937:	83 ec 0c             	sub    esp,0xc
c001e93a:	68 84 fb 02 c0       	push   0xc002fb84
c001e93f:	e8 4c a8 00 00       	call   c0029190 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e944:	83 c4 10             	add    esp,0x10
c001e947:	83 ec 04             	sub    esp,0x4
c001e94a:	68 24 d4 02 c0       	push   0xc002d424
c001e94f:	68 84 fb 02 c0       	push   0xc002fb84
c001e954:	68 44 91 02 c0       	push   0xc0029144
c001e959:	e8 43 3f ff ff       	call   c00128a1 <__cxa_atexit>
c001e95e:	83 c4 10             	add    esp,0x10
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	68 78 fb 02 c0       	push   0xc002fb78
c001e969:	e8 22 a8 00 00       	call   c0029190 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	83 ec 04             	sub    esp,0x4
c001e974:	68 24 d4 02 c0       	push   0xc002d424
c001e979:	68 78 fb 02 c0       	push   0xc002fb78
c001e97e:	68 44 91 02 c0       	push   0xc0029144
c001e983:	e8 19 3f ff ff       	call   c00128a1 <__cxa_atexit>
c001e988:	83 c4 10             	add    esp,0x10
c001e98b:	83 ec 0c             	sub    esp,0xc
c001e98e:	68 6c fb 02 c0       	push   0xc002fb6c
c001e993:	e8 f8 a7 00 00       	call   c0029190 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	83 ec 04             	sub    esp,0x4
c001e99e:	68 24 d4 02 c0       	push   0xc002d424
c001e9a3:	68 6c fb 02 c0       	push   0xc002fb6c
c001e9a8:	68 44 91 02 c0       	push   0xc0029144
c001e9ad:	e8 ef 3e ff ff       	call   c00128a1 <__cxa_atexit>
c001e9b2:	83 c4 10             	add    esp,0x10
c001e9b5:	90                   	nop
c001e9b6:	83 c4 0c             	add    esp,0xc
c001e9b9:	c3                   	ret    

c001e9ba <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9ba:	83 ec 0c             	sub    esp,0xc
c001e9bd:	83 ec 08             	sub    esp,0x8
c001e9c0:	68 ff ff 00 00       	push   0xffff
c001e9c5:	6a 01                	push   0x1
c001e9c7:	e8 53 ff ff ff       	call   c001e91f <__static_initialization_and_destruction_0(int, int)>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	83 c4 0c             	add    esp,0xc
c001e9d2:	c3                   	ret    

c001e9d3 <Vm::inbv(unsigned short)>:
c001e9d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9d7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9dc:	75 06                	jne    c001e9e4 <Vm::inbv(unsigned short)+0x11>
c001e9de:	a0 cc fb 02 c0       	mov    al,ds:0xc002fbcc
c001e9e3:	c3                   	ret    
c001e9e4:	ec                   	in     al,dx
c001e9e5:	c3                   	ret    

c001e9e6 <Vm::outbv(unsigned short, unsigned char)>:
c001e9e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ee:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9f3:	75 25                	jne    c001ea1a <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e9f5:	8b 0d cc fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fbcc
c001e9fb:	8d 51 01             	lea    edx,[ecx+0x1]
c001e9fe:	88 81 e0 fb 02 c0    	mov    BYTE PTR [ecx-0x3ffd0420],al
c001ea04:	89 15 cc fb 02 c0    	mov    DWORD PTR ds:0xc002fbcc,edx
c001ea0a:	83 fa 20             	cmp    edx,0x20
c001ea0d:	75 0c                	jne    c001ea1b <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ea0f:	c7 05 cc fb 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fbcc,0x1f
c001ea19:	c3                   	ret    
c001ea1a:	ee                   	out    dx,al
c001ea1b:	c3                   	ret    

c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea26:	c1 e0 04             	shl    eax,0x4
c001ea29:	01 d0                	add    eax,edx
c001ea2b:	c3                   	ret    

c001ea2c <Vm::getSegment(unsigned int)>:
c001ea2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea30:	c1 e8 10             	shr    eax,0x10
c001ea33:	c3                   	ret    

c001ea34 <Vm::getOffset(unsigned int)>:
c001ea34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea38:	c3                   	ret    

c001ea39 <Vm::mainloop2()>:
c001ea39:	83 ec 18             	sub    esp,0x18
c001ea3c:	fa                   	cli    
c001ea3d:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001ea43:	6a 02                	push   0x2
c001ea45:	c6 05 c5 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fbc5,0x1
c001ea4c:	e8 8e f6 ff ff       	call   c001e0df <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea56:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea5a:	52                   	push   edx
c001ea5b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea5f:	52                   	push   edx
c001ea60:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea64:	52                   	push   edx
c001ea65:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea69:	50                   	push   eax
c001ea6a:	e8 8b 18 fe ff       	call   c00002fa <goToVM86>
c001ea6f:	83 c4 2c             	add    esp,0x2c
c001ea72:	c3                   	ret    

c001ea73 <Vm::mainVm8086Loop(void*)>:
c001ea73:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ea78:	48                   	dec    eax
c001ea79:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ea7e:	75 01                	jne    c001ea81 <Vm::mainVm8086Loop(void*)+0xe>
c001ea80:	fb                   	sti    
c001ea81:	eb b6                	jmp    c001ea39 <Vm::mainloop2()>

c001ea83 <Vm::mainloop3(unsigned long)>:
c001ea83:	83 ec 18             	sub    esp,0x18
c001ea86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea8a:	fa                   	cli    
c001ea8b:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001ea91:	6a 02                	push   0x2
c001ea93:	c6 05 c4 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fbc4,0x1
c001ea9a:	a3 c0 fb 02 c0       	mov    ds:0xc002fbc0,eax
c001ea9f:	e8 3b f6 ff ff       	call   c001e0df <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaa4:	83 c4 1c             	add    esp,0x1c
c001eaa7:	eb 90                	jmp    c001ea39 <Vm::mainloop2()>

c001eaa9 <Vm::initialise8086()>:
c001eaa9:	83 ec 0c             	sub    esp,0xc
c001eaac:	68 80 00 00 00       	push   0x80
c001eab1:	6a 00                	push   0x0
c001eab3:	68 73 ea 01 c0       	push   0xc001ea73
c001eab8:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001eabe:	e8 47 f2 ff ff       	call   c001dd0a <Process::createThread(void (*)(void*), void*, int)>
c001eac3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eaca:	a3 c8 fb 02 c0       	mov    ds:0xc002fbc8,eax
c001eacf:	68 00 01 00 00       	push   0x100
c001ead4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001ead9:	6a 00                	push   0x0
c001eadb:	6a 00                	push   0x0
c001eadd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eae3:	e8 e2 34 ff ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eae8:	83 c4 2c             	add    esp,0x2c
c001eaeb:	c3                   	ret    

c001eaec <Vm::finish8086()>:
c001eaec:	53                   	push   ebx
c001eaed:	83 ec 08             	sub    esp,0x8
c001eaf0:	fa                   	cli    
c001eaf1:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001eaf7:	80 3d c4 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fbc4,0x0
c001eafe:	75 15                	jne    c001eb15 <Vm::finish8086()+0x29>
c001eb00:	e8 2a f4 ff ff       	call   c001df2f <schedule()>
c001eb05:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001eb0a:	48                   	dec    eax
c001eb0b:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001eb10:	75 de                	jne    c001eaf0 <Vm::finish8086()+0x4>
c001eb12:	fb                   	sti    
c001eb13:	eb db                	jmp    c001eaf0 <Vm::finish8086()+0x4>
c001eb15:	83 ec 0c             	sub    esp,0xc
c001eb18:	8b 1d c0 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fbc0
c001eb1e:	ff 35 c8 fb 02 c0    	push   DWORD PTR ds:0xc002fbc8
c001eb24:	c6 05 c4 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fbc4,0x0
c001eb2b:	e8 91 f8 ff ff       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c001eb30:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001eb35:	83 c4 10             	add    esp,0x10
c001eb38:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb3b:	89 15 68 fb 02 c0    	mov    DWORD PTR ds:0xc002fb68,edx
c001eb41:	85 d2                	test   edx,edx
c001eb43:	75 01                	jne    c001eb46 <Vm::finish8086()+0x5a>
c001eb45:	fb                   	sti    
c001eb46:	89 d8                	mov    eax,ebx
c001eb48:	83 c4 08             	add    esp,0x8
c001eb4b:	5b                   	pop    ebx
c001eb4c:	c3                   	ret    

c001eb4d <Vm::getOutput8086(unsigned char*)>:
c001eb4d:	57                   	push   edi
c001eb4e:	8b 0d cc fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fbcc
c001eb54:	56                   	push   esi
c001eb55:	be e0 fb 02 c0       	mov    esi,0xc002fbe0
c001eb5a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eb5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb60:	a1 cc fb 02 c0       	mov    eax,ds:0xc002fbcc
c001eb65:	5e                   	pop    esi
c001eb66:	c7 05 cc fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbcc,0x0
c001eb70:	5f                   	pop    edi
c001eb71:	c3                   	ret    

c001eb72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb72:	55                   	push   ebp
c001eb73:	57                   	push   edi
c001eb74:	56                   	push   esi
c001eb75:	53                   	push   ebx
c001eb76:	83 ec 2c             	sub    esp,0x2c
c001eb79:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eb7d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001eb81:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eb85:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eb89:	fa                   	cli    
c001eb8a:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001eb90:	0f b6 35 c5 fb 02 c0 	movzx  esi,BYTE PTR ds:0xc002fbc5
c001eb97:	89 f0                	mov    eax,esi
c001eb99:	84 c0                	test   al,al
c001eb9b:	75 1d                	jne    c001ebba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eb9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eba1:	e8 89 f3 ff ff       	call   c001df2f <schedule()>
c001eba6:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ebab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebaf:	48                   	dec    eax
c001ebb0:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ebb5:	75 d2                	jne    c001eb89 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebb7:	fb                   	sti    
c001ebb8:	eb cf                	jmp    c001eb89 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebba:	a1 c8 fb 02 c0       	mov    eax,ds:0xc002fbc8
c001ebbf:	c7 05 cc fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbcc,0x0
c001ebc9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ebcd:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ebd1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ebd5:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ebd9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebdd:	50                   	push   eax
c001ebde:	6a 20                	push   0x20
c001ebe0:	6a 00                	push   0x0
c001ebe2:	68 e0 fb 02 c0       	push   0xc002fbe0
c001ebe7:	e8 64 1b fe ff       	call   c0000750 <memset>
c001ebec:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebf3:	e8 af 0d ff ff       	call   c000f9a7 <malloc>
c001ebf8:	83 c4 0c             	add    esp,0xc
c001ebfb:	89 c3                	mov    ebx,eax
c001ebfd:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001ec03:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec07:	50                   	push   eax
c001ec08:	e8 51 43 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c001ec0d:	83 c4 10             	add    esp,0x10
c001ec10:	85 db                	test   ebx,ebx
c001ec12:	75 0a                	jne    c001ec1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	68 6c c9 02 c0       	push   0xc002c96c
c001ec1c:	eb 3e                	jmp    c001ec5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec1e:	50                   	push   eax
c001ec1f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec23:	50                   	push   eax
c001ec24:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec28:	50                   	push   eax
c001ec29:	53                   	push   ebx
c001ec2a:	e8 3f 46 ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c001ec2f:	83 c4 10             	add    esp,0x10
c001ec32:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ec37:	74 0a                	je     c001ec43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec39:	83 ec 0c             	sub    esp,0xc
c001ec3c:	68 80 c9 02 c0       	push   0xc002c980
c001ec41:	eb 19                	jmp    c001ec5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec43:	51                   	push   ecx
c001ec44:	51                   	push   ecx
c001ec45:	6a 01                	push   0x1
c001ec47:	53                   	push   ebx
c001ec48:	e8 75 43 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c001ec4d:	83 c4 10             	add    esp,0x10
c001ec50:	85 c0                	test   eax,eax
c001ec52:	74 24                	je     c001ec78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ec54:	83 ec 0c             	sub    esp,0xc
c001ec57:	68 99 c9 02 c0       	push   0xc002c999
c001ec5c:	e8 3c b7 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001ec61:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ec66:	83 c4 10             	add    esp,0x10
c001ec69:	48                   	dec    eax
c001ec6a:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ec6f:	85 c0                	test   eax,eax
c001ec71:	75 01                	jne    c001ec74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ec73:	fb                   	sti    
c001ec74:	31 f6                	xor    esi,esi
c001ec76:	eb 58                	jmp    c001ecd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ec78:	0f b7 ed             	movzx  ebp,bp
c001ec7b:	50                   	push   eax
c001ec7c:	0f b7 ff             	movzx  edi,di
c001ec7f:	50                   	push   eax
c001ec80:	55                   	push   ebp
c001ec81:	57                   	push   edi
c001ec82:	e8 95 fd ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001ec87:	5a                   	pop    edx
c001ec88:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ec8a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec8e:	51                   	push   ecx
c001ec8f:	50                   	push   eax
c001ec90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec98:	53                   	push   ebx
c001ec99:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec9c:	83 c4 14             	add    esp,0x14
c001ec9f:	53                   	push   ebx
c001eca0:	e8 7b 43 ff ff       	call   c0013020 <File::close()>
c001eca5:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ecaa:	83 c4 10             	add    esp,0x10
c001ecad:	48                   	dec    eax
c001ecae:	c6 05 c5 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fbc5,0x0
c001ecb5:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ecba:	85 c0                	test   eax,eax
c001ecbc:	75 01                	jne    c001ecbf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ecbe:	fb                   	sti    
c001ecbf:	83 ec 0c             	sub    esp,0xc
c001ecc2:	ff 35 c8 fb 02 c0    	push   DWORD PTR ds:0xc002fbc8
c001ecc8:	e8 f4 f6 ff ff       	call   c001e3c1 <unblockTask(ThreadControlBlock*)>
c001eccd:	83 c4 10             	add    esp,0x10
c001ecd0:	83 c4 2c             	add    esp,0x2c
c001ecd3:	89 f0                	mov    eax,esi
c001ecd5:	5b                   	pop    ebx
c001ecd6:	5e                   	pop    esi
c001ecd7:	5f                   	pop    edi
c001ecd8:	5d                   	pop    ebp
c001ecd9:	c3                   	ret    

c001ecda <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ecda:	57                   	push   edi
c001ecdb:	56                   	push   esi
c001ecdc:	53                   	push   ebx
c001ecdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ece1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ece5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ece9:	83 e8 06             	sub    eax,0x6
c001ecec:	0f b7 c0             	movzx  eax,ax
c001ecef:	50                   	push   eax
c001ecf0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecf5:	50                   	push   eax
c001ecf6:	e8 21 fd ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001ecfb:	5a                   	pop    edx
c001ecfc:	5e                   	pop    esi
c001ecfd:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed00:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed03:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed09:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed0c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed0f:	83 c2 02             	add    edx,0x2
c001ed12:	66 89 10             	mov    WORD PTR [eax],dx
c001ed15:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed18:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed1c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed1f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed23:	89 d6                	mov    esi,edx
c001ed25:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed2b:	66 81 e6 ff fd       	and    si,0xfdff
c001ed30:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed34:	74 07                	je     c001ed3d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed36:	89 d6                	mov    esi,edx
c001ed38:	66 81 ce 00 02       	or     si,0x200
c001ed3d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed46:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed4a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed52:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed55:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed5d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed60:	5b                   	pop    ebx
c001ed61:	5e                   	pop    esi
c001ed62:	5f                   	pop    edi
c001ed63:	c3                   	ret    

c001ed64 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed6e:	c1 e0 04             	shl    eax,0x4
c001ed71:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed74:	c3                   	ret    

c001ed75 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed75:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed7a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7f:	c1 e0 04             	shl    eax,0x4
c001ed82:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed86:	c3                   	ret    

c001ed87 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed87:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed8c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed91:	c1 e0 04             	shl    eax,0x4
c001ed94:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed97:	c3                   	ret    

c001ed98 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed98:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda2:	c1 e0 04             	shl    eax,0x4
c001eda5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eda9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edac:	c3                   	ret    

c001edad <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb7:	c1 e0 04             	shl    eax,0x4
c001edba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edbe:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edc2:	c3                   	ret    

c001edc3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edc3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edcd:	c1 e0 04             	shl    eax,0x4
c001edd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edd4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001edd7:	c3                   	ret    

c001edd8 <Vm::faultHandler(regs*)>:
c001edd8:	55                   	push   ebp
c001edd9:	57                   	push   edi
c001edda:	56                   	push   esi
c001eddb:	53                   	push   ebx
c001eddc:	83 ec 1c             	sub    esp,0x1c
c001eddf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ede3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ede6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001edea:	0f b7 f8             	movzx  edi,ax
c001eded:	52                   	push   edx
c001edee:	0f b7 c0             	movzx  eax,ax
c001edf1:	50                   	push   eax
c001edf2:	e8 25 fc ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001edf7:	5a                   	pop    edx
c001edf8:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001edfb:	59                   	pop    ecx
c001edfc:	89 c1                	mov    ecx,eax
c001edfe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ee01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee05:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee0e:	0f b7 c5             	movzx  eax,bp
c001ee11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee15:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ee19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ee1d:	e8 fa fb ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001ee22:	5e                   	pop    esi
c001ee23:	be 06 00 00 00       	mov    esi,0x6
c001ee28:	5a                   	pop    edx
c001ee29:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ee2e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ee33:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ee36:	80 fa 9d             	cmp    dl,0x9d
c001ee39:	0f 84 2c 02 00 00    	je     c001f06b <Vm::faultHandler(regs*)+0x293>
c001ee3f:	0f 87 91 00 00 00    	ja     c001eed6 <Vm::faultHandler(regs*)+0xfe>
c001ee45:	80 fa 66             	cmp    dl,0x66
c001ee48:	0f 84 98 01 00 00    	je     c001efe6 <Vm::faultHandler(regs*)+0x20e>
c001ee4e:	77 47                	ja     c001ee97 <Vm::faultHandler(regs*)+0xbf>
c001ee50:	80 fa 36             	cmp    dl,0x36
c001ee53:	0f 84 80 01 00 00    	je     c001efd9 <Vm::faultHandler(regs*)+0x201>
c001ee59:	77 1a                	ja     c001ee75 <Vm::faultHandler(regs*)+0x9d>
c001ee5b:	80 fa 26             	cmp    dl,0x26
c001ee5e:	0f 84 4e 01 00 00    	je     c001efb2 <Vm::faultHandler(regs*)+0x1da>
c001ee64:	80 fa 2e             	cmp    dl,0x2e
c001ee67:	0f 85 e2 05 00 00    	jne    c001f44f <Vm::faultHandler(regs*)+0x677>
c001ee6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee70:	31 f6                	xor    esi,esi
c001ee72:	41                   	inc    ecx
c001ee73:	eb be                	jmp    c001ee33 <Vm::faultHandler(regs*)+0x5b>
c001ee75:	80 fa 64             	cmp    dl,0x64
c001ee78:	0f 84 41 01 00 00    	je     c001efbf <Vm::faultHandler(regs*)+0x1e7>
c001ee7e:	0f 87 48 01 00 00    	ja     c001efcc <Vm::faultHandler(regs*)+0x1f4>
c001ee84:	80 fa 3e             	cmp    dl,0x3e
c001ee87:	0f 85 c2 05 00 00    	jne    c001f44f <Vm::faultHandler(regs*)+0x677>
c001ee8d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee90:	be 01 00 00 00       	mov    esi,0x1
c001ee95:	eb db                	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001ee97:	80 fa 6d             	cmp    dl,0x6d
c001ee9a:	0f 84 ec 02 00 00    	je     c001f18c <Vm::faultHandler(regs*)+0x3b4>
c001eea0:	77 17                	ja     c001eeb9 <Vm::faultHandler(regs*)+0xe1>
c001eea2:	80 fa 67             	cmp    dl,0x67
c001eea5:	0f 84 48 01 00 00    	je     c001eff3 <Vm::faultHandler(regs*)+0x21b>
c001eeab:	80 fa 6c             	cmp    dl,0x6c
c001eeae:	0f 84 69 02 00 00    	je     c001f11d <Vm::faultHandler(regs*)+0x345>
c001eeb4:	e9 96 05 00 00       	jmp    c001f44f <Vm::faultHandler(regs*)+0x677>
c001eeb9:	80 fa 6f             	cmp    dl,0x6f
c001eebc:	0f 84 f4 03 00 00    	je     c001f2b6 <Vm::faultHandler(regs*)+0x4de>
c001eec2:	0f 82 59 03 00 00    	jb     c001f221 <Vm::faultHandler(regs*)+0x449>
c001eec8:	80 fa 9c             	cmp    dl,0x9c
c001eecb:	0f 84 2f 01 00 00    	je     c001f000 <Vm::faultHandler(regs*)+0x228>
c001eed1:	e9 79 05 00 00       	jmp    c001f44f <Vm::faultHandler(regs*)+0x677>
c001eed6:	80 fa ec             	cmp    dl,0xec
c001eed9:	0f 84 14 05 00 00    	je     c001f3f3 <Vm::faultHandler(regs*)+0x61b>
c001eedf:	77 7b                	ja     c001ef5c <Vm::faultHandler(regs*)+0x184>
c001eee1:	80 fa e4             	cmp    dl,0xe4
c001eee4:	0f 84 93 04 00 00    	je     c001f37d <Vm::faultHandler(regs*)+0x5a5>
c001eeea:	77 53                	ja     c001ef3f <Vm::faultHandler(regs*)+0x167>
c001eeec:	80 fa cd             	cmp    dl,0xcd
c001eeef:	0f 84 d9 01 00 00    	je     c001f0ce <Vm::faultHandler(regs*)+0x2f6>
c001eef5:	80 fa cf             	cmp    dl,0xcf
c001eef8:	0f 85 51 05 00 00    	jne    c001f44f <Vm::faultHandler(regs*)+0x677>
c001eefe:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ef01:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ef04:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ef08:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ef0b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ef0f:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef15:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef18:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ef1c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef22:	66 c1 e8 09          	shr    ax,0x9
c001ef26:	83 e0 01             	and    eax,0x1
c001ef29:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef2c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef2f:	83 c0 06             	add    eax,0x6
c001ef32:	25 ff ff 00 00       	and    eax,0xffff
c001ef37:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef3a:	e9 0c 05 00 00       	jmp    c001f44b <Vm::faultHandler(regs*)+0x673>
c001ef3f:	80 fa e6             	cmp    dl,0xe6
c001ef42:	0f 84 7f 04 00 00    	je     c001f3c7 <Vm::faultHandler(regs*)+0x5ef>
c001ef48:	0f 82 4b 04 00 00    	jb     c001f399 <Vm::faultHandler(regs*)+0x5c1>
c001ef4e:	80 fa e7             	cmp    dl,0xe7
c001ef51:	0f 84 87 04 00 00    	je     c001f3de <Vm::faultHandler(regs*)+0x606>
c001ef57:	e9 f3 04 00 00       	jmp    c001f44f <Vm::faultHandler(regs*)+0x677>
c001ef5c:	80 fa ef             	cmp    dl,0xef
c001ef5f:	0f 84 d1 04 00 00    	je     c001f436 <Vm::faultHandler(regs*)+0x65e>
c001ef65:	77 28                	ja     c001ef8f <Vm::faultHandler(regs*)+0x1b7>
c001ef67:	80 fa ed             	cmp    dl,0xed
c001ef6a:	0f 84 9f 04 00 00    	je     c001f40f <Vm::faultHandler(regs*)+0x637>
c001ef70:	80 fa ee             	cmp    dl,0xee
c001ef73:	0f 85 d6 04 00 00    	jne    c001f44f <Vm::faultHandler(regs*)+0x677>
c001ef79:	50                   	push   eax
c001ef7a:	50                   	push   eax
c001ef7b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef7f:	50                   	push   eax
c001ef80:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef84:	50                   	push   eax
c001ef85:	e8 5c fa ff ff       	call   c001e9e6 <Vm::outbv(unsigned short, unsigned char)>
c001ef8a:	e9 9f 04 00 00       	jmp    c001f42e <Vm::faultHandler(regs*)+0x656>
c001ef8f:	80 fa fa             	cmp    dl,0xfa
c001ef92:	0f 84 69 01 00 00    	je     c001f101 <Vm::faultHandler(regs*)+0x329>
c001ef98:	80 fa fb             	cmp    dl,0xfb
c001ef9b:	0f 84 6e 01 00 00    	je     c001f10f <Vm::faultHandler(regs*)+0x337>
c001efa1:	80 fa f3             	cmp    dl,0xf3
c001efa4:	0f 85 a5 04 00 00    	jne    c001f44f <Vm::faultHandler(regs*)+0x677>
c001efaa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efad:	e9 c0 fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001efb2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efb5:	be 02 00 00 00       	mov    esi,0x2
c001efba:	e9 b3 fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001efbf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efc2:	be 03 00 00 00       	mov    esi,0x3
c001efc7:	e9 a6 fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001efcc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efcf:	be 04 00 00 00       	mov    esi,0x4
c001efd4:	e9 99 fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001efd9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efdc:	be 05 00 00 00       	mov    esi,0x5
c001efe1:	e9 8c fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001efe6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efe9:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001efee:	e9 7f fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001eff3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eff6:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001effb:	e9 72 fe ff ff       	jmp    c001ee72 <Vm::faultHandler(regs*)+0x9a>
c001f000:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f003:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f007:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f00c:	74 30                	je     c001f03e <Vm::faultHandler(regs*)+0x266>
c001f00e:	83 e9 04             	sub    ecx,0x4
c001f011:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f017:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f01d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f020:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f023:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f029:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f02d:	0f 84 15 04 00 00    	je     c001f448 <Vm::faultHandler(regs*)+0x670>
c001f033:	80 ce 02             	or     dh,0x2
c001f036:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f039:	e9 0a 04 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f03e:	83 e9 02             	sub    ecx,0x2
c001f041:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f047:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f04a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f04e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f054:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f058:	74 05                	je     c001f05f <Vm::faultHandler(regs*)+0x287>
c001f05a:	80 ce 02             	or     dh,0x2
c001f05d:	eb 03                	jmp    c001f062 <Vm::faultHandler(regs*)+0x28a>
c001f05f:	80 e6 fd             	and    dh,0xfd
c001f062:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f066:	e9 dd 03 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f06b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f070:	74 2a                	je     c001f09c <Vm::faultHandler(regs*)+0x2c4>
c001f072:	8b 10                	mov    edx,DWORD PTR [eax]
c001f074:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f07a:	81 ca 00 02 02 00    	or     edx,0x20200
c001f080:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f083:	8b 00                	mov    eax,DWORD PTR [eax]
c001f085:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f08b:	c1 e8 09             	shr    eax,0x9
c001f08e:	83 e0 01             	and    eax,0x1
c001f091:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f094:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f097:	83 c0 04             	add    eax,0x4
c001f09a:	eb 25                	jmp    c001f0c1 <Vm::faultHandler(regs*)+0x2e9>
c001f09c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f09f:	81 ca 00 02 02 00    	or     edx,0x20200
c001f0a5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f0a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f0ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0b1:	66 c1 e8 09          	shr    ax,0x9
c001f0b5:	83 e0 01             	and    eax,0x1
c001f0b8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0bb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0be:	83 c0 02             	add    eax,0x2
c001f0c1:	25 ff ff 00 00       	and    eax,0xffff
c001f0c6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f0c9:	e9 7a 03 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f0ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0d2:	3c ee                	cmp    al,0xee
c001f0d4:	75 10                	jne    c001f0e6 <Vm::faultHandler(regs*)+0x30e>
c001f0d6:	83 ec 0c             	sub    esp,0xc
c001f0d9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f0dc:	e8 a2 f9 ff ff       	call   c001ea83 <Vm::mainloop3(unsigned long)>
c001f0e1:	e9 4b 03 00 00       	jmp    c001f431 <Vm::faultHandler(regs*)+0x659>
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f1:	51                   	push   ecx
c001f0f2:	50                   	push   eax
c001f0f3:	53                   	push   ebx
c001f0f4:	e8 e1 fb ff ff       	call   c001ecda <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0f9:	83 c4 20             	add    esp,0x20
c001f0fc:	e9 4a 03 00 00       	jmp    c001f44b <Vm::faultHandler(regs*)+0x673>
c001f101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f106:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f10a:	e9 39 03 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f10f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f114:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f118:	e9 2b 03 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f11d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f120:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f125:	74 2b                	je     c001f152 <Vm::faultHandler(regs*)+0x37a>
c001f127:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f12e:	76 22                	jbe    c001f152 <Vm::faultHandler(regs*)+0x37a>
c001f130:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f134:	50                   	push   eax
c001f135:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f139:	50                   	push   eax
c001f13a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f13e:	50                   	push   eax
c001f13f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f143:	50                   	push   eax
c001f144:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f148:	50                   	push   eax
c001f149:	6a 6c                	push   0x6c
c001f14b:	6a 6c                	push   0x6c
c001f14d:	e9 b9 01 00 00       	jmp    c001f30b <Vm::faultHandler(regs*)+0x533>
c001f152:	83 ec 0c             	sub    esp,0xc
c001f155:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f159:	0f b7 f6             	movzx  esi,si
c001f15c:	50                   	push   eax
c001f15d:	e8 71 f8 ff ff       	call   c001e9d3 <Vm::inbv(unsigned short)>
c001f162:	83 c4 0c             	add    esp,0xc
c001f165:	0f b6 c0             	movzx  eax,al
c001f168:	50                   	push   eax
c001f169:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f16d:	50                   	push   eax
c001f16e:	56                   	push   esi
c001f16f:	e8 24 fc ff ff       	call   c001ed98 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f174:	83 c4 10             	add    esp,0x10
c001f177:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f17a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f17e:	74 03                	je     c001f183 <Vm::faultHandler(regs*)+0x3ab>
c001f180:	48                   	dec    eax
c001f181:	eb 01                	jmp    c001f184 <Vm::faultHandler(regs*)+0x3ac>
c001f183:	40                   	inc    eax
c001f184:	0f b7 c0             	movzx  eax,ax
c001f187:	e9 8d 00 00 00       	jmp    c001f219 <Vm::faultHandler(regs*)+0x441>
c001f18c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f18f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f192:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f197:	74 29                	je     c001f1c2 <Vm::faultHandler(regs*)+0x3ea>
c001f199:	3d ff ff 00 00       	cmp    eax,0xffff
c001f19e:	76 22                	jbe    c001f1c2 <Vm::faultHandler(regs*)+0x3ea>
c001f1a0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f1a4:	50                   	push   eax
c001f1a5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f1a9:	50                   	push   eax
c001f1aa:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f1ae:	50                   	push   eax
c001f1af:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f1b3:	50                   	push   eax
c001f1b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f1b8:	50                   	push   eax
c001f1b9:	6a 6d                	push   0x6d
c001f1bb:	6a 6d                	push   0x6d
c001f1bd:	e9 49 01 00 00       	jmp    c001f30b <Vm::faultHandler(regs*)+0x533>
c001f1c2:	0f b7 c8             	movzx  ecx,ax
c001f1c5:	0f b7 f6             	movzx  esi,si
c001f1c8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f1cb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1d0:	74 20                	je     c001f1f2 <Vm::faultHandler(regs*)+0x41a>
c001f1d2:	ed                   	in     eax,dx
c001f1d3:	55                   	push   ebp
c001f1d4:	50                   	push   eax
c001f1d5:	51                   	push   ecx
c001f1d6:	56                   	push   esi
c001f1d7:	e8 e7 fb ff ff       	call   c001edc3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f1dc:	83 c4 10             	add    esp,0x10
c001f1df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1e2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1e6:	74 05                	je     c001f1ed <Vm::faultHandler(regs*)+0x415>
c001f1e8:	83 e8 04             	sub    eax,0x4
c001f1eb:	eb 27                	jmp    c001f214 <Vm::faultHandler(regs*)+0x43c>
c001f1ed:	83 c0 04             	add    eax,0x4
c001f1f0:	eb 22                	jmp    c001f214 <Vm::faultHandler(regs*)+0x43c>
c001f1f2:	66 ed                	in     ax,dx
c001f1f4:	0f b7 c0             	movzx  eax,ax
c001f1f7:	57                   	push   edi
c001f1f8:	50                   	push   eax
c001f1f9:	51                   	push   ecx
c001f1fa:	56                   	push   esi
c001f1fb:	e8 ad fb ff ff       	call   c001edad <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f200:	83 c4 10             	add    esp,0x10
c001f203:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f206:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f20a:	74 05                	je     c001f211 <Vm::faultHandler(regs*)+0x439>
c001f20c:	83 e8 02             	sub    eax,0x2
c001f20f:	eb 03                	jmp    c001f214 <Vm::faultHandler(regs*)+0x43c>
c001f211:	83 c0 02             	add    eax,0x2
c001f214:	25 ff ff 00 00       	and    eax,0xffff
c001f219:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f21c:	e9 27 02 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f221:	8d 46 ff             	lea    eax,[esi-0x1]
c001f224:	3c 05                	cmp    al,0x5
c001f226:	77 24                	ja     c001f24c <Vm::faultHandler(regs*)+0x474>
c001f228:	0f b6 c0             	movzx  eax,al
c001f22b:	ff 24 85 0c ca 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd35f4]
c001f232:	0f b7 fd             	movzx  edi,bp
c001f235:	eb 15                	jmp    c001f24c <Vm::faultHandler(regs*)+0x474>
c001f237:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f23b:	eb 0f                	jmp    c001f24c <Vm::faultHandler(regs*)+0x474>
c001f23d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f241:	eb 09                	jmp    c001f24c <Vm::faultHandler(regs*)+0x474>
c001f243:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f247:	eb 03                	jmp    c001f24c <Vm::faultHandler(regs*)+0x474>
c001f249:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f24c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f24f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f254:	74 29                	je     c001f27f <Vm::faultHandler(regs*)+0x4a7>
c001f256:	3d ff ff 00 00       	cmp    eax,0xffff
c001f25b:	76 22                	jbe    c001f27f <Vm::faultHandler(regs*)+0x4a7>
c001f25d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f261:	50                   	push   eax
c001f262:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f266:	50                   	push   eax
c001f267:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f26b:	50                   	push   eax
c001f26c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f270:	50                   	push   eax
c001f271:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f275:	50                   	push   eax
c001f276:	6a 6e                	push   0x6e
c001f278:	6a 6e                	push   0x6e
c001f27a:	e9 8c 00 00 00       	jmp    c001f30b <Vm::faultHandler(regs*)+0x533>
c001f27f:	0f b7 c0             	movzx  eax,ax
c001f282:	52                   	push   edx
c001f283:	52                   	push   edx
c001f284:	50                   	push   eax
c001f285:	57                   	push   edi
c001f286:	e8 d9 fa ff ff       	call   c001ed64 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f28b:	59                   	pop    ecx
c001f28c:	0f b6 c0             	movzx  eax,al
c001f28f:	5e                   	pop    esi
c001f290:	50                   	push   eax
c001f291:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f295:	50                   	push   eax
c001f296:	e8 4b f7 ff ff       	call   c001e9e6 <Vm::outbv(unsigned short, unsigned char)>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f2a1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f2a5:	74 03                	je     c001f2aa <Vm::faultHandler(regs*)+0x4d2>
c001f2a7:	48                   	dec    eax
c001f2a8:	eb 01                	jmp    c001f2ab <Vm::faultHandler(regs*)+0x4d3>
c001f2aa:	40                   	inc    eax
c001f2ab:	0f b7 c0             	movzx  eax,ax
c001f2ae:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f2b1:	e9 92 01 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f2b6:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2b9:	3c 05                	cmp    al,0x5
c001f2bb:	77 1f                	ja     c001f2dc <Vm::faultHandler(regs*)+0x504>
c001f2bd:	0f b6 c0             	movzx  eax,al
c001f2c0:	ff 24 85 24 ca 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd35dc]
c001f2c7:	89 ef                	mov    edi,ebp
c001f2c9:	eb 11                	jmp    c001f2dc <Vm::faultHandler(regs*)+0x504>
c001f2cb:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f2ce:	eb 0c                	jmp    c001f2dc <Vm::faultHandler(regs*)+0x504>
c001f2d0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f2d3:	eb 07                	jmp    c001f2dc <Vm::faultHandler(regs*)+0x504>
c001f2d5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f2d8:	eb 02                	jmp    c001f2dc <Vm::faultHandler(regs*)+0x504>
c001f2da:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f2dc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f2df:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f2e4:	74 37                	je     c001f31d <Vm::faultHandler(regs*)+0x545>
c001f2e6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f2ec:	76 2f                	jbe    c001f31d <Vm::faultHandler(regs*)+0x545>
c001f2ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2f2:	50                   	push   eax
c001f2f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2f7:	50                   	push   eax
c001f2f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2fc:	50                   	push   eax
c001f2fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f301:	50                   	push   eax
c001f302:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f306:	50                   	push   eax
c001f307:	6a 6f                	push   0x6f
c001f309:	6a 6f                	push   0x6f
c001f30b:	68 b2 c9 02 c0       	push   0xc002c9b2
c001f310:	e8 ea 36 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001f315:	83 c4 20             	add    esp,0x20
c001f318:	e9 86 01 00 00       	jmp    c001f4a3 <Vm::faultHandler(regs*)+0x6cb>
c001f31d:	0f b7 d7             	movzx  edx,di
c001f320:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f323:	0f b7 c6             	movzx  eax,si
c001f326:	81 e1 00 04 00 00    	and    ecx,0x400
c001f32c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f32f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f334:	74 1d                	je     c001f353 <Vm::faultHandler(regs*)+0x57b>
c001f336:	55                   	push   ebp
c001f337:	55                   	push   ebp
c001f338:	50                   	push   eax
c001f339:	52                   	push   edx
c001f33a:	e8 48 fa ff ff       	call   c001ed87 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f33f:	83 c4 10             	add    esp,0x10
c001f342:	89 fa                	mov    edx,edi
c001f344:	ef                   	out    dx,eax
c001f345:	85 c9                	test   ecx,ecx
c001f347:	74 05                	je     c001f34e <Vm::faultHandler(regs*)+0x576>
c001f349:	83 ee 04             	sub    esi,0x4
c001f34c:	eb 21                	jmp    c001f36f <Vm::faultHandler(regs*)+0x597>
c001f34e:	83 c6 04             	add    esi,0x4
c001f351:	eb 1c                	jmp    c001f36f <Vm::faultHandler(regs*)+0x597>
c001f353:	55                   	push   ebp
c001f354:	55                   	push   ebp
c001f355:	50                   	push   eax
c001f356:	52                   	push   edx
c001f357:	e8 19 fa ff ff       	call   c001ed75 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f35c:	83 c4 10             	add    esp,0x10
c001f35f:	89 fa                	mov    edx,edi
c001f361:	66 ef                	out    dx,ax
c001f363:	85 c9                	test   ecx,ecx
c001f365:	74 05                	je     c001f36c <Vm::faultHandler(regs*)+0x594>
c001f367:	83 ee 02             	sub    esi,0x2
c001f36a:	eb 03                	jmp    c001f36f <Vm::faultHandler(regs*)+0x597>
c001f36c:	83 c6 02             	add    esi,0x2
c001f36f:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f375:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f378:	e9 cb 00 00 00       	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f37d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f384:	83 ec 0c             	sub    esp,0xc
c001f387:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f38b:	50                   	push   eax
c001f38c:	e8 42 f6 ff ff       	call   c001e9d3 <Vm::inbv(unsigned short)>
c001f391:	0f b6 c0             	movzx  eax,al
c001f394:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f397:	eb 3f                	jmp    c001f3d8 <Vm::faultHandler(regs*)+0x600>
c001f399:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f39e:	74 07                	je     c001f3a7 <Vm::faultHandler(regs*)+0x5cf>
c001f3a0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3a4:	ed                   	in     eax,dx
c001f3a5:	eb 14                	jmp    c001f3bb <Vm::faultHandler(regs*)+0x5e3>
c001f3a7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f3aa:	66 31 f6             	xor    si,si
c001f3ad:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f3b0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3b4:	66 ed                	in     ax,dx
c001f3b6:	0f b7 c0             	movzx  eax,ax
c001f3b9:	09 f0                	or     eax,esi
c001f3bb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f3be:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3c2:	e9 84 00 00 00       	jmp    c001f44b <Vm::faultHandler(regs*)+0x673>
c001f3c7:	52                   	push   edx
c001f3c8:	52                   	push   edx
c001f3c9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f3cd:	50                   	push   eax
c001f3ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3d2:	50                   	push   eax
c001f3d3:	e8 0e f6 ff ff       	call   c001e9e6 <Vm::outbv(unsigned short, unsigned char)>
c001f3d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3dc:	eb 53                	jmp    c001f431 <Vm::faultHandler(regs*)+0x659>
c001f3de:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f3e1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3e5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3ea:	74 03                	je     c001f3ef <Vm::faultHandler(regs*)+0x617>
c001f3ec:	ef                   	out    dx,eax
c001f3ed:	eb cf                	jmp    c001f3be <Vm::faultHandler(regs*)+0x5e6>
c001f3ef:	66 ef                	out    dx,ax
c001f3f1:	eb cb                	jmp    c001f3be <Vm::faultHandler(regs*)+0x5e6>
c001f3f3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f3fa:	83 ec 0c             	sub    esp,0xc
c001f3fd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f401:	50                   	push   eax
c001f402:	e8 cc f5 ff ff       	call   c001e9d3 <Vm::inbv(unsigned short)>
c001f407:	0f b6 c0             	movzx  eax,al
c001f40a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f40d:	eb 1f                	jmp    c001f42e <Vm::faultHandler(regs*)+0x656>
c001f40f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f412:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f417:	74 03                	je     c001f41c <Vm::faultHandler(regs*)+0x644>
c001f419:	ed                   	in     eax,dx
c001f41a:	eb 0d                	jmp    c001f429 <Vm::faultHandler(regs*)+0x651>
c001f41c:	66 ed                	in     ax,dx
c001f41e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f421:	0f b7 c0             	movzx  eax,ax
c001f424:	66 31 d2             	xor    dx,dx
c001f427:	09 d0                	or     eax,edx
c001f429:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f42c:	eb 1a                	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f42e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f431:	83 c4 10             	add    esp,0x10
c001f434:	eb 15                	jmp    c001f44b <Vm::faultHandler(regs*)+0x673>
c001f436:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f439:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f43c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f441:	74 03                	je     c001f446 <Vm::faultHandler(regs*)+0x66e>
c001f443:	ef                   	out    dx,eax
c001f444:	eb 02                	jmp    c001f448 <Vm::faultHandler(regs*)+0x670>
c001f446:	66 ef                	out    dx,ax
c001f448:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f44b:	b0 01                	mov    al,0x1
c001f44d:	eb 56                	jmp    c001f4a5 <Vm::faultHandler(regs*)+0x6cd>
c001f44f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f453:	50                   	push   eax
c001f454:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f458:	50                   	push   eax
c001f459:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f45d:	50                   	push   eax
c001f45e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f462:	50                   	push   eax
c001f463:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f467:	50                   	push   eax
c001f468:	52                   	push   edx
c001f469:	52                   	push   edx
c001f46a:	68 df c9 02 c0       	push   0xc002c9df
c001f46f:	e8 8b 35 ff ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c001f474:	83 c4 20             	add    esp,0x20
c001f477:	83 ec 0c             	sub    esp,0xc
c001f47a:	6a 60                	push   0x60
c001f47c:	e8 52 f5 ff ff       	call   c001e9d3 <Vm::inbv(unsigned short)>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	3c 1c                	cmp    al,0x1c
c001f486:	74 04                	je     c001f48c <Vm::faultHandler(regs*)+0x6b4>
c001f488:	3c 5a                	cmp    al,0x5a
c001f48a:	75 eb                	jne    c001f477 <Vm::faultHandler(regs*)+0x69f>
c001f48c:	3c 5a                	cmp    al,0x5a
c001f48e:	74 04                	je     c001f494 <Vm::faultHandler(regs*)+0x6bc>
c001f490:	3c 1c                	cmp    al,0x1c
c001f492:	75 0f                	jne    c001f4a3 <Vm::faultHandler(regs*)+0x6cb>
c001f494:	83 ec 0c             	sub    esp,0xc
c001f497:	6a 60                	push   0x60
c001f499:	e8 35 f5 ff ff       	call   c001e9d3 <Vm::inbv(unsigned short)>
c001f49e:	83 c4 10             	add    esp,0x10
c001f4a1:	eb e9                	jmp    c001f48c <Vm::faultHandler(regs*)+0x6b4>
c001f4a3:	31 c0                	xor    eax,eax
c001f4a5:	83 c4 1c             	add    esp,0x1c
c001f4a8:	5b                   	pop    ebx
c001f4a9:	5e                   	pop    esi
c001f4aa:	5f                   	pop    edi
c001f4ab:	5d                   	pop    ebp
c001f4ac:	c3                   	ret    

c001f4ad <Vm::fpuInternalTo32(unsigned long long)>:
c001f4ad:	57                   	push   edi
c001f4ae:	56                   	push   esi
c001f4af:	53                   	push   ebx
c001f4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b8:	89 d6                	mov    esi,edx
c001f4ba:	89 d7                	mov    edi,edx
c001f4bc:	89 c1                	mov    ecx,eax
c001f4be:	c1 ef 14             	shr    edi,0x14
c001f4c1:	89 d3                	mov    ebx,edx
c001f4c3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4c9:	31 d2                	xor    edx,edx
c001f4cb:	89 f8                	mov    eax,edi
c001f4cd:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f4d3:	bf ff 00 00 00       	mov    edi,0xff
c001f4d8:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f4dd:	83 d2 ff             	adc    edx,0xffffffff
c001f4e0:	39 c7                	cmp    edi,eax
c001f4e2:	bf 00 00 00 00       	mov    edi,0x0
c001f4e7:	19 d7                	sbb    edi,edx
c001f4e9:	72 15                	jb     c001f500 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4eb:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4ef:	c1 e0 17             	shl    eax,0x17
c001f4f2:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f4f8:	09 f1                	or     ecx,esi
c001f4fa:	09 c1                	or     ecx,eax
c001f4fc:	89 cf                	mov    edi,ecx
c001f4fe:	eb 02                	jmp    c001f502 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f500:	31 ff                	xor    edi,edi
c001f502:	89 f8                	mov    eax,edi
c001f504:	5b                   	pop    ebx
c001f505:	5e                   	pop    esi
c001f506:	5f                   	pop    edi
c001f507:	c3                   	ret    

c001f508 <Vm::fpuInternalTo64(unsigned long long)>:
c001f508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f510:	c3                   	ret    

c001f511 <Vm::fpu32ToInternal(unsigned int)>:
c001f511:	57                   	push   edi
c001f512:	31 ff                	xor    edi,edi
c001f514:	56                   	push   esi
c001f515:	53                   	push   ebx
c001f516:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f51a:	89 cb                	mov    ebx,ecx
c001f51c:	89 ce                	mov    esi,ecx
c001f51e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f524:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f52a:	c1 e9 17             	shr    ecx,0x17
c001f52d:	89 f0                	mov    eax,esi
c001f52f:	0f b6 d1             	movzx  edx,cl
c001f532:	81 c2 80 03 00 00    	add    edx,0x380
c001f538:	89 d1                	mov    ecx,edx
c001f53a:	89 fa                	mov    edx,edi
c001f53c:	c1 e1 14             	shl    ecx,0x14
c001f53f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f543:	c1 e0 1d             	shl    eax,0x1d
c001f546:	89 d7                	mov    edi,edx
c001f548:	89 c6                	mov    esi,eax
c001f54a:	89 ca                	mov    edx,ecx
c001f54c:	89 f0                	mov    eax,esi
c001f54e:	09 fa                	or     edx,edi
c001f550:	09 da                	or     edx,ebx
c001f552:	5b                   	pop    ebx
c001f553:	5e                   	pop    esi
c001f554:	5f                   	pop    edi
c001f555:	c3                   	ret    

c001f556 <Vm::fpu64ToInternal(unsigned long long)>:
c001f556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f55a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f55e:	c3                   	ret    

c001f55f <Vm::fpuFloatToLong(unsigned long long)>:
c001f55f:	57                   	push   edi
c001f560:	31 c0                	xor    eax,eax
c001f562:	56                   	push   esi
c001f563:	31 d2                	xor    edx,edx
c001f565:	53                   	push   ebx
c001f566:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f56a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f56e:	89 d9                	mov    ecx,ebx
c001f570:	c1 e9 14             	shr    ecx,0x14
c001f573:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f579:	89 cf                	mov    edi,ecx
c001f57b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f581:	78 33                	js     c001f5b6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f583:	89 d9                	mov    ecx,ebx
c001f585:	89 f0                	mov    eax,esi
c001f587:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f58d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f593:	89 ca                	mov    edx,ecx
c001f595:	b9 34 00 00 00       	mov    ecx,0x34
c001f59a:	29 f9                	sub    ecx,edi
c001f59c:	0f ad d0             	shrd   eax,edx,cl
c001f59f:	d3 fa                	sar    edx,cl
c001f5a1:	f6 c1 20             	test   cl,0x20
c001f5a4:	74 05                	je     c001f5ab <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5a6:	89 d0                	mov    eax,edx
c001f5a8:	c1 fa 1f             	sar    edx,0x1f
c001f5ab:	85 db                	test   ebx,ebx
c001f5ad:	79 07                	jns    c001f5b6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5af:	f7 d8                	neg    eax
c001f5b1:	83 d2 00             	adc    edx,0x0
c001f5b4:	f7 da                	neg    edx
c001f5b6:	5b                   	pop    ebx
c001f5b7:	5e                   	pop    esi
c001f5b8:	5f                   	pop    edi
c001f5b9:	c3                   	ret    

c001f5ba <Vm::fpuULongToFloat(unsigned long long)>:
c001f5ba:	57                   	push   edi
c001f5bb:	31 c9                	xor    ecx,ecx
c001f5bd:	56                   	push   esi
c001f5be:	53                   	push   ebx
c001f5bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5c7:	0f ba e7 14          	bt     edi,0x14
c001f5cb:	72 07                	jb     c001f5d4 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f5cd:	01 f6                	add    esi,esi
c001f5cf:	11 ff                	adc    edi,edi
c001f5d1:	41                   	inc    ecx
c001f5d2:	eb f3                	jmp    c001f5c7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f5d4:	89 fa                	mov    edx,edi
c001f5d6:	89 f0                	mov    eax,esi
c001f5d8:	bb 33 04 00 00       	mov    ebx,0x433
c001f5dd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f5e3:	29 cb                	sub    ebx,ecx
c001f5e5:	89 d9                	mov    ecx,ebx
c001f5e7:	5b                   	pop    ebx
c001f5e8:	c1 e1 14             	shl    ecx,0x14
c001f5eb:	5e                   	pop    esi
c001f5ec:	09 ca                	or     edx,ecx
c001f5ee:	5f                   	pop    edi
c001f5ef:	c3                   	ret    

c001f5f0 <Vm::fpuLongToFloat(long long)>:
c001f5f0:	56                   	push   esi
c001f5f1:	31 c0                	xor    eax,eax
c001f5f3:	53                   	push   ebx
c001f5f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5fc:	39 c8                	cmp    eax,ecx
c001f5fe:	19 d8                	sbb    eax,ebx
c001f600:	7d 04                	jge    c001f606 <Vm::fpuLongToFloat(long long)+0x16>
c001f602:	31 f6                	xor    esi,esi
c001f604:	eb 0c                	jmp    c001f612 <Vm::fpuLongToFloat(long long)+0x22>
c001f606:	f7 d9                	neg    ecx
c001f608:	be 01 00 00 00       	mov    esi,0x1
c001f60d:	83 d3 00             	adc    ebx,0x0
c001f610:	f7 db                	neg    ebx
c001f612:	31 c0                	xor    eax,eax
c001f614:	0f ba e3 14          	bt     ebx,0x14
c001f618:	72 07                	jb     c001f621 <Vm::fpuLongToFloat(long long)+0x31>
c001f61a:	01 c9                	add    ecx,ecx
c001f61c:	11 db                	adc    ebx,ebx
c001f61e:	40                   	inc    eax
c001f61f:	eb f3                	jmp    c001f614 <Vm::fpuLongToFloat(long long)+0x24>
c001f621:	ba 33 04 00 00       	mov    edx,0x433
c001f626:	29 c2                	sub    edx,eax
c001f628:	89 c8                	mov    eax,ecx
c001f62a:	c1 e2 14             	shl    edx,0x14
c001f62d:	89 d9                	mov    ecx,ebx
c001f62f:	89 f3                	mov    ebx,esi
c001f631:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f637:	09 ca                	or     edx,ecx
c001f639:	84 db                	test   bl,bl
c001f63b:	74 06                	je     c001f643 <Vm::fpuLongToFloat(long long)+0x53>
c001f63d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f643:	5b                   	pop    ebx
c001f644:	5e                   	pop    esi
c001f645:	c3                   	ret    

c001f646 <Vm::fpuGet0()>:
c001f646:	31 c0                	xor    eax,eax
c001f648:	31 d2                	xor    edx,edx
c001f64a:	c3                   	ret    

c001f64b <Vm::fpuGet1()>:
c001f64b:	b8 01 00 00 00       	mov    eax,0x1
c001f650:	31 d2                	xor    edx,edx
c001f652:	c3                   	ret    

c001f653 <Vm::fpuGetPi()>:
c001f653:	b8 03 00 00 00       	mov    eax,0x3
c001f658:	31 d2                	xor    edx,edx
c001f65a:	c3                   	ret    

c001f65b <Vm::fpuGetLog2E()>:
c001f65b:	83 ec 18             	sub    esp,0x18
c001f65e:	68 3c ca 02 c0       	push   0xc002ca3c
c001f663:	e8 35 ad ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001f668:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f66d:	31 d2                	xor    edx,edx
c001f66f:	83 c4 1c             	add    esp,0x1c
c001f672:	c3                   	ret    

c001f673 <Vm::fpuGetLogE2()>:
c001f673:	83 ec 18             	sub    esp,0x18
c001f676:	68 48 ca 02 c0       	push   0xc002ca48
c001f67b:	e8 1d ad ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001f680:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f685:	31 d2                	xor    edx,edx
c001f687:	83 c4 1c             	add    esp,0x1c
c001f68a:	c3                   	ret    

c001f68b <Vm::fpuGetLog210()>:
c001f68b:	83 ec 18             	sub    esp,0x18
c001f68e:	68 54 ca 02 c0       	push   0xc002ca54
c001f693:	e8 05 ad ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001f698:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f69d:	31 d2                	xor    edx,edx
c001f69f:	83 c4 1c             	add    esp,0x1c
c001f6a2:	c3                   	ret    

c001f6a3 <Vm::fpuGetLog102()>:
c001f6a3:	83 ec 18             	sub    esp,0x18
c001f6a6:	68 61 ca 02 c0       	push   0xc002ca61
c001f6ab:	e8 ed ac ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001f6b0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6b5:	31 d2                	xor    edx,edx
c001f6b7:	83 c4 1c             	add    esp,0x1c
c001f6ba:	c3                   	ret    

c001f6bb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6c7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6cb:	0f 92 c0             	setb   al
c001f6ce:	c3                   	ret    

c001f6cf <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f6cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d7:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f6db:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f6df:	09 c2                	or     edx,eax
c001f6e1:	0f 94 c0             	sete   al
c001f6e4:	c3                   	ret    

c001f6e5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f6e5:	57                   	push   edi
c001f6e6:	56                   	push   esi
c001f6e7:	53                   	push   ebx
c001f6e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f6f4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f6f8:	57                   	push   edi
c001f6f9:	56                   	push   esi
c001f6fa:	53                   	push   ebx
c001f6fb:	51                   	push   ecx
c001f6fc:	e8 ce ff ff ff       	call   c001f6cf <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f701:	83 c4 10             	add    esp,0x10
c001f704:	88 c2                	mov    dl,al
c001f706:	31 c0                	xor    eax,eax
c001f708:	84 d2                	test   dl,dl
c001f70a:	75 0c                	jne    c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f70c:	57                   	push   edi
c001f70d:	56                   	push   esi
c001f70e:	53                   	push   ebx
c001f70f:	51                   	push   ecx
c001f710:	e8 a6 ff ff ff       	call   c001f6bb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f715:	83 c4 10             	add    esp,0x10
c001f718:	83 e0 01             	and    eax,0x1
c001f71b:	5b                   	pop    ebx
c001f71c:	88 c1                	mov    cl,al
c001f71e:	83 e2 01             	and    edx,0x1
c001f721:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f726:	c1 e2 06             	shl    edx,0x6
c001f729:	83 e0 ba             	and    eax,0xffffffba
c001f72c:	5e                   	pop    esi
c001f72d:	09 c8                	or     eax,ecx
c001f72f:	5f                   	pop    edi
c001f730:	09 d0                	or     eax,edx
c001f732:	a2 01 fc 02 c0       	mov    ds:0xc002fc01,al
c001f737:	c3                   	ret    

c001f738 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f73c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f740:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f744:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f748:	c3                   	ret    

c001f749 <Vm::fpuAbs(unsigned long long)>:
c001f749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f751:	c3                   	ret    

c001f752 <Vm::fpuChs(unsigned long long)>:
c001f752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f756:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f75a:	f7 d8                	neg    eax
c001f75c:	83 d2 00             	adc    edx,0x0
c001f75f:	f7 da                	neg    edx
c001f761:	c3                   	ret    

c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f762:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f766:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f76b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f76f:	eb c7                	jmp    c001f738 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f771 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f771:	53                   	push   ebx
c001f772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f776:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f77a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f77e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f782:	0f af ca             	imul   ecx,edx
c001f785:	0f af d8             	imul   ebx,eax
c001f788:	f7 e2                	mul    edx
c001f78a:	01 d9                	add    ecx,ebx
c001f78c:	5b                   	pop    ebx
c001f78d:	01 ca                	add    edx,ecx
c001f78f:	c3                   	ret    

c001f790 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f790:	83 ec 0c             	sub    esp,0xc
c001f793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f79f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a3:	e8 2c 76 00 00       	call   c0026dd4 <__udivdi3>
c001f7a8:	83 c4 1c             	add    esp,0x1c
c001f7ab:	c3                   	ret    

c001f7ac <Vm::fpuSquare(unsigned long long)>:
c001f7ac:	50                   	push   eax
c001f7ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7b5:	52                   	push   edx
c001f7b6:	50                   	push   eax
c001f7b7:	52                   	push   edx
c001f7b8:	50                   	push   eax
c001f7b9:	e8 b3 ff ff ff       	call   c001f771 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7be:	83 c4 14             	add    esp,0x14
c001f7c1:	c3                   	ret    

c001f7c2 <Vm::fpuGetReg(int)>:
c001f7c2:	83 ec 0c             	sub    esp,0xc
c001f7c5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7ca:	76 10                	jbe    c001f7dc <Vm::fpuGetReg(int)+0x1a>
c001f7cc:	83 ec 0c             	sub    esp,0xc
c001f7cf:	68 6e ca 02 c0       	push   0xc002ca6e
c001f7d4:	e8 c4 ab ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001f7d9:	83 c4 10             	add    esp,0x10
c001f7dc:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f7e1:	b9 08 00 00 00       	mov    ecx,0x8
c001f7e6:	c0 e8 03             	shr    al,0x3
c001f7e9:	83 e0 07             	and    eax,0x7
c001f7ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7f0:	99                   	cdq    
c001f7f1:	f7 f9                	idiv   ecx
c001f7f3:	8b 04 d5 04 fc 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd03fc]
c001f7fa:	8b 14 d5 08 fc 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd03f8]
c001f801:	83 c4 0c             	add    esp,0xc
c001f804:	c3                   	ret    

c001f805 <Vm::fpuSetReg(int, unsigned long long)>:
c001f805:	57                   	push   edi
c001f806:	56                   	push   esi
c001f807:	52                   	push   edx
c001f808:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f80c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f810:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f815:	76 10                	jbe    c001f827 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f817:	83 ec 0c             	sub    esp,0xc
c001f81a:	68 81 ca 02 c0       	push   0xc002ca81
c001f81f:	e8 79 ab ff ff       	call   c001a39d <Krnl::panic(char const*)>
c001f824:	83 c4 10             	add    esp,0x10
c001f827:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f82c:	b9 08 00 00 00       	mov    ecx,0x8
c001f831:	c0 e8 03             	shr    al,0x3
c001f834:	83 e0 07             	and    eax,0x7
c001f837:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f83b:	99                   	cdq    
c001f83c:	f7 f9                	idiv   ecx
c001f83e:	89 34 d5 04 fc 02 c0 	mov    DWORD PTR [edx*8-0x3ffd03fc],esi
c001f845:	89 3c d5 08 fc 02 c0 	mov    DWORD PTR [edx*8-0x3ffd03f8],edi
c001f84c:	58                   	pop    eax
c001f84d:	5e                   	pop    esi
c001f84e:	5f                   	pop    edi
c001f84f:	c3                   	ret    

c001f850 <Vm::fpuPush(unsigned long long)>:
c001f850:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f855:	c0 e8 03             	shr    al,0x3
c001f858:	83 e0 07             	and    eax,0x7
c001f85b:	83 c0 07             	add    eax,0x7
c001f85e:	88 c2                	mov    dl,al
c001f860:	83 e0 07             	and    eax,0x7
c001f863:	83 e2 07             	and    edx,0x7
c001f866:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f86d:	8a 15 01 fc 02 c0    	mov    dl,BYTE PTR ds:0xc002fc01
c001f873:	83 e2 c7             	and    edx,0xffffffc7
c001f876:	09 ca                	or     edx,ecx
c001f878:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f87c:	88 15 01 fc 02 c0    	mov    BYTE PTR ds:0xc002fc01,dl
c001f882:	89 0c c5 08 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03f8],ecx
c001f889:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f88d:	89 14 c5 04 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03fc],edx
c001f894:	a1 44 fc 02 c0       	mov    eax,ds:0xc002fc44
c001f899:	83 f8 08             	cmp    eax,0x8
c001f89c:	75 08                	jne    c001f8a6 <Vm::fpuPush(unsigned long long)+0x56>
c001f89e:	80 0d 00 fc 02 c0 40 	or     BYTE PTR ds:0xc002fc00,0x40
c001f8a5:	c3                   	ret    
c001f8a6:	40                   	inc    eax
c001f8a7:	a3 44 fc 02 c0       	mov    ds:0xc002fc44,eax
c001f8ac:	c3                   	ret    

c001f8ad <Vm::fpuPop()>:
c001f8ad:	8a 0d 01 fc 02 c0    	mov    cl,BYTE PTR ds:0xc002fc01
c001f8b3:	53                   	push   ebx
c001f8b4:	c0 e9 03             	shr    cl,0x3
c001f8b7:	8a 1d 01 fc 02 c0    	mov    bl,BYTE PTR ds:0xc002fc01
c001f8bd:	83 e1 07             	and    ecx,0x7
c001f8c0:	83 e3 c7             	and    ebx,0xffffffc7
c001f8c3:	8b 04 cd 04 fc 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd03fc]
c001f8ca:	8b 14 cd 08 fc 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd03f8]
c001f8d1:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f8d8:	83 e1 38             	and    ecx,0x38
c001f8db:	09 d9                	or     ecx,ebx
c001f8dd:	88 0d 01 fc 02 c0    	mov    BYTE PTR ds:0xc002fc01,cl
c001f8e3:	8b 0d 44 fc 02 c0    	mov    ecx,DWORD PTR ds:0xc002fc44
c001f8e9:	85 c9                	test   ecx,ecx
c001f8eb:	74 09                	je     c001f8f6 <Vm::fpuPop()+0x49>
c001f8ed:	49                   	dec    ecx
c001f8ee:	89 0d 44 fc 02 c0    	mov    DWORD PTR ds:0xc002fc44,ecx
c001f8f4:	eb 07                	jmp    c001f8fd <Vm::fpuPop()+0x50>
c001f8f6:	80 0d 00 fc 02 c0 40 	or     BYTE PTR ds:0xc002fc00,0x40
c001f8fd:	5b                   	pop    ebx
c001f8fe:	c3                   	ret    

c001f8ff <Vm::x87Handler(regs*)>:
c001f8ff:	55                   	push   ebp
c001f900:	57                   	push   edi
c001f901:	56                   	push   esi
c001f902:	53                   	push   ebx
c001f903:	83 ec 1c             	sub    esp,0x1c
c001f906:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f90a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f90f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f912:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f91a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f91e:	50                   	push   eax
c001f91f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f923:	50                   	push   eax
c001f924:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f928:	50                   	push   eax
c001f929:	53                   	push   ebx
c001f92a:	e8 87 a1 ff ff       	call   c0019ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f92f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f932:	83 c4 10             	add    esp,0x10
c001f935:	89 c6                	mov    esi,eax
c001f937:	80 fa d9             	cmp    dl,0xd9
c001f93a:	0f 85 52 01 00 00    	jne    c001fa92 <Vm::x87Handler(regs*)+0x193>
c001f940:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f944:	8d 50 20             	lea    edx,[eax+0x20]
c001f947:	80 fa 0e             	cmp    dl,0xe
c001f94a:	0f 87 86 00 00 00    	ja     c001f9d6 <Vm::x87Handler(regs*)+0xd7>
c001f950:	0f b6 d2             	movzx  edx,dl
c001f953:	ff 24 95 94 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd356c]
c001f95a:	e8 e7 fc ff ff       	call   c001f646 <Vm::fpuGet0()>
c001f95f:	eb 05                	jmp    c001f966 <Vm::x87Handler(regs*)+0x67>
c001f961:	e8 e5 fc ff ff       	call   c001f64b <Vm::fpuGet1()>
c001f966:	57                   	push   edi
c001f967:	57                   	push   edi
c001f968:	52                   	push   edx
c001f969:	50                   	push   eax
c001f96a:	e8 e1 fe ff ff       	call   c001f850 <Vm::fpuPush(unsigned long long)>
c001f96f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f973:	83 c4 10             	add    esp,0x10
c001f976:	b0 01                	mov    al,0x1
c001f978:	e9 e3 09 00 00       	jmp    c0020360 <Vm::x87Handler(regs*)+0xa61>
c001f97d:	83 ec 0c             	sub    esp,0xc
c001f980:	6a 00                	push   0x0
c001f982:	e8 3b fe ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001f987:	59                   	pop    ecx
c001f988:	5e                   	pop    esi
c001f989:	52                   	push   edx
c001f98a:	50                   	push   eax
c001f98b:	e8 c2 fd ff ff       	call   c001f752 <Vm::fpuChs(unsigned long long)>
c001f990:	eb 13                	jmp    c001f9a5 <Vm::x87Handler(regs*)+0xa6>
c001f992:	83 ec 0c             	sub    esp,0xc
c001f995:	6a 00                	push   0x0
c001f997:	e8 26 fe ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001f99c:	5f                   	pop    edi
c001f99d:	5d                   	pop    ebp
c001f99e:	52                   	push   edx
c001f99f:	50                   	push   eax
c001f9a0:	e8 a4 fd ff ff       	call   c001f749 <Vm::fpuAbs(unsigned long long)>
c001f9a5:	83 c4 0c             	add    esp,0xc
c001f9a8:	52                   	push   edx
c001f9a9:	50                   	push   eax
c001f9aa:	6a 00                	push   0x0
c001f9ac:	e8 54 fe ff ff       	call   c001f805 <Vm::fpuSetReg(int, unsigned long long)>
c001f9b1:	eb bc                	jmp    c001f96f <Vm::x87Handler(regs*)+0x70>
c001f9b3:	e8 d3 fc ff ff       	call   c001f68b <Vm::fpuGetLog210()>
c001f9b8:	eb ac                	jmp    c001f966 <Vm::x87Handler(regs*)+0x67>
c001f9ba:	e8 9c fc ff ff       	call   c001f65b <Vm::fpuGetLog2E()>
c001f9bf:	eb a5                	jmp    c001f966 <Vm::x87Handler(regs*)+0x67>
c001f9c1:	e8 8d fc ff ff       	call   c001f653 <Vm::fpuGetPi()>
c001f9c6:	eb 9e                	jmp    c001f966 <Vm::x87Handler(regs*)+0x67>
c001f9c8:	e8 d6 fc ff ff       	call   c001f6a3 <Vm::fpuGetLog102()>
c001f9cd:	eb 97                	jmp    c001f966 <Vm::x87Handler(regs*)+0x67>
c001f9cf:	e8 9f fc ff ff       	call   c001f673 <Vm::fpuGetLogE2()>
c001f9d4:	eb 90                	jmp    c001f966 <Vm::x87Handler(regs*)+0x67>
c001f9d6:	8d 50 40             	lea    edx,[eax+0x40]
c001f9d9:	80 fa 07             	cmp    dl,0x7
c001f9dc:	77 15                	ja     c001f9f3 <Vm::x87Handler(regs*)+0xf4>
c001f9de:	83 ec 0c             	sub    esp,0xc
c001f9e1:	2d c0 00 00 00       	sub    eax,0xc0
c001f9e6:	50                   	push   eax
c001f9e7:	e8 d6 fd ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001f9ec:	59                   	pop    ecx
c001f9ed:	5e                   	pop    esi
c001f9ee:	e9 75 ff ff ff       	jmp    c001f968 <Vm::x87Handler(regs*)+0x69>
c001f9f3:	8d 50 38             	lea    edx,[eax+0x38]
c001f9f6:	80 fa 07             	cmp    dl,0x7
c001f9f9:	77 3c                	ja     c001fa37 <Vm::x87Handler(regs*)+0x138>
c001f9fb:	83 ec 0c             	sub    esp,0xc
c001f9fe:	2d c8 00 00 00       	sub    eax,0xc8
c001fa03:	50                   	push   eax
c001fa04:	e8 b9 fd ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fa09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa10:	89 c6                	mov    esi,eax
c001fa12:	89 d7                	mov    edi,edx
c001fa14:	e8 a9 fd ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fa19:	83 c4 0c             	add    esp,0xc
c001fa1c:	52                   	push   edx
c001fa1d:	50                   	push   eax
c001fa1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa22:	2d c8 00 00 00       	sub    eax,0xc8
c001fa27:	50                   	push   eax
c001fa28:	e8 d8 fd ff ff       	call   c001f805 <Vm::fpuSetReg(int, unsigned long long)>
c001fa2d:	83 c4 0c             	add    esp,0xc
c001fa30:	57                   	push   edi
c001fa31:	56                   	push   esi
c001fa32:	e9 73 ff ff ff       	jmp    c001f9aa <Vm::x87Handler(regs*)+0xab>
c001fa37:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa3b:	84 d2                	test   dl,dl
c001fa3d:	75 0f                	jne    c001fa4e <Vm::x87Handler(regs*)+0x14f>
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	ff 36                	push   DWORD PTR [esi]
c001fa44:	e8 c8 fa ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c001fa49:	e9 bf 00 00 00       	jmp    c001fb0d <Vm::x87Handler(regs*)+0x20e>
c001fa4e:	80 fa 03             	cmp    dl,0x3
c001fa51:	75 13                	jne    c001fa66 <Vm::x87Handler(regs*)+0x167>
c001fa53:	e8 55 fe ff ff       	call   c001f8ad <Vm::fpuPop()>
c001fa58:	55                   	push   ebp
c001fa59:	55                   	push   ebp
c001fa5a:	52                   	push   edx
c001fa5b:	50                   	push   eax
c001fa5c:	e8 4c fa ff ff       	call   c001f4ad <Vm::fpuInternalTo32(unsigned long long)>
c001fa61:	e9 88 00 00 00       	jmp    c001faee <Vm::x87Handler(regs*)+0x1ef>
c001fa66:	80 fa 05             	cmp    dl,0x5
c001fa69:	75 0e                	jne    c001fa79 <Vm::x87Handler(regs*)+0x17a>
c001fa6b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa6e:	66 a3 02 fc 02 c0    	mov    ds:0xc002fc02,ax
c001fa74:	e9 df 00 00 00       	jmp    c001fb58 <Vm::x87Handler(regs*)+0x259>
c001fa79:	31 c0                	xor    eax,eax
c001fa7b:	80 fa 07             	cmp    dl,0x7
c001fa7e:	0f 85 dc 08 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c001fa84:	66 a1 02 fc 02 c0    	mov    ax,ds:0xc002fc02
c001fa8a:	66 89 06             	mov    WORD PTR [esi],ax
c001fa8d:	e9 c6 00 00 00       	jmp    c001fb58 <Vm::x87Handler(regs*)+0x259>
c001fa92:	80 fa d8             	cmp    dl,0xd8
c001fa95:	0f 84 c9 00 00 00    	je     c001fb64 <Vm::x87Handler(regs*)+0x265>
c001fa9b:	80 fa dc             	cmp    dl,0xdc
c001fa9e:	0f 84 0d 02 00 00    	je     c001fcb1 <Vm::x87Handler(regs*)+0x3b2>
c001faa4:	80 fa de             	cmp    dl,0xde
c001faa7:	0f 84 cd 02 00 00    	je     c001fd7a <Vm::x87Handler(regs*)+0x47b>
c001faad:	80 fa dd             	cmp    dl,0xdd
c001fab0:	0f 84 5f 04 00 00    	je     c001ff15 <Vm::x87Handler(regs*)+0x616>
c001fab6:	80 fa da             	cmp    dl,0xda
c001fab9:	0f 84 24 05 00 00    	je     c001ffe3 <Vm::x87Handler(regs*)+0x6e4>
c001fabf:	80 fa df             	cmp    dl,0xdf
c001fac2:	0f 84 68 05 00 00    	je     c0020030 <Vm::x87Handler(regs*)+0x731>
c001fac8:	31 c0                	xor    eax,eax
c001faca:	80 fa db             	cmp    dl,0xdb
c001facd:	0f 85 8d 08 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c001fad3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fad7:	80 fa 03             	cmp    dl,0x3
c001fada:	0f 85 70 06 00 00    	jne    c0020150 <Vm::x87Handler(regs*)+0x851>
c001fae0:	e8 c8 fd ff ff       	call   c001f8ad <Vm::fpuPop()>
c001fae5:	55                   	push   ebp
c001fae6:	55                   	push   ebp
c001fae7:	52                   	push   edx
c001fae8:	50                   	push   eax
c001fae9:	e8 71 fa ff ff       	call   c001f55f <Vm::fpuFloatToLong(unsigned long long)>
c001faee:	83 c4 10             	add    esp,0x10
c001faf1:	89 06                	mov    DWORD PTR [esi],eax
c001faf3:	eb 63                	jmp    c001fb58 <Vm::x87Handler(regs*)+0x259>
c001faf5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faf9:	84 d2                	test   dl,dl
c001fafb:	0f 85 e6 05 00 00    	jne    c00200e7 <Vm::x87Handler(regs*)+0x7e8>
c001fb01:	57                   	push   edi
c001fb02:	57                   	push   edi
c001fb03:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb06:	ff 36                	push   DWORD PTR [esi]
c001fb08:	e8 49 fa ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c001fb0d:	5e                   	pop    esi
c001fb0e:	5f                   	pop    edi
c001fb0f:	52                   	push   edx
c001fb10:	50                   	push   eax
c001fb11:	e8 3a fd ff ff       	call   c001f850 <Vm::fpuPush(unsigned long long)>
c001fb16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb1a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb1d:	e9 51 fe ff ff       	jmp    c001f973 <Vm::x87Handler(regs*)+0x74>
c001fb22:	80 fa 03             	cmp    dl,0x3
c001fb25:	0f 85 d7 06 00 00    	jne    c0020202 <Vm::x87Handler(regs*)+0x903>
c001fb2b:	57                   	push   edi
c001fb2c:	57                   	push   edi
c001fb2d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb30:	ff 36                	push   DWORD PTR [esi]
c001fb32:	e8 1f fa ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c001fb37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb3e:	89 c6                	mov    esi,eax
c001fb40:	89 d7                	mov    edi,edx
c001fb42:	e8 7b fc ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fb47:	57                   	push   edi
c001fb48:	56                   	push   esi
c001fb49:	52                   	push   edx
c001fb4a:	50                   	push   eax
c001fb4b:	e8 95 fb ff ff       	call   c001f6e5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb50:	83 c4 20             	add    esp,0x20
c001fb53:	e8 55 fd ff ff       	call   c001f8ad <Vm::fpuPop()>
c001fb58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb5c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb5f:	e9 12 fe ff ff       	jmp    c001f976 <Vm::x87Handler(regs*)+0x77>
c001fb64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb68:	8d 50 40             	lea    edx,[eax+0x40]
c001fb6b:	80 fa 07             	cmp    dl,0x7
c001fb6e:	77 29                	ja     c001fb99 <Vm::x87Handler(regs*)+0x29a>
c001fb70:	83 ec 0c             	sub    esp,0xc
c001fb73:	2d c0 00 00 00       	sub    eax,0xc0
c001fb78:	50                   	push   eax
c001fb79:	e8 44 fc ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fb7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb85:	89 c6                	mov    esi,eax
c001fb87:	89 d7                	mov    edi,edx
c001fb89:	e8 34 fc ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fb8e:	57                   	push   edi
c001fb8f:	56                   	push   esi
c001fb90:	52                   	push   edx
c001fb91:	50                   	push   eax
c001fb92:	e8 a1 fb ff ff       	call   c001f738 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb97:	eb 2f                	jmp    c001fbc8 <Vm::x87Handler(regs*)+0x2c9>
c001fb99:	8d 50 38             	lea    edx,[eax+0x38]
c001fb9c:	80 fa 07             	cmp    dl,0x7
c001fb9f:	77 2f                	ja     c001fbd0 <Vm::x87Handler(regs*)+0x2d1>
c001fba1:	83 ec 0c             	sub    esp,0xc
c001fba4:	2d c8 00 00 00       	sub    eax,0xc8
c001fba9:	50                   	push   eax
c001fbaa:	e8 13 fc ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fbaf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb6:	89 c6                	mov    esi,eax
c001fbb8:	89 d7                	mov    edi,edx
c001fbba:	e8 03 fc ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fbbf:	57                   	push   edi
c001fbc0:	56                   	push   esi
c001fbc1:	52                   	push   edx
c001fbc2:	50                   	push   eax
c001fbc3:	e8 a9 fb ff ff       	call   c001f771 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbc8:	83 c4 1c             	add    esp,0x1c
c001fbcb:	e9 d8 fd ff ff       	jmp    c001f9a8 <Vm::x87Handler(regs*)+0xa9>
c001fbd0:	8d 50 30             	lea    edx,[eax+0x30]
c001fbd3:	80 fa 07             	cmp    dl,0x7
c001fbd6:	77 0d                	ja     c001fbe5 <Vm::x87Handler(regs*)+0x2e6>
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	2d d0 00 00 00       	sub    eax,0xd0
c001fbe0:	e9 99 03 00 00       	jmp    c001ff7e <Vm::x87Handler(regs*)+0x67f>
c001fbe5:	8d 50 28             	lea    edx,[eax+0x28]
c001fbe8:	80 fa 07             	cmp    dl,0x7
c001fbeb:	77 0d                	ja     c001fbfa <Vm::x87Handler(regs*)+0x2fb>
c001fbed:	83 ec 0c             	sub    esp,0xc
c001fbf0:	2d d8 00 00 00       	sub    eax,0xd8
c001fbf5:	e9 c0 03 00 00       	jmp    c001ffba <Vm::x87Handler(regs*)+0x6bb>
c001fbfa:	8d 50 20             	lea    edx,[eax+0x20]
c001fbfd:	80 fa 07             	cmp    dl,0x7
c001fc00:	77 1b                	ja     c001fc1d <Vm::x87Handler(regs*)+0x31e>
c001fc02:	83 ec 0c             	sub    esp,0xc
c001fc05:	2d e0 00 00 00       	sub    eax,0xe0
c001fc0a:	50                   	push   eax
c001fc0b:	e8 b2 fb ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fc10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc17:	89 c6                	mov    esi,eax
c001fc19:	89 d7                	mov    edi,edx
c001fc1b:	eb 22                	jmp    c001fc3f <Vm::x87Handler(regs*)+0x340>
c001fc1d:	8d 50 18             	lea    edx,[eax+0x18]
c001fc20:	80 fa 07             	cmp    dl,0x7
c001fc23:	77 2d                	ja     c001fc52 <Vm::x87Handler(regs*)+0x353>
c001fc25:	83 ec 0c             	sub    esp,0xc
c001fc28:	6a 00                	push   0x0
c001fc2a:	e8 93 fb ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fc2f:	89 c6                	mov    esi,eax
c001fc31:	89 d7                	mov    edi,edx
c001fc33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc37:	2d e8 00 00 00       	sub    eax,0xe8
c001fc3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc3f:	e8 7e fb ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fc44:	57                   	push   edi
c001fc45:	56                   	push   esi
c001fc46:	52                   	push   edx
c001fc47:	50                   	push   eax
c001fc48:	e8 15 fb ff ff       	call   c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc4d:	e9 76 ff ff ff       	jmp    c001fbc8 <Vm::x87Handler(regs*)+0x2c9>
c001fc52:	8d 50 10             	lea    edx,[eax+0x10]
c001fc55:	80 fa 07             	cmp    dl,0x7
c001fc58:	77 1b                	ja     c001fc75 <Vm::x87Handler(regs*)+0x376>
c001fc5a:	83 ec 0c             	sub    esp,0xc
c001fc5d:	2d f0 00 00 00       	sub    eax,0xf0
c001fc62:	50                   	push   eax
c001fc63:	e8 5a fb ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fc68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc6f:	89 c6                	mov    esi,eax
c001fc71:	89 d7                	mov    edi,edx
c001fc73:	eb 22                	jmp    c001fc97 <Vm::x87Handler(regs*)+0x398>
c001fc75:	3c f7                	cmp    al,0xf7
c001fc77:	0f 86 d1 03 00 00    	jbe    c002004e <Vm::x87Handler(regs*)+0x74f>
c001fc7d:	83 ec 0c             	sub    esp,0xc
c001fc80:	6a 00                	push   0x0
c001fc82:	e8 3b fb ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fc87:	89 c6                	mov    esi,eax
c001fc89:	89 d7                	mov    edi,edx
c001fc8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc8f:	2d f8 00 00 00       	sub    eax,0xf8
c001fc94:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc97:	e8 26 fb ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fc9c:	57                   	push   edi
c001fc9d:	56                   	push   esi
c001fc9e:	52                   	push   edx
c001fc9f:	50                   	push   eax
c001fca0:	e8 eb fa ff ff       	call   c001f790 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fca5:	83 c4 1c             	add    esp,0x1c
c001fca8:	52                   	push   edx
c001fca9:	50                   	push   eax
c001fcaa:	6a 00                	push   0x0
c001fcac:	e9 51 02 00 00       	jmp    c001ff02 <Vm::x87Handler(regs*)+0x603>
c001fcb1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcb5:	8d 50 40             	lea    edx,[eax+0x40]
c001fcb8:	80 fa 07             	cmp    dl,0x7
c001fcbb:	77 37                	ja     c001fcf4 <Vm::x87Handler(regs*)+0x3f5>
c001fcbd:	83 ec 0c             	sub    esp,0xc
c001fcc0:	2d c0 00 00 00       	sub    eax,0xc0
c001fcc5:	50                   	push   eax
c001fcc6:	e8 f7 fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fccb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd2:	89 c6                	mov    esi,eax
c001fcd4:	89 d7                	mov    edi,edx
c001fcd6:	e8 e7 fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fcdb:	57                   	push   edi
c001fcdc:	56                   	push   esi
c001fcdd:	52                   	push   edx
c001fcde:	50                   	push   eax
c001fcdf:	e8 54 fa ff ff       	call   c001f738 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fce4:	83 c4 1c             	add    esp,0x1c
c001fce7:	52                   	push   edx
c001fce8:	50                   	push   eax
c001fce9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fced:	2d c0 00 00 00       	sub    eax,0xc0
c001fcf2:	eb 3d                	jmp    c001fd31 <Vm::x87Handler(regs*)+0x432>
c001fcf4:	8d 50 38             	lea    edx,[eax+0x38]
c001fcf7:	80 fa 07             	cmp    dl,0x7
c001fcfa:	77 3b                	ja     c001fd37 <Vm::x87Handler(regs*)+0x438>
c001fcfc:	83 ec 0c             	sub    esp,0xc
c001fcff:	2d c8 00 00 00       	sub    eax,0xc8
c001fd04:	50                   	push   eax
c001fd05:	e8 b8 fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fd0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd11:	89 c6                	mov    esi,eax
c001fd13:	89 d7                	mov    edi,edx
c001fd15:	e8 a8 fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fd1a:	57                   	push   edi
c001fd1b:	56                   	push   esi
c001fd1c:	52                   	push   edx
c001fd1d:	50                   	push   eax
c001fd1e:	e8 4e fa ff ff       	call   c001f771 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd23:	83 c4 1c             	add    esp,0x1c
c001fd26:	52                   	push   edx
c001fd27:	50                   	push   eax
c001fd28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd2c:	2d c8 00 00 00       	sub    eax,0xc8
c001fd31:	50                   	push   eax
c001fd32:	e9 75 fc ff ff       	jmp    c001f9ac <Vm::x87Handler(regs*)+0xad>
c001fd37:	83 c0 18             	add    eax,0x18
c001fd3a:	3c 07                	cmp    al,0x7
c001fd3c:	0f 87 3b 04 00 00    	ja     c002017d <Vm::x87Handler(regs*)+0x87e>
c001fd42:	83 ec 0c             	sub    esp,0xc
c001fd45:	6a 00                	push   0x0
c001fd47:	e8 76 fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fd4c:	89 c6                	mov    esi,eax
c001fd4e:	89 d7                	mov    edi,edx
c001fd50:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd54:	2d e8 00 00 00       	sub    eax,0xe8
c001fd59:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd5c:	e8 61 fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fd61:	57                   	push   edi
c001fd62:	56                   	push   esi
c001fd63:	52                   	push   edx
c001fd64:	50                   	push   eax
c001fd65:	e8 f8 f9 ff ff       	call   c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd6a:	83 c4 1c             	add    esp,0x1c
c001fd6d:	52                   	push   edx
c001fd6e:	50                   	push   eax
c001fd6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd73:	2d e8 00 00 00       	sub    eax,0xe8
c001fd78:	eb b7                	jmp    c001fd31 <Vm::x87Handler(regs*)+0x432>
c001fd7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd7e:	8d 50 40             	lea    edx,[eax+0x40]
c001fd81:	80 fa 07             	cmp    dl,0x7
c001fd84:	77 3a                	ja     c001fdc0 <Vm::x87Handler(regs*)+0x4c1>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	2d c0 00 00 00       	sub    eax,0xc0
c001fd8e:	50                   	push   eax
c001fd8f:	e8 2e fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fd94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9b:	89 c6                	mov    esi,eax
c001fd9d:	89 d7                	mov    edi,edx
c001fd9f:	e8 1e fa ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fda4:	57                   	push   edi
c001fda5:	56                   	push   esi
c001fda6:	52                   	push   edx
c001fda7:	50                   	push   eax
c001fda8:	e8 8b f9 ff ff       	call   c001f738 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdad:	83 c4 1c             	add    esp,0x1c
c001fdb0:	52                   	push   edx
c001fdb1:	50                   	push   eax
c001fdb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb6:	2d c0 00 00 00       	sub    eax,0xc0
c001fdbb:	e9 9e 01 00 00       	jmp    c001ff5e <Vm::x87Handler(regs*)+0x65f>
c001fdc0:	8d 50 20             	lea    edx,[eax+0x20]
c001fdc3:	80 fa 07             	cmp    dl,0x7
c001fdc6:	77 3a                	ja     c001fe02 <Vm::x87Handler(regs*)+0x503>
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	2d e0 00 00 00       	sub    eax,0xe0
c001fdd0:	50                   	push   eax
c001fdd1:	e8 ec f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fdd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddd:	89 c6                	mov    esi,eax
c001fddf:	89 d7                	mov    edi,edx
c001fde1:	e8 dc f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fde6:	57                   	push   edi
c001fde7:	56                   	push   esi
c001fde8:	52                   	push   edx
c001fde9:	50                   	push   eax
c001fdea:	e8 73 f9 ff ff       	call   c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdef:	83 c4 1c             	add    esp,0x1c
c001fdf2:	52                   	push   edx
c001fdf3:	50                   	push   eax
c001fdf4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf8:	2d e0 00 00 00       	sub    eax,0xe0
c001fdfd:	e9 5c 01 00 00       	jmp    c001ff5e <Vm::x87Handler(regs*)+0x65f>
c001fe02:	8d 50 18             	lea    edx,[eax+0x18]
c001fe05:	80 fa 07             	cmp    dl,0x7
c001fe08:	77 3b                	ja     c001fe45 <Vm::x87Handler(regs*)+0x546>
c001fe0a:	83 ec 0c             	sub    esp,0xc
c001fe0d:	6a 00                	push   0x0
c001fe0f:	e8 ae f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fe14:	89 c6                	mov    esi,eax
c001fe16:	89 d7                	mov    edi,edx
c001fe18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe1c:	2d e8 00 00 00       	sub    eax,0xe8
c001fe21:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe24:	e8 99 f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fe29:	57                   	push   edi
c001fe2a:	56                   	push   esi
c001fe2b:	52                   	push   edx
c001fe2c:	50                   	push   eax
c001fe2d:	e8 30 f9 ff ff       	call   c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe32:	83 c4 1c             	add    esp,0x1c
c001fe35:	52                   	push   edx
c001fe36:	50                   	push   eax
c001fe37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe3b:	2d e8 00 00 00       	sub    eax,0xe8
c001fe40:	e9 19 01 00 00       	jmp    c001ff5e <Vm::x87Handler(regs*)+0x65f>
c001fe45:	8d 50 38             	lea    edx,[eax+0x38]
c001fe48:	80 fa 07             	cmp    dl,0x7
c001fe4b:	77 37                	ja     c001fe84 <Vm::x87Handler(regs*)+0x585>
c001fe4d:	83 ec 0c             	sub    esp,0xc
c001fe50:	2d c8 00 00 00       	sub    eax,0xc8
c001fe55:	50                   	push   eax
c001fe56:	e8 67 f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fe5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe62:	89 c6                	mov    esi,eax
c001fe64:	89 d7                	mov    edi,edx
c001fe66:	e8 57 f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fe6b:	57                   	push   edi
c001fe6c:	56                   	push   esi
c001fe6d:	52                   	push   edx
c001fe6e:	50                   	push   eax
c001fe6f:	e8 fd f8 ff ff       	call   c001f771 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe74:	83 c4 1c             	add    esp,0x1c
c001fe77:	52                   	push   edx
c001fe78:	50                   	push   eax
c001fe79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7d:	2d c8 00 00 00       	sub    eax,0xc8
c001fe82:	eb 7d                	jmp    c001ff01 <Vm::x87Handler(regs*)+0x602>
c001fe84:	3c f7                	cmp    al,0xf7
c001fe86:	76 38                	jbe    c001fec0 <Vm::x87Handler(regs*)+0x5c1>
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	6a 00                	push   0x0
c001fe8d:	e8 30 f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fe92:	89 c6                	mov    esi,eax
c001fe94:	89 d7                	mov    edi,edx
c001fe96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe9a:	2d f8 00 00 00       	sub    eax,0xf8
c001fe9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fea2:	e8 1b f9 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fea7:	57                   	push   edi
c001fea8:	56                   	push   esi
c001fea9:	52                   	push   edx
c001feaa:	50                   	push   eax
c001feab:	e8 e0 f8 ff ff       	call   c001f790 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feb0:	83 c4 1c             	add    esp,0x1c
c001feb3:	52                   	push   edx
c001feb4:	50                   	push   eax
c001feb5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb9:	2d f8 00 00 00       	sub    eax,0xf8
c001febe:	eb 41                	jmp    c001ff01 <Vm::x87Handler(regs*)+0x602>
c001fec0:	8d 50 10             	lea    edx,[eax+0x10]
c001fec3:	80 fa 07             	cmp    dl,0x7
c001fec6:	0f 87 5a 01 00 00    	ja     c0020026 <Vm::x87Handler(regs*)+0x727>
c001fecc:	83 ec 0c             	sub    esp,0xc
c001fecf:	2d f0 00 00 00       	sub    eax,0xf0
c001fed4:	50                   	push   eax
c001fed5:	e8 e8 f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001feda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fee1:	89 c6                	mov    esi,eax
c001fee3:	89 d7                	mov    edi,edx
c001fee5:	e8 d8 f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001feea:	57                   	push   edi
c001feeb:	56                   	push   esi
c001feec:	52                   	push   edx
c001feed:	50                   	push   eax
c001feee:	e8 9d f8 ff ff       	call   c001f790 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fef3:	83 c4 1c             	add    esp,0x1c
c001fef6:	52                   	push   edx
c001fef7:	50                   	push   eax
c001fef8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fefc:	2d f0 00 00 00       	sub    eax,0xf0
c001ff01:	50                   	push   eax
c001ff02:	e8 fe f8 ff ff       	call   c001f805 <Vm::fpuSetReg(int, unsigned long long)>
c001ff07:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff0b:	e8 9d f9 ff ff       	call   c001f8ad <Vm::fpuPop()>
c001ff10:	e9 5e fa ff ff       	jmp    c001f973 <Vm::x87Handler(regs*)+0x74>
c001ff15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff19:	8d 50 30             	lea    edx,[eax+0x30]
c001ff1c:	80 fa 07             	cmp    dl,0x7
c001ff1f:	77 1d                	ja     c001ff3e <Vm::x87Handler(regs*)+0x63f>
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	6a 00                	push   0x0
c001ff26:	e8 97 f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001ff2b:	83 c4 0c             	add    esp,0xc
c001ff2e:	52                   	push   edx
c001ff2f:	50                   	push   eax
c001ff30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff34:	2d d0 00 00 00       	sub    eax,0xd0
c001ff39:	e9 f3 fd ff ff       	jmp    c001fd31 <Vm::x87Handler(regs*)+0x432>
c001ff3e:	8d 50 28             	lea    edx,[eax+0x28]
c001ff41:	80 fa 07             	cmp    dl,0x7
c001ff44:	77 28                	ja     c001ff6e <Vm::x87Handler(regs*)+0x66f>
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	6a 00                	push   0x0
c001ff4b:	e8 72 f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001ff50:	83 c4 0c             	add    esp,0xc
c001ff53:	52                   	push   edx
c001ff54:	50                   	push   eax
c001ff55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff59:	2d d8 00 00 00       	sub    eax,0xd8
c001ff5e:	50                   	push   eax
c001ff5f:	e8 a1 f8 ff ff       	call   c001f805 <Vm::fpuSetReg(int, unsigned long long)>
c001ff64:	e8 44 f9 ff ff       	call   c001f8ad <Vm::fpuPop()>
c001ff69:	e9 01 fa ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x70>
c001ff6e:	8d 50 20             	lea    edx,[eax+0x20]
c001ff71:	80 fa 07             	cmp    dl,0x7
c001ff74:	77 30                	ja     c001ffa6 <Vm::x87Handler(regs*)+0x6a7>
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	2d e0 00 00 00       	sub    eax,0xe0
c001ff7e:	50                   	push   eax
c001ff7f:	e8 3e f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001ff84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	89 d7                	mov    edi,edx
c001ff8f:	e8 2e f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001ff94:	57                   	push   edi
c001ff95:	56                   	push   esi
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	e8 48 f7 ff ff       	call   c001f6e5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff9d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffa1:	e9 54 02 00 00       	jmp    c00201fa <Vm::x87Handler(regs*)+0x8fb>
c001ffa6:	8d 50 18             	lea    edx,[eax+0x18]
c001ffa9:	80 fa 07             	cmp    dl,0x7
c001ffac:	0f 87 43 fb ff ff    	ja     c001faf5 <Vm::x87Handler(regs*)+0x1f6>
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	2d e8 00 00 00       	sub    eax,0xe8
c001ffba:	50                   	push   eax
c001ffbb:	e8 02 f8 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001ffc0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc7:	89 c6                	mov    esi,eax
c001ffc9:	89 d7                	mov    edi,edx
c001ffcb:	e8 f2 f7 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001ffd0:	57                   	push   edi
c001ffd1:	56                   	push   esi
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	e8 0c f7 ff ff       	call   c001f6e5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd9:	83 c4 20             	add    esp,0x20
c001ffdc:	e8 cc f8 ff ff       	call   c001f8ad <Vm::fpuPop()>
c001ffe1:	eb 62                	jmp    c0020045 <Vm::x87Handler(regs*)+0x746>
c001ffe3:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001ffe7:	0f 85 0f 01 00 00    	jne    c00200fc <Vm::x87Handler(regs*)+0x7fd>
c001ffed:	83 ec 0c             	sub    esp,0xc
c001fff0:	6a 01                	push   0x1
c001fff2:	e8 cb f7 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c001fff7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fffe:	89 c6                	mov    esi,eax
c0020000:	89 d7                	mov    edi,edx
c0020002:	e8 bb f7 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c0020007:	57                   	push   edi
c0020008:	56                   	push   esi
c0020009:	52                   	push   edx
c002000a:	50                   	push   eax
c002000b:	e8 d5 f6 ff ff       	call   c001f6e5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020010:	83 c4 20             	add    esp,0x20
c0020013:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020017:	e8 91 f8 ff ff       	call   c001f8ad <Vm::fpuPop()>
c002001c:	e8 8c f8 ff ff       	call   c001f8ad <Vm::fpuPop()>
c0020021:	e9 50 f9 ff ff       	jmp    c001f976 <Vm::x87Handler(regs*)+0x77>
c0020026:	3c d9                	cmp    al,0xd9
c0020028:	0f 85 b5 02 00 00    	jne    c00202e3 <Vm::x87Handler(regs*)+0x9e4>
c002002e:	eb bd                	jmp    c001ffed <Vm::x87Handler(regs*)+0x6ee>
c0020030:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020034:	0f 85 ea 02 00 00    	jne    c0020324 <Vm::x87Handler(regs*)+0xa25>
c002003a:	0f b7 05 00 fc 02 c0 	movzx  eax,WORD PTR ds:0xc002fc00
c0020041:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020045:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020049:	e9 28 f9 ff ff       	jmp    c001f976 <Vm::x87Handler(regs*)+0x77>
c002004e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020052:	84 d2                	test   dl,dl
c0020054:	75 0f                	jne    c0020065 <Vm::x87Handler(regs*)+0x766>
c0020056:	83 ec 0c             	sub    esp,0xc
c0020059:	ff 36                	push   DWORD PTR [esi]
c002005b:	e8 b1 f4 ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c0020060:	e9 2c 01 00 00       	jmp    c0020191 <Vm::x87Handler(regs*)+0x892>
c0020065:	80 fa 01             	cmp    dl,0x1
c0020068:	75 0f                	jne    c0020079 <Vm::x87Handler(regs*)+0x77a>
c002006a:	83 ec 0c             	sub    esp,0xc
c002006d:	ff 36                	push   DWORD PTR [esi]
c002006f:	e8 9d f4 ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c0020074:	e9 81 02 00 00       	jmp    c00202fa <Vm::x87Handler(regs*)+0x9fb>
c0020079:	80 fa 04             	cmp    dl,0x4
c002007c:	75 0f                	jne    c002008d <Vm::x87Handler(regs*)+0x78e>
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ff 36                	push   DWORD PTR [esi]
c0020083:	e8 89 f4 ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c0020088:	e9 86 01 00 00       	jmp    c0020213 <Vm::x87Handler(regs*)+0x914>
c002008d:	80 fa 05             	cmp    dl,0x5
c0020090:	75 1b                	jne    c00200ad <Vm::x87Handler(regs*)+0x7ae>
c0020092:	83 ec 0c             	sub    esp,0xc
c0020095:	6a 00                	push   0x0
c0020097:	e8 26 f7 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c002009c:	89 c7                	mov    edi,eax
c002009e:	89 d5                	mov    ebp,edx
c00200a0:	58                   	pop    eax
c00200a1:	ff 36                	push   DWORD PTR [esi]
c00200a3:	e8 69 f4 ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c00200a8:	e9 a3 01 00 00       	jmp    c0020250 <Vm::x87Handler(regs*)+0x951>
c00200ad:	80 fa 06             	cmp    dl,0x6
c00200b0:	75 0f                	jne    c00200c1 <Vm::x87Handler(regs*)+0x7c2>
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	ff 36                	push   DWORD PTR [esi]
c00200b7:	e8 55 f4 ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c00200bc:	e9 ae 01 00 00       	jmp    c002026f <Vm::x87Handler(regs*)+0x970>
c00200c1:	31 c0                	xor    eax,eax
c00200c3:	80 fa 07             	cmp    dl,0x7
c00200c6:	0f 85 94 02 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	6a 00                	push   0x0
c00200d1:	e8 ec f6 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c00200d6:	89 c7                	mov    edi,eax
c00200d8:	89 d5                	mov    ebp,edx
c00200da:	58                   	pop    eax
c00200db:	ff 36                	push   DWORD PTR [esi]
c00200dd:	e8 2f f4 ff ff       	call   c001f511 <Vm::fpu32ToInternal(unsigned int)>
c00200e2:	e9 cb 01 00 00       	jmp    c00202b2 <Vm::x87Handler(regs*)+0x9b3>
c00200e7:	80 fa 03             	cmp    dl,0x3
c00200ea:	0f 85 d3 01 00 00    	jne    c00202c3 <Vm::x87Handler(regs*)+0x9c4>
c00200f0:	e8 b8 f7 ff ff       	call   c001f8ad <Vm::fpuPop()>
c00200f5:	51                   	push   ecx
c00200f6:	51                   	push   ecx
c00200f7:	e9 de 01 00 00       	jmp    c00202da <Vm::x87Handler(regs*)+0x9db>
c00200fc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020100:	80 fa 01             	cmp    dl,0x1
c0020103:	75 09                	jne    c002010e <Vm::x87Handler(regs*)+0x80f>
c0020105:	57                   	push   edi
c0020106:	57                   	push   edi
c0020107:	8b 06                	mov    eax,DWORD PTR [esi]
c0020109:	e9 e3 01 00 00       	jmp    c00202f1 <Vm::x87Handler(regs*)+0x9f2>
c002010e:	80 fa 04             	cmp    dl,0x4
c0020111:	75 12                	jne    c0020125 <Vm::x87Handler(regs*)+0x826>
c0020113:	31 d2                	xor    edx,edx
c0020115:	51                   	push   ecx
c0020116:	51                   	push   ecx
c0020117:	8b 06                	mov    eax,DWORD PTR [esi]
c0020119:	52                   	push   edx
c002011a:	50                   	push   eax
c002011b:	e8 d0 f4 ff ff       	call   c001f5f0 <Vm::fpuLongToFloat(long long)>
c0020120:	e9 ee 00 00 00       	jmp    c0020213 <Vm::x87Handler(regs*)+0x914>
c0020125:	31 c0                	xor    eax,eax
c0020127:	80 fa 07             	cmp    dl,0x7
c002012a:	0f 85 30 02 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c0020130:	83 ec 0c             	sub    esp,0xc
c0020133:	6a 00                	push   0x0
c0020135:	e8 88 f6 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c002013a:	89 c7                	mov    edi,eax
c002013c:	89 d5                	mov    ebp,edx
c002013e:	58                   	pop    eax
c002013f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020141:	5a                   	pop    edx
c0020142:	31 d2                	xor    edx,edx
c0020144:	52                   	push   edx
c0020145:	50                   	push   eax
c0020146:	e8 a5 f4 ff ff       	call   c001f5f0 <Vm::fpuLongToFloat(long long)>
c002014b:	e9 62 01 00 00       	jmp    c00202b2 <Vm::x87Handler(regs*)+0x9b3>
c0020150:	84 d2                	test   dl,dl
c0020152:	75 0d                	jne    c0020161 <Vm::x87Handler(regs*)+0x862>
c0020154:	31 d2                	xor    edx,edx
c0020156:	55                   	push   ebp
c0020157:	55                   	push   ebp
c0020158:	8b 06                	mov    eax,DWORD PTR [esi]
c002015a:	52                   	push   edx
c002015b:	50                   	push   eax
c002015c:	e9 d3 01 00 00       	jmp    c0020334 <Vm::x87Handler(regs*)+0xa35>
c0020161:	31 c0                	xor    eax,eax
c0020163:	80 fa 02             	cmp    dl,0x2
c0020166:	0f 85 f4 01 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c002016c:	83 ec 0c             	sub    esp,0xc
c002016f:	6a 00                	push   0x0
c0020171:	e8 4c f6 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c0020176:	59                   	pop    ecx
c0020177:	5f                   	pop    edi
c0020178:	e9 6a f9 ff ff       	jmp    c001fae7 <Vm::x87Handler(regs*)+0x1e8>
c002017d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020181:	84 d2                	test   dl,dl
c0020183:	75 2a                	jne    c00201af <Vm::x87Handler(regs*)+0x8b0>
c0020185:	50                   	push   eax
c0020186:	50                   	push   eax
c0020187:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002018a:	ff 36                	push   DWORD PTR [esi]
c002018c:	e8 c5 f3 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c0020191:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020198:	89 c6                	mov    esi,eax
c002019a:	89 d7                	mov    edi,edx
c002019c:	e8 21 f6 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c00201a1:	57                   	push   edi
c00201a2:	56                   	push   esi
c00201a3:	52                   	push   edx
c00201a4:	50                   	push   eax
c00201a5:	e8 8e f5 ff ff       	call   c001f738 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201aa:	e9 64 01 00 00       	jmp    c0020313 <Vm::x87Handler(regs*)+0xa14>
c00201af:	80 fa 01             	cmp    dl,0x1
c00201b2:	75 11                	jne    c00201c5 <Vm::x87Handler(regs*)+0x8c6>
c00201b4:	50                   	push   eax
c00201b5:	50                   	push   eax
c00201b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201b9:	ff 36                	push   DWORD PTR [esi]
c00201bb:	e8 96 f3 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c00201c0:	e9 35 01 00 00       	jmp    c00202fa <Vm::x87Handler(regs*)+0x9fb>
c00201c5:	80 fa 02             	cmp    dl,0x2
c00201c8:	0f 85 54 f9 ff ff    	jne    c001fb22 <Vm::x87Handler(regs*)+0x223>
c00201ce:	55                   	push   ebp
c00201cf:	55                   	push   ebp
c00201d0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201d3:	ff 36                	push   DWORD PTR [esi]
c00201d5:	e8 7c f3 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c00201da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e1:	89 c6                	mov    esi,eax
c00201e3:	89 d7                	mov    edi,edx
c00201e5:	e8 d8 f5 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c00201ea:	57                   	push   edi
c00201eb:	56                   	push   esi
c00201ec:	52                   	push   edx
c00201ed:	50                   	push   eax
c00201ee:	e8 f2 f4 ff ff       	call   c001f6e5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00201f7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00201fa:	83 c4 20             	add    esp,0x20
c00201fd:	e9 74 f7 ff ff       	jmp    c001f976 <Vm::x87Handler(regs*)+0x77>
c0020202:	80 fa 04             	cmp    dl,0x4
c0020205:	75 2a                	jne    c0020231 <Vm::x87Handler(regs*)+0x932>
c0020207:	51                   	push   ecx
c0020208:	51                   	push   ecx
c0020209:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002020c:	ff 36                	push   DWORD PTR [esi]
c002020e:	e8 43 f3 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c0020213:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002021a:	89 c6                	mov    esi,eax
c002021c:	89 d7                	mov    edi,edx
c002021e:	e8 9f f5 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c0020223:	57                   	push   edi
c0020224:	56                   	push   esi
c0020225:	52                   	push   edx
c0020226:	50                   	push   eax
c0020227:	e8 36 f5 ff ff       	call   c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002022c:	e9 e2 00 00 00       	jmp    c0020313 <Vm::x87Handler(regs*)+0xa14>
c0020231:	80 fa 05             	cmp    dl,0x5
c0020234:	75 28                	jne    c002025e <Vm::x87Handler(regs*)+0x95f>
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	6a 00                	push   0x0
c002023b:	e8 82 f5 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c0020240:	89 c7                	mov    edi,eax
c0020242:	89 d5                	mov    ebp,edx
c0020244:	58                   	pop    eax
c0020245:	5a                   	pop    edx
c0020246:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020249:	ff 36                	push   DWORD PTR [esi]
c002024b:	e8 06 f3 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c0020250:	83 c4 10             	add    esp,0x10
c0020253:	55                   	push   ebp
c0020254:	57                   	push   edi
c0020255:	52                   	push   edx
c0020256:	50                   	push   eax
c0020257:	e8 06 f5 ff ff       	call   c001f762 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002025c:	eb 60                	jmp    c00202be <Vm::x87Handler(regs*)+0x9bf>
c002025e:	80 fa 06             	cmp    dl,0x6
c0020261:	75 2a                	jne    c002028d <Vm::x87Handler(regs*)+0x98e>
c0020263:	51                   	push   ecx
c0020264:	51                   	push   ecx
c0020265:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020268:	ff 36                	push   DWORD PTR [esi]
c002026a:	e8 e7 f2 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c002026f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020276:	89 c6                	mov    esi,eax
c0020278:	89 d7                	mov    edi,edx
c002027a:	e8 43 f5 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c002027f:	57                   	push   edi
c0020280:	56                   	push   esi
c0020281:	52                   	push   edx
c0020282:	50                   	push   eax
c0020283:	e8 08 f5 ff ff       	call   c001f790 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020288:	e9 86 00 00 00       	jmp    c0020313 <Vm::x87Handler(regs*)+0xa14>
c002028d:	31 c0                	xor    eax,eax
c002028f:	80 fa 07             	cmp    dl,0x7
c0020292:	0f 85 c8 00 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	6a 00                	push   0x0
c002029d:	e8 20 f5 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c00202a2:	89 c7                	mov    edi,eax
c00202a4:	89 d5                	mov    ebp,edx
c00202a6:	58                   	pop    eax
c00202a7:	5a                   	pop    edx
c00202a8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202ab:	ff 36                	push   DWORD PTR [esi]
c00202ad:	e8 a4 f2 ff ff       	call   c001f556 <Vm::fpu64ToInternal(unsigned long long)>
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	55                   	push   ebp
c00202b6:	57                   	push   edi
c00202b7:	52                   	push   edx
c00202b8:	50                   	push   eax
c00202b9:	e8 d2 f4 ff ff       	call   c001f790 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202be:	83 c4 0c             	add    esp,0xc
c00202c1:	eb 53                	jmp    c0020316 <Vm::x87Handler(regs*)+0xa17>
c00202c3:	31 c0                	xor    eax,eax
c00202c5:	80 fa 02             	cmp    dl,0x2
c00202c8:	0f 85 92 00 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	6a 00                	push   0x0
c00202d3:	e8 ea f4 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c00202d8:	59                   	pop    ecx
c00202d9:	5f                   	pop    edi
c00202da:	52                   	push   edx
c00202db:	50                   	push   eax
c00202dc:	e8 27 f2 ff ff       	call   c001f508 <Vm::fpuInternalTo64(unsigned long long)>
c00202e1:	eb 70                	jmp    c0020353 <Vm::x87Handler(regs*)+0xa54>
c00202e3:	31 c0                	xor    eax,eax
c00202e5:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202ea:	75 74                	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c00202ec:	50                   	push   eax
c00202ed:	50                   	push   eax
c00202ee:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00202f1:	31 d2                	xor    edx,edx
c00202f3:	52                   	push   edx
c00202f4:	50                   	push   eax
c00202f5:	e8 f6 f2 ff ff       	call   c001f5f0 <Vm::fpuLongToFloat(long long)>
c00202fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020301:	89 c6                	mov    esi,eax
c0020303:	89 d7                	mov    edi,edx
c0020305:	e8 b8 f4 ff ff       	call   c001f7c2 <Vm::fpuGetReg(int)>
c002030a:	57                   	push   edi
c002030b:	56                   	push   esi
c002030c:	52                   	push   edx
c002030d:	50                   	push   eax
c002030e:	e8 5e f4 ff ff       	call   c001f771 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020313:	83 c4 1c             	add    esp,0x1c
c0020316:	52                   	push   edx
c0020317:	50                   	push   eax
c0020318:	6a 00                	push   0x0
c002031a:	e8 e6 f4 ff ff       	call   c001f805 <Vm::fpuSetReg(int, unsigned long long)>
c002031f:	e9 f2 f7 ff ff       	jmp    c001fb16 <Vm::x87Handler(regs*)+0x217>
c0020324:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020328:	80 fa 05             	cmp    dl,0x5
c002032b:	75 11                	jne    c002033e <Vm::x87Handler(regs*)+0xa3f>
c002032d:	55                   	push   ebp
c002032e:	55                   	push   ebp
c002032f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020332:	ff 36                	push   DWORD PTR [esi]
c0020334:	e8 81 f2 ff ff       	call   c001f5ba <Vm::fpuULongToFloat(unsigned long long)>
c0020339:	e9 cf f7 ff ff       	jmp    c001fb0d <Vm::x87Handler(regs*)+0x20e>
c002033e:	31 c0                	xor    eax,eax
c0020340:	80 fa 07             	cmp    dl,0x7
c0020343:	75 1b                	jne    c0020360 <Vm::x87Handler(regs*)+0xa61>
c0020345:	e8 63 f5 ff ff       	call   c001f8ad <Vm::fpuPop()>
c002034a:	51                   	push   ecx
c002034b:	51                   	push   ecx
c002034c:	52                   	push   edx
c002034d:	50                   	push   eax
c002034e:	e8 0c f2 ff ff       	call   c001f55f <Vm::fpuFloatToLong(unsigned long long)>
c0020353:	83 c4 10             	add    esp,0x10
c0020356:	89 06                	mov    DWORD PTR [esi],eax
c0020358:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002035b:	e9 f8 f7 ff ff       	jmp    c001fb58 <Vm::x87Handler(regs*)+0x259>
c0020360:	83 c4 1c             	add    esp,0x1c
c0020363:	5b                   	pop    ebx
c0020364:	5e                   	pop    esi
c0020365:	5f                   	pop    edi
c0020366:	5d                   	pop    ebp
c0020367:	c3                   	ret    

c0020368 <__static_initialization_and_destruction_0(int, int)>:
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020370:	75 1a                	jne    c002038c <__static_initialization_and_destruction_0(int, int)+0x24>
c0020372:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002037a:	75 10                	jne    c002038c <__static_initialization_and_destruction_0(int, int)+0x24>
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	68 00 fc 02 c0       	push   0xc002fc00
c0020384:	e8 51 8e 00 00       	call   c00291da <Vm::_FPUState::_FPUState()>
c0020389:	83 c4 10             	add    esp,0x10
c002038c:	90                   	nop
c002038d:	83 c4 0c             	add    esp,0xc
c0020390:	c3                   	ret    

c0020391 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020391:	83 ec 0c             	sub    esp,0xc
c0020394:	83 ec 08             	sub    esp,0x8
c0020397:	68 ff ff 00 00       	push   0xffff
c002039c:	6a 01                	push   0x1
c002039e:	e8 c5 ff ff ff       	call   c0020368 <__static_initialization_and_destruction_0(int, int)>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	83 c4 0c             	add    esp,0xc
c00203a9:	c3                   	ret    

c00203aa <FAT::getName()>:
c00203aa:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00203af:	c3                   	ret    

c00203b0 <FAT::tell(void*, unsigned long long*)>:
c00203b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203b5:	75 06                	jne    c00203bd <FAT::tell(void*, unsigned long long*)+0xd>
c00203b7:	b8 04 00 00 00       	mov    eax,0x4
c00203bc:	c3                   	ret    
c00203bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203c2:	75 06                	jne    c00203ca <FAT::tell(void*, unsigned long long*)+0x1a>
c00203c4:	b8 04 00 00 00       	mov    eax,0x4
c00203c9:	c3                   	ret    
c00203ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203ce:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00203d1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00203d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203d8:	89 01                	mov    DWORD PTR [ecx],eax
c00203da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203dd:	b8 00 00 00 00       	mov    eax,0x0
c00203e2:	c3                   	ret    
c00203e3:	90                   	nop

c00203e4 <FAT::stat(void*, unsigned long long*)>:
c00203e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203e9:	75 06                	jne    c00203f1 <FAT::stat(void*, unsigned long long*)+0xd>
c00203eb:	b8 04 00 00 00       	mov    eax,0x4
c00203f0:	c3                   	ret    
c00203f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203f6:	75 06                	jne    c00203fe <FAT::stat(void*, unsigned long long*)+0x1a>
c00203f8:	b8 04 00 00 00       	mov    eax,0x4
c00203fd:	c3                   	ret    
c00203fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020402:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020405:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020408:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002040c:	89 01                	mov    DWORD PTR [ecx],eax
c002040e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020411:	b8 00 00 00 00       	mov    eax,0x0
c0020416:	c3                   	ret    
c0020417:	90                   	nop

c0020418 <FAT::~FAT()>:
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	ba 1c cb 02 c0       	mov    edx,0xc002cb1c
c0020420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020424:	89 10                	mov    DWORD PTR [eax],edx
c0020426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042a:	83 ec 0c             	sub    esp,0xc
c002042d:	50                   	push   eax
c002042e:	e8 fb 28 ff ff       	call   c0012d2e <Filesystem::~Filesystem()>
c0020433:	83 c4 10             	add    esp,0x10
c0020436:	90                   	nop
c0020437:	83 c4 0c             	add    esp,0xc
c002043a:	c3                   	ret    
c002043b:	90                   	nop

c002043c <FAT::~FAT()>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	83 ec 0c             	sub    esp,0xc
c0020442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020446:	e8 cd ff ff ff       	call   c0020418 <FAT::~FAT()>
c002044b:	83 c4 10             	add    esp,0x10
c002044e:	83 ec 08             	sub    esp,0x8
c0020451:	6a 08                	push   0x8
c0020453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020457:	e8 cb 24 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002045c:	83 c4 10             	add    esp,0x10
c002045f:	83 c4 0c             	add    esp,0xc
c0020462:	c3                   	ret    
c0020463:	90                   	nop

c0020464 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020464:	83 ec 1c             	sub    esp,0x1c
c0020467:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002046e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020473:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020477:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c002047e:	83 f8 ff             	cmp    eax,0xffffffff
c0020481:	75 34                	jne    c00204b7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020483:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020487:	88 c2                	mov    dl,al
c0020489:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c002048e:	01 d0                	add    eax,edx
c0020490:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020494:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c002049a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002049e:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c00204a5:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c00204aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204ae:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c00204b5:	eb 17                	jmp    c00204ce <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204bb:	88 c2                	mov    dl,al
c00204bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204c1:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00204c8:	01 d0                	add    eax,edx
c00204ca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204ce:	83 ec 04             	sub    esp,0x4
c00204d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204d9:	8d 44 24 15          	lea    eax,[esp+0x15]
c00204dd:	50                   	push   eax
c00204de:	e8 1b 68 fe ff       	call   c0006cfe <f_getlabel>
c00204e3:	83 c4 10             	add    esp,0x10
c00204e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ef:	75 07                	jne    c00204f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00204f1:	b8 00 00 00 00       	mov    eax,0x0
c00204f6:	eb 05                	jmp    c00204fd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00204f8:	b8 01 00 00 00       	mov    eax,0x1
c00204fd:	83 c4 1c             	add    esp,0x1c
c0020500:	c3                   	ret    
c0020501:	90                   	nop

c0020502 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020502:	57                   	push   edi
c0020503:	83 ec 58             	sub    esp,0x58
c0020506:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002050e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020512:	b9 0f 00 00 00       	mov    ecx,0xf
c0020517:	b8 00 00 00 00       	mov    eax,0x0
c002051c:	fc                   	cld    
c002051d:	89 d7                	mov    edi,edx
c002051f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020521:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020525:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c002052c:	83 f8 ff             	cmp    eax,0xffffffff
c002052f:	75 34                	jne    c0020565 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020531:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020535:	88 c2                	mov    dl,al
c0020537:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c002053c:	01 d0                	add    eax,edx
c002053e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020542:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c0020548:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002054c:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c0020553:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020558:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002055c:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c0020563:	eb 17                	jmp    c002057c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020565:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020569:	88 c2                	mov    dl,al
c002056b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002056f:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c0020576:	01 d0                	add    eax,edx
c0020578:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002057c:	83 ec 08             	sub    esp,0x8
c002057f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020583:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020587:	50                   	push   eax
c0020588:	e8 bf 03 fe ff       	call   c000094c <strcat>
c002058d:	83 c4 10             	add    esp,0x10
c0020590:	83 ec 0c             	sub    esp,0xc
c0020593:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020597:	50                   	push   eax
c0020598:	e8 4f 69 fe ff       	call   c0006eec <f_setlabel>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205a9:	75 07                	jne    c00205b2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205ab:	b8 00 00 00 00       	mov    eax,0x0
c00205b0:	eb 05                	jmp    c00205b7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205b2:	b8 01 00 00 00       	mov    eax,0x1
c00205b7:	83 c4 58             	add    esp,0x58
c00205ba:	5f                   	pop    edi
c00205bb:	c3                   	ret    

c00205bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205bc:	83 ec 2c             	sub    esp,0x2c
c00205bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205c7:	83 ec 08             	sub    esp,0x8
c00205ca:	68 f4 ca 02 c0       	push   0xc002caf4
c00205cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205d3:	e8 c0 02 fe ff       	call   c0000898 <strcmp>
c00205d8:	83 c4 10             	add    esp,0x10
c00205db:	85 c0                	test   eax,eax
c00205dd:	0f 94 c0             	sete   al
c00205e0:	84 c0                	test   al,al
c00205e2:	74 0d                	je     c00205f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00205e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205ec:	e9 a6 00 00 00       	jmp    c0020697 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205f1:	83 ec 08             	sub    esp,0x8
c00205f4:	68 e6 ca 02 c0       	push   0xc002cae6
c00205f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205fd:	e8 96 02 fe ff       	call   c0000898 <strcmp>
c0020602:	83 c4 10             	add    esp,0x10
c0020605:	85 c0                	test   eax,eax
c0020607:	0f 94 c0             	sete   al
c002060a:	84 c0                	test   al,al
c002060c:	74 0a                	je     c0020618 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002060e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020616:	eb 7f                	jmp    c0020697 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020618:	83 ec 08             	sub    esp,0x8
c002061b:	68 ec ca 02 c0       	push   0xc002caec
c0020620:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020624:	e8 6f 02 fe ff       	call   c0000898 <strcmp>
c0020629:	83 c4 10             	add    esp,0x10
c002062c:	85 c0                	test   eax,eax
c002062e:	0f 94 c0             	sete   al
c0020631:	84 c0                	test   al,al
c0020633:	74 0a                	je     c002063f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020635:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002063d:	eb 58                	jmp    c0020697 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002063f:	83 ec 08             	sub    esp,0x8
c0020642:	68 4c 99 02 c0       	push   0xc002994c
c0020647:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002064b:	e8 48 02 fe ff       	call   c0000898 <strcmp>
c0020650:	83 c4 10             	add    esp,0x10
c0020653:	85 c0                	test   eax,eax
c0020655:	0f 94 c0             	sete   al
c0020658:	84 c0                	test   al,al
c002065a:	74 0a                	je     c0020666 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002065c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020664:	eb 31                	jmp    c0020697 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020666:	83 ec 08             	sub    esp,0x8
c0020669:	68 f2 ca 02 c0       	push   0xc002caf2
c002066e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020672:	e8 21 02 fe ff       	call   c0000898 <strcmp>
c0020677:	83 c4 10             	add    esp,0x10
c002067a:	85 c0                	test   eax,eax
c002067c:	0f 94 c0             	sete   al
c002067f:	84 c0                	test   al,al
c0020681:	74 0a                	je     c002068d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020683:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002068b:	eb 0a                	jmp    c0020697 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002068d:	b8 08 00 00 00       	mov    eax,0x8
c0020692:	e9 df 00 00 00       	jmp    c0020776 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020697:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002069e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206a7:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00206ae:	83 f8 ff             	cmp    eax,0xffffffff
c00206b1:	75 34                	jne    c00206e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206b3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206b7:	88 c2                	mov    dl,al
c00206b9:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c00206be:	01 d0                	add    eax,edx
c00206c0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206c4:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c00206ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206ce:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c00206d5:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c00206da:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00206de:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c00206e5:	eb 17                	jmp    c00206fe <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00206e7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206eb:	88 c2                	mov    dl,al
c00206ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206f1:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00206f8:	01 d0                	add    eax,edx
c00206fa:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020702:	88 04 24             	mov    BYTE PTR [esp],al
c0020705:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002070d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020715:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002071a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020722:	83 ec 0c             	sub    esp,0xc
c0020725:	68 00 20 00 00       	push   0x2000
c002072a:	e8 78 f2 fe ff       	call   c000f9a7 <malloc>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020736:	68 00 20 00 00       	push   0x2000
c002073b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002073f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020743:	50                   	push   eax
c0020744:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020748:	50                   	push   eax
c0020749:	e8 1f 6e fe ff       	call   c000756d <f_mkfs>
c002074e:	83 c4 10             	add    esp,0x10
c0020751:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020755:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002075a:	75 07                	jne    c0020763 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002075c:	b8 00 00 00 00       	mov    eax,0x0
c0020761:	eb 13                	jmp    c0020776 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020763:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020768:	75 07                	jne    c0020771 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002076a:	b8 09 00 00 00       	mov    eax,0x9
c002076f:	eb 05                	jmp    c0020776 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020771:	b8 01 00 00 00       	mov    eax,0x1
c0020776:	83 c4 2c             	add    esp,0x2c
c0020779:	c3                   	ret    

c002077a <FAT::tryMount(LogicalDisk*, int)>:
c002077a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020780:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020785:	83 f8 14             	cmp    eax,0x14
c0020788:	75 17                	jne    c00207a1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002078a:	83 ec 0c             	sub    esp,0xc
c002078d:	68 f8 ca 02 c0       	push   0xc002caf8
c0020792:	e8 06 9c ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0020797:	83 c4 10             	add    esp,0x10
c002079a:	b0 00                	mov    al,0x0
c002079c:	e9 d7 01 00 00       	jmp    c0020978 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207a1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207b4:	3d 00 02 00 00       	cmp    eax,0x200
c00207b9:	74 07                	je     c00207c2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00207bb:	b0 00                	mov    al,0x0
c00207bd:	e9 b6 01 00 00       	jmp    c0020978 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207c2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00207ca:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00207d1:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00207d8:	83 f8 ff             	cmp    eax,0xffffffff
c00207db:	74 07                	je     c00207e4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00207dd:	b0 01                	mov    al,0x1
c00207df:	e9 94 01 00 00       	jmp    c0020978 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207e4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00207ee:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00207f6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00207fd:	88 c2                	mov    dl,al
c00207ff:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020804:	01 d0                	add    eax,edx
c0020806:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002080d:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c0020813:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002081a:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c0020821:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020826:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002082d:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c0020834:	83 ec 0c             	sub    esp,0xc
c0020837:	68 54 02 00 00       	push   0x254
c002083c:	e8 66 f1 fe ff       	call   c000f9a7 <malloc>
c0020841:	83 c4 10             	add    esp,0x10
c0020844:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002084b:	83 ec 04             	sub    esp,0x4
c002084e:	6a 00                	push   0x0
c0020850:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020857:	50                   	push   eax
c0020858:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002085f:	e8 91 46 fe ff       	call   c0004ef5 <f_mount>
c0020864:	83 c4 10             	add    esp,0x10
c0020867:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002086e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020876:	74 19                	je     c0020891 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020878:	83 ec 0c             	sub    esp,0xc
c002087b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020882:	e8 40 f1 fe ff       	call   c000f9c7 <rfree>
c0020887:	83 c4 10             	add    esp,0x10
c002088a:	b0 00                	mov    al,0x0
c002088c:	e9 e7 00 00 00       	jmp    c0020978 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020891:	83 ec 04             	sub    esp,0x4
c0020894:	68 00 01 00 00       	push   0x100
c0020899:	6a 00                	push   0x0
c002089b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208a2:	50                   	push   eax
c00208a3:	e8 a8 fe fd ff       	call   c0000750 <memset>
c00208a8:	83 c4 10             	add    esp,0x10
c00208ab:	83 ec 08             	sub    esp,0x8
c00208ae:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208b5:	50                   	push   eax
c00208b6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208bd:	50                   	push   eax
c00208be:	e8 89 00 fe ff       	call   c000094c <strcat>
c00208c3:	83 c4 10             	add    esp,0x10
c00208c6:	83 ec 08             	sub    esp,0x8
c00208c9:	68 06 cb 02 c0       	push   0xc002cb06
c00208ce:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208d5:	50                   	push   eax
c00208d6:	e8 71 00 fe ff       	call   c000094c <strcat>
c00208db:	83 c4 10             	add    esp,0x10
c00208de:	83 ec 04             	sub    esp,0x4
c00208e1:	6a 01                	push   0x1
c00208e3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00208ea:	50                   	push   eax
c00208eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00208ef:	50                   	push   eax
c00208f0:	e8 62 46 fe ff       	call   c0004f57 <f_open>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208ff:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020906:	85 c0                	test   eax,eax
c0020908:	74 0a                	je     c0020914 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002090a:	78 2d                	js     c0020939 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002090c:	83 e8 04             	sub    eax,0x4
c002090f:	83 f8 01             	cmp    eax,0x1
c0020912:	77 25                	ja     c0020939 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020914:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002091c:	83 ec 0c             	sub    esp,0xc
c002091f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020923:	50                   	push   eax
c0020924:	e8 80 51 fe ff       	call   c0005aa9 <f_close>
c0020929:	83 c4 10             	add    esp,0x10
c002092c:	90                   	nop
c002092d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020935:	74 3a                	je     c0020971 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020937:	eb 2d                	jmp    c0020966 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020939:	83 ec 0c             	sub    esp,0xc
c002093c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020943:	e8 7f f0 fe ff       	call   c000f9c7 <rfree>
c0020948:	83 c4 10             	add    esp,0x10
c002094b:	83 ec 04             	sub    esp,0x4
c002094e:	6a 00                	push   0x0
c0020950:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020957:	50                   	push   eax
c0020958:	6a 00                	push   0x0
c002095a:	e8 96 45 fe ff       	call   c0004ef5 <f_mount>
c002095f:	83 c4 10             	add    esp,0x10
c0020962:	b0 00                	mov    al,0x0
c0020964:	eb 12                	jmp    c0020978 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020966:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c002096b:	40                   	inc    eax
c002096c:	a3 60 fc 02 c0       	mov    ds:0xc002fc60,eax
c0020971:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020978:	81 c4 6c 03 00 00    	add    esp,0x36c
c002097e:	c3                   	ret    
c002097f:	90                   	nop

c0020980 <FAT::allocateSwapfile(char const*, int)>:
c0020980:	53                   	push   ebx
c0020981:	81 ec 28 04 00 00    	sub    esp,0x428
c0020987:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c0020992:	83 ec 0c             	sub    esp,0xc
c0020995:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c002099c:	e8 06 f0 fe ff       	call   c000f9a7 <malloc>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	89 c3                	mov    ebx,eax
c00209a6:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00209ab:	83 ec 04             	sub    esp,0x4
c00209ae:	50                   	push   eax
c00209af:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c00209b6:	53                   	push   ebx
c00209b7:	e8 a2 25 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c00209bc:	83 c4 10             	add    esp,0x10
c00209bf:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c00209c6:	83 ec 0c             	sub    esp,0xc
c00209c9:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00209d0:	e8 65 27 ff ff       	call   c001313a <File::unlink()>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	83 ec 08             	sub    esp,0x8
c00209db:	6a 12                	push   0x12
c00209dd:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00209e4:	e8 d9 25 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c00209e9:	83 c4 10             	add    esp,0x10
c00209ec:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00209f3:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00209f9:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020a00:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c0020a07:	c1 e0 14             	shl    eax,0x14
c0020a0a:	99                   	cdq    
c0020a0b:	6a 01                	push   0x1
c0020a0d:	52                   	push   edx
c0020a0e:	50                   	push   eax
c0020a0f:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c0020a16:	e8 3e 67 fe ff       	call   c0007159 <f_expand>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a27:	83 c0 10             	add    eax,0x10
c0020a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a2c:	83 ec 0c             	sub    esp,0xc
c0020a2f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a33:	52                   	push   edx
c0020a34:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020a38:	52                   	push   edx
c0020a39:	6a 00                	push   0x0
c0020a3b:	68 00 04 00 00       	push   0x400
c0020a40:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a47:	ff d0                	call   eax
c0020a49:	83 c4 20             	add    esp,0x20
c0020a4c:	83 ec 0c             	sub    esp,0xc
c0020a4f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a56:	e8 c5 25 ff ff       	call   c0013020 <File::close()>
c0020a5b:	83 c4 10             	add    esp,0x10
c0020a5e:	83 ec 08             	sub    esp,0x8
c0020a61:	6a 01                	push   0x1
c0020a63:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a6a:	e8 53 25 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c0020a6f:	83 c4 10             	add    esp,0x10
c0020a72:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a7b:	83 c0 0c             	add    eax,0xc
c0020a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a80:	83 ec 0c             	sub    esp,0xc
c0020a83:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a87:	52                   	push   edx
c0020a88:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020a8c:	52                   	push   edx
c0020a8d:	6a 00                	push   0x0
c0020a8f:	6a 04                	push   0x4
c0020a91:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a98:	ff d0                	call   eax
c0020a9a:	83 c4 20             	add    esp,0x20
c0020a9d:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020aa4:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020aaa:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020ab1:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c0020ab8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020abb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020abe:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020ac5:	83 ec 0c             	sub    esp,0xc
c0020ac8:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020acf:	e8 4c 25 ff ff       	call   c0013020 <File::close()>
c0020ad4:	83 c4 10             	add    esp,0x10
c0020ad7:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020ade:	ba 00 00 00 00       	mov    edx,0x0
c0020ae3:	81 c4 28 04 00 00    	add    esp,0x428
c0020ae9:	5b                   	pop    ebx
c0020aea:	c3                   	ret    
c0020aeb:	90                   	nop

c0020aec <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020aec:	57                   	push   edi
c0020aed:	56                   	push   esi
c0020aee:	53                   	push   ebx
c0020aef:	81 ec 50 02 00 00    	sub    esp,0x250
c0020af5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020afd:	74 0a                	je     c0020b09 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020aff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020b07:	75 0a                	jne    c0020b13 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020b09:	b8 04 00 00 00       	mov    eax,0x4
c0020b0e:	e9 29 01 00 00       	jmp    c0020c3c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020b13:	83 ec 08             	sub    esp,0x8
c0020b16:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b1d:	50                   	push   eax
c0020b1e:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020b25:	e8 89 55 fe ff       	call   c00060b3 <f_readdir>
c0020b2a:	83 c4 10             	add    esp,0x10
c0020b2d:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020b34:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020b3b:	83 ec 0c             	sub    esp,0xc
c0020b3e:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020b45:	83 c0 1a             	add    eax,0x1a
c0020b48:	50                   	push   eax
c0020b49:	e8 1e fc fd ff       	call   c000076c <strlen>
c0020b4e:	83 c4 10             	add    esp,0x10
c0020b51:	ba 00 00 00 00       	mov    edx,0x0
c0020b56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b5e:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020b65:	0f b6 c0             	movzx  eax,al
c0020b68:	83 e0 10             	and    eax,0x10
c0020b6b:	74 07                	je     c0020b74 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020b6d:	b8 02 00 00 00       	mov    eax,0x2
c0020b72:	eb 05                	jmp    c0020b79 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020b74:	b8 01 00 00 00       	mov    eax,0x1
c0020b79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b7d:	83 ec 08             	sub    esp,0x8
c0020b80:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b87:	83 c0 1a             	add    eax,0x1a
c0020b8a:	50                   	push   eax
c0020b8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b8f:	83 c0 10             	add    eax,0x10
c0020b92:	50                   	push   eax
c0020b93:	e8 74 fc fd ff       	call   c000080c <strcpy>
c0020b98:	83 c4 10             	add    esp,0x10
c0020b9b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020ba2:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020ba9:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020bad:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020bb4:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020bbb:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020bc2:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020bc9:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020bd0:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020bd7:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020bde:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020be5:	89 c6                	mov    esi,eax
c0020be7:	89 d7                	mov    edi,edx
c0020be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020beb:	89 c8                	mov    eax,ecx
c0020bed:	89 fa                	mov    edx,edi
c0020bef:	89 f3                	mov    ebx,esi
c0020bf1:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020bf8:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020bff:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020c06:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020c0d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c13:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020c1a:	84 c0                	test   al,al
c0020c1c:	75 07                	jne    c0020c25 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020c1e:	b8 07 00 00 00       	mov    eax,0x7
c0020c23:	eb 17                	jmp    c0020c3c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020c25:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020c2c:	85 c0                	test   eax,eax
c0020c2e:	75 07                	jne    c0020c37 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020c30:	b8 00 00 00 00       	mov    eax,0x0
c0020c35:	eb 05                	jmp    c0020c3c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020c37:	b8 01 00 00 00       	mov    eax,0x1
c0020c3c:	81 c4 50 02 00 00    	add    esp,0x250
c0020c42:	5b                   	pop    ebx
c0020c43:	5e                   	pop    esi
c0020c44:	5f                   	pop    edi
c0020c45:	c3                   	ret    

c0020c46 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c46:	83 ec 1c             	sub    esp,0x1c
c0020c49:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c4e:	74 07                	je     c0020c57 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c50:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c55:	75 07                	jne    c0020c5e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c57:	b8 04 00 00 00       	mov    eax,0x4
c0020c5c:	eb 3d                	jmp    c0020c9b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c5e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c62:	50                   	push   eax
c0020c63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c6f:	e8 1f 47 fe ff       	call   c0005393 <f_read>
c0020c74:	83 c4 10             	add    esp,0x10
c0020c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c7f:	89 c2                	mov    edx,eax
c0020c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c85:	89 10                	mov    DWORD PTR [eax],edx
c0020c87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c8b:	85 c0                	test   eax,eax
c0020c8d:	75 07                	jne    c0020c96 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c8f:	b8 00 00 00 00       	mov    eax,0x0
c0020c94:	eb 05                	jmp    c0020c9b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c96:	b8 01 00 00 00       	mov    eax,0x1
c0020c9b:	83 c4 1c             	add    esp,0x1c
c0020c9e:	c3                   	ret    
c0020c9f:	90                   	nop

c0020ca0 <FAT::write(void*, unsigned long, void*, int*)>:
c0020ca0:	83 ec 1c             	sub    esp,0x1c
c0020ca3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ca8:	74 07                	je     c0020cb1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020caa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020caf:	75 07                	jne    c0020cb8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020cb1:	b8 04 00 00 00       	mov    eax,0x4
c0020cb6:	eb 3d                	jmp    c0020cf5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cbc:	50                   	push   eax
c0020cbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cc9:	e8 45 49 fe ff       	call   c0005613 <f_write>
c0020cce:	83 c4 10             	add    esp,0x10
c0020cd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cd9:	89 c2                	mov    edx,eax
c0020cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cdf:	89 10                	mov    DWORD PTR [eax],edx
c0020ce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ce5:	85 c0                	test   eax,eax
c0020ce7:	75 07                	jne    c0020cf0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ce9:	b8 00 00 00 00       	mov    eax,0x0
c0020cee:	eb 05                	jmp    c0020cf5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cf0:	b8 01 00 00 00       	mov    eax,0x1
c0020cf5:	83 c4 1c             	add    esp,0x1c
c0020cf8:	c3                   	ret    
c0020cf9:	90                   	nop

c0020cfa <FAT::close(void*)>:
c0020cfa:	83 ec 1c             	sub    esp,0x1c
c0020cfd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d02:	75 07                	jne    c0020d0b <FAT::close(void*)+0x11>
c0020d04:	b8 04 00 00 00       	mov    eax,0x4
c0020d09:	eb 36                	jmp    c0020d41 <FAT::close(void*)+0x47>
c0020d0b:	83 ec 0c             	sub    esp,0xc
c0020d0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d12:	e8 92 4d fe ff       	call   c0005aa9 <f_close>
c0020d17:	83 c4 10             	add    esp,0x10
c0020d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d1e:	83 ec 0c             	sub    esp,0xc
c0020d21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d25:	e8 8d ec fe ff       	call   c000f9b7 <free>
c0020d2a:	83 c4 10             	add    esp,0x10
c0020d2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d31:	85 c0                	test   eax,eax
c0020d33:	75 07                	jne    c0020d3c <FAT::close(void*)+0x42>
c0020d35:	b8 00 00 00 00       	mov    eax,0x0
c0020d3a:	eb 05                	jmp    c0020d41 <FAT::close(void*)+0x47>
c0020d3c:	b8 01 00 00 00       	mov    eax,0x1
c0020d41:	83 c4 1c             	add    esp,0x1c
c0020d44:	c3                   	ret    
c0020d45:	90                   	nop

c0020d46 <FAT::closeDir(void*)>:
c0020d46:	83 ec 1c             	sub    esp,0x1c
c0020d49:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d4e:	75 07                	jne    c0020d57 <FAT::closeDir(void*)+0x11>
c0020d50:	b8 04 00 00 00       	mov    eax,0x4
c0020d55:	eb 36                	jmp    c0020d8d <FAT::closeDir(void*)+0x47>
c0020d57:	83 ec 0c             	sub    esp,0xc
c0020d5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d5e:	e8 2e 53 fe ff       	call   c0006091 <f_closedir>
c0020d63:	83 c4 10             	add    esp,0x10
c0020d66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d6a:	83 ec 0c             	sub    esp,0xc
c0020d6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d71:	e8 41 ec fe ff       	call   c000f9b7 <free>
c0020d76:	83 c4 10             	add    esp,0x10
c0020d79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d7d:	85 c0                	test   eax,eax
c0020d7f:	75 07                	jne    c0020d88 <FAT::closeDir(void*)+0x42>
c0020d81:	b8 00 00 00 00       	mov    eax,0x0
c0020d86:	eb 05                	jmp    c0020d8d <FAT::closeDir(void*)+0x47>
c0020d88:	b8 01 00 00 00       	mov    eax,0x1
c0020d8d:	83 c4 1c             	add    esp,0x1c
c0020d90:	c3                   	ret    
c0020d91:	90                   	nop

c0020d92 <FAT::seek(void*, unsigned long long)>:
c0020d92:	83 ec 2c             	sub    esp,0x2c
c0020d95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020da5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020daa:	75 07                	jne    c0020db3 <FAT::seek(void*, unsigned long long)+0x21>
c0020dac:	b8 04 00 00 00       	mov    eax,0x4
c0020db1:	eb 2f                	jmp    c0020de2 <FAT::seek(void*, unsigned long long)+0x50>
c0020db3:	83 ec 04             	sub    esp,0x4
c0020db6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dbe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dc2:	e8 11 4d fe ff       	call   c0005ad8 <f_lseek>
c0020dc7:	83 c4 10             	add    esp,0x10
c0020dca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dd2:	85 c0                	test   eax,eax
c0020dd4:	75 07                	jne    c0020ddd <FAT::seek(void*, unsigned long long)+0x4b>
c0020dd6:	b8 00 00 00 00       	mov    eax,0x0
c0020ddb:	eb 05                	jmp    c0020de2 <FAT::seek(void*, unsigned long long)+0x50>
c0020ddd:	b8 01 00 00 00       	mov    eax,0x1
c0020de2:	83 c4 2c             	add    esp,0x2c
c0020de5:	c3                   	ret    

c0020de6 <fatWrapperReadDisk>:
c0020de6:	83 ec 1c             	sub    esp,0x1c
c0020de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ded:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020df1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0020df8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e05:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e10:	83 ec 0c             	sub    esp,0xc
c0020e13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e17:	52                   	push   edx
c0020e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e20:	50                   	push   eax
c0020e21:	e8 34 55 ff ff       	call   c001635a <LogicalDisk::read(unsigned long long, int, void*)>
c0020e26:	83 c4 20             	add    esp,0x20
c0020e29:	83 c4 1c             	add    esp,0x1c
c0020e2c:	c3                   	ret    

c0020e2d <fatWrapperWriteDisk>:
c0020e2d:	83 ec 1c             	sub    esp,0x1c
c0020e30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e47:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e4c:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e57:	83 ec 0c             	sub    esp,0xc
c0020e5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e5e:	52                   	push   edx
c0020e5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e67:	50                   	push   eax
c0020e68:	e8 59 55 ff ff       	call   c00163c6 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e6d:	83 c4 20             	add    esp,0x20
c0020e70:	83 c4 1c             	add    esp,0x1c
c0020e73:	c3                   	ret    

c0020e74 <fatWrapperIoctl>:
c0020e74:	53                   	push   ebx
c0020e75:	83 ec 28             	sub    esp,0x28
c0020e78:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e80:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e84:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e88:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e8d:	75 31                	jne    c0020ec0 <fatWrapperIoctl+0x4c>
c0020e8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e9c:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020ea3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ea9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020eaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020eb3:	66 89 02             	mov    WORD PTR [edx],ax
c0020eb6:	b8 00 00 00 00       	mov    eax,0x0
c0020ebb:	e9 b2 00 00 00       	jmp    c0020f72 <fatWrapperIoctl+0xfe>
c0020ec0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ec5:	75 6a                	jne    c0020f31 <fatWrapperIoctl+0xbd>
c0020ec7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ecb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ecf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ed4:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020edb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ee1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ee7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020eed:	89 c8                	mov    eax,ecx
c0020eef:	89 da                	mov    edx,ebx
c0020ef1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ef5:	c1 e0 0a             	shl    eax,0xa
c0020ef8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020efd:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0020f04:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f0a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f10:	89 cb                	mov    ebx,ecx
c0020f12:	c1 fb 1f             	sar    ebx,0x1f
c0020f15:	53                   	push   ebx
c0020f16:	51                   	push   ecx
c0020f17:	52                   	push   edx
c0020f18:	50                   	push   eax
c0020f19:	e8 b6 5e 00 00       	call   c0026dd4 <__udivdi3>
c0020f1e:	83 c4 10             	add    esp,0x10
c0020f21:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f25:	89 01                	mov    DWORD PTR [ecx],eax
c0020f27:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f2a:	b8 00 00 00 00       	mov    eax,0x0
c0020f2f:	eb 41                	jmp    c0020f72 <fatWrapperIoctl+0xfe>
c0020f31:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f36:	75 07                	jne    c0020f3f <fatWrapperIoctl+0xcb>
c0020f38:	b8 00 00 00 00       	mov    eax,0x0
c0020f3d:	eb 33                	jmp    c0020f72 <fatWrapperIoctl+0xfe>
c0020f3f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f44:	75 19                	jne    c0020f5f <fatWrapperIoctl+0xeb>
c0020f46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f52:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f58:	b8 00 00 00 00       	mov    eax,0x0
c0020f5d:	eb 13                	jmp    c0020f72 <fatWrapperIoctl+0xfe>
c0020f5f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f64:	75 07                	jne    c0020f6d <fatWrapperIoctl+0xf9>
c0020f66:	b8 00 00 00 00       	mov    eax,0x0
c0020f6b:	eb 05                	jmp    c0020f72 <fatWrapperIoctl+0xfe>
c0020f6d:	b8 04 00 00 00       	mov    eax,0x4
c0020f72:	83 c4 28             	add    esp,0x28
c0020f75:	5b                   	pop    ebx
c0020f76:	c3                   	ret    
c0020f77:	90                   	nop

c0020f78 <FAT::FAT()>:
c0020f78:	83 ec 1c             	sub    esp,0x1c
c0020f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f7f:	83 ec 0c             	sub    esp,0xc
c0020f82:	50                   	push   eax
c0020f83:	e8 82 1d ff ff       	call   c0012d0a <Filesystem::Filesystem()>
c0020f88:	83 c4 10             	add    esp,0x10
c0020f8b:	ba 1c cb 02 c0       	mov    edx,0xc002cb1c
c0020f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f94:	89 10                	mov    DWORD PTR [eax],edx
c0020f96:	c7 05 60 fc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fc60,0x0
c0020fa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fa8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fad:	7f 15                	jg     c0020fc4 <FAT::FAT()+0x4c>
c0020faf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fb3:	c7 04 85 80 fc 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0380],0xffffffff
c0020fbe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fc2:	eb e4                	jmp    c0020fa8 <FAT::FAT()+0x30>
c0020fc4:	90                   	nop
c0020fc5:	83 c4 1c             	add    esp,0x1c
c0020fc8:	c3                   	ret    
c0020fc9:	90                   	nop

c0020fca <FAT::fixFilepath(char*)>:
c0020fca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fce:	8a 00                	mov    al,BYTE PTR [eax]
c0020fd0:	3c 40                	cmp    al,0x40
c0020fd2:	7e 2c                	jle    c0021000 <FAT::fixFilepath(char*)+0x36>
c0020fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd8:	8a 00                	mov    al,BYTE PTR [eax]
c0020fda:	83 e8 41             	sub    eax,0x41
c0020fdd:	88 c2                	mov    dl,al
c0020fdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe3:	88 10                	mov    BYTE PTR [eax],dl
c0020fe5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe9:	8a 00                	mov    al,BYTE PTR [eax]
c0020feb:	0f be c0             	movsx  eax,al
c0020fee:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c0020ff5:	83 c0 30             	add    eax,0x30
c0020ff8:	88 c2                	mov    dl,al
c0020ffa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ffe:	88 10                	mov    BYTE PTR [eax],dl
c0021000:	90                   	nop
c0021001:	c3                   	ret    

c0021002 <FAT::open(char const*, void**, FileOpenMode)>:
c0021002:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021008:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021010:	74 0a                	je     c002101c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021012:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002101a:	75 0a                	jne    c0021026 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002101c:	b8 04 00 00 00       	mov    eax,0x4
c0021021:	e9 fd 00 00 00       	jmp    c0021123 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021026:	83 ec 08             	sub    esp,0x8
c0021029:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021030:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021034:	50                   	push   eax
c0021035:	e8 d2 f7 fd ff       	call   c000080c <strcpy>
c002103a:	83 c4 10             	add    esp,0x10
c002103d:	83 ec 08             	sub    esp,0x8
c0021040:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021044:	50                   	push   eax
c0021045:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002104c:	e8 79 ff ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c0021051:	83 c4 10             	add    esp,0x10
c0021054:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002105c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021063:	83 e0 01             	and    eax,0x1
c0021066:	74 08                	je     c0021070 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021068:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021070:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021077:	83 e0 04             	and    eax,0x4
c002107a:	74 10                	je     c002108c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002107c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021084:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002108c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021093:	83 e0 02             	and    eax,0x2
c0021096:	74 08                	je     c00210a0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021098:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210a7:	83 e0 08             	and    eax,0x8
c00210aa:	74 08                	je     c00210b4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210ac:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210bb:	83 e0 10             	and    eax,0x10
c00210be:	74 08                	je     c00210c8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210c0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210c8:	83 ec 0c             	sub    esp,0xc
c00210cb:	68 50 02 00 00       	push   0x250
c00210d0:	e8 d2 e8 fe ff       	call   c000f9a7 <malloc>
c00210d5:	83 c4 10             	add    esp,0x10
c00210d8:	89 c2                	mov    edx,eax
c00210da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210e1:	89 10                	mov    DWORD PTR [eax],edx
c00210e3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210eb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00210f4:	83 ec 04             	sub    esp,0x4
c00210f7:	52                   	push   edx
c00210f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210fc:	52                   	push   edx
c00210fd:	50                   	push   eax
c00210fe:	e8 54 3e fe ff       	call   c0004f57 <f_open>
c0021103:	83 c4 10             	add    esp,0x10
c0021106:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002110d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021115:	74 07                	je     c002111e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021117:	b8 01 00 00 00       	mov    eax,0x1
c002111c:	eb 05                	jmp    c0021123 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002111e:	b8 00 00 00 00       	mov    eax,0x0
c0021123:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021129:	c3                   	ret    

c002112a <FAT::openDir(char const*, void**)>:
c002112a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021130:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021138:	74 0a                	je     c0021144 <FAT::openDir(char const*, void**)+0x1a>
c002113a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021142:	75 07                	jne    c002114b <FAT::openDir(char const*, void**)+0x21>
c0021144:	b8 04 00 00 00       	mov    eax,0x4
c0021149:	eb 7d                	jmp    c00211c8 <FAT::openDir(char const*, void**)+0x9e>
c002114b:	83 ec 08             	sub    esp,0x8
c002114e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021155:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021159:	50                   	push   eax
c002115a:	e8 ad f6 fd ff       	call   c000080c <strcpy>
c002115f:	83 c4 10             	add    esp,0x10
c0021162:	83 ec 08             	sub    esp,0x8
c0021165:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021169:	50                   	push   eax
c002116a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021171:	e8 54 fe ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c0021176:	83 c4 10             	add    esp,0x10
c0021179:	83 ec 0c             	sub    esp,0xc
c002117c:	6a 4c                	push   0x4c
c002117e:	e8 24 e8 fe ff       	call   c000f9a7 <malloc>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	89 c2                	mov    edx,eax
c0021188:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002118f:	89 10                	mov    DWORD PTR [eax],edx
c0021191:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021198:	8b 00                	mov    eax,DWORD PTR [eax]
c002119a:	83 ec 08             	sub    esp,0x8
c002119d:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211a1:	52                   	push   edx
c00211a2:	50                   	push   eax
c00211a3:	e8 e7 4d fe ff       	call   c0005f8f <f_opendir>
c00211a8:	83 c4 10             	add    esp,0x10
c00211ab:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211b2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211ba:	74 07                	je     c00211c3 <FAT::openDir(char const*, void**)+0x99>
c00211bc:	b8 01 00 00 00       	mov    eax,0x1
c00211c1:	eb 05                	jmp    c00211c8 <FAT::openDir(char const*, void**)+0x9e>
c00211c3:	b8 00 00 00 00       	mov    eax,0x0
c00211c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211ce:	c3                   	ret    
c00211cf:	90                   	nop

c00211d0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211d0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211d6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211de:	75 0a                	jne    c00211ea <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211e0:	b8 04 00 00 00       	mov    eax,0x4
c00211e5:	e9 c9 00 00 00       	jmp    c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211ea:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211f2:	75 0a                	jne    c00211fe <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211f4:	b8 04 00 00 00       	mov    eax,0x4
c00211f9:	e9 b5 00 00 00       	jmp    c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211fe:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021206:	75 0a                	jne    c0021212 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021208:	b8 04 00 00 00       	mov    eax,0x4
c002120d:	e9 a1 00 00 00       	jmp    c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021212:	83 ec 08             	sub    esp,0x8
c0021215:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002121c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021223:	50                   	push   eax
c0021224:	e8 e3 f5 fd ff       	call   c000080c <strcpy>
c0021229:	83 c4 10             	add    esp,0x10
c002122c:	83 ec 08             	sub    esp,0x8
c002122f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021236:	50                   	push   eax
c0021237:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002123e:	e8 87 fd ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	83 ec 08             	sub    esp,0x8
c0021249:	8d 44 24 08          	lea    eax,[esp+0x8]
c002124d:	50                   	push   eax
c002124e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021255:	50                   	push   eax
c0021256:	e8 f3 4e fe ff       	call   c000614e <f_stat>
c002125b:	83 c4 10             	add    esp,0x10
c002125e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021265:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002126c:	85 c0                	test   eax,eax
c002126e:	74 07                	je     c0021277 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021270:	83 f8 04             	cmp    eax,0x4
c0021273:	74 32                	je     c00212a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021275:	eb 37                	jmp    c00212ae <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021277:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002127b:	0f b6 c0             	movzx  eax,al
c002127e:	83 e0 10             	and    eax,0x10
c0021281:	0f 95 c2             	setne  dl
c0021284:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002128b:	88 10                	mov    BYTE PTR [eax],dl
c002128d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021290:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021294:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002129b:	89 01                	mov    DWORD PTR [ecx],eax
c002129d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212a0:	b8 00 00 00 00       	mov    eax,0x0
c00212a5:	eb 0c                	jmp    c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a7:	b8 02 00 00 00       	mov    eax,0x2
c00212ac:	eb 05                	jmp    c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ae:	b8 01 00 00 00       	mov    eax,0x1
c00212b3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212b9:	c3                   	ret    

c00212ba <FAT::unlink(char const*)>:
c00212ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212c8:	75 07                	jne    c00212d1 <FAT::unlink(char const*)+0x17>
c00212ca:	b8 04 00 00 00       	mov    eax,0x4
c00212cf:	eb 5c                	jmp    c002132d <FAT::unlink(char const*)+0x73>
c00212d1:	83 ec 08             	sub    esp,0x8
c00212d4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212df:	50                   	push   eax
c00212e0:	e8 27 f5 fd ff       	call   c000080c <strcpy>
c00212e5:	83 c4 10             	add    esp,0x10
c00212e8:	83 ec 08             	sub    esp,0x8
c00212eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212ef:	50                   	push   eax
c00212f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212f7:	e8 ce fc ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c00212fc:	83 c4 10             	add    esp,0x10
c00212ff:	83 ec 0c             	sub    esp,0xc
c0021302:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021306:	50                   	push   eax
c0021307:	e8 94 51 fe ff       	call   c00064a0 <f_unlink>
c002130c:	83 c4 10             	add    esp,0x10
c002130f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021316:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002131d:	85 c0                	test   eax,eax
c002131f:	75 07                	jne    c0021328 <FAT::unlink(char const*)+0x6e>
c0021321:	b8 00 00 00 00       	mov    eax,0x0
c0021326:	eb 05                	jmp    c002132d <FAT::unlink(char const*)+0x73>
c0021328:	b8 01 00 00 00       	mov    eax,0x1
c002132d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021333:	c3                   	ret    

c0021334 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021334:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002133a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021341:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021348:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002134c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021350:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021358:	75 0a                	jne    c0021364 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002135a:	b8 04 00 00 00       	mov    eax,0x4
c002135f:	e9 1c 01 00 00       	jmp    c0021480 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021364:	83 ec 08             	sub    esp,0x8
c0021367:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002136e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021372:	50                   	push   eax
c0021373:	e8 94 f4 fd ff       	call   c000080c <strcpy>
c0021378:	83 c4 10             	add    esp,0x10
c002137b:	83 ec 08             	sub    esp,0x8
c002137e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021382:	50                   	push   eax
c0021383:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002138a:	e8 3b fc ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c002138f:	83 c4 10             	add    esp,0x10
c0021392:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002139a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213a7:	83 e0 01             	and    eax,0x1
c00213aa:	74 08                	je     c00213b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213ac:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b9:	83 e0 02             	and    eax,0x2
c00213bc:	74 08                	je     c00213c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213be:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213cb:	83 e0 04             	and    eax,0x4
c00213ce:	74 08                	je     c00213d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213d0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213dd:	83 e0 08             	and    eax,0x8
c00213e0:	74 08                	je     c00213ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213e2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213ea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213ef:	83 e0 01             	and    eax,0x1
c00213f2:	74 08                	je     c00213fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213f4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021401:	83 e0 02             	and    eax,0x2
c0021404:	74 08                	je     c002140e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021406:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002140e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021413:	83 e0 04             	and    eax,0x4
c0021416:	74 08                	je     c0021420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021418:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021420:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021425:	83 e0 08             	and    eax,0x8
c0021428:	74 08                	je     c0021432 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002142a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021432:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021439:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021440:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021448:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021450:	83 ec 04             	sub    esp,0x4
c0021453:	52                   	push   edx
c0021454:	50                   	push   eax
c0021455:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021459:	50                   	push   eax
c002145a:	e8 e3 56 fe ff       	call   c0006b42 <f_chmod>
c002145f:	83 c4 10             	add    esp,0x10
c0021462:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021469:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021470:	85 c0                	test   eax,eax
c0021472:	75 07                	jne    c002147b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021474:	b8 00 00 00 00       	mov    eax,0x0
c0021479:	eb 05                	jmp    c0021480 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002147b:	b8 01 00 00 00       	mov    eax,0x1
c0021480:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021486:	c3                   	ret    
c0021487:	90                   	nop

c0021488 <FAT::rename(char const*, char const*)>:
c0021488:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002148e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021496:	74 0a                	je     c00214a2 <FAT::rename(char const*, char const*)+0x1a>
c0021498:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214a0:	75 0a                	jne    c00214ac <FAT::rename(char const*, char const*)+0x24>
c00214a2:	b8 04 00 00 00       	mov    eax,0x4
c00214a7:	e9 98 00 00 00       	jmp    c0021544 <FAT::rename(char const*, char const*)+0xbc>
c00214ac:	83 ec 08             	sub    esp,0x8
c00214af:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214bd:	50                   	push   eax
c00214be:	e8 49 f3 fd ff       	call   c000080c <strcpy>
c00214c3:	83 c4 10             	add    esp,0x10
c00214c6:	83 ec 08             	sub    esp,0x8
c00214c9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214d0:	50                   	push   eax
c00214d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214d8:	e8 ed fa ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c00214dd:	83 c4 10             	add    esp,0x10
c00214e0:	83 ec 08             	sub    esp,0x8
c00214e3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214ee:	50                   	push   eax
c00214ef:	e8 18 f3 fd ff       	call   c000080c <strcpy>
c00214f4:	83 c4 10             	add    esp,0x10
c00214f7:	83 ec 08             	sub    esp,0x8
c00214fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214fe:	50                   	push   eax
c00214ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021506:	e8 bf fa ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c002150b:	83 c4 10             	add    esp,0x10
c002150e:	83 ec 08             	sub    esp,0x8
c0021511:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021515:	50                   	push   eax
c0021516:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002151d:	50                   	push   eax
c002151e:	e8 2c 53 fe ff       	call   c000684f <f_rename>
c0021523:	83 c4 10             	add    esp,0x10
c0021526:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002152d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021534:	85 c0                	test   eax,eax
c0021536:	75 07                	jne    c002153f <FAT::rename(char const*, char const*)+0xb7>
c0021538:	b8 00 00 00 00       	mov    eax,0x0
c002153d:	eb 05                	jmp    c0021544 <FAT::rename(char const*, char const*)+0xbc>
c002153f:	b8 01 00 00 00       	mov    eax,0x1
c0021544:	81 c4 1c 02 00 00    	add    esp,0x21c
c002154a:	c3                   	ret    
c002154b:	90                   	nop

c002154c <FAT::mkdir(char const*)>:
c002154c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021552:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002155a:	75 07                	jne    c0021563 <FAT::mkdir(char const*)+0x17>
c002155c:	b8 04 00 00 00       	mov    eax,0x4
c0021561:	eb 5c                	jmp    c00215bf <FAT::mkdir(char const*)+0x73>
c0021563:	83 ec 08             	sub    esp,0x8
c0021566:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002156d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021571:	50                   	push   eax
c0021572:	e8 95 f2 fd ff       	call   c000080c <strcpy>
c0021577:	83 c4 10             	add    esp,0x10
c002157a:	83 ec 08             	sub    esp,0x8
c002157d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021581:	50                   	push   eax
c0021582:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021589:	e8 3c fa ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c002158e:	83 c4 10             	add    esp,0x10
c0021591:	83 ec 0c             	sub    esp,0xc
c0021594:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021598:	50                   	push   eax
c0021599:	e8 85 50 fe ff       	call   c0006623 <f_mkdir>
c002159e:	83 c4 10             	add    esp,0x10
c00215a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215a8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215af:	85 c0                	test   eax,eax
c00215b1:	75 07                	jne    c00215ba <FAT::mkdir(char const*)+0x6e>
c00215b3:	b8 00 00 00 00       	mov    eax,0x0
c00215b8:	eb 05                	jmp    c00215bf <FAT::mkdir(char const*)+0x73>
c00215ba:	b8 01 00 00 00       	mov    eax,0x1
c00215bf:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215c5:	c3                   	ret    

c00215c6 <FAT::exists(char const*)>:
c00215c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215cc:	83 ec 08             	sub    esp,0x8
c00215cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215da:	50                   	push   eax
c00215db:	e8 2c f2 fd ff       	call   c000080c <strcpy>
c00215e0:	83 c4 10             	add    esp,0x10
c00215e3:	83 ec 08             	sub    esp,0x8
c00215e6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215ea:	50                   	push   eax
c00215eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215f2:	e8 d3 f9 ff ff       	call   c0020fca <FAT::fixFilepath(char*)>
c00215f7:	83 c4 10             	add    esp,0x10
c00215fa:	83 ec 08             	sub    esp,0x8
c00215fd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021604:	50                   	push   eax
c0021605:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021609:	50                   	push   eax
c002160a:	e8 3f 4b fe ff       	call   c000614e <f_stat>
c002160f:	83 c4 10             	add    esp,0x10
c0021612:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021619:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021620:	85 c0                	test   eax,eax
c0021622:	75 04                	jne    c0021628 <FAT::exists(char const*)+0x62>
c0021624:	b0 01                	mov    al,0x1
c0021626:	eb 02                	jmp    c002162a <FAT::exists(char const*)+0x64>
c0021628:	b0 00                	mov    al,0x0
c002162a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021630:	c3                   	ret    
c0021631:	90                   	nop

c0021632 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021632:	b8 08 00 00 00       	mov    eax,0x8
c0021637:	c3                   	ret    

c0021638 <ISO9660::seek(void*, unsigned long long)>:
c0021638:	53                   	push   ebx
c0021639:	b8 04 00 00 00       	mov    eax,0x4
c002163e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021642:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021646:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002164a:	85 d2                	test   edx,edx
c002164c:	74 17                	je     c0021665 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002164e:	89 c8                	mov    eax,ecx
c0021650:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021653:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021656:	b8 01 00 00 00       	mov    eax,0x1
c002165b:	73 08                	jae    c0021665 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002165d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021660:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021663:	31 c0                	xor    eax,eax
c0021665:	5b                   	pop    ebx
c0021666:	c3                   	ret    
c0021667:	90                   	nop

c0021668 <ISO9660::tell(void*, unsigned long long*)>:
c0021668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002166c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021670:	85 d2                	test   edx,edx
c0021672:	74 12                	je     c0021686 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021674:	85 c0                	test   eax,eax
c0021676:	74 0e                	je     c0021686 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021678:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002167b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002167e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021681:	89 10                	mov    DWORD PTR [eax],edx
c0021683:	31 c0                	xor    eax,eax
c0021685:	c3                   	ret    
c0021686:	b8 04 00 00 00       	mov    eax,0x4
c002168b:	c3                   	ret    

c002168c <ISO9660::getName()>:
c002168c:	b8 7c cb 02 c0       	mov    eax,0xc002cb7c
c0021691:	c3                   	ret    

c0021692 <ISO9660::stat(void*, unsigned long long*)>:
c0021692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002169a:	85 d2                	test   edx,edx
c002169c:	74 12                	je     c00216b0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002169e:	85 c0                	test   eax,eax
c00216a0:	74 0e                	je     c00216b0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216a2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216a5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216a8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216ab:	89 10                	mov    DWORD PTR [eax],edx
c00216ad:	31 c0                	xor    eax,eax
c00216af:	c3                   	ret    
c00216b0:	b8 04 00 00 00       	mov    eax,0x4
c00216b5:	c3                   	ret    

c00216b6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216b6:	b8 01 00 00 00       	mov    eax,0x1
c00216bb:	c3                   	ret    

c00216bc <ISO9660::unlink(char const*)>:
c00216bc:	b8 01 00 00 00       	mov    eax,0x1
c00216c1:	c3                   	ret    

c00216c2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216c2:	b8 01 00 00 00       	mov    eax,0x1
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::rename(char const*, char const*)>:
c00216c8:	b8 01 00 00 00       	mov    eax,0x1
c00216cd:	c3                   	ret    

c00216ce <ISO9660::mkdir(char const*)>:
c00216ce:	b8 01 00 00 00       	mov    eax,0x1
c00216d3:	c3                   	ret    

c00216d4 <ISO9660::close(void*)>:
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	b8 04 00 00 00       	mov    eax,0x4
c00216dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216e0:	85 d2                	test   edx,edx
c00216e2:	74 0e                	je     c00216f2 <ISO9660::close(void*)+0x1e>
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	52                   	push   edx
c00216e8:	e8 ca e2 fe ff       	call   c000f9b7 <free>
c00216ed:	83 c4 10             	add    esp,0x10
c00216f0:	31 c0                	xor    eax,eax
c00216f2:	83 c4 0c             	add    esp,0xc
c00216f5:	c3                   	ret    

c00216f6 <ISO9660::closeDir(void*)>:
c00216f6:	83 ec 0c             	sub    esp,0xc
c00216f9:	b8 04 00 00 00       	mov    eax,0x4
c00216fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021702:	85 d2                	test   edx,edx
c0021704:	74 0e                	je     c0021714 <ISO9660::closeDir(void*)+0x1e>
c0021706:	83 ec 0c             	sub    esp,0xc
c0021709:	52                   	push   edx
c002170a:	e8 a8 e2 fe ff       	call   c000f9b7 <free>
c002170f:	83 c4 10             	add    esp,0x10
c0021712:	31 c0                	xor    eax,eax
c0021714:	83 c4 0c             	add    esp,0xc
c0021717:	c3                   	ret    

c0021718 <ISO9660::~ISO9660()>:
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	ba a0 cb 02 c0       	mov    edx,0xc002cba0
c0021720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021724:	89 10                	mov    DWORD PTR [eax],edx
c0021726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172a:	83 ec 0c             	sub    esp,0xc
c002172d:	50                   	push   eax
c002172e:	e8 fb 15 ff ff       	call   c0012d2e <Filesystem::~Filesystem()>
c0021733:	83 c4 10             	add    esp,0x10
c0021736:	90                   	nop
c0021737:	83 c4 0c             	add    esp,0xc
c002173a:	c3                   	ret    
c002173b:	90                   	nop

c002173c <ISO9660::~ISO9660()>:
c002173c:	83 ec 0c             	sub    esp,0xc
c002173f:	83 ec 0c             	sub    esp,0xc
c0021742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021746:	e8 cd ff ff ff       	call   c0021718 <ISO9660::~ISO9660()>
c002174b:	83 c4 10             	add    esp,0x10
c002174e:	83 ec 08             	sub    esp,0x8
c0021751:	6a 08                	push   0x8
c0021753:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021757:	e8 cb 11 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002175c:	83 c4 10             	add    esp,0x10
c002175f:	83 c4 0c             	add    esp,0xc
c0021762:	c3                   	ret    

c0021763 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021763:	55                   	push   ebp
c0021764:	31 c9                	xor    ecx,ecx
c0021766:	57                   	push   edi
c0021767:	56                   	push   esi
c0021768:	53                   	push   ebx
c0021769:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002176d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021771:	89 eb                	mov    ebx,ebp
c0021773:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021777:	39 ce                	cmp    esi,ecx
c0021779:	7e 17                	jle    c0021792 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002177b:	31 d2                	xor    edx,edx
c002177d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021781:	7d 13                	jge    c0021796 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021783:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021787:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002178a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002178d:	75 0d                	jne    c002179c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002178f:	42                   	inc    edx
c0021790:	eb eb                	jmp    c002177d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021792:	31 c0                	xor    eax,eax
c0021794:	eb 0a                	jmp    c00217a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021796:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002179a:	eb 04                	jmp    c00217a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002179c:	41                   	inc    ecx
c002179d:	43                   	inc    ebx
c002179e:	eb d7                	jmp    c0021777 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217a0:	5b                   	pop    ebx
c00217a1:	5e                   	pop    esi
c00217a2:	5f                   	pop    edi
c00217a3:	5d                   	pop    ebp
c00217a4:	c3                   	ret    

c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217a5:	57                   	push   edi
c00217a6:	56                   	push   esi
c00217a7:	53                   	push   ebx
c00217a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217b0:	39 0d 60 fd 02 c0    	cmp    DWORD PTR ds:0xc002fd60,ecx
c00217b6:	75 08                	jne    c00217c0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00217b8:	38 05 f4 db 02 c0    	cmp    BYTE PTR ds:0xc002dbf4,al
c00217be:	74 2b                	je     c00217eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00217c0:	83 ec 0c             	sub    esp,0xc
c00217c3:	a2 f4 db 02 c0       	mov    ds:0xc002dbf4,al
c00217c8:	68 80 fd 02 c0       	push   0xc002fd80
c00217cd:	0f be c0             	movsx  eax,al
c00217d0:	6a 01                	push   0x1
c00217d2:	89 0d 60 fd 02 c0    	mov    DWORD PTR ds:0xc002fd60,ecx
c00217d8:	31 db                	xor    ebx,ebx
c00217da:	53                   	push   ebx
c00217db:	51                   	push   ecx
c00217dc:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c00217e3:	e8 72 4b ff ff       	call   c001635a <LogicalDisk::read(unsigned long long, int, void*)>
c00217e8:	83 c4 20             	add    esp,0x20
c00217eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00217ef:	be 80 fd 02 c0       	mov    esi,0xc002fd80
c00217f4:	b9 00 08 00 00       	mov    ecx,0x800
c00217f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217fb:	5b                   	pop    ebx
c00217fc:	5e                   	pop    esi
c00217fd:	5f                   	pop    edi
c00217fe:	c3                   	ret    
c00217ff:	90                   	nop

c0021800 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021800:	81 ec 10 08 00 00    	sub    esp,0x810
c0021806:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002180d:	83 c0 41             	add    eax,0x41
c0021810:	0f be c0             	movsx  eax,al
c0021813:	50                   	push   eax
c0021814:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021818:	50                   	push   eax
c0021819:	6a 10                	push   0x10
c002181b:	e8 85 ff ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021820:	83 c4 10             	add    esp,0x10
c0021823:	31 c0                	xor    eax,eax
c0021825:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002182a:	75 1d                	jne    c0021849 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002182c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021831:	75 16                	jne    c0021849 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021833:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021838:	75 0f                	jne    c0021849 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002183a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002183f:	75 08                	jne    c0021849 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021841:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021846:	0f 94 c0             	sete   al
c0021849:	81 c4 0c 08 00 00    	add    esp,0x80c
c002184f:	c3                   	ret    

c0021850 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021850:	55                   	push   ebp
c0021851:	57                   	push   edi
c0021852:	56                   	push   esi
c0021853:	53                   	push   ebx
c0021854:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002185a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021861:	85 ed                	test   ebp,ebp
c0021863:	0f 84 da 01 00 00    	je     c0021a43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021869:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021871:	0f 84 cc 01 00 00    	je     c0021a43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021877:	b8 01 00 00 00       	mov    eax,0x1
c002187c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021880:	0f 85 c2 01 00 00    	jne    c0021a48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021886:	31 d2                	xor    edx,edx
c0021888:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002188f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021892:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021895:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021898:	89 04 24             	mov    DWORD PTR [esp],eax
c002189b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002189f:	01 c8                	add    eax,ecx
c00218a1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00218a4:	11 da                	adc    edx,ebx
c00218a6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00218aa:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00218ae:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00218b6:	19 d7                	sbb    edi,edx
c00218b8:	72 11                	jb     c00218cb <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00218ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00218bd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00218c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218c9:	eb 0c                	jmp    c00218d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00218cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00218d3:	29 ce                	sub    esi,ecx
c00218d5:	19 df                	sbb    edi,ebx
c00218d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218da:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218dd:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218e1:	c1 e0 0b             	shl    eax,0xb
c00218e4:	01 c8                	add    eax,ecx
c00218e6:	11 da                	adc    edx,ebx
c00218e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ef:	51                   	push   ecx
c00218f0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218f4:	50                   	push   eax
c00218f5:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218f9:	53                   	push   ebx
c00218fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021902:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021906:	50                   	push   eax
c0021907:	e8 99 fe ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002190c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002190f:	b8 00 08 00 00       	mov    eax,0x800
c0021914:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002191a:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002191e:	29 d0                	sub    eax,edx
c0021920:	83 c4 10             	add    esp,0x10
c0021923:	89 f9                	mov    ecx,edi
c0021925:	39 c6                	cmp    esi,eax
c0021927:	83 d9 00             	sbb    ecx,0x0
c002192a:	7d 1b                	jge    c0021947 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002192c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021931:	75 12                	jne    c0021945 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021933:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002193a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021940:	e9 fa 00 00 00       	jmp    c0021a3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021945:	89 f0                	mov    eax,esi
c0021947:	01 d3                	add    ebx,edx
c0021949:	31 d2                	xor    edx,edx
c002194b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002194f:	39 c2                	cmp    edx,eax
c0021951:	7d 14                	jge    c0021967 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021953:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002195a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002195e:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021961:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021964:	42                   	inc    edx
c0021965:	eb e8                	jmp    c002194f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021967:	89 c2                	mov    edx,eax
c0021969:	85 c0                	test   eax,eax
c002196b:	79 02                	jns    c002196f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002196d:	31 d2                	xor    edx,edx
c002196f:	01 c2                	add    edx,eax
c0021971:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021974:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002197b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002197f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021983:	99                   	cdq    
c0021984:	01 c1                	add    ecx,eax
c0021986:	11 d3                	adc    ebx,edx
c0021988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002198c:	29 c6                	sub    esi,eax
c002198e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021992:	19 d7                	sbb    edi,edx
c0021994:	89 34 24             	mov    DWORD PTR [esp],esi
c0021997:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002199b:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219a0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219a3:	b8 00 00 00 00       	mov    eax,0x0
c00219a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219ac:	7d 43                	jge    c00219f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00219ae:	52                   	push   edx
c00219af:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219b3:	50                   	push   eax
c00219b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219c0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219c4:	50                   	push   eax
c00219c5:	e8 db fd ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219ca:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219d2:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219d7:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00219df:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219e7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219ec:	83 c4 10             	add    esp,0x10
c00219ef:	eb aa                	jmp    c002199b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00219f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219f5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219f8:	74 2a                	je     c0021a24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00219fa:	50                   	push   eax
c00219fb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ff:	50                   	push   eax
c0021a00:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021a04:	56                   	push   esi
c0021a05:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021a09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021a0d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021a11:	51                   	push   ecx
c0021a12:	e8 8e fd ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a17:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a21:	83 c4 10             	add    esp,0x10
c0021a24:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021a2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a33:	89 18                	mov    DWORD PTR [eax],ebx
c0021a35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a39:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a3c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a3f:	31 c0                	xor    eax,eax
c0021a41:	eb 05                	jmp    c0021a48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a43:	b8 04 00 00 00       	mov    eax,0x4
c0021a48:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a4e:	5b                   	pop    ebx
c0021a4f:	5e                   	pop    esi
c0021a50:	5f                   	pop    edi
c0021a51:	5d                   	pop    ebp
c0021a52:	c3                   	ret    
c0021a53:	90                   	nop

c0021a54 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a54:	55                   	push   ebp
c0021a55:	57                   	push   edi
c0021a56:	56                   	push   esi
c0021a57:	53                   	push   ebx
c0021a58:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a5e:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021a65:	85 ed                	test   ebp,ebp
c0021a67:	0f 84 51 02 00 00    	je     c0021cbe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a6d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a75:	0f 84 43 02 00 00    	je     c0021cbe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a7e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021a81:	75 0a                	jne    c0021a8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a83:	b8 07 00 00 00       	mov    eax,0x7
c0021a88:	e9 36 02 00 00       	jmp    c0021cc3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021a8d:	50                   	push   eax
c0021a8e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a92:	50                   	push   eax
c0021a93:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a9a:	53                   	push   ebx
c0021a9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a9e:	c1 e0 0b             	shl    eax,0xb
c0021aa1:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021aa4:	c1 e8 0b             	shr    eax,0xb
c0021aa7:	50                   	push   eax
c0021aa8:	e8 f8 fc ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ab0:	83 c4 10             	add    esp,0x10
c0021ab3:	89 c1                	mov    ecx,eax
c0021ab5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021ab8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021abe:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ac1:	84 db                	test   bl,bl
c0021ac3:	0f 85 8b 00 00 00    	jne    c0021b54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021ac9:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021acf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021ad2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021ad8:	29 c6                	sub    esi,eax
c0021ada:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021ade:	89 f3                	mov    ebx,esi
c0021ae0:	89 f1                	mov    ecx,esi
c0021ae2:	c1 fb 1f             	sar    ebx,0x1f
c0021ae5:	01 f0                	add    eax,esi
c0021ae7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021aea:	11 da                	adc    edx,ebx
c0021aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0021aef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021af3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021af6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021af9:	89 d8                	mov    eax,ebx
c0021afb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021aff:	ba 00 00 00 00       	mov    edx,0x0
c0021b04:	19 f8                	sbb    eax,edi
c0021b06:	b8 00 00 00 00       	mov    eax,0x0
c0021b0b:	73 08                	jae    c0021b15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021b0d:	89 f0                	mov    eax,esi
c0021b0f:	89 fa                	mov    edx,edi
c0021b11:	29 c8                	sub    eax,ecx
c0021b13:	19 da                	sbb    edx,ebx
c0021b15:	89 d7                	mov    edi,edx
c0021b17:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021b1a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021b1d:	09 c7                	or     edi,eax
c0021b1f:	0f 84 5e ff ff ff    	je     c0021a83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b25:	57                   	push   edi
c0021b26:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b2a:	50                   	push   eax
c0021b2b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b32:	53                   	push   ebx
c0021b33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b36:	c1 e0 0b             	shl    eax,0xb
c0021b39:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021b3d:	c1 e8 0b             	shr    eax,0xb
c0021b40:	50                   	push   eax
c0021b41:	e8 5f fc ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b46:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b49:	83 c4 10             	add    esp,0x10
c0021b4c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b51:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b54:	31 ff                	xor    edi,edi
c0021b56:	56                   	push   esi
c0021b57:	6a 28                	push   0x28
c0021b59:	6a 00                	push   0x0
c0021b5b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b5f:	50                   	push   eax
c0021b60:	e8 eb eb fd ff       	call   c0000750 <memset>
c0021b65:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b68:	25 ff 07 00 00       	and    eax,0x7ff
c0021b6d:	89 c6                	mov    esi,eax
c0021b6f:	83 c6 21             	add    esi,0x21
c0021b72:	83 d7 00             	adc    edi,0x0
c0021b75:	83 c4 10             	add    esp,0x10
c0021b78:	31 c9                	xor    ecx,ecx
c0021b7a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021b81:	83 f9 28             	cmp    ecx,0x28
c0021b84:	88 04 24             	mov    BYTE PTR [esp],al
c0021b87:	0f 94 c2             	sete   dl
c0021b8a:	88 d0                	mov    al,dl
c0021b8c:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b91:	39 f2                	cmp    edx,esi
c0021b93:	ba 00 00 00 00       	mov    edx,0x0
c0021b98:	19 fa                	sbb    edx,edi
c0021b9a:	0f 92 c2             	setb   dl
c0021b9d:	09 c2                	or     edx,eax
c0021b9f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021ba3:	0f 94 c0             	sete   al
c0021ba6:	08 d0                	or     al,dl
c0021ba8:	75 16                	jne    c0021bc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021baa:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bae:	74 10                	je     c0021bc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021bb0:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bb3:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bb7:	41                   	inc    ecx
c0021bb8:	83 c6 01             	add    esi,0x1
c0021bbb:	83 d7 00             	adc    edi,0x0
c0021bbe:	eb ba                	jmp    c0021b7a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021bc0:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bc7:	83 ec 0c             	sub    esp,0xc
c0021bca:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021bce:	56                   	push   esi
c0021bcf:	e8 98 eb fd ff       	call   c000076c <strlen>
c0021bd4:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021bdb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bdf:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021be7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021bea:	5a                   	pop    edx
c0021beb:	25 ff 07 00 00       	and    eax,0x7ff
c0021bf0:	59                   	pop    ecx
c0021bf1:	01 f8                	add    eax,edi
c0021bf3:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bf9:	83 e0 02             	and    eax,0x2
c0021bfc:	3c 01                	cmp    al,0x1
c0021bfe:	19 c0                	sbb    eax,eax
c0021c00:	83 c0 02             	add    eax,0x2
c0021c03:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c07:	56                   	push   esi
c0021c08:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c0c:	50                   	push   eax
c0021c0d:	e8 fa eb fd ff       	call   c000080c <strcpy>
c0021c12:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c16:	83 c4 10             	add    esp,0x10
c0021c19:	84 c0                	test   al,al
c0021c1b:	75 21                	jne    c0021c3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021c1d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c25:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c2d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c35:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c3c:	eb 28                	jmp    c0021c66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c3e:	fe c8                	dec    al
c0021c40:	75 24                	jne    c0021c66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c42:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c4a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c52:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c5a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c61:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c66:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021c6a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021c71:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021c78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c7a:	0f b6 f3             	movzx  esi,bl
c0021c7d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021c84:	31 db                	xor    ebx,ebx
c0021c86:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c8c:	89 df                	mov    edi,ebx
c0021c8e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c94:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021c97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c9a:	39 c6                	cmp    esi,eax
c0021c9c:	19 d7                	sbb    edi,edx
c0021c9e:	72 10                	jb     c0021cb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021ca0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021ca7:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021cae:	eb 0a                	jmp    c0021cba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021cb0:	29 f0                	sub    eax,esi
c0021cb2:	19 da                	sbb    edx,ebx
c0021cb4:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021cb7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021cba:	31 c0                	xor    eax,eax
c0021cbc:	eb 05                	jmp    c0021cc3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cbe:	b8 04 00 00 00       	mov    eax,0x4
c0021cc3:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cc9:	5b                   	pop    ebx
c0021cca:	5e                   	pop    esi
c0021ccb:	5f                   	pop    edi
c0021ccc:	5d                   	pop    ebp
c0021ccd:	c3                   	ret    

c0021cce <readRoot(unsigned int*, unsigned int*, char)>:
c0021cce:	57                   	push   edi
c0021ccf:	56                   	push   esi
c0021cd0:	81 ec 38 08 00 00    	sub    esp,0x838
c0021cd6:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cde:	50                   	push   eax
c0021cdf:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021ce3:	50                   	push   eax
c0021ce4:	6a 10                	push   0x10
c0021ce6:	e8 ba fa ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ceb:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021cf2:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021cf6:	b9 22 00 00 00       	mov    ecx,0x22
c0021cfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021cfd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d08:	89 10                	mov    DWORD PTR [eax],edx
c0021d0a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d15:	89 10                	mov    DWORD PTR [eax],edx
c0021d17:	81 c4 44 08 00 00    	add    esp,0x844
c0021d1d:	b0 01                	mov    al,0x1
c0021d1f:	5e                   	pop    esi
c0021d20:	5f                   	pop    edi
c0021d21:	c3                   	ret    

c0021d22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d22:	55                   	push   ebp
c0021d23:	57                   	push   edi
c0021d24:	56                   	push   esi
c0021d25:	53                   	push   ebx
c0021d26:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d2c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d33:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d3e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d42:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d46:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d4a:	75 03                	jne    c0021d4f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d4c:	83 c3 02             	add    ebx,0x2
c0021d4f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d52:	75 03                	jne    c0021d57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d54:	43                   	inc    ebx
c0021d55:	eb f8                	jmp    c0021d4f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d57:	51                   	push   ecx
c0021d58:	68 00 01 00 00       	push   0x100
c0021d5d:	6a 00                	push   0x0
c0021d5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d63:	50                   	push   eax
c0021d64:	e8 e7 e9 fd ff       	call   c0000750 <memset>
c0021d69:	83 c4 10             	add    esp,0x10
c0021d6c:	31 d2                	xor    edx,edx
c0021d6e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d71:	84 c0                	test   al,al
c0021d73:	74 21                	je     c0021d96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d75:	3c 2f                	cmp    al,0x2f
c0021d77:	75 0b                	jne    c0021d84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d79:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0021d82:	eb 14                	jmp    c0021d98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d84:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d87:	80 f9 19             	cmp    cl,0x19
c0021d8a:	77 03                	ja     c0021d8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d8c:	83 e8 20             	sub    eax,0x20
c0021d8f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d93:	42                   	inc    edx
c0021d94:	eb d8                	jmp    c0021d6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d96:	31 ed                	xor    ebp,ebp
c0021d98:	83 ec 0c             	sub    esp,0xc
c0021d9b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021da2:	e8 00 dc fe ff       	call   c000f9a7 <malloc>
c0021da7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dae:	89 c6                	mov    esi,eax
c0021db0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021db6:	c1 ef 0b             	shr    edi,0xb
c0021db9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dc0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dc4:	83 c4 10             	add    esp,0x10
c0021dc7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dcc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dd0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dd7:	74 28                	je     c0021e01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dd9:	52                   	push   edx
c0021dda:	57                   	push   edi
c0021ddb:	50                   	push   eax
c0021ddc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021de0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021de7:	e8 b9 f9 ff ff       	call   c00217a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021df0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021df7:	05 00 08 00 00       	add    eax,0x800
c0021dfc:	83 c4 10             	add    esp,0x10
c0021dff:	eb cb                	jmp    c0021dcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e01:	83 ec 0c             	sub    esp,0xc
c0021e04:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e08:	57                   	push   edi
c0021e09:	e8 5e e9 fd ff       	call   c000076c <strlen>
c0021e0e:	50                   	push   eax
c0021e0f:	57                   	push   edi
c0021e10:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e17:	56                   	push   esi
c0021e18:	e8 46 f9 ff ff       	call   c0021763 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e1d:	83 c4 20             	add    esp,0x20
c0021e20:	85 c0                	test   eax,eax
c0021e22:	75 13                	jne    c0021e37 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e24:	83 ec 0c             	sub    esp,0xc
c0021e27:	56                   	push   esi
c0021e28:	e8 8a db fe ff       	call   c000f9b7 <free>
c0021e2d:	83 c4 10             	add    esp,0x10
c0021e30:	31 c0                	xor    eax,eax
c0021e32:	e9 b3 00 00 00       	jmp    c0021eea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e37:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e3b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e3f:	c1 e7 08             	shl    edi,0x8
c0021e42:	c1 e2 10             	shl    edx,0x10
c0021e45:	09 d7                	or     edi,edx
c0021e47:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e4b:	09 d7                	or     edi,edx
c0021e4d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e51:	c1 e2 18             	shl    edx,0x18
c0021e54:	09 d7                	or     edi,edx
c0021e56:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e5a:	89 d1                	mov    ecx,edx
c0021e5c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e60:	c1 e1 08             	shl    ecx,0x8
c0021e63:	c1 e2 10             	shl    edx,0x10
c0021e66:	09 ca                	or     edx,ecx
c0021e68:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e6c:	09 ca                	or     edx,ecx
c0021e6e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e72:	c1 e1 18             	shl    ecx,0x18
c0021e75:	09 ca                	or     edx,ecx
c0021e77:	89 e9                	mov    ecx,ebp
c0021e79:	84 c9                	test   cl,cl
c0021e7b:	74 3c                	je     c0021eb9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e7d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e81:	83 ec 0c             	sub    esp,0xc
c0021e84:	56                   	push   esi
c0021e85:	e8 2d db fe ff       	call   c000f9b7 <free>
c0021e8a:	83 c4 0c             	add    esp,0xc
c0021e8d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e94:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e99:	50                   	push   eax
c0021e9a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ea1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ea8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eac:	52                   	push   edx
c0021ead:	57                   	push   edi
c0021eae:	53                   	push   ebx
c0021eaf:	e8 6e fe ff ff       	call   c0021d22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021eb4:	83 c4 20             	add    esp,0x20
c0021eb7:	eb 31                	jmp    c0021eea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021eb9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ebc:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ec3:	d0 e8                	shr    al,1
c0021ec5:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ec7:	83 e0 01             	and    eax,0x1
c0021eca:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ed1:	83 ec 0c             	sub    esp,0xc
c0021ed4:	89 13                	mov    DWORD PTR [ebx],edx
c0021ed6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021edd:	89 03                	mov    DWORD PTR [ebx],eax
c0021edf:	56                   	push   esi
c0021ee0:	e8 d2 da fe ff       	call   c000f9b7 <free>
c0021ee5:	83 c4 10             	add    esp,0x10
c0021ee8:	b0 01                	mov    al,0x1
c0021eea:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ef0:	5b                   	pop    ebx
c0021ef1:	5e                   	pop    esi
c0021ef2:	5f                   	pop    edi
c0021ef3:	5d                   	pop    ebp
c0021ef4:	c3                   	ret    

c0021ef5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ef5:	55                   	push   ebp
c0021ef6:	57                   	push   edi
c0021ef7:	56                   	push   esi
c0021ef8:	53                   	push   ebx
c0021ef9:	83 ec 20             	sub    esp,0x20
c0021efc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f00:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f04:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f10:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f18:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f1d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f23:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f29:	57                   	push   edi
c0021f2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f2e:	50                   	push   eax
c0021f2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f33:	50                   	push   eax
c0021f34:	e8 95 fd ff ff       	call   c0021cce <readRoot(unsigned int*, unsigned int*, char)>
c0021f39:	5a                   	pop    edx
c0021f3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f3e:	e8 29 e8 fd ff       	call   c000076c <strlen>
c0021f43:	83 c4 10             	add    esp,0x10
c0021f46:	83 f8 03             	cmp    eax,0x3
c0021f49:	77 17                	ja     c0021f62 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f4f:	89 03                	mov    DWORD PTR [ebx],eax
c0021f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f55:	89 06                	mov    DWORD PTR [esi],eax
c0021f57:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f5e:	b0 01                	mov    al,0x1
c0021f60:	eb 19                	jmp    c0021f7b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f62:	50                   	push   eax
c0021f63:	55                   	push   ebp
c0021f64:	57                   	push   edi
c0021f65:	56                   	push   esi
c0021f66:	53                   	push   ebx
c0021f67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f73:	e8 aa fd ff ff       	call   c0021d22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f78:	83 c4 20             	add    esp,0x20
c0021f7b:	83 c4 1c             	add    esp,0x1c
c0021f7e:	5b                   	pop    ebx
c0021f7f:	5e                   	pop    esi
c0021f80:	5f                   	pop    edi
c0021f81:	5d                   	pop    ebp
c0021f82:	c3                   	ret    
c0021f83:	90                   	nop

c0021f84 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f84:	57                   	push   edi
c0021f85:	56                   	push   esi
c0021f86:	53                   	push   ebx
c0021f87:	83 ec 10             	sub    esp,0x10
c0021f8a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f8e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f92:	85 ff                	test   edi,edi
c0021f94:	0f 84 8b 00 00 00    	je     c0022025 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021f9a:	85 f6                	test   esi,esi
c0021f9c:	0f 84 83 00 00 00    	je     c0022025 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021fa2:	b8 03 00 00 00       	mov    eax,0x3
c0021fa7:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fac:	75 7c                	jne    c002202a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fae:	83 ec 0c             	sub    esp,0xc
c0021fb1:	6a 1c                	push   0x1c
c0021fb3:	e8 ef d9 fe ff       	call   c000f9a7 <malloc>
c0021fb8:	89 07                	mov    DWORD PTR [edi],eax
c0021fba:	89 c3                	mov    ebx,eax
c0021fbc:	58                   	pop    eax
c0021fbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fc1:	50                   	push   eax
c0021fc2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fc5:	50                   	push   eax
c0021fc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fca:	50                   	push   eax
c0021fcb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fcf:	50                   	push   eax
c0021fd0:	56                   	push   esi
c0021fd1:	e8 1f ff ff ff       	call   c0021ef5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fd6:	83 c4 20             	add    esp,0x20
c0021fd9:	84 c0                	test   al,al
c0021fdb:	74 07                	je     c0021fe4 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021fdd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fe2:	74 0b                	je     c0021fef <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021fe4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fe8:	b8 01 00 00 00       	mov    eax,0x1
c0021fed:	eb 3b                	jmp    c002202a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ff7:	89 03                	mov    DWORD PTR [ebx],eax
c0021ff9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022004:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002200b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022012:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022015:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002201c:	8a 06                	mov    al,BYTE PTR [esi]
c002201e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022021:	31 c0                	xor    eax,eax
c0022023:	eb 05                	jmp    c002202a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0022025:	b8 04 00 00 00       	mov    eax,0x4
c002202a:	83 c4 10             	add    esp,0x10
c002202d:	5b                   	pop    ebx
c002202e:	5e                   	pop    esi
c002202f:	5f                   	pop    edi
c0022030:	c3                   	ret    
c0022031:	90                   	nop

c0022032 <ISO9660::exists(char const*)>:
c0022032:	83 ec 28             	sub    esp,0x28
c0022035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022039:	8d 54 24 18          	lea    edx,[esp+0x18]
c002203d:	52                   	push   edx
c002203e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022041:	52                   	push   edx
c0022042:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022046:	52                   	push   edx
c0022047:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002204b:	52                   	push   edx
c002204c:	50                   	push   eax
c002204d:	e8 a3 fe ff ff       	call   c0021ef5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022052:	83 c4 3c             	add    esp,0x3c
c0022055:	c3                   	ret    

c0022056 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022056:	56                   	push   esi
c0022057:	53                   	push   ebx
c0022058:	83 ec 14             	sub    esp,0x14
c002205b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002205f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022063:	85 db                	test   ebx,ebx
c0022065:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022069:	0f 94 c2             	sete   dl
c002206c:	85 f6                	test   esi,esi
c002206e:	0f 94 c0             	sete   al
c0022071:	08 c2                	or     dl,al
c0022073:	75 68                	jne    c00220dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022075:	85 c9                	test   ecx,ecx
c0022077:	74 64                	je     c00220dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022079:	83 ec 0c             	sub    esp,0xc
c002207c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002207f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022083:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022089:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022090:	50                   	push   eax
c0022091:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022094:	50                   	push   eax
c0022095:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022099:	50                   	push   eax
c002209a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002209e:	50                   	push   eax
c002209f:	51                   	push   ecx
c00220a0:	e8 50 fe ff ff       	call   c0021ef5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220a5:	83 c4 20             	add    esp,0x20
c00220a8:	ba 01 00 00 00       	mov    edx,0x1
c00220ad:	84 c0                	test   al,al
c00220af:	74 31                	je     c00220e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220bc:	89 03                	mov    DWORD PTR [ebx],eax
c00220be:	ba 00 00 00 00       	mov    edx,0x0
c00220c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220c7:	85 c0                	test   eax,eax
c00220c9:	0f 95 06             	setne  BYTE PTR [esi]
c00220cc:	74 14                	je     c00220e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220db:	eb 05                	jmp    c00220e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220dd:	ba 04 00 00 00       	mov    edx,0x4
c00220e2:	83 c4 14             	add    esp,0x14
c00220e5:	89 d0                	mov    eax,edx
c00220e7:	5b                   	pop    ebx
c00220e8:	5e                   	pop    esi
c00220e9:	c3                   	ret    

c00220ea <ISO9660::openDir(char const*, void**)>:
c00220ea:	57                   	push   edi
c00220eb:	56                   	push   esi
c00220ec:	53                   	push   ebx
c00220ed:	83 ec 10             	sub    esp,0x10
c00220f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220f8:	85 ff                	test   edi,edi
c00220fa:	74 7b                	je     c0022177 <ISO9660::openDir(char const*, void**)+0x8d>
c00220fc:	85 f6                	test   esi,esi
c00220fe:	74 77                	je     c0022177 <ISO9660::openDir(char const*, void**)+0x8d>
c0022100:	83 ec 0c             	sub    esp,0xc
c0022103:	6a 1c                	push   0x1c
c0022105:	e8 9d d8 fe ff       	call   c000f9a7 <malloc>
c002210a:	89 07                	mov    DWORD PTR [edi],eax
c002210c:	89 c3                	mov    ebx,eax
c002210e:	58                   	pop    eax
c002210f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022113:	50                   	push   eax
c0022114:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022117:	50                   	push   eax
c0022118:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002211c:	50                   	push   eax
c002211d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022121:	50                   	push   eax
c0022122:	56                   	push   esi
c0022123:	e8 cd fd ff ff       	call   c0021ef5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022128:	83 c4 20             	add    esp,0x20
c002212b:	84 c0                	test   al,al
c002212d:	74 07                	je     c0022136 <ISO9660::openDir(char const*, void**)+0x4c>
c002212f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022134:	75 0b                	jne    c0022141 <ISO9660::openDir(char const*, void**)+0x57>
c0022136:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002213a:	b8 01 00 00 00       	mov    eax,0x1
c002213f:	eb 3b                	jmp    c002217c <ISO9660::openDir(char const*, void**)+0x92>
c0022141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022145:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022149:	89 03                	mov    DWORD PTR [ebx],eax
c002214b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022152:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022156:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002215d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022167:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002216e:	8a 06                	mov    al,BYTE PTR [esi]
c0022170:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022173:	31 c0                	xor    eax,eax
c0022175:	eb 05                	jmp    c002217c <ISO9660::openDir(char const*, void**)+0x92>
c0022177:	b8 04 00 00 00       	mov    eax,0x4
c002217c:	83 c4 10             	add    esp,0x10
c002217f:	5b                   	pop    ebx
c0022180:	5e                   	pop    esi
c0022181:	5f                   	pop    edi
c0022182:	c3                   	ret    
c0022183:	90                   	nop

c0022184 <ISO9660::ISO9660()>:
c0022184:	83 ec 0c             	sub    esp,0xc
c0022187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218b:	83 ec 0c             	sub    esp,0xc
c002218e:	50                   	push   eax
c002218f:	e8 76 0b ff ff       	call   c0012d0a <Filesystem::Filesystem()>
c0022194:	83 c4 10             	add    esp,0x10
c0022197:	ba a0 cb 02 c0       	mov    edx,0xc002cba0
c002219c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a0:	89 10                	mov    DWORD PTR [eax],edx
c00221a2:	90                   	nop
c00221a3:	83 c4 0c             	add    esp,0xc
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221a8:	83 ec 1c             	sub    esp,0x1c
c00221ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00221b3:	89 10                	mov    DWORD PTR [eax],edx
c00221b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00221bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00221cb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00221d0:	75 23                	jne    c00221f5 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00221d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00221d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221df:	0f af c2             	imul   eax,edx
c00221e2:	85 c0                	test   eax,eax
c00221e4:	79 03                	jns    c00221e9 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00221e6:	83 c0 03             	add    eax,0x3
c00221e9:	c1 f8 02             	sar    eax,0x2
c00221ec:	05 a0 0f 00 00       	add    eax,0xfa0
c00221f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00221fd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022204:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002220b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002220f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002221a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002221d:	c1 e0 02             	shl    eax,0x2
c0022220:	83 ec 0c             	sub    esp,0xc
c0022223:	50                   	push   eax
c0022224:	e8 7e d7 fe ff       	call   c000f9a7 <malloc>
c0022229:	83 c4 10             	add    esp,0x10
c002222c:	89 c2                	mov    edx,eax
c002222e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022232:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022235:	83 ec 04             	sub    esp,0x4
c0022238:	8d 44 24 08          	lea    eax,[esp+0x8]
c002223c:	50                   	push   eax
c002223d:	6a 01                	push   0x1
c002223f:	6a 04                	push   0x4
c0022241:	e8 55 6b fe ff       	call   c0008d9b <src_new>
c0022246:	83 c4 10             	add    esp,0x10
c0022249:	89 c2                	mov    edx,eax
c002224b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022256:	85 c0                	test   eax,eax
c0022258:	74 10                	je     c002226a <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c002225a:	83 ec 0c             	sub    esp,0xc
c002225d:	68 00 cc 02 c0       	push   0xc002cc00
c0022262:	e8 36 81 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0022267:	83 c4 10             	add    esp,0x10
c002226a:	a0 80 09 03 c0       	mov    al,ds:0xc0030980
c002226f:	83 f0 01             	xor    eax,0x1
c0022272:	84 c0                	test   al,al
c0022274:	74 57                	je     c00222cd <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0022276:	a1 1c cc 02 c0       	mov    eax,ds:0xc002cc1c
c002227b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002227f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022287:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002228f:	7f 35                	jg     c00222c6 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0022291:	83 ec 0c             	sub    esp,0xc
c0022294:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022298:	e8 62 54 00 00       	call   c00276ff <__floatsisf>
c002229d:	83 c4 10             	add    esp,0x10
c00222a0:	8b 15 1c cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc1c
c00222a6:	83 ec 08             	sub    esp,0x8
c00222a9:	52                   	push   edx
c00222aa:	50                   	push   eax
c00222ab:	e8 61 50 00 00       	call   c0027311 <__mulsf3>
c00222b0:	83 c4 10             	add    esp,0x10
c00222b3:	89 c2                	mov    edx,eax
c00222b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222b9:	89 14 85 80 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa80],edx
c00222c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00222c4:	eb c1                	jmp    c0022287 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c00222c6:	c6 05 80 09 03 c0 01 	mov    BYTE PTR ds:0xc0030980,0x1
c00222cd:	90                   	nop
c00222ce:	83 c4 1c             	add    esp,0x1c
c00222d1:	c3                   	ret    

c00222d2 <SoundChannel::~SoundChannel()>:
c00222d2:	83 ec 0c             	sub    esp,0xc
c00222d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222dc:	83 ec 0c             	sub    esp,0xc
c00222df:	50                   	push   eax
c00222e0:	e8 d2 d6 fe ff       	call   c000f9b7 <free>
c00222e5:	83 c4 10             	add    esp,0x10
c00222e8:	90                   	nop
c00222e9:	83 c4 0c             	add    esp,0xc
c00222ec:	c3                   	ret    
c00222ed:	90                   	nop

c00222ee <SoundChannel::getSampleRate()>:
c00222ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00222f4:	c3                   	ret    
c00222f5:	90                   	nop

c00222f6 <SoundChannel::getBits()>:
c00222f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222fd:	c3                   	ret    

c00222fe <SoundChannel::getBufferUsed()>:
c00222fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022302:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022305:	c3                   	ret    

c0022306 <SoundChannel::getBufferSize()>:
c0022306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002230d:	c3                   	ret    

c002230e <SoundChannel::unbuffer(float*, int, int)>:
c002230e:	56                   	push   esi
c002230f:	53                   	push   ebx
c0022310:	83 ec 40             	sub    esp,0x40
c0022313:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022317:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002231a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002231e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022321:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022325:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022329:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002232d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022331:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022335:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022339:	e8 c1 53 00 00       	call   c00276ff <__floatsisf>
c002233e:	5a                   	pop    edx
c002233f:	89 c6                	mov    esi,eax
c0022341:	ff 33                	push   DWORD PTR [ebx]
c0022343:	e8 b7 53 00 00       	call   c00276ff <__floatsisf>
c0022348:	59                   	pop    ecx
c0022349:	5a                   	pop    edx
c002234a:	50                   	push   eax
c002234b:	56                   	push   esi
c002234c:	e8 83 51 00 00       	call   c00274d4 <__divsf3>
c0022351:	89 04 24             	mov    DWORD PTR [esp],eax
c0022354:	e8 76 66 00 00       	call   c00289cf <__extendsfdf2>
c0022359:	59                   	pop    ecx
c002235a:	5e                   	pop    esi
c002235b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002235f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022363:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002236b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002236f:	50                   	push   eax
c0022370:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022373:	e8 18 66 fe ff       	call   c0008990 <src_process>
c0022378:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002237c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002237f:	83 c4 0c             	add    esp,0xc
c0022382:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022385:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022388:	29 d0                	sub    eax,edx
c002238a:	c1 e0 02             	shl    eax,0x2
c002238d:	50                   	push   eax
c002238e:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022391:	50                   	push   eax
c0022392:	51                   	push   ecx
c0022393:	e8 f0 e2 fd ff       	call   c0000688 <memmove>
c0022398:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002239c:	83 c4 44             	add    esp,0x44
c002239f:	5b                   	pop    ebx
c00223a0:	5e                   	pop    esi
c00223a1:	c3                   	ret    

c00223a2 <SoundChannel::buffer16(short*, int)>:
c00223a2:	55                   	push   ebp
c00223a3:	57                   	push   edi
c00223a4:	56                   	push   esi
c00223a5:	53                   	push   ebx
c00223a6:	83 ec 1c             	sub    esp,0x1c
c00223a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00223ad:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223b0:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223b3:	0f 84 d2 00 00 00    	je     c002248b <SoundChannel::buffer16(short*, int)+0xe9>
c00223b9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00223bd:	85 ed                	test   ebp,ebp
c00223bf:	0f 8e c6 00 00 00    	jle    c002248b <SoundChannel::buffer16(short*, int)+0xe9>
c00223c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223c9:	bd 00 00 00 38       	mov    ebp,0x38000000
c00223ce:	83 ec 0c             	sub    esp,0xc
c00223d1:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00223d4:	50                   	push   eax
c00223d5:	e8 25 53 00 00       	call   c00276ff <__floatsisf>
c00223da:	59                   	pop    ecx
c00223db:	8d 4e 01             	lea    ecx,[esi+0x1]
c00223de:	5f                   	pop    edi
c00223df:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00223e2:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00223e5:	55                   	push   ebp
c00223e6:	50                   	push   eax
c00223e7:	e8 25 4f 00 00       	call   c0027311 <__mulsf3>
c00223ec:	83 c4 10             	add    esp,0x10
c00223ef:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223f2:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223f5:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223f8:	0f 84 99 00 00 00    	je     c0022497 <SoundChannel::buffer16(short*, int)+0xf5>
c00223fe:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022403:	74 78                	je     c002247d <SoundChannel::buffer16(short*, int)+0xdb>
c0022405:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022409:	83 ec 0c             	sub    esp,0xc
c002240c:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022410:	50                   	push   eax
c0022411:	e8 e9 52 00 00       	call   c00276ff <__floatsisf>
c0022416:	5f                   	pop    edi
c0022417:	8d 4e 01             	lea    ecx,[esi+0x1]
c002241a:	5a                   	pop    edx
c002241b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002241e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022421:	55                   	push   ebp
c0022422:	50                   	push   eax
c0022423:	e8 e9 4e 00 00       	call   c0027311 <__mulsf3>
c0022428:	83 c4 10             	add    esp,0x10
c002242b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002242e:	be 02 00 00 00       	mov    esi,0x2
c0022433:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022436:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022439:	74 46                	je     c0022481 <SoundChannel::buffer16(short*, int)+0xdf>
c002243b:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002243f:	eb 36                	jmp    c0022477 <SoundChannel::buffer16(short*, int)+0xd5>
c0022441:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022445:	83 ec 0c             	sub    esp,0xc
c0022448:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c002244c:	46                   	inc    esi
c002244d:	50                   	push   eax
c002244e:	e8 ac 52 00 00       	call   c00276ff <__floatsisf>
c0022453:	5a                   	pop    edx
c0022454:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022457:	59                   	pop    ecx
c0022458:	8d 4f 01             	lea    ecx,[edi+0x1]
c002245b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002245e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022462:	50                   	push   eax
c0022463:	e8 a9 4e 00 00       	call   c0027311 <__mulsf3>
c0022468:	83 c4 10             	add    esp,0x10
c002246b:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c002246f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022472:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022475:	74 0a                	je     c0022481 <SoundChannel::buffer16(short*, int)+0xdf>
c0022477:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c002247b:	75 c4                	jne    c0022441 <SoundChannel::buffer16(short*, int)+0x9f>
c002247d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022481:	83 c4 1c             	add    esp,0x1c
c0022484:	89 f0                	mov    eax,esi
c0022486:	5b                   	pop    ebx
c0022487:	5e                   	pop    esi
c0022488:	5f                   	pop    edi
c0022489:	5d                   	pop    ebp
c002248a:	c3                   	ret    
c002248b:	83 c4 1c             	add    esp,0x1c
c002248e:	31 f6                	xor    esi,esi
c0022490:	5b                   	pop    ebx
c0022491:	89 f0                	mov    eax,esi
c0022493:	5e                   	pop    esi
c0022494:	5f                   	pop    edi
c0022495:	5d                   	pop    ebp
c0022496:	c3                   	ret    
c0022497:	be 01 00 00 00       	mov    esi,0x1
c002249c:	eb e3                	jmp    c0022481 <SoundChannel::buffer16(short*, int)+0xdf>

c002249e <SoundChannel::buffer8(unsigned char*, int)>:
c002249e:	55                   	push   ebp
c002249f:	57                   	push   edi
c00224a0:	56                   	push   esi
c00224a1:	53                   	push   ebx
c00224a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224a6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224aa:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224b1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224b4:	74 7a                	je     c0022530 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224b6:	85 ff                	test   edi,edi
c00224b8:	7e 76                	jle    c0022530 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224ba:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224be:	8d 70 01             	lea    esi,[eax+0x1]
c00224c1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224c4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224c7:	8b 1c 9d 80 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa80]
c00224ce:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224d1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224d4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224d7:	74 5e                	je     c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224d9:	83 ff 01             	cmp    edi,0x1
c00224dc:	74 4b                	je     c0022529 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224de:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224e2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224e5:	8d 70 01             	lea    esi,[eax+0x1]
c00224e8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224eb:	8b 1c 9d 80 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa80]
c00224f2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224f5:	b8 02 00 00 00       	mov    eax,0x2
c00224fa:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224fd:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022500:	75 23                	jne    c0022525 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022502:	eb 27                	jmp    c002252b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022504:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022509:	8d 71 01             	lea    esi,[ecx+0x1]
c002250c:	40                   	inc    eax
c002250d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022510:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022513:	8b 1c 9d 80 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa80]
c002251a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002251d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022520:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022523:	74 06                	je     c002252b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022525:	39 c7                	cmp    edi,eax
c0022527:	75 db                	jne    c0022504 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022529:	89 f8                	mov    eax,edi
c002252b:	5b                   	pop    ebx
c002252c:	5e                   	pop    esi
c002252d:	5f                   	pop    edi
c002252e:	5d                   	pop    ebp
c002252f:	c3                   	ret    
c0022530:	5b                   	pop    ebx
c0022531:	31 c0                	xor    eax,eax
c0022533:	5e                   	pop    esi
c0022534:	5f                   	pop    edi
c0022535:	5d                   	pop    ebp
c0022536:	c3                   	ret    
c0022537:	b8 01 00 00 00       	mov    eax,0x1
c002253c:	eb ed                	jmp    c002252b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002253e <SoundDevice::SoundDevice(char const*)>:
c002253e:	83 ec 1c             	sub    esp,0x1c
c0022541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022545:	83 ec 08             	sub    esp,0x8
c0022548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002254c:	50                   	push   eax
c002254d:	e8 ea 1a ff ff       	call   c001403c <Device::Device(char const*)>
c0022552:	83 c4 10             	add    esp,0x10
c0022555:	ba 28 cc 02 c0       	mov    edx,0xc002cc28
c002255a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255e:	89 10                	mov    DWORD PTR [eax],edx
c0022560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022564:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002256e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022572:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002257c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022584:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022589:	7f 19                	jg     c00225a4 <SoundDevice::SoundDevice(char const*)+0x66>
c002258b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022593:	83 c2 54             	add    edx,0x54
c0022596:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002259e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225a2:	eb e0                	jmp    c0022584 <SoundDevice::SoundDevice(char const*)+0x46>
c00225a4:	90                   	nop
c00225a5:	83 c4 1c             	add    esp,0x1c
c00225a8:	c3                   	ret    
c00225a9:	90                   	nop

c00225aa <SoundDevice::~SoundDevice()>:
c00225aa:	53                   	push   ebx
c00225ab:	83 ec 18             	sub    esp,0x18
c00225ae:	ba 28 cc 02 c0       	mov    edx,0xc002cc28
c00225b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b7:	89 10                	mov    DWORD PTR [eax],edx
c00225b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225c1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225c6:	7f 46                	jg     c002260e <SoundDevice::~SoundDevice()+0x64>
c00225c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225d0:	83 c2 54             	add    edx,0x54
c00225d3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225d7:	85 c0                	test   eax,eax
c00225d9:	74 2d                	je     c0022608 <SoundDevice::~SoundDevice()+0x5e>
c00225db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225e3:	83 c2 54             	add    edx,0x54
c00225e6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225ea:	85 db                	test   ebx,ebx
c00225ec:	74 1a                	je     c0022608 <SoundDevice::~SoundDevice()+0x5e>
c00225ee:	83 ec 0c             	sub    esp,0xc
c00225f1:	53                   	push   ebx
c00225f2:	e8 db fc ff ff       	call   c00222d2 <SoundChannel::~SoundChannel()>
c00225f7:	83 c4 10             	add    esp,0x10
c00225fa:	83 ec 08             	sub    esp,0x8
c00225fd:	6a 2c                	push   0x2c
c00225ff:	53                   	push   ebx
c0022600:	e8 22 03 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002260c:	eb b3                	jmp    c00225c1 <SoundDevice::~SoundDevice()+0x17>
c002260e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022612:	83 ec 0c             	sub    esp,0xc
c0022615:	50                   	push   eax
c0022616:	e8 eb 16 ff ff       	call   c0013d06 <Device::~Device()>
c002261b:	83 c4 10             	add    esp,0x10
c002261e:	90                   	nop
c002261f:	83 c4 18             	add    esp,0x18
c0022622:	5b                   	pop    ebx
c0022623:	c3                   	ret    

c0022624 <SoundDevice::~SoundDevice()>:
c0022624:	83 ec 0c             	sub    esp,0xc
c0022627:	83 ec 0c             	sub    esp,0xc
c002262a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002262e:	e8 77 ff ff ff       	call   c00225aa <SoundDevice::~SoundDevice()>
c0022633:	83 c4 10             	add    esp,0x10
c0022636:	83 ec 08             	sub    esp,0x8
c0022639:	68 e4 01 00 00       	push   0x1e4
c002263e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022642:	e8 e0 02 ff ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0022647:	83 c4 10             	add    esp,0x10
c002264a:	83 c4 0c             	add    esp,0xc
c002264d:	c3                   	ret    

c002264e <SoundDevice::getFreeChannelNum()>:
c002264e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022652:	31 c0                	xor    eax,eax
c0022654:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002265c:	74 09                	je     c0022667 <SoundDevice::getFreeChannelNum()+0x19>
c002265e:	40                   	inc    eax
c002265f:	83 f8 20             	cmp    eax,0x20
c0022662:	75 f0                	jne    c0022654 <SoundDevice::getFreeChannelNum()+0x6>
c0022664:	83 c8 ff             	or     eax,0xffffffff
c0022667:	c3                   	ret    

c0022668 <SoundDevice::addChannel(SoundChannel*)>:
c0022668:	56                   	push   esi
c0022669:	53                   	push   ebx
c002266a:	51                   	push   ecx
c002266b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002266f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022673:	53                   	push   ebx
c0022674:	e8 d5 ff ff ff       	call   c002264e <SoundDevice::getFreeChannelNum()>
c0022679:	5a                   	pop    edx
c002267a:	83 f8 ff             	cmp    eax,0xffffffff
c002267d:	74 51                	je     c00226d0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002267f:	85 f6                	test   esi,esi
c0022681:	74 4d                	je     c00226d0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022683:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002268a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022691:	75 30                	jne    c00226c3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022693:	83 ec 0c             	sub    esp,0xc
c0022696:	56                   	push   esi
c0022697:	e8 52 fc ff ff       	call   c00222ee <SoundChannel::getSampleRate()>
c002269c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00226a5:	e8 4c fc ff ff       	call   c00222f6 <SoundChannel::getBits()>
c00226aa:	83 c4 0c             	add    esp,0xc
c00226ad:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226b5:	50                   	push   eax
c00226b6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226bc:	53                   	push   ebx
c00226bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00226c0:	83 c4 10             	add    esp,0x10
c00226c3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226c9:	b8 01 00 00 00       	mov    eax,0x1
c00226ce:	eb 03                	jmp    c00226d3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226d0:	83 c8 ff             	or     eax,0xffffffff
c00226d3:	5a                   	pop    edx
c00226d4:	5b                   	pop    ebx
c00226d5:	5e                   	pop    esi
c00226d6:	c3                   	ret    
c00226d7:	90                   	nop

c00226d8 <SoundDevice::removeChannel(int)>:
c00226d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226e0:	83 fa 1f             	cmp    edx,0x1f
c00226e3:	77 23                	ja     c0022708 <SoundDevice::removeChannel(int)+0x30>
c00226e5:	8d 14 90             	lea    edx,[eax+edx*4]
c00226e8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226ef:	74 17                	je     c0022708 <SoundDevice::removeChannel(int)+0x30>
c00226f1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226fb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022701:	75 05                	jne    c0022708 <SoundDevice::removeChannel(int)+0x30>
c0022703:	8b 00                	mov    eax,DWORD PTR [eax]
c0022705:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022708:	c3                   	ret    
c0022709:	90                   	nop

c002270a <SoundDevice::floatTo16(float*, short*, int)>:
c002270a:	57                   	push   edi
c002270b:	56                   	push   esi
c002270c:	53                   	push   ebx
c002270d:	31 db                	xor    ebx,ebx
c002270f:	83 ec 10             	sub    esp,0x10
c0022712:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022716:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002271a:	0f 8d d0 00 00 00    	jge    c00227f0 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022720:	83 ec 0c             	sub    esp,0xc
c0022723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022727:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002272a:	e8 a0 62 00 00       	call   c00289cf <__extendsfdf2>
c002272f:	83 c4 10             	add    esp,0x10
c0022732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022736:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002273a:	68 00 00 f0 3f       	push   0x3ff00000
c002273f:	6a 00                	push   0x0
c0022741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022749:	e8 0d 52 00 00       	call   c002795b <__adddf3>
c002274e:	83 c4 10             	add    esp,0x10
c0022751:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022755:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022759:	68 00 00 e0 3f       	push   0x3fe00000
c002275e:	6a 00                	push   0x0
c0022760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022764:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022768:	e8 6b 58 00 00       	call   c0027fd8 <__muldf3>
c002276d:	83 c4 10             	add    esp,0x10
c0022770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022774:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022778:	68 c0 ff df 40       	push   0x40dfffc0
c002277d:	6a 00                	push   0x0
c002277f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022787:	e8 4c 58 00 00       	call   c0027fd8 <__muldf3>
c002278c:	59                   	pop    ecx
c002278d:	5f                   	pop    edi
c002278e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022792:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002279a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002279e:	e8 08 61 00 00       	call   c00288ab <__truncdfsf2>
c00227a3:	5a                   	pop    edx
c00227a4:	89 c7                	mov    edi,eax
c00227a6:	59                   	pop    ecx
c00227a7:	68 00 fe ff 46       	push   0x46fffe00
c00227ac:	50                   	push   eax
c00227ad:	e8 a3 51 00 00       	call   c0027955 <__gesf2>
c00227b2:	83 c4 10             	add    esp,0x10
c00227b5:	85 c0                	test   eax,eax
c00227b7:	78 08                	js     c00227c1 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00227b9:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00227bf:	eb 29                	jmp    c00227ea <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00227c1:	50                   	push   eax
c00227c2:	50                   	push   eax
c00227c3:	6a 00                	push   0x0
c00227c5:	57                   	push   edi
c00227c6:	e8 8e 51 00 00       	call   c0027959 <__lesf2>
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	85 c0                	test   eax,eax
c00227d0:	7f 08                	jg     c00227da <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00227d2:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00227d8:	eb 10                	jmp    c00227ea <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00227da:	83 ec 0c             	sub    esp,0xc
c00227dd:	57                   	push   edi
c00227de:	e8 89 62 00 00       	call   c0028a6c <lrintf>
c00227e3:	83 c4 10             	add    esp,0x10
c00227e6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00227ea:	43                   	inc    ebx
c00227eb:	e9 26 ff ff ff       	jmp    c0022716 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00227f0:	83 c4 10             	add    esp,0x10
c00227f3:	5b                   	pop    ebx
c00227f4:	5e                   	pop    esi
c00227f5:	5f                   	pop    edi
c00227f6:	c3                   	ret    
c00227f7:	90                   	nop

c00227f8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227f8:	57                   	push   edi
c00227f9:	56                   	push   esi
c00227fa:	53                   	push   ebx
c00227fb:	31 db                	xor    ebx,ebx
c00227fd:	83 ec 10             	sub    esp,0x10
c0022800:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022804:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022808:	0f 8d cb 00 00 00    	jge    c00228d9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022815:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022818:	e8 b2 61 00 00       	call   c00289cf <__extendsfdf2>
c002281d:	83 c4 10             	add    esp,0x10
c0022820:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022824:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022828:	68 00 00 f0 3f       	push   0x3ff00000
c002282d:	6a 00                	push   0x0
c002282f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022833:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022837:	e8 1f 51 00 00       	call   c002795b <__adddf3>
c002283c:	83 c4 10             	add    esp,0x10
c002283f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022843:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022847:	68 00 00 e0 3f       	push   0x3fe00000
c002284c:	6a 00                	push   0x0
c002284e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022852:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022856:	e8 7d 57 00 00       	call   c0027fd8 <__muldf3>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022862:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022866:	68 00 00 60 40       	push   0x40600000
c002286b:	6a 00                	push   0x0
c002286d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022875:	e8 5e 57 00 00       	call   c0027fd8 <__muldf3>
c002287a:	59                   	pop    ecx
c002287b:	5f                   	pop    edi
c002287c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022880:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002288c:	e8 1a 60 00 00       	call   c00288ab <__truncdfsf2>
c0022891:	5a                   	pop    edx
c0022892:	89 c7                	mov    edi,eax
c0022894:	59                   	pop    ecx
c0022895:	68 00 00 fe 42       	push   0x42fe0000
c002289a:	50                   	push   eax
c002289b:	e8 b5 50 00 00       	call   c0027955 <__gesf2>
c00228a0:	83 c4 10             	add    esp,0x10
c00228a3:	85 c0                	test   eax,eax
c00228a5:	78 06                	js     c00228ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00228a7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00228ab:	eb 26                	jmp    c00228d3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228ad:	50                   	push   eax
c00228ae:	50                   	push   eax
c00228af:	6a 00                	push   0x0
c00228b1:	57                   	push   edi
c00228b2:	e8 a2 50 00 00       	call   c0027959 <__lesf2>
c00228b7:	83 c4 10             	add    esp,0x10
c00228ba:	85 c0                	test   eax,eax
c00228bc:	7f 06                	jg     c00228c4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00228be:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00228c2:	eb 0f                	jmp    c00228d3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228c4:	83 ec 0c             	sub    esp,0xc
c00228c7:	57                   	push   edi
c00228c8:	e8 9f 61 00 00       	call   c0028a6c <lrintf>
c00228cd:	83 c4 10             	add    esp,0x10
c00228d0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00228d3:	43                   	inc    ebx
c00228d4:	e9 2b ff ff ff       	jmp    c0022804 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00228d9:	83 c4 10             	add    esp,0x10
c00228dc:	5b                   	pop    ebx
c00228dd:	5e                   	pop    esi
c00228de:	5f                   	pop    edi
c00228df:	c3                   	ret    

c00228e0 <SoundDevice::getAudio(int, float*, float*)>:
c00228e0:	55                   	push   ebp
c00228e1:	31 ed                	xor    ebp,ebp
c00228e3:	57                   	push   edi
c00228e4:	56                   	push   esi
c00228e5:	31 f6                	xor    esi,esi
c00228e7:	53                   	push   ebx
c00228e8:	83 ec 20             	sub    esp,0x20
c00228eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228f3:	c1 e0 02             	shl    eax,0x2
c00228f6:	50                   	push   eax
c00228f7:	6a 00                	push   0x0
c00228f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228fd:	e8 4e de fd ff       	call   c0000750 <memset>
c0022902:	83 c4 10             	add    esp,0x10
c0022905:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002290d:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022914:	85 c9                	test   ecx,ecx
c0022916:	74 52                	je     c002296a <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002291c:	99                   	cdq    
c002291d:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022923:	50                   	push   eax
c0022924:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002292a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002292e:	51                   	push   ecx
c002292f:	e8 da f9 ff ff       	call   c002230e <SoundChannel::unbuffer(float*, int, int)>
c0022934:	31 d2                	xor    edx,edx
c0022936:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002293a:	83 c4 10             	add    esp,0x10
c002293d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022941:	7d 1e                	jge    c0022961 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022943:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022947:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002294b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002294e:	89 cf                	mov    edi,ecx
c0022950:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022956:	0f af ca             	imul   ecx,edx
c0022959:	42                   	inc    edx
c002295a:	01 e9                	add    ecx,ebp
c002295c:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002295f:	eb dc                	jmp    c002293d <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022961:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022965:	45                   	inc    ebp
c0022966:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002296a:	46                   	inc    esi
c002296b:	83 fe 20             	cmp    esi,0x20
c002296e:	75 9d                	jne    c002290d <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022974:	83 c4 1c             	add    esp,0x1c
c0022977:	5b                   	pop    ebx
c0022978:	5e                   	pop    esi
c0022979:	5f                   	pop    edi
c002297a:	5d                   	pop    ebp
c002297b:	c3                   	ret    

c002297c <PCI::open(int, int, void*)>:
c002297c:	83 ec 18             	sub    esp,0x18
c002297f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022983:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022987:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002298d:	8b 10                	mov    edx,DWORD PTR [eax]
c002298f:	50                   	push   eax
c0022990:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022993:	31 c0                	xor    eax,eax
c0022995:	83 c4 1c             	add    esp,0x1c
c0022998:	c3                   	ret    
c0022999:	90                   	nop

c002299a <PCI::close(int, int, void*)>:
c002299a:	31 c0                	xor    eax,eax
c002299c:	c3                   	ret    
c002299d:	90                   	nop

c002299e <PCI::PCI()>:
c002299e:	83 ec 0c             	sub    esp,0xc
c00229a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a5:	83 ec 08             	sub    esp,0x8
c00229a8:	68 58 cc 02 c0       	push   0xc002cc58
c00229ad:	50                   	push   eax
c00229ae:	e8 ed 0c ff ff       	call   c00136a0 <Bus::Bus(char const*)>
c00229b3:	83 c4 10             	add    esp,0x10
c00229b6:	ba 44 cd 02 c0       	mov    edx,0xc002cd44
c00229bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bf:	89 10                	mov    DWORD PTR [eax],edx
c00229c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00229cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d3:	a3 84 09 03 c0       	mov    ds:0xc0030984,eax
c00229d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229e2:	0f b6 d0             	movzx  edx,al
c00229e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229fa:	0f b6 d0             	movzx  edx,al
c00229fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a01:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a10:	8d 50 01             	lea    edx,[eax+0x1]
c0022a13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a17:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a1d:	0f b6 d0             	movzx  edx,al
c0022a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a24:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a28:	83 c9 c0             	or     ecx,0xffffffc0
c0022a2b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a2f:	90                   	nop
c0022a30:	83 c4 0c             	add    esp,0xc
c0022a33:	c3                   	ret    

c0022a34 <PCI::readBAR8(unsigned int, int)>:
c0022a34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a3c:	f6 c2 01             	test   dl,0x1
c0022a3f:	74 07                	je     c0022a48 <PCI::readBAR8(unsigned int, int)+0x14>
c0022a41:	83 e2 fc             	and    edx,0xfffffffc
c0022a44:	01 c2                	add    edx,eax
c0022a46:	ec                   	in     al,dx
c0022a47:	c3                   	ret    
c0022a48:	83 e2 f0             	and    edx,0xfffffff0
c0022a4b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <PCI::readBAR16(unsigned int, int)>:
c0022a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a58:	f6 c2 01             	test   dl,0x1
c0022a5b:	74 08                	je     c0022a65 <PCI::readBAR16(unsigned int, int)+0x15>
c0022a5d:	83 e2 fc             	and    edx,0xfffffffc
c0022a60:	01 c2                	add    edx,eax
c0022a62:	66 ed                	in     ax,dx
c0022a64:	c3                   	ret    
c0022a65:	83 e2 f0             	and    edx,0xfffffff0
c0022a68:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022a6c:	c3                   	ret    
c0022a6d:	90                   	nop

c0022a6e <PCI::readBAR32(unsigned int, int)>:
c0022a6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a76:	f6 c2 01             	test   dl,0x1
c0022a79:	74 07                	je     c0022a82 <PCI::readBAR32(unsigned int, int)+0x14>
c0022a7b:	83 e2 fc             	and    edx,0xfffffffc
c0022a7e:	01 c2                	add    edx,eax
c0022a80:	ed                   	in     eax,dx
c0022a81:	c3                   	ret    
c0022a82:	83 e2 f0             	and    edx,0xfffffff0
c0022a85:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022a88:	c3                   	ret    
c0022a89:	90                   	nop

c0022a8a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022a8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a96:	f6 c2 01             	test   dl,0x1
c0022a99:	74 07                	je     c0022aa2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022a9b:	83 e2 fc             	and    edx,0xfffffffc
c0022a9e:	01 ca                	add    edx,ecx
c0022aa0:	ee                   	out    dx,al
c0022aa1:	c3                   	ret    
c0022aa2:	83 e2 f0             	and    edx,0xfffffff0
c0022aa5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022aa8:	c3                   	ret    
c0022aa9:	90                   	nop

c0022aaa <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ab2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ab6:	f6 c2 01             	test   dl,0x1
c0022ab9:	74 08                	je     c0022ac3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022abb:	83 e2 fc             	and    edx,0xfffffffc
c0022abe:	01 ca                	add    edx,ecx
c0022ac0:	66 ef                	out    dx,ax
c0022ac2:	c3                   	ret    
c0022ac3:	83 e2 f0             	and    edx,0xfffffff0
c0022ac6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022aca:	c3                   	ret    
c0022acb:	90                   	nop

c0022acc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022acc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ad4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ad8:	f6 c2 01             	test   dl,0x1
c0022adb:	74 07                	je     c0022ae4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022add:	83 e2 fc             	and    edx,0xfffffffc
c0022ae0:	01 ca                	add    edx,ecx
c0022ae2:	ef                   	out    dx,eax
c0022ae3:	c3                   	ret    
c0022ae4:	83 e2 f0             	and    edx,0xfffffff0
c0022ae7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022aea:	c3                   	ret    
c0022aeb:	90                   	nop

c0022aec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aec:	55                   	push   ebp
c0022aed:	57                   	push   edi
c0022aee:	56                   	push   esi
c0022aef:	53                   	push   ebx
c0022af0:	83 ec 0c             	sub    esp,0xc
c0022af3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022af7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022afb:	89 f0                	mov    eax,esi
c0022afd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022b01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022b05:	3c 07                	cmp    al,0x7
c0022b07:	76 10                	jbe    c0022b19 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022b09:	83 ec 0c             	sub    esp,0xc
c0022b0c:	68 60 cc 02 c0       	push   0xc002cc60
c0022b11:	e8 87 78 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0022b16:	83 c4 10             	add    esp,0x10
c0022b19:	80 fb 0f             	cmp    bl,0xf
c0022b1c:	76 10                	jbe    c0022b2e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022b1e:	83 ec 0c             	sub    esp,0xc
c0022b21:	68 90 cc 02 c0       	push   0xc002cc90
c0022b26:	e8 72 78 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0022b2b:	83 c4 10             	add    esp,0x10
c0022b2e:	8d 04 36             	lea    eax,[esi+esi*1]
c0022b31:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b36:	83 c8 f0             	or     eax,0xfffffff0
c0022b39:	ee                   	out    dx,al
c0022b3a:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022b3f:	89 e8                	mov    eax,ebp
c0022b41:	ee                   	out    dx,al
c0022b42:	83 c4 0c             	add    esp,0xc
c0022b45:	89 d8                	mov    eax,ebx
c0022b47:	66 81 e7 fc 00       	and    di,0xfc
c0022b4c:	5b                   	pop    ebx
c0022b4d:	c1 e0 08             	shl    eax,0x8
c0022b50:	5e                   	pop    esi
c0022b51:	09 f8                	or     eax,edi
c0022b53:	5f                   	pop    edi
c0022b54:	66 0d 00 c0          	or     ax,0xc000
c0022b58:	5d                   	pop    ebp
c0022b59:	c3                   	ret    

c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b5a:	57                   	push   edi
c0022b5b:	56                   	push   esi
c0022b5c:	53                   	push   ebx
c0022b5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b65:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022b6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022b6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022b77:	83 ff 01             	cmp    edi,0x1
c0022b7a:	75 3e                	jne    c0022bba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022b7c:	89 de                	mov    esi,ebx
c0022b7e:	0f b6 c0             	movzx  eax,al
c0022b81:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022b87:	c1 e0 10             	shl    eax,0x10
c0022b8a:	0f b6 c9             	movzx  ecx,cl
c0022b8d:	09 f0                	or     eax,esi
c0022b8f:	c1 e1 08             	shl    ecx,0x8
c0022b92:	0f b6 d2             	movzx  edx,dl
c0022b95:	09 c8                	or     eax,ecx
c0022b97:	c1 e2 0b             	shl    edx,0xb
c0022b9a:	09 d0                	or     eax,edx
c0022b9c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ba1:	0d 00 00 00 80       	or     eax,0x80000000
c0022ba6:	ef                   	out    dx,eax
c0022ba7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bac:	ed                   	in     eax,dx
c0022bad:	83 e3 02             	and    ebx,0x2
c0022bb0:	0f b6 cb             	movzx  ecx,bl
c0022bb3:	c1 e1 03             	shl    ecx,0x3
c0022bb6:	d3 e8                	shr    eax,cl
c0022bb8:	eb 43                	jmp    c0022bfd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022bba:	83 ff 02             	cmp    edi,0x2
c0022bbd:	75 2c                	jne    c0022beb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022bbf:	83 ec 0c             	sub    esp,0xc
c0022bc2:	0f b6 c9             	movzx  ecx,cl
c0022bc5:	0f b6 d2             	movzx  edx,dl
c0022bc8:	0f b6 fb             	movzx  edi,bl
c0022bcb:	0f b6 c0             	movzx  eax,al
c0022bce:	57                   	push   edi
c0022bcf:	51                   	push   ecx
c0022bd0:	52                   	push   edx
c0022bd1:	50                   	push   eax
c0022bd2:	56                   	push   esi
c0022bd3:	e8 14 ff ff ff       	call   c0022aec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bd8:	89 c2                	mov    edx,eax
c0022bda:	ed                   	in     eax,dx
c0022bdb:	83 e3 02             	and    ebx,0x2
c0022bde:	83 c4 20             	add    esp,0x20
c0022be1:	0f b6 cb             	movzx  ecx,bl
c0022be4:	c1 e1 03             	shl    ecx,0x3
c0022be7:	d3 e8                	shr    eax,cl
c0022be9:	eb 12                	jmp    c0022bfd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022beb:	83 ec 0c             	sub    esp,0xc
c0022bee:	68 c0 cc 02 c0       	push   0xc002ccc0
c0022bf3:	e8 a5 77 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0022bf8:	83 c4 10             	add    esp,0x10
c0022bfb:	31 c0                	xor    eax,eax
c0022bfd:	5b                   	pop    ebx
c0022bfe:	5e                   	pop    esi
c0022bff:	5f                   	pop    edi
c0022c00:	c3                   	ret    
c0022c01:	90                   	nop

c0022c02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022c02:	83 ec 18             	sub    esp,0x18
c0022c05:	6a 00                	push   0x0
c0022c07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c0c:	50                   	push   eax
c0022c0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c12:	50                   	push   eax
c0022c13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c18:	50                   	push   eax
c0022c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c1d:	e8 38 ff ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c22:	83 c4 2c             	add    esp,0x2c
c0022c25:	c3                   	ret    

c0022c26 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022c26:	83 ec 18             	sub    esp,0x18
c0022c29:	6a 0e                	push   0xe
c0022c2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c30:	50                   	push   eax
c0022c31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c36:	50                   	push   eax
c0022c37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c3c:	50                   	push   eax
c0022c3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c41:	e8 14 ff ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c46:	83 c4 2c             	add    esp,0x2c
c0022c49:	0f b6 c0             	movzx  eax,al
c0022c4c:	c3                   	ret    
c0022c4d:	90                   	nop

c0022c4e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022c4e:	55                   	push   ebp
c0022c4f:	57                   	push   edi
c0022c50:	56                   	push   esi
c0022c51:	53                   	push   ebx
c0022c52:	83 ec 18             	sub    esp,0x18
c0022c55:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022c5a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022c5f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022c64:	6a 0a                	push   0xa
c0022c66:	56                   	push   esi
c0022c67:	55                   	push   ebp
c0022c68:	57                   	push   edi
c0022c69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c6d:	e8 e8 fe ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c72:	83 c4 14             	add    esp,0x14
c0022c75:	89 c3                	mov    ebx,eax
c0022c77:	6a 0a                	push   0xa
c0022c79:	0f b6 db             	movzx  ebx,bl
c0022c7c:	56                   	push   esi
c0022c7d:	55                   	push   ebp
c0022c7e:	57                   	push   edi
c0022c7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c83:	e8 d2 fe ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c88:	83 c4 2c             	add    esp,0x2c
c0022c8b:	25 00 ff 00 00       	and    eax,0xff00
c0022c90:	09 d8                	or     eax,ebx
c0022c92:	5b                   	pop    ebx
c0022c93:	5e                   	pop    esi
c0022c94:	5f                   	pop    edi
c0022c95:	5d                   	pop    ebp
c0022c96:	c3                   	ret    
c0022c97:	90                   	nop

c0022c98 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022c98:	83 ec 18             	sub    esp,0x18
c0022c9b:	6a 08                	push   0x8
c0022c9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ca2:	50                   	push   eax
c0022ca3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ca8:	50                   	push   eax
c0022ca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cae:	50                   	push   eax
c0022caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cb3:	e8 a2 fe ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cb8:	83 c4 2c             	add    esp,0x2c
c0022cbb:	0f b6 c4             	movzx  eax,ah
c0022cbe:	c3                   	ret    
c0022cbf:	90                   	nop

c0022cc0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022cc0:	83 ec 18             	sub    esp,0x18
c0022cc3:	6a 08                	push   0x8
c0022cc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cca:	50                   	push   eax
c0022ccb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd0:	50                   	push   eax
c0022cd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd6:	50                   	push   eax
c0022cd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cdb:	e8 7a fe ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ce0:	83 c4 2c             	add    esp,0x2c
c0022ce3:	c3                   	ret    

c0022ce4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ce4:	83 ec 18             	sub    esp,0x18
c0022ce7:	6a 3c                	push   0x3c
c0022ce9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cee:	50                   	push   eax
c0022cef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cf4:	50                   	push   eax
c0022cf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cfa:	50                   	push   eax
c0022cfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cff:	e8 56 fe ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d04:	83 c4 2c             	add    esp,0x2c
c0022d07:	c3                   	ret    

c0022d08 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022d08:	83 ec 18             	sub    esp,0x18
c0022d0b:	6a 18                	push   0x18
c0022d0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d12:	50                   	push   eax
c0022d13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d18:	50                   	push   eax
c0022d19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d1e:	50                   	push   eax
c0022d1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d23:	e8 32 fe ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d28:	83 c4 2c             	add    esp,0x2c
c0022d2b:	0f b6 c4             	movzx  eax,ah
c0022d2e:	c3                   	ret    
c0022d2f:	90                   	nop

c0022d30 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022d30:	55                   	push   ebp
c0022d31:	57                   	push   edi
c0022d32:	56                   	push   esi
c0022d33:	53                   	push   ebx
c0022d34:	83 ec 28             	sub    esp,0x28
c0022d37:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022d3b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022d40:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022d45:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022d4a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022d51:	8d 43 12             	lea    eax,[ebx+0x12]
c0022d54:	83 c3 10             	add    ebx,0x10
c0022d57:	0f b6 c0             	movzx  eax,al
c0022d5a:	0f b6 db             	movzx  ebx,bl
c0022d5d:	50                   	push   eax
c0022d5e:	51                   	push   ecx
c0022d5f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022d63:	57                   	push   edi
c0022d64:	55                   	push   ebp
c0022d65:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d69:	e8 ec fd ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d6e:	83 c4 14             	add    esp,0x14
c0022d71:	89 c6                	mov    esi,eax
c0022d73:	53                   	push   ebx
c0022d74:	c1 e6 10             	shl    esi,0x10
c0022d77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d7b:	51                   	push   ecx
c0022d7c:	57                   	push   edi
c0022d7d:	55                   	push   ebp
c0022d7e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d82:	e8 d3 fd ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d87:	83 c4 3c             	add    esp,0x3c
c0022d8a:	0f b7 c0             	movzx  eax,ax
c0022d8d:	5b                   	pop    ebx
c0022d8e:	09 f0                	or     eax,esi
c0022d90:	5e                   	pop    esi
c0022d91:	5f                   	pop    edi
c0022d92:	5d                   	pop    ebp
c0022d93:	c3                   	ret    

c0022d94 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022d94:	55                   	push   ebp
c0022d95:	57                   	push   edi
c0022d96:	56                   	push   esi
c0022d97:	53                   	push   ebx
c0022d98:	83 ec 0c             	sub    esp,0xc
c0022d9b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022d9f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022da3:	89 f5                	mov    ebp,esi
c0022da5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022dab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022daf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022db3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022db7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022dbb:	83 f9 01             	cmp    ecx,0x1
c0022dbe:	75 5d                	jne    c0022e1d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022dc0:	0f b6 c8             	movzx  ecx,al
c0022dc3:	0f b6 d2             	movzx  edx,dl
c0022dc6:	c1 e1 10             	shl    ecx,0x10
c0022dc9:	c1 e2 0b             	shl    edx,0xb
c0022dcc:	89 f0                	mov    eax,esi
c0022dce:	25 fc 00 00 00       	and    eax,0xfc
c0022dd3:	09 c1                	or     ecx,eax
c0022dd5:	89 e8                	mov    eax,ebp
c0022dd7:	0f b6 c0             	movzx  eax,al
c0022dda:	c1 e0 08             	shl    eax,0x8
c0022ddd:	09 c1                	or     ecx,eax
c0022ddf:	09 d1                	or     ecx,edx
c0022de1:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022de6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022dec:	89 c8                	mov    eax,ecx
c0022dee:	ef                   	out    dx,eax
c0022def:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022df4:	ed                   	in     eax,dx
c0022df5:	0f b7 db             	movzx  ebx,bx
c0022df8:	83 e6 02             	and    esi,0x2
c0022dfb:	74 0a                	je     c0022e07 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022dfd:	0f b7 d0             	movzx  edx,ax
c0022e00:	c1 e3 10             	shl    ebx,0x10
c0022e03:	09 d3                	or     ebx,edx
c0022e05:	eb 05                	jmp    c0022e0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022e07:	66 31 c0             	xor    ax,ax
c0022e0a:	09 c3                	or     ebx,eax
c0022e0c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e11:	89 c8                	mov    eax,ecx
c0022e13:	ef                   	out    dx,eax
c0022e14:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e19:	89 d8                	mov    eax,ebx
c0022e1b:	eb 41                	jmp    c0022e5e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e1d:	83 f9 02             	cmp    ecx,0x2
c0022e20:	75 45                	jne    c0022e67 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022e22:	83 ec 0c             	sub    esp,0xc
c0022e25:	0f b6 d2             	movzx  edx,dl
c0022e28:	89 f1                	mov    ecx,esi
c0022e2a:	0f b6 c0             	movzx  eax,al
c0022e2d:	0f b6 f1             	movzx  esi,cl
c0022e30:	89 e9                	mov    ecx,ebp
c0022e32:	56                   	push   esi
c0022e33:	0f b6 c9             	movzx  ecx,cl
c0022e36:	51                   	push   ecx
c0022e37:	52                   	push   edx
c0022e38:	50                   	push   eax
c0022e39:	57                   	push   edi
c0022e3a:	e8 ad fc ff ff       	call   c0022aec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3f:	89 c2                	mov    edx,eax
c0022e41:	ed                   	in     eax,dx
c0022e42:	83 c4 20             	add    esp,0x20
c0022e45:	0f b7 db             	movzx  ebx,bx
c0022e48:	f6 c2 02             	test   dl,0x2
c0022e4b:	74 0c                	je     c0022e59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022e4d:	0f b7 c8             	movzx  ecx,ax
c0022e50:	89 d8                	mov    eax,ebx
c0022e52:	c1 e0 10             	shl    eax,0x10
c0022e55:	09 c8                	or     eax,ecx
c0022e57:	eb 05                	jmp    c0022e5e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e59:	66 31 c0             	xor    ax,ax
c0022e5c:	09 d8                	or     eax,ebx
c0022e5e:	ef                   	out    dx,eax
c0022e5f:	83 c4 0c             	add    esp,0xc
c0022e62:	5b                   	pop    ebx
c0022e63:	5e                   	pop    esi
c0022e64:	5f                   	pop    edi
c0022e65:	5d                   	pop    ebp
c0022e66:	c3                   	ret    
c0022e67:	c7 44 24 20 c0 cc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ccc0
c0022e6f:	83 c4 0c             	add    esp,0xc
c0022e72:	5b                   	pop    ebx
c0022e73:	5e                   	pop    esi
c0022e74:	5f                   	pop    edi
c0022e75:	5d                   	pop    ebp
c0022e76:	e9 22 75 ff ff       	jmp    c001a39d <Krnl::panic(char const*)>
c0022e7b:	90                   	nop

c0022e7c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022e7c:	55                   	push   ebp
c0022e7d:	57                   	push   edi
c0022e7e:	56                   	push   esi
c0022e7f:	53                   	push   ebx
c0022e80:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022e86:	80 3d 90 09 03 c0 00 	cmp    BYTE PTR ds:0xc0030990,0x0
c0022e8d:	0f 85 84 00 00 00    	jne    c0022f17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022e93:	83 ec 0c             	sub    esp,0xc
c0022e96:	68 14 01 00 00       	push   0x114
c0022e9b:	e8 07 cb fe ff       	call   c000f9a7 <malloc>
c0022ea0:	83 c4 0c             	add    esp,0xc
c0022ea3:	89 c3                	mov    ebx,eax
c0022ea5:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c0022eab:	68 c6 cc 02 c0       	push   0xc002ccc6
c0022eb0:	50                   	push   eax
c0022eb1:	e8 a8 00 ff ff       	call   c0012f5e <File::File(char const*, Process*)>
c0022eb6:	5a                   	pop    edx
c0022eb7:	59                   	pop    ecx
c0022eb8:	6a 01                	push   0x1
c0022eba:	53                   	push   ebx
c0022ebb:	e8 02 01 ff ff       	call   c0012fc2 <File::open(FileOpenMode)>
c0022ec0:	83 c4 0c             	add    esp,0xc
c0022ec3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022ec7:	50                   	push   eax
c0022ec8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022ecc:	50                   	push   eax
c0022ecd:	53                   	push   ebx
c0022ece:	e8 9b 03 ff ff       	call   c001326e <File::stat(unsigned long long*, bool*)>
c0022ed3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ed7:	40                   	inc    eax
c0022ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0022edb:	e8 c7 ca fe ff       	call   c000f9a7 <malloc>
c0022ee0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022ee4:	a3 8c 09 03 c0       	mov    ds:0xc003098c,eax
c0022ee9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022eed:	5e                   	pop    esi
c0022eee:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022ef0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022ef4:	51                   	push   ecx
c0022ef5:	50                   	push   eax
c0022ef6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022efa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022efe:	53                   	push   ebx
c0022eff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022f02:	83 c4 14             	add    esp,0x14
c0022f05:	53                   	push   ebx
c0022f06:	e8 15 01 ff ff       	call   c0013020 <File::close()>
c0022f0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f0f:	83 c4 10             	add    esp,0x10
c0022f12:	a3 88 09 03 c0       	mov    ds:0xc0030988,eax
c0022f17:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c0022f1c:	8b 15 8c 09 03 c0    	mov    edx,DWORD PTR ds:0xc003098c
c0022f22:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f25:	31 ff                	xor    edi,edi
c0022f27:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022f2f:	31 f6                	xor    esi,esi
c0022f31:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022f36:	31 db                	xor    ebx,ebx
c0022f38:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022f40:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022f45:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022f4c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022f50:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022f57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022f5b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022f5e:	0f 8e 6b 01 00 00    	jle    c00230cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022f64:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022f67:	d4 40                	aam    0x40
c0022f69:	d5 39                	aad    0x39
c0022f6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022f6f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022f73:	d4 40                	aam    0x40
c0022f75:	d5 39                	aad    0x39
c0022f77:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022f7b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022f7f:	d4 40                	aam    0x40
c0022f81:	d5 39                	aad    0x39
c0022f83:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022f87:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022f8b:	d4 40                	aam    0x40
c0022f8d:	d5 39                	aad    0x39
c0022f8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022f93:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022f97:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022f9b:	3c 56                	cmp    al,0x56
c0022f9d:	74 45                	je     c0022fe4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022f9f:	d4 40                	aam    0x40
c0022fa1:	d5 39                	aad    0x39
c0022fa3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022fa6:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022faa:	0f b6 c9             	movzx  ecx,cl
c0022fad:	c1 e1 04             	shl    ecx,0x4
c0022fb0:	d4 40                	aam    0x40
c0022fb2:	d5 39                	aad    0x39
c0022fb4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022fb7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022fbb:	0f b6 db             	movzx  ebx,bl
c0022fbe:	09 cb                	or     ebx,ecx
c0022fc0:	c1 e3 04             	shl    ebx,0x4
c0022fc3:	d4 40                	aam    0x40
c0022fc5:	d5 39                	aad    0x39
c0022fc7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022fca:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022fce:	0f b6 c9             	movzx  ecx,cl
c0022fd1:	09 cb                	or     ebx,ecx
c0022fd3:	c1 e3 04             	shl    ebx,0x4
c0022fd6:	89 d9                	mov    ecx,ebx
c0022fd8:	d4 40                	aam    0x40
c0022fda:	d5 39                	aad    0x39
c0022fdc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022fdf:	0f b6 db             	movzx  ebx,bl
c0022fe2:	09 cb                	or     ebx,ecx
c0022fe4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022fe8:	80 f9 44             	cmp    cl,0x44
c0022feb:	74 47                	je     c0023034 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022fed:	88 c8                	mov    al,cl
c0022fef:	d4 40                	aam    0x40
c0022ff1:	d5 39                	aad    0x39
c0022ff3:	83 e8 30             	sub    eax,0x30
c0022ff6:	0f b6 e8             	movzx  ebp,al
c0022ff9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022ffd:	c1 e5 04             	shl    ebp,0x4
c0023000:	d4 40                	aam    0x40
c0023002:	d5 39                	aad    0x39
c0023004:	83 e8 30             	sub    eax,0x30
c0023007:	0f b6 f0             	movzx  esi,al
c002300a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c002300e:	09 ee                	or     esi,ebp
c0023010:	c1 e6 04             	shl    esi,0x4
c0023013:	d4 40                	aam    0x40
c0023015:	d5 39                	aad    0x39
c0023017:	83 e8 30             	sub    eax,0x30
c002301a:	0f b6 e8             	movzx  ebp,al
c002301d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023021:	09 ee                	or     esi,ebp
c0023023:	c1 e6 04             	shl    esi,0x4
c0023026:	89 f5                	mov    ebp,esi
c0023028:	d4 40                	aam    0x40
c002302a:	d5 39                	aad    0x39
c002302c:	83 e8 30             	sub    eax,0x30
c002302f:	0f b6 f0             	movzx  esi,al
c0023032:	09 ee                	or     esi,ebp
c0023034:	83 c7 10             	add    edi,0x10
c0023037:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002303b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002303e:	3c 0a                	cmp    al,0xa
c0023040:	74 09                	je     c002304b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0023042:	45                   	inc    ebp
c0023043:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023046:	75 16                	jne    c002305e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0023048:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002304b:	3c 0a                	cmp    al,0xa
c002304d:	0f 94 c0             	sete   al
c0023050:	0f b6 c0             	movzx  eax,al
c0023053:	01 c7                	add    edi,eax
c0023055:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002305a:	75 0c                	jne    c0023068 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c002305c:	eb 15                	jmp    c0023073 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c002305e:	47                   	inc    edi
c002305f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023062:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023066:	eb d3                	jmp    c002303b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0023068:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002306d:	0f 85 e8 fe ff ff    	jne    c0022f5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023073:	80 f9 44             	cmp    cl,0x44
c0023076:	74 0b                	je     c0023083 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0023078:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002307d:	0f 85 d8 fe ff ff    	jne    c0022f5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023083:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023087:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002308b:	c1 e1 04             	shl    ecx,0x4
c002308e:	83 e8 30             	sub    eax,0x30
c0023091:	09 c8                	or     eax,ecx
c0023093:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023097:	0f 85 be fe ff ff    	jne    c0022f5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002309d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00230a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230a5:	c1 e1 04             	shl    ecx,0x4
c00230a8:	83 e8 30             	sub    eax,0x30
c00230ab:	09 c8                	or     eax,ecx
c00230ad:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00230b1:	0f 85 a4 fe ff ff    	jne    c0022f5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230b7:	50                   	push   eax
c00230b8:	50                   	push   eax
c00230b9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00230bd:	50                   	push   eax
c00230be:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00230c5:	e8 42 d7 fd ff       	call   c000080c <strcpy>
c00230ca:	83 c4 10             	add    esp,0x10
c00230cd:	eb 15                	jmp    c00230e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00230cf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00230d6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00230e1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00230e4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00230eb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00230f1:	5b                   	pop    ebx
c00230f2:	5e                   	pop    esi
c00230f3:	5f                   	pop    edi
c00230f4:	5d                   	pop    ebp
c00230f5:	c3                   	ret    

c00230f6 <PCI::checkBus(unsigned char)>:
c00230f6:	56                   	push   esi
c00230f7:	53                   	push   ebx
c00230f8:	31 db                	xor    ebx,ebx
c00230fa:	51                   	push   ecx
c00230fb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023100:	52                   	push   edx
c0023101:	53                   	push   ebx
c0023102:	43                   	inc    ebx
c0023103:	56                   	push   esi
c0023104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023108:	e8 37 03 00 00       	call   c0023444 <PCI::checkDevice(unsigned char, unsigned char)>
c002310d:	83 c4 10             	add    esp,0x10
c0023110:	83 fb 20             	cmp    ebx,0x20
c0023113:	75 eb                	jne    c0023100 <PCI::checkBus(unsigned char)+0xa>
c0023115:	58                   	pop    eax
c0023116:	5b                   	pop    ebx
c0023117:	5e                   	pop    esi
c0023118:	c3                   	ret    
c0023119:	90                   	nop

c002311a <PCI::foundDevice(PCIDeviceInfo)>:
c002311a:	55                   	push   ebp
c002311b:	57                   	push   edi
c002311c:	56                   	push   esi
c002311d:	53                   	push   ebx
c002311e:	83 ec 1c             	sub    esp,0x1c
c0023121:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023125:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002312b:	0f 84 52 01 00 00    	je     c0023283 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023131:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023135:	66 81 f9 06 04       	cmp    cx,0x406
c002313a:	75 2c                	jne    c0023168 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002313c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023141:	50                   	push   eax
c0023142:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023147:	50                   	push   eax
c0023148:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002314d:	50                   	push   eax
c002314e:	56                   	push   esi
c002314f:	e8 b4 fb ff ff       	call   c0022d08 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023154:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023158:	0f b6 c0             	movzx  eax,al
c002315b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002315f:	83 c4 2c             	add    esp,0x2c
c0023162:	5b                   	pop    ebx
c0023163:	5e                   	pop    esi
c0023164:	5f                   	pop    edi
c0023165:	5d                   	pop    ebp
c0023166:	eb 8e                	jmp    c00230f6 <PCI::checkBus(unsigned char)>
c0023168:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002316c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023172:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023176:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002317a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002317e:	88 d3                	mov    bl,dl
c0023180:	85 c0                	test   eax,eax
c0023182:	74 33                	je     c00231b7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023184:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023187:	85 d2                	test   edx,edx
c0023189:	74 28                	je     c00231b3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002318b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023191:	31 ef                	xor    edi,ebp
c0023193:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023199:	75 18                	jne    c00231b3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002319b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002319f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00231a5:	75 0c                	jne    c00231b3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00231a7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00231ad:	0f 84 d0 00 00 00    	je     c0023283 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00231b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00231b5:	eb c9                	jmp    c0023180 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00231b7:	66 81 f9 01 06       	cmp    cx,0x601
c00231bc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00231c0:	75 19                	jne    c00231db <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00231c2:	83 ec 0c             	sub    esp,0xc
c00231c5:	68 64 01 00 00       	push   0x164
c00231ca:	e8 d8 c7 fe ff       	call   c000f9a7 <malloc>
c00231cf:	89 c5                	mov    ebp,eax
c00231d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00231d4:	e8 85 0e 00 00       	call   c002405e <SATABus::SATABus()>
c00231d9:	eb 1e                	jmp    c00231f9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00231db:	66 81 f9 01 01       	cmp    cx,0x101
c00231e0:	75 60                	jne    c0023242 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00231e2:	83 ec 0c             	sub    esp,0xc
c00231e5:	68 70 02 00 00       	push   0x270
c00231ea:	e8 b8 c7 fe ff       	call   c000f9a7 <malloc>
c00231ef:	89 c5                	mov    ebp,eax
c00231f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00231f4:	e8 0f 03 00 00       	call   c0023508 <IDE::IDE()>
c00231f9:	58                   	pop    eax
c00231fa:	5a                   	pop    edx
c00231fb:	55                   	push   ebp
c00231fc:	56                   	push   esi
c00231fd:	e8 36 0c ff ff       	call   c0013e38 <Device::addChild(Device*)>
c0023202:	83 ec 1c             	sub    esp,0x1c
c0023205:	b9 09 00 00 00       	mov    ecx,0x9
c002320a:	fc                   	cld    
c002320b:	89 e7                	mov    edi,esp
c002320d:	89 de                	mov    esi,ebx
c002320f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023211:	55                   	push   ebp
c0023212:	e8 33 0b ff ff       	call   c0013d4a <Device::preOpenPCI(PCIDeviceInfo)>
c0023217:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002321a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002321e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023226:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002322e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023236:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023239:	83 c4 4c             	add    esp,0x4c
c002323c:	5b                   	pop    ebx
c002323d:	5e                   	pop    esi
c002323e:	5f                   	pop    edi
c002323f:	5d                   	pop    ebp
c0023240:	ff e0                	jmp    eax
c0023242:	83 ec 0c             	sub    esp,0xc
c0023245:	68 58 01 00 00       	push   0x158
c002324a:	e8 58 c7 fe ff       	call   c000f9a7 <malloc>
c002324f:	89 c5                	mov    ebp,eax
c0023251:	58                   	pop    eax
c0023252:	5a                   	pop    edx
c0023253:	68 df cc 02 c0       	push   0xc002ccdf
c0023258:	55                   	push   ebp
c0023259:	e8 e4 0e ff ff       	call   c0014142 <DriverlessDevice::DriverlessDevice(char const*)>
c002325e:	59                   	pop    ecx
c002325f:	5f                   	pop    edi
c0023260:	55                   	push   ebp
c0023261:	56                   	push   esi
c0023262:	e8 d1 0b ff ff       	call   c0013e38 <Device::addChild(Device*)>
c0023267:	b9 09 00 00 00       	mov    ecx,0x9
c002326c:	fc                   	cld    
c002326d:	89 df                	mov    edi,ebx
c002326f:	89 de                	mov    esi,ebx
c0023271:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023273:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023277:	83 c4 2c             	add    esp,0x2c
c002327a:	5b                   	pop    ebx
c002327b:	5e                   	pop    esi
c002327c:	5f                   	pop    edi
c002327d:	5d                   	pop    ebp
c002327e:	e9 c7 0a ff ff       	jmp    c0013d4a <Device::preOpenPCI(PCIDeviceInfo)>
c0023283:	83 c4 1c             	add    esp,0x1c
c0023286:	5b                   	pop    ebx
c0023287:	5e                   	pop    esi
c0023288:	5f                   	pop    edi
c0023289:	5d                   	pop    ebp
c002328a:	c3                   	ret    
c002328b:	90                   	nop

c002328c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002328c:	55                   	push   ebp
c002328d:	57                   	push   edi
c002328e:	56                   	push   esi
c002328f:	53                   	push   ebx
c0023290:	83 ec 68             	sub    esp,0x68
c0023293:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0023297:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002329e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232a2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00232a9:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00232ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00232b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00232b9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00232be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00232c2:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00232c7:	6a 0c                	push   0xc
c00232c9:	57                   	push   edi
c00232ca:	53                   	push   ebx
c00232cb:	56                   	push   esi
c00232cc:	55                   	push   ebp
c00232cd:	e8 88 f8 ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232d2:	83 c4 20             	add    esp,0x20
c00232d5:	57                   	push   edi
c00232d6:	53                   	push   ebx
c00232d7:	56                   	push   esi
c00232d8:	55                   	push   ebp
c00232d9:	e8 70 f9 ff ff       	call   c0022c4e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00232de:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00232e3:	57                   	push   edi
c00232e4:	53                   	push   ebx
c00232e5:	56                   	push   esi
c00232e6:	55                   	push   ebp
c00232e7:	e8 f8 f9 ff ff       	call   c0022ce4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00232ec:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00232f0:	83 c4 14             	add    esp,0x14
c00232f3:	6a 3c                	push   0x3c
c00232f5:	57                   	push   edi
c00232f6:	53                   	push   ebx
c00232f7:	56                   	push   esi
c00232f8:	55                   	push   ebp
c00232f9:	e8 5c f8 ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232fe:	0f b6 c4             	movzx  eax,ah
c0023301:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023305:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023309:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002330d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0023312:	83 c4 20             	add    esp,0x20
c0023315:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002331b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023322:	74 7c                	je     c00233a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023324:	31 c0                	xor    eax,eax
c0023326:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c002332c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023332:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023338:	7e 66                	jle    c00233a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002333a:	8d 14 c2             	lea    edx,[edx+eax*8]
c002333d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023344:	39 cb                	cmp    ebx,ecx
c0023346:	75 55                	jne    c002339d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023348:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002334f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023353:	75 48                	jne    c002339d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023355:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023359:	83 ec 0c             	sub    esp,0xc
c002335c:	68 f9 cc 02 c0       	push   0xc002ccf9
c0023361:	e8 99 f6 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0023366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002336a:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0023370:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023374:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002337a:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023382:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023386:	52                   	push   edx
c0023387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002338b:	53                   	push   ebx
c002338c:	68 1e cd 02 c0       	push   0xc002cd1e
c0023391:	e8 69 f6 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0023396:	83 c4 20             	add    esp,0x20
c0023399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002339d:	40                   	inc    eax
c002339e:	eb 86                	jmp    c0023326 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00233a0:	31 d2                	xor    edx,edx
c00233a2:	83 ec 0c             	sub    esp,0xc
c00233a5:	57                   	push   edi
c00233a6:	53                   	push   ebx
c00233a7:	56                   	push   esi
c00233a8:	52                   	push   edx
c00233a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00233ad:	55                   	push   ebp
c00233ae:	e8 7d f9 ff ff       	call   c0022d30 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00233b7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00233bb:	42                   	inc    edx
c00233bc:	83 c4 20             	add    esp,0x20
c00233bf:	83 fa 06             	cmp    edx,0x6
c00233c2:	75 de                	jne    c00233a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00233c4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00233c9:	83 ec 0c             	sub    esp,0xc
c00233cc:	86 e0                	xchg   al,ah
c00233ce:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00233d3:	6a 02                	push   0x2
c00233d5:	57                   	push   edi
c00233d6:	53                   	push   ebx
c00233d7:	56                   	push   esi
c00233d8:	55                   	push   ebp
c00233d9:	e8 7c f7 ff ff       	call   c0022b5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233de:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00233e3:	83 c4 20             	add    esp,0x20
c00233e6:	57                   	push   edi
c00233e7:	53                   	push   ebx
c00233e8:	56                   	push   esi
c00233e9:	55                   	push   ebp
c00233ea:	e8 a9 f8 ff ff       	call   c0022c98 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00233ef:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00233f3:	57                   	push   edi
c00233f4:	53                   	push   ebx
c00233f5:	56                   	push   esi
c00233f6:	55                   	push   ebp
c00233f7:	e8 06 f8 ff ff       	call   c0022c02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00233fc:	b9 09 00 00 00       	mov    ecx,0x9
c0023401:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023406:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002340a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002340e:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023412:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023416:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002341a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002341e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023422:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023426:	83 ec 0c             	sub    esp,0xc
c0023429:	fc                   	cld    
c002342a:	89 e7                	mov    edi,esp
c002342c:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023430:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023432:	55                   	push   ebp
c0023433:	e8 e2 fc ff ff       	call   c002311a <PCI::foundDevice(PCIDeviceInfo)>
c0023438:	81 c4 8c 00 00 00    	add    esp,0x8c
c002343e:	5b                   	pop    ebx
c002343f:	5e                   	pop    esi
c0023440:	5f                   	pop    edi
c0023441:	5d                   	pop    ebp
c0023442:	c3                   	ret    
c0023443:	90                   	nop

c0023444 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023444:	55                   	push   ebp
c0023445:	57                   	push   edi
c0023446:	56                   	push   esi
c0023447:	53                   	push   ebx
c0023448:	83 ec 0c             	sub    esp,0xc
c002344b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002344f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023454:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023459:	6a 00                	push   0x0
c002345b:	56                   	push   esi
c002345c:	57                   	push   edi
c002345d:	55                   	push   ebp
c002345e:	e8 9f f7 ff ff       	call   c0022c02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023463:	6a 00                	push   0x0
c0023465:	56                   	push   esi
c0023466:	57                   	push   edi
c0023467:	55                   	push   ebp
c0023468:	e8 1f fe ff ff       	call   c002328c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002346d:	83 c4 20             	add    esp,0x20
c0023470:	6a 00                	push   0x0
c0023472:	56                   	push   esi
c0023473:	57                   	push   edi
c0023474:	55                   	push   ebp
c0023475:	e8 ac f7 ff ff       	call   c0022c26 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002347a:	83 c4 10             	add    esp,0x10
c002347d:	84 c0                	test   al,al
c002347f:	79 27                	jns    c00234a8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023481:	bb 01 00 00 00       	mov    ebx,0x1
c0023486:	53                   	push   ebx
c0023487:	56                   	push   esi
c0023488:	57                   	push   edi
c0023489:	55                   	push   ebp
c002348a:	e8 73 f7 ff ff       	call   c0022c02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002348f:	83 c4 10             	add    esp,0x10
c0023492:	66 40                	inc    ax
c0023494:	74 0c                	je     c00234a2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023496:	53                   	push   ebx
c0023497:	56                   	push   esi
c0023498:	57                   	push   edi
c0023499:	55                   	push   ebp
c002349a:	e8 ed fd ff ff       	call   c002328c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002349f:	83 c4 10             	add    esp,0x10
c00234a2:	43                   	inc    ebx
c00234a3:	83 fb 08             	cmp    ebx,0x8
c00234a6:	75 de                	jne    c0023486 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00234a8:	83 c4 0c             	add    esp,0xc
c00234ab:	5b                   	pop    ebx
c00234ac:	5e                   	pop    esi
c00234ad:	5f                   	pop    edi
c00234ae:	5d                   	pop    ebp
c00234af:	c3                   	ret    

c00234b0 <PCI::detect()>:
c00234b0:	56                   	push   esi
c00234b1:	53                   	push   ebx
c00234b2:	53                   	push   ebx
c00234b3:	31 db                	xor    ebx,ebx
c00234b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00234b9:	6a 00                	push   0x0
c00234bb:	6a 00                	push   0x0
c00234bd:	6a 00                	push   0x0
c00234bf:	56                   	push   esi
c00234c0:	e8 61 f7 ff ff       	call   c0022c26 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00234c5:	83 c4 10             	add    esp,0x10
c00234c8:	a8 80                	test   al,0x80
c00234ca:	75 21                	jne    c00234ed <PCI::detect()+0x3d>
c00234cc:	51                   	push   ecx
c00234cd:	51                   	push   ecx
c00234ce:	6a 00                	push   0x0
c00234d0:	56                   	push   esi
c00234d1:	e8 20 fc ff ff       	call   c00230f6 <PCI::checkBus(unsigned char)>
c00234d6:	83 c4 10             	add    esp,0x10
c00234d9:	eb 24                	jmp    c00234ff <PCI::detect()+0x4f>
c00234db:	52                   	push   edx
c00234dc:	52                   	push   edx
c00234dd:	53                   	push   ebx
c00234de:	43                   	inc    ebx
c00234df:	56                   	push   esi
c00234e0:	e8 11 fc ff ff       	call   c00230f6 <PCI::checkBus(unsigned char)>
c00234e5:	83 c4 10             	add    esp,0x10
c00234e8:	83 fb 08             	cmp    ebx,0x8
c00234eb:	74 12                	je     c00234ff <PCI::detect()+0x4f>
c00234ed:	53                   	push   ebx
c00234ee:	6a 00                	push   0x0
c00234f0:	6a 00                	push   0x0
c00234f2:	56                   	push   esi
c00234f3:	e8 0a f7 ff ff       	call   c0022c02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00234f8:	83 c4 10             	add    esp,0x10
c00234fb:	66 40                	inc    ax
c00234fd:	74 dc                	je     c00234db <PCI::detect()+0x2b>
c00234ff:	58                   	pop    eax
c0023500:	5b                   	pop    ebx
c0023501:	5e                   	pop    esi
c0023502:	c3                   	ret    
c0023503:	90                   	nop

c0023504 <IDE::close(int, int, void*)>:
c0023504:	83 c8 ff             	or     eax,0xffffffff
c0023507:	c3                   	ret    

c0023508 <IDE::IDE()>:
c0023508:	83 ec 0c             	sub    esp,0xc
c002350b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350f:	83 ec 08             	sub    esp,0x8
c0023512:	68 68 cd 02 c0       	push   0xc002cd68
c0023517:	50                   	push   eax
c0023518:	e8 c9 0c ff ff       	call   c00141e6 <HardDiskController::HardDiskController(char const*)>
c002351d:	83 c4 10             	add    esp,0x10
c0023520:	ba f8 cd 02 c0       	mov    edx,0xc002cdf8
c0023525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023529:	89 10                	mov    DWORD PTR [eax],edx
c002352b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023536:	90                   	nop
c0023537:	83 c4 0c             	add    esp,0xc
c002353a:	c3                   	ret    
c002353b:	90                   	nop

c002353c <IDE::prepareInterrupt(unsigned char)>:
c002353c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023541:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023545:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002354d:	c3                   	ret    

c002354e <selectDrive(unsigned char, unsigned char)>:
c002354e:	c3                   	ret    
c002354f:	90                   	nop

c0023550 <IDE::getBase(unsigned char)>:
c0023550:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023559:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023561:	c3                   	ret    

c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023562:	55                   	push   ebp
c0023563:	57                   	push   edi
c0023564:	56                   	push   esi
c0023565:	53                   	push   ebx
c0023566:	83 ec 1c             	sub    esp,0x1c
c0023569:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002356d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023571:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023574:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023578:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002357c:	80 f9 03             	cmp    cl,0x3
c002357f:	77 51                	ja     c00235d2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023585:	0f b6 f2             	movzx  esi,dl
c0023588:	0f b6 db             	movzx  ebx,bl
c002358b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002358e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023592:	83 ca 80             	or     edx,0xffffff80
c0023595:	0f b6 d2             	movzx  edx,dl
c0023598:	52                   	push   edx
c0023599:	6a 0c                	push   0xc
c002359b:	56                   	push   esi
c002359c:	57                   	push   edi
c002359d:	e8 c0 ff ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00235a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00235ab:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00235af:	ee                   	out    dx,al
c00235b0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00235b5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00235b9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00235bd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235c1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235c9:	83 c4 2c             	add    esp,0x2c
c00235cc:	5b                   	pop    ebx
c00235cd:	5e                   	pop    esi
c00235ce:	5f                   	pop    edi
c00235cf:	5d                   	pop    ebp
c00235d0:	eb 90                	jmp    c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235d2:	80 fb 07             	cmp    bl,0x7
c00235d5:	77 12                	ja     c00235e9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00235d7:	0f b6 d2             	movzx  edx,dl
c00235da:	0f b6 db             	movzx  ebx,bl
c00235dd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00235e5:	89 da                	mov    edx,ebx
c00235e7:	eb 2f                	jmp    c0023618 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00235e9:	80 fb 0d             	cmp    bl,0xd
c00235ec:	77 13                	ja     c0023601 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00235ee:	0f b6 d2             	movzx  edx,dl
c00235f1:	0f b6 db             	movzx  ebx,bl
c00235f4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00235fb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00235ff:	eb 17                	jmp    c0023618 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023601:	80 fb 15             	cmp    bl,0x15
c0023604:	77 13                	ja     c0023619 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023606:	0f b6 d2             	movzx  edx,dl
c0023609:	0f b6 db             	movzx  ebx,bl
c002360c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023614:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023618:	ee                   	out    dx,al
c0023619:	83 c4 1c             	add    esp,0x1c
c002361c:	5b                   	pop    ebx
c002361d:	5e                   	pop    esi
c002361e:	5f                   	pop    edi
c002361f:	5d                   	pop    ebp
c0023620:	c3                   	ret    
c0023621:	90                   	nop

c0023622 <IDE::read(unsigned char, unsigned char)>:
c0023622:	55                   	push   ebp
c0023623:	57                   	push   edi
c0023624:	56                   	push   esi
c0023625:	53                   	push   ebx
c0023626:	83 ec 1c             	sub    esp,0x1c
c0023629:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002362d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023631:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023634:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023638:	3c 03                	cmp    al,0x3
c002363a:	77 43                	ja     c002367f <IDE::read(unsigned char, unsigned char)+0x5d>
c002363c:	0f b6 f2             	movzx  esi,dl
c002363f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023642:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023646:	83 c8 80             	or     eax,0xffffff80
c0023649:	0f b6 c0             	movzx  eax,al
c002364c:	50                   	push   eax
c002364d:	6a 0c                	push   0xc
c002364f:	56                   	push   esi
c0023650:	57                   	push   edi
c0023651:	e8 0c ff ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023656:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002365b:	0f b6 c3             	movzx  eax,bl
c002365e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023662:	ec                   	in     al,dx
c0023663:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023667:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002366c:	52                   	push   edx
c002366d:	6a 0c                	push   0xc
c002366f:	56                   	push   esi
c0023670:	57                   	push   edi
c0023671:	e8 ec fe ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023676:	83 c4 20             	add    esp,0x20
c0023679:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002367d:	eb 49                	jmp    c00236c8 <IDE::read(unsigned char, unsigned char)+0xa6>
c002367f:	80 fb 07             	cmp    bl,0x7
c0023682:	77 12                	ja     c0023696 <IDE::read(unsigned char, unsigned char)+0x74>
c0023684:	0f b6 d2             	movzx  edx,dl
c0023687:	0f b6 c3             	movzx  eax,bl
c002368a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023692:	89 c2                	mov    edx,eax
c0023694:	eb 31                	jmp    c00236c7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023696:	80 fb 0d             	cmp    bl,0xd
c0023699:	77 13                	ja     c00236ae <IDE::read(unsigned char, unsigned char)+0x8c>
c002369b:	0f b6 d2             	movzx  edx,dl
c002369e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00236a5:	0f b6 d3             	movzx  edx,bl
c00236a8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00236ac:	eb 19                	jmp    c00236c7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00236ae:	31 c0                	xor    eax,eax
c00236b0:	80 fb 15             	cmp    bl,0x15
c00236b3:	77 13                	ja     c00236c8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00236b5:	0f b6 d2             	movzx  edx,dl
c00236b8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00236c0:	0f b6 d3             	movzx  edx,bl
c00236c3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00236c7:	ec                   	in     al,dx
c00236c8:	83 c4 1c             	add    esp,0x1c
c00236cb:	5b                   	pop    ebx
c00236cc:	5e                   	pop    esi
c00236cd:	5f                   	pop    edi
c00236ce:	5d                   	pop    ebp
c00236cf:	c3                   	ret    

c00236d0 <IDE::waitInterrupt(unsigned char)>:
c00236d0:	55                   	push   ebp
c00236d1:	57                   	push   edi
c00236d2:	56                   	push   esi
c00236d3:	53                   	push   ebx
c00236d4:	31 db                	xor    ebx,ebx
c00236d6:	83 ec 0c             	sub    esp,0xc
c00236d9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00236dd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00236e2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00236ea:	89 e8                	mov    eax,ebp
c00236ec:	84 c0                	test   al,al
c00236ee:	75 34                	jne    c0023724 <IDE::waitInterrupt(unsigned char)+0x54>
c00236f0:	52                   	push   edx
c00236f1:	6a 0c                	push   0xc
c00236f3:	56                   	push   esi
c00236f4:	57                   	push   edi
c00236f5:	e8 28 ff ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c00236fa:	83 c4 10             	add    esp,0x10
c00236fd:	a8 01                	test   al,0x1
c00236ff:	75 2b                	jne    c002372c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023701:	f6 c3 04             	test   bl,0x4
c0023704:	75 16                	jne    c002371c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023706:	83 fb 32             	cmp    ebx,0x32
c0023709:	7e 11                	jle    c002371c <IDE::waitInterrupt(unsigned char)+0x4c>
c002370b:	50                   	push   eax
c002370c:	50                   	push   eax
c002370d:	6a 00                	push   0x0
c002370f:	68 80 96 98 00       	push   0x989680
c0023714:	e8 f0 aa ff ff       	call   c001e209 <nanoSleep(unsigned long long)>
c0023719:	83 c4 10             	add    esp,0x10
c002371c:	83 fb 3c             	cmp    ebx,0x3c
c002371f:	74 0b                	je     c002372c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023721:	43                   	inc    ebx
c0023722:	eb be                	jmp    c00236e2 <IDE::waitInterrupt(unsigned char)+0x12>
c0023724:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002372c:	83 c4 0c             	add    esp,0xc
c002372f:	89 e8                	mov    eax,ebp
c0023731:	5b                   	pop    ebx
c0023732:	5e                   	pop    esi
c0023733:	5f                   	pop    edi
c0023734:	5d                   	pop    ebp
c0023735:	c3                   	ret    

c0023736 <ideChannel0IRQHandler(regs*, void*)>:
c0023736:	83 ec 10             	sub    esp,0x10
c0023739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002373d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023744:	6a 07                	push   0x7
c0023746:	6a 00                	push   0x0
c0023748:	50                   	push   eax
c0023749:	e8 d4 fe ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c002374e:	83 c4 1c             	add    esp,0x1c
c0023751:	c3                   	ret    

c0023752 <ideChannel1IRQHandler(regs*, void*)>:
c0023752:	83 ec 10             	sub    esp,0x10
c0023755:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023759:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023760:	6a 07                	push   0x7
c0023762:	6a 01                	push   0x1
c0023764:	50                   	push   eax
c0023765:	e8 b8 fe ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c002376a:	83 c4 1c             	add    esp,0x1c
c002376d:	c3                   	ret    

c002376e <IDE::enableIRQs(unsigned char, bool)>:
c002376e:	57                   	push   edi
c002376f:	56                   	push   esi
c0023770:	be 04 00 00 00       	mov    esi,0x4
c0023775:	53                   	push   ebx
c0023776:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002377b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002377f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023784:	0f 94 c0             	sete   al
c0023787:	d1 e0                	shl    eax,1
c0023789:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023790:	0f b6 c0             	movzx  eax,al
c0023793:	50                   	push   eax
c0023794:	6a 0c                	push   0xc
c0023796:	57                   	push   edi
c0023797:	53                   	push   ebx
c0023798:	e8 c5 fd ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002379d:	83 c4 10             	add    esp,0x10
c00237a0:	50                   	push   eax
c00237a1:	6a 0c                	push   0xc
c00237a3:	57                   	push   edi
c00237a4:	53                   	push   ebx
c00237a5:	e8 78 fe ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c00237aa:	83 c4 10             	add    esp,0x10
c00237ad:	4e                   	dec    esi
c00237ae:	75 f0                	jne    c00237a0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00237b0:	5b                   	pop    ebx
c00237b1:	5e                   	pop    esi
c00237b2:	5f                   	pop    edi
c00237b3:	c3                   	ret    

c00237b4 <IDE::open(int, int, void*)>:
c00237b4:	55                   	push   ebp
c00237b5:	57                   	push   edi
c00237b6:	56                   	push   esi
c00237b7:	53                   	push   ebx
c00237b8:	83 ec 1c             	sub    esp,0x1c
c00237bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00237bf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00237c8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00237d1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00237d8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00237df:	0f 85 b0 02 00 00    	jne    c0023a95 <IDE::open(int, int, void*)+0x2e1>
c00237e5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00237eb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00237ef:	83 e0 7f             	and    eax,0x7f
c00237f2:	3c 05                	cmp    al,0x5
c00237f4:	74 04                	je     c00237fa <IDE::open(int, int, void*)+0x46>
c00237f6:	3c 0f                	cmp    al,0xf
c00237f8:	75 32                	jne    c002382c <IDE::open(int, int, void*)+0x78>
c00237fa:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023800:	83 e0 fc             	and    eax,0xfffffffc
c0023803:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002380a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023810:	83 e0 fc             	and    eax,0xfffffffc
c0023813:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002381a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023820:	83 e0 fc             	and    eax,0xfffffffc
c0023823:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002382a:	eb 14                	jmp    c0023840 <IDE::open(int, int, void*)+0x8c>
c002382c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023836:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023840:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023847:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002384e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023852:	89 c6                	mov    esi,eax
c0023854:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023859:	c1 e6 10             	shl    esi,0x10
c002385c:	89 e8                	mov    eax,ebp
c002385e:	89 fa                	mov    edx,edi
c0023860:	c1 e0 0b             	shl    eax,0xb
c0023863:	09 f0                	or     eax,esi
c0023865:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002386c:	c1 e6 08             	shl    esi,0x8
c002386f:	09 c6                	or     esi,eax
c0023871:	89 f0                	mov    eax,esi
c0023873:	0d 08 00 00 80       	or     eax,0x80000008
c0023878:	ef                   	out    dx,eax
c0023879:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002387e:	89 ca                	mov    edx,ecx
c0023880:	ed                   	in     eax,dx
c0023881:	c1 e8 10             	shr    eax,0x10
c0023884:	3d ff ff 00 00       	cmp    eax,0xffff
c0023889:	0f 84 f5 00 00 00    	je     c0023984 <IDE::open(int, int, void*)+0x1d0>
c002388f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023895:	89 fa                	mov    edx,edi
c0023897:	89 f0                	mov    eax,esi
c0023899:	ef                   	out    dx,eax
c002389a:	b0 fe                	mov    al,0xfe
c002389c:	89 ca                	mov    edx,ecx
c002389e:	ee                   	out    dx,al
c002389f:	89 f0                	mov    eax,esi
c00238a1:	89 fa                	mov    edx,edi
c00238a3:	ef                   	out    dx,eax
c00238a4:	89 ca                	mov    edx,ecx
c00238a6:	ed                   	in     eax,dx
c00238a7:	3c fe                	cmp    al,0xfe
c00238a9:	0f 85 a9 00 00 00    	jne    c0023958 <IDE::open(int, int, void*)+0x1a4>
c00238af:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c00238b5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00238bc:	74 33                	je     c00238f1 <IDE::open(int, int, void*)+0x13d>
c00238be:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00238c4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00238c8:	40                   	inc    eax
c00238c9:	83 ec 0c             	sub    esp,0xc
c00238cc:	0f b6 c0             	movzx  eax,al
c00238cf:	50                   	push   eax
c00238d0:	55                   	push   ebp
c00238d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00238d5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00238db:	51                   	push   ecx
c00238dc:	e8 e5 46 ff ff       	call   c0017fc6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00238e1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00238e6:	83 c4 1c             	add    esp,0x1c
c00238e9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00238ef:	eb 0a                	jmp    c00238fb <IDE::open(int, int, void*)+0x147>
c00238f1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00238fb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023902:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023909:	c1 e1 10             	shl    ecx,0x10
c002390c:	c1 e0 08             	shl    eax,0x8
c002390f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023914:	09 c1                	or     ecx,eax
c0023916:	89 fa                	mov    edx,edi
c0023918:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002391f:	c1 e0 0b             	shl    eax,0xb
c0023922:	09 c1                	or     ecx,eax
c0023924:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002392a:	89 c8                	mov    eax,ecx
c002392c:	ef                   	out    dx,eax
c002392d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023932:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023938:	89 f2                	mov    edx,esi
c002393a:	ee                   	out    dx,al
c002393b:	89 c8                	mov    eax,ecx
c002393d:	89 fa                	mov    edx,edi
c002393f:	ef                   	out    dx,eax
c0023940:	89 f2                	mov    edx,esi
c0023942:	ed                   	in     eax,dx
c0023943:	0f b6 c0             	movzx  eax,al
c0023946:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002394c:	74 46                	je     c0023994 <IDE::open(int, int, void*)+0x1e0>
c002394e:	83 ec 0c             	sub    esp,0xc
c0023951:	68 80 cd 02 c0       	push   0xc002cd80
c0023956:	eb 34                	jmp    c002398c <IDE::open(int, int, void*)+0x1d8>
c0023958:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023961:	75 17                	jne    c002397a <IDE::open(int, int, void*)+0x1c6>
c0023963:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023968:	74 07                	je     c0023971 <IDE::open(int, int, void*)+0x1bd>
c002396a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002396f:	75 09                	jne    c002397a <IDE::open(int, int, void*)+0x1c6>
c0023971:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023978:	eb 1a                	jmp    c0023994 <IDE::open(int, int, void*)+0x1e0>
c002397a:	83 ec 0c             	sub    esp,0xc
c002397d:	68 88 cd 02 c0       	push   0xc002cd88
c0023982:	eb 08                	jmp    c002398c <IDE::open(int, int, void*)+0x1d8>
c0023984:	83 ec 0c             	sub    esp,0xc
c0023987:	68 b9 cd 02 c0       	push   0xc002cdb9
c002398c:	e8 0c 6a ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0023991:	83 c4 10             	add    esp,0x10
c0023994:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002399b:	79 1a                	jns    c00239b7 <IDE::open(int, int, void*)+0x203>
c002399d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00239a3:	83 e0 fc             	and    eax,0xfffffffc
c00239a6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00239ad:	83 c0 08             	add    eax,0x8
c00239b0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00239b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00239bd:	89 c2                	mov    edx,eax
c00239bf:	83 e2 0f             	and    edx,0xf
c00239c2:	66 83 fa 08          	cmp    dx,0x8
c00239c6:	75 0a                	jne    c00239d2 <IDE::open(int, int, void*)+0x21e>
c00239c8:	83 e8 02             	sub    eax,0x2
c00239cb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00239d2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00239d8:	89 c2                	mov    edx,eax
c00239da:	83 e2 0f             	and    edx,0xf
c00239dd:	66 83 fa 08          	cmp    dx,0x8
c00239e1:	75 0a                	jne    c00239ed <IDE::open(int, int, void*)+0x239>
c00239e3:	83 e8 02             	sub    eax,0x2
c00239e6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00239ed:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00239f4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00239fb:	89 d0                	mov    eax,edx
c00239fd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a00:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a04:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023a08:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023a0b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a10:	0f b6 c9             	movzx  ecx,cl
c0023a13:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023a1a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a1d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a21:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023a25:	8d 50 02             	lea    edx,[eax+0x2]
c0023a28:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a2d:	0f b6 d2             	movzx  edx,dl
c0023a30:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023a36:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a39:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a3d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023a41:	8d 48 03             	lea    ecx,[eax+0x3]
c0023a44:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a49:	0f b6 c9             	movzx  ecx,cl
c0023a4c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023a52:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a55:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a59:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023a5d:	8d 50 04             	lea    edx,[eax+0x4]
c0023a60:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023a66:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a6b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023a72:	66 85 f6             	test   si,si
c0023a75:	74 5b                	je     c0023ad2 <IDE::open(int, int, void*)+0x31e>
c0023a77:	0f b6 d2             	movzx  edx,dl
c0023a7a:	83 c0 05             	add    eax,0x5
c0023a7d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a80:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a84:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023a88:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023a8e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a93:	eb 3d                	jmp    c0023ad2 <IDE::open(int, int, void*)+0x31e>
c0023a95:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023a9b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023aa2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023aa9:	66 05 06 02          	add    ax,0x206
c0023aad:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023ab4:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023abb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023ac2:	66 05 06 02          	add    ax,0x206
c0023ac6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023acd:	e9 e5 fe ff ff       	jmp    c00239b7 <IDE::open(int, int, void*)+0x203>
c0023ad2:	50                   	push   eax
c0023ad3:	50                   	push   eax
c0023ad4:	6a 00                	push   0x0
c0023ad6:	53                   	push   ebx
c0023ad7:	e8 60 fa ff ff       	call   c002353c <IDE::prepareInterrupt(unsigned char)>
c0023adc:	5a                   	pop    edx
c0023add:	59                   	pop    ecx
c0023ade:	6a 01                	push   0x1
c0023ae0:	53                   	push   ebx
c0023ae1:	e8 56 fa ff ff       	call   c002353c <IDE::prepareInterrupt(unsigned char)>
c0023ae6:	83 c4 0c             	add    esp,0xc
c0023ae9:	6a 00                	push   0x0
c0023aeb:	6a 00                	push   0x0
c0023aed:	53                   	push   ebx
c0023aee:	e8 7b fc ff ff       	call   c002376e <IDE::enableIRQs(unsigned char, bool)>
c0023af3:	83 c4 0c             	add    esp,0xc
c0023af6:	6a 00                	push   0x0
c0023af8:	6a 01                	push   0x1
c0023afa:	53                   	push   ebx
c0023afb:	e8 6e fc ff ff       	call   c002376e <IDE::enableIRQs(unsigned char, bool)>
c0023b00:	83 c4 10             	add    esp,0x10
c0023b03:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023b0a:	74 34                	je     c0023b40 <IDE::open(int, int, void*)+0x38c>
c0023b0c:	83 ec 0c             	sub    esp,0xc
c0023b0f:	53                   	push   ebx
c0023b10:	6a 01                	push   0x1
c0023b12:	68 36 37 02 c0       	push   0xc0023736
c0023b17:	6a 0e                	push   0xe
c0023b19:	53                   	push   ebx
c0023b1a:	e8 91 02 ff ff       	call   c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b1f:	83 c4 14             	add    esp,0x14
c0023b22:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b28:	53                   	push   ebx
c0023b29:	6a 01                	push   0x1
c0023b2b:	68 52 37 02 c0       	push   0xc0023752
c0023b30:	6a 0f                	push   0xf
c0023b32:	53                   	push   ebx
c0023b33:	e8 78 02 ff ff       	call   c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b38:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023b3e:	eb 38                	jmp    c0023b78 <IDE::open(int, int, void*)+0x3c4>
c0023b40:	83 ec 0c             	sub    esp,0xc
c0023b43:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023b4d:	53                   	push   ebx
c0023b4e:	6a 00                	push   0x0
c0023b50:	68 36 37 02 c0       	push   0xc0023736
c0023b55:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023b5b:	53                   	push   ebx
c0023b5c:	e8 4f 02 ff ff       	call   c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b61:	83 c4 14             	add    esp,0x14
c0023b64:	53                   	push   ebx
c0023b65:	6a 00                	push   0x0
c0023b67:	68 52 37 02 c0       	push   0xc0023752
c0023b6c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023b72:	53                   	push   ebx
c0023b73:	e8 38 02 ff ff       	call   c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b7a:	83 c4 20             	add    esp,0x20
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	53                   	push   ebx
c0023b81:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023b84:	83 c4 0c             	add    esp,0xc
c0023b87:	6a 07                	push   0x7
c0023b89:	6a 00                	push   0x0
c0023b8b:	53                   	push   ebx
c0023b8c:	e8 91 fa ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023b91:	83 c4 0c             	add    esp,0xc
c0023b94:	6a 07                	push   0x7
c0023b96:	6a 01                	push   0x1
c0023b98:	53                   	push   ebx
c0023b99:	e8 84 fa ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023b9e:	83 c4 0c             	add    esp,0xc
c0023ba1:	6a 01                	push   0x1
c0023ba3:	6a 00                	push   0x0
c0023ba5:	53                   	push   ebx
c0023ba6:	e8 c3 fb ff ff       	call   c002376e <IDE::enableIRQs(unsigned char, bool)>
c0023bab:	83 c4 0c             	add    esp,0xc
c0023bae:	6a 01                	push   0x1
c0023bb0:	6a 01                	push   0x1
c0023bb2:	53                   	push   ebx
c0023bb3:	e8 b6 fb ff ff       	call   c002376e <IDE::enableIRQs(unsigned char, bool)>
c0023bb8:	83 c4 2c             	add    esp,0x2c
c0023bbb:	31 c0                	xor    eax,eax
c0023bbd:	5b                   	pop    ebx
c0023bbe:	5e                   	pop    esi
c0023bbf:	5f                   	pop    edi
c0023bc0:	5d                   	pop    ebp
c0023bc1:	c3                   	ret    

c0023bc2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023bc2:	55                   	push   ebp
c0023bc3:	57                   	push   edi
c0023bc4:	56                   	push   esi
c0023bc5:	53                   	push   ebx
c0023bc6:	83 ec 1c             	sub    esp,0x1c
c0023bc9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023bcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023bd1:	8d 50 f8             	lea    edx,[eax-0x8]
c0023bd4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023bd8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023bdc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023be0:	80 fa 03             	cmp    dl,0x3
c0023be3:	77 5d                	ja     c0023c42 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023be5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023be9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023bed:	0f b6 db             	movzx  ebx,bl
c0023bf0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023bf3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023bf7:	83 ca 80             	or     edx,0xffffff80
c0023bfa:	0f b6 d2             	movzx  edx,dl
c0023bfd:	52                   	push   edx
c0023bfe:	6a 0c                	push   0xc
c0023c00:	53                   	push   ebx
c0023c01:	56                   	push   esi
c0023c02:	e8 5b f9 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c07:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023c0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023c14:	0f b6 c0             	movzx  eax,al
c0023c17:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023c1b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c1d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023c22:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023c26:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023c2a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023c2e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023c36:	83 c4 2c             	add    esp,0x2c
c0023c39:	5b                   	pop    ebx
c0023c3a:	5e                   	pop    esi
c0023c3b:	5f                   	pop    edi
c0023c3c:	5d                   	pop    ebp
c0023c3d:	e9 20 f9 ff ff       	jmp    c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c42:	3c 07                	cmp    al,0x7
c0023c44:	77 10                	ja     c0023c56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023c46:	0f b6 db             	movzx  ebx,bl
c0023c49:	0f b6 d0             	movzx  edx,al
c0023c4c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023c54:	eb 2d                	jmp    c0023c83 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c56:	3c 0d                	cmp    al,0xd
c0023c58:	77 13                	ja     c0023c6d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023c5a:	0f b6 db             	movzx  ebx,bl
c0023c5d:	0f b6 c0             	movzx  eax,al
c0023c60:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023c67:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023c6b:	eb 16                	jmp    c0023c83 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c6d:	3c 15                	cmp    al,0x15
c0023c6f:	77 14                	ja     c0023c85 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023c71:	0f b6 db             	movzx  ebx,bl
c0023c74:	0f b6 c0             	movzx  eax,al
c0023c77:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023c7f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023c83:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c85:	83 c4 1c             	add    esp,0x1c
c0023c88:	5b                   	pop    ebx
c0023c89:	5e                   	pop    esi
c0023c8a:	5f                   	pop    edi
c0023c8b:	5d                   	pop    ebp
c0023c8c:	c3                   	ret    
c0023c8d:	90                   	nop

c0023c8e <IDE::detect()>:
c0023c8e:	55                   	push   ebp
c0023c8f:	57                   	push   edi
c0023c90:	56                   	push   esi
c0023c91:	53                   	push   ebx
c0023c92:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023c98:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023c9f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023ca6:	0f 85 9d 02 00 00    	jne    c0023f49 <IDE::detect()+0x2bb>
c0023cac:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023cb3:	31 f6                	xor    esi,esi
c0023cb5:	31 ed                	xor    ebp,ebp
c0023cb7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023cbf:	89 e8                	mov    eax,ebp
c0023cc1:	c1 e0 06             	shl    eax,0x6
c0023cc4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023ccc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023cd0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023cd4:	c1 e0 04             	shl    eax,0x4
c0023cd7:	83 c8 a0             	or     eax,0xffffffa0
c0023cda:	0f b6 c0             	movzx  eax,al
c0023cdd:	50                   	push   eax
c0023cde:	6a 06                	push   0x6
c0023ce0:	56                   	push   esi
c0023ce1:	53                   	push   ebx
c0023ce2:	e8 7b f8 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ce7:	83 c4 0c             	add    esp,0xc
c0023cea:	6a 0c                	push   0xc
c0023cec:	56                   	push   esi
c0023ced:	53                   	push   ebx
c0023cee:	e8 2f f9 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023cf3:	83 c4 0c             	add    esp,0xc
c0023cf6:	6a 0c                	push   0xc
c0023cf8:	56                   	push   esi
c0023cf9:	53                   	push   ebx
c0023cfa:	e8 23 f9 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023cff:	83 c4 0c             	add    esp,0xc
c0023d02:	6a 0c                	push   0xc
c0023d04:	56                   	push   esi
c0023d05:	53                   	push   ebx
c0023d06:	e8 17 f9 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d0b:	83 c4 0c             	add    esp,0xc
c0023d0e:	6a 0c                	push   0xc
c0023d10:	56                   	push   esi
c0023d11:	53                   	push   ebx
c0023d12:	e8 0b f9 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d17:	68 ec 00 00 00       	push   0xec
c0023d1c:	6a 07                	push   0x7
c0023d1e:	56                   	push   esi
c0023d1f:	53                   	push   ebx
c0023d20:	e8 3d f8 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d25:	83 c4 1c             	add    esp,0x1c
c0023d28:	6a 0c                	push   0xc
c0023d2a:	56                   	push   esi
c0023d2b:	53                   	push   ebx
c0023d2c:	e8 f1 f8 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d31:	83 c4 0c             	add    esp,0xc
c0023d34:	6a 0c                	push   0xc
c0023d36:	56                   	push   esi
c0023d37:	53                   	push   ebx
c0023d38:	e8 e5 f8 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d3d:	83 c4 0c             	add    esp,0xc
c0023d40:	6a 0c                	push   0xc
c0023d42:	56                   	push   esi
c0023d43:	53                   	push   ebx
c0023d44:	e8 d9 f8 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d49:	83 c4 0c             	add    esp,0xc
c0023d4c:	6a 0c                	push   0xc
c0023d4e:	56                   	push   esi
c0023d4f:	53                   	push   ebx
c0023d50:	e8 cd f8 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d55:	83 c4 0c             	add    esp,0xc
c0023d58:	6a 0c                	push   0xc
c0023d5a:	56                   	push   esi
c0023d5b:	53                   	push   ebx
c0023d5c:	e8 c1 f8 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d61:	83 c4 10             	add    esp,0x10
c0023d64:	84 c0                	test   al,al
c0023d66:	0f 84 63 01 00 00    	je     c0023ecf <IDE::detect()+0x241>
c0023d6c:	31 ff                	xor    edi,edi
c0023d6e:	50                   	push   eax
c0023d6f:	6a 0c                	push   0xc
c0023d71:	56                   	push   esi
c0023d72:	53                   	push   ebx
c0023d73:	e8 aa f8 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023d78:	83 c4 10             	add    esp,0x10
c0023d7b:	a8 01                	test   al,0x1
c0023d7d:	0f 85 6d 01 00 00    	jne    c0023ef0 <IDE::detect()+0x262>
c0023d83:	84 c0                	test   al,al
c0023d85:	78 04                	js     c0023d8b <IDE::detect()+0xfd>
c0023d87:	a8 08                	test   al,0x8
c0023d89:	75 27                	jne    c0023db2 <IDE::detect()+0x124>
c0023d8b:	47                   	inc    edi
c0023d8c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023d92:	7e da                	jle    c0023d6e <IDE::detect()+0xe0>
c0023d94:	50                   	push   eax
c0023d95:	50                   	push   eax
c0023d96:	6a 00                	push   0x0
c0023d98:	68 40 4b 4c 00       	push   0x4c4b40
c0023d9d:	e8 67 a4 ff ff       	call   c001e209 <nanoSleep(unsigned long long)>
c0023da2:	83 c4 10             	add    esp,0x10
c0023da5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023dab:	75 c1                	jne    c0023d6e <IDE::detect()+0xe0>
c0023dad:	e9 3e 01 00 00       	jmp    c0023ef0 <IDE::detect()+0x262>
c0023db2:	31 c9                	xor    ecx,ecx
c0023db4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023db8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023dbc:	83 ec 0c             	sub    esp,0xc
c0023dbf:	68 80 00 00 00       	push   0x80
c0023dc4:	57                   	push   edi
c0023dc5:	6a 00                	push   0x0
c0023dc7:	56                   	push   esi
c0023dc8:	53                   	push   ebx
c0023dc9:	e8 f4 fd ff ff       	call   c0023bc2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023dce:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023dd3:	89 e8                	mov    eax,ebp
c0023dd5:	89 d1                	mov    ecx,edx
c0023dd7:	c1 e0 06             	shl    eax,0x6
c0023dda:	01 d8                	add    eax,ebx
c0023ddc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023de3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023dea:	89 f2                	mov    edx,esi
c0023dec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023df2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023df6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023dfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e00:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023e07:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023e0f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023e16:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023e1e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023e24:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023e2b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023e31:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023e35:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023e39:	83 c4 20             	add    esp,0x20
c0023e3c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023e3f:	83 c0 02             	add    eax,0x2
c0023e42:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023e48:	83 c7 02             	add    edi,0x2
c0023e4b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023e4e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023e54:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023e58:	75 e2                	jne    c0023e3c <IDE::detect()+0x1ae>
c0023e5a:	89 e8                	mov    eax,ebp
c0023e5c:	c1 e0 06             	shl    eax,0x6
c0023e5f:	01 d8                	add    eax,ebx
c0023e61:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023e67:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023e6e:	66 c1 ea 09          	shr    dx,0x9
c0023e72:	83 e2 01             	and    edx,0x1
c0023e75:	84 c9                	test   cl,cl
c0023e77:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023e7d:	75 22                	jne    c0023ea1 <IDE::detect()+0x213>
c0023e7f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023e86:	74 46                	je     c0023ece <IDE::detect()+0x240>
c0023e88:	83 ec 0c             	sub    esp,0xc
c0023e8b:	68 7c 01 00 00       	push   0x17c
c0023e90:	e8 12 bb fe ff       	call   c000f9a7 <malloc>
c0023e95:	89 c7                	mov    edi,eax
c0023e97:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e9a:	e8 15 05 00 00       	call   c00243b4 <ATA::ATA()>
c0023e9f:	eb 17                	jmp    c0023eb8 <IDE::detect()+0x22a>
c0023ea1:	83 ec 0c             	sub    esp,0xc
c0023ea4:	68 80 01 00 00       	push   0x180
c0023ea9:	e8 f9 ba fe ff       	call   c000f9a7 <malloc>
c0023eae:	89 c7                	mov    edi,eax
c0023eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eb3:	e8 88 0b 00 00       	call   c0024a40 <ATAPI::ATAPI()>
c0023eb8:	5a                   	pop    edx
c0023eb9:	59                   	pop    ecx
c0023eba:	57                   	push   edi
c0023ebb:	53                   	push   ebx
c0023ebc:	e8 77 ff fe ff       	call   c0013e38 <Device::addChild(Device*)>
c0023ec1:	8b 07                	mov    eax,DWORD PTR [edi]
c0023ec3:	53                   	push   ebx
c0023ec4:	55                   	push   ebp
c0023ec5:	6a 00                	push   0x0
c0023ec7:	57                   	push   edi
c0023ec8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ecb:	83 c4 20             	add    esp,0x20
c0023ece:	45                   	inc    ebp
c0023ecf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023ed4:	74 0d                	je     c0023ee3 <IDE::detect()+0x255>
c0023ed6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023ede:	e9 dc fd ff ff       	jmp    c0023cbf <IDE::detect()+0x31>
c0023ee3:	4e                   	dec    esi
c0023ee4:	74 63                	je     c0023f49 <IDE::detect()+0x2bb>
c0023ee6:	be 01 00 00 00       	mov    esi,0x1
c0023eeb:	e9 c7 fd ff ff       	jmp    c0023cb7 <IDE::detect()+0x29>
c0023ef0:	50                   	push   eax
c0023ef1:	6a 04                	push   0x4
c0023ef3:	56                   	push   esi
c0023ef4:	53                   	push   ebx
c0023ef5:	e8 28 f7 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023efa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023efe:	83 c4 0c             	add    esp,0xc
c0023f01:	6a 05                	push   0x5
c0023f03:	56                   	push   esi
c0023f04:	53                   	push   ebx
c0023f05:	e8 18 f7 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023f0a:	83 c4 10             	add    esp,0x10
c0023f0d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023f11:	80 fa 14             	cmp    dl,0x14
c0023f14:	75 04                	jne    c0023f1a <IDE::detect()+0x28c>
c0023f16:	3c eb                	cmp    al,0xeb
c0023f18:	eb 07                	jmp    c0023f21 <IDE::detect()+0x293>
c0023f1a:	3c 96                	cmp    al,0x96
c0023f1c:	75 b1                	jne    c0023ecf <IDE::detect()+0x241>
c0023f1e:	80 fa 69             	cmp    dl,0x69
c0023f21:	75 ac                	jne    c0023ecf <IDE::detect()+0x241>
c0023f23:	68 a1 00 00 00       	push   0xa1
c0023f28:	6a 07                	push   0x7
c0023f2a:	56                   	push   esi
c0023f2b:	53                   	push   ebx
c0023f2c:	e8 31 f6 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f31:	5f                   	pop    edi
c0023f32:	58                   	pop    eax
c0023f33:	6a 00                	push   0x0
c0023f35:	68 40 42 0f 00       	push   0xf4240
c0023f3a:	e8 ca a2 ff ff       	call   c001e209 <nanoSleep(unsigned long long)>
c0023f3f:	83 c4 10             	add    esp,0x10
c0023f42:	b1 01                	mov    cl,0x1
c0023f44:	e9 6b fe ff ff       	jmp    c0023db4 <IDE::detect()+0x126>
c0023f49:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023f4f:	5b                   	pop    ebx
c0023f50:	5e                   	pop    esi
c0023f51:	5f                   	pop    edi
c0023f52:	5d                   	pop    ebp
c0023f53:	c3                   	ret    

c0023f54 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023f54:	55                   	push   ebp
c0023f55:	57                   	push   edi
c0023f56:	56                   	push   esi
c0023f57:	53                   	push   ebx
c0023f58:	83 ec 1c             	sub    esp,0x1c
c0023f5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023f5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023f63:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023f67:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023f6b:	88 c3                	mov    bl,al
c0023f6d:	84 c0                	test   al,al
c0023f6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f73:	0f 84 81 00 00 00    	je     c0023ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023f79:	83 ec 0c             	sub    esp,0xc
c0023f7c:	68 e3 cd 02 c0       	push   0xc002cde3
c0023f81:	e8 79 ea fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0023f86:	83 c4 10             	add    esp,0x10
c0023f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f8d:	3c 01                	cmp    al,0x1
c0023f8f:	74 63                	je     c0023ff4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023f91:	3c 02                	cmp    al,0x2
c0023f93:	75 53                	jne    c0023fe8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023f95:	d1 e6                	shl    esi,1
c0023f97:	09 ee                	or     esi,ebp
c0023f99:	50                   	push   eax
c0023f9a:	89 f0                	mov    eax,esi
c0023f9c:	6a 01                	push   0x1
c0023f9e:	0f b6 f0             	movzx  esi,al
c0023fa1:	c1 e6 06             	shl    esi,0x6
c0023fa4:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023fac:	50                   	push   eax
c0023fad:	57                   	push   edi
c0023fae:	e8 6f f6 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0023fb3:	83 c4 10             	add    esp,0x10
c0023fb6:	a8 01                	test   al,0x1
c0023fb8:	74 02                	je     c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023fba:	b3 07                	mov    bl,0x7
c0023fbc:	a8 02                	test   al,0x2
c0023fbe:	74 02                	je     c0023fc2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023fc0:	b3 03                	mov    bl,0x3
c0023fc2:	a8 04                	test   al,0x4
c0023fc4:	74 02                	je     c0023fc8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023fc6:	b3 14                	mov    bl,0x14
c0023fc8:	a8 08                	test   al,0x8
c0023fca:	74 02                	je     c0023fce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023fcc:	b3 03                	mov    bl,0x3
c0023fce:	a8 10                	test   al,0x10
c0023fd0:	74 02                	je     c0023fd4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023fd2:	b3 15                	mov    bl,0x15
c0023fd4:	a8 20                	test   al,0x20
c0023fd6:	74 02                	je     c0023fda <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023fd8:	b3 03                	mov    bl,0x3
c0023fda:	a8 40                	test   al,0x40
c0023fdc:	74 02                	je     c0023fe0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023fde:	b3 16                	mov    bl,0x16
c0023fe0:	84 c0                	test   al,al
c0023fe2:	79 16                	jns    c0023ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fe4:	b3 0d                	mov    bl,0xd
c0023fe6:	eb 12                	jmp    c0023ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fe8:	3c 03                	cmp    al,0x3
c0023fea:	74 0c                	je     c0023ff8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023fec:	3c 04                	cmp    al,0x4
c0023fee:	75 0a                	jne    c0023ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ff0:	b3 08                	mov    bl,0x8
c0023ff2:	eb 06                	jmp    c0023ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ff4:	b3 13                	mov    bl,0x13
c0023ff6:	eb 02                	jmp    c0023ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ff8:	b3 17                	mov    bl,0x17
c0023ffa:	83 c4 1c             	add    esp,0x1c
c0023ffd:	88 d8                	mov    al,bl
c0023fff:	5b                   	pop    ebx
c0024000:	5e                   	pop    esi
c0024001:	5f                   	pop    edi
c0024002:	5d                   	pop    ebp
c0024003:	c3                   	ret    

c0024004 <IDE::polling(unsigned char, unsigned int)>:
c0024004:	57                   	push   edi
c0024005:	56                   	push   esi
c0024006:	53                   	push   ebx
c0024007:	bb 04 00 00 00       	mov    ebx,0x4
c002400c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024010:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024015:	52                   	push   edx
c0024016:	6a 0c                	push   0xc
c0024018:	56                   	push   esi
c0024019:	57                   	push   edi
c002401a:	e8 03 f6 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c002401f:	83 c4 10             	add    esp,0x10
c0024022:	4b                   	dec    ebx
c0024023:	75 f0                	jne    c0024015 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024025:	bb a0 86 01 00       	mov    ebx,0x186a0
c002402a:	50                   	push   eax
c002402b:	6a 0c                	push   0xc
c002402d:	56                   	push   esi
c002402e:	57                   	push   edi
c002402f:	e8 ee f5 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0024034:	83 c4 10             	add    esp,0x10
c0024037:	a8 01                	test   al,0x1
c0024039:	75 17                	jne    c0024052 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002403b:	a8 20                	test   al,0x20
c002403d:	75 0f                	jne    c002404e <IDE::polling(unsigned char, unsigned int)+0x4a>
c002403f:	4b                   	dec    ebx
c0024040:	74 10                	je     c0024052 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0024042:	84 c0                	test   al,al
c0024044:	78 e4                	js     c002402a <IDE::polling(unsigned char, unsigned int)+0x26>
c0024046:	a8 08                	test   al,0x8
c0024048:	74 e0                	je     c002402a <IDE::polling(unsigned char, unsigned int)+0x26>
c002404a:	31 c0                	xor    eax,eax
c002404c:	eb 06                	jmp    c0024054 <IDE::polling(unsigned char, unsigned int)+0x50>
c002404e:	b0 01                	mov    al,0x1
c0024050:	eb 02                	jmp    c0024054 <IDE::polling(unsigned char, unsigned int)+0x50>
c0024052:	b0 02                	mov    al,0x2
c0024054:	5b                   	pop    ebx
c0024055:	5e                   	pop    esi
c0024056:	5f                   	pop    edi
c0024057:	c3                   	ret    

c0024058 <SATABus::close(int, int, void*)>:
c0024058:	31 c0                	xor    eax,eax
c002405a:	c3                   	ret    
c002405b:	90                   	nop

c002405c <SATABus::detect()>:
c002405c:	c3                   	ret    
c002405d:	90                   	nop

c002405e <SATABus::SATABus()>:
c002405e:	83 ec 0c             	sub    esp,0xc
c0024061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024065:	83 ec 08             	sub    esp,0x8
c0024068:	68 1c ce 02 c0       	push   0xc002ce1c
c002406d:	50                   	push   eax
c002406e:	e8 73 01 ff ff       	call   c00141e6 <HardDiskController::HardDiskController(char const*)>
c0024073:	83 c4 10             	add    esp,0x10
c0024076:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c002407b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002407f:	89 10                	mov    DWORD PTR [eax],edx
c0024081:	83 ec 0c             	sub    esp,0xc
c0024084:	6a 50                	push   0x50
c0024086:	e8 10 be fe ff       	call   c000fe9b <Phys::allocateContiguousPages(int)>
c002408b:	83 c4 10             	add    esp,0x10
c002408e:	89 c2                	mov    edx,eax
c0024090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024094:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002409a:	83 ec 0c             	sub    esp,0xc
c002409d:	6a 50                	push   0x50
c002409f:	e8 89 d5 fe ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c00240a4:	83 c4 10             	add    esp,0x10
c00240a7:	89 c2                	mov    edx,eax
c00240a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00240b3:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c00240b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00240bc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00240c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00240c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00240cc:	83 ec 0c             	sub    esp,0xc
c00240cf:	6a 03                	push   0x3
c00240d1:	6a 50                	push   0x50
c00240d3:	51                   	push   ecx
c00240d4:	52                   	push   edx
c00240d5:	50                   	push   eax
c00240d6:	e8 ef de fe ff       	call   c0011fca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00240db:	83 c4 20             	add    esp,0x20
c00240de:	90                   	nop
c00240df:	83 c4 0c             	add    esp,0xc
c00240e2:	c3                   	ret    
c00240e3:	90                   	nop

c00240e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00240e4:	83 ec 0c             	sub    esp,0xc
c00240e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240eb:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00240ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00240f1:	09 c2                	or     edx,eax
c00240f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00240fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00240ff:	31 c0                	xor    eax,eax
c0024101:	c1 e9 08             	shr    ecx,0x8
c0024104:	83 e1 0f             	and    ecx,0xf
c0024107:	39 c8                	cmp    eax,ecx
c0024109:	74 0a                	je     c0024115 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002410b:	f6 c2 01             	test   dl,0x1
c002410e:	74 18                	je     c0024128 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024110:	d1 ea                	shr    edx,1
c0024112:	40                   	inc    eax
c0024113:	eb f2                	jmp    c0024107 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024115:	83 ec 0c             	sub    esp,0xc
c0024118:	68 40 ce 02 c0       	push   0xc002ce40
c002411d:	e8 7b 62 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0024122:	83 c4 10             	add    esp,0x10
c0024125:	83 c8 ff             	or     eax,0xffffffff
c0024128:	83 c4 0c             	add    esp,0xc
c002412b:	c3                   	ret    

c002412c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002412c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024130:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024133:	89 c2                	mov    edx,eax
c0024135:	c1 ea 08             	shr    edx,0x8
c0024138:	83 e2 0f             	and    edx,0xf
c002413b:	fe ca                	dec    dl
c002413d:	75 31                	jne    c0024170 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002413f:	83 e0 0f             	and    eax,0xf
c0024142:	3c 03                	cmp    al,0x3
c0024144:	75 2a                	jne    c0024170 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024146:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024149:	b8 02 00 00 00       	mov    eax,0x2
c002414e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024154:	74 1c                	je     c0024172 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024156:	b8 04 00 00 00       	mov    eax,0x4
c002415b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024161:	74 0f                	je     c0024172 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024163:	31 c0                	xor    eax,eax
c0024165:	83 fa 03             	cmp    edx,0x3
c0024168:	0f 94 c0             	sete   al
c002416b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002416f:	c3                   	ret    
c0024170:	31 c0                	xor    eax,eax
c0024172:	c3                   	ret    
c0024173:	90                   	nop

c0024174 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024178:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002417b:	0f ba e2 0f          	bt     edx,0xf
c002417f:	72 f7                	jb     c0024178 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024181:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024184:	83 ca 10             	or     edx,0x10
c0024187:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002418a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002418d:	83 ca 01             	or     edx,0x1
c0024190:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024193:	c3                   	ret    

c0024194 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024198:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002419b:	83 e2 fe             	and    edx,0xfffffffe
c002419e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241a4:	83 e2 ef             	and    edx,0xffffffef
c00241a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241ad:	0f ba e2 0e          	bt     edx,0xe
c00241b1:	72 f7                	jb     c00241aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00241b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241b6:	0f ba e2 0f          	bt     edx,0xf
c00241ba:	72 ee                	jb     c00241aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00241bc:	c3                   	ret    
c00241bd:	90                   	nop

c00241be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00241be:	55                   	push   ebp
c00241bf:	57                   	push   edi
c00241c0:	56                   	push   esi
c00241c1:	53                   	push   ebx
c00241c2:	83 ec 1c             	sub    esp,0x1c
c00241c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00241c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00241cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00241d1:	53                   	push   ebx
c00241d2:	89 fd                	mov    ebp,edi
c00241d4:	56                   	push   esi
c00241d5:	c1 e5 0a             	shl    ebp,0xa
c00241d8:	e8 b7 ff ff ff       	call   c0024194 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00241dd:	83 ec 0c             	sub    esp,0xc
c00241e0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00241e6:	01 e8                	add    eax,ebp
c00241e8:	89 03                	mov    DWORD PTR [ebx],eax
c00241ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241ec:	68 00 04 00 00       	push   0x400
c00241f1:	6a 00                	push   0x0
c00241f3:	50                   	push   eax
c00241f4:	e8 57 c5 fd ff       	call   c0000750 <memset>
c00241f9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00241ff:	89 fa                	mov    edx,edi
c0024201:	01 e8                	add    eax,ebp
c0024203:	c1 e7 0d             	shl    edi,0xd
c0024206:	89 03                	mov    DWORD PTR [ebx],eax
c0024208:	c1 e2 08             	shl    edx,0x8
c002420b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024212:	81 c2 00 80 00 00    	add    edx,0x8000
c0024218:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002421c:	89 d0                	mov    eax,edx
c002421e:	83 c4 1c             	add    esp,0x1c
c0024221:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024227:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002422a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002422d:	68 00 01 00 00       	push   0x100
c0024232:	6a 00                	push   0x0
c0024234:	50                   	push   eax
c0024235:	e8 16 c5 fd ff       	call   c0000750 <memset>
c002423a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002423e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024244:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002424a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002424e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024251:	83 c4 10             	add    esp,0x10
c0024254:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002425b:	31 ff                	xor    edi,edi
c002425d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024263:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002426d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024273:	83 c5 20             	add    ebp,0x20
c0024276:	01 f8                	add    eax,edi
c0024278:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002427b:	52                   	push   edx
c002427c:	68 00 01 00 00       	push   0x100
c0024281:	6a 00                	push   0x0
c0024283:	50                   	push   eax
c0024284:	e8 c7 c4 fd ff       	call   c0000750 <memset>
c0024289:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002428d:	83 c4 10             	add    esp,0x10
c0024290:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024296:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002429d:	01 f8                	add    eax,edi
c002429f:	81 c7 00 01 00 00    	add    edi,0x100
c00242a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00242a8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00242ae:	75 b3                	jne    c0024263 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00242b0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00242b4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00242b8:	83 c4 1c             	add    esp,0x1c
c00242bb:	5b                   	pop    ebx
c00242bc:	5e                   	pop    esi
c00242bd:	5f                   	pop    edi
c00242be:	5d                   	pop    ebp
c00242bf:	e9 b0 fe ff ff       	jmp    c0024174 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00242c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00242c4:	55                   	push   ebp
c00242c5:	57                   	push   edi
c00242c6:	56                   	push   esi
c00242c7:	53                   	push   ebx
c00242c8:	31 db                	xor    ebx,ebx
c00242ca:	83 ec 0c             	sub    esp,0xc
c00242cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242d5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00242d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00242de:	74 7a                	je     c002435a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00242e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00242e4:	89 d8                	mov    eax,ebx
c00242e6:	c1 e0 07             	shl    eax,0x7
c00242e9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00242f0:	55                   	push   ebp
c00242f1:	56                   	push   esi
c00242f2:	e8 35 fe ff ff       	call   c002412c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00242f7:	5a                   	pop    edx
c00242f8:	83 f8 01             	cmp    eax,0x1
c00242fb:	59                   	pop    ecx
c00242fc:	75 21                	jne    c002431f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00242fe:	50                   	push   eax
c00242ff:	53                   	push   ebx
c0024300:	55                   	push   ebp
c0024301:	56                   	push   esi
c0024302:	e8 b7 fe ff ff       	call   c00241be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024307:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002430e:	e8 94 b6 fe ff       	call   c000f9a7 <malloc>
c0024313:	89 c5                	mov    ebp,eax
c0024315:	89 04 24             	mov    DWORD PTR [esp],eax
c0024318:	e8 87 0d 00 00       	call   c00250a4 <SATA::SATA()>
c002431d:	eb 24                	jmp    c0024343 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002431f:	83 f8 04             	cmp    eax,0x4
c0024322:	75 36                	jne    c002435a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024324:	51                   	push   ecx
c0024325:	53                   	push   ebx
c0024326:	55                   	push   ebp
c0024327:	56                   	push   esi
c0024328:	e8 91 fe ff ff       	call   c00241be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002432d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024334:	e8 6e b6 fe ff       	call   c000f9a7 <malloc>
c0024339:	89 c5                	mov    ebp,eax
c002433b:	89 04 24             	mov    DWORD PTR [esp],eax
c002433e:	e8 d7 10 00 00       	call   c002541a <SATAPI::SATAPI()>
c0024343:	58                   	pop    eax
c0024344:	5a                   	pop    edx
c0024345:	55                   	push   ebp
c0024346:	56                   	push   esi
c0024347:	e8 ec fa fe ff       	call   c0013e38 <Device::addChild(Device*)>
c002434c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002434f:	56                   	push   esi
c0024350:	6a 00                	push   0x0
c0024352:	53                   	push   ebx
c0024353:	55                   	push   ebp
c0024354:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0024357:	83 c4 20             	add    esp,0x20
c002435a:	d1 ef                	shr    edi,1
c002435c:	43                   	inc    ebx
c002435d:	83 fb 20             	cmp    ebx,0x20
c0024360:	0f 85 72 ff ff ff    	jne    c00242d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024366:	83 c4 0c             	add    esp,0xc
c0024369:	5b                   	pop    ebx
c002436a:	5e                   	pop    esi
c002436b:	5f                   	pop    edi
c002436c:	5d                   	pop    ebp
c002436d:	c3                   	ret    

c002436e <SATABus::open(int, int, void*)>:
c002436e:	83 ec 14             	sub    esp,0x14
c0024371:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024375:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002437b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024381:	52                   	push   edx
c0024382:	50                   	push   eax
c0024383:	e8 3c ff ff ff       	call   c00242c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024388:	31 c0                	xor    eax,eax
c002438a:	83 c4 1c             	add    esp,0x1c
c002438d:	c3                   	ret    

c002438e <ATA::close(int, int, void*)>:
c002438e:	83 ec 0c             	sub    esp,0xc
c0024391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024395:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002439b:	85 c0                	test   eax,eax
c002439d:	74 0c                	je     c00243ab <ATA::close(int, int, void*)+0x1d>
c002439f:	83 ec 0c             	sub    esp,0xc
c00243a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00243a4:	50                   	push   eax
c00243a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00243a8:	83 c4 10             	add    esp,0x10
c00243ab:	31 c0                	xor    eax,eax
c00243ad:	83 c4 0c             	add    esp,0xc
c00243b0:	c3                   	ret    
c00243b1:	90                   	nop

c00243b2 <ATA::powerSaving(PowerSavingLevel)>:
c00243b2:	c3                   	ret    
c00243b3:	90                   	nop

c00243b4 <ATA::ATA()>:
c00243b4:	83 ec 0c             	sub    esp,0xc
c00243b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243bb:	83 ec 04             	sub    esp,0x4
c00243be:	68 00 02 00 00       	push   0x200
c00243c3:	68 65 cf 02 c0       	push   0xc002cf65
c00243c8:	50                   	push   eax
c00243c9:	e8 a0 fe fe ff       	call   c001426e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243ce:	83 c4 10             	add    esp,0x10
c00243d1:	ba e8 ce 02 c0       	mov    edx,0xc002cee8
c00243d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243da:	89 10                	mov    DWORD PTR [eax],edx
c00243dc:	90                   	nop
c00243dd:	83 c4 0c             	add    esp,0xc
c00243e0:	c3                   	ret    
c00243e1:	90                   	nop

c00243e2 <ATA::flush(bool)>:
c00243e2:	53                   	push   ebx
c00243e3:	83 ec 08             	sub    esp,0x8
c00243e6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00243eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243ef:	19 c0                	sbb    eax,eax
c00243f1:	83 e0 fd             	and    eax,0xfffffffd
c00243f4:	05 ea 00 00 00       	add    eax,0xea
c00243f9:	50                   	push   eax
c00243fa:	6a 07                	push   0x7
c00243fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024403:	50                   	push   eax
c0024404:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440a:	e8 53 f1 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002440f:	83 c4 0c             	add    esp,0xc
c0024412:	6a 00                	push   0x0
c0024414:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002441b:	50                   	push   eax
c002441c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024422:	e8 dd fb ff ff       	call   c0024004 <IDE::polling(unsigned char, unsigned int)>
c0024427:	83 c4 18             	add    esp,0x18
c002442a:	5b                   	pop    ebx
c002442b:	c3                   	ret    

c002442c <ATA::readyForCommand()>:
c002442c:	56                   	push   esi
c002442d:	53                   	push   ebx
c002442e:	31 db                	xor    ebx,ebx
c0024430:	50                   	push   eax
c0024431:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024435:	50                   	push   eax
c0024436:	6a 0c                	push   0xc
c0024438:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002443f:	50                   	push   eax
c0024440:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024446:	e8 d7 f1 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c002444b:	83 c4 10             	add    esp,0x10
c002444e:	a8 88                	test   al,0x88
c0024450:	74 23                	je     c0024475 <ATA::readyForCommand()+0x49>
c0024452:	43                   	inc    ebx
c0024453:	83 fb 63             	cmp    ebx,0x63
c0024456:	7e dd                	jle    c0024435 <ATA::readyForCommand()+0x9>
c0024458:	51                   	push   ecx
c0024459:	51                   	push   ecx
c002445a:	6a 00                	push   0x0
c002445c:	68 40 42 0f 00       	push   0xf4240
c0024461:	e8 a3 9d ff ff       	call   c001e209 <nanoSleep(unsigned long long)>
c0024466:	83 c4 10             	add    esp,0x10
c0024469:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002446f:	75 c4                	jne    c0024435 <ATA::readyForCommand()+0x9>
c0024471:	31 c0                	xor    eax,eax
c0024473:	eb 02                	jmp    c0024477 <ATA::readyForCommand()+0x4b>
c0024475:	b0 01                	mov    al,0x1
c0024477:	5a                   	pop    edx
c0024478:	5b                   	pop    ebx
c0024479:	5e                   	pop    esi
c002447a:	c3                   	ret    
c002447b:	90                   	nop

c002447c <ATA::access(unsigned long long, int, void*, bool)>:
c002447c:	55                   	push   ebp
c002447d:	57                   	push   edi
c002447e:	56                   	push   esi
c002447f:	53                   	push   ebx
c0024480:	83 ec 38             	sub    esp,0x38
c0024483:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0024487:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002448b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002448f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024493:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024497:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002449b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002449f:	68 94 ce 02 c0       	push   0xc002ce94
c00244a4:	e8 56 e5 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00244a9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00244af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244b3:	83 c4 10             	add    esp,0x10
c00244b6:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244c0:	c1 e0 06             	shl    eax,0x6
c00244c3:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00244cb:	74 5d                	je     c002452a <ATA::access(unsigned long long, int, void*, bool)+0xae>
c00244cd:	89 fa                	mov    edx,edi
c00244cf:	89 f0                	mov    eax,esi
c00244d1:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00244d5:	c1 ea 1c             	shr    edx,0x1c
c00244d8:	89 d1                	mov    ecx,edx
c00244da:	09 c1                	or     ecx,eax
c00244dc:	74 25                	je     c0024503 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c00244de:	31 ed                	xor    ebp,ebp
c00244e0:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00244e7:	89 fa                	mov    edx,edi
c00244e9:	89 f0                	mov    eax,esi
c00244eb:	0f ad d0             	shrd   eax,edx,cl
c00244ee:	d3 ea                	shr    edx,cl
c00244f0:	f6 c1 20             	test   cl,0x20
c00244f3:	74 02                	je     c00244f7 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c00244f5:	89 d0                	mov    eax,edx
c00244f7:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00244fb:	45                   	inc    ebp
c00244fc:	83 fd 06             	cmp    ebp,0x6
c00244ff:	75 df                	jne    c00244e0 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c0024501:	eb 76                	jmp    c0024579 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c0024503:	89 f0                	mov    eax,esi
c0024505:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002450a:	89 fa                	mov    edx,edi
c002450c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024513:	0f ac d0 10          	shrd   eax,edx,0x10
c0024517:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002451c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024520:	c1 ee 18             	shr    esi,0x18
c0024523:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024528:	eb 56                	jmp    c0024580 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002452a:	6a 00                	push   0x0
c002452c:	6a 3f                	push   0x3f
c002452e:	57                   	push   edi
c002452f:	56                   	push   esi
c0024530:	e8 9f 29 00 00       	call   c0026ed4 <__umoddi3>
c0024535:	83 c4 10             	add    esp,0x10
c0024538:	40                   	inc    eax
c0024539:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002453d:	6a 00                	push   0x0
c002453f:	68 f0 03 00 00       	push   0x3f0
c0024544:	57                   	push   edi
c0024545:	56                   	push   esi
c0024546:	e8 89 28 00 00       	call   c0026dd4 <__udivdi3>
c002454b:	83 c4 10             	add    esp,0x10
c002454e:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024553:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002455a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002455f:	6a 00                	push   0x0
c0024561:	6a 3f                	push   0x3f
c0024563:	57                   	push   edi
c0024564:	56                   	push   esi
c0024565:	e8 6a 28 00 00       	call   c0026dd4 <__udivdi3>
c002456a:	83 c4 10             	add    esp,0x10
c002456d:	89 c6                	mov    esi,eax
c002456f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024574:	83 e6 0f             	and    esi,0xf
c0024577:	eb 07                	jmp    c0024580 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024579:	31 f6                	xor    esi,esi
c002457b:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024580:	bf 01 00 00 00       	mov    edi,0x1
c0024585:	50                   	push   eax
c0024586:	6a 00                	push   0x0
c0024588:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002458f:	50                   	push   eax
c0024590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024594:	e8 d5 f1 ff ff       	call   c002376e <IDE::enableIRQs(unsigned char, bool)>
c0024599:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002459c:	e8 8b fe ff ff       	call   c002442c <ATA::readyForCommand()>
c00245a1:	83 c4 10             	add    esp,0x10
c00245a4:	84 c0                	test   al,al
c00245a6:	0f 84 bc 02 00 00    	je     c0024868 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00245ac:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00245b2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245b8:	c1 e0 04             	shl    eax,0x4
c00245bb:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00245c2:	09 c6                	or     esi,eax
c00245c4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00245c9:	75 05                	jne    c00245d0 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c00245cb:	83 ce a0             	or     esi,0xffffffa0
c00245ce:	eb 03                	jmp    c00245d3 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c00245d0:	83 ce e0             	or     esi,0xffffffe0
c00245d3:	89 f0                	mov    eax,esi
c00245d5:	0f b6 f0             	movzx  esi,al
c00245d8:	56                   	push   esi
c00245d9:	6a 06                	push   0x6
c00245db:	51                   	push   ecx
c00245dc:	52                   	push   edx
c00245dd:	e8 80 ef ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245e2:	83 c4 10             	add    esp,0x10
c00245e5:	6a 00                	push   0x0
c00245e7:	6a 01                	push   0x1
c00245e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245f0:	50                   	push   eax
c00245f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245f7:	e8 66 ef ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245fc:	83 c4 10             	add    esp,0x10
c00245ff:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024604:	75 6e                	jne    c0024674 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0024606:	6a 00                	push   0x0
c0024608:	6a 08                	push   0x8
c002460a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024611:	50                   	push   eax
c0024612:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024618:	e8 45 ef ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002461d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024622:	50                   	push   eax
c0024623:	6a 09                	push   0x9
c0024625:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002462c:	50                   	push   eax
c002462d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024633:	e8 2a ef ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024638:	83 c4 20             	add    esp,0x20
c002463b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024640:	50                   	push   eax
c0024641:	6a 0a                	push   0xa
c0024643:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002464a:	50                   	push   eax
c002464b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024651:	e8 0c ef ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024656:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002465b:	50                   	push   eax
c002465c:	6a 0b                	push   0xb
c002465e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024665:	50                   	push   eax
c0024666:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002466c:	e8 f1 ee ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024671:	83 c4 20             	add    esp,0x20
c0024674:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024679:	50                   	push   eax
c002467a:	6a 02                	push   0x2
c002467c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024683:	50                   	push   eax
c0024684:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002468a:	e8 d3 ee ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002468f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024694:	50                   	push   eax
c0024695:	6a 03                	push   0x3
c0024697:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002469e:	50                   	push   eax
c002469f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246a5:	e8 b8 ee ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246aa:	83 c4 20             	add    esp,0x20
c00246ad:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00246b2:	50                   	push   eax
c00246b3:	6a 04                	push   0x4
c00246b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246bc:	50                   	push   eax
c00246bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246c3:	e8 9a ee ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246c8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00246cd:	50                   	push   eax
c00246ce:	6a 05                	push   0x5
c00246d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246d7:	50                   	push   eax
c00246d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246de:	e8 7f ee ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e3:	83 c4 20             	add    esp,0x20
c00246e6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00246eb:	0f 94 c0             	sete   al
c00246ee:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00246f3:	74 09                	je     c00246fe <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00246f5:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00246fc:	eb 07                	jmp    c0024705 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00246fe:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024705:	0f b6 c0             	movzx  eax,al
c0024708:	50                   	push   eax
c0024709:	6a 07                	push   0x7
c002470b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024712:	50                   	push   eax
c0024713:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024719:	e8 44 ee ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002471e:	c7 04 24 a1 ce 02 c0 	mov    DWORD PTR [esp],0xc002cea1
c0024725:	e8 d5 e2 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c002472a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002472e:	83 c4 10             	add    esp,0x10
c0024731:	85 f6                	test   esi,esi
c0024733:	0f 84 f7 00 00 00    	je     c0024830 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0024739:	83 ec 0c             	sub    esp,0xc
c002473c:	68 a4 ce 02 c0       	push   0xc002cea4
c0024741:	e8 b9 e2 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0024746:	83 c4 0c             	add    esp,0xc
c0024749:	6a 01                	push   0x1
c002474b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024752:	50                   	push   eax
c0024753:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024759:	e8 a6 f8 ff ff       	call   c0024004 <IDE::polling(unsigned char, unsigned int)>
c002475e:	c7 04 24 a7 ce 02 c0 	mov    DWORD PTR [esp],0xc002cea7
c0024765:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0024769:	e8 91 e2 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c002476e:	83 c4 10             	add    esp,0x10
c0024771:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0024775:	84 c0                	test   al,al
c0024777:	74 2b                	je     c00247a4 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0024779:	0f b6 f8             	movzx  edi,al
c002477c:	57                   	push   edi
c002477d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024784:	50                   	push   eax
c0024785:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002478c:	50                   	push   eax
c002478d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024793:	e8 bc f7 ff ff       	call   c0023f54 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024798:	c7 04 24 aa ce 02 c0 	mov    DWORD PTR [esp],0xc002ceaa
c002479f:	e9 bc 00 00 00       	jmp    c0024860 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00247a4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00247a9:	74 50                	je     c00247fb <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00247ab:	83 ec 0c             	sub    esp,0xc
c00247ae:	31 ed                	xor    ebp,ebp
c00247b0:	68 b5 ce 02 c0       	push   0xc002ceb5
c00247b5:	e8 45 e2 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00247ba:	83 c4 10             	add    esp,0x10
c00247bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00247c1:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00247c5:	50                   	push   eax
c00247c6:	50                   	push   eax
c00247c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247ce:	50                   	push   eax
c00247cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247d5:	e8 76 ed ff ff       	call   c0023550 <IDE::getBase(unsigned char)>
c00247da:	89 c2                	mov    edx,eax
c00247dc:	89 f8                	mov    eax,edi
c00247de:	66 ef                	out    dx,ax
c00247e0:	45                   	inc    ebp
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00247ea:	75 d1                	jne    c00247bd <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00247ec:	83 ec 0c             	sub    esp,0xc
c00247ef:	68 b8 ce 02 c0       	push   0xc002ceb8
c00247f4:	e8 06 e2 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00247f9:	eb 24                	jmp    c002481f <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00247fb:	51                   	push   ecx
c00247fc:	51                   	push   ecx
c00247fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024804:	50                   	push   eax
c0024805:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002480b:	e8 40 ed ff ff       	call   c0023550 <IDE::getBase(unsigned char)>
c0024810:	b9 00 01 00 00       	mov    ecx,0x100
c0024815:	89 c2                	mov    edx,eax
c0024817:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002481b:	fc                   	cld    
c002481c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002481f:	83 c4 10             	add    esp,0x10
c0024822:	4e                   	dec    esi
c0024823:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002482b:	e9 01 ff ff ff       	jmp    c0024731 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0024830:	31 ff                	xor    edi,edi
c0024832:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024837:	74 2f                	je     c0024868 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024839:	83 ec 0c             	sub    esp,0xc
c002483c:	68 bb ce 02 c0       	push   0xc002cebb
c0024841:	e8 b9 e1 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0024846:	58                   	pop    eax
c0024847:	31 c0                	xor    eax,eax
c0024849:	5a                   	pop    edx
c002484a:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002484f:	0f 94 c0             	sete   al
c0024852:	50                   	push   eax
c0024853:	53                   	push   ebx
c0024854:	e8 89 fb ff ff       	call   c00243e2 <ATA::flush(bool)>
c0024859:	c7 04 24 be ce 02 c0 	mov    DWORD PTR [esp],0xc002cebe
c0024860:	e8 9a e1 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0024865:	83 c4 10             	add    esp,0x10
c0024868:	83 c4 2c             	add    esp,0x2c
c002486b:	89 f8                	mov    eax,edi
c002486d:	5b                   	pop    ebx
c002486e:	5e                   	pop    esi
c002486f:	5f                   	pop    edi
c0024870:	5d                   	pop    ebp
c0024871:	c3                   	ret    

c0024872 <ATA::read(unsigned long long, int, void*)>:
c0024872:	57                   	push   edi
c0024873:	b8 04 00 00 00       	mov    eax,0x4
c0024878:	56                   	push   esi
c0024879:	53                   	push   ebx
c002487a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002487e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024882:	8d 7a ff             	lea    edi,[edx-0x1]
c0024885:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024889:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002488d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024893:	77 25                	ja     c00248ba <ATA::read(unsigned long long, int, void*)+0x48>
c0024895:	b8 06 00 00 00       	mov    eax,0x6
c002489a:	85 f6                	test   esi,esi
c002489c:	74 1c                	je     c00248ba <ATA::read(unsigned long long, int, void*)+0x48>
c002489e:	50                   	push   eax
c002489f:	50                   	push   eax
c00248a0:	6a 00                	push   0x0
c00248a2:	56                   	push   esi
c00248a3:	52                   	push   edx
c00248a4:	53                   	push   ebx
c00248a5:	51                   	push   ecx
c00248a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248aa:	e8 cd fb ff ff       	call   c002447c <ATA::access(unsigned long long, int, void*, bool)>
c00248af:	83 c4 20             	add    esp,0x20
c00248b2:	85 c0                	test   eax,eax
c00248b4:	0f 95 c0             	setne  al
c00248b7:	0f b6 c0             	movzx  eax,al
c00248ba:	5b                   	pop    ebx
c00248bb:	5e                   	pop    esi
c00248bc:	5f                   	pop    edi
c00248bd:	c3                   	ret    

c00248be <ATA::write(unsigned long long, int, void*)>:
c00248be:	55                   	push   ebp
c00248bf:	57                   	push   edi
c00248c0:	56                   	push   esi
c00248c1:	53                   	push   ebx
c00248c2:	83 ec 18             	sub    esp,0x18
c00248c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00248c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00248cd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00248d1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00248d5:	68 c1 ce 02 c0       	push   0xc002cec1
c00248da:	e8 20 e1 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c00248df:	8d 53 ff             	lea    edx,[ebx-0x1]
c00248e2:	83 c4 10             	add    esp,0x10
c00248e5:	b8 04 00 00 00       	mov    eax,0x4
c00248ea:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00248f0:	77 25                	ja     c0024917 <ATA::write(unsigned long long, int, void*)+0x59>
c00248f2:	b8 06 00 00 00       	mov    eax,0x6
c00248f7:	85 f6                	test   esi,esi
c00248f9:	74 1c                	je     c0024917 <ATA::write(unsigned long long, int, void*)+0x59>
c00248fb:	50                   	push   eax
c00248fc:	50                   	push   eax
c00248fd:	6a 01                	push   0x1
c00248ff:	56                   	push   esi
c0024900:	53                   	push   ebx
c0024901:	55                   	push   ebp
c0024902:	57                   	push   edi
c0024903:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024907:	e8 70 fb ff ff       	call   c002447c <ATA::access(unsigned long long, int, void*, bool)>
c002490c:	83 c4 20             	add    esp,0x20
c002490f:	85 c0                	test   eax,eax
c0024911:	0f 95 c0             	setne  al
c0024914:	0f b6 c0             	movzx  eax,al
c0024917:	83 c4 0c             	add    esp,0xc
c002491a:	5b                   	pop    ebx
c002491b:	5e                   	pop    esi
c002491c:	5f                   	pop    edi
c002491d:	5d                   	pop    ebp
c002491e:	c3                   	ret    
c002491f:	90                   	nop

c0024920 <ATA::detectCHS()>:
c0024920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024924:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002492a:	c1 e0 06             	shl    eax,0x6
c002492d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024933:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002493d:	c7 44 24 04 cd ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cecd
c0024945:	e9 53 5a ff ff       	jmp    c001a39d <Krnl::panic(char const*)>

c002494a <ATA::open(int, int, void*)>:
c002494a:	53                   	push   ebx
c002494b:	83 ec 08             	sub    esp,0x8
c002494e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002495a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024960:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024966:	c1 e0 06             	shl    eax,0x6
c0024969:	01 d0                	add    eax,edx
c002496b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024972:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024978:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002497f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024989:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002498f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024996:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002499d:	75 0c                	jne    c00249ab <ATA::open(int, int, void*)+0x61>
c002499f:	83 ec 0c             	sub    esp,0xc
c00249a2:	53                   	push   ebx
c00249a3:	e8 78 ff ff ff       	call   c0024920 <ATA::detectCHS()>
c00249a8:	83 c4 10             	add    esp,0x10
c00249ab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249b1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00249b7:	c1 e0 06             	shl    eax,0x6
c00249ba:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00249c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00249cb:	d1 e8                	shr    eax,1
c00249cd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00249d3:	6a 04                	push   0x4
c00249d5:	6a 0c                	push   0xc
c00249d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249de:	50                   	push   eax
c00249df:	52                   	push   edx
c00249e0:	e8 7d eb ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249e5:	90                   	nop
c00249e6:	90                   	nop
c00249e7:	6a 00                	push   0x0
c00249e9:	6a 0c                	push   0xc
c00249eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249f2:	50                   	push   eax
c00249f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249f9:	e8 64 eb ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249fe:	83 c4 14             	add    esp,0x14
c0024a01:	53                   	push   ebx
c0024a02:	e8 cf f8 fe ff       	call   c00142d6 <PhysicalDisk::startCache()>
c0024a07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a0a:	e8 4f 1b ff ff       	call   c001655e <createPartitionsForDisk(PhysicalDisk*)>
c0024a0f:	31 c0                	xor    eax,eax
c0024a11:	83 c4 18             	add    esp,0x18
c0024a14:	5b                   	pop    ebx
c0024a15:	c3                   	ret    

c0024a16 <ATAPI::write(unsigned long long, int, void*)>:
c0024a16:	b8 03 00 00 00       	mov    eax,0x3
c0024a1b:	c3                   	ret    

c0024a1c <ATAPI::close(int, int, void*)>:
c0024a1c:	83 ec 0c             	sub    esp,0xc
c0024a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a29:	85 c0                	test   eax,eax
c0024a2b:	74 0c                	je     c0024a39 <ATAPI::close(int, int, void*)+0x1d>
c0024a2d:	83 ec 0c             	sub    esp,0xc
c0024a30:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a32:	50                   	push   eax
c0024a33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a36:	83 c4 10             	add    esp,0x10
c0024a39:	31 c0                	xor    eax,eax
c0024a3b:	83 c4 0c             	add    esp,0xc
c0024a3e:	c3                   	ret    
c0024a3f:	90                   	nop

c0024a40 <ATAPI::ATAPI()>:
c0024a40:	83 ec 0c             	sub    esp,0xc
c0024a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a47:	83 ec 04             	sub    esp,0x4
c0024a4a:	68 00 08 00 00       	push   0x800
c0024a4f:	68 05 d0 02 c0       	push   0xc002d005
c0024a54:	50                   	push   eax
c0024a55:	e8 14 f8 fe ff       	call   c001426e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a5a:	83 c4 10             	add    esp,0x10
c0024a5d:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0024a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a66:	89 10                	mov    DWORD PTR [eax],edx
c0024a68:	90                   	nop
c0024a69:	83 c4 0c             	add    esp,0xc
c0024a6c:	c3                   	ret    
c0024a6d:	90                   	nop

c0024a6e <ATAPI::readyForCommand()>:
c0024a6e:	56                   	push   esi
c0024a6f:	53                   	push   ebx
c0024a70:	31 db                	xor    ebx,ebx
c0024a72:	50                   	push   eax
c0024a73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a77:	50                   	push   eax
c0024a78:	6a 0c                	push   0xc
c0024a7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024a81:	50                   	push   eax
c0024a82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024a88:	e8 95 eb ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0024a8d:	83 c4 10             	add    esp,0x10
c0024a90:	a8 88                	test   al,0x88
c0024a92:	74 23                	je     c0024ab7 <ATAPI::readyForCommand()+0x49>
c0024a94:	43                   	inc    ebx
c0024a95:	83 fb 63             	cmp    ebx,0x63
c0024a98:	7e dd                	jle    c0024a77 <ATAPI::readyForCommand()+0x9>
c0024a9a:	51                   	push   ecx
c0024a9b:	51                   	push   ecx
c0024a9c:	6a 00                	push   0x0
c0024a9e:	68 40 42 0f 00       	push   0xf4240
c0024aa3:	e8 61 97 ff ff       	call   c001e209 <nanoSleep(unsigned long long)>
c0024aa8:	83 c4 10             	add    esp,0x10
c0024aab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ab1:	75 c4                	jne    c0024a77 <ATAPI::readyForCommand()+0x9>
c0024ab3:	31 c0                	xor    eax,eax
c0024ab5:	eb 02                	jmp    c0024ab9 <ATAPI::readyForCommand()+0x4b>
c0024ab7:	b0 01                	mov    al,0x1
c0024ab9:	5a                   	pop    edx
c0024aba:	5b                   	pop    ebx
c0024abb:	5e                   	pop    esi
c0024abc:	c3                   	ret    
c0024abd:	90                   	nop

c0024abe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024abe:	55                   	push   ebp
c0024abf:	57                   	push   edi
c0024ac0:	56                   	push   esi
c0024ac1:	53                   	push   ebx
c0024ac2:	83 ec 20             	sub    esp,0x20
c0024ac5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ac9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024acd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ad1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ad5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024ad9:	6a 01                	push   0x1
c0024adb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ae2:	50                   	push   eax
c0024ae3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ae9:	e8 80 ec ff ff       	call   c002376e <IDE::enableIRQs(unsigned char, bool)>
c0024aee:	5e                   	pop    esi
c0024aef:	58                   	pop    eax
c0024af0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024af7:	50                   	push   eax
c0024af8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024afe:	e8 39 ea ff ff       	call   c002353c <IDE::prepareInterrupt(unsigned char)>
c0024b03:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024b06:	e8 63 ff ff ff       	call   c0024a6e <ATAPI::readyForCommand()>
c0024b0b:	83 c4 10             	add    esp,0x10
c0024b0e:	84 c0                	test   al,al
c0024b10:	75 0a                	jne    c0024b1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024b12:	bb 01 00 00 00       	mov    ebx,0x1
c0024b17:	e9 57 02 00 00       	jmp    c0024d73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024b1c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024b22:	c1 e0 04             	shl    eax,0x4
c0024b25:	0f b6 c0             	movzx  eax,al
c0024b28:	50                   	push   eax
c0024b29:	6a 06                	push   0x6
c0024b2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b32:	50                   	push   eax
c0024b33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b39:	e8 24 ea ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b3e:	6a 00                	push   0x0
c0024b40:	6a 01                	push   0x1
c0024b42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b49:	50                   	push   eax
c0024b4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b50:	e8 0d ea ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b55:	83 c4 20             	add    esp,0x20
c0024b58:	0f b6 c3             	movzx  eax,bl
c0024b5b:	0f b6 df             	movzx  ebx,bh
c0024b5e:	50                   	push   eax
c0024b5f:	6a 04                	push   0x4
c0024b61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b68:	50                   	push   eax
c0024b69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b6f:	e8 ee e9 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b74:	53                   	push   ebx
c0024b75:	6a 05                	push   0x5
c0024b77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b7e:	50                   	push   eax
c0024b7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b85:	e8 d8 e9 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8a:	83 c4 20             	add    esp,0x20
c0024b8d:	68 a0 00 00 00       	push   0xa0
c0024b92:	6a 07                	push   0x7
c0024b94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b9b:	50                   	push   eax
c0024b9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ba2:	e8 bb e9 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ba7:	83 c4 0c             	add    esp,0xc
c0024baa:	6a 01                	push   0x1
c0024bac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bb3:	50                   	push   eax
c0024bb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bba:	e8 45 f4 ff ff       	call   c0024004 <IDE::polling(unsigned char, unsigned int)>
c0024bbf:	83 c4 10             	add    esp,0x10
c0024bc2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024bc8:	84 c0                	test   al,al
c0024bca:	74 23                	je     c0024bef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024bcc:	0f b6 d8             	movzx  ebx,al
c0024bcf:	0f b6 d2             	movzx  edx,dl
c0024bd2:	53                   	push   ebx
c0024bd3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024bda:	50                   	push   eax
c0024bdb:	52                   	push   edx
c0024bdc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024be2:	e8 6d f3 ff ff       	call   c0023f54 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024be7:	83 c4 10             	add    esp,0x10
c0024bea:	e9 84 01 00 00       	jmp    c0024d73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024bef:	0f b6 d2             	movzx  edx,dl
c0024bf2:	53                   	push   ebx
c0024bf3:	53                   	push   ebx
c0024bf4:	52                   	push   edx
c0024bf5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bfb:	e8 50 e9 ff ff       	call   c0023550 <IDE::getBase(unsigned char)>
c0024c00:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024c04:	b9 06 00 00 00       	mov    ecx,0x6
c0024c09:	89 c2                	mov    edx,eax
c0024c0b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024c0e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024c12:	83 c4 10             	add    esp,0x10
c0024c15:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024c1b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024c22:	85 db                	test   ebx,ebx
c0024c24:	0f 84 ec 00 00 00    	je     c0024d16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024c2a:	51                   	push   ecx
c0024c2b:	51                   	push   ecx
c0024c2c:	52                   	push   edx
c0024c2d:	50                   	push   eax
c0024c2e:	e8 9d ea ff ff       	call   c00236d0 <IDE::waitInterrupt(unsigned char)>
c0024c33:	83 c4 10             	add    esp,0x10
c0024c36:	84 c0                	test   al,al
c0024c38:	0f 84 d4 fe ff ff    	je     c0024b12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024c3e:	56                   	push   esi
c0024c3f:	56                   	push   esi
c0024c40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c47:	50                   	push   eax
c0024c48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c4e:	e8 e9 e8 ff ff       	call   c002353c <IDE::prepareInterrupt(unsigned char)>
c0024c53:	83 c4 0c             	add    esp,0xc
c0024c56:	6a 04                	push   0x4
c0024c58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c5f:	50                   	push   eax
c0024c60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c66:	e8 b7 e9 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0024c6b:	83 c4 0c             	add    esp,0xc
c0024c6e:	89 c6                	mov    esi,eax
c0024c70:	6a 05                	push   0x5
c0024c72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c79:	50                   	push   eax
c0024c7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c80:	e8 9d e9 ff ff       	call   c0023622 <IDE::read(unsigned char, unsigned char)>
c0024c85:	89 f1                	mov    ecx,esi
c0024c87:	0f b6 c0             	movzx  eax,al
c0024c8a:	0f b6 f1             	movzx  esi,cl
c0024c8d:	c1 e0 08             	shl    eax,0x8
c0024c90:	09 c6                	or     esi,eax
c0024c92:	d1 fe                	sar    esi,1
c0024c94:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024c98:	83 c4 10             	add    esp,0x10
c0024c9b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024ca0:	74 41                	je     c0024ce3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024ca2:	31 c9                	xor    ecx,ecx
c0024ca4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024caa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024cb1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024cb5:	75 0a                	jne    c0024cc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024cb7:	01 c9                	add    ecx,ecx
c0024cb9:	01 cd                	add    ebp,ecx
c0024cbb:	4b                   	dec    ebx
c0024cbc:	e9 54 ff ff ff       	jmp    c0024c15 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024cc1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024cc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024cca:	51                   	push   ecx
c0024ccb:	51                   	push   ecx
c0024ccc:	52                   	push   edx
c0024ccd:	50                   	push   eax
c0024cce:	e8 7d e8 ff ff       	call   c0023550 <IDE::getBase(unsigned char)>
c0024cd3:	89 c2                	mov    edx,eax
c0024cd5:	89 f0                	mov    eax,esi
c0024cd7:	66 ef                	out    dx,ax
c0024cd9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024cdd:	83 c4 10             	add    esp,0x10
c0024ce0:	41                   	inc    ecx
c0024ce1:	eb c1                	jmp    c0024ca4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024ce3:	31 f6                	xor    esi,esi
c0024ce5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024ceb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024cf2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024cf6:	75 06                	jne    c0024cfe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024cf8:	01 f6                	add    esi,esi
c0024cfa:	01 f5                	add    ebp,esi
c0024cfc:	eb bd                	jmp    c0024cbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024cfe:	51                   	push   ecx
c0024cff:	51                   	push   ecx
c0024d00:	52                   	push   edx
c0024d01:	50                   	push   eax
c0024d02:	e8 49 e8 ff ff       	call   c0023550 <IDE::getBase(unsigned char)>
c0024d07:	89 c2                	mov    edx,eax
c0024d09:	66 ed                	in     ax,dx
c0024d0b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024d10:	83 c4 10             	add    esp,0x10
c0024d13:	46                   	inc    esi
c0024d14:	eb cf                	jmp    c0024ce5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024d16:	51                   	push   ecx
c0024d17:	51                   	push   ecx
c0024d18:	52                   	push   edx
c0024d19:	50                   	push   eax
c0024d1a:	e8 b1 e9 ff ff       	call   c00236d0 <IDE::waitInterrupt(unsigned char)>
c0024d1f:	83 c4 10             	add    esp,0x10
c0024d22:	84 c0                	test   al,al
c0024d24:	0f 84 e8 fd ff ff    	je     c0024b12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024d2a:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024d2f:	52                   	push   edx
c0024d30:	52                   	push   edx
c0024d31:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d38:	50                   	push   eax
c0024d39:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d3f:	e8 f8 e7 ff ff       	call   c002353c <IDE::prepareInterrupt(unsigned char)>
c0024d44:	83 c4 10             	add    esp,0x10
c0024d47:	50                   	push   eax
c0024d48:	50                   	push   eax
c0024d49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d50:	50                   	push   eax
c0024d51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d57:	e8 f4 e7 ff ff       	call   c0023550 <IDE::getBase(unsigned char)>
c0024d5c:	8d 50 07             	lea    edx,[eax+0x7]
c0024d5f:	ec                   	in     al,dx
c0024d60:	83 c4 10             	add    esp,0x10
c0024d63:	a8 88                	test   al,0x88
c0024d65:	74 0a                	je     c0024d71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024d67:	4b                   	dec    ebx
c0024d68:	75 dd                	jne    c0024d47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024d6a:	bb 02 00 00 00       	mov    ebx,0x2
c0024d6f:	eb 02                	jmp    c0024d73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024d71:	31 db                	xor    ebx,ebx
c0024d73:	83 c4 1c             	add    esp,0x1c
c0024d76:	89 d8                	mov    eax,ebx
c0024d78:	5b                   	pop    ebx
c0024d79:	5e                   	pop    esi
c0024d7a:	5f                   	pop    edi
c0024d7b:	5d                   	pop    ebp
c0024d7c:	c3                   	ret    
c0024d7d:	90                   	nop

c0024d7e <ATAPI::diskRemoved()>:
c0024d7e:	83 ec 18             	sub    esp,0x18
c0024d81:	68 11 d0 02 c0       	push   0xc002d011
c0024d86:	e8 74 dc fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0024d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d8f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024d96:	83 c4 1c             	add    esp,0x1c
c0024d99:	c3                   	ret    

c0024d9a <ATAPI::eject()>:
c0024d9a:	57                   	push   edi
c0024d9b:	b9 03 00 00 00       	mov    ecx,0x3
c0024da0:	53                   	push   ebx
c0024da1:	83 ec 14             	sub    esp,0x14
c0024da4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024da8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024dac:	fc                   	cld    
c0024dad:	31 c0                	xor    eax,eax
c0024daf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024db1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024db6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024dbb:	50                   	push   eax
c0024dbc:	50                   	push   eax
c0024dbd:	6a 00                	push   0x0
c0024dbf:	6a 00                	push   0x0
c0024dc1:	6a 00                	push   0x0
c0024dc3:	6a 02                	push   0x2
c0024dc5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024dc9:	50                   	push   eax
c0024dca:	53                   	push   ebx
c0024dcb:	e8 ee fc ff ff       	call   c0024abe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024dd0:	83 c4 14             	add    esp,0x14
c0024dd3:	53                   	push   ebx
c0024dd4:	e8 a5 ff ff ff       	call   c0024d7e <ATAPI::diskRemoved()>
c0024dd9:	83 c4 24             	add    esp,0x24
c0024ddc:	31 c0                	xor    eax,eax
c0024dde:	5b                   	pop    ebx
c0024ddf:	5f                   	pop    edi
c0024de0:	c3                   	ret    
c0024de1:	90                   	nop

c0024de2 <ATAPI::diskInserted()>:
c0024de2:	53                   	push   ebx
c0024de3:	83 ec 14             	sub    esp,0x14
c0024de6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024dea:	68 28 d0 02 c0       	push   0xc002d028
c0024def:	e8 0b dc fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0024df4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024dfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dfe:	e8 d3 f4 fe ff       	call   c00142d6 <PhysicalDisk::startCache()>
c0024e03:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e07:	83 c4 18             	add    esp,0x18
c0024e0a:	5b                   	pop    ebx
c0024e0b:	e9 4e 17 ff ff       	jmp    c001655e <createPartitionsForDisk(PhysicalDisk*)>

c0024e10 <ATAPI::detectMedia()>:
c0024e10:	56                   	push   esi
c0024e11:	53                   	push   ebx
c0024e12:	83 ec 28             	sub    esp,0x28
c0024e15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e19:	6a 0c                	push   0xc
c0024e1b:	6a 00                	push   0x0
c0024e1d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e21:	56                   	push   esi
c0024e22:	e8 29 b9 fd ff       	call   c0000750 <memset>
c0024e27:	58                   	pop    eax
c0024e28:	5a                   	pop    edx
c0024e29:	6a 00                	push   0x0
c0024e2b:	6a 00                	push   0x0
c0024e2d:	6a 00                	push   0x0
c0024e2f:	6a 00                	push   0x0
c0024e31:	56                   	push   esi
c0024e32:	53                   	push   ebx
c0024e33:	e8 86 fc ff ff       	call   c0024abe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e38:	83 c4 1c             	add    esp,0x1c
c0024e3b:	6a 0c                	push   0xc
c0024e3d:	6a 00                	push   0x0
c0024e3f:	56                   	push   esi
c0024e40:	e8 0b b9 fd ff       	call   c0000750 <memset>
c0024e45:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e4a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e4f:	59                   	pop    ecx
c0024e50:	58                   	pop    eax
c0024e51:	6a 01                	push   0x1
c0024e53:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024e57:	50                   	push   eax
c0024e58:	6a 00                	push   0x0
c0024e5a:	6a 12                	push   0x12
c0024e5c:	56                   	push   esi
c0024e5d:	53                   	push   ebx
c0024e5e:	e8 5b fc ff ff       	call   c0024abe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e67:	83 c4 20             	add    esp,0x20
c0024e6a:	83 e0 7f             	and    eax,0x7f
c0024e6d:	3c 70                	cmp    al,0x70
c0024e6f:	74 15                	je     c0024e86 <ATAPI::detectMedia()+0x76>
c0024e71:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e78:	75 0c                	jne    c0024e86 <ATAPI::detectMedia()+0x76>
c0024e7a:	83 ec 0c             	sub    esp,0xc
c0024e7d:	53                   	push   ebx
c0024e7e:	e8 5f ff ff ff       	call   c0024de2 <ATAPI::diskInserted()>
c0024e83:	83 c4 10             	add    esp,0x10
c0024e86:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024e8a:	83 e0 0f             	and    eax,0xf
c0024e8d:	3c 02                	cmp    al,0x2
c0024e8f:	75 1b                	jne    c0024eac <ATAPI::detectMedia()+0x9c>
c0024e91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024e96:	75 2d                	jne    c0024ec5 <ATAPI::detectMedia()+0xb5>
c0024e98:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e9f:	74 24                	je     c0024ec5 <ATAPI::detectMedia()+0xb5>
c0024ea1:	83 ec 0c             	sub    esp,0xc
c0024ea4:	53                   	push   ebx
c0024ea5:	e8 d4 fe ff ff       	call   c0024d7e <ATAPI::diskRemoved()>
c0024eaa:	eb 16                	jmp    c0024ec2 <ATAPI::detectMedia()+0xb2>
c0024eac:	84 c0                	test   al,al
c0024eae:	75 15                	jne    c0024ec5 <ATAPI::detectMedia()+0xb5>
c0024eb0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024eb7:	75 0c                	jne    c0024ec5 <ATAPI::detectMedia()+0xb5>
c0024eb9:	83 ec 0c             	sub    esp,0xc
c0024ebc:	53                   	push   ebx
c0024ebd:	e8 20 ff ff ff       	call   c0024de2 <ATAPI::diskInserted()>
c0024ec2:	83 c4 10             	add    esp,0x10
c0024ec5:	83 c4 24             	add    esp,0x24
c0024ec8:	5b                   	pop    ebx
c0024ec9:	5e                   	pop    esi
c0024eca:	c3                   	ret    
c0024ecb:	90                   	nop

c0024ecc <ATAPI::open(int, int, void*)>:
c0024ecc:	53                   	push   ebx
c0024ecd:	83 ec 08             	sub    esp,0x8
c0024ed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ed4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ed8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024edc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ee2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ee8:	c1 e0 06             	shl    eax,0x6
c0024eeb:	01 d0                	add    eax,edx
c0024eed:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ef4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024efa:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024f01:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f0b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024f11:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f18:	6a 04                	push   0x4
c0024f1a:	6a 0c                	push   0xc
c0024f1c:	51                   	push   ecx
c0024f1d:	52                   	push   edx
c0024f1e:	e8 3f e6 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f23:	90                   	nop
c0024f24:	90                   	nop
c0024f25:	6a 00                	push   0x0
c0024f27:	6a 0c                	push   0xc
c0024f29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f30:	50                   	push   eax
c0024f31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f37:	e8 26 e6 ff ff       	call   c0023562 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f3c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024f43:	83 c4 14             	add    esp,0x14
c0024f46:	53                   	push   ebx
c0024f47:	e8 c4 fe ff ff       	call   c0024e10 <ATAPI::detectMedia()>
c0024f4c:	31 c0                	xor    eax,eax
c0024f4e:	83 c4 18             	add    esp,0x18
c0024f51:	5b                   	pop    ebx
c0024f52:	c3                   	ret    
c0024f53:	90                   	nop

c0024f54 <ATAPI::read(unsigned long long, int, void*)>:
c0024f54:	55                   	push   ebp
c0024f55:	57                   	push   edi
c0024f56:	56                   	push   esi
c0024f57:	53                   	push   ebx
c0024f58:	83 ec 1c             	sub    esp,0x1c
c0024f5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024f5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f63:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f67:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024f6e:	74 41                	je     c0024fb1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024f70:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f74:	b9 03 00 00 00       	mov    ecx,0x3
c0024f79:	fc                   	cld    
c0024f7a:	31 c0                	xor    eax,eax
c0024f7c:	86 fb                	xchg   bl,bh
c0024f7e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f80:	c1 c3 10             	rol    ebx,0x10
c0024f83:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024f88:	89 e8                	mov    eax,ebp
c0024f8a:	86 fb                	xchg   bl,bh
c0024f8c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024f90:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024f94:	50                   	push   eax
c0024f95:	50                   	push   eax
c0024f96:	55                   	push   ebp
c0024f97:	c1 e5 0b             	shl    ebp,0xb
c0024f9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f9e:	6a 00                	push   0x0
c0024fa0:	55                   	push   ebp
c0024fa1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fa5:	50                   	push   eax
c0024fa6:	56                   	push   esi
c0024fa7:	e8 12 fb ff ff       	call   c0024abe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024fac:	83 c4 20             	add    esp,0x20
c0024faf:	eb 1a                	jmp    c0024fcb <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024fb1:	83 ec 0c             	sub    esp,0xc
c0024fb4:	56                   	push   esi
c0024fb5:	e8 56 fe ff ff       	call   c0024e10 <ATAPI::detectMedia()>
c0024fba:	83 c4 10             	add    esp,0x10
c0024fbd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024fc4:	75 aa                	jne    c0024f70 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024fc6:	b8 02 00 00 00       	mov    eax,0x2
c0024fcb:	83 c4 1c             	add    esp,0x1c
c0024fce:	5b                   	pop    ebx
c0024fcf:	5e                   	pop    esi
c0024fd0:	5f                   	pop    edi
c0024fd1:	5d                   	pop    ebp
c0024fd2:	c3                   	ret    
c0024fd3:	90                   	nop

c0024fd4 <SATA::close(int, int, void*)>:
c0024fd4:	83 ec 0c             	sub    esp,0xc
c0024fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fe1:	85 c0                	test   eax,eax
c0024fe3:	74 0c                	je     c0024ff1 <SATA::close(int, int, void*)+0x1d>
c0024fe5:	83 ec 0c             	sub    esp,0xc
c0024fe8:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fea:	50                   	push   eax
c0024feb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fee:	83 c4 10             	add    esp,0x10
c0024ff1:	31 c0                	xor    eax,eax
c0024ff3:	83 c4 0c             	add    esp,0xc
c0024ff6:	c3                   	ret    
c0024ff7:	90                   	nop

c0024ff8 <SATA::powerSaving(PowerSavingLevel)>:
c0024ff8:	c3                   	ret    
c0024ff9:	90                   	nop

c0024ffa <SATA::open(int, int, void*)>:
c0024ffa:	56                   	push   esi
c0024ffb:	53                   	push   ebx
c0024ffc:	50                   	push   eax
c0024ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025005:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002500f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025015:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002501f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025023:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002502d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025033:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002503a:	e8 64 ad fe ff       	call   c000fda3 <Phys::allocatePage()>
c002503f:	89 c6                	mov    esi,eax
c0025041:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025047:	81 c6 00 10 00 00    	add    esi,0x1000
c002504d:	e8 51 ad fe ff       	call   c000fda3 <Phys::allocatePage()>
c0025052:	39 c6                	cmp    esi,eax
c0025054:	74 10                	je     c0025066 <SATA::open(int, int, void*)+0x6c>
c0025056:	83 ec 0c             	sub    esp,0xc
c0025059:	68 50 cf 02 c0       	push   0xc002cf50
c002505e:	e8 3a 53 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0025063:	83 c4 10             	add    esp,0x10
c0025066:	83 ec 0c             	sub    esp,0xc
c0025069:	6a 02                	push   0x2
c002506b:	e8 bd c5 fe ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c0025070:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025076:	6a 03                	push   0x3
c0025078:	50                   	push   eax
c0025079:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002507f:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c0025085:	e8 4a cc fe ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c002508a:	83 c4 14             	add    esp,0x14
c002508d:	53                   	push   ebx
c002508e:	e8 43 f2 fe ff       	call   c00142d6 <PhysicalDisk::startCache()>
c0025093:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025096:	e8 c3 14 ff ff       	call   c001655e <createPartitionsForDisk(PhysicalDisk*)>
c002509b:	83 c4 14             	add    esp,0x14
c002509e:	31 c0                	xor    eax,eax
c00250a0:	5b                   	pop    ebx
c00250a1:	5e                   	pop    esi
c00250a2:	c3                   	ret    
c00250a3:	90                   	nop

c00250a4 <SATA::SATA()>:
c00250a4:	83 ec 0c             	sub    esp,0xc
c00250a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ab:	83 ec 04             	sub    esp,0x4
c00250ae:	68 00 02 00 00       	push   0x200
c00250b3:	68 64 cf 02 c0       	push   0xc002cf64
c00250b8:	50                   	push   eax
c00250b9:	e8 b0 f1 fe ff       	call   c001426e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250be:	83 c4 10             	add    esp,0x10
c00250c1:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c00250c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ca:	89 10                	mov    DWORD PTR [eax],edx
c00250cc:	90                   	nop
c00250cd:	83 c4 0c             	add    esp,0xc
c00250d0:	c3                   	ret    
c00250d1:	90                   	nop

c00250d2 <SATA::access(unsigned long long, int, void*, bool)>:
c00250d2:	55                   	push   ebp
c00250d3:	57                   	push   edi
c00250d4:	56                   	push   esi
c00250d5:	53                   	push   ebx
c00250d6:	83 ec 2c             	sub    esp,0x2c
c00250d9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00250e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00250e5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00250ed:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00250f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250f6:	7e 10                	jle    c0025108 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00250f8:	83 ec 0c             	sub    esp,0xc
c00250fb:	68 74 cf 02 c0       	push   0xc002cf74
c0025100:	e8 98 52 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0025105:	83 c4 10             	add    esp,0x10
c0025108:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002510e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025114:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002511a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002511e:	89 d0                	mov    eax,edx
c0025120:	c1 e0 07             	shl    eax,0x7
c0025123:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025127:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025131:	51                   	push   ecx
c0025132:	8d 42 02             	lea    eax,[edx+0x2]
c0025135:	51                   	push   ecx
c0025136:	c1 e0 07             	shl    eax,0x7
c0025139:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002513d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025141:	50                   	push   eax
c0025142:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025148:	e8 97 ef ff ff       	call   c00240e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002514d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025151:	83 c4 10             	add    esp,0x10
c0025154:	b8 01 00 00 00       	mov    eax,0x1
c0025159:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002515e:	0f 84 cb 01 00 00    	je     c002532f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025164:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025168:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002516c:	c1 e0 09             	shl    eax,0x9
c002516f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025174:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025178:	74 0e                	je     c0025188 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002517a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025180:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025184:	89 c1                	mov    ecx,eax
c0025186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025188:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002518c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025192:	8d 42 02             	lea    eax,[edx+0x2]
c0025195:	c1 e0 07             	shl    eax,0x7
c0025198:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002519c:	8b 00                	mov    eax,DWORD PTR [eax]
c002519e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251a4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251ae:	c1 e1 05             	shl    ecx,0x5
c00251b1:	01 c8                	add    eax,ecx
c00251b3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00251b7:	83 e1 01             	and    ecx,0x1
c00251ba:	89 ce                	mov    esi,ecx
c00251bc:	8a 08                	mov    cl,BYTE PTR [eax]
c00251be:	c1 e6 06             	shl    esi,0x6
c00251c1:	83 e1 bf             	and    ecx,0xffffffbf
c00251c4:	09 f1                	or     ecx,esi
c00251c6:	88 08                	mov    BYTE PTR [eax],cl
c00251c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251ca:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00251d0:	81 c9 05 00 01 00    	or     ecx,0x10005
c00251d6:	89 08                	mov    DWORD PTR [eax],ecx
c00251d8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00251de:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00251e4:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00251ea:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00251ed:	50                   	push   eax
c00251ee:	68 90 00 00 00       	push   0x90
c00251f3:	6a 00                	push   0x0
c00251f5:	56                   	push   esi
c00251f6:	e8 55 b5 fd ff       	call   c0000750 <memset>
c00251fb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025201:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025205:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002520b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002520f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025213:	83 c4 10             	add    esp,0x10
c0025216:	48                   	dec    eax
c0025217:	25 ff ff 3f 00       	and    eax,0x3fffff
c002521c:	89 c1                	mov    ecx,eax
c002521e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025224:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025229:	09 c8                	or     eax,ecx
c002522b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025231:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025234:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002523b:	66 25 00 7f          	and    ax,0x7f00
c002523f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025243:	66 0d 27 80          	or     ax,0x8027
c0025247:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002524c:	66 89 06             	mov    WORD PTR [esi],ax
c002524f:	19 c0                	sbb    eax,eax
c0025251:	83 e0 f0             	and    eax,0xfffffff0
c0025254:	83 c0 35             	add    eax,0x35
c0025257:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002525a:	89 e8                	mov    eax,ebp
c002525c:	c1 e8 10             	shr    eax,0x10
c002525f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025262:	89 e8                	mov    eax,ebp
c0025264:	c1 e8 18             	shr    eax,0x18
c0025267:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002526a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002526e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025271:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025275:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025278:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002527c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025280:	89 d6                	mov    esi,edx
c0025282:	31 c0                	xor    eax,eax
c0025284:	c1 e6 07             	shl    esi,0x7
c0025287:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002528b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025291:	80 e1 88             	and    cl,0x88
c0025294:	74 0a                	je     c00252a0 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025296:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002529b:	74 0a                	je     c00252a7 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002529d:	40                   	inc    eax
c002529e:	eb eb                	jmp    c002528b <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00252a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252a5:	75 0a                	jne    c00252b1 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00252a7:	83 ec 0c             	sub    esp,0xc
c00252aa:	68 ad cf 02 c0       	push   0xc002cfad
c00252af:	eb 56                	jmp    c0025307 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00252b1:	b8 01 00 00 00       	mov    eax,0x1
c00252b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00252ba:	c1 e2 07             	shl    edx,0x7
c00252bd:	d3 e0                	shl    eax,cl
c00252bf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00252c3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00252c9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00252cf:	85 c8                	test   eax,ecx
c00252d1:	74 20                	je     c00252f3 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00252d3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00252d9:	0f ba e1 1e          	bt     ecx,0x1e
c00252dd:	73 ea                	jae    c00252c9 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00252df:	83 ec 0c             	sub    esp,0xc
c00252e2:	68 bb cf 02 c0       	push   0xc002cfbb
c00252e7:	e8 b1 50 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c00252ec:	83 c4 10             	add    esp,0x10
c00252ef:	31 c0                	xor    eax,eax
c00252f1:	eb 3c                	jmp    c002532f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252f3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00252f9:	0f ba e0 1e          	bt     eax,0x1e
c00252fd:	73 17                	jae    c0025316 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00252ff:	83 ec 0c             	sub    esp,0xc
c0025302:	68 bb cf 02 c0       	push   0xc002cfbb
c0025307:	e8 91 50 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c002530c:	83 c4 10             	add    esp,0x10
c002530f:	b8 01 00 00 00       	mov    eax,0x1
c0025314:	eb 19                	jmp    c002532f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025316:	31 c0                	xor    eax,eax
c0025318:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002531d:	75 10                	jne    c002532f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002531f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025325:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025329:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002532d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002532f:	83 c4 2c             	add    esp,0x2c
c0025332:	5b                   	pop    ebx
c0025333:	5e                   	pop    esi
c0025334:	5f                   	pop    edi
c0025335:	5d                   	pop    ebp
c0025336:	c3                   	ret    
c0025337:	90                   	nop

c0025338 <SATA::read(unsigned long long, int, void*)>:
c0025338:	57                   	push   edi
c0025339:	b8 04 00 00 00       	mov    eax,0x4
c002533e:	56                   	push   esi
c002533f:	53                   	push   ebx
c0025340:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025344:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025348:	8d 7a ff             	lea    edi,[edx-0x1]
c002534b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002534f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025353:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025359:	77 25                	ja     c0025380 <SATA::read(unsigned long long, int, void*)+0x48>
c002535b:	b8 06 00 00 00       	mov    eax,0x6
c0025360:	85 f6                	test   esi,esi
c0025362:	74 1c                	je     c0025380 <SATA::read(unsigned long long, int, void*)+0x48>
c0025364:	50                   	push   eax
c0025365:	50                   	push   eax
c0025366:	6a 00                	push   0x0
c0025368:	56                   	push   esi
c0025369:	52                   	push   edx
c002536a:	53                   	push   ebx
c002536b:	51                   	push   ecx
c002536c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025370:	e8 5d fd ff ff       	call   c00250d2 <SATA::access(unsigned long long, int, void*, bool)>
c0025375:	83 c4 20             	add    esp,0x20
c0025378:	85 c0                	test   eax,eax
c002537a:	0f 95 c0             	setne  al
c002537d:	0f b6 c0             	movzx  eax,al
c0025380:	5b                   	pop    ebx
c0025381:	5e                   	pop    esi
c0025382:	5f                   	pop    edi
c0025383:	c3                   	ret    

c0025384 <SATA::write(unsigned long long, int, void*)>:
c0025384:	55                   	push   ebp
c0025385:	b8 04 00 00 00       	mov    eax,0x4
c002538a:	57                   	push   edi
c002538b:	56                   	push   esi
c002538c:	53                   	push   ebx
c002538d:	83 ec 0c             	sub    esp,0xc
c0025390:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025398:	8d 73 ff             	lea    esi,[ebx-0x1]
c002539b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002539f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253a3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00253a9:	77 3d                	ja     c00253e8 <SATA::write(unsigned long long, int, void*)+0x64>
c00253ab:	b8 06 00 00 00       	mov    eax,0x6
c00253b0:	85 ed                	test   ebp,ebp
c00253b2:	74 34                	je     c00253e8 <SATA::write(unsigned long long, int, void*)+0x64>
c00253b4:	c1 e3 09             	shl    ebx,0x9
c00253b7:	01 eb                	add    ebx,ebp
c00253b9:	89 d6                	mov    esi,edx
c00253bb:	89 cf                	mov    edi,ecx
c00253bd:	83 c6 01             	add    esi,0x1
c00253c0:	83 d7 00             	adc    edi,0x0
c00253c3:	50                   	push   eax
c00253c4:	50                   	push   eax
c00253c5:	6a 01                	push   0x1
c00253c7:	55                   	push   ebp
c00253c8:	81 c5 00 02 00 00    	add    ebp,0x200
c00253ce:	6a 01                	push   0x1
c00253d0:	51                   	push   ecx
c00253d1:	52                   	push   edx
c00253d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00253d6:	e8 f7 fc ff ff       	call   c00250d2 <SATA::access(unsigned long long, int, void*, bool)>
c00253db:	83 c4 20             	add    esp,0x20
c00253de:	89 f2                	mov    edx,esi
c00253e0:	89 f9                	mov    ecx,edi
c00253e2:	39 dd                	cmp    ebp,ebx
c00253e4:	75 d3                	jne    c00253b9 <SATA::write(unsigned long long, int, void*)+0x35>
c00253e6:	31 c0                	xor    eax,eax
c00253e8:	83 c4 0c             	add    esp,0xc
c00253eb:	5b                   	pop    ebx
c00253ec:	5e                   	pop    esi
c00253ed:	5f                   	pop    edi
c00253ee:	5d                   	pop    ebp
c00253ef:	c3                   	ret    

c00253f0 <SATAPI::write(unsigned long long, int, void*)>:
c00253f0:	b8 03 00 00 00       	mov    eax,0x3
c00253f5:	c3                   	ret    

c00253f6 <SATAPI::close(int, int, void*)>:
c00253f6:	83 ec 0c             	sub    esp,0xc
c00253f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025403:	85 c0                	test   eax,eax
c0025405:	74 0c                	je     c0025413 <SATAPI::close(int, int, void*)+0x1d>
c0025407:	83 ec 0c             	sub    esp,0xc
c002540a:	8b 10                	mov    edx,DWORD PTR [eax]
c002540c:	50                   	push   eax
c002540d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025410:	83 c4 10             	add    esp,0x10
c0025413:	31 c0                	xor    eax,eax
c0025415:	83 c4 0c             	add    esp,0xc
c0025418:	c3                   	ret    
c0025419:	90                   	nop

c002541a <SATAPI::SATAPI()>:
c002541a:	83 ec 0c             	sub    esp,0xc
c002541d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025421:	83 ec 04             	sub    esp,0x4
c0025424:	68 00 08 00 00       	push   0x800
c0025429:	68 04 d0 02 c0       	push   0xc002d004
c002542e:	50                   	push   eax
c002542f:	e8 3a ee fe ff       	call   c001426e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025434:	83 c4 10             	add    esp,0x10
c0025437:	ba b0 d0 02 c0       	mov    edx,0xc002d0b0
c002543c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025440:	89 10                	mov    DWORD PTR [eax],edx
c0025442:	90                   	nop
c0025443:	83 c4 0c             	add    esp,0xc
c0025446:	c3                   	ret    
c0025447:	90                   	nop

c0025448 <SATAPI::diskRemoved()>:
c0025448:	83 ec 18             	sub    esp,0x18
c002544b:	68 10 d0 02 c0       	push   0xc002d010
c0025450:	e8 aa d5 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0025455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025459:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025460:	83 c4 1c             	add    esp,0x1c
c0025463:	c3                   	ret    

c0025464 <SATAPI::diskInserted()>:
c0025464:	53                   	push   ebx
c0025465:	83 ec 14             	sub    esp,0x14
c0025468:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002546c:	68 27 d0 02 c0       	push   0xc002d027
c0025471:	e8 89 d5 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0025476:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002547d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025480:	e8 51 ee fe ff       	call   c00142d6 <PhysicalDisk::startCache()>
c0025485:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025489:	83 c4 18             	add    esp,0x18
c002548c:	5b                   	pop    ebx
c002548d:	e9 cc 10 ff ff       	jmp    c001655e <createPartitionsForDisk(PhysicalDisk*)>

c0025492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025492:	55                   	push   ebp
c0025493:	57                   	push   edi
c0025494:	56                   	push   esi
c0025495:	53                   	push   ebx
c0025496:	83 ec 34             	sub    esp,0x34
c0025499:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002549d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00254a1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00254a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00254a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00254ad:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00254bd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00254c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00254c7:	c1 e0 07             	shl    eax,0x7
c00254ca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00254ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00254d2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00254dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e0:	8d 58 02             	lea    ebx,[eax+0x2]
c00254e3:	c1 e3 07             	shl    ebx,0x7
c00254e6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00254ea:	53                   	push   ebx
c00254eb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254f1:	e8 ee eb ff ff       	call   c00240e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00254f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00254fa:	83 c4 10             	add    esp,0x10
c00254fd:	b8 01 00 00 00       	mov    eax,0x1
c0025502:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025507:	0f 84 85 01 00 00    	je     c0025692 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002550d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025513:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025515:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002551b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025521:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025525:	c1 e1 05             	shl    ecx,0x5
c0025528:	01 c8                	add    eax,ecx
c002552a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002552c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025532:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025538:	89 08                	mov    DWORD PTR [eax],ecx
c002553a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025540:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025546:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002554c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002554f:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025552:	50                   	push   eax
c0025553:	68 90 00 00 00       	push   0x90
c0025558:	6a 00                	push   0x0
c002555a:	53                   	push   ebx
c002555b:	e8 f0 b1 fd ff       	call   c0000750 <memset>
c0025560:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025564:	b9 0c 00 00 00       	mov    ecx,0xc
c0025569:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002556b:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025571:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025575:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002557b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002557f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025583:	48                   	dec    eax
c0025584:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025589:	89 c1                	mov    ecx,eax
c002558b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025591:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025596:	09 c8                	or     eax,ecx
c0025598:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002559e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00255a1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00255a8:	66 25 00 7f          	and    ax,0x7f00
c00255ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00255b0:	66 0d 27 80          	or     ax,0x8027
c00255b4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00255b8:	66 89 03             	mov    WORD PTR [ebx],ax
c00255bb:	89 d0                	mov    eax,edx
c00255bd:	c1 ea 18             	shr    edx,0x18
c00255c0:	c1 e8 10             	shr    eax,0x10
c00255c3:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00255c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00255c9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00255cd:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00255d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00255d4:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00255d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00255db:	83 c4 10             	add    esp,0x10
c00255de:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00255e2:	31 c0                	xor    eax,eax
c00255e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00255e8:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00255ee:	80 e2 88             	and    dl,0x88
c00255f1:	74 0a                	je     c00255fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00255f3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255f8:	74 0a                	je     c0025604 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00255fa:	40                   	inc    eax
c00255fb:	eb eb                	jmp    c00255e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00255fd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025602:	75 0f                	jne    c0025613 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025604:	83 ec 0c             	sub    esp,0xc
c0025607:	68 ad cf 02 c0       	push   0xc002cfad
c002560c:	e8 8c 4d ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0025611:	eb 3f                	jmp    c0025652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025613:	ba 01 00 00 00       	mov    edx,0x1
c0025618:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002561c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025620:	d3 e2                	shl    edx,cl
c0025622:	c1 e0 07             	shl    eax,0x7
c0025625:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c002562b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002562f:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025635:	85 ca                	test   edx,ecx
c0025637:	74 23                	je     c002565c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025639:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c002563f:	0f ba e1 1e          	bt     ecx,0x1e
c0025643:	73 ea                	jae    c002562f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025645:	83 ec 0c             	sub    esp,0xc
c0025648:	68 3f d0 02 c0       	push   0xc002d03f
c002564d:	e8 ad d3 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0025652:	83 c4 10             	add    esp,0x10
c0025655:	b8 01 00 00 00       	mov    eax,0x1
c002565a:	eb 36                	jmp    c0025692 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002565c:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025662:	0f ba e0 1e          	bt     eax,0x1e
c0025666:	73 0a                	jae    c0025672 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025668:	83 ec 0c             	sub    esp,0xc
c002566b:	68 52 d0 02 c0       	push   0xc002d052
c0025670:	eb db                	jmp    c002564d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025672:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025677:	74 17                	je     c0025690 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025679:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002567e:	74 10                	je     c0025690 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025680:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025686:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002568a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002568e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025690:	31 c0                	xor    eax,eax
c0025692:	83 c4 2c             	add    esp,0x2c
c0025695:	5b                   	pop    ebx
c0025696:	5e                   	pop    esi
c0025697:	5f                   	pop    edi
c0025698:	5d                   	pop    ebp
c0025699:	c3                   	ret    

c002569a <SATAPI::eject()>:
c002569a:	57                   	push   edi
c002569b:	b9 03 00 00 00       	mov    ecx,0x3
c00256a0:	53                   	push   ebx
c00256a1:	83 ec 14             	sub    esp,0x14
c00256a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00256a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00256ac:	fc                   	cld    
c00256ad:	31 c0                	xor    eax,eax
c00256af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00256b1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00256b6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00256bb:	50                   	push   eax
c00256bc:	6a 00                	push   0x0
c00256be:	6a 00                	push   0x0
c00256c0:	6a 00                	push   0x0
c00256c2:	6a 00                	push   0x0
c00256c4:	6a 02                	push   0x2
c00256c6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00256ca:	50                   	push   eax
c00256cb:	53                   	push   ebx
c00256cc:	e8 c1 fd ff ff       	call   c0025492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256d1:	83 c4 14             	add    esp,0x14
c00256d4:	53                   	push   ebx
c00256d5:	e8 6e fd ff ff       	call   c0025448 <SATAPI::diskRemoved()>
c00256da:	83 c4 24             	add    esp,0x24
c00256dd:	31 c0                	xor    eax,eax
c00256df:	5b                   	pop    ebx
c00256e0:	5f                   	pop    edi
c00256e1:	c3                   	ret    

c00256e2 <SATAPI::detectMedia()>:
c00256e2:	56                   	push   esi
c00256e3:	53                   	push   ebx
c00256e4:	83 ec 28             	sub    esp,0x28
c00256e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256eb:	6a 0c                	push   0xc
c00256ed:	6a 00                	push   0x0
c00256ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00256f3:	56                   	push   esi
c00256f4:	e8 57 b0 fd ff       	call   c0000750 <memset>
c00256f9:	83 c4 0c             	add    esp,0xc
c00256fc:	6a 00                	push   0x0
c00256fe:	6a 00                	push   0x0
c0025700:	6a 00                	push   0x0
c0025702:	6a 00                	push   0x0
c0025704:	6a 00                	push   0x0
c0025706:	56                   	push   esi
c0025707:	53                   	push   ebx
c0025708:	e8 85 fd ff ff       	call   c0025492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002570d:	83 c4 1c             	add    esp,0x1c
c0025710:	6a 0c                	push   0xc
c0025712:	6a 00                	push   0x0
c0025714:	56                   	push   esi
c0025715:	e8 36 b0 fd ff       	call   c0000750 <memset>
c002571a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002571f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025724:	83 c4 0c             	add    esp,0xc
c0025727:	6a 01                	push   0x1
c0025729:	8d 44 24 16          	lea    eax,[esp+0x16]
c002572d:	50                   	push   eax
c002572e:	6a 00                	push   0x0
c0025730:	6a 00                	push   0x0
c0025732:	6a 12                	push   0x12
c0025734:	56                   	push   esi
c0025735:	53                   	push   ebx
c0025736:	e8 57 fd ff ff       	call   c0025492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002573b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002573f:	83 c4 20             	add    esp,0x20
c0025742:	83 e0 7f             	and    eax,0x7f
c0025745:	3c 70                	cmp    al,0x70
c0025747:	74 15                	je     c002575e <SATAPI::detectMedia()+0x7c>
c0025749:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025750:	75 0c                	jne    c002575e <SATAPI::detectMedia()+0x7c>
c0025752:	83 ec 0c             	sub    esp,0xc
c0025755:	53                   	push   ebx
c0025756:	e8 09 fd ff ff       	call   c0025464 <SATAPI::diskInserted()>
c002575b:	83 c4 10             	add    esp,0x10
c002575e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025762:	83 e0 0f             	and    eax,0xf
c0025765:	3c 02                	cmp    al,0x2
c0025767:	75 1b                	jne    c0025784 <SATAPI::detectMedia()+0xa2>
c0025769:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002576e:	75 2d                	jne    c002579d <SATAPI::detectMedia()+0xbb>
c0025770:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025777:	74 24                	je     c002579d <SATAPI::detectMedia()+0xbb>
c0025779:	83 ec 0c             	sub    esp,0xc
c002577c:	53                   	push   ebx
c002577d:	e8 c6 fc ff ff       	call   c0025448 <SATAPI::diskRemoved()>
c0025782:	eb 16                	jmp    c002579a <SATAPI::detectMedia()+0xb8>
c0025784:	84 c0                	test   al,al
c0025786:	75 15                	jne    c002579d <SATAPI::detectMedia()+0xbb>
c0025788:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002578f:	75 0c                	jne    c002579d <SATAPI::detectMedia()+0xbb>
c0025791:	83 ec 0c             	sub    esp,0xc
c0025794:	53                   	push   ebx
c0025795:	e8 ca fc ff ff       	call   c0025464 <SATAPI::diskInserted()>
c002579a:	83 c4 10             	add    esp,0x10
c002579d:	83 c4 24             	add    esp,0x24
c00257a0:	5b                   	pop    ebx
c00257a1:	5e                   	pop    esi
c00257a2:	c3                   	ret    
c00257a3:	90                   	nop

c00257a4 <SATAPI::open(int, int, void*)>:
c00257a4:	56                   	push   esi
c00257a5:	53                   	push   ebx
c00257a6:	50                   	push   eax
c00257a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257af:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00257b9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00257bf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00257c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257cd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00257d7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00257dd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00257e4:	e8 ba a5 fe ff       	call   c000fda3 <Phys::allocatePage()>
c00257e9:	89 c6                	mov    esi,eax
c00257eb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00257f1:	81 c6 00 10 00 00    	add    esi,0x1000
c00257f7:	e8 a7 a5 fe ff       	call   c000fda3 <Phys::allocatePage()>
c00257fc:	39 c6                	cmp    esi,eax
c00257fe:	74 10                	je     c0025810 <SATAPI::open(int, int, void*)+0x6c>
c0025800:	83 ec 0c             	sub    esp,0xc
c0025803:	68 67 d0 02 c0       	push   0xc002d067
c0025808:	e8 90 4b ff ff       	call   c001a39d <Krnl::panic(char const*)>
c002580d:	83 c4 10             	add    esp,0x10
c0025810:	83 ec 0c             	sub    esp,0xc
c0025813:	6a 02                	push   0x2
c0025815:	e8 13 be fe ff       	call   c001162d <Virt::allocateKernelVirtualPages(int)>
c002581a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025820:	6a 03                	push   0x3
c0025822:	50                   	push   eax
c0025823:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025829:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c002582f:	e8 a0 c4 fe ff       	call   c0011cd4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025834:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002583b:	83 c4 14             	add    esp,0x14
c002583e:	53                   	push   ebx
c002583f:	e8 9e fe ff ff       	call   c00256e2 <SATAPI::detectMedia()>
c0025844:	83 c4 14             	add    esp,0x14
c0025847:	31 c0                	xor    eax,eax
c0025849:	5b                   	pop    ebx
c002584a:	5e                   	pop    esi
c002584b:	c3                   	ret    

c002584c <SATAPI::read(unsigned long long, int, void*)>:
c002584c:	55                   	push   ebp
c002584d:	57                   	push   edi
c002584e:	56                   	push   esi
c002584f:	53                   	push   ebx
c0025850:	83 ec 1c             	sub    esp,0x1c
c0025853:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025857:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002585b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002585f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025866:	74 19                	je     c0025881 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025868:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002586d:	7e 2e                	jle    c002589d <SATAPI::read(unsigned long long, int, void*)+0x51>
c002586f:	83 ec 0c             	sub    esp,0xc
c0025872:	68 7d d0 02 c0       	push   0xc002d07d
c0025877:	e8 21 4b ff ff       	call   c001a39d <Krnl::panic(char const*)>
c002587c:	83 c4 10             	add    esp,0x10
c002587f:	eb 1c                	jmp    c002589d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025881:	83 ec 0c             	sub    esp,0xc
c0025884:	55                   	push   ebp
c0025885:	e8 58 fe ff ff       	call   c00256e2 <SATAPI::detectMedia()>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	b8 02 00 00 00       	mov    eax,0x2
c0025892:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025899:	75 cd                	jne    c0025868 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002589b:	eb 49                	jmp    c00258e6 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002589d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00258a1:	b9 03 00 00 00       	mov    ecx,0x3
c00258a6:	fc                   	cld    
c00258a7:	31 c0                	xor    eax,eax
c00258a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00258ab:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00258b0:	89 d8                	mov    eax,ebx
c00258b2:	86 e0                	xchg   al,ah
c00258b4:	c1 c0 10             	rol    eax,0x10
c00258b7:	86 e0                	xchg   al,ah
c00258b9:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00258bd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00258c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00258c5:	50                   	push   eax
c00258c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00258ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00258ce:	56                   	push   esi
c00258cf:	53                   	push   ebx
c00258d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00258d4:	c1 e0 0b             	shl    eax,0xb
c00258d7:	50                   	push   eax
c00258d8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00258dc:	50                   	push   eax
c00258dd:	55                   	push   ebp
c00258de:	e8 af fb ff ff       	call   c0025492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00258e3:	83 c4 20             	add    esp,0x20
c00258e6:	83 c4 1c             	add    esp,0x1c
c00258e9:	5b                   	pop    ebx
c00258ea:	5e                   	pop    esi
c00258eb:	5f                   	pop    edi
c00258ec:	5d                   	pop    ebp
c00258ed:	c3                   	ret    

c00258ee <AVX::open(int, int, void*)>:
c00258ee:	83 ec 0c             	sub    esp,0xc
c00258f1:	e8 42 11 00 00       	call   c0026a38 <avxInit>
c00258f6:	b8 00 00 00 00       	mov    eax,0x0
c00258fb:	83 c4 0c             	add    esp,0xc
c00258fe:	c3                   	ret    
c00258ff:	90                   	nop

c0025900 <AVX::close(int, int, void*)>:
c0025900:	83 ec 0c             	sub    esp,0xc
c0025903:	e8 31 11 00 00       	call   c0026a39 <avxClose>
c0025908:	b8 00 00 00 00       	mov    eax,0x0
c002590d:	83 c4 0c             	add    esp,0xc
c0025910:	c3                   	ret    
c0025911:	90                   	nop

c0025912 <AVX::available()>:
c0025912:	83 ec 0c             	sub    esp,0xc
c0025915:	e8 16 11 00 00       	call   c0026a30 <avxDetect>
c002591a:	85 c0                	test   eax,eax
c002591c:	0f 95 c0             	setne  al
c002591f:	83 c4 0c             	add    esp,0xc
c0025922:	c3                   	ret    
c0025923:	90                   	nop

c0025924 <AVX::save(void*)>:
c0025924:	83 ec 0c             	sub    esp,0xc
c0025927:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002592b:	83 ec 0c             	sub    esp,0xc
c002592e:	50                   	push   eax
c002592f:	e8 02 11 00 00       	call   c0026a36 <avxSave>
c0025934:	83 c4 10             	add    esp,0x10
c0025937:	90                   	nop
c0025938:	83 c4 0c             	add    esp,0xc
c002593b:	c3                   	ret    

c002593c <AVX::load(void*)>:
c002593c:	83 ec 0c             	sub    esp,0xc
c002593f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025943:	83 ec 0c             	sub    esp,0xc
c0025946:	50                   	push   eax
c0025947:	e8 eb 10 00 00       	call   c0026a37 <avxLoad>
c002594c:	83 c4 10             	add    esp,0x10
c002594f:	90                   	nop
c0025950:	83 c4 0c             	add    esp,0xc
c0025953:	c3                   	ret    

c0025954 <AVX::AVX()>:
c0025954:	83 ec 0c             	sub    esp,0xc
c0025957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002595b:	83 ec 08             	sub    esp,0x8
c002595e:	68 e0 d0 02 c0       	push   0xc002d0e0
c0025963:	50                   	push   eax
c0025964:	e8 e3 e9 fe ff       	call   c001434c <FPU::FPU(char const*)>
c0025969:	83 c4 10             	add    esp,0x10
c002596c:	ba f0 d0 02 c0       	mov    edx,0xc002d0f0
c0025971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025975:	89 10                	mov    DWORD PTR [eax],edx
c0025977:	90                   	nop
c0025978:	83 c4 0c             	add    esp,0xc
c002597b:	c3                   	ret    

c002597c <MMX::available()>:
c002597c:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025981:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025987:	83 e0 20             	and    eax,0x20
c002598a:	84 c0                	test   al,al
c002598c:	0f 95 c0             	setne  al
c002598f:	c3                   	ret    

c0025990 <MMX::open(int, int, void*)>:
c0025990:	83 ec 0c             	sub    esp,0xc
c0025993:	e8 2a 11 00 00       	call   c0026ac2 <x87Init>
c0025998:	b8 00 00 00 00       	mov    eax,0x0
c002599d:	83 c4 0c             	add    esp,0xc
c00259a0:	c3                   	ret    
c00259a1:	90                   	nop

c00259a2 <MMX::close(int, int, void*)>:
c00259a2:	83 ec 0c             	sub    esp,0xc
c00259a5:	e8 32 11 00 00       	call   c0026adc <x87Close>
c00259aa:	b8 00 00 00 00       	mov    eax,0x0
c00259af:	83 c4 0c             	add    esp,0xc
c00259b2:	c3                   	ret    
c00259b3:	90                   	nop

c00259b4 <MMX::save(void*)>:
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259bb:	83 ec 0c             	sub    esp,0xc
c00259be:	50                   	push   eax
c00259bf:	e8 ed 10 00 00       	call   c0026ab1 <x87Save>
c00259c4:	83 c4 10             	add    esp,0x10
c00259c7:	90                   	nop
c00259c8:	83 c4 0c             	add    esp,0xc
c00259cb:	c3                   	ret    

c00259cc <MMX::load(void*)>:
c00259cc:	83 ec 0c             	sub    esp,0xc
c00259cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259d3:	83 ec 0c             	sub    esp,0xc
c00259d6:	50                   	push   eax
c00259d7:	e8 de 10 00 00       	call   c0026aba <x87Load>
c00259dc:	83 c4 10             	add    esp,0x10
c00259df:	90                   	nop
c00259e0:	83 c4 0c             	add    esp,0xc
c00259e3:	c3                   	ret    

c00259e4 <MMX::MMX()>:
c00259e4:	83 ec 0c             	sub    esp,0xc
c00259e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259eb:	83 ec 08             	sub    esp,0x8
c00259ee:	68 20 d1 02 c0       	push   0xc002d120
c00259f3:	50                   	push   eax
c00259f4:	e8 53 e9 fe ff       	call   c001434c <FPU::FPU(char const*)>
c00259f9:	83 c4 10             	add    esp,0x10
c00259fc:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0025a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a05:	89 10                	mov    DWORD PTR [eax],edx
c0025a07:	90                   	nop
c0025a08:	83 c4 0c             	add    esp,0xc
c0025a0b:	c3                   	ret    

c0025a0c <SSE::open(int, int, void*)>:
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	e8 60 10 00 00       	call   c0026a74 <sseInit>
c0025a14:	b8 00 00 00 00       	mov    eax,0x0
c0025a19:	83 c4 0c             	add    esp,0xc
c0025a1c:	c3                   	ret    
c0025a1d:	90                   	nop

c0025a1e <SSE::close(int, int, void*)>:
c0025a1e:	83 ec 0c             	sub    esp,0xc
c0025a21:	e8 5e 10 00 00       	call   c0026a84 <sseClose>
c0025a26:	b8 00 00 00 00       	mov    eax,0x0
c0025a2b:	83 c4 0c             	add    esp,0xc
c0025a2e:	c3                   	ret    
c0025a2f:	90                   	nop

c0025a30 <SSE::available()>:
c0025a30:	83 ec 1c             	sub    esp,0x1c
c0025a33:	e8 18 10 00 00       	call   c0026a50 <absolutelyNoChanceInHell>
c0025a38:	85 c0                	test   eax,eax
c0025a3a:	0f 95 c0             	setne  al
c0025a3d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025a41:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025a45:	83 c4 1c             	add    esp,0x1c
c0025a48:	c3                   	ret    
c0025a49:	90                   	nop

c0025a4a <SSE::save(void*)>:
c0025a4a:	83 ec 0c             	sub    esp,0xc
c0025a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a51:	83 ec 0c             	sub    esp,0xc
c0025a54:	50                   	push   eax
c0025a55:	e8 0e 10 00 00       	call   c0026a68 <sseSave>
c0025a5a:	83 c4 10             	add    esp,0x10
c0025a5d:	90                   	nop
c0025a5e:	83 c4 0c             	add    esp,0xc
c0025a61:	c3                   	ret    

c0025a62 <SSE::load(void*)>:
c0025a62:	83 ec 0c             	sub    esp,0xc
c0025a65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a69:	83 ec 0c             	sub    esp,0xc
c0025a6c:	50                   	push   eax
c0025a6d:	e8 fc 0f 00 00       	call   c0026a6e <sseLoad>
c0025a72:	83 c4 10             	add    esp,0x10
c0025a75:	90                   	nop
c0025a76:	83 c4 0c             	add    esp,0xc
c0025a79:	c3                   	ret    

c0025a7a <SSE::SSE()>:
c0025a7a:	83 ec 0c             	sub    esp,0xc
c0025a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a81:	83 ec 08             	sub    esp,0x8
c0025a84:	68 60 d1 02 c0       	push   0xc002d160
c0025a89:	50                   	push   eax
c0025a8a:	e8 bd e8 fe ff       	call   c001434c <FPU::FPU(char const*)>
c0025a8f:	83 c4 10             	add    esp,0x10
c0025a92:	ba 70 d1 02 c0       	mov    edx,0xc002d170
c0025a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9b:	89 10                	mov    DWORD PTR [eax],edx
c0025a9d:	90                   	nop
c0025a9e:	83 c4 0c             	add    esp,0xc
c0025aa1:	c3                   	ret    

c0025aa2 <x87::open(int, int, void*)>:
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	e8 18 10 00 00       	call   c0026ac2 <x87Init>
c0025aaa:	b8 00 00 00 00       	mov    eax,0x0
c0025aaf:	83 c4 0c             	add    esp,0xc
c0025ab2:	c3                   	ret    
c0025ab3:	90                   	nop

c0025ab4 <x87::close(int, int, void*)>:
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	e8 20 10 00 00       	call   c0026adc <x87Close>
c0025abc:	b8 00 00 00 00       	mov    eax,0x0
c0025ac1:	83 c4 0c             	add    esp,0xc
c0025ac4:	c3                   	ret    
c0025ac5:	90                   	nop

c0025ac6 <x87::available()>:
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	e8 c8 0f 00 00       	call   c0026a96 <x87Detect>
c0025ace:	85 c0                	test   eax,eax
c0025ad0:	0f 95 c0             	setne  al
c0025ad3:	83 c4 0c             	add    esp,0xc
c0025ad6:	c3                   	ret    
c0025ad7:	90                   	nop

c0025ad8 <x87::save(void*)>:
c0025ad8:	83 ec 0c             	sub    esp,0xc
c0025adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025adf:	83 ec 0c             	sub    esp,0xc
c0025ae2:	50                   	push   eax
c0025ae3:	e8 c9 0f 00 00       	call   c0026ab1 <x87Save>
c0025ae8:	83 c4 10             	add    esp,0x10
c0025aeb:	90                   	nop
c0025aec:	83 c4 0c             	add    esp,0xc
c0025aef:	c3                   	ret    

c0025af0 <x87::load(void*)>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025af7:	83 ec 0c             	sub    esp,0xc
c0025afa:	50                   	push   eax
c0025afb:	e8 ba 0f 00 00       	call   c0026aba <x87Load>
c0025b00:	83 c4 10             	add    esp,0x10
c0025b03:	90                   	nop
c0025b04:	83 c4 0c             	add    esp,0xc
c0025b07:	c3                   	ret    

c0025b08 <x87::x87()>:
c0025b08:	83 ec 0c             	sub    esp,0xc
c0025b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0f:	83 ec 08             	sub    esp,0x8
c0025b12:	68 a0 d1 02 c0       	push   0xc002d1a0
c0025b17:	50                   	push   eax
c0025b18:	e8 2f e8 fe ff       	call   c001434c <FPU::FPU(char const*)>
c0025b1d:	83 c4 10             	add    esp,0x10
c0025b20:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c0025b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b29:	89 10                	mov    DWORD PTR [eax],edx
c0025b2b:	90                   	nop
c0025b2c:	83 c4 0c             	add    esp,0xc
c0025b2f:	c3                   	ret    

c0025b30 <APIC::disable()>:
c0025b30:	90                   	nop
c0025b31:	c3                   	ret    

c0025b32 <APIC::close(int, int, void*)>:
c0025b32:	55                   	push   ebp
c0025b33:	89 e5                	mov    ebp,esp
c0025b35:	83 ec 08             	sub    esp,0x8
c0025b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b3d:	83 c0 3c             	add    eax,0x3c
c0025b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b42:	83 ec 0c             	sub    esp,0xc
c0025b45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b48:	ff d0                	call   eax
c0025b4a:	83 c4 10             	add    esp,0x10
c0025b4d:	b8 00 00 00 00       	mov    eax,0x0
c0025b52:	c9                   	leave  
c0025b53:	c3                   	ret    

c0025b54 <IOAPIC::close(int, int, void*)>:
c0025b54:	b8 00 00 00 00       	mov    eax,0x0
c0025b59:	c3                   	ret    

c0025b5a <APIC::io_wait()>:
c0025b5a:	eb 00                	jmp    c0025b5c <APIC::io_wait()+0x2>
c0025b5c:	eb 00                	jmp    c0025b5e <APIC::io_wait()+0x4>
c0025b5e:	90                   	nop
c0025b5f:	c3                   	ret    

c0025b60 <APIC::getBase()>:
c0025b60:	55                   	push   ebp
c0025b61:	89 e5                	mov    ebp,esp
c0025b63:	83 ec 18             	sub    esp,0x18
c0025b66:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025b6b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025b71:	83 e0 08             	and    eax,0x8
c0025b74:	84 c0                	test   al,al
c0025b76:	75 07                	jne    c0025b7f <APIC::getBase()+0x1f>
c0025b78:	b8 00 00 00 00       	mov    eax,0x0
c0025b7d:	eb 21                	jmp    c0025ba0 <APIC::getBase()+0x40>
c0025b7f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025b84:	83 ec 08             	sub    esp,0x8
c0025b87:	6a 1b                	push   0x1b
c0025b89:	50                   	push   eax
c0025b8a:	e8 f3 91 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025b8f:	83 c4 10             	add    esp,0x10
c0025b92:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b95:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025b98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b9b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025ba0:	c9                   	leave  
c0025ba1:	c3                   	ret    

c0025ba2 <APIC::eoi(unsigned char)>:
c0025ba2:	55                   	push   ebp
c0025ba3:	89 e5                	mov    ebp,esp
c0025ba5:	83 ec 28             	sub    esp,0x28
c0025ba8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bae:	83 ec 0c             	sub    esp,0xc
c0025bb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb4:	e8 a7 ff ff ff       	call   c0025b60 <APIC::getBase()>
c0025bb9:	83 c4 10             	add    esp,0x10
c0025bbc:	05 b0 00 00 00       	add    eax,0xb0
c0025bc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025bc7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025bcd:	90                   	nop
c0025bce:	c9                   	leave  
c0025bcf:	c3                   	ret    

c0025bd0 <APIC::open(int, int, void*)>:
c0025bd0:	55                   	push   ebp
c0025bd1:	89 e5                	mov    ebp,esp
c0025bd3:	57                   	push   edi
c0025bd4:	56                   	push   esi
c0025bd5:	53                   	push   ebx
c0025bd6:	83 ec 2c             	sub    esp,0x2c
c0025bd9:	83 ec 0c             	sub    esp,0xc
c0025bdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bdf:	e8 7c ff ff ff       	call   c0025b60 <APIC::getBase()>
c0025be4:	83 c4 10             	add    esp,0x10
c0025be7:	89 c2                	mov    edx,eax
c0025be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bec:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bf2:	0f b6 f8             	movzx  edi,al
c0025bf5:	89 d0                	mov    eax,edx
c0025bf7:	ba 00 00 00 00       	mov    edx,0x0
c0025bfc:	89 c1                	mov    ecx,eax
c0025bfe:	80 e5 ff             	and    ch,0xff
c0025c01:	89 cb                	mov    ebx,ecx
c0025c03:	0f b6 f2             	movzx  esi,dl
c0025c06:	89 d8                	mov    eax,ebx
c0025c08:	89 f2                	mov    edx,esi
c0025c0a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c0d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c10:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c14:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c18:	83 e0 00             	and    eax,0x0
c0025c1b:	09 d0                	or     eax,edx
c0025c1d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c24:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c2a:	8d 50 01             	lea    edx,[eax+0x1]
c0025c2d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c30:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c36:	0f b6 d0             	movzx  edx,al
c0025c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c3c:	83 c2 08             	add    edx,0x8
c0025c3f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c43:	0f b6 c9             	movzx  ecx,cl
c0025c46:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025c4c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c50:	83 ec 0c             	sub    esp,0xc
c0025c53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c56:	e8 05 ff ff ff       	call   c0025b60 <APIC::getBase()>
c0025c5b:	83 c4 10             	add    esp,0x10
c0025c5e:	05 f0 00 00 00       	add    eax,0xf0
c0025c63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025c66:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c6b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c6e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025c75:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025c7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c7f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c82:	89 10                	mov    DWORD PTR [eax],edx
c0025c84:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025c8b:	a1 10 ef 02 c0       	mov    eax,ds:0xc002ef10
c0025c90:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025c93:	7d 7c                	jge    c0025d11 <APIC::open(int, int, void*)+0x141>
c0025c95:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c98:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c0025c9f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025ca2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ca5:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c0025cac:	c1 e8 08             	shr    eax,0x8
c0025caf:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025cb3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025cb6:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c0025cbd:	c1 e8 18             	shr    eax,0x18
c0025cc0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025cc3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025cc7:	75 40                	jne    c0025d09 <APIC::open(int, int, void*)+0x139>
c0025cc9:	83 ec 0c             	sub    esp,0xc
c0025ccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ccf:	e8 8c fe ff ff       	call   c0025b60 <APIC::getBase()>
c0025cd4:	83 c4 10             	add    esp,0x10
c0025cd7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025cdb:	75 07                	jne    c0025ce4 <APIC::open(int, int, void*)+0x114>
c0025cdd:	ba 60 03 00 00       	mov    edx,0x360
c0025ce2:	eb 05                	jmp    c0025ce9 <APIC::open(int, int, void*)+0x119>
c0025ce4:	ba 50 03 00 00       	mov    edx,0x350
c0025ce9:	01 d0                	add    eax,edx
c0025ceb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025cee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cf3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025cf6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025cfd:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025d01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025d04:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d07:	89 10                	mov    DWORD PTR [eax],edx
c0025d09:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025d0c:	e9 7a ff ff ff       	jmp    c0025c8b <APIC::open(int, int, void*)+0xbb>
c0025d11:	b8 00 00 00 00       	mov    eax,0x0
c0025d16:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d19:	5b                   	pop    ebx
c0025d1a:	5e                   	pop    esi
c0025d1b:	5f                   	pop    edi
c0025d1c:	5d                   	pop    ebp
c0025d1d:	c3                   	ret    

c0025d1e <IOAPIC::IOAPIC()>:
c0025d1e:	83 ec 0c             	sub    esp,0xc
c0025d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d25:	83 ec 08             	sub    esp,0x8
c0025d28:	68 e0 d1 02 c0       	push   0xc002d1e0
c0025d2d:	50                   	push   eax
c0025d2e:	e8 09 e3 fe ff       	call   c001403c <Device::Device(char const*)>
c0025d33:	83 c4 10             	add    esp,0x10
c0025d36:	ba 08 d3 02 c0       	mov    edx,0xc002d308
c0025d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3f:	89 10                	mov    DWORD PTR [eax],edx
c0025d41:	90                   	nop
c0025d42:	83 c4 0c             	add    esp,0xc
c0025d45:	c3                   	ret    

c0025d46 <APIC::APIC()>:
c0025d46:	53                   	push   ebx
c0025d47:	83 ec 18             	sub    esp,0x18
c0025d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d4e:	83 ec 08             	sub    esp,0x8
c0025d51:	68 e8 d1 02 c0       	push   0xc002d1e8
c0025d56:	50                   	push   eax
c0025d57:	e8 4a ea fe ff       	call   c00147a6 <InterruptController::InterruptController(char const*)>
c0025d5c:	83 c4 10             	add    esp,0x10
c0025d5f:	ba c0 d2 02 c0       	mov    edx,0xc002d2c0
c0025d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d68:	89 10                	mov    DWORD PTR [eax],edx
c0025d6a:	a0 e0 09 03 c0       	mov    al,ds:0xc00309e0
c0025d6f:	83 f0 01             	xor    eax,0x1
c0025d72:	84 c0                	test   al,al
c0025d74:	0f 84 a1 00 00 00    	je     c0025e1b <APIC::APIC()+0xd5>
c0025d7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025d7f:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0025d84:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025d88:	0f 83 86 00 00 00    	jae    c0025e14 <APIC::APIC()+0xce>
c0025d8e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025d96:	83 ec 0c             	sub    esp,0xc
c0025d99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025d9d:	e8 05 9c fe ff       	call   c000f9a7 <malloc>
c0025da2:	83 c4 10             	add    esp,0x10
c0025da5:	89 c3                	mov    ebx,eax
c0025da7:	83 ec 0c             	sub    esp,0xc
c0025daa:	53                   	push   ebx
c0025dab:	e8 6e ff ff ff       	call   c0025d1e <IOAPIC::IOAPIC()>
c0025db0:	83 c4 10             	add    esp,0x10
c0025db3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025db7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025dc0:	89 14 85 c0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf640],edx
c0025dc7:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c0025dcc:	40                   	inc    eax
c0025dcd:	a3 a0 09 03 c0       	mov    ds:0xc00309a0,eax
c0025dd2:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025dd7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025ddd:	83 ec 08             	sub    esp,0x8
c0025de0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025de4:	50                   	push   eax
c0025de5:	e8 4e e0 fe ff       	call   c0013e38 <Device::addChild(Device*)>
c0025dea:	83 c4 10             	add    esp,0x10
c0025ded:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025df3:	83 c0 08             	add    eax,0x8
c0025df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025df8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025dfd:	6a 00                	push   0x0
c0025dff:	6a 00                	push   0x0
c0025e01:	52                   	push   edx
c0025e02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025e06:	ff d0                	call   eax
c0025e08:	83 c4 10             	add    esp,0x10
c0025e0b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025e0f:	e9 6b ff ff ff       	jmp    c0025d7f <APIC::APIC()+0x39>
c0025e14:	c6 05 e0 09 03 c0 01 	mov    BYTE PTR ds:0xc00309e0,0x1
c0025e1b:	90                   	nop
c0025e1c:	83 c4 18             	add    esp,0x18
c0025e1f:	5b                   	pop    ebx
c0025e20:	c3                   	ret    
c0025e21:	90                   	nop

c0025e22 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025e22:	55                   	push   ebp
c0025e23:	89 e5                	mov    ebp,esp
c0025e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025e2e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e31:	72 1d                	jb     c0025e50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e36:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025e45:	01 d0                	add    eax,edx
c0025e47:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e4a:	73 04                	jae    c0025e50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e4c:	b0 01                	mov    al,0x1
c0025e4e:	eb 02                	jmp    c0025e52 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025e50:	b0 00                	mov    al,0x0
c0025e52:	5d                   	pop    ebp
c0025e53:	c3                   	ret    

c0025e54 <IOAPIC::read(int)>:
c0025e54:	55                   	push   ebp
c0025e55:	89 e5                	mov    ebp,esp
c0025e57:	83 ec 10             	sub    esp,0x10
c0025e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e69:	0f b6 d0             	movzx  edx,al
c0025e6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e6f:	89 10                	mov    DWORD PTR [eax],edx
c0025e71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e74:	83 c0 10             	add    eax,0x10
c0025e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e79:	c9                   	leave  
c0025e7a:	c3                   	ret    
c0025e7b:	90                   	nop

c0025e7c <IOAPIC::open(int, int, void*)>:
c0025e7c:	55                   	push   ebp
c0025e7d:	89 e5                	mov    ebp,esp
c0025e7f:	57                   	push   edi
c0025e80:	56                   	push   esi
c0025e81:	53                   	push   ebx
c0025e82:	83 ec 0c             	sub    esp,0xc
c0025e85:	83 ec 0c             	sub    esp,0xc
c0025e88:	68 13 d2 02 c0       	push   0xc002d213
c0025e8d:	e8 6d cb fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0025e92:	83 c4 10             	add    esp,0x10
c0025e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e9b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ea4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025eaa:	8b 14 85 00 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1000]
c0025eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eb4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ebd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ec3:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0025eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ecd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ed6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025edf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ee5:	0f b6 f8             	movzx  edi,al
c0025ee8:	89 d0                	mov    eax,edx
c0025eea:	ba 00 00 00 00       	mov    edx,0x0
c0025eef:	89 c1                	mov    ecx,eax
c0025ef1:	80 e5 ff             	and    ch,0xff
c0025ef4:	89 cb                	mov    ebx,ecx
c0025ef6:	0f b6 f2             	movzx  esi,dl
c0025ef9:	89 d8                	mov    eax,ebx
c0025efb:	89 f2                	mov    edx,esi
c0025efd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f00:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f03:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f07:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f0b:	83 e0 00             	and    eax,0x0
c0025f0e:	09 d0                	or     eax,edx
c0025f10:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f17:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f1d:	8d 50 01             	lea    edx,[eax+0x1]
c0025f20:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f23:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f29:	0f b6 d0             	movzx  edx,al
c0025f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f2f:	83 c2 08             	add    edx,0x8
c0025f32:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f36:	0f b6 c9             	movzx  ecx,cl
c0025f39:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025f3f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f43:	83 ec 08             	sub    esp,0x8
c0025f46:	6a 01                	push   0x1
c0025f48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f4b:	e8 04 ff ff ff       	call   c0025e54 <IOAPIC::read(int)>
c0025f50:	83 c4 10             	add    esp,0x10
c0025f53:	c1 f8 10             	sar    eax,0x10
c0025f56:	0f b6 c0             	movzx  eax,al
c0025f59:	8d 50 01             	lea    edx,[eax+0x1]
c0025f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f5f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025f65:	b8 00 00 00 00       	mov    eax,0x0
c0025f6a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f6d:	5b                   	pop    ebx
c0025f6e:	5e                   	pop    esi
c0025f6f:	5f                   	pop    edi
c0025f70:	5d                   	pop    ebp
c0025f71:	c3                   	ret    

c0025f72 <IOAPIC::write(int, int)>:
c0025f72:	55                   	push   ebp
c0025f73:	89 e5                	mov    ebp,esp
c0025f75:	83 ec 10             	sub    esp,0x10
c0025f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f81:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025f84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f87:	0f b6 d0             	movzx  edx,al
c0025f8a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f8d:	89 10                	mov    DWORD PTR [eax],edx
c0025f8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f92:	8d 50 10             	lea    edx,[eax+0x10]
c0025f95:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f98:	89 02                	mov    DWORD PTR [edx],eax
c0025f9a:	90                   	nop
c0025f9b:	c9                   	leave  
c0025f9c:	c3                   	ret    
c0025f9d:	90                   	nop

c0025f9e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025f9e:	55                   	push   ebp
c0025f9f:	89 e5                	mov    ebp,esp
c0025fa1:	53                   	push   ebx
c0025fa2:	83 ec 2c             	sub    esp,0x2c
c0025fa5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fa8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025fab:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025fae:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025fb1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fb4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025fb7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025fba:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025fbd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025fc0:	88 d8                	mov    al,bl
c0025fc2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025fc5:	88 c8                	mov    al,cl
c0025fc7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025fca:	88 d0                	mov    al,dl
c0025fcc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025fcf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025fd3:	83 c0 08             	add    eax,0x8
c0025fd6:	01 c0                	add    eax,eax
c0025fd8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fdb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025fdf:	83 c0 08             	add    eax,0x8
c0025fe2:	01 c0                	add    eax,eax
c0025fe4:	40                   	inc    eax
c0025fe5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025fe8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025feb:	50                   	push   eax
c0025fec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fef:	e8 60 fe ff ff       	call   c0025e54 <IOAPIC::read(int)>
c0025ff4:	83 c4 08             	add    esp,0x8
c0025ff7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ffa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026001:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026004:	c1 e0 18             	shl    eax,0x18
c0026007:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002600a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002600d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026010:	52                   	push   edx
c0026011:	50                   	push   eax
c0026012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026015:	e8 58 ff ff ff       	call   c0025f72 <IOAPIC::write(int, int)>
c002601a:	83 c4 0c             	add    esp,0xc
c002601d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026020:	50                   	push   eax
c0026021:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026024:	e8 2b fe ff ff       	call   c0025e54 <IOAPIC::read(int)>
c0026029:	83 c4 08             	add    esp,0x8
c002602c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002602f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026036:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002603d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026044:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026048:	74 09                	je     c0026053 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002604a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026051:	eb 07                	jmp    c002605a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026053:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002605a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002605e:	74 09                	je     c0026069 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026060:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026067:	eb 07                	jmp    c0026070 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026069:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026070:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026077:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002607b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002607e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026081:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026084:	52                   	push   edx
c0026085:	50                   	push   eax
c0026086:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026089:	e8 e4 fe ff ff       	call   c0025f72 <IOAPIC::write(int, int)>
c002608e:	83 c4 0c             	add    esp,0xc
c0026091:	90                   	nop
c0026092:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026095:	c9                   	leave  
c0026096:	c3                   	ret    
c0026097:	90                   	nop

c0026098 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026098:	55                   	push   ebp
c0026099:	89 e5                	mov    ebp,esp
c002609b:	57                   	push   edi
c002609c:	56                   	push   esi
c002609d:	53                   	push   ebx
c002609e:	83 ec 2c             	sub    esp,0x2c
c00260a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00260a4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00260a7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00260ab:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00260af:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00260b3:	74 5a                	je     c002610f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260b5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00260b9:	7f 44                	jg     c00260ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00260bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260be:	05 c0 d8 02 c0       	add    eax,0xc002d8c0
c00260c3:	8a 00                	mov    al,BYTE PTR [eax]
c00260c5:	0f b6 c0             	movzx  eax,al
c00260c8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00260cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260ce:	66 8b 84 00 a0 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1060]
c00260d6:	0f b7 c0             	movzx  eax,ax
c00260d9:	83 e0 02             	and    eax,0x2
c00260dc:	85 c0                	test   eax,eax
c00260de:	74 04                	je     c00260e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00260e0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00260e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260e7:	66 8b 84 00 a0 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1060]
c00260ef:	0f b7 c0             	movzx  eax,ax
c00260f2:	83 e0 08             	and    eax,0x8
c00260f5:	85 c0                	test   eax,eax
c00260f7:	74 16                	je     c002610f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260f9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00260fd:	eb 10                	jmp    c002610f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260ff:	83 ec 0c             	sub    esp,0xc
c0026102:	68 24 d2 02 c0       	push   0xc002d224
c0026107:	e8 91 42 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c002610c:	83 c4 10             	add    esp,0x10
c002610f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026113:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c0026118:	83 ec 08             	sub    esp,0x8
c002611b:	50                   	push   eax
c002611c:	68 5c d2 02 c0       	push   0xc002d25c
c0026121:	e8 d9 c8 fe ff       	call   c00129ff <Dbg::kprintf(char const*, ...)>
c0026126:	83 c4 10             	add    esp,0x10
c0026129:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026130:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c0026135:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026138:	7d 67                	jge    c00261a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002613a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002613d:	8b 04 85 c0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf640]
c0026144:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026147:	83 ec 08             	sub    esp,0x8
c002614a:	52                   	push   edx
c002614b:	50                   	push   eax
c002614c:	e8 d1 fc ff ff       	call   c0025e22 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026151:	83 c4 10             	add    esp,0x10
c0026154:	84 c0                	test   al,al
c0026156:	74 44                	je     c002619c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026158:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002615b:	8b 1c 85 c0 09 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf640]
c0026162:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026166:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026169:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002616d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026170:	83 c0 20             	add    eax,0x20
c0026173:	0f b6 f0             	movzx  esi,al
c0026176:	b8 00 00 00 00       	mov    eax,0x0
c002617b:	99                   	cdq    
c002617c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002617f:	0f b6 c9             	movzx  ecx,cl
c0026182:	83 ec 04             	sub    esp,0x4
c0026185:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026188:	57                   	push   edi
c0026189:	56                   	push   esi
c002618a:	52                   	push   edx
c002618b:	50                   	push   eax
c002618c:	51                   	push   ecx
c002618d:	53                   	push   ebx
c002618e:	e8 0b fe ff ff       	call   c0025f9e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026193:	83 c4 20             	add    esp,0x20
c0026196:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002619a:	eb 05                	jmp    c00261a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002619c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002619f:	eb 8f                	jmp    c0026130 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00261a1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00261a4:	83 f0 01             	xor    eax,0x1
c00261a7:	84 c0                	test   al,al
c00261a9:	74 10                	je     c00261bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00261ab:	83 ec 0c             	sub    esp,0xc
c00261ae:	68 73 d2 02 c0       	push   0xc002d273
c00261b3:	e8 e5 41 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c00261b8:	83 c4 10             	add    esp,0x10
c00261bb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00261bf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00261c6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00261ca:	7f 65                	jg     c0026231 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00261cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261d2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261dc:	01 ca                	add    edx,ecx
c00261de:	83 c2 54             	add    edx,0x54
c00261e1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00261e5:	85 c0                	test   eax,eax
c00261e7:	75 43                	jne    c002622c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00261e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261f9:	01 ca                	add    edx,ecx
c00261fb:	8d 4a 54             	lea    ecx,[edx+0x54]
c00261fe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026201:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026208:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002620b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026212:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026215:	01 ca                	add    edx,ecx
c0026217:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002621d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026220:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026224:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026227:	83 e8 20             	sub    eax,0x20
c002622a:	eb 1a                	jmp    c0026246 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002622c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002622f:	eb 95                	jmp    c00261c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026231:	83 ec 0c             	sub    esp,0xc
c0026234:	68 80 d2 02 c0       	push   0xc002d280
c0026239:	e8 5f 41 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c002623e:	83 c4 10             	add    esp,0x10
c0026241:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026246:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026249:	5b                   	pop    ebx
c002624a:	5e                   	pop    esi
c002624b:	5f                   	pop    edi
c002624c:	5d                   	pop    ebp
c002624d:	c3                   	ret    

c002624e <PIC::disable()>:
c002624e:	55                   	push   ebp
c002624f:	89 e5                	mov    ebp,esp
c0026251:	83 ec 10             	sub    esp,0x10
c0026254:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002625a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002625e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026261:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026265:	ee                   	out    dx,al
c0026266:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002626c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026270:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026273:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026277:	ee                   	out    dx,al
c0026278:	90                   	nop
c0026279:	c9                   	leave  
c002627a:	c3                   	ret    
c002627b:	90                   	nop

c002627c <PIC::close(int, int, void*)>:
c002627c:	55                   	push   ebp
c002627d:	89 e5                	mov    ebp,esp
c002627f:	83 ec 08             	sub    esp,0x8
c0026282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026285:	8b 00                	mov    eax,DWORD PTR [eax]
c0026287:	83 c0 3c             	add    eax,0x3c
c002628a:	8b 00                	mov    eax,DWORD PTR [eax]
c002628c:	83 ec 0c             	sub    esp,0xc
c002628f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026292:	ff d0                	call   eax
c0026294:	83 c4 10             	add    esp,0x10
c0026297:	b8 00 00 00 00       	mov    eax,0x0
c002629c:	c9                   	leave  
c002629d:	c3                   	ret    

c002629e <PIC::PIC()>:
c002629e:	83 ec 0c             	sub    esp,0xc
c00262a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a5:	83 ec 08             	sub    esp,0x8
c00262a8:	68 2c d3 02 c0       	push   0xc002d32c
c00262ad:	50                   	push   eax
c00262ae:	e8 f3 e4 fe ff       	call   c00147a6 <InterruptController::InterruptController(char const*)>
c00262b3:	83 c4 10             	add    esp,0x10
c00262b6:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c00262bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262bf:	89 10                	mov    DWORD PTR [eax],edx
c00262c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262cb:	0f b6 d0             	movzx  edx,al
c00262ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00262d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262e3:	0f b6 d0             	movzx  edx,al
c00262e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ea:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00262ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262f9:	8d 50 01             	lea    edx,[eax+0x1]
c00262fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026300:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026306:	0f b6 d0             	movzx  edx,al
c0026309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026311:	83 e1 3f             	and    ecx,0x3f
c0026314:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026322:	0f b6 d0             	movzx  edx,al
c0026325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026329:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026334:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002633a:	0f b6 d0             	movzx  edx,al
c002633d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026341:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026350:	8d 50 01             	lea    edx,[eax+0x1]
c0026353:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026357:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002635d:	0f b6 d0             	movzx  edx,al
c0026360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026364:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026368:	83 e1 3f             	and    ecx,0x3f
c002636b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002636f:	90                   	nop
c0026370:	83 c4 0c             	add    esp,0xc
c0026373:	c3                   	ret    

c0026374 <PIC::ioWait()>:
c0026374:	eb 00                	jmp    c0026376 <PIC::ioWait()+0x2>
c0026376:	eb 00                	jmp    c0026378 <PIC::ioWait()+0x4>
c0026378:	90                   	nop
c0026379:	c3                   	ret    

c002637a <PIC::getIRQReg(int)>:
c002637a:	55                   	push   ebp
c002637b:	89 e5                	mov    ebp,esp
c002637d:	83 ec 10             	sub    esp,0x10
c0026380:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026383:	0f b6 c0             	movzx  eax,al
c0026386:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002638c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002638f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026392:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026396:	ee                   	out    dx,al
c0026397:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002639a:	0f b6 c0             	movzx  eax,al
c002639d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00263a3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00263a6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00263a9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00263ad:	ee                   	out    dx,al
c00263ae:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00263b4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00263b8:	89 c2                	mov    edx,eax
c00263ba:	ec                   	in     al,dx
c00263bb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00263be:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00263c1:	0f b6 c0             	movzx  eax,al
c00263c4:	c1 e0 08             	shl    eax,0x8
c00263c7:	89 c1                	mov    ecx,eax
c00263c9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00263cf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00263d3:	89 c2                	mov    edx,eax
c00263d5:	ec                   	in     al,dx
c00263d6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00263d9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00263dc:	0f b6 c0             	movzx  eax,al
c00263df:	09 c8                	or     eax,ecx
c00263e1:	c9                   	leave  
c00263e2:	c3                   	ret    
c00263e3:	90                   	nop

c00263e4 <PIC::eoi(unsigned char)>:
c00263e4:	55                   	push   ebp
c00263e5:	89 e5                	mov    ebp,esp
c00263e7:	83 ec 14             	sub    esp,0x14
c00263ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263ed:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00263f0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00263f4:	75 1e                	jne    c0026414 <PIC::eoi(unsigned char)+0x30>
c00263f6:	6a 0b                	push   0xb
c00263f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263fb:	e8 7a ff ff ff       	call   c002637a <PIC::getIRQReg(int)>
c0026400:	83 c4 08             	add    esp,0x8
c0026403:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026407:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002640b:	25 80 00 00 00       	and    eax,0x80
c0026410:	85 c0                	test   eax,eax
c0026412:	74 5f                	je     c0026473 <PIC::eoi(unsigned char)+0x8f>
c0026414:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026418:	75 2d                	jne    c0026447 <PIC::eoi(unsigned char)+0x63>
c002641a:	6a 0b                	push   0xb
c002641c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002641f:	e8 56 ff ff ff       	call   c002637a <PIC::getIRQReg(int)>
c0026424:	83 c4 08             	add    esp,0x8
c0026427:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002642b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002642e:	66 85 c0             	test   ax,ax
c0026431:	78 14                	js     c0026447 <PIC::eoi(unsigned char)+0x63>
c0026433:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026439:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002643d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026440:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026444:	ee                   	out    dx,al
c0026445:	eb 2d                	jmp    c0026474 <PIC::eoi(unsigned char)+0x90>
c0026447:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002644b:	76 12                	jbe    c002645f <PIC::eoi(unsigned char)+0x7b>
c002644d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026453:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026457:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002645a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002645e:	ee                   	out    dx,al
c002645f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026465:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026469:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002646c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026470:	ee                   	out    dx,al
c0026471:	eb 01                	jmp    c0026474 <PIC::eoi(unsigned char)+0x90>
c0026473:	90                   	nop
c0026474:	c9                   	leave  
c0026475:	c3                   	ret    

c0026476 <PIC::remap()>:
c0026476:	55                   	push   ebp
c0026477:	89 e5                	mov    ebp,esp
c0026479:	83 ec 48             	sub    esp,0x48
c002647c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026483:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002648a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026490:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026493:	89 c2                	mov    edx,eax
c0026495:	ec                   	in     al,dx
c0026496:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026499:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002649c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002649f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00264a5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00264a8:	89 c2                	mov    edx,eax
c00264aa:	ec                   	in     al,dx
c00264ab:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00264ae:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00264b1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00264b4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00264ba:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00264be:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00264c1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00264c4:	ee                   	out    dx,al
c00264c5:	83 ec 0c             	sub    esp,0xc
c00264c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264cb:	e8 a4 fe ff ff       	call   c0026374 <PIC::ioWait()>
c00264d0:	83 c4 10             	add    esp,0x10
c00264d3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00264d9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00264dd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00264e0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00264e3:	ee                   	out    dx,al
c00264e4:	83 ec 0c             	sub    esp,0xc
c00264e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ea:	e8 85 fe ff ff       	call   c0026374 <PIC::ioWait()>
c00264ef:	83 c4 10             	add    esp,0x10
c00264f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00264f5:	0f b6 c0             	movzx  eax,al
c00264f8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00264fe:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026501:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026504:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026507:	ee                   	out    dx,al
c0026508:	83 ec 0c             	sub    esp,0xc
c002650b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002650e:	e8 61 fe ff ff       	call   c0026374 <PIC::ioWait()>
c0026513:	83 c4 10             	add    esp,0x10
c0026516:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026519:	0f b6 c0             	movzx  eax,al
c002651c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026522:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026525:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026528:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002652b:	ee                   	out    dx,al
c002652c:	83 ec 0c             	sub    esp,0xc
c002652f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026532:	e8 3d fe ff ff       	call   c0026374 <PIC::ioWait()>
c0026537:	83 c4 10             	add    esp,0x10
c002653a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026540:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026544:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026547:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002654a:	ee                   	out    dx,al
c002654b:	83 ec 0c             	sub    esp,0xc
c002654e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026551:	e8 1e fe ff ff       	call   c0026374 <PIC::ioWait()>
c0026556:	83 c4 10             	add    esp,0x10
c0026559:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002655f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026563:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026566:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026569:	ee                   	out    dx,al
c002656a:	83 ec 0c             	sub    esp,0xc
c002656d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026570:	e8 ff fd ff ff       	call   c0026374 <PIC::ioWait()>
c0026575:	83 c4 10             	add    esp,0x10
c0026578:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002657e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026582:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026585:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026588:	ee                   	out    dx,al
c0026589:	83 ec 0c             	sub    esp,0xc
c002658c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002658f:	e8 e0 fd ff ff       	call   c0026374 <PIC::ioWait()>
c0026594:	83 c4 10             	add    esp,0x10
c0026597:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002659d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00265a1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00265a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00265a7:	ee                   	out    dx,al
c00265a8:	83 ec 0c             	sub    esp,0xc
c00265ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265ae:	e8 c1 fd ff ff       	call   c0026374 <PIC::ioWait()>
c00265b3:	83 c4 10             	add    esp,0x10
c00265b6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00265ba:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00265c0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00265c3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00265c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00265c9:	ee                   	out    dx,al
c00265ca:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00265ce:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00265d4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00265d7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00265da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00265dd:	ee                   	out    dx,al
c00265de:	90                   	nop
c00265df:	c9                   	leave  
c00265e0:	c3                   	ret    
c00265e1:	90                   	nop

c00265e2 <PIC::open(int, int, void*)>:
c00265e2:	55                   	push   ebp
c00265e3:	89 e5                	mov    ebp,esp
c00265e5:	83 ec 18             	sub    esp,0x18
c00265e8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00265ee:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00265f2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00265f5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00265f9:	ee                   	out    dx,al
c00265fa:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026600:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026604:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026607:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002660b:	ee                   	out    dx,al
c002660c:	83 ec 0c             	sub    esp,0xc
c002660f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026612:	e8 5f fe ff ff       	call   c0026476 <PIC::remap()>
c0026617:	83 c4 10             	add    esp,0x10
c002661a:	b8 00 00 00 00       	mov    eax,0x0
c002661f:	c9                   	leave  
c0026620:	c3                   	ret    
c0026621:	90                   	nop

c0026622 <APICTimer::close(int, int, void*)>:
c0026622:	b8 00 00 00 00       	mov    eax,0x0
c0026627:	c3                   	ret    

c0026628 <apicTimerHandler(regs*, void*)>:
c0026628:	83 ec 0c             	sub    esp,0xc
c002662b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002662f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026631:	99                   	cdq    
c0026632:	52                   	push   edx
c0026633:	50                   	push   eax
c0026634:	6a 00                	push   0x0
c0026636:	68 00 ca 9a 3b       	push   0x3b9aca00
c002663b:	e8 94 07 00 00       	call   c0026dd4 <__udivdi3>
c0026640:	83 c4 10             	add    esp,0x10
c0026643:	83 ec 08             	sub    esp,0x8
c0026646:	52                   	push   edx
c0026647:	50                   	push   eax
c0026648:	e8 b6 02 ff ff       	call   c0016903 <timerHandler(unsigned long long)>
c002664d:	83 c4 10             	add    esp,0x10
c0026650:	90                   	nop
c0026651:	83 c4 0c             	add    esp,0xc
c0026654:	c3                   	ret    
c0026655:	90                   	nop

c0026656 <APICTimer::write(int)>:
c0026656:	53                   	push   ebx
c0026657:	83 ec 28             	sub    esp,0x28
c002665a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002665e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026662:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026668:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c002666d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026673:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026679:	83 ec 0c             	sub    esp,0xc
c002667c:	50                   	push   eax
c002667d:	e8 de f4 ff ff       	call   c0025b60 <APIC::getBase()>
c0026682:	83 c4 10             	add    esp,0x10
c0026685:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026689:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c002668e:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c0026694:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026698:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002669c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266a0:	05 e0 03 00 00       	add    eax,0x3e0
c00266a5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00266ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266af:	05 80 03 00 00       	add    eax,0x380
c00266b4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00266ba:	fb                   	sti    
c00266bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266c3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00266c8:	83 d2 00             	adc    edx,0x0
c00266cb:	89 c1                	mov    ecx,eax
c00266cd:	89 d3                	mov    ebx,edx
c00266cf:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c00266d4:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c00266da:	39 c8                	cmp    eax,ecx
c00266dc:	89 d0                	mov    eax,edx
c00266de:	19 d8                	sbb    eax,ebx
c00266e0:	73 02                	jae    c00266e4 <APICTimer::write(int)+0x8e>
c00266e2:	eb d7                	jmp    c00266bb <APICTimer::write(int)+0x65>
c00266e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266e8:	05 20 03 00 00       	add    eax,0x320
c00266ed:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00266f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266f7:	05 90 03 00 00       	add    eax,0x390
c00266fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00266fe:	f7 d0                	not    eax
c0026700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026704:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002670c:	ba 00 00 00 00       	mov    edx,0x0
c0026711:	f7 f3                	div    ebx
c0026713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002671b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026721:	0d 00 00 02 00       	or     eax,0x20000
c0026726:	89 c2                	mov    edx,eax
c0026728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002672c:	05 20 03 00 00       	add    eax,0x320
c0026731:	89 10                	mov    DWORD PTR [eax],edx
c0026733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026737:	05 e0 03 00 00       	add    eax,0x3e0
c002673c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026742:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026746:	05 80 03 00 00       	add    eax,0x380
c002674b:	89 c2                	mov    edx,eax
c002674d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026751:	89 02                	mov    DWORD PTR [edx],eax
c0026753:	90                   	nop
c0026754:	83 c4 28             	add    esp,0x28
c0026757:	5b                   	pop    ebx
c0026758:	c3                   	ret    
c0026759:	90                   	nop

c002675a <APICTimer::open(int, int, void*)>:
c002675a:	57                   	push   edi
c002675b:	56                   	push   esi
c002675c:	53                   	push   ebx
c002675d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026761:	8b 00                	mov    eax,DWORD PTR [eax]
c0026763:	83 c0 24             	add    eax,0x24
c0026766:	8b 00                	mov    eax,DWORD PTR [eax]
c0026768:	83 ec 08             	sub    esp,0x8
c002676b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002676f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026773:	ff d0                	call   eax
c0026775:	83 c4 10             	add    esp,0x10
c0026778:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c002677d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026783:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026789:	83 ec 0c             	sub    esp,0xc
c002678c:	50                   	push   eax
c002678d:	e8 ce f3 ff ff       	call   c0025b60 <APIC::getBase()>
c0026792:	83 c4 10             	add    esp,0x10
c0026795:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002679b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267a5:	0f b6 f8             	movzx  edi,al
c00267a8:	89 d0                	mov    eax,edx
c00267aa:	ba 00 00 00 00       	mov    edx,0x0
c00267af:	89 c1                	mov    ecx,eax
c00267b1:	80 e5 ff             	and    ch,0xff
c00267b4:	89 cb                	mov    ebx,ecx
c00267b6:	0f b6 f2             	movzx  esi,dl
c00267b9:	89 d8                	mov    eax,ebx
c00267bb:	89 f2                	mov    edx,esi
c00267bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267c1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00267c4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00267c8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00267cc:	83 e0 00             	and    eax,0x0
c00267cf:	09 d0                	or     eax,edx
c00267d1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00267d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267df:	8d 50 01             	lea    edx,[eax+0x1]
c00267e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267e6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00267ec:	0f b6 d0             	movzx  edx,al
c00267ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f3:	83 c2 08             	add    edx,0x8
c00267f6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00267fa:	0f b6 c9             	movzx  ecx,cl
c00267fd:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026803:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002680f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026819:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002681d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026823:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026827:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002682d:	83 ec 0c             	sub    esp,0xc
c0026830:	51                   	push   ecx
c0026831:	6a 01                	push   0x1
c0026833:	68 28 66 02 c0       	push   0xc0026628
c0026838:	52                   	push   edx
c0026839:	50                   	push   eax
c002683a:	e8 71 d5 fe ff       	call   c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002683f:	83 c4 20             	add    esp,0x20
c0026842:	89 c2                	mov    edx,eax
c0026844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026848:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002684e:	b8 00 00 00 00       	mov    eax,0x0
c0026853:	5b                   	pop    ebx
c0026854:	5e                   	pop    esi
c0026855:	5f                   	pop    edi
c0026856:	c3                   	ret    
c0026857:	90                   	nop

c0026858 <APICTimer::APICTimer()>:
c0026858:	83 ec 0c             	sub    esp,0xc
c002685b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002685f:	83 ec 08             	sub    esp,0x8
c0026862:	68 98 d3 02 c0       	push   0xc002d398
c0026867:	50                   	push   eax
c0026868:	e8 07 00 ff ff       	call   c0016874 <Timer::Timer(char const*)>
c002686d:	83 c4 10             	add    esp,0x10
c0026870:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c0026875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026879:	89 10                	mov    DWORD PTR [eax],edx
c002687b:	90                   	nop
c002687c:	83 c4 0c             	add    esp,0xc
c002687f:	c3                   	ret    

c0026880 <PIT::write(int)>:
c0026880:	83 ec 10             	sub    esp,0x10
c0026883:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026887:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002688b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026891:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026895:	a3 e4 09 03 c0       	mov    ds:0xc00309e4,eax
c002689a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002689f:	99                   	cdq    
c00268a0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00268a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268a8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00268af:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00268b4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00268b8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00268bd:	ee                   	out    dx,al
c00268be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268c2:	0f b6 c0             	movzx  eax,al
c00268c5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00268cc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00268d0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00268d4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00268d9:	ee                   	out    dx,al
c00268da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268de:	c1 f8 08             	sar    eax,0x8
c00268e1:	0f b6 c0             	movzx  eax,al
c00268e4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00268eb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00268ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00268f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00268f8:	ee                   	out    dx,al
c00268f9:	90                   	nop
c00268fa:	83 c4 10             	add    esp,0x10
c00268fd:	c3                   	ret    

c00268fe <pitHandler(regs*, void*)>:
c00268fe:	83 ec 0c             	sub    esp,0xc
c0026901:	a1 e4 09 03 c0       	mov    eax,ds:0xc00309e4
c0026906:	99                   	cdq    
c0026907:	52                   	push   edx
c0026908:	50                   	push   eax
c0026909:	6a 00                	push   0x0
c002690b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026910:	e8 bf 04 00 00       	call   c0026dd4 <__udivdi3>
c0026915:	83 c4 10             	add    esp,0x10
c0026918:	83 ec 08             	sub    esp,0x8
c002691b:	52                   	push   edx
c002691c:	50                   	push   eax
c002691d:	e8 e1 ff fe ff       	call   c0016903 <timerHandler(unsigned long long)>
c0026922:	83 c4 10             	add    esp,0x10
c0026925:	90                   	nop
c0026926:	83 c4 0c             	add    esp,0xc
c0026929:	c3                   	ret    

c002692a <PIT::open(int, int, void*)>:
c002692a:	83 ec 0c             	sub    esp,0xc
c002692d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026931:	8b 00                	mov    eax,DWORD PTR [eax]
c0026933:	83 c0 24             	add    eax,0x24
c0026936:	8b 00                	mov    eax,DWORD PTR [eax]
c0026938:	83 ec 08             	sub    esp,0x8
c002693b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002693f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026943:	ff d0                	call   eax
c0026945:	83 c4 10             	add    esp,0x10
c0026948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002694c:	83 ec 0c             	sub    esp,0xc
c002694f:	6a 00                	push   0x0
c0026951:	6a 01                	push   0x1
c0026953:	68 fe 68 02 c0       	push   0xc00268fe
c0026958:	6a 00                	push   0x0
c002695a:	50                   	push   eax
c002695b:	e8 50 d4 fe ff       	call   c0013db0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026960:	83 c4 20             	add    esp,0x20
c0026963:	89 c2                	mov    edx,eax
c0026965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026969:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002696f:	b8 00 00 00 00       	mov    eax,0x0
c0026974:	83 c4 0c             	add    esp,0xc
c0026977:	c3                   	ret    

c0026978 <PIT::close(int, int, void*)>:
c0026978:	83 ec 0c             	sub    esp,0xc
c002697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002697f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698d:	6a 01                	push   0x1
c002698f:	68 fe 68 02 c0       	push   0xc00268fe
c0026994:	6a 00                	push   0x0
c0026996:	50                   	push   eax
c0026997:	e8 5e d4 fe ff       	call   c0013dfa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002699c:	83 c4 10             	add    esp,0x10
c002699f:	b8 00 00 00 00       	mov    eax,0x0
c00269a4:	83 c4 0c             	add    esp,0xc
c00269a7:	c3                   	ret    

c00269a8 <PIT::PIT()>:
c00269a8:	83 ec 0c             	sub    esp,0xc
c00269ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269af:	83 ec 08             	sub    esp,0x8
c00269b2:	68 d4 d3 02 c0       	push   0xc002d3d4
c00269b7:	50                   	push   eax
c00269b8:	e8 b7 fe fe ff       	call   c0016874 <Timer::Timer(char const*)>
c00269bd:	83 c4 10             	add    esp,0x10
c00269c0:	ba fc d3 02 c0       	mov    edx,0xc002d3fc
c00269c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c9:	89 10                	mov    DWORD PTR [eax],edx
c00269cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269d5:	0f b6 d0             	movzx  edx,al
c00269d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269dc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00269e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269ed:	0f b6 d0             	movzx  edx,al
c00269f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00269f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026a03:	8d 50 01             	lea    edx,[eax+0x1]
c0026a06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a0a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026a10:	0f b6 d0             	movzx  edx,al
c0026a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a17:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026a1b:	83 e1 3f             	and    ecx,0x3f
c0026a1e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026a22:	90                   	nop
c0026a23:	83 c4 0c             	add    esp,0xc
c0026a26:	c3                   	ret    
c0026a27:	66 90                	xchg   ax,ax
c0026a29:	66 90                	xchg   ax,ax
c0026a2b:	66 90                	xchg   ax,ax
c0026a2d:	66 90                	xchg   ax,ax
c0026a2f:	90                   	nop

c0026a30 <avxDetect>:
c0026a30:	b8 00 00 00 00       	mov    eax,0x0
c0026a35:	c3                   	ret    

c0026a36 <avxSave>:
c0026a36:	c3                   	ret    

c0026a37 <avxLoad>:
c0026a37:	c3                   	ret    

c0026a38 <avxInit>:
c0026a38:	c3                   	ret    

c0026a39 <avxClose>:
c0026a39:	c3                   	ret    

c0026a3a <wouldSheSayYes>:
c0026a3a:	c3                   	ret    
c0026a3b:	49                   	dec    ecx
c0026a3c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026a40:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026a44:	75 20                	jne    c0026a66 <sseDetect.noSSE+0x1>
c0026a46:	4e                   	dec    esi
c0026a47:	79 61                	jns    c0026aaa <x87Detect+0x14>
c0026a49:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026a4e:	66 90                	xchg   ax,ax

c0026a50 <absolutelyNoChanceInHell>:
c0026a50:	b8 01 00 00 00       	mov    eax,0x1
c0026a55:	0f a2                	cpuid  
c0026a57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026a5d:	74 06                	je     c0026a65 <sseDetect.noSSE>
c0026a5f:	b8 01 00 00 00       	mov    eax,0x1
c0026a64:	c3                   	ret    

c0026a65 <sseDetect.noSSE>:
c0026a65:	31 c0                	xor    eax,eax
c0026a67:	c3                   	ret    

c0026a68 <sseSave>:
c0026a68:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026a6d:	c3                   	ret    

c0026a6e <sseLoad>:
c0026a6e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026a73:	c3                   	ret    

c0026a74 <sseInit>:
c0026a74:	e8 49 00 00 00       	call   c0026ac2 <x87Init>
c0026a79:	0f 20 e0             	mov    eax,cr4
c0026a7c:	66 0d 00 06          	or     ax,0x600
c0026a80:	0f 22 e0             	mov    cr4,eax
c0026a83:	c3                   	ret    

c0026a84 <sseClose>:
c0026a84:	c3                   	ret    
c0026a85:	66 90                	xchg   ax,ax
c0026a87:	66 90                	xchg   ax,ax
c0026a89:	66 90                	xchg   ax,ax
c0026a8b:	66 90                	xchg   ax,ax
c0026a8d:	66 90                	xchg   ax,ax
c0026a8f:	90                   	nop

c0026a90 <value_37F>:
c0026a90:	7f 03                	jg     c0026a95 <value_37A+0x1>

c0026a92 <value_37E>:
c0026a92:	7e 03                	jle    c0026a97 <x87Detect+0x1>

c0026a94 <value_37A>:
c0026a94:	7a 03                	jp     c0026a99 <x87Detect+0x3>

c0026a96 <x87Detect>:
c0026a96:	b8 01 00 00 00       	mov    eax,0x1
c0026a9b:	0f a2                	cpuid  
c0026a9d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026aa3:	74 06                	je     c0026aab <x87Detect.nox87>
c0026aa5:	b8 01 00 00 00       	mov    eax,0x1
c0026aaa:	c3                   	ret    

c0026aab <x87Detect.nox87>:
c0026aab:	b8 00 00 00 00       	mov    eax,0x0
c0026ab0:	c3                   	ret    

c0026ab1 <x87Save>:
c0026ab1:	55                   	push   ebp
c0026ab2:	89 e5                	mov    ebp,esp
c0026ab4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ab8:	c9                   	leave  
c0026ab9:	c3                   	ret    

c0026aba <x87Load>:
c0026aba:	55                   	push   ebp
c0026abb:	89 e5                	mov    ebp,esp
c0026abd:	dd 65 08             	frstor [ebp+0x8]
c0026ac0:	c9                   	leave  
c0026ac1:	c3                   	ret    

c0026ac2 <x87Init>:
c0026ac2:	9b db e3             	finit  
c0026ac5:	0f 20 c0             	mov    eax,cr0
c0026ac8:	66 25 fb ff          	and    ax,0xfffb
c0026acc:	66 0d 22 00          	or     ax,0x22
c0026ad0:	0f 22 c0             	mov    cr0,eax
c0026ad3:	0f 06                	clts   
c0026ad5:	d9 2d 94 6a 02 c0    	fldcw  WORD PTR ds:0xc0026a94
c0026adb:	c3                   	ret    

c0026adc <x87Close>:
c0026adc:	c3                   	ret    
c0026add:	66 90                	xchg   ax,ax
c0026adf:	90                   	nop

c0026ae0 <__do_global_ctors_aux>:
c0026ae0:	a1 d4 96 02 c0       	mov    eax,ds:0xc00296d4
c0026ae5:	83 f8 ff             	cmp    eax,0xffffffff
c0026ae8:	74 1a                	je     c0026b04 <__do_global_ctors_aux+0x24>
c0026aea:	55                   	push   ebp
c0026aeb:	89 e5                	mov    ebp,esp
c0026aed:	53                   	push   ebx
c0026aee:	52                   	push   edx
c0026aef:	bb d4 96 02 c0       	mov    ebx,0xc00296d4
c0026af4:	ff d0                	call   eax
c0026af6:	83 eb 04             	sub    ebx,0x4
c0026af9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026afb:	83 f8 ff             	cmp    eax,0xffffffff
c0026afe:	75 f4                	jne    c0026af4 <__do_global_ctors_aux+0x14>
c0026b00:	58                   	pop    eax
c0026b01:	5b                   	pop    ebx
c0026b02:	5d                   	pop    ebp
c0026b03:	c3                   	ret    
c0026b04:	c3                   	ret    
c0026b05:	66 90                	xchg   ax,ax
c0026b07:	90                   	nop

c0026b08 <__divdi3>:
c0026b08:	55                   	push   ebp
c0026b09:	57                   	push   edi
c0026b0a:	56                   	push   esi
c0026b0b:	53                   	push   ebx
c0026b0c:	83 ec 1c             	sub    esp,0x1c
c0026b0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026b13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b1a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026b1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026b22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026b26:	85 db                	test   ebx,ebx
c0026b28:	0f 88 8e 00 00 00    	js     c0026bbc <__divdi3+0xb4>
c0026b2e:	89 dd                	mov    ebp,ebx
c0026b30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026b38:	89 d3                	mov    ebx,edx
c0026b3a:	85 d2                	test   edx,edx
c0026b3c:	79 0d                	jns    c0026b4b <__divdi3+0x43>
c0026b3e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026b42:	f7 d8                	neg    eax
c0026b44:	83 d2 00             	adc    edx,0x0
c0026b47:	f7 da                	neg    edx
c0026b49:	89 d3                	mov    ebx,edx
c0026b4b:	89 c7                	mov    edi,eax
c0026b4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b50:	85 db                	test   ebx,ebx
c0026b52:	75 48                	jne    c0026b9c <__divdi3+0x94>
c0026b54:	39 ef                	cmp    edi,ebp
c0026b56:	76 24                	jbe    c0026b7c <__divdi3+0x74>
c0026b58:	89 ea                	mov    edx,ebp
c0026b5a:	f7 f7                	div    edi
c0026b5c:	89 c1                	mov    ecx,eax
c0026b5e:	31 f6                	xor    esi,esi
c0026b60:	89 c8                	mov    eax,ecx
c0026b62:	89 f2                	mov    edx,esi
c0026b64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b68:	85 c9                	test   ecx,ecx
c0026b6a:	74 07                	je     c0026b73 <__divdi3+0x6b>
c0026b6c:	f7 d8                	neg    eax
c0026b6e:	83 d2 00             	adc    edx,0x0
c0026b71:	f7 da                	neg    edx
c0026b73:	83 c4 1c             	add    esp,0x1c
c0026b76:	5b                   	pop    ebx
c0026b77:	5e                   	pop    esi
c0026b78:	5f                   	pop    edi
c0026b79:	5d                   	pop    ebp
c0026b7a:	c3                   	ret    
c0026b7b:	90                   	nop
c0026b7c:	85 ff                	test   edi,edi
c0026b7e:	75 0b                	jne    c0026b8b <__divdi3+0x83>
c0026b80:	b8 01 00 00 00       	mov    eax,0x1
c0026b85:	31 d2                	xor    edx,edx
c0026b87:	f7 f3                	div    ebx
c0026b89:	89 c7                	mov    edi,eax
c0026b8b:	31 d2                	xor    edx,edx
c0026b8d:	89 e8                	mov    eax,ebp
c0026b8f:	f7 f7                	div    edi
c0026b91:	89 c6                	mov    esi,eax
c0026b93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b96:	f7 f7                	div    edi
c0026b98:	89 c1                	mov    ecx,eax
c0026b9a:	eb c4                	jmp    c0026b60 <__divdi3+0x58>
c0026b9c:	39 eb                	cmp    ebx,ebp
c0026b9e:	77 3c                	ja     c0026bdc <__divdi3+0xd4>
c0026ba0:	0f bd f3             	bsr    esi,ebx
c0026ba3:	83 f6 1f             	xor    esi,0x1f
c0026ba6:	75 40                	jne    c0026be8 <__divdi3+0xe0>
c0026ba8:	39 eb                	cmp    ebx,ebp
c0026baa:	72 09                	jb     c0026bb5 <__divdi3+0xad>
c0026bac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026baf:	0f 87 97 00 00 00    	ja     c0026c4c <__divdi3+0x144>
c0026bb5:	b9 01 00 00 00       	mov    ecx,0x1
c0026bba:	eb a4                	jmp    c0026b60 <__divdi3+0x58>
c0026bbc:	f7 d9                	neg    ecx
c0026bbe:	83 d3 00             	adc    ebx,0x0
c0026bc1:	f7 db                	neg    ebx
c0026bc3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026bc6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026bca:	89 dd                	mov    ebp,ebx
c0026bcc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026bd4:	e9 5f ff ff ff       	jmp    c0026b38 <__divdi3+0x30>
c0026bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0026bdc:	31 f6                	xor    esi,esi
c0026bde:	31 c9                	xor    ecx,ecx
c0026be0:	e9 7b ff ff ff       	jmp    c0026b60 <__divdi3+0x58>
c0026be5:	8d 76 00             	lea    esi,[esi+0x0]
c0026be8:	b8 20 00 00 00       	mov    eax,0x20
c0026bed:	29 f0                	sub    eax,esi
c0026bef:	89 f1                	mov    ecx,esi
c0026bf1:	d3 e3                	shl    ebx,cl
c0026bf3:	89 fa                	mov    edx,edi
c0026bf5:	88 c1                	mov    cl,al
c0026bf7:	d3 ea                	shr    edx,cl
c0026bf9:	09 da                	or     edx,ebx
c0026bfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026bff:	89 f1                	mov    ecx,esi
c0026c01:	d3 e7                	shl    edi,cl
c0026c03:	89 eb                	mov    ebx,ebp
c0026c05:	88 c1                	mov    cl,al
c0026c07:	d3 eb                	shr    ebx,cl
c0026c09:	89 f1                	mov    ecx,esi
c0026c0b:	d3 e5                	shl    ebp,cl
c0026c0d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026c10:	88 c1                	mov    cl,al
c0026c12:	d3 ea                	shr    edx,cl
c0026c14:	09 d5                	or     ebp,edx
c0026c16:	89 e8                	mov    eax,ebp
c0026c18:	89 da                	mov    edx,ebx
c0026c1a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026c1e:	89 d3                	mov    ebx,edx
c0026c20:	89 c5                	mov    ebp,eax
c0026c22:	f7 e7                	mul    edi
c0026c24:	39 d3                	cmp    ebx,edx
c0026c26:	72 18                	jb     c0026c40 <__divdi3+0x138>
c0026c28:	74 0a                	je     c0026c34 <__divdi3+0x12c>
c0026c2a:	89 e9                	mov    ecx,ebp
c0026c2c:	31 f6                	xor    esi,esi
c0026c2e:	e9 2d ff ff ff       	jmp    c0026b60 <__divdi3+0x58>
c0026c33:	90                   	nop
c0026c34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026c37:	89 f1                	mov    ecx,esi
c0026c39:	d3 e7                	shl    edi,cl
c0026c3b:	39 c7                	cmp    edi,eax
c0026c3d:	73 eb                	jae    c0026c2a <__divdi3+0x122>
c0026c3f:	90                   	nop
c0026c40:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026c43:	31 f6                	xor    esi,esi
c0026c45:	e9 16 ff ff ff       	jmp    c0026b60 <__divdi3+0x58>
c0026c4a:	66 90                	xchg   ax,ax
c0026c4c:	31 c9                	xor    ecx,ecx
c0026c4e:	e9 0d ff ff ff       	jmp    c0026b60 <__divdi3+0x58>
c0026c53:	90                   	nop

c0026c54 <__moddi3>:
c0026c54:	55                   	push   ebp
c0026c55:	57                   	push   edi
c0026c56:	56                   	push   esi
c0026c57:	53                   	push   ebx
c0026c58:	83 ec 2c             	sub    esp,0x2c
c0026c5b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026c5f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026c63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026c67:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026c6b:	85 db                	test   ebx,ebx
c0026c6d:	0f 88 85 00 00 00    	js     c0026cf8 <__moddi3+0xa4>
c0026c73:	89 de                	mov    esi,ebx
c0026c75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026c7d:	89 d7                	mov    edi,edx
c0026c7f:	85 d2                	test   edx,edx
c0026c81:	79 09                	jns    c0026c8c <__moddi3+0x38>
c0026c83:	f7 d8                	neg    eax
c0026c85:	83 d2 00             	adc    edx,0x0
c0026c88:	f7 da                	neg    edx
c0026c8a:	89 d7                	mov    edi,edx
c0026c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c90:	89 cd                	mov    ebp,ecx
c0026c92:	85 ff                	test   edi,edi
c0026c94:	75 52                	jne    c0026ce8 <__moddi3+0x94>
c0026c96:	89 c3                	mov    ebx,eax
c0026c98:	39 f0                	cmp    eax,esi
c0026c9a:	76 24                	jbe    c0026cc0 <__moddi3+0x6c>
c0026c9c:	89 c8                	mov    eax,ecx
c0026c9e:	89 f2                	mov    edx,esi
c0026ca0:	f7 f3                	div    ebx
c0026ca2:	89 d6                	mov    esi,edx
c0026ca4:	89 f0                	mov    eax,esi
c0026ca6:	31 d2                	xor    edx,edx
c0026ca8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cac:	85 c9                	test   ecx,ecx
c0026cae:	74 07                	je     c0026cb7 <__moddi3+0x63>
c0026cb0:	f7 d8                	neg    eax
c0026cb2:	83 d2 00             	adc    edx,0x0
c0026cb5:	f7 da                	neg    edx
c0026cb7:	83 c4 2c             	add    esp,0x2c
c0026cba:	5b                   	pop    ebx
c0026cbb:	5e                   	pop    esi
c0026cbc:	5f                   	pop    edi
c0026cbd:	5d                   	pop    ebp
c0026cbe:	c3                   	ret    
c0026cbf:	90                   	nop
c0026cc0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026cc4:	85 db                	test   ebx,ebx
c0026cc6:	75 0d                	jne    c0026cd5 <__moddi3+0x81>
c0026cc8:	b8 01 00 00 00       	mov    eax,0x1
c0026ccd:	31 d2                	xor    edx,edx
c0026ccf:	f7 f7                	div    edi
c0026cd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cd5:	89 f0                	mov    eax,esi
c0026cd7:	31 d2                	xor    edx,edx
c0026cd9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026cdd:	f7 f7                	div    edi
c0026cdf:	89 e8                	mov    eax,ebp
c0026ce1:	f7 f7                	div    edi
c0026ce3:	89 d6                	mov    esi,edx
c0026ce5:	eb bd                	jmp    c0026ca4 <__moddi3+0x50>
c0026ce7:	90                   	nop
c0026ce8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026cec:	39 f7                	cmp    edi,esi
c0026cee:	76 20                	jbe    c0026d10 <__moddi3+0xbc>
c0026cf0:	89 c8                	mov    eax,ecx
c0026cf2:	89 f2                	mov    edx,esi
c0026cf4:	eb b2                	jmp    c0026ca8 <__moddi3+0x54>
c0026cf6:	66 90                	xchg   ax,ax
c0026cf8:	f7 d9                	neg    ecx
c0026cfa:	83 d3 00             	adc    ebx,0x0
c0026cfd:	f7 db                	neg    ebx
c0026cff:	89 de                	mov    esi,ebx
c0026d01:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026d09:	e9 6f ff ff ff       	jmp    c0026c7d <__moddi3+0x29>
c0026d0e:	66 90                	xchg   ax,ax
c0026d10:	0f bd c7             	bsr    eax,edi
c0026d13:	83 f0 1f             	xor    eax,0x1f
c0026d16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026d1a:	75 24                	jne    c0026d40 <__moddi3+0xec>
c0026d1c:	39 f7                	cmp    edi,esi
c0026d1e:	72 06                	jb     c0026d26 <__moddi3+0xd2>
c0026d20:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026d24:	77 0c                	ja     c0026d32 <__moddi3+0xde>
c0026d26:	89 e9                	mov    ecx,ebp
c0026d28:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026d2c:	19 fe                	sbb    esi,edi
c0026d2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026d32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d36:	89 f2                	mov    edx,esi
c0026d38:	e9 6b ff ff ff       	jmp    c0026ca8 <__moddi3+0x54>
c0026d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0026d40:	b8 20 00 00 00       	mov    eax,0x20
c0026d45:	89 c2                	mov    edx,eax
c0026d47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026d4b:	29 da                	sub    edx,ebx
c0026d4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026d51:	88 d9                	mov    cl,bl
c0026d53:	d3 e7                	shl    edi,cl
c0026d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d59:	88 d1                	mov    cl,dl
c0026d5b:	d3 e8                	shr    eax,cl
c0026d5d:	09 c7                	or     edi,eax
c0026d5f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026d63:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026d67:	89 d8                	mov    eax,ebx
c0026d69:	88 d9                	mov    cl,bl
c0026d6b:	d3 e7                	shl    edi,cl
c0026d6d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d71:	89 f3                	mov    ebx,esi
c0026d73:	88 d1                	mov    cl,dl
c0026d75:	d3 eb                	shr    ebx,cl
c0026d77:	89 c7                	mov    edi,eax
c0026d79:	88 c1                	mov    cl,al
c0026d7b:	d3 e6                	shl    esi,cl
c0026d7d:	89 e8                	mov    eax,ebp
c0026d7f:	88 d1                	mov    cl,dl
c0026d81:	d3 e8                	shr    eax,cl
c0026d83:	09 f0                	or     eax,esi
c0026d85:	89 f9                	mov    ecx,edi
c0026d87:	d3 e5                	shl    ebp,cl
c0026d89:	89 da                	mov    edx,ebx
c0026d8b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026d8f:	89 d3                	mov    ebx,edx
c0026d91:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d95:	89 c6                	mov    esi,eax
c0026d97:	89 d1                	mov    ecx,edx
c0026d99:	39 d3                	cmp    ebx,edx
c0026d9b:	72 27                	jb     c0026dc4 <__moddi3+0x170>
c0026d9d:	74 21                	je     c0026dc0 <__moddi3+0x16c>
c0026d9f:	29 f5                	sub    ebp,esi
c0026da1:	19 cb                	sbb    ebx,ecx
c0026da3:	89 de                	mov    esi,ebx
c0026da5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026da9:	d3 e6                	shl    esi,cl
c0026dab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026daf:	89 f9                	mov    ecx,edi
c0026db1:	d3 ed                	shr    ebp,cl
c0026db3:	09 ee                	or     esi,ebp
c0026db5:	89 f0                	mov    eax,esi
c0026db7:	d3 eb                	shr    ebx,cl
c0026db9:	89 da                	mov    edx,ebx
c0026dbb:	e9 e8 fe ff ff       	jmp    c0026ca8 <__moddi3+0x54>
c0026dc0:	39 c5                	cmp    ebp,eax
c0026dc2:	73 db                	jae    c0026d9f <__moddi3+0x14b>
c0026dc4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026dc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026dcc:	89 d1                	mov    ecx,edx
c0026dce:	89 c6                	mov    esi,eax
c0026dd0:	eb cd                	jmp    c0026d9f <__moddi3+0x14b>
c0026dd2:	66 90                	xchg   ax,ax

c0026dd4 <__udivdi3>:
c0026dd4:	55                   	push   ebp
c0026dd5:	57                   	push   edi
c0026dd6:	56                   	push   esi
c0026dd7:	53                   	push   ebx
c0026dd8:	83 ec 1c             	sub    esp,0x1c
c0026ddb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026ddf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026de3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026de7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026deb:	85 d2                	test   edx,edx
c0026ded:	75 41                	jne    c0026e30 <__udivdi3+0x5c>
c0026def:	39 f7                	cmp    edi,esi
c0026df1:	76 15                	jbe    c0026e08 <__udivdi3+0x34>
c0026df3:	89 e8                	mov    eax,ebp
c0026df5:	89 f2                	mov    edx,esi
c0026df7:	f7 f7                	div    edi
c0026df9:	31 db                	xor    ebx,ebx
c0026dfb:	89 da                	mov    edx,ebx
c0026dfd:	83 c4 1c             	add    esp,0x1c
c0026e00:	5b                   	pop    ebx
c0026e01:	5e                   	pop    esi
c0026e02:	5f                   	pop    edi
c0026e03:	5d                   	pop    ebp
c0026e04:	c3                   	ret    
c0026e05:	8d 76 00             	lea    esi,[esi+0x0]
c0026e08:	89 f9                	mov    ecx,edi
c0026e0a:	85 ff                	test   edi,edi
c0026e0c:	75 0b                	jne    c0026e19 <__udivdi3+0x45>
c0026e0e:	b8 01 00 00 00       	mov    eax,0x1
c0026e13:	31 d2                	xor    edx,edx
c0026e15:	f7 f7                	div    edi
c0026e17:	89 c1                	mov    ecx,eax
c0026e19:	31 d2                	xor    edx,edx
c0026e1b:	89 f0                	mov    eax,esi
c0026e1d:	f7 f1                	div    ecx
c0026e1f:	89 c3                	mov    ebx,eax
c0026e21:	89 e8                	mov    eax,ebp
c0026e23:	f7 f1                	div    ecx
c0026e25:	89 da                	mov    edx,ebx
c0026e27:	83 c4 1c             	add    esp,0x1c
c0026e2a:	5b                   	pop    ebx
c0026e2b:	5e                   	pop    esi
c0026e2c:	5f                   	pop    edi
c0026e2d:	5d                   	pop    ebp
c0026e2e:	c3                   	ret    
c0026e2f:	90                   	nop
c0026e30:	39 f2                	cmp    edx,esi
c0026e32:	77 1c                	ja     c0026e50 <__udivdi3+0x7c>
c0026e34:	0f bd da             	bsr    ebx,edx
c0026e37:	83 f3 1f             	xor    ebx,0x1f
c0026e3a:	75 24                	jne    c0026e60 <__udivdi3+0x8c>
c0026e3c:	39 f2                	cmp    edx,esi
c0026e3e:	72 08                	jb     c0026e48 <__udivdi3+0x74>
c0026e40:	39 ef                	cmp    edi,ebp
c0026e42:	0f 87 84 00 00 00    	ja     c0026ecc <__udivdi3+0xf8>
c0026e48:	b8 01 00 00 00       	mov    eax,0x1
c0026e4d:	eb ac                	jmp    c0026dfb <__udivdi3+0x27>
c0026e4f:	90                   	nop
c0026e50:	31 db                	xor    ebx,ebx
c0026e52:	31 c0                	xor    eax,eax
c0026e54:	89 da                	mov    edx,ebx
c0026e56:	83 c4 1c             	add    esp,0x1c
c0026e59:	5b                   	pop    ebx
c0026e5a:	5e                   	pop    esi
c0026e5b:	5f                   	pop    edi
c0026e5c:	5d                   	pop    ebp
c0026e5d:	c3                   	ret    
c0026e5e:	66 90                	xchg   ax,ax
c0026e60:	b8 20 00 00 00       	mov    eax,0x20
c0026e65:	29 d8                	sub    eax,ebx
c0026e67:	88 d9                	mov    cl,bl
c0026e69:	d3 e2                	shl    edx,cl
c0026e6b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026e6f:	89 fa                	mov    edx,edi
c0026e71:	88 c1                	mov    cl,al
c0026e73:	d3 ea                	shr    edx,cl
c0026e75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026e79:	09 d1                	or     ecx,edx
c0026e7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026e7f:	88 d9                	mov    cl,bl
c0026e81:	d3 e7                	shl    edi,cl
c0026e83:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026e87:	89 f7                	mov    edi,esi
c0026e89:	88 c1                	mov    cl,al
c0026e8b:	d3 ef                	shr    edi,cl
c0026e8d:	88 d9                	mov    cl,bl
c0026e8f:	d3 e6                	shl    esi,cl
c0026e91:	89 ea                	mov    edx,ebp
c0026e93:	88 c1                	mov    cl,al
c0026e95:	d3 ea                	shr    edx,cl
c0026e97:	09 d6                	or     esi,edx
c0026e99:	89 f0                	mov    eax,esi
c0026e9b:	89 fa                	mov    edx,edi
c0026e9d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ea1:	89 d7                	mov    edi,edx
c0026ea3:	89 c6                	mov    esi,eax
c0026ea5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ea9:	39 d7                	cmp    edi,edx
c0026eab:	72 13                	jb     c0026ec0 <__udivdi3+0xec>
c0026ead:	74 09                	je     c0026eb8 <__udivdi3+0xe4>
c0026eaf:	89 f0                	mov    eax,esi
c0026eb1:	31 db                	xor    ebx,ebx
c0026eb3:	e9 43 ff ff ff       	jmp    c0026dfb <__udivdi3+0x27>
c0026eb8:	88 d9                	mov    cl,bl
c0026eba:	d3 e5                	shl    ebp,cl
c0026ebc:	39 c5                	cmp    ebp,eax
c0026ebe:	73 ef                	jae    c0026eaf <__udivdi3+0xdb>
c0026ec0:	8d 46 ff             	lea    eax,[esi-0x1]
c0026ec3:	31 db                	xor    ebx,ebx
c0026ec5:	e9 31 ff ff ff       	jmp    c0026dfb <__udivdi3+0x27>
c0026eca:	66 90                	xchg   ax,ax
c0026ecc:	31 c0                	xor    eax,eax
c0026ece:	e9 28 ff ff ff       	jmp    c0026dfb <__udivdi3+0x27>
c0026ed3:	90                   	nop

c0026ed4 <__umoddi3>:
c0026ed4:	55                   	push   ebp
c0026ed5:	57                   	push   edi
c0026ed6:	56                   	push   esi
c0026ed7:	53                   	push   ebx
c0026ed8:	83 ec 1c             	sub    esp,0x1c
c0026edb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026edf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ee3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026ee7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026eeb:	89 da                	mov    edx,ebx
c0026eed:	85 c0                	test   eax,eax
c0026eef:	75 37                	jne    c0026f28 <__umoddi3+0x54>
c0026ef1:	39 df                	cmp    edi,ebx
c0026ef3:	76 13                	jbe    c0026f08 <__umoddi3+0x34>
c0026ef5:	89 f0                	mov    eax,esi
c0026ef7:	f7 f7                	div    edi
c0026ef9:	89 d0                	mov    eax,edx
c0026efb:	31 d2                	xor    edx,edx
c0026efd:	83 c4 1c             	add    esp,0x1c
c0026f00:	5b                   	pop    ebx
c0026f01:	5e                   	pop    esi
c0026f02:	5f                   	pop    edi
c0026f03:	5d                   	pop    ebp
c0026f04:	c3                   	ret    
c0026f05:	8d 76 00             	lea    esi,[esi+0x0]
c0026f08:	89 fd                	mov    ebp,edi
c0026f0a:	85 ff                	test   edi,edi
c0026f0c:	75 0b                	jne    c0026f19 <__umoddi3+0x45>
c0026f0e:	b8 01 00 00 00       	mov    eax,0x1
c0026f13:	31 d2                	xor    edx,edx
c0026f15:	f7 f7                	div    edi
c0026f17:	89 c5                	mov    ebp,eax
c0026f19:	89 d8                	mov    eax,ebx
c0026f1b:	31 d2                	xor    edx,edx
c0026f1d:	f7 f5                	div    ebp
c0026f1f:	89 f0                	mov    eax,esi
c0026f21:	f7 f5                	div    ebp
c0026f23:	89 d0                	mov    eax,edx
c0026f25:	eb d4                	jmp    c0026efb <__umoddi3+0x27>
c0026f27:	90                   	nop
c0026f28:	89 f1                	mov    ecx,esi
c0026f2a:	39 d8                	cmp    eax,ebx
c0026f2c:	76 0a                	jbe    c0026f38 <__umoddi3+0x64>
c0026f2e:	89 f0                	mov    eax,esi
c0026f30:	83 c4 1c             	add    esp,0x1c
c0026f33:	5b                   	pop    ebx
c0026f34:	5e                   	pop    esi
c0026f35:	5f                   	pop    edi
c0026f36:	5d                   	pop    ebp
c0026f37:	c3                   	ret    
c0026f38:	0f bd e8             	bsr    ebp,eax
c0026f3b:	83 f5 1f             	xor    ebp,0x1f
c0026f3e:	75 1c                	jne    c0026f5c <__umoddi3+0x88>
c0026f40:	39 d8                	cmp    eax,ebx
c0026f42:	72 04                	jb     c0026f48 <__umoddi3+0x74>
c0026f44:	39 f7                	cmp    edi,esi
c0026f46:	77 08                	ja     c0026f50 <__umoddi3+0x7c>
c0026f48:	89 da                	mov    edx,ebx
c0026f4a:	29 fe                	sub    esi,edi
c0026f4c:	19 c2                	sbb    edx,eax
c0026f4e:	89 f1                	mov    ecx,esi
c0026f50:	89 c8                	mov    eax,ecx
c0026f52:	83 c4 1c             	add    esp,0x1c
c0026f55:	5b                   	pop    ebx
c0026f56:	5e                   	pop    esi
c0026f57:	5f                   	pop    edi
c0026f58:	5d                   	pop    ebp
c0026f59:	c3                   	ret    
c0026f5a:	66 90                	xchg   ax,ax
c0026f5c:	ba 20 00 00 00       	mov    edx,0x20
c0026f61:	29 ea                	sub    edx,ebp
c0026f63:	89 e9                	mov    ecx,ebp
c0026f65:	d3 e0                	shl    eax,cl
c0026f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f6b:	89 f8                	mov    eax,edi
c0026f6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026f71:	88 d1                	mov    cl,dl
c0026f73:	d3 e8                	shr    eax,cl
c0026f75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f79:	09 c1                	or     ecx,eax
c0026f7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026f7f:	89 e9                	mov    ecx,ebp
c0026f81:	d3 e7                	shl    edi,cl
c0026f83:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026f87:	89 d8                	mov    eax,ebx
c0026f89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026f8d:	88 d1                	mov    cl,dl
c0026f8f:	d3 e8                	shr    eax,cl
c0026f91:	89 c7                	mov    edi,eax
c0026f93:	89 e9                	mov    ecx,ebp
c0026f95:	d3 e3                	shl    ebx,cl
c0026f97:	89 f0                	mov    eax,esi
c0026f99:	88 d1                	mov    cl,dl
c0026f9b:	d3 e8                	shr    eax,cl
c0026f9d:	09 d8                	or     eax,ebx
c0026f9f:	89 e9                	mov    ecx,ebp
c0026fa1:	d3 e6                	shl    esi,cl
c0026fa3:	89 f3                	mov    ebx,esi
c0026fa5:	89 fa                	mov    edx,edi
c0026fa7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026fab:	89 d1                	mov    ecx,edx
c0026fad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026fb1:	89 c6                	mov    esi,eax
c0026fb3:	89 d7                	mov    edi,edx
c0026fb5:	39 d1                	cmp    ecx,edx
c0026fb7:	72 27                	jb     c0026fe0 <__umoddi3+0x10c>
c0026fb9:	74 21                	je     c0026fdc <__umoddi3+0x108>
c0026fbb:	89 ca                	mov    edx,ecx
c0026fbd:	29 f3                	sub    ebx,esi
c0026fbf:	19 fa                	sbb    edx,edi
c0026fc1:	89 d0                	mov    eax,edx
c0026fc3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026fc7:	d3 e0                	shl    eax,cl
c0026fc9:	89 e9                	mov    ecx,ebp
c0026fcb:	d3 eb                	shr    ebx,cl
c0026fcd:	09 d8                	or     eax,ebx
c0026fcf:	d3 ea                	shr    edx,cl
c0026fd1:	83 c4 1c             	add    esp,0x1c
c0026fd4:	5b                   	pop    ebx
c0026fd5:	5e                   	pop    esi
c0026fd6:	5f                   	pop    edi
c0026fd7:	5d                   	pop    ebp
c0026fd8:	c3                   	ret    
c0026fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fdc:	39 c3                	cmp    ebx,eax
c0026fde:	73 db                	jae    c0026fbb <__umoddi3+0xe7>
c0026fe0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026fe4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026fe8:	89 d7                	mov    edi,edx
c0026fea:	89 c6                	mov    esi,eax
c0026fec:	eb cd                	jmp    c0026fbb <__umoddi3+0xe7>

c0026fee <__addsf3>:
c0026fee:	55                   	push   ebp
c0026fef:	89 e5                	mov    ebp,esp
c0026ff1:	57                   	push   edi
c0026ff2:	56                   	push   esi
c0026ff3:	53                   	push   ebx
c0026ff4:	83 ec 08             	sub    esp,0x8
c0026ff7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ffa:	89 fa                	mov    edx,edi
c0026ffc:	89 f8                	mov    eax,edi
c0026ffe:	c1 f8 17             	sar    eax,0x17
c0027001:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027004:	c1 e2 08             	shl    edx,0x8
c0027007:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002700d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027010:	89 de                	mov    esi,ebx
c0027012:	c1 fe 17             	sar    esi,0x17
c0027015:	c1 e3 08             	shl    ebx,0x8
c0027018:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002701e:	31 f0                	xor    eax,esi
c0027020:	0f 88 3b 01 00 00    	js     c0027161 <__addsf3+0x173>
c0027026:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027029:	29 f1                	sub    ecx,esi
c002702b:	85 c9                	test   ecx,ecx
c002702d:	7e 54                	jle    c0027083 <__addsf3+0x95>
c002702f:	89 f0                	mov    eax,esi
c0027031:	84 c0                	test   al,al
c0027033:	75 10                	jne    c0027045 <__addsf3+0x57>
c0027035:	85 db                	test   ebx,ebx
c0027037:	0f 84 aa 02 00 00    	je     c00272e7 <__addsf3+0x2f9>
c002703d:	49                   	dec    ecx
c002703e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027041:	74 38                	je     c002707b <__addsf3+0x8d>
c0027043:	eb 13                	jmp    c0027058 <__addsf3+0x6a>
c0027045:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027048:	f7 d0                	not    eax
c002704a:	84 c0                	test   al,al
c002704c:	0f 84 95 02 00 00    	je     c00272e7 <__addsf3+0x2f9>
c0027052:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027058:	83 f9 1f             	cmp    ecx,0x1f
c002705b:	0f 8f 86 02 00 00    	jg     c00272e7 <__addsf3+0x2f9>
c0027061:	89 de                	mov    esi,ebx
c0027063:	d3 ee                	shr    esi,cl
c0027065:	b8 20 00 00 00       	mov    eax,0x20
c002706a:	29 c8                	sub    eax,ecx
c002706c:	89 c1                	mov    ecx,eax
c002706e:	d3 e3                	shl    ebx,cl
c0027070:	31 c0                	xor    eax,eax
c0027072:	85 db                	test   ebx,ebx
c0027074:	0f 95 c0             	setne  al
c0027077:	09 f0                	or     eax,esi
c0027079:	01 d0                	add    eax,edx
c002707b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002707e:	e9 b6 00 00 00       	jmp    c0027139 <__addsf3+0x14b>
c0027083:	74 5c                	je     c00270e1 <__addsf3+0xf3>
c0027085:	89 f1                	mov    ecx,esi
c0027087:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002708a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002708d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027091:	75 14                	jne    c00270a7 <__addsf3+0xb9>
c0027093:	85 d2                	test   edx,edx
c0027095:	0f 84 4c 02 00 00    	je     c00272e7 <__addsf3+0x2f9>
c002709b:	49                   	dec    ecx
c002709c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002709f:	0f 84 94 00 00 00    	je     c0027139 <__addsf3+0x14b>
c00270a5:	eb 12                	jmp    c00270b9 <__addsf3+0xcb>
c00270a7:	89 f0                	mov    eax,esi
c00270a9:	f7 d0                	not    eax
c00270ab:	84 c0                	test   al,al
c00270ad:	0f 84 34 02 00 00    	je     c00272e7 <__addsf3+0x2f9>
c00270b3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270b9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270bc:	83 f9 1f             	cmp    ecx,0x1f
c00270bf:	0f 8f 22 02 00 00    	jg     c00272e7 <__addsf3+0x2f9>
c00270c5:	89 d7                	mov    edi,edx
c00270c7:	d3 ef                	shr    edi,cl
c00270c9:	b8 20 00 00 00       	mov    eax,0x20
c00270ce:	29 c8                	sub    eax,ecx
c00270d0:	89 c1                	mov    ecx,eax
c00270d2:	d3 e2                	shl    edx,cl
c00270d4:	31 c0                	xor    eax,eax
c00270d6:	85 d2                	test   edx,edx
c00270d8:	0f 95 c0             	setne  al
c00270db:	09 f8                	or     eax,edi
c00270dd:	01 d8                	add    eax,ebx
c00270df:	eb 58                	jmp    c0027139 <__addsf3+0x14b>
c00270e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00270e4:	8d 70 01             	lea    esi,[eax+0x1]
c00270e7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00270ed:	75 32                	jne    c0027121 <__addsf3+0x133>
c00270ef:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00270f3:	75 1f                	jne    c0027114 <__addsf3+0x126>
c00270f5:	85 d2                	test   edx,edx
c00270f7:	0f 84 e0 01 00 00    	je     c00272dd <__addsf3+0x2ef>
c00270fd:	85 db                	test   ebx,ebx
c00270ff:	0f 84 e2 01 00 00    	je     c00272e7 <__addsf3+0x2f9>
c0027105:	89 d0                	mov    eax,edx
c0027107:	01 d8                	add    eax,ebx
c0027109:	0f 89 a9 01 00 00    	jns    c00272b8 <__addsf3+0x2ca>
c002710f:	e9 9d 01 00 00       	jmp    c00272b1 <__addsf3+0x2c3>
c0027114:	85 d2                	test   edx,edx
c0027116:	0f 85 cb 01 00 00    	jne    c00272e7 <__addsf3+0x2f9>
c002711c:	e9 bc 01 00 00       	jmp    c00272dd <__addsf3+0x2ef>
c0027121:	31 c0                	xor    eax,eax
c0027123:	89 f1                	mov    ecx,esi
c0027125:	f7 d1                	not    ecx
c0027127:	84 c9                	test   cl,cl
c0027129:	0f 84 90 01 00 00    	je     c00272bf <__addsf3+0x2d1>
c002712f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027132:	d1 e8                	shr    eax,1
c0027134:	e9 86 01 00 00       	jmp    c00272bf <__addsf3+0x2d1>
c0027139:	85 c0                	test   eax,eax
c002713b:	0f 89 7e 01 00 00    	jns    c00272bf <__addsf3+0x2d1>
c0027141:	46                   	inc    esi
c0027142:	89 f2                	mov    edx,esi
c0027144:	f7 d2                	not    edx
c0027146:	84 d2                	test   dl,dl
c0027148:	0f 84 6f 01 00 00    	je     c00272bd <__addsf3+0x2cf>
c002714e:	89 c2                	mov    edx,eax
c0027150:	83 e2 01             	and    edx,0x1
c0027153:	d1 e8                	shr    eax,1
c0027155:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002715a:	09 d0                	or     eax,edx
c002715c:	e9 5e 01 00 00       	jmp    c00272bf <__addsf3+0x2d1>
c0027161:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027165:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027168:	89 f0                	mov    eax,esi
c002716a:	0f b6 c0             	movzx  eax,al
c002716d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027170:	29 c1                	sub    ecx,eax
c0027172:	85 c9                	test   ecx,ecx
c0027174:	7e 55                	jle    c00271cb <__addsf3+0x1dd>
c0027176:	85 c0                	test   eax,eax
c0027178:	75 11                	jne    c002718b <__addsf3+0x19d>
c002717a:	85 db                	test   ebx,ebx
c002717c:	0f 84 65 01 00 00    	je     c00272e7 <__addsf3+0x2f9>
c0027182:	49                   	dec    ecx
c0027183:	75 19                	jne    c002719e <__addsf3+0x1b0>
c0027185:	89 d0                	mov    eax,edx
c0027187:	29 d8                	sub    eax,ebx
c0027189:	eb 38                	jmp    c00271c3 <__addsf3+0x1d5>
c002718b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002718e:	f7 d0                	not    eax
c0027190:	84 c0                	test   al,al
c0027192:	0f 84 4f 01 00 00    	je     c00272e7 <__addsf3+0x2f9>
c0027198:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002719e:	83 f9 1f             	cmp    ecx,0x1f
c00271a1:	0f 8f 40 01 00 00    	jg     c00272e7 <__addsf3+0x2f9>
c00271a7:	89 de                	mov    esi,ebx
c00271a9:	d3 ee                	shr    esi,cl
c00271ab:	b8 20 00 00 00       	mov    eax,0x20
c00271b0:	29 c8                	sub    eax,ecx
c00271b2:	89 c1                	mov    ecx,eax
c00271b4:	d3 e3                	shl    ebx,cl
c00271b6:	31 c0                	xor    eax,eax
c00271b8:	85 db                	test   ebx,ebx
c00271ba:	0f 95 c0             	setne  al
c00271bd:	09 f0                	or     eax,esi
c00271bf:	29 c2                	sub    edx,eax
c00271c1:	89 d0                	mov    eax,edx
c00271c3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00271c6:	e9 af 00 00 00       	jmp    c002727a <__addsf3+0x28c>
c00271cb:	74 5c                	je     c0027229 <__addsf3+0x23b>
c00271cd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00271d0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271d3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00271d7:	75 14                	jne    c00271ed <__addsf3+0x1ff>
c00271d9:	85 d2                	test   edx,edx
c00271db:	0f 84 06 01 00 00    	je     c00272e7 <__addsf3+0x2f9>
c00271e1:	48                   	dec    eax
c00271e2:	75 1b                	jne    c00271ff <__addsf3+0x211>
c00271e4:	89 d8                	mov    eax,ebx
c00271e6:	29 d0                	sub    eax,edx
c00271e8:	e9 8d 00 00 00       	jmp    c002727a <__addsf3+0x28c>
c00271ed:	89 f1                	mov    ecx,esi
c00271ef:	f7 d1                	not    ecx
c00271f1:	84 c9                	test   cl,cl
c00271f3:	0f 84 ee 00 00 00    	je     c00272e7 <__addsf3+0x2f9>
c00271f9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027202:	83 f8 1f             	cmp    eax,0x1f
c0027205:	0f 8f dc 00 00 00    	jg     c00272e7 <__addsf3+0x2f9>
c002720b:	89 d7                	mov    edi,edx
c002720d:	88 c1                	mov    cl,al
c002720f:	d3 ef                	shr    edi,cl
c0027211:	b9 20 00 00 00       	mov    ecx,0x20
c0027216:	29 c1                	sub    ecx,eax
c0027218:	d3 e2                	shl    edx,cl
c002721a:	31 c0                	xor    eax,eax
c002721c:	85 d2                	test   edx,edx
c002721e:	0f 95 c0             	setne  al
c0027221:	09 f8                	or     eax,edi
c0027223:	29 c3                	sub    ebx,eax
c0027225:	89 d8                	mov    eax,ebx
c0027227:	eb 51                	jmp    c002727a <__addsf3+0x28c>
c0027229:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002722c:	40                   	inc    eax
c002722d:	a8 fe                	test   al,0xfe
c002722f:	75 3d                	jne    c002726e <__addsf3+0x280>
c0027231:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027235:	0f 85 a7 00 00 00    	jne    c00272e2 <__addsf3+0x2f4>
c002723b:	85 d2                	test   edx,edx
c002723d:	75 12                	jne    c0027251 <__addsf3+0x263>
c002723f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027242:	85 db                	test   ebx,ebx
c0027244:	0f 85 9d 00 00 00    	jne    c00272e7 <__addsf3+0x2f9>
c002724a:	31 ff                	xor    edi,edi
c002724c:	e9 96 00 00 00       	jmp    c00272e7 <__addsf3+0x2f9>
c0027251:	85 db                	test   ebx,ebx
c0027253:	0f 84 8e 00 00 00    	je     c00272e7 <__addsf3+0x2f9>
c0027259:	89 d0                	mov    eax,edx
c002725b:	29 d8                	sub    eax,ebx
c002725d:	79 06                	jns    c0027265 <__addsf3+0x277>
c002725f:	89 d8                	mov    eax,ebx
c0027261:	29 d0                	sub    eax,edx
c0027263:	eb 5a                	jmp    c00272bf <__addsf3+0x2d1>
c0027265:	bf 00 00 00 00       	mov    edi,0x0
c002726a:	74 7b                	je     c00272e7 <__addsf3+0x2f9>
c002726c:	eb 4a                	jmp    c00272b8 <__addsf3+0x2ca>
c002726e:	89 d0                	mov    eax,edx
c0027270:	29 d8                	sub    eax,ebx
c0027272:	79 12                	jns    c0027286 <__addsf3+0x298>
c0027274:	89 d8                	mov    eax,ebx
c0027276:	29 d0                	sub    eax,edx
c0027278:	eb 09                	jmp    c0027283 <__addsf3+0x295>
c002727a:	85 c0                	test   eax,eax
c002727c:	79 41                	jns    c00272bf <__addsf3+0x2d1>
c002727e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027283:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027286:	31 f6                	xor    esi,esi
c0027288:	85 c0                	test   eax,eax
c002728a:	74 33                	je     c00272bf <__addsf3+0x2d1>
c002728c:	0f bd c8             	bsr    ecx,eax
c002728f:	83 f1 1f             	xor    ecx,0x1f
c0027292:	d3 e0                	shl    eax,cl
c0027294:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027298:	39 ca                	cmp    edx,ecx
c002729a:	7f 10                	jg     c00272ac <__addsf3+0x2be>
c002729c:	29 d1                	sub    ecx,edx
c002729e:	41                   	inc    ecx
c002729f:	d3 e8                	shr    eax,cl
c00272a1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272a4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00272aa:	eb 13                	jmp    c00272bf <__addsf3+0x2d1>
c00272ac:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272af:	29 ce                	sub    esi,ecx
c00272b1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272b6:	eb 07                	jmp    c00272bf <__addsf3+0x2d1>
c00272b8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272bb:	eb 02                	jmp    c00272bf <__addsf3+0x2d1>
c00272bd:	31 c0                	xor    eax,eax
c00272bf:	89 c2                	mov    edx,eax
c00272c1:	c1 ea 08             	shr    edx,0x8
c00272c4:	a8 7f                	test   al,0x7f
c00272c6:	0f 95 c1             	setne  cl
c00272c9:	09 d1                	or     ecx,edx
c00272cb:	83 e1 01             	and    ecx,0x1
c00272ce:	c1 e8 07             	shr    eax,0x7
c00272d1:	21 c8                	and    eax,ecx
c00272d3:	c1 e6 17             	shl    esi,0x17
c00272d6:	09 d6                	or     esi,edx
c00272d8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00272db:	eb 0a                	jmp    c00272e7 <__addsf3+0x2f9>
c00272dd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00272e0:	eb 05                	jmp    c00272e7 <__addsf3+0x2f9>
c00272e2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00272e7:	89 f8                	mov    eax,edi
c00272e9:	5a                   	pop    edx
c00272ea:	59                   	pop    ecx
c00272eb:	5b                   	pop    ebx
c00272ec:	5e                   	pop    esi
c00272ed:	5f                   	pop    edi
c00272ee:	5d                   	pop    ebp
c00272ef:	c3                   	ret    

c00272f0 <__subsf3>:
c00272f0:	55                   	push   ebp
c00272f1:	89 e5                	mov    ebp,esp
c00272f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272f6:	05 00 00 00 80       	add    eax,0x80000000
c00272fb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00272fe:	5d                   	pop    ebp
c00272ff:	e9 ea fc ff ff       	jmp    c0026fee <__addsf3>

c0027304 <__negsf2>:
c0027304:	55                   	push   ebp
c0027305:	89 e5                	mov    ebp,esp
c0027307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002730a:	05 00 00 00 80       	add    eax,0x80000000
c002730f:	5d                   	pop    ebp
c0027310:	c3                   	ret    

c0027311 <__mulsf3>:
c0027311:	55                   	push   ebp
c0027312:	89 e5                	mov    ebp,esp
c0027314:	57                   	push   edi
c0027315:	56                   	push   esi
c0027316:	53                   	push   ebx
c0027317:	83 ec 1c             	sub    esp,0x1c
c002731a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002731d:	89 f0                	mov    eax,esi
c002731f:	89 f1                	mov    ecx,esi
c0027321:	c1 f9 17             	sar    ecx,0x17
c0027324:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027327:	c1 e0 08             	shl    eax,0x8
c002732a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002732f:	89 c1                	mov    ecx,eax
c0027331:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027334:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027337:	89 c7                	mov    edi,eax
c0027339:	c1 ff 17             	sar    edi,0x17
c002733c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027340:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027343:	89 f8                	mov    eax,edi
c0027345:	0f b6 c0             	movzx  eax,al
c0027348:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002734b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002734f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027352:	42                   	inc    edx
c0027353:	80 e2 fe             	and    dl,0xfe
c0027356:	75 7b                	jne    c00273d3 <__mulsf3+0xc2>
c0027358:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002735c:	74 54                	je     c00273b2 <__mulsf3+0xa1>
c002735e:	85 c9                	test   ecx,ecx
c0027360:	0f 85 64 01 00 00    	jne    c00274ca <__mulsf3+0x1b9>
c0027366:	8d 57 01             	lea    edx,[edi+0x1]
c0027369:	80 e2 fe             	and    dl,0xfe
c002736c:	75 1f                	jne    c002738d <__mulsf3+0x7c>
c002736e:	85 c0                	test   eax,eax
c0027370:	b8 00 00 00 00       	mov    eax,0x0
c0027375:	74 29                	je     c00273a0 <__mulsf3+0x8f>
c0027377:	53                   	push   ebx
c0027378:	53                   	push   ebx
c0027379:	50                   	push   eax
c002737a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002737d:	e8 96 05 00 00       	call   c0027918 <__nesf2>
c0027382:	83 c4 10             	add    esp,0x10
c0027385:	85 c0                	test   eax,eax
c0027387:	0f 85 3a 01 00 00    	jne    c00274c7 <__mulsf3+0x1b6>
c002738d:	85 ff                	test   edi,edi
c002738f:	0f 89 35 01 00 00    	jns    c00274ca <__mulsf3+0x1b9>
c0027395:	81 c6 00 00 00 80    	add    esi,0x80000000
c002739b:	e9 2a 01 00 00       	jmp    c00274ca <__mulsf3+0x1b9>
c00273a0:	51                   	push   ecx
c00273a1:	51                   	push   ecx
c00273a2:	50                   	push   eax
c00273a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273a6:	e8 6d 05 00 00       	call   c0027918 <__nesf2>
c00273ab:	83 c4 10             	add    esp,0x10
c00273ae:	85 c0                	test   eax,eax
c00273b0:	eb 15                	jmp    c00273c7 <__mulsf3+0xb6>
c00273b2:	85 c9                	test   ecx,ecx
c00273b4:	74 0b                	je     c00273c1 <__mulsf3+0xb0>
c00273b6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00273b9:	01 c9                	add    ecx,ecx
c00273bb:	78 16                	js     c00273d3 <__mulsf3+0xc2>
c00273bd:	89 d3                	mov    ebx,edx
c00273bf:	eb f5                	jmp    c00273b6 <__mulsf3+0xa5>
c00273c1:	89 f8                	mov    eax,edi
c00273c3:	f7 d0                	not    eax
c00273c5:	84 c0                	test   al,al
c00273c7:	75 c4                	jne    c002738d <__mulsf3+0x7c>
c00273c9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00273ce:	e9 f7 00 00 00       	jmp    c00274ca <__mulsf3+0x1b9>
c00273d3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00273d6:	c1 e6 08             	shl    esi,0x8
c00273d9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00273df:	8d 57 01             	lea    edx,[edi+0x1]
c00273e2:	80 e2 fe             	and    dl,0xfe
c00273e5:	75 63                	jne    c002744a <__mulsf3+0x139>
c00273e7:	85 c0                	test   eax,eax
c00273e9:	74 2f                	je     c002741a <__mulsf3+0x109>
c00273eb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00273ef:	0f 89 d2 00 00 00    	jns    c00274c7 <__mulsf3+0x1b6>
c00273f5:	52                   	push   edx
c00273f6:	52                   	push   edx
c00273f7:	6a 00                	push   0x0
c00273f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273fc:	e8 dc 04 00 00       	call   c00278dd <__eqsf2>
c0027401:	83 c4 10             	add    esp,0x10
c0027404:	85 c0                	test   eax,eax
c0027406:	0f 85 bb 00 00 00    	jne    c00274c7 <__mulsf3+0x1b6>
c002740c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002740f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027415:	e9 b0 00 00 00       	jmp    c00274ca <__mulsf3+0x1b9>
c002741a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002741d:	50                   	push   eax
c002741e:	50                   	push   eax
c002741f:	6a 00                	push   0x0
c0027421:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027424:	e8 b4 04 00 00       	call   c00278dd <__eqsf2>
c0027429:	83 c4 10             	add    esp,0x10
c002742c:	85 c0                	test   eax,eax
c002742e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027431:	75 0c                	jne    c002743f <__mulsf3+0x12e>
c0027433:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027437:	0f 89 8a 00 00 00    	jns    c00274c7 <__mulsf3+0x1b6>
c002743d:	eb cd                	jmp    c002740c <__mulsf3+0xfb>
c002743f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027442:	01 f6                	add    esi,esi
c0027444:	78 04                	js     c002744a <__mulsf3+0x139>
c0027446:	89 c3                	mov    ebx,eax
c0027448:	eb f5                	jmp    c002743f <__mulsf3+0x12e>
c002744a:	89 c8                	mov    eax,ecx
c002744c:	0d 00 00 00 80       	or     eax,0x80000000
c0027451:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027457:	f7 e6                	mul    esi
c0027459:	85 c0                	test   eax,eax
c002745b:	0f 95 c0             	setne  al
c002745e:	0f b6 c0             	movzx  eax,al
c0027461:	09 c2                	or     edx,eax
c0027463:	78 03                	js     c0027468 <__mulsf3+0x157>
c0027465:	01 d2                	add    edx,edx
c0027467:	4b                   	dec    ebx
c0027468:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002746e:	7f 22                	jg     c0027492 <__mulsf3+0x181>
c0027470:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027476:	85 db                	test   ebx,ebx
c0027478:	7f 23                	jg     c002749d <__mulsf3+0x18c>
c002747a:	83 fb e9             	cmp    ebx,0xffffffe9
c002747d:	7c 1a                	jl     c0027499 <__mulsf3+0x188>
c002747f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027485:	b9 01 00 00 00       	mov    ecx,0x1
c002748a:	29 d9                	sub    ecx,ebx
c002748c:	d3 ea                	shr    edx,cl
c002748e:	31 db                	xor    ebx,ebx
c0027490:	eb 0b                	jmp    c002749d <__mulsf3+0x18c>
c0027492:	bb ff 00 00 00       	mov    ebx,0xff
c0027497:	eb 02                	jmp    c002749b <__mulsf3+0x18a>
c0027499:	31 db                	xor    ebx,ebx
c002749b:	31 d2                	xor    edx,edx
c002749d:	89 d0                	mov    eax,edx
c002749f:	c1 e8 08             	shr    eax,0x8
c00274a2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00274a5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00274ab:	09 fb                	or     ebx,edi
c00274ad:	c1 e3 17             	shl    ebx,0x17
c00274b0:	09 c3                	or     ebx,eax
c00274b2:	f6 c2 7f             	test   dl,0x7f
c00274b5:	0f 95 c1             	setne  cl
c00274b8:	09 c8                	or     eax,ecx
c00274ba:	83 e0 01             	and    eax,0x1
c00274bd:	c1 ea 07             	shr    edx,0x7
c00274c0:	21 c2                	and    edx,eax
c00274c2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00274c5:	eb 03                	jmp    c00274ca <__mulsf3+0x1b9>
c00274c7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00274ca:	89 f0                	mov    eax,esi
c00274cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274cf:	5b                   	pop    ebx
c00274d0:	5e                   	pop    esi
c00274d1:	5f                   	pop    edi
c00274d2:	5d                   	pop    ebp
c00274d3:	c3                   	ret    

c00274d4 <__divsf3>:
c00274d4:	55                   	push   ebp
c00274d5:	89 e5                	mov    ebp,esp
c00274d7:	57                   	push   edi
c00274d8:	56                   	push   esi
c00274d9:	53                   	push   ebx
c00274da:	83 ec 1c             	sub    esp,0x1c
c00274dd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00274e0:	89 d8                	mov    eax,ebx
c00274e2:	89 d9                	mov    ecx,ebx
c00274e4:	c1 f9 17             	sar    ecx,0x17
c00274e7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00274ea:	c1 e0 08             	shl    eax,0x8
c00274ed:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274f2:	89 c1                	mov    ecx,eax
c00274f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00274f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274fa:	89 c7                	mov    edi,eax
c00274fc:	c1 ff 17             	sar    edi,0x17
c00274ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027503:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027506:	89 f8                	mov    eax,edi
c0027508:	0f b6 c0             	movzx  eax,al
c002750b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002750e:	29 c6                	sub    esi,eax
c0027510:	83 c6 7f             	add    esi,0x7f
c0027513:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027516:	42                   	inc    edx
c0027517:	80 e2 fe             	and    dl,0xfe
c002751a:	0f 85 9c 00 00 00    	jne    c00275bc <__divsf3+0xe8>
c0027520:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027524:	74 33                	je     c0027559 <__divsf3+0x85>
c0027526:	85 c9                	test   ecx,ecx
c0027528:	0f 85 c7 01 00 00    	jne    c00276f5 <__divsf3+0x221>
c002752e:	8d 57 01             	lea    edx,[edi+0x1]
c0027531:	80 e2 fe             	and    dl,0xfe
c0027534:	75 2f                	jne    c0027565 <__divsf3+0x91>
c0027536:	85 c0                	test   eax,eax
c0027538:	74 2b                	je     c0027565 <__divsf3+0x91>
c002753a:	51                   	push   ecx
c002753b:	51                   	push   ecx
c002753c:	6a 00                	push   0x0
c002753e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027541:	e8 d2 03 00 00       	call   c0027918 <__nesf2>
c0027546:	83 c4 10             	add    esp,0x10
c0027549:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002754c:	85 c0                	test   eax,eax
c002754e:	0f 85 a1 01 00 00    	jne    c00276f5 <__divsf3+0x221>
c0027554:	e9 92 01 00 00       	jmp    c00276eb <__divsf3+0x217>
c0027559:	85 c9                	test   ecx,ecx
c002755b:	75 1b                	jne    c0027578 <__divsf3+0xa4>
c002755d:	8d 57 01             	lea    edx,[edi+0x1]
c0027560:	80 e2 fe             	and    dl,0xfe
c0027563:	74 1e                	je     c0027583 <__divsf3+0xaf>
c0027565:	85 ff                	test   edi,edi
c0027567:	0f 89 88 01 00 00    	jns    c00276f5 <__divsf3+0x221>
c002756d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027573:	e9 7d 01 00 00       	jmp    c00276f5 <__divsf3+0x221>
c0027578:	8d 56 ff             	lea    edx,[esi-0x1]
c002757b:	01 c9                	add    ecx,ecx
c002757d:	78 3d                	js     c00275bc <__divsf3+0xe8>
c002757f:	89 d6                	mov    esi,edx
c0027581:	eb f5                	jmp    c0027578 <__divsf3+0xa4>
c0027583:	85 c0                	test   eax,eax
c0027585:	b8 00 00 00 00       	mov    eax,0x0
c002758a:	74 18                	je     c00275a4 <__divsf3+0xd0>
c002758c:	52                   	push   edx
c002758d:	52                   	push   edx
c002758e:	50                   	push   eax
c002758f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027592:	e8 81 03 00 00       	call   c0027918 <__nesf2>
c0027597:	83 c4 10             	add    esp,0x10
c002759a:	85 c0                	test   eax,eax
c002759c:	0f 85 50 01 00 00    	jne    c00276f2 <__divsf3+0x21e>
c00275a2:	eb c1                	jmp    c0027565 <__divsf3+0x91>
c00275a4:	56                   	push   esi
c00275a5:	56                   	push   esi
c00275a6:	50                   	push   eax
c00275a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275aa:	e8 69 03 00 00       	call   c0027918 <__nesf2>
c00275af:	83 c4 10             	add    esp,0x10
c00275b2:	85 c0                	test   eax,eax
c00275b4:	0f 84 31 01 00 00    	je     c00276eb <__divsf3+0x217>
c00275ba:	eb a9                	jmp    c0027565 <__divsf3+0x91>
c00275bc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00275bf:	c1 e3 08             	shl    ebx,0x8
c00275c2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275c8:	8d 57 01             	lea    edx,[edi+0x1]
c00275cb:	80 e2 fe             	and    dl,0xfe
c00275ce:	75 71                	jne    c0027641 <__divsf3+0x16d>
c00275d0:	85 c0                	test   eax,eax
c00275d2:	ba 00 00 00 00       	mov    edx,0x0
c00275d7:	74 2f                	je     c0027608 <__divsf3+0x134>
c00275d9:	51                   	push   ecx
c00275da:	51                   	push   ecx
c00275db:	52                   	push   edx
c00275dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275df:	e8 f9 02 00 00       	call   c00278dd <__eqsf2>
c00275e4:	83 c4 10             	add    esp,0x10
c00275e7:	85 c0                	test   eax,eax
c00275e9:	0f 85 03 01 00 00    	jne    c00276f2 <__divsf3+0x21e>
c00275ef:	31 d2                	xor    edx,edx
c00275f1:	89 d3                	mov    ebx,edx
c00275f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00275f6:	31 f8                	xor    eax,edi
c00275f8:	0f 89 f7 00 00 00    	jns    c00276f5 <__divsf3+0x221>
c00275fe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027603:	e9 ed 00 00 00       	jmp    c00276f5 <__divsf3+0x221>
c0027608:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002760b:	50                   	push   eax
c002760c:	50                   	push   eax
c002760d:	52                   	push   edx
c002760e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027611:	e8 c7 02 00 00       	call   c00278dd <__eqsf2>
c0027616:	83 c4 10             	add    esp,0x10
c0027619:	85 c0                	test   eax,eax
c002761b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002761e:	75 16                	jne    c0027636 <__divsf3+0x162>
c0027620:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027623:	31 fb                	xor    ebx,edi
c0027625:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002762b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027631:	e9 bf 00 00 00       	jmp    c00276f5 <__divsf3+0x221>
c0027636:	8d 46 01             	lea    eax,[esi+0x1]
c0027639:	01 db                	add    ebx,ebx
c002763b:	78 04                	js     c0027641 <__divsf3+0x16d>
c002763d:	89 c6                	mov    esi,eax
c002763f:	eb f5                	jmp    c0027636 <__divsf3+0x162>
c0027641:	89 c8                	mov    eax,ecx
c0027643:	0d 00 00 00 80       	or     eax,0x80000000
c0027648:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002764e:	31 d2                	xor    edx,edx
c0027650:	39 d8                	cmp    eax,ebx
c0027652:	72 07                	jb     c002765b <__divsf3+0x187>
c0027654:	29 d8                	sub    eax,ebx
c0027656:	ba 01 00 00 00       	mov    edx,0x1
c002765b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027662:	01 d2                	add    edx,edx
c0027664:	89 c1                	mov    ecx,eax
c0027666:	01 c0                	add    eax,eax
c0027668:	85 c9                	test   ecx,ecx
c002766a:	78 04                	js     c0027670 <__divsf3+0x19c>
c002766c:	39 c3                	cmp    ebx,eax
c002766e:	77 05                	ja     c0027675 <__divsf3+0x1a1>
c0027670:	29 d8                	sub    eax,ebx
c0027672:	83 ca 01             	or     edx,0x1
c0027675:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027678:	75 e8                	jne    c0027662 <__divsf3+0x18e>
c002767a:	85 c0                	test   eax,eax
c002767c:	0f 95 c0             	setne  al
c002767f:	0f b6 c0             	movzx  eax,al
c0027682:	c1 e2 06             	shl    edx,0x6
c0027685:	09 c2                	or     edx,eax
c0027687:	78 03                	js     c002768c <__divsf3+0x1b8>
c0027689:	01 d2                	add    edx,edx
c002768b:	4e                   	dec    esi
c002768c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027692:	7f 22                	jg     c00276b6 <__divsf3+0x1e2>
c0027694:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002769a:	85 f6                	test   esi,esi
c002769c:	7f 23                	jg     c00276c1 <__divsf3+0x1ed>
c002769e:	83 fe e9             	cmp    esi,0xffffffe9
c00276a1:	7c 1a                	jl     c00276bd <__divsf3+0x1e9>
c00276a3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00276a9:	b9 01 00 00 00       	mov    ecx,0x1
c00276ae:	29 f1                	sub    ecx,esi
c00276b0:	d3 ea                	shr    edx,cl
c00276b2:	31 f6                	xor    esi,esi
c00276b4:	eb 0b                	jmp    c00276c1 <__divsf3+0x1ed>
c00276b6:	be ff 00 00 00       	mov    esi,0xff
c00276bb:	eb 02                	jmp    c00276bf <__divsf3+0x1eb>
c00276bd:	31 f6                	xor    esi,esi
c00276bf:	31 d2                	xor    edx,edx
c00276c1:	89 d0                	mov    eax,edx
c00276c3:	c1 e8 08             	shr    eax,0x8
c00276c6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00276c9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00276cf:	09 fe                	or     esi,edi
c00276d1:	c1 e6 17             	shl    esi,0x17
c00276d4:	09 c6                	or     esi,eax
c00276d6:	f6 c2 7f             	test   dl,0x7f
c00276d9:	0f 95 c1             	setne  cl
c00276dc:	09 c8                	or     eax,ecx
c00276de:	83 e0 01             	and    eax,0x1
c00276e1:	c1 ea 07             	shr    edx,0x7
c00276e4:	21 c2                	and    edx,eax
c00276e6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00276e9:	eb 0a                	jmp    c00276f5 <__divsf3+0x221>
c00276eb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00276f0:	eb 03                	jmp    c00276f5 <__divsf3+0x221>
c00276f2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00276f5:	89 d8                	mov    eax,ebx
c00276f7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00276fa:	5b                   	pop    ebx
c00276fb:	5e                   	pop    esi
c00276fc:	5f                   	pop    edi
c00276fd:	5d                   	pop    ebp
c00276fe:	c3                   	ret    

c00276ff <__floatsisf>:
c00276ff:	55                   	push   ebp
c0027700:	89 e5                	mov    ebp,esp
c0027702:	53                   	push   ebx
c0027703:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027706:	85 d2                	test   edx,edx
c0027708:	7e 2b                	jle    c0027735 <__floatsisf+0x36>
c002770a:	0f bd ca             	bsr    ecx,edx
c002770d:	83 f1 1f             	xor    ecx,0x1f
c0027710:	d3 e2                	shl    edx,cl
c0027712:	89 d0                	mov    eax,edx
c0027714:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027719:	89 c3                	mov    ebx,eax
c002771b:	c1 eb 08             	shr    ebx,0x8
c002771e:	80 e2 7f             	and    dl,0x7f
c0027721:	0f 95 c2             	setne  dl
c0027724:	09 da                	or     edx,ebx
c0027726:	83 e2 01             	and    edx,0x1
c0027729:	c1 e8 07             	shr    eax,0x7
c002772c:	21 c2                	and    edx,eax
c002772e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027733:	eb 32                	jmp    c0027767 <__floatsisf+0x68>
c0027735:	b8 00 00 00 00       	mov    eax,0x0
c002773a:	74 34                	je     c0027770 <__floatsisf+0x71>
c002773c:	f7 da                	neg    edx
c002773e:	0f bd ca             	bsr    ecx,edx
c0027741:	83 f1 1f             	xor    ecx,0x1f
c0027744:	d3 e2                	shl    edx,cl
c0027746:	89 d0                	mov    eax,edx
c0027748:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002774d:	89 c3                	mov    ebx,eax
c002774f:	c1 eb 08             	shr    ebx,0x8
c0027752:	80 e2 7f             	and    dl,0x7f
c0027755:	0f 95 c2             	setne  dl
c0027758:	09 da                	or     edx,ebx
c002775a:	83 e2 01             	and    edx,0x1
c002775d:	c1 e8 07             	shr    eax,0x7
c0027760:	21 c2                	and    edx,eax
c0027762:	b8 9e 01 00 00       	mov    eax,0x19e
c0027767:	29 c8                	sub    eax,ecx
c0027769:	c1 e0 17             	shl    eax,0x17
c002776c:	09 d8                	or     eax,ebx
c002776e:	01 d0                	add    eax,edx
c0027770:	5b                   	pop    ebx
c0027771:	5d                   	pop    ebp
c0027772:	c3                   	ret    

c0027773 <__floatunsisf>:
c0027773:	55                   	push   ebp
c0027774:	89 e5                	mov    ebp,esp
c0027776:	53                   	push   ebx
c0027777:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002777a:	31 c0                	xor    eax,eax
c002777c:	85 d2                	test   edx,edx
c002777e:	74 32                	je     c00277b2 <__floatunsisf+0x3f>
c0027780:	0f bd ca             	bsr    ecx,edx
c0027783:	83 f1 1f             	xor    ecx,0x1f
c0027786:	d3 e2                	shl    edx,cl
c0027788:	89 d0                	mov    eax,edx
c002778a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002778f:	89 c3                	mov    ebx,eax
c0027791:	c1 eb 08             	shr    ebx,0x8
c0027794:	80 e2 7f             	and    dl,0x7f
c0027797:	0f 95 c2             	setne  dl
c002779a:	09 da                	or     edx,ebx
c002779c:	83 e2 01             	and    edx,0x1
c002779f:	c1 e8 07             	shr    eax,0x7
c00277a2:	21 c2                	and    edx,eax
c00277a4:	b8 9e 00 00 00       	mov    eax,0x9e
c00277a9:	29 c8                	sub    eax,ecx
c00277ab:	c1 e0 17             	shl    eax,0x17
c00277ae:	09 d8                	or     eax,ebx
c00277b0:	01 d0                	add    eax,edx
c00277b2:	5b                   	pop    ebx
c00277b3:	5d                   	pop    ebp
c00277b4:	c3                   	ret    

c00277b5 <__fixsfsi>:
c00277b5:	55                   	push   ebp
c00277b6:	89 e5                	mov    ebp,esp
c00277b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00277bb:	89 d1                	mov    ecx,edx
c00277bd:	c1 e1 08             	shl    ecx,0x8
c00277c0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00277c6:	c1 fa 17             	sar    edx,0x17
c00277c9:	78 1c                	js     c00277e7 <__fixsfsi+0x32>
c00277cb:	83 ea 7f             	sub    edx,0x7f
c00277ce:	31 c0                	xor    eax,eax
c00277d0:	83 fa 1e             	cmp    edx,0x1e
c00277d3:	77 40                	ja     c0027815 <__fixsfsi+0x60>
c00277d5:	89 c8                	mov    eax,ecx
c00277d7:	0d 00 00 00 80       	or     eax,0x80000000
c00277dc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277e1:	29 d1                	sub    ecx,edx
c00277e3:	d3 e8                	shr    eax,cl
c00277e5:	eb 2e                	jmp    c0027815 <__fixsfsi+0x60>
c00277e7:	31 c0                	xor    eax,eax
c00277e9:	81 c2 81 00 00 00    	add    edx,0x81
c00277ef:	78 24                	js     c0027815 <__fixsfsi+0x60>
c00277f1:	83 fa 1e             	cmp    edx,0x1e
c00277f4:	7e 09                	jle    c00277ff <__fixsfsi+0x4a>
c00277f6:	83 fa 1f             	cmp    edx,0x1f
c00277f9:	75 18                	jne    c0027813 <__fixsfsi+0x5e>
c00277fb:	85 c9                	test   ecx,ecx
c00277fd:	75 14                	jne    c0027813 <__fixsfsi+0x5e>
c00277ff:	89 c8                	mov    eax,ecx
c0027801:	0d 00 00 00 80       	or     eax,0x80000000
c0027806:	b9 1f 00 00 00       	mov    ecx,0x1f
c002780b:	29 d1                	sub    ecx,edx
c002780d:	d3 e8                	shr    eax,cl
c002780f:	f7 d8                	neg    eax
c0027811:	eb 02                	jmp    c0027815 <__fixsfsi+0x60>
c0027813:	31 c0                	xor    eax,eax
c0027815:	5d                   	pop    ebp
c0027816:	c3                   	ret    

c0027817 <__fixunssfsi>:
c0027817:	55                   	push   ebp
c0027818:	89 e5                	mov    ebp,esp
c002781a:	53                   	push   ebx
c002781b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002781e:	89 d3                	mov    ebx,edx
c0027820:	c1 fb 17             	sar    ebx,0x17
c0027823:	83 eb 7f             	sub    ebx,0x7f
c0027826:	31 c0                	xor    eax,eax
c0027828:	83 fb 1f             	cmp    ebx,0x1f
c002782b:	77 18                	ja     c0027845 <__fixunssfsi+0x2e>
c002782d:	89 d0                	mov    eax,edx
c002782f:	c1 e0 08             	shl    eax,0x8
c0027832:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027837:	0d 00 00 00 80       	or     eax,0x80000000
c002783c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027841:	29 d9                	sub    ecx,ebx
c0027843:	d3 e8                	shr    eax,cl
c0027845:	5b                   	pop    ebx
c0027846:	5d                   	pop    ebp
c0027847:	c3                   	ret    

c0027848 <__cmpsf2>:
c0027848:	55                   	push   ebp
c0027849:	89 e5                	mov    ebp,esp
c002784b:	57                   	push   edi
c002784c:	56                   	push   esi
c002784d:	53                   	push   ebx
c002784e:	83 ec 24             	sub    esp,0x24
c0027851:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027854:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027857:	e8 4f 10 00 00       	call   c00288ab <__truncdfsf2>
c002785c:	5a                   	pop    edx
c002785d:	59                   	pop    ecx
c002785e:	89 c3                	mov    ebx,eax
c0027860:	c1 e8 17             	shr    eax,0x17
c0027863:	0f b6 f0             	movzx  esi,al
c0027866:	89 d8                	mov    eax,ebx
c0027868:	c1 e8 1f             	shr    eax,0x1f
c002786b:	31 c6                	xor    esi,eax
c002786d:	c1 e3 08             	shl    ebx,0x8
c0027870:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027873:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027876:	e8 30 10 00 00       	call   c00288ab <__truncdfsf2>
c002787b:	83 c4 10             	add    esp,0x10
c002787e:	89 c1                	mov    ecx,eax
c0027880:	c1 e9 17             	shr    ecx,0x17
c0027883:	0f b6 c9             	movzx  ecx,cl
c0027886:	89 c7                	mov    edi,eax
c0027888:	c1 ef 1f             	shr    edi,0x1f
c002788b:	89 ca                	mov    edx,ecx
c002788d:	31 fa                	xor    edx,edi
c002788f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027892:	c1 e0 08             	shl    eax,0x8
c0027895:	89 c2                	mov    edx,eax
c0027897:	89 d8                	mov    eax,ebx
c0027899:	09 d0                	or     eax,edx
c002789b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278a0:	09 f0                	or     eax,esi
c00278a2:	75 08                	jne    c00278ac <__cmpsf2+0x64>
c00278a4:	31 c0                	xor    eax,eax
c00278a6:	39 f9                	cmp    ecx,edi
c00278a8:	75 0c                	jne    c00278b6 <__cmpsf2+0x6e>
c00278aa:	eb 29                	jmp    c00278d5 <__cmpsf2+0x8d>
c00278ac:	b8 01 00 00 00       	mov    eax,0x1
c00278b1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00278b4:	7f 1f                	jg     c00278d5 <__cmpsf2+0x8d>
c00278b6:	83 c8 ff             	or     eax,0xffffffff
c00278b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00278bc:	7c 17                	jl     c00278d5 <__cmpsf2+0x8d>
c00278be:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00278c4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00278ca:	b8 01 00 00 00       	mov    eax,0x1
c00278cf:	39 d3                	cmp    ebx,edx
c00278d1:	77 02                	ja     c00278d5 <__cmpsf2+0x8d>
c00278d3:	19 c0                	sbb    eax,eax
c00278d5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278d8:	5b                   	pop    ebx
c00278d9:	5e                   	pop    esi
c00278da:	5f                   	pop    edi
c00278db:	5d                   	pop    ebp
c00278dc:	c3                   	ret    

c00278dd <__eqsf2>:
c00278dd:	55                   	push   ebp
c00278de:	89 e5                	mov    ebp,esp
c00278e0:	83 ec 24             	sub    esp,0x24
c00278e3:	6a 01                	push   0x1
c00278e5:	83 ec 0c             	sub    esp,0xc
c00278e8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278eb:	e8 df 10 00 00       	call   c00289cf <__extendsfdf2>
c00278f0:	83 c4 10             	add    esp,0x10
c00278f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278f6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278f9:	52                   	push   edx
c00278fa:	50                   	push   eax
c00278fb:	50                   	push   eax
c00278fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00278ff:	e8 cb 10 00 00       	call   c00289cf <__extendsfdf2>
c0027904:	59                   	pop    ecx
c0027905:	59                   	pop    ecx
c0027906:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027909:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002790c:	52                   	push   edx
c002790d:	50                   	push   eax
c002790e:	e8 35 ff ff ff       	call   c0027848 <__cmpsf2>
c0027913:	83 c4 20             	add    esp,0x20
c0027916:	c9                   	leave  
c0027917:	c3                   	ret    

c0027918 <__nesf2>:
c0027918:	eb c3                	jmp    c00278dd <__eqsf2>

c002791a <__gtsf2>:
c002791a:	55                   	push   ebp
c002791b:	89 e5                	mov    ebp,esp
c002791d:	83 ec 24             	sub    esp,0x24
c0027920:	6a ff                	push   0xffffffff
c0027922:	83 ec 0c             	sub    esp,0xc
c0027925:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027928:	e8 a2 10 00 00       	call   c00289cf <__extendsfdf2>
c002792d:	83 c4 10             	add    esp,0x10
c0027930:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027933:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027936:	52                   	push   edx
c0027937:	50                   	push   eax
c0027938:	50                   	push   eax
c0027939:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002793c:	e8 8e 10 00 00       	call   c00289cf <__extendsfdf2>
c0027941:	59                   	pop    ecx
c0027942:	59                   	pop    ecx
c0027943:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027946:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027949:	52                   	push   edx
c002794a:	50                   	push   eax
c002794b:	e8 f8 fe ff ff       	call   c0027848 <__cmpsf2>
c0027950:	83 c4 20             	add    esp,0x20
c0027953:	c9                   	leave  
c0027954:	c3                   	ret    

c0027955 <__gesf2>:
c0027955:	eb c3                	jmp    c002791a <__gtsf2>

c0027957 <__ltsf2>:
c0027957:	eb 84                	jmp    c00278dd <__eqsf2>

c0027959 <__lesf2>:
c0027959:	eb 82                	jmp    c00278dd <__eqsf2>

c002795b <__adddf3>:
c002795b:	55                   	push   ebp
c002795c:	89 e5                	mov    ebp,esp
c002795e:	57                   	push   edi
c002795f:	56                   	push   esi
c0027960:	53                   	push   ebx
c0027961:	83 ec 24             	sub    esp,0x24
c0027964:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027967:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002796a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002796d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027970:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027973:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027976:	89 c8                	mov    eax,ecx
c0027978:	89 ce                	mov    esi,ecx
c002797a:	c1 fe 14             	sar    esi,0x14
c002797d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027980:	89 fb                	mov    ebx,edi
c0027982:	89 fa                	mov    edx,edi
c0027984:	c1 e2 0b             	shl    edx,0xb
c0027987:	c1 e0 0b             	shl    eax,0xb
c002798a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002798f:	c1 eb 15             	shr    ebx,0x15
c0027992:	09 d8                	or     eax,ebx
c0027994:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027997:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002799a:	c1 fe 14             	sar    esi,0x14
c002799d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00279a0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00279a3:	89 f3                	mov    ebx,esi
c00279a5:	c1 e3 0b             	shl    ebx,0xb
c00279a8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00279ab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279ae:	c1 e3 0b             	shl    ebx,0xb
c00279b1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00279b7:	c1 ee 15             	shr    esi,0x15
c00279ba:	09 f3                	or     ebx,esi
c00279bc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00279bf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279c2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00279c5:	0f 88 5f 02 00 00    	js     c0027c2a <__adddf3+0x2cf>
c00279cb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279ce:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00279d1:	85 db                	test   ebx,ebx
c00279d3:	0f 8e c7 00 00 00    	jle    c0027aa0 <__adddf3+0x145>
c00279d9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00279e0:	75 1a                	jne    c00279fc <__adddf3+0xa1>
c00279e2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00279e5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00279e8:	0f 84 b2 05 00 00    	je     c0027fa0 <__adddf3+0x645>
c00279ee:	4b                   	dec    ebx
c00279ef:	75 23                	jne    c0027a14 <__adddf3+0xb9>
c00279f1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00279f4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00279f7:	e9 99 00 00 00       	jmp    c0027a95 <__adddf3+0x13a>
c00279fc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279ff:	f7 d6                	not    esi
c0027a01:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a07:	0f 84 93 05 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027a0d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027a14:	83 fb 1f             	cmp    ebx,0x1f
c0027a17:	7e 42                	jle    c0027a5b <__adddf3+0x100>
c0027a19:	83 fb 3f             	cmp    ebx,0x3f
c0027a1c:	0f 8f 7e 05 00 00    	jg     c0027fa0 <__adddf3+0x645>
c0027a22:	83 e3 1f             	and    ebx,0x1f
c0027a25:	89 d9                	mov    ecx,ebx
c0027a27:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a2a:	d3 ef                	shr    edi,cl
c0027a2c:	31 db                	xor    ebx,ebx
c0027a2e:	85 c9                	test   ecx,ecx
c0027a30:	74 15                	je     c0027a47 <__adddf3+0xec>
c0027a32:	be 20 00 00 00       	mov    esi,0x20
c0027a37:	29 ce                	sub    esi,ecx
c0027a39:	89 f1                	mov    ecx,esi
c0027a3b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a3e:	d3 e6                	shl    esi,cl
c0027a40:	31 db                	xor    ebx,ebx
c0027a42:	85 f6                	test   esi,esi
c0027a44:	0f 95 c3             	setne  bl
c0027a47:	31 c9                	xor    ecx,ecx
c0027a49:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a4d:	0f 95 c1             	setne  cl
c0027a50:	09 cf                	or     edi,ecx
c0027a52:	09 fb                	or     ebx,edi
c0027a54:	01 da                	add    edx,ebx
c0027a56:	83 d0 00             	adc    eax,0x0
c0027a59:	eb 3a                	jmp    c0027a95 <__adddf3+0x13a>
c0027a5b:	bf 20 00 00 00       	mov    edi,0x20
c0027a60:	29 df                	sub    edi,ebx
c0027a62:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a65:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a68:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a6b:	d3 e6                	shl    esi,cl
c0027a6d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a70:	88 d9                	mov    cl,bl
c0027a72:	d3 ef                	shr    edi,cl
c0027a74:	09 fe                	or     esi,edi
c0027a76:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a79:	88 d9                	mov    cl,bl
c0027a7b:	d3 ef                	shr    edi,cl
c0027a7d:	89 fb                	mov    ebx,edi
c0027a7f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a82:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a85:	d3 e7                	shl    edi,cl
c0027a87:	85 ff                	test   edi,edi
c0027a89:	0f 95 c1             	setne  cl
c0027a8c:	0f b6 c9             	movzx  ecx,cl
c0027a8f:	09 ce                	or     esi,ecx
c0027a91:	01 f2                	add    edx,esi
c0027a93:	11 d8                	adc    eax,ebx
c0027a95:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a98:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a9b:	e9 52 01 00 00       	jmp    c0027bf2 <__adddf3+0x297>
c0027aa0:	0f 84 d5 00 00 00    	je     c0027b7b <__adddf3+0x220>
c0027aa6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027aa9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027aac:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027aaf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ab2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ab9:	75 20                	jne    c0027adb <__adddf3+0x180>
c0027abb:	89 d6                	mov    esi,edx
c0027abd:	09 c6                	or     esi,eax
c0027abf:	0f 84 db 04 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027ac5:	4b                   	dec    ebx
c0027ac6:	75 29                	jne    c0027af1 <__adddf3+0x196>
c0027ac8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027acb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ace:	01 d1                	add    ecx,edx
c0027ad0:	11 c6                	adc    esi,eax
c0027ad2:	89 f0                	mov    eax,esi
c0027ad4:	89 ca                	mov    edx,ecx
c0027ad6:	e9 17 01 00 00       	jmp    c0027bf2 <__adddf3+0x297>
c0027adb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ade:	f7 d6                	not    esi
c0027ae0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ae6:	0f 84 b4 04 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027aec:	0d 00 00 00 80       	or     eax,0x80000000
c0027af1:	83 fb 1f             	cmp    ebx,0x1f
c0027af4:	7e 48                	jle    c0027b3e <__adddf3+0x1e3>
c0027af6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027af9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027afc:	83 fb 3f             	cmp    ebx,0x3f
c0027aff:	0f 8f 9b 04 00 00    	jg     c0027fa0 <__adddf3+0x645>
c0027b05:	83 e3 1f             	and    ebx,0x1f
c0027b08:	89 d9                	mov    ecx,ebx
c0027b0a:	89 c7                	mov    edi,eax
c0027b0c:	d3 ef                	shr    edi,cl
c0027b0e:	31 db                	xor    ebx,ebx
c0027b10:	85 c9                	test   ecx,ecx
c0027b12:	74 12                	je     c0027b26 <__adddf3+0x1cb>
c0027b14:	be 20 00 00 00       	mov    esi,0x20
c0027b19:	29 ce                	sub    esi,ecx
c0027b1b:	89 f1                	mov    ecx,esi
c0027b1d:	d3 e0                	shl    eax,cl
c0027b1f:	31 db                	xor    ebx,ebx
c0027b21:	85 c0                	test   eax,eax
c0027b23:	0f 95 c3             	setne  bl
c0027b26:	31 c0                	xor    eax,eax
c0027b28:	85 d2                	test   edx,edx
c0027b2a:	0f 95 c0             	setne  al
c0027b2d:	09 c7                	or     edi,eax
c0027b2f:	09 fb                	or     ebx,edi
c0027b31:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b34:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b37:	01 da                	add    edx,ebx
c0027b39:	83 d6 00             	adc    esi,0x0
c0027b3c:	eb 39                	jmp    c0027b77 <__adddf3+0x21c>
c0027b3e:	be 20 00 00 00       	mov    esi,0x20
c0027b43:	29 de                	sub    esi,ebx
c0027b45:	89 c7                	mov    edi,eax
c0027b47:	89 f1                	mov    ecx,esi
c0027b49:	d3 e7                	shl    edi,cl
c0027b4b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b4e:	89 d7                	mov    edi,edx
c0027b50:	88 d9                	mov    cl,bl
c0027b52:	d3 ef                	shr    edi,cl
c0027b54:	89 f9                	mov    ecx,edi
c0027b56:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b59:	09 cf                	or     edi,ecx
c0027b5b:	88 d9                	mov    cl,bl
c0027b5d:	d3 e8                	shr    eax,cl
c0027b5f:	89 f1                	mov    ecx,esi
c0027b61:	d3 e2                	shl    edx,cl
c0027b63:	85 d2                	test   edx,edx
c0027b65:	0f 95 c2             	setne  dl
c0027b68:	0f b6 d2             	movzx  edx,dl
c0027b6b:	09 d7                	or     edi,edx
c0027b6d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b70:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b73:	01 fa                	add    edx,edi
c0027b75:	11 c6                	adc    esi,eax
c0027b77:	89 f0                	mov    eax,esi
c0027b79:	eb 77                	jmp    c0027bf2 <__adddf3+0x297>
c0027b7b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b7e:	46                   	inc    esi
c0027b7f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027b82:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b88:	75 41                	jne    c0027bcb <__adddf3+0x270>
c0027b8a:	89 d3                	mov    ebx,edx
c0027b8c:	09 c3                	or     ebx,eax
c0027b8e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027b95:	75 27                	jne    c0027bbe <__adddf3+0x263>
c0027b97:	85 db                	test   ebx,ebx
c0027b99:	0f 84 fb 03 00 00    	je     c0027f9a <__adddf3+0x63f>
c0027b9f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ba2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027ba5:	0f 84 f5 03 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027bab:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027bae:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027bb1:	85 c0                	test   eax,eax
c0027bb3:	0f 89 91 03 00 00    	jns    c0027f4a <__adddf3+0x5ef>
c0027bb9:	e9 85 03 00 00       	jmp    c0027f43 <__adddf3+0x5e8>
c0027bbe:	85 db                	test   ebx,ebx
c0027bc0:	0f 85 da 03 00 00    	jne    c0027fa0 <__adddf3+0x645>
c0027bc6:	e9 cf 03 00 00       	jmp    c0027f9a <__adddf3+0x63f>
c0027bcb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027bce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027bd1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bd4:	f7 d1                	not    ecx
c0027bd6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027bdc:	0f 84 70 03 00 00    	je     c0027f52 <__adddf3+0x5f7>
c0027be2:	d1 ea                	shr    edx,1
c0027be4:	89 c1                	mov    ecx,eax
c0027be6:	c1 e1 1f             	shl    ecx,0x1f
c0027be9:	09 ca                	or     edx,ecx
c0027beb:	d1 e8                	shr    eax,1
c0027bed:	e9 6f 03 00 00       	jmp    c0027f61 <__adddf3+0x606>
c0027bf2:	85 c0                	test   eax,eax
c0027bf4:	0f 89 67 03 00 00    	jns    c0027f61 <__adddf3+0x606>
c0027bfa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027bfd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c00:	f7 d1                	not    ecx
c0027c02:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027c08:	0f 84 44 03 00 00    	je     c0027f52 <__adddf3+0x5f7>
c0027c0e:	89 d1                	mov    ecx,edx
c0027c10:	d1 e9                	shr    ecx,1
c0027c12:	83 e2 01             	and    edx,0x1
c0027c15:	09 ca                	or     edx,ecx
c0027c17:	89 c1                	mov    ecx,eax
c0027c19:	c1 e1 1f             	shl    ecx,0x1f
c0027c1c:	09 ca                	or     edx,ecx
c0027c1e:	d1 e8                	shr    eax,1
c0027c20:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027c25:	e9 37 03 00 00       	jmp    c0027f61 <__adddf3+0x606>
c0027c2a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027c2d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027c33:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027c36:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c39:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c3f:	29 de                	sub    esi,ebx
c0027c41:	85 f6                	test   esi,esi
c0027c43:	0f 8e bd 00 00 00    	jle    c0027d06 <__adddf3+0x3ab>
c0027c49:	85 db                	test   ebx,ebx
c0027c4b:	75 17                	jne    c0027c64 <__adddf3+0x309>
c0027c4d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c50:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c53:	0f 84 47 03 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027c59:	4e                   	dec    esi
c0027c5a:	75 20                	jne    c0027c7c <__adddf3+0x321>
c0027c5c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c5f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027c62:	eb 5b                	jmp    c0027cbf <__adddf3+0x364>
c0027c64:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c67:	f7 d3                	not    ebx
c0027c69:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c6f:	0f 84 2b 03 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027c75:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027c7c:	83 fe 1f             	cmp    esi,0x1f
c0027c7f:	7e 49                	jle    c0027cca <__adddf3+0x36f>
c0027c81:	83 fe 3f             	cmp    esi,0x3f
c0027c84:	0f 8f 16 03 00 00    	jg     c0027fa0 <__adddf3+0x645>
c0027c8a:	83 e6 1f             	and    esi,0x1f
c0027c8d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027c90:	89 f1                	mov    ecx,esi
c0027c92:	d3 ef                	shr    edi,cl
c0027c94:	31 db                	xor    ebx,ebx
c0027c96:	85 f6                	test   esi,esi
c0027c98:	74 13                	je     c0027cad <__adddf3+0x352>
c0027c9a:	b9 20 00 00 00       	mov    ecx,0x20
c0027c9f:	29 f1                	sub    ecx,esi
c0027ca1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ca4:	d3 e6                	shl    esi,cl
c0027ca6:	31 db                	xor    ebx,ebx
c0027ca8:	85 f6                	test   esi,esi
c0027caa:	0f 95 c3             	setne  bl
c0027cad:	31 c9                	xor    ecx,ecx
c0027caf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027cb3:	0f 95 c1             	setne  cl
c0027cb6:	09 cf                	or     edi,ecx
c0027cb8:	09 fb                	or     ebx,edi
c0027cba:	29 da                	sub    edx,ebx
c0027cbc:	83 d8 00             	sbb    eax,0x0
c0027cbf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cc2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cc5:	e9 aa 01 00 00       	jmp    c0027e74 <__adddf3+0x519>
c0027cca:	bf 20 00 00 00       	mov    edi,0x20
c0027ccf:	29 f7                	sub    edi,esi
c0027cd1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cd4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cd7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027cda:	d3 e3                	shl    ebx,cl
c0027cdc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cdf:	89 f1                	mov    ecx,esi
c0027ce1:	d3 ef                	shr    edi,cl
c0027ce3:	09 fb                	or     ebx,edi
c0027ce5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ce8:	89 f1                	mov    ecx,esi
c0027cea:	d3 ef                	shr    edi,cl
c0027cec:	89 fe                	mov    esi,edi
c0027cee:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cf1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027cf4:	d3 e7                	shl    edi,cl
c0027cf6:	85 ff                	test   edi,edi
c0027cf8:	0f 95 c1             	setne  cl
c0027cfb:	0f b6 c9             	movzx  ecx,cl
c0027cfe:	09 cb                	or     ebx,ecx
c0027d00:	29 da                	sub    edx,ebx
c0027d02:	19 f0                	sbb    eax,esi
c0027d04:	eb b9                	jmp    c0027cbf <__adddf3+0x364>
c0027d06:	0f 84 cd 00 00 00    	je     c0027dd9 <__adddf3+0x47e>
c0027d0c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027d0f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d12:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d15:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d19:	75 1b                	jne    c0027d36 <__adddf3+0x3db>
c0027d1b:	89 d6                	mov    esi,edx
c0027d1d:	09 c6                	or     esi,eax
c0027d1f:	0f 84 7b 02 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027d25:	4b                   	dec    ebx
c0027d26:	75 24                	jne    c0027d4c <__adddf3+0x3f1>
c0027d28:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d2e:	29 d1                	sub    ecx,edx
c0027d30:	19 c6                	sbb    esi,eax
c0027d32:	89 ca                	mov    edx,ecx
c0027d34:	eb 61                	jmp    c0027d97 <__adddf3+0x43c>
c0027d36:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027d39:	f7 d6                	not    esi
c0027d3b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027d41:	0f 84 59 02 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027d47:	0d 00 00 00 80       	or     eax,0x80000000
c0027d4c:	83 fb 1f             	cmp    ebx,0x1f
c0027d4f:	7e 4d                	jle    c0027d9e <__adddf3+0x443>
c0027d51:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d54:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d57:	83 fb 3f             	cmp    ebx,0x3f
c0027d5a:	0f 8f 40 02 00 00    	jg     c0027fa0 <__adddf3+0x645>
c0027d60:	83 e3 1f             	and    ebx,0x1f
c0027d63:	89 d9                	mov    ecx,ebx
c0027d65:	89 c7                	mov    edi,eax
c0027d67:	d3 ef                	shr    edi,cl
c0027d69:	31 db                	xor    ebx,ebx
c0027d6b:	85 c9                	test   ecx,ecx
c0027d6d:	74 12                	je     c0027d81 <__adddf3+0x426>
c0027d6f:	be 20 00 00 00       	mov    esi,0x20
c0027d74:	29 ce                	sub    esi,ecx
c0027d76:	89 f1                	mov    ecx,esi
c0027d78:	d3 e0                	shl    eax,cl
c0027d7a:	31 db                	xor    ebx,ebx
c0027d7c:	85 c0                	test   eax,eax
c0027d7e:	0f 95 c3             	setne  bl
c0027d81:	31 c0                	xor    eax,eax
c0027d83:	85 d2                	test   edx,edx
c0027d85:	0f 95 c0             	setne  al
c0027d88:	09 c7                	or     edi,eax
c0027d8a:	09 fb                	or     ebx,edi
c0027d8c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d8f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d92:	29 da                	sub    edx,ebx
c0027d94:	83 de 00             	sbb    esi,0x0
c0027d97:	89 f0                	mov    eax,esi
c0027d99:	e9 d6 00 00 00       	jmp    c0027e74 <__adddf3+0x519>
c0027d9e:	be 20 00 00 00       	mov    esi,0x20
c0027da3:	29 de                	sub    esi,ebx
c0027da5:	89 c7                	mov    edi,eax
c0027da7:	89 f1                	mov    ecx,esi
c0027da9:	d3 e7                	shl    edi,cl
c0027dab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027dae:	89 d7                	mov    edi,edx
c0027db0:	88 d9                	mov    cl,bl
c0027db2:	d3 ef                	shr    edi,cl
c0027db4:	89 f9                	mov    ecx,edi
c0027db6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027db9:	09 cf                	or     edi,ecx
c0027dbb:	88 d9                	mov    cl,bl
c0027dbd:	d3 e8                	shr    eax,cl
c0027dbf:	89 f1                	mov    ecx,esi
c0027dc1:	d3 e2                	shl    edx,cl
c0027dc3:	85 d2                	test   edx,edx
c0027dc5:	0f 95 c2             	setne  dl
c0027dc8:	0f b6 d2             	movzx  edx,dl
c0027dcb:	09 d7                	or     edi,edx
c0027dcd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027dd0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dd3:	29 fa                	sub    edx,edi
c0027dd5:	19 c6                	sbb    esi,eax
c0027dd7:	eb be                	jmp    c0027d97 <__adddf3+0x43c>
c0027dd9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ddc:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027ddf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027de5:	75 6a                	jne    c0027e51 <__adddf3+0x4f6>
c0027de7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027deb:	75 58                	jne    c0027e45 <__adddf3+0x4ea>
c0027ded:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027df0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027df3:	89 d6                	mov    esi,edx
c0027df5:	09 c6                	or     esi,eax
c0027df7:	75 17                	jne    c0027e10 <__adddf3+0x4b5>
c0027df9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027dfc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027dff:	85 db                	test   ebx,ebx
c0027e01:	0f 85 99 01 00 00    	jne    c0027fa0 <__adddf3+0x645>
c0027e07:	31 ff                	xor    edi,edi
c0027e09:	31 c9                	xor    ecx,ecx
c0027e0b:	e9 90 01 00 00       	jmp    c0027fa0 <__adddf3+0x645>
c0027e10:	85 db                	test   ebx,ebx
c0027e12:	0f 84 88 01 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027e18:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027e1b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027e1e:	85 c0                	test   eax,eax
c0027e20:	79 10                	jns    c0027e32 <__adddf3+0x4d7>
c0027e22:	31 c9                	xor    ecx,ecx
c0027e24:	f7 da                	neg    edx
c0027e26:	0f 95 c1             	setne  cl
c0027e29:	01 c8                	add    eax,ecx
c0027e2b:	f7 d8                	neg    eax
c0027e2d:	e9 2f 01 00 00       	jmp    c0027f61 <__adddf3+0x606>
c0027e32:	31 ff                	xor    edi,edi
c0027e34:	31 c9                	xor    ecx,ecx
c0027e36:	89 c3                	mov    ebx,eax
c0027e38:	09 d3                	or     ebx,edx
c0027e3a:	0f 84 60 01 00 00    	je     c0027fa0 <__adddf3+0x645>
c0027e40:	e9 05 01 00 00       	jmp    c0027f4a <__adddf3+0x5ef>
c0027e45:	31 ff                	xor    edi,edi
c0027e47:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e4c:	e9 4f 01 00 00       	jmp    c0027fa0 <__adddf3+0x645>
c0027e51:	89 c1                	mov    ecx,eax
c0027e53:	89 d0                	mov    eax,edx
c0027e55:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027e58:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027e5b:	89 ca                	mov    edx,ecx
c0027e5d:	85 c9                	test   ecx,ecx
c0027e5f:	79 2c                	jns    c0027e8d <__adddf3+0x532>
c0027e61:	31 c9                	xor    ecx,ecx
c0027e63:	f7 d8                	neg    eax
c0027e65:	0f 95 c1             	setne  cl
c0027e68:	01 ca                	add    edx,ecx
c0027e6a:	f7 da                	neg    edx
c0027e6c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e6f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027e72:	eb 19                	jmp    c0027e8d <__adddf3+0x532>
c0027e74:	85 c0                	test   eax,eax
c0027e76:	0f 89 e5 00 00 00    	jns    c0027f61 <__adddf3+0x606>
c0027e7c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e81:	89 c1                	mov    ecx,eax
c0027e83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e86:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e89:	89 d0                	mov    eax,edx
c0027e8b:	89 ca                	mov    edx,ecx
c0027e8d:	85 d2                	test   edx,edx
c0027e8f:	74 59                	je     c0027eea <__adddf3+0x58f>
c0027e91:	0f bd da             	bsr    ebx,edx
c0027e94:	83 f3 1f             	xor    ebx,0x1f
c0027e97:	88 d9                	mov    cl,bl
c0027e99:	d3 e2                	shl    edx,cl
c0027e9b:	bf 20 00 00 00       	mov    edi,0x20
c0027ea0:	89 f9                	mov    ecx,edi
c0027ea2:	29 d9                	sub    ecx,ebx
c0027ea4:	89 c6                	mov    esi,eax
c0027ea6:	d3 ee                	shr    esi,cl
c0027ea8:	09 d6                	or     esi,edx
c0027eaa:	88 d9                	mov    cl,bl
c0027eac:	d3 e0                	shl    eax,cl
c0027eae:	89 c2                	mov    edx,eax
c0027eb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eb3:	25 ff 07 00 00       	and    eax,0x7ff
c0027eb8:	39 d8                	cmp    eax,ebx
c0027eba:	7f 22                	jg     c0027ede <__adddf3+0x583>
c0027ebc:	29 c3                	sub    ebx,eax
c0027ebe:	43                   	inc    ebx
c0027ebf:	88 d9                	mov    cl,bl
c0027ec1:	d3 ea                	shr    edx,cl
c0027ec3:	29 df                	sub    edi,ebx
c0027ec5:	89 f9                	mov    ecx,edi
c0027ec7:	89 f0                	mov    eax,esi
c0027ec9:	d3 e0                	shl    eax,cl
c0027ecb:	09 c2                	or     edx,eax
c0027ecd:	89 f0                	mov    eax,esi
c0027ecf:	88 d9                	mov    cl,bl
c0027ed1:	d3 e8                	shr    eax,cl
c0027ed3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ed6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027edc:	eb 6f                	jmp    c0027f4d <__adddf3+0x5f2>
c0027ede:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ee1:	29 d8                	sub    eax,ebx
c0027ee3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ee6:	89 f0                	mov    eax,esi
c0027ee8:	eb 59                	jmp    c0027f43 <__adddf3+0x5e8>
c0027eea:	85 c0                	test   eax,eax
c0027eec:	74 6a                	je     c0027f58 <__adddf3+0x5fd>
c0027eee:	0f bd c8             	bsr    ecx,eax
c0027ef1:	83 f1 1f             	xor    ecx,0x1f
c0027ef4:	d3 e0                	shl    eax,cl
c0027ef6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ef9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027eff:	83 c1 20             	add    ecx,0x20
c0027f02:	39 cb                	cmp    ebx,ecx
c0027f04:	7f 35                	jg     c0027f3b <__adddf3+0x5e0>
c0027f06:	29 d9                	sub    ecx,ebx
c0027f08:	8d 71 01             	lea    esi,[ecx+0x1]
c0027f0b:	83 fe 1f             	cmp    esi,0x1f
c0027f0e:	7e 09                	jle    c0027f19 <__adddf3+0x5be>
c0027f10:	83 e9 1f             	sub    ecx,0x1f
c0027f13:	d3 e8                	shr    eax,cl
c0027f15:	89 c3                	mov    ebx,eax
c0027f17:	eb 11                	jmp    c0027f2a <__adddf3+0x5cf>
c0027f19:	b9 20 00 00 00       	mov    ecx,0x20
c0027f1e:	29 f1                	sub    ecx,esi
c0027f20:	89 c3                	mov    ebx,eax
c0027f22:	d3 e3                	shl    ebx,cl
c0027f24:	89 f1                	mov    ecx,esi
c0027f26:	d3 e8                	shr    eax,cl
c0027f28:	89 c2                	mov    edx,eax
c0027f2a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f2d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f32:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f35:	89 d0                	mov    eax,edx
c0027f37:	89 da                	mov    edx,ebx
c0027f39:	eb 26                	jmp    c0027f61 <__adddf3+0x606>
c0027f3b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f3e:	29 cf                	sub    edi,ecx
c0027f40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f43:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f48:	eb 17                	jmp    c0027f61 <__adddf3+0x606>
c0027f4a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f4d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f50:	eb 0f                	jmp    c0027f61 <__adddf3+0x606>
c0027f52:	31 d2                	xor    edx,edx
c0027f54:	31 c0                	xor    eax,eax
c0027f56:	eb 09                	jmp    c0027f61 <__adddf3+0x606>
c0027f58:	89 c2                	mov    edx,eax
c0027f5a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027f61:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f64:	c1 e1 14             	shl    ecx,0x14
c0027f67:	89 c3                	mov    ebx,eax
c0027f69:	c1 eb 0b             	shr    ebx,0xb
c0027f6c:	09 d9                	or     ecx,ebx
c0027f6e:	89 d3                	mov    ebx,edx
c0027f70:	c1 eb 0b             	shr    ebx,0xb
c0027f73:	c1 e0 15             	shl    eax,0x15
c0027f76:	09 d8                	or     eax,ebx
c0027f78:	89 c7                	mov    edi,eax
c0027f7a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027f80:	0f 95 c0             	setne  al
c0027f83:	89 c6                	mov    esi,eax
c0027f85:	09 f3                	or     ebx,esi
c0027f87:	83 e3 01             	and    ebx,0x1
c0027f8a:	c1 ea 0a             	shr    edx,0xa
c0027f8d:	21 da                	and    edx,ebx
c0027f8f:	89 f8                	mov    eax,edi
c0027f91:	01 d0                	add    eax,edx
c0027f93:	83 d1 00             	adc    ecx,0x0
c0027f96:	89 c7                	mov    edi,eax
c0027f98:	eb 06                	jmp    c0027fa0 <__adddf3+0x645>
c0027f9a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f9d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fa0:	89 f8                	mov    eax,edi
c0027fa2:	89 ca                	mov    edx,ecx
c0027fa4:	83 c4 24             	add    esp,0x24
c0027fa7:	5b                   	pop    ebx
c0027fa8:	5e                   	pop    esi
c0027fa9:	5f                   	pop    edi
c0027faa:	5d                   	pop    ebp
c0027fab:	c3                   	ret    

c0027fac <__subdf3>:
c0027fac:	55                   	push   ebp
c0027fad:	89 e5                	mov    ebp,esp
c0027faf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fb2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027fb5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fbb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027fbe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027fc1:	5d                   	pop    ebp
c0027fc2:	e9 94 f9 ff ff       	jmp    c002795b <__adddf3>

c0027fc7 <__negdf2>:
c0027fc7:	55                   	push   ebp
c0027fc8:	89 e5                	mov    ebp,esp
c0027fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027fcd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fd0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fd6:	5d                   	pop    ebp
c0027fd7:	c3                   	ret    

c0027fd8 <__muldf3>:
c0027fd8:	55                   	push   ebp
c0027fd9:	89 e5                	mov    ebp,esp
c0027fdb:	57                   	push   edi
c0027fdc:	56                   	push   esi
c0027fdd:	53                   	push   ebx
c0027fde:	83 ec 24             	sub    esp,0x24
c0027fe1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fe4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027fe7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027fea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027ff0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027ff3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ff6:	89 c8                	mov    eax,ecx
c0027ff8:	c1 f8 14             	sar    eax,0x14
c0027ffb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ffe:	89 f8                	mov    eax,edi
c0028000:	89 fb                	mov    ebx,edi
c0028002:	c1 e3 0b             	shl    ebx,0xb
c0028005:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028008:	c1 e1 0b             	shl    ecx,0xb
c002800b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028011:	c1 e8 15             	shr    eax,0x15
c0028014:	09 c1                	or     ecx,eax
c0028016:	89 d6                	mov    esi,edx
c0028018:	89 d0                	mov    eax,edx
c002801a:	c1 f8 14             	sar    eax,0x14
c002801d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028020:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028023:	89 c3                	mov    ebx,eax
c0028025:	c1 e3 0b             	shl    ebx,0xb
c0028028:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002802b:	c1 e6 0b             	shl    esi,0xb
c002802e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028034:	c1 e8 15             	shr    eax,0x15
c0028037:	09 c6                	or     esi,eax
c0028039:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002803c:	25 ff 07 00 00       	and    eax,0x7ff
c0028041:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028044:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028047:	25 ff 07 00 00       	and    eax,0x7ff
c002804c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002804f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028052:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028055:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002805c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002805f:	40                   	inc    eax
c0028060:	a9 fe 07 00 00       	test   eax,0x7fe
c0028065:	0f 85 8d 00 00 00    	jne    c00280f8 <__muldf3+0x120>
c002806b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002806e:	09 c8                	or     eax,ecx
c0028070:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028074:	74 44                	je     c00280ba <__muldf3+0xe2>
c0028076:	85 c0                	test   eax,eax
c0028078:	0f 85 31 02 00 00    	jne    c00282af <__muldf3+0x2d7>
c002807e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028081:	40                   	inc    eax
c0028082:	a9 fe 07 00 00       	test   eax,0x7fe
c0028087:	75 13                	jne    c002809c <__muldf3+0xc4>
c0028089:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002808c:	09 f1                	or     ecx,esi
c002808e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028092:	74 22                	je     c00280b6 <__muldf3+0xde>
c0028094:	85 c9                	test   ecx,ecx
c0028096:	0f 85 0d 02 00 00    	jne    c00282a9 <__muldf3+0x2d1>
c002809c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00280a0:	0f 89 09 02 00 00    	jns    c00282af <__muldf3+0x2d7>
c00280a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00280a9:	05 00 00 00 80       	add    eax,0x80000000
c00280ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280b1:	e9 f9 01 00 00       	jmp    c00282af <__muldf3+0x2d7>
c00280b6:	85 c9                	test   ecx,ecx
c00280b8:	eb 2e                	jmp    c00280e8 <__muldf3+0x110>
c00280ba:	85 c0                	test   eax,eax
c00280bc:	74 20                	je     c00280de <__muldf3+0x106>
c00280be:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00280c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280c7:	c1 ef 1f             	shr    edi,0x1f
c00280ca:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00280cd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00280d0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00280d3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280d6:	09 f9                	or     ecx,edi
c00280d8:	78 1e                	js     c00280f8 <__muldf3+0x120>
c00280da:	89 c3                	mov    ebx,eax
c00280dc:	eb e0                	jmp    c00280be <__muldf3+0xe6>
c00280de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280e1:	f7 d0                	not    eax
c00280e3:	a9 ff 07 00 00       	test   eax,0x7ff
c00280e8:	75 b2                	jne    c002809c <__muldf3+0xc4>
c00280ea:	31 ff                	xor    edi,edi
c00280ec:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00280f3:	e9 b7 01 00 00       	jmp    c00282af <__muldf3+0x2d7>
c00280f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280fb:	40                   	inc    eax
c00280fc:	a9 fe 07 00 00       	test   eax,0x7fe
c0028101:	75 57                	jne    c002815a <__muldf3+0x182>
c0028103:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028106:	09 f0                	or     eax,esi
c0028108:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002810c:	74 23                	je     c0028131 <__muldf3+0x159>
c002810e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028112:	0f 89 91 01 00 00    	jns    c00282a9 <__muldf3+0x2d1>
c0028118:	85 c0                	test   eax,eax
c002811a:	0f 85 89 01 00 00    	jne    c00282a9 <__muldf3+0x2d1>
c0028120:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028123:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028129:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002812c:	e9 7e 01 00 00       	jmp    c00282af <__muldf3+0x2d7>
c0028131:	85 c0                	test   eax,eax
c0028133:	75 0c                	jne    c0028141 <__muldf3+0x169>
c0028135:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028139:	0f 89 6a 01 00 00    	jns    c00282a9 <__muldf3+0x2d1>
c002813f:	eb df                	jmp    c0028120 <__muldf3+0x148>
c0028141:	01 f6                	add    esi,esi
c0028143:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028146:	c1 ea 1f             	shr    edx,0x1f
c0028149:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002814c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002814f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028152:	09 d6                	or     esi,edx
c0028154:	78 04                	js     c002815a <__muldf3+0x182>
c0028156:	89 c3                	mov    ebx,eax
c0028158:	eb e7                	jmp    c0028141 <__muldf3+0x169>
c002815a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028160:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028166:	89 c8                	mov    eax,ecx
c0028168:	f7 e6                	mul    esi
c002816a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002816d:	89 c7                	mov    edi,eax
c002816f:	89 c8                	mov    eax,ecx
c0028171:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028174:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028177:	89 c1                	mov    ecx,eax
c0028179:	89 f0                	mov    eax,esi
c002817b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002817e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028181:	89 c6                	mov    esi,eax
c0028183:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028186:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028189:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002818c:	31 c0                	xor    eax,eax
c002818e:	01 f1                	add    ecx,esi
c0028190:	0f 92 c0             	setb   al
c0028193:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028196:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028199:	83 d6 00             	adc    esi,0x0
c002819c:	01 c7                	add    edi,eax
c002819e:	83 d6 00             	adc    esi,0x0
c00281a1:	01 ca                	add    edx,ecx
c00281a3:	0f 92 c1             	setb   cl
c00281a6:	0f b6 c9             	movzx  ecx,cl
c00281a9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00281ac:	83 d6 00             	adc    esi,0x0
c00281af:	01 cf                	add    edi,ecx
c00281b1:	83 d6 00             	adc    esi,0x0
c00281b4:	31 c9                	xor    ecx,ecx
c00281b6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00281b9:	0f 95 c1             	setne  cl
c00281bc:	09 cf                	or     edi,ecx
c00281be:	85 f6                	test   esi,esi
c00281c0:	78 0c                	js     c00281ce <__muldf3+0x1f6>
c00281c2:	01 f6                	add    esi,esi
c00281c4:	89 f8                	mov    eax,edi
c00281c6:	c1 e8 1f             	shr    eax,0x1f
c00281c9:	09 c6                	or     esi,eax
c00281cb:	01 ff                	add    edi,edi
c00281cd:	4b                   	dec    ebx
c00281ce:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00281d4:	0f 8f 85 00 00 00    	jg     c002825f <__muldf3+0x287>
c00281da:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00281e0:	85 db                	test   ebx,ebx
c00281e2:	0f 8f 84 00 00 00    	jg     c002826c <__muldf3+0x294>
c00281e8:	83 fb cc             	cmp    ebx,0xffffffcc
c00281eb:	7c 79                	jl     c0028266 <__muldf3+0x28e>
c00281ed:	ba 01 00 00 00       	mov    edx,0x1
c00281f2:	29 da                	sub    edx,ebx
c00281f4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00281fa:	83 fa 1f             	cmp    edx,0x1f
c00281fd:	7e 30                	jle    c002822f <__muldf3+0x257>
c00281ff:	83 fa 20             	cmp    edx,0x20
c0028202:	75 0b                	jne    c002820f <__muldf3+0x237>
c0028204:	31 c0                	xor    eax,eax
c0028206:	85 ff                	test   edi,edi
c0028208:	0f 95 c0             	setne  al
c002820b:	89 c7                	mov    edi,eax
c002820d:	eb 1a                	jmp    c0028229 <__muldf3+0x251>
c002820f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028212:	89 f0                	mov    eax,esi
c0028214:	d3 e0                	shl    eax,cl
c0028216:	09 f8                	or     eax,edi
c0028218:	0f 95 c0             	setne  al
c002821b:	0f b6 c0             	movzx  eax,al
c002821e:	89 c7                	mov    edi,eax
c0028220:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028225:	29 d9                	sub    ecx,ebx
c0028227:	d3 ee                	shr    esi,cl
c0028229:	09 f7                	or     edi,esi
c002822b:	31 db                	xor    ebx,ebx
c002822d:	eb 3b                	jmp    c002826a <__muldf3+0x292>
c002822f:	83 c3 1f             	add    ebx,0x1f
c0028232:	89 f0                	mov    eax,esi
c0028234:	88 d9                	mov    cl,bl
c0028236:	d3 e0                	shl    eax,cl
c0028238:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002823b:	89 f8                	mov    eax,edi
c002823d:	88 d1                	mov    cl,dl
c002823f:	d3 e8                	shr    eax,cl
c0028241:	89 c1                	mov    ecx,eax
c0028243:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028246:	09 c8                	or     eax,ecx
c0028248:	88 d9                	mov    cl,bl
c002824a:	d3 e7                	shl    edi,cl
c002824c:	31 db                	xor    ebx,ebx
c002824e:	85 ff                	test   edi,edi
c0028250:	0f 95 c3             	setne  bl
c0028253:	89 df                	mov    edi,ebx
c0028255:	09 c7                	or     edi,eax
c0028257:	88 d1                	mov    cl,dl
c0028259:	d3 ee                	shr    esi,cl
c002825b:	31 db                	xor    ebx,ebx
c002825d:	eb 0d                	jmp    c002826c <__muldf3+0x294>
c002825f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028264:	eb 02                	jmp    c0028268 <__muldf3+0x290>
c0028266:	31 db                	xor    ebx,ebx
c0028268:	31 ff                	xor    edi,edi
c002826a:	31 f6                	xor    esi,esi
c002826c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002826f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028272:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028277:	09 c3                	or     ebx,eax
c0028279:	c1 e3 14             	shl    ebx,0x14
c002827c:	89 f0                	mov    eax,esi
c002827e:	c1 e8 0b             	shr    eax,0xb
c0028281:	09 c3                	or     ebx,eax
c0028283:	89 f8                	mov    eax,edi
c0028285:	c1 e8 0b             	shr    eax,0xb
c0028288:	c1 e6 15             	shl    esi,0x15
c002828b:	09 c6                	or     esi,eax
c002828d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028293:	0f 95 c1             	setne  cl
c0028296:	09 c8                	or     eax,ecx
c0028298:	83 e0 01             	and    eax,0x1
c002829b:	c1 ef 0a             	shr    edi,0xa
c002829e:	21 c7                	and    edi,eax
c00282a0:	01 f7                	add    edi,esi
c00282a2:	83 d3 00             	adc    ebx,0x0
c00282a5:	89 da                	mov    edx,ebx
c00282a7:	eb 03                	jmp    c00282ac <__muldf3+0x2d4>
c00282a9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00282ac:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282af:	89 f8                	mov    eax,edi
c00282b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282b4:	83 c4 24             	add    esp,0x24
c00282b7:	5b                   	pop    ebx
c00282b8:	5e                   	pop    esi
c00282b9:	5f                   	pop    edi
c00282ba:	5d                   	pop    ebp
c00282bb:	c3                   	ret    

c00282bc <__divdf3>:
c00282bc:	55                   	push   ebp
c00282bd:	89 e5                	mov    ebp,esp
c00282bf:	57                   	push   edi
c00282c0:	56                   	push   esi
c00282c1:	53                   	push   ebx
c00282c2:	83 ec 2c             	sub    esp,0x2c
c00282c5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00282c8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00282cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00282ce:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00282d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00282d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00282d7:	89 ce                	mov    esi,ecx
c00282d9:	89 c8                	mov    eax,ecx
c00282db:	c1 f8 14             	sar    eax,0x14
c00282de:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00282e1:	89 f8                	mov    eax,edi
c00282e3:	89 fb                	mov    ebx,edi
c00282e5:	c1 e3 0b             	shl    ebx,0xb
c00282e8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00282eb:	c1 e6 0b             	shl    esi,0xb
c00282ee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00282f4:	c1 e8 15             	shr    eax,0x15
c00282f7:	09 c6                	or     esi,eax
c00282f9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00282fc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00282ff:	89 c2                	mov    edx,eax
c0028301:	c1 fa 14             	sar    edx,0x14
c0028304:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028307:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002830a:	89 de                	mov    esi,ebx
c002830c:	c1 e6 0b             	shl    esi,0xb
c002830f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028312:	c1 e0 0b             	shl    eax,0xb
c0028315:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002831a:	c1 eb 15             	shr    ebx,0x15
c002831d:	09 d8                	or     eax,ebx
c002831f:	89 c2                	mov    edx,eax
c0028321:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028324:	25 ff 07 00 00       	and    eax,0x7ff
c0028329:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002832c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002832f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028335:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028338:	29 d8                	sub    eax,ebx
c002833a:	05 ff 03 00 00       	add    eax,0x3ff
c002833f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028342:	46                   	inc    esi
c0028343:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028349:	0f 85 a5 00 00 00    	jne    c00283f4 <__divdf3+0x138>
c002834f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028352:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028355:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028359:	74 2a                	je     c0028385 <__divdf3+0xc9>
c002835b:	85 f6                	test   esi,esi
c002835d:	0f 85 cc 02 00 00    	jne    c002862f <__divdf3+0x373>
c0028363:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028366:	40                   	inc    eax
c0028367:	a9 fe 07 00 00       	test   eax,0x7fe
c002836c:	75 26                	jne    c0028394 <__divdf3+0xd8>
c002836e:	85 db                	test   ebx,ebx
c0028370:	74 22                	je     c0028394 <__divdf3+0xd8>
c0028372:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028375:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028378:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002837b:	09 d0                	or     eax,edx
c002837d:	0f 85 ac 02 00 00    	jne    c002862f <__divdf3+0x373>
c0028383:	eb 63                	jmp    c00283e8 <__divdf3+0x12c>
c0028385:	85 f6                	test   esi,esi
c0028387:	75 22                	jne    c00283ab <__divdf3+0xef>
c0028389:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002838c:	40                   	inc    eax
c002838d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028392:	74 36                	je     c00283ca <__divdf3+0x10e>
c0028394:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028398:	0f 89 91 02 00 00    	jns    c002862f <__divdf3+0x373>
c002839e:	89 f8                	mov    eax,edi
c00283a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283a6:	e9 80 02 00 00       	jmp    c002862b <__divdf3+0x36f>
c00283ab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283ae:	01 f6                	add    esi,esi
c00283b0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00283b3:	c1 ef 1f             	shr    edi,0x1f
c00283b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283b9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00283bc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00283bf:	09 f7                	or     edi,esi
c00283c1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00283c4:	78 2e                	js     c00283f4 <__divdf3+0x138>
c00283c6:	89 c8                	mov    eax,ecx
c00283c8:	eb e1                	jmp    c00283ab <__divdf3+0xef>
c00283ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00283cd:	09 d0                	or     eax,edx
c00283cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00283d3:	74 0f                	je     c00283e4 <__divdf3+0x128>
c00283d5:	85 c0                	test   eax,eax
c00283d7:	74 bb                	je     c0028394 <__divdf3+0xd8>
c00283d9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00283dc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00283df:	e9 4b 02 00 00       	jmp    c002862f <__divdf3+0x373>
c00283e4:	85 c0                	test   eax,eax
c00283e6:	75 ac                	jne    c0028394 <__divdf3+0xd8>
c00283e8:	31 ff                	xor    edi,edi
c00283ea:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00283ef:	e9 3b 02 00 00       	jmp    c002862f <__divdf3+0x373>
c00283f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283f7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00283fa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028400:	75 6b                	jne    c002846d <__divdf3+0x1b1>
c0028402:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028405:	09 d6                	or     esi,edx
c0028407:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002840b:	74 28                	je     c0028435 <__divdf3+0x179>
c002840d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028410:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028413:	85 f6                	test   esi,esi
c0028415:	0f 85 14 02 00 00    	jne    c002862f <__divdf3+0x373>
c002841b:	31 ff                	xor    edi,edi
c002841d:	31 c9                	xor    ecx,ecx
c002841f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028422:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028425:	0f 89 04 02 00 00    	jns    c002862f <__divdf3+0x373>
c002842b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028430:	e9 fa 01 00 00       	jmp    c002862f <__divdf3+0x373>
c0028435:	85 f6                	test   esi,esi
c0028437:	75 1b                	jne    c0028454 <__divdf3+0x198>
c0028439:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002843c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002843f:	25 00 00 00 80       	and    eax,0x80000000
c0028444:	31 c9                	xor    ecx,ecx
c0028446:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002844b:	89 cf                	mov    edi,ecx
c002844d:	89 c1                	mov    ecx,eax
c002844f:	e9 db 01 00 00       	jmp    c002862f <__divdf3+0x373>
c0028454:	01 d2                	add    edx,edx
c0028456:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028459:	c1 eb 1f             	shr    ebx,0x1f
c002845c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002845f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028462:	8d 48 01             	lea    ecx,[eax+0x1]
c0028465:	09 da                	or     edx,ebx
c0028467:	78 04                	js     c002846d <__divdf3+0x1b1>
c0028469:	89 c8                	mov    eax,ecx
c002846b:	eb e7                	jmp    c0028454 <__divdf3+0x198>
c002846d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028470:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028476:	81 ca 00 00 00 80    	or     edx,0x80000000
c002847c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002847f:	39 d6                	cmp    esi,edx
c0028481:	77 0d                	ja     c0028490 <__divdf3+0x1d4>
c0028483:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028486:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028489:	72 1b                	jb     c00284a6 <__divdf3+0x1ea>
c002848b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002848e:	75 16                	jne    c00284a6 <__divdf3+0x1ea>
c0028490:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028493:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028496:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028499:	83 de 00             	sbb    esi,0x0
c002849c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002849f:	ba 01 00 00 00       	mov    edx,0x1
c00284a4:	eb 02                	jmp    c00284a8 <__divdf3+0x1ec>
c00284a6:	31 d2                	xor    edx,edx
c00284a8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00284af:	31 ff                	xor    edi,edi
c00284b1:	01 ff                	add    edi,edi
c00284b3:	89 d1                	mov    ecx,edx
c00284b5:	c1 e9 1f             	shr    ecx,0x1f
c00284b8:	09 cf                	or     edi,ecx
c00284ba:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00284bd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00284c0:	89 da                	mov    edx,ebx
c00284c2:	89 f3                	mov    ebx,esi
c00284c4:	8d 34 36             	lea    esi,[esi+esi*1]
c00284c7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284ca:	c1 e9 1f             	shr    ecx,0x1f
c00284cd:	09 ce                	or     esi,ecx
c00284cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284d2:	01 c9                	add    ecx,ecx
c00284d4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00284d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00284da:	85 db                	test   ebx,ebx
c00284dc:	78 29                	js     c0028507 <__divdf3+0x24b>
c00284de:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00284e1:	72 07                	jb     c00284ea <__divdf3+0x22e>
c00284e3:	75 3c                	jne    c0028521 <__divdf3+0x265>
c00284e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284e8:	77 37                	ja     c0028521 <__divdf3+0x265>
c00284ea:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284ed:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00284f0:	31 d2                	xor    edx,edx
c00284f2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00284f5:	0f 97 c2             	seta   dl
c00284f8:	29 d6                	sub    esi,edx
c00284fa:	89 d9                	mov    ecx,ebx
c00284fc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00284ff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028502:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028505:	eb 17                	jmp    c002851e <__divdf3+0x262>
c0028507:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002850a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002850d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028510:	0f 97 c1             	seta   cl
c0028513:	0f b6 c9             	movzx  ecx,cl
c0028516:	29 ce                	sub    esi,ecx
c0028518:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002851b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002851e:	83 ca 01             	or     edx,0x1
c0028521:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028524:	75 8b                	jne    c00284b1 <__divdf3+0x1f5>
c0028526:	c1 e7 09             	shl    edi,0x9
c0028529:	89 d1                	mov    ecx,edx
c002852b:	c1 e9 17             	shr    ecx,0x17
c002852e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028531:	09 f3                	or     ebx,esi
c0028533:	0f 95 c3             	setne  bl
c0028536:	0f b6 db             	movzx  ebx,bl
c0028539:	c1 e2 09             	shl    edx,0x9
c002853c:	09 d3                	or     ebx,edx
c002853e:	89 ca                	mov    edx,ecx
c0028540:	09 fa                	or     edx,edi
c0028542:	78 0c                	js     c0028550 <__divdf3+0x294>
c0028544:	01 d2                	add    edx,edx
c0028546:	89 d9                	mov    ecx,ebx
c0028548:	c1 e9 1f             	shr    ecx,0x1f
c002854b:	09 ca                	or     edx,ecx
c002854d:	01 db                	add    ebx,ebx
c002854f:	48                   	dec    eax
c0028550:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028555:	0f 8f 83 00 00 00    	jg     c00285de <__divdf3+0x322>
c002855b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028561:	85 c0                	test   eax,eax
c0028563:	0f 8f 82 00 00 00    	jg     c00285eb <__divdf3+0x32f>
c0028569:	83 f8 cc             	cmp    eax,0xffffffcc
c002856c:	7c 77                	jl     c00285e5 <__divdf3+0x329>
c002856e:	be 01 00 00 00       	mov    esi,0x1
c0028573:	29 c6                	sub    esi,eax
c0028575:	81 ca 00 00 00 80    	or     edx,0x80000000
c002857b:	83 fe 1f             	cmp    esi,0x1f
c002857e:	7e 2f                	jle    c00285af <__divdf3+0x2f3>
c0028580:	83 fe 20             	cmp    esi,0x20
c0028583:	75 0a                	jne    c002858f <__divdf3+0x2d3>
c0028585:	85 db                	test   ebx,ebx
c0028587:	0f 95 c3             	setne  bl
c002858a:	0f b6 db             	movzx  ebx,bl
c002858d:	eb 1a                	jmp    c00285a9 <__divdf3+0x2ed>
c002858f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028592:	89 d7                	mov    edi,edx
c0028594:	d3 e7                	shl    edi,cl
c0028596:	89 f9                	mov    ecx,edi
c0028598:	09 d9                	or     ecx,ebx
c002859a:	0f 95 c3             	setne  bl
c002859d:	0f b6 db             	movzx  ebx,bl
c00285a0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00285a5:	29 c1                	sub    ecx,eax
c00285a7:	d3 ea                	shr    edx,cl
c00285a9:	09 d3                	or     ebx,edx
c00285ab:	31 c0                	xor    eax,eax
c00285ad:	eb 3a                	jmp    c00285e9 <__divdf3+0x32d>
c00285af:	83 c0 1f             	add    eax,0x1f
c00285b2:	89 d7                	mov    edi,edx
c00285b4:	88 c1                	mov    cl,al
c00285b6:	d3 e7                	shl    edi,cl
c00285b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285bb:	89 df                	mov    edi,ebx
c00285bd:	89 f1                	mov    ecx,esi
c00285bf:	d3 ef                	shr    edi,cl
c00285c1:	89 f9                	mov    ecx,edi
c00285c3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00285c6:	09 cf                	or     edi,ecx
c00285c8:	88 c1                	mov    cl,al
c00285ca:	d3 e3                	shl    ebx,cl
c00285cc:	85 db                	test   ebx,ebx
c00285ce:	0f 95 c3             	setne  bl
c00285d1:	0f b6 db             	movzx  ebx,bl
c00285d4:	09 fb                	or     ebx,edi
c00285d6:	89 f1                	mov    ecx,esi
c00285d8:	d3 ea                	shr    edx,cl
c00285da:	31 c0                	xor    eax,eax
c00285dc:	eb 0d                	jmp    c00285eb <__divdf3+0x32f>
c00285de:	b8 ff 07 00 00       	mov    eax,0x7ff
c00285e3:	eb 02                	jmp    c00285e7 <__divdf3+0x32b>
c00285e5:	31 c0                	xor    eax,eax
c00285e7:	31 db                	xor    ebx,ebx
c00285e9:	31 d2                	xor    edx,edx
c00285eb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00285ee:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00285f1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00285f7:	09 c8                	or     eax,ecx
c00285f9:	c1 e0 14             	shl    eax,0x14
c00285fc:	89 d1                	mov    ecx,edx
c00285fe:	c1 e9 0b             	shr    ecx,0xb
c0028601:	09 c8                	or     eax,ecx
c0028603:	89 c6                	mov    esi,eax
c0028605:	89 d9                	mov    ecx,ebx
c0028607:	c1 e9 0b             	shr    ecx,0xb
c002860a:	c1 e2 15             	shl    edx,0x15
c002860d:	09 ca                	or     edx,ecx
c002860f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028615:	0f 95 c0             	setne  al
c0028618:	09 c1                	or     ecx,eax
c002861a:	83 e1 01             	and    ecx,0x1
c002861d:	c1 eb 0a             	shr    ebx,0xa
c0028620:	21 cb                	and    ebx,ecx
c0028622:	01 d3                	add    ebx,edx
c0028624:	89 d8                	mov    eax,ebx
c0028626:	83 d6 00             	adc    esi,0x0
c0028629:	89 f2                	mov    edx,esi
c002862b:	89 c7                	mov    edi,eax
c002862d:	89 d1                	mov    ecx,edx
c002862f:	89 f8                	mov    eax,edi
c0028631:	89 ca                	mov    edx,ecx
c0028633:	83 c4 2c             	add    esp,0x2c
c0028636:	5b                   	pop    ebx
c0028637:	5e                   	pop    esi
c0028638:	5f                   	pop    edi
c0028639:	5d                   	pop    ebp
c002863a:	c3                   	ret    

c002863b <__floatsidf>:
c002863b:	55                   	push   ebp
c002863c:	89 e5                	mov    ebp,esp
c002863e:	56                   	push   esi
c002863f:	53                   	push   ebx
c0028640:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028643:	85 db                	test   ebx,ebx
c0028645:	7e 15                	jle    c002865c <__floatsidf+0x21>
c0028647:	0f bd cb             	bsr    ecx,ebx
c002864a:	83 f1 1f             	xor    ecx,0x1f
c002864d:	d3 e3                	shl    ebx,cl
c002864f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028655:	b8 1e 04 00 00       	mov    eax,0x41e
c002865a:	eb 21                	jmp    c002867d <__floatsidf+0x42>
c002865c:	b8 00 00 00 00       	mov    eax,0x0
c0028661:	ba 00 00 00 00       	mov    edx,0x0
c0028666:	74 2a                	je     c0028692 <__floatsidf+0x57>
c0028668:	f7 db                	neg    ebx
c002866a:	0f bd cb             	bsr    ecx,ebx
c002866d:	83 f1 1f             	xor    ecx,0x1f
c0028670:	d3 e3                	shl    ebx,cl
c0028672:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028678:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002867d:	29 c8                	sub    eax,ecx
c002867f:	c1 e0 14             	shl    eax,0x14
c0028682:	89 c1                	mov    ecx,eax
c0028684:	89 de                	mov    esi,ebx
c0028686:	c1 ee 0b             	shr    esi,0xb
c0028689:	09 f1                	or     ecx,esi
c002868b:	89 ca                	mov    edx,ecx
c002868d:	c1 e3 15             	shl    ebx,0x15
c0028690:	89 d8                	mov    eax,ebx
c0028692:	5b                   	pop    ebx
c0028693:	5e                   	pop    esi
c0028694:	5d                   	pop    ebp
c0028695:	c3                   	ret    

c0028696 <__floatunsidf>:
c0028696:	55                   	push   ebp
c0028697:	89 e5                	mov    ebp,esp
c0028699:	56                   	push   esi
c002869a:	53                   	push   ebx
c002869b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002869e:	85 db                	test   ebx,ebx
c00286a0:	74 2a                	je     c00286cc <__floatunsidf+0x36>
c00286a2:	0f bd cb             	bsr    ecx,ebx
c00286a5:	83 f1 1f             	xor    ecx,0x1f
c00286a8:	d3 e3                	shl    ebx,cl
c00286aa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00286b0:	b8 1e 04 00 00       	mov    eax,0x41e
c00286b5:	29 c8                	sub    eax,ecx
c00286b7:	c1 e0 14             	shl    eax,0x14
c00286ba:	89 c1                	mov    ecx,eax
c00286bc:	89 de                	mov    esi,ebx
c00286be:	c1 ee 0b             	shr    esi,0xb
c00286c1:	09 f1                	or     ecx,esi
c00286c3:	89 ca                	mov    edx,ecx
c00286c5:	c1 e3 15             	shl    ebx,0x15
c00286c8:	89 d8                	mov    eax,ebx
c00286ca:	eb 04                	jmp    c00286d0 <__floatunsidf+0x3a>
c00286cc:	31 c0                	xor    eax,eax
c00286ce:	31 d2                	xor    edx,edx
c00286d0:	5b                   	pop    ebx
c00286d1:	5e                   	pop    esi
c00286d2:	5d                   	pop    ebp
c00286d3:	c3                   	ret    

c00286d4 <__fixdfsi>:
c00286d4:	55                   	push   ebp
c00286d5:	89 e5                	mov    ebp,esp
c00286d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00286da:	89 d1                	mov    ecx,edx
c00286dc:	c1 e1 0b             	shl    ecx,0xb
c00286df:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00286e8:	c1 e8 15             	shr    eax,0x15
c00286eb:	09 c1                	or     ecx,eax
c00286ed:	c1 fa 14             	sar    edx,0x14
c00286f0:	78 1f                	js     c0028711 <__fixdfsi+0x3d>
c00286f2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00286f8:	31 c0                	xor    eax,eax
c00286fa:	83 fa 1e             	cmp    edx,0x1e
c00286fd:	77 40                	ja     c002873f <__fixdfsi+0x6b>
c00286ff:	89 c8                	mov    eax,ecx
c0028701:	0d 00 00 00 80       	or     eax,0x80000000
c0028706:	b9 1f 00 00 00       	mov    ecx,0x1f
c002870b:	29 d1                	sub    ecx,edx
c002870d:	d3 e8                	shr    eax,cl
c002870f:	eb 2e                	jmp    c002873f <__fixdfsi+0x6b>
c0028711:	31 c0                	xor    eax,eax
c0028713:	81 c2 01 04 00 00    	add    edx,0x401
c0028719:	78 24                	js     c002873f <__fixdfsi+0x6b>
c002871b:	83 fa 1e             	cmp    edx,0x1e
c002871e:	7e 09                	jle    c0028729 <__fixdfsi+0x55>
c0028720:	83 fa 1f             	cmp    edx,0x1f
c0028723:	75 18                	jne    c002873d <__fixdfsi+0x69>
c0028725:	85 c9                	test   ecx,ecx
c0028727:	75 14                	jne    c002873d <__fixdfsi+0x69>
c0028729:	89 c8                	mov    eax,ecx
c002872b:	0d 00 00 00 80       	or     eax,0x80000000
c0028730:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028735:	29 d1                	sub    ecx,edx
c0028737:	d3 e8                	shr    eax,cl
c0028739:	f7 d8                	neg    eax
c002873b:	eb 02                	jmp    c002873f <__fixdfsi+0x6b>
c002873d:	31 c0                	xor    eax,eax
c002873f:	5d                   	pop    ebp
c0028740:	c3                   	ret    

c0028741 <__fixunsdfsi>:
c0028741:	55                   	push   ebp
c0028742:	89 e5                	mov    ebp,esp
c0028744:	53                   	push   ebx
c0028745:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028748:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002874b:	89 d3                	mov    ebx,edx
c002874d:	c1 fb 14             	sar    ebx,0x14
c0028750:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028756:	31 c0                	xor    eax,eax
c0028758:	83 fb 1f             	cmp    ebx,0x1f
c002875b:	77 1d                	ja     c002877a <__fixunsdfsi+0x39>
c002875d:	89 d0                	mov    eax,edx
c002875f:	c1 e0 0b             	shl    eax,0xb
c0028762:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028767:	c1 e9 15             	shr    ecx,0x15
c002876a:	09 c8                	or     eax,ecx
c002876c:	0d 00 00 00 80       	or     eax,0x80000000
c0028771:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028776:	29 d9                	sub    ecx,ebx
c0028778:	d3 e8                	shr    eax,cl
c002877a:	5b                   	pop    ebx
c002877b:	5d                   	pop    ebp
c002877c:	c3                   	ret    

c002877d <__cmpdf2>:
c002877d:	55                   	push   ebp
c002877e:	89 e5                	mov    ebp,esp
c0028780:	57                   	push   edi
c0028781:	56                   	push   esi
c0028782:	53                   	push   ebx
c0028783:	83 ec 0c             	sub    esp,0xc
c0028786:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028789:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002878c:	89 ca                	mov    edx,ecx
c002878e:	c1 ea 14             	shr    edx,0x14
c0028791:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028797:	89 cb                	mov    ebx,ecx
c0028799:	c1 fb 1f             	sar    ebx,0x1f
c002879c:	31 da                	xor    edx,ebx
c002879e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00287a1:	89 df                	mov    edi,ebx
c00287a3:	c1 e7 0b             	shl    edi,0xb
c00287a6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00287a9:	c1 e1 0b             	shl    ecx,0xb
c00287ac:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00287b2:	c1 eb 15             	shr    ebx,0x15
c00287b5:	09 d9                	or     ecx,ebx
c00287b7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00287ba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00287bd:	89 ce                	mov    esi,ecx
c00287bf:	c1 ee 14             	shr    esi,0x14
c00287c2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00287c8:	89 cb                	mov    ebx,ecx
c00287ca:	c1 fb 1f             	sar    ebx,0x1f
c00287cd:	31 de                	xor    esi,ebx
c00287cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00287d2:	89 df                	mov    edi,ebx
c00287d4:	c1 e7 0b             	shl    edi,0xb
c00287d7:	c1 e1 0b             	shl    ecx,0xb
c00287da:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00287e0:	c1 eb 15             	shr    ebx,0x15
c00287e3:	09 d9                	or     ecx,ebx
c00287e5:	89 d3                	mov    ebx,edx
c00287e7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00287ed:	43                   	inc    ebx
c00287ee:	83 fb 01             	cmp    ebx,0x1
c00287f1:	77 08                	ja     c00287fb <__cmpdf2+0x7e>
c00287f3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287f6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00287f9:	75 68                	jne    c0028863 <__cmpdf2+0xe6>
c00287fb:	89 f3                	mov    ebx,esi
c00287fd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028803:	43                   	inc    ebx
c0028804:	83 fb 01             	cmp    ebx,0x1
c0028807:	77 06                	ja     c002880f <__cmpdf2+0x92>
c0028809:	89 fb                	mov    ebx,edi
c002880b:	09 cb                	or     ebx,ecx
c002880d:	75 54                	jne    c0028863 <__cmpdf2+0xe6>
c002880f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028812:	09 f8                	or     eax,edi
c0028814:	09 c8                	or     eax,ecx
c0028816:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028819:	75 12                	jne    c002882d <__cmpdf2+0xb0>
c002881b:	8d 42 01             	lea    eax,[edx+0x1]
c002881e:	83 f8 01             	cmp    eax,0x1
c0028821:	77 0a                	ja     c002882d <__cmpdf2+0xb0>
c0028823:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028826:	31 c0                	xor    eax,eax
c0028828:	83 fb 01             	cmp    ebx,0x1
c002882b:	76 36                	jbe    c0028863 <__cmpdf2+0xe6>
c002882d:	b8 01 00 00 00       	mov    eax,0x1
c0028832:	39 f2                	cmp    edx,esi
c0028834:	7f 2d                	jg     c0028863 <__cmpdf2+0xe6>
c0028836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002883b:	7c 26                	jl     c0028863 <__cmpdf2+0xe6>
c002883d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028840:	77 07                	ja     c0028849 <__cmpdf2+0xcc>
c0028842:	72 16                	jb     c002885a <__cmpdf2+0xdd>
c0028844:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028847:	76 0a                	jbe    c0028853 <__cmpdf2+0xd6>
c0028849:	89 d0                	mov    eax,edx
c002884b:	c1 f8 1f             	sar    eax,0x1f
c002884e:	83 c8 01             	or     eax,0x1
c0028851:	eb 10                	jmp    c0028863 <__cmpdf2+0xe6>
c0028853:	b8 00 00 00 00       	mov    eax,0x0
c0028858:	73 09                	jae    c0028863 <__cmpdf2+0xe6>
c002885a:	89 d0                	mov    eax,edx
c002885c:	c1 f8 1f             	sar    eax,0x1f
c002885f:	83 e0 02             	and    eax,0x2
c0028862:	48                   	dec    eax
c0028863:	83 c4 0c             	add    esp,0xc
c0028866:	5b                   	pop    ebx
c0028867:	5e                   	pop    esi
c0028868:	5f                   	pop    edi
c0028869:	5d                   	pop    ebp
c002886a:	c3                   	ret    

c002886b <__eqdf2>:
c002886b:	55                   	push   ebp
c002886c:	89 e5                	mov    ebp,esp
c002886e:	50                   	push   eax
c002886f:	6a 01                	push   0x1
c0028871:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028874:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028877:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002887a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002887d:	e8 fb fe ff ff       	call   c002877d <__cmpdf2>
c0028882:	83 c4 18             	add    esp,0x18
c0028885:	c9                   	leave  
c0028886:	c3                   	ret    

c0028887 <__nedf2>:
c0028887:	eb e2                	jmp    c002886b <__eqdf2>

c0028889 <__gtdf2>:
c0028889:	55                   	push   ebp
c002888a:	89 e5                	mov    ebp,esp
c002888c:	50                   	push   eax
c002888d:	6a ff                	push   0xffffffff
c002888f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028892:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028895:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028898:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002889b:	e8 dd fe ff ff       	call   c002877d <__cmpdf2>
c00288a0:	83 c4 18             	add    esp,0x18
c00288a3:	c9                   	leave  
c00288a4:	c3                   	ret    

c00288a5 <__gedf2>:
c00288a5:	eb e2                	jmp    c0028889 <__gtdf2>

c00288a7 <__ltdf2>:
c00288a7:	eb c2                	jmp    c002886b <__eqdf2>

c00288a9 <__ledf2>:
c00288a9:	eb c0                	jmp    c002886b <__eqdf2>

c00288ab <__truncdfsf2>:
c00288ab:	55                   	push   ebp
c00288ac:	89 e5                	mov    ebp,esp
c00288ae:	57                   	push   edi
c00288af:	56                   	push   esi
c00288b0:	53                   	push   ebx
c00288b1:	83 ec 0c             	sub    esp,0xc
c00288b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00288b7:	89 d1                	mov    ecx,edx
c00288b9:	c1 f9 14             	sar    ecx,0x14
c00288bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00288bf:	89 df                	mov    edi,ebx
c00288c1:	c1 e7 0b             	shl    edi,0xb
c00288c4:	89 d0                	mov    eax,edx
c00288c6:	c1 e0 0b             	shl    eax,0xb
c00288c9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00288ce:	c1 eb 15             	shr    ebx,0x15
c00288d1:	09 d8                	or     eax,ebx
c00288d3:	89 cb                	mov    ebx,ecx
c00288d5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00288db:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00288e1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00288e7:	0f 86 9e 00 00 00    	jbe    c002898b <__truncdfsf2+0xe0>
c00288ed:	85 db                	test   ebx,ebx
c00288ef:	75 0a                	jne    c00288fb <__truncdfsf2+0x50>
c00288f1:	c1 fa 17             	sar    edx,0x17
c00288f4:	30 d2                	xor    dl,dl
c00288f6:	e9 84 00 00 00       	jmp    c002897f <__truncdfsf2+0xd4>
c00288fb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028901:	83 fe 83             	cmp    esi,0xffffff83
c0028904:	7d 4b                	jge    c0028951 <__truncdfsf2+0xa6>
c0028906:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002890b:	29 f1                	sub    ecx,esi
c002890d:	83 f9 1f             	cmp    ecx,0x1f
c0028910:	7f 6b                	jg     c002897d <__truncdfsf2+0xd2>
c0028912:	0d 00 00 00 80       	or     eax,0x80000000
c0028917:	89 c3                	mov    ebx,eax
c0028919:	d3 eb                	shr    ebx,cl
c002891b:	be 01 00 00 00       	mov    esi,0x1
c0028920:	d3 e6                	shl    esi,cl
c0028922:	4e                   	dec    esi
c0028923:	21 f0                	and    eax,esi
c0028925:	09 f8                	or     eax,edi
c0028927:	0f 95 c0             	setne  al
c002892a:	0f b6 c0             	movzx  eax,al
c002892d:	09 c3                	or     ebx,eax
c002892f:	89 d9                	mov    ecx,ebx
c0028931:	c1 e9 08             	shr    ecx,0x8
c0028934:	f6 c3 7f             	test   bl,0x7f
c0028937:	0f 95 c0             	setne  al
c002893a:	09 c8                	or     eax,ecx
c002893c:	83 e0 01             	and    eax,0x1
c002893f:	c1 eb 07             	shr    ebx,0x7
c0028942:	21 c3                	and    ebx,eax
c0028944:	81 e2 00 00 00 80    	and    edx,0x80000000
c002894a:	09 d1                	or     ecx,edx
c002894c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002894f:	eb 76                	jmp    c00289c7 <__truncdfsf2+0x11c>
c0028951:	83 c6 80             	add    esi,0xffffff80
c0028954:	7e 1d                	jle    c0028973 <__truncdfsf2+0xc8>
c0028956:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002895c:	75 0b                	jne    c0028969 <__truncdfsf2+0xbe>
c002895e:	09 f8                	or     eax,edi
c0028960:	74 09                	je     c002896b <__truncdfsf2+0xc0>
c0028962:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028967:	eb 02                	jmp    c002896b <__truncdfsf2+0xc0>
c0028969:	31 c0                	xor    eax,eax
c002896b:	c1 fa 17             	sar    edx,0x17
c002896e:	80 ca ff             	or     dl,0xff
c0028971:	eb 0e                	jmp    c0028981 <__truncdfsf2+0xd6>
c0028973:	c1 fa 1f             	sar    edx,0x1f
c0028976:	c1 e2 08             	shl    edx,0x8
c0028979:	09 ca                	or     edx,ecx
c002897b:	eb 04                	jmp    c0028981 <__truncdfsf2+0xd6>
c002897d:	31 d2                	xor    edx,edx
c002897f:	31 c0                	xor    eax,eax
c0028981:	c1 e2 17             	shl    edx,0x17
c0028984:	c1 e8 08             	shr    eax,0x8
c0028987:	09 d0                	or     eax,edx
c0028989:	eb 3c                	jmp    c00289c7 <__truncdfsf2+0x11c>
c002898b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028991:	89 ca                	mov    edx,ecx
c0028993:	c1 fa 0b             	sar    edx,0xb
c0028996:	c1 e2 08             	shl    edx,0x8
c0028999:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002899c:	31 db                	xor    ebx,ebx
c002899e:	85 ff                	test   edi,edi
c00289a0:	0f 95 c3             	setne  bl
c00289a3:	09 d8                	or     eax,ebx
c00289a5:	89 c3                	mov    ebx,eax
c00289a7:	c1 eb 08             	shr    ebx,0x8
c00289aa:	a8 7f                	test   al,0x7f
c00289ac:	0f 95 c2             	setne  dl
c00289af:	89 d6                	mov    esi,edx
c00289b1:	09 de                	or     esi,ebx
c00289b3:	83 e6 01             	and    esi,0x1
c00289b6:	c1 e8 07             	shr    eax,0x7
c00289b9:	21 f0                	and    eax,esi
c00289bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00289be:	09 ca                	or     edx,ecx
c00289c0:	c1 e2 17             	shl    edx,0x17
c00289c3:	09 da                	or     edx,ebx
c00289c5:	01 d0                	add    eax,edx
c00289c7:	83 c4 0c             	add    esp,0xc
c00289ca:	5b                   	pop    ebx
c00289cb:	5e                   	pop    esi
c00289cc:	5f                   	pop    edi
c00289cd:	5d                   	pop    ebp
c00289ce:	c3                   	ret    

c00289cf <__extendsfdf2>:
c00289cf:	55                   	push   ebp
c00289d0:	89 e5                	mov    ebp,esp
c00289d2:	57                   	push   edi
c00289d3:	56                   	push   esi
c00289d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00289d7:	89 d1                	mov    ecx,edx
c00289d9:	c1 f9 17             	sar    ecx,0x17
c00289dc:	c1 e2 08             	shl    edx,0x8
c00289df:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00289e5:	89 c8                	mov    eax,ecx
c00289e7:	80 e4 f8             	and    ah,0xf8
c00289ea:	8d 71 01             	lea    esi,[ecx+0x1]
c00289ed:	81 e6 fe 00 00 00    	and    esi,0xfe
c00289f3:	75 27                	jne    c0028a1c <__extendsfdf2+0x4d>
c00289f5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00289fb:	75 18                	jne    c0028a15 <__extendsfdf2+0x46>
c00289fd:	85 d2                	test   edx,edx
c00289ff:	74 20                	je     c0028a21 <__extendsfdf2+0x52>
c0028a01:	41                   	inc    ecx
c0028a02:	01 d2                	add    edx,edx
c0028a04:	79 fb                	jns    c0028a01 <__extendsfdf2+0x32>
c0028a06:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a0c:	29 c8                	sub    eax,ecx
c0028a0e:	05 81 03 00 00       	add    eax,0x381
c0028a13:	eb 0c                	jmp    c0028a21 <__extendsfdf2+0x52>
c0028a15:	05 00 07 00 00       	add    eax,0x700
c0028a1a:	eb 05                	jmp    c0028a21 <__extendsfdf2+0x52>
c0028a1c:	05 80 03 00 00       	add    eax,0x380
c0028a21:	c1 e0 14             	shl    eax,0x14
c0028a24:	89 c1                	mov    ecx,eax
c0028a26:	89 d0                	mov    eax,edx
c0028a28:	c1 e8 0b             	shr    eax,0xb
c0028a2b:	09 c1                	or     ecx,eax
c0028a2d:	c1 e2 15             	shl    edx,0x15
c0028a30:	89 d0                	mov    eax,edx
c0028a32:	89 ca                	mov    edx,ecx
c0028a34:	5e                   	pop    esi
c0028a35:	5f                   	pop    edi
c0028a36:	5d                   	pop    ebp
c0028a37:	c3                   	ret    
c0028a38:	66 90                	xchg   ax,ax
c0028a3a:	66 90                	xchg   ax,ax
c0028a3c:	66 90                	xchg   ax,ax
c0028a3e:	66 90                	xchg   ax,ax

c0028a40 <fabs>:
c0028a40:	83 ec 0c             	sub    esp,0xc
c0028a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0028a4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028a53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028a57:	dd 04 24             	fld    QWORD PTR [esp]
c0028a5a:	83 c4 0c             	add    esp,0xc
c0028a5d:	c3                   	ret    
c0028a5e:	66 90                	xchg   ax,ax

c0028a60 <lrint>:
c0028a60:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028a64:	83 ec 04             	sub    esp,0x4
c0028a67:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a6a:	58                   	pop    eax
c0028a6b:	c3                   	ret    

c0028a6c <lrintf>:
c0028a6c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028a70:	83 ec 04             	sub    esp,0x4
c0028a73:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a76:	58                   	pop    eax
c0028a77:	c3                   	ret    

Disassembly of section .init:

c0028a78 <_init>:
c0028a78:	55                   	push   ebp
c0028a79:	89 e5                	mov    ebp,esp
c0028a7b:	e8 98 76 fd ff       	call   c0000118 <frame_dummy>
c0028a80:	e8 5b e0 ff ff       	call   c0026ae0 <__do_global_ctors_aux>
c0028a85:	5d                   	pop    ebp
c0028a86:	c3                   	ret    

Disassembly of section .fini:

c0028a87 <_fini>:
c0028a87:	55                   	push   ebp
c0028a88:	89 e5                	mov    ebp,esp
c0028a8a:	e8 19 76 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028a8f:	5d                   	pop    ebp
c0028a90:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028a92 <Computer::~Computer()>:
c0028a92:	83 ec 0c             	sub    esp,0xc
c0028a95:	ba 2c a7 02 c0       	mov    edx,0xc002a72c
c0028a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9e:	89 10                	mov    DWORD PTR [eax],edx
c0028aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa4:	83 ec 0c             	sub    esp,0xc
c0028aa7:	50                   	push   eax
c0028aa8:	e8 59 b2 fe ff       	call   c0013d06 <Device::~Device()>
c0028aad:	83 c4 10             	add    esp,0x10
c0028ab0:	90                   	nop
c0028ab1:	83 c4 0c             	add    esp,0xc
c0028ab4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ab6 <Computer::~Computer()>:
c0028ab6:	83 ec 0c             	sub    esp,0xc
c0028ab9:	83 ec 0c             	sub    esp,0xc
c0028abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac0:	e8 cd ff ff ff       	call   c0028a92 <Computer::~Computer()>
c0028ac5:	83 c4 10             	add    esp,0x10
c0028ac8:	83 ec 08             	sub    esp,0x8
c0028acb:	68 ec 01 00 00       	push   0x1ec
c0028ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad4:	e8 4e 9e fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0028ad9:	83 c4 10             	add    esp,0x10
c0028adc:	83 c4 0c             	add    esp,0xc
c0028adf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028ae0 <idleCommon()>:
c0028ae0:	83 ec 0c             	sub    esp,0xc
c0028ae3:	fa                   	cli    
c0028ae4:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0028aea:	e8 40 54 ff ff       	call   c001df2f <schedule()>
c0028aef:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0028af4:	48                   	dec    eax
c0028af5:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0028afa:	75 01                	jne    c0028afd <idleCommon()+0x1d>
c0028afc:	fb                   	sti    
c0028afd:	83 c4 0c             	add    esp,0xc
c0028b00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028b02 <LinkedList<UnixFile>::~LinkedList()>:
c0028b02:	90                   	nop
c0028b03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028b04 <LinkedList<UnixFile>::LinkedList()>:
c0028b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b44:	90                   	nop
c0028b45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028b46 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028b46:	83 ec 0c             	sub    esp,0xc
c0028b49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b4e:	75 10                	jne    c0028b60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	68 88 aa 02 c0       	push   0xc002aa88
c0028b58:	e8 40 18 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028b5d:	83 c4 10             	add    esp,0x10
c0028b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b66:	85 c0                	test   eax,eax
c0028b68:	74 34                	je     c0028b9e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b71:	85 c0                	test   eax,eax
c0028b73:	74 29                	je     c0028b9e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b9c:	eb 65                	jmp    c0028c03 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ba4:	85 c0                	test   eax,eax
c0028ba6:	75 4b                	jne    c0028bf3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028baf:	85 c0                	test   eax,eax
c0028bb1:	75 40                	jne    c0028bf3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bbb:	89 10                	mov    DWORD PTR [eax],edx
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bcf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bdd:	85 c0                	test   eax,eax
c0028bdf:	74 22                	je     c0028c03 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028be1:	83 ec 0c             	sub    esp,0xc
c0028be4:	68 aa aa 02 c0       	push   0xc002aaaa
c0028be9:	e8 af 17 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028bee:	83 c4 10             	add    esp,0x10
c0028bf1:	eb 10                	jmp    c0028c03 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028bf3:	83 ec 0c             	sub    esp,0xc
c0028bf6:	68 b4 aa 02 c0       	push   0xc002aab4
c0028bfb:	e8 9d 17 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028c00:	83 c4 10             	add    esp,0x10
c0028c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c0a:	8d 50 01             	lea    edx,[eax+0x1]
c0028c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c11:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c14:	90                   	nop
c0028c15:	83 c4 0c             	add    esp,0xc
c0028c18:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028c1a <LinkedList<UnixFile>::getFirstElement()>:
c0028c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c20:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028c22 <LinkedList<UnixFile>::removeFirst()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c2b:	85 c0                	test   eax,eax
c0028c2d:	75 12                	jne    c0028c41 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028c2f:	83 ec 0c             	sub    esp,0xc
c0028c32:	68 c0 aa 02 c0       	push   0xc002aac0
c0028c37:	e8 61 17 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028c3c:	83 c4 10             	add    esp,0x10
c0028c3f:	eb 7e                	jmp    c0028cbf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c4b:	85 c0                	test   eax,eax
c0028c4d:	74 10                	je     c0028c5f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028c4f:	83 ec 0c             	sub    esp,0xc
c0028c52:	68 0b ab 02 c0       	push   0xc002ab0b
c0028c57:	e8 41 17 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028c5c:	83 c4 10             	add    esp,0x10
c0028c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c68:	85 c0                	test   eax,eax
c0028c6a:	75 33                	jne    c0028c9f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c88:	83 f8 01             	cmp    eax,0x1
c0028c8b:	74 21                	je     c0028cae <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c8d:	83 ec 0c             	sub    esp,0xc
c0028c90:	68 e4 aa 02 c0       	push   0xc002aae4
c0028c95:	e8 03 17 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028c9a:	83 c4 10             	add    esp,0x10
c0028c9d:	eb 0f                	jmp    c0028cae <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ca5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	89 10                	mov    DWORD PTR [eax],edx
c0028cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cb5:	8d 50 ff             	lea    edx,[eax-0x1]
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cbf:	83 c4 0c             	add    esp,0xc
c0028cc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028cc4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ccb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028ccc <DriverlessDevice::~DriverlessDevice()>:
c0028ccc:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0028cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd5:	89 10                	mov    DWORD PTR [eax],edx
c0028cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cdb:	50                   	push   eax
c0028cdc:	e8 25 b0 fe ff       	call   c0013d06 <Device::~Device()>
c0028ce1:	83 c4 04             	add    esp,0x4
c0028ce4:	90                   	nop
c0028ce5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028ce6 <DriverlessDevice::~DriverlessDevice()>:
c0028ce6:	83 ec 0c             	sub    esp,0xc
c0028ce9:	83 ec 0c             	sub    esp,0xc
c0028cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf0:	e8 d7 ff ff ff       	call   c0028ccc <DriverlessDevice::~DriverlessDevice()>
c0028cf5:	83 c4 10             	add    esp,0x10
c0028cf8:	83 ec 08             	sub    esp,0x8
c0028cfb:	68 58 01 00 00       	push   0x158
c0028d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d04:	e8 1e 9c fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	83 c4 0c             	add    esp,0xc
c0028d0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028d10 <LinkedList<Device>::addElement(Device*)>:
c0028d10:	83 ec 0c             	sub    esp,0xc
c0028d13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d18:	75 10                	jne    c0028d2a <LinkedList<Device>::addElement(Device*)+0x1a>
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	68 88 aa 02 c0       	push   0xc002aa88
c0028d22:	e8 76 16 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028d27:	83 c4 10             	add    esp,0x10
c0028d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d30:	85 c0                	test   eax,eax
c0028d32:	74 3a                	je     c0028d6e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d3b:	85 c0                	test   eax,eax
c0028d3d:	74 2f                	je     c0028d6e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d4a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d62:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d6c:	eb 68                	jmp    c0028dd6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d74:	85 c0                	test   eax,eax
c0028d76:	75 4e                	jne    c0028dc6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d7f:	85 c0                	test   eax,eax
c0028d81:	75 43                	jne    c0028dc6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d8b:	89 10                	mov    DWORD PTR [eax],edx
c0028d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d9f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028db0:	85 c0                	test   eax,eax
c0028db2:	74 22                	je     c0028dd6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028db4:	83 ec 0c             	sub    esp,0xc
c0028db7:	68 aa aa 02 c0       	push   0xc002aaaa
c0028dbc:	e8 dc 15 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	eb 10                	jmp    c0028dd6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028dc6:	83 ec 0c             	sub    esp,0xc
c0028dc9:	68 b4 aa 02 c0       	push   0xc002aab4
c0028dce:	e8 ca 15 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ddd:	8d 50 01             	lea    edx,[eax+0x1]
c0028de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028de7:	90                   	nop
c0028de8:	83 c4 0c             	add    esp,0xc
c0028deb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028dec <LinkedList<Device>::LinkedList()>:
c0028dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e05:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e25:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e2c:	90                   	nop
c0028e2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028e2e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e34:	85 c0                	test   eax,eax
c0028e36:	75 0e                	jne    c0028e46 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e3f:	85 c0                	test   eax,eax
c0028e41:	75 03                	jne    c0028e46 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e43:	b0 01                	mov    al,0x1
c0028e45:	c3                   	ret    
c0028e46:	b0 00                	mov    al,0x0
c0028e48:	90                   	nop
c0028e49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028e4a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028e52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e5b:	85 c0                	test   eax,eax
c0028e5d:	75 15                	jne    c0028e74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028e5f:	83 ec 0c             	sub    esp,0xc
c0028e62:	68 c0 aa 02 c0       	push   0xc002aac0
c0028e67:	e8 31 15 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028e6c:	83 c4 10             	add    esp,0x10
c0028e6f:	e9 88 00 00 00       	jmp    c0028efc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e7e:	85 c0                	test   eax,eax
c0028e80:	0f 95 c0             	setne  al
c0028e83:	84 c0                	test   al,al
c0028e85:	74 10                	je     c0028e97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028e87:	83 ec 0c             	sub    esp,0xc
c0028e8a:	68 0b ab 02 c0       	push   0xc002ab0b
c0028e8f:	e8 09 15 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028e94:	83 c4 10             	add    esp,0x10
c0028e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ea0:	85 c0                	test   eax,eax
c0028ea2:	0f 94 c0             	sete   al
c0028ea5:	84 c0                	test   al,al
c0028ea7:	74 33                	je     c0028edc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ead:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ec5:	83 f8 01             	cmp    eax,0x1
c0028ec8:	74 21                	je     c0028eeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	68 e4 aa 02 c0       	push   0xc002aae4
c0028ed2:	e8 c6 14 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	eb 0f                	jmp    c0028eeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ee2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee9:	89 10                	mov    DWORD PTR [eax],edx
c0028eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ef2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028f00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f08:	75 10                	jne    c0028f1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028f0a:	83 ec 0c             	sub    esp,0xc
c0028f0d:	68 88 aa 02 c0       	push   0xc002aa88
c0028f12:	e8 86 14 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f20:	85 c0                	test   eax,eax
c0028f22:	74 34                	je     c0028f58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f2b:	85 c0                	test   eax,eax
c0028f2d:	74 29                	je     c0028f58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f56:	eb 65                	jmp    c0028fbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f5e:	85 c0                	test   eax,eax
c0028f60:	75 4b                	jne    c0028fad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f69:	85 c0                	test   eax,eax
c0028f6b:	75 40                	jne    c0028fad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f75:	89 10                	mov    DWORD PTR [eax],edx
c0028f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f97:	85 c0                	test   eax,eax
c0028f99:	74 22                	je     c0028fbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f9b:	83 ec 0c             	sub    esp,0xc
c0028f9e:	68 aa aa 02 c0       	push   0xc002aaaa
c0028fa3:	e8 f5 13 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028fa8:	83 c4 10             	add    esp,0x10
c0028fab:	eb 10                	jmp    c0028fbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028fad:	83 ec 0c             	sub    esp,0xc
c0028fb0:	68 b4 aa 02 c0       	push   0xc002aab4
c0028fb5:	e8 e3 13 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0028fba:	83 c4 10             	add    esp,0x10
c0028fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fc4:	8d 50 01             	lea    edx,[eax+0x1]
c0028fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fce:	90                   	nop
c0028fcf:	83 c4 0c             	add    esp,0xc
c0028fd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028fd4 <ACPI::~ACPI()>:
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	ba 5c be 02 c0       	mov    edx,0xc002be5c
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	89 10                	mov    DWORD PTR [eax],edx
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	83 ec 0c             	sub    esp,0xc
c0028fe9:	50                   	push   eax
c0028fea:	e8 17 ad fe ff       	call   c0013d06 <Device::~Device()>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	90                   	nop
c0028ff3:	83 c4 0c             	add    esp,0xc
c0028ff6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ff8 <ACPI::~ACPI()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	83 ec 0c             	sub    esp,0xc
c0028ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029002:	e8 cd ff ff ff       	call   c0028fd4 <ACPI::~ACPI()>
c0029007:	83 c4 10             	add    esp,0x10
c002900a:	83 ec 08             	sub    esp,0x8
c002900d:	68 64 12 00 00       	push   0x1264
c0029012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029016:	e8 0c 99 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002901b:	83 c4 10             	add    esp,0x10
c002901e:	83 c4 0c             	add    esp,0xc
c0029021:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029022 <LinkedList<Device>::~LinkedList()>:
c0029022:	90                   	nop
c0029023:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029024 <LinkedList<Device>::isEmpty()>:
c0029024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029028:	8b 00                	mov    eax,DWORD PTR [eax]
c002902a:	85 c0                	test   eax,eax
c002902c:	75 0e                	jne    c002903c <LinkedList<Device>::isEmpty()+0x18>
c002902e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029032:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029035:	85 c0                	test   eax,eax
c0029037:	75 03                	jne    c002903c <LinkedList<Device>::isEmpty()+0x18>
c0029039:	b0 01                	mov    al,0x1
c002903b:	c3                   	ret    
c002903c:	b0 00                	mov    al,0x0
c002903e:	90                   	nop
c002903f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029040 <LinkedList<Device>::getFirstElement()>:
c0029040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029044:	8b 00                	mov    eax,DWORD PTR [eax]
c0029046:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029048 <LinkedList<Device>::removeFirst()>:
c0029048:	83 ec 0c             	sub    esp,0xc
c002904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029051:	85 c0                	test   eax,eax
c0029053:	75 15                	jne    c002906a <LinkedList<Device>::removeFirst()+0x22>
c0029055:	83 ec 0c             	sub    esp,0xc
c0029058:	68 c0 aa 02 c0       	push   0xc002aac0
c002905d:	e8 3b 13 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0029062:	83 c4 10             	add    esp,0x10
c0029065:	e9 87 00 00 00       	jmp    c00290f1 <LinkedList<Device>::removeFirst()+0xa9>
c002906a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029071:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029077:	85 c0                	test   eax,eax
c0029079:	74 10                	je     c002908b <LinkedList<Device>::removeFirst()+0x43>
c002907b:	83 ec 0c             	sub    esp,0xc
c002907e:	68 0b ab 02 c0       	push   0xc002ab0b
c0029083:	e8 15 13 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c0029088:	83 c4 10             	add    esp,0x10
c002908b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029091:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029097:	85 c0                	test   eax,eax
c0029099:	75 33                	jne    c00290ce <LinkedList<Device>::removeFirst()+0x86>
c002909b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b7:	83 f8 01             	cmp    eax,0x1
c00290ba:	74 24                	je     c00290e0 <LinkedList<Device>::removeFirst()+0x98>
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	68 e4 aa 02 c0       	push   0xc002aae4
c00290c4:	e8 d4 12 ff ff       	call   c001a39d <Krnl::panic(char const*)>
c00290c9:	83 c4 10             	add    esp,0x10
c00290cc:	eb 12                	jmp    c00290e0 <LinkedList<Device>::removeFirst()+0x98>
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00290d4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00290da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290de:	89 10                	mov    DWORD PTR [eax],edx
c00290e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290e7:	8d 50 ff             	lea    edx,[eax-0x1]
c00290ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290f1:	83 c4 0c             	add    esp,0xc
c00290f4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00290f6 <CPU::~CPU()>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	89 10                	mov    DWORD PTR [eax],edx
c0029104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029108:	83 ec 0c             	sub    esp,0xc
c002910b:	50                   	push   eax
c002910c:	e8 f5 ab fe ff       	call   c0013d06 <Device::~Device()>
c0029111:	83 c4 10             	add    esp,0x10
c0029114:	90                   	nop
c0029115:	83 c4 0c             	add    esp,0xc
c0029118:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002911a <CPU::~CPU()>:
c002911a:	83 ec 0c             	sub    esp,0xc
c002911d:	83 ec 0c             	sub    esp,0xc
c0029120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029124:	e8 cd ff ff ff       	call   c00290f6 <CPU::~CPU()>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	83 ec 08             	sub    esp,0x8
c002912f:	68 98 11 00 00       	push   0x1198
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 ea 97 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 c4 0c             	add    esp,0xc
c0029143:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029144 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029144:	90                   	nop
c0029145:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029146 <ThreadControlBlock::ThreadControlBlock()>:
c0029146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002914a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029155:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002915c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029160:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002916b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029176:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002917d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029181:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029189:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002918d:	90                   	nop
c002918e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029190 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029194:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002919a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002919e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291d0:	90                   	nop
c00291d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00291d2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00291d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00291d9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00291da <Vm::_FPUState::_FPUState()>:
c00291da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291de:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00291e5:	90                   	nop
c00291e6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00291e8 <PCI::~PCI()>:
c00291e8:	83 ec 0c             	sub    esp,0xc
c00291eb:	ba 44 cd 02 c0       	mov    edx,0xc002cd44
c00291f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f4:	89 10                	mov    DWORD PTR [eax],edx
c00291f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fa:	83 ec 0c             	sub    esp,0xc
c00291fd:	50                   	push   eax
c00291fe:	e8 d3 a4 fe ff       	call   c00136d6 <Bus::~Bus()>
c0029203:	83 c4 10             	add    esp,0x10
c0029206:	90                   	nop
c0029207:	83 c4 0c             	add    esp,0xc
c002920a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002920c <PCI::~PCI()>:
c002920c:	83 ec 0c             	sub    esp,0xc
c002920f:	83 ec 0c             	sub    esp,0xc
c0029212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029216:	e8 cd ff ff ff       	call   c00291e8 <PCI::~PCI()>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	83 ec 08             	sub    esp,0x8
c0029221:	68 5c 01 00 00       	push   0x15c
c0029226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002922a:	e8 f8 96 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002922f:	83 c4 10             	add    esp,0x10
c0029232:	83 c4 0c             	add    esp,0xc
c0029235:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029236 <IDE::~IDE()>:
c0029236:	83 ec 0c             	sub    esp,0xc
c0029239:	ba f8 cd 02 c0       	mov    edx,0xc002cdf8
c002923e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029242:	89 10                	mov    DWORD PTR [eax],edx
c0029244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029248:	83 ec 0c             	sub    esp,0xc
c002924b:	50                   	push   eax
c002924c:	e8 cb af fe ff       	call   c001421c <HardDiskController::~HardDiskController()>
c0029251:	83 c4 10             	add    esp,0x10
c0029254:	90                   	nop
c0029255:	83 c4 0c             	add    esp,0xc
c0029258:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002925a <IDE::~IDE()>:
c002925a:	83 ec 0c             	sub    esp,0xc
c002925d:	83 ec 0c             	sub    esp,0xc
c0029260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029264:	e8 cd ff ff ff       	call   c0029236 <IDE::~IDE()>
c0029269:	83 c4 10             	add    esp,0x10
c002926c:	83 ec 08             	sub    esp,0x8
c002926f:	68 70 02 00 00       	push   0x270
c0029274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029278:	e8 aa 96 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002927d:	83 c4 10             	add    esp,0x10
c0029280:	83 c4 0c             	add    esp,0xc
c0029283:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029284 <SATABus::~SATABus()>:
c0029284:	83 ec 0c             	sub    esp,0xc
c0029287:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c002928c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029290:	89 10                	mov    DWORD PTR [eax],edx
c0029292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029296:	83 ec 0c             	sub    esp,0xc
c0029299:	50                   	push   eax
c002929a:	e8 7d af fe ff       	call   c001421c <HardDiskController::~HardDiskController()>
c002929f:	83 c4 10             	add    esp,0x10
c00292a2:	90                   	nop
c00292a3:	83 c4 0c             	add    esp,0xc
c00292a6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00292a8 <SATABus::~SATABus()>:
c00292a8:	83 ec 0c             	sub    esp,0xc
c00292ab:	83 ec 0c             	sub    esp,0xc
c00292ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b2:	e8 cd ff ff ff       	call   c0029284 <SATABus::~SATABus()>
c00292b7:	83 c4 10             	add    esp,0x10
c00292ba:	83 ec 08             	sub    esp,0x8
c00292bd:	68 64 01 00 00       	push   0x164
c00292c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c6:	e8 5c 96 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00292cb:	83 c4 10             	add    esp,0x10
c00292ce:	83 c4 0c             	add    esp,0xc
c00292d1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00292d2 <ATA::~ATA()>:
c00292d2:	83 ec 0c             	sub    esp,0xc
c00292d5:	ba e8 ce 02 c0       	mov    edx,0xc002cee8
c00292da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292de:	89 10                	mov    DWORD PTR [eax],edx
c00292e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e4:	83 ec 0c             	sub    esp,0xc
c00292e7:	50                   	push   eax
c00292e8:	e8 11 b0 fe ff       	call   c00142fe <PhysicalDisk::~PhysicalDisk()>
c00292ed:	83 c4 10             	add    esp,0x10
c00292f0:	90                   	nop
c00292f1:	83 c4 0c             	add    esp,0xc
c00292f4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00292f6 <ATA::~ATA()>:
c00292f6:	83 ec 0c             	sub    esp,0xc
c00292f9:	83 ec 0c             	sub    esp,0xc
c00292fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029300:	e8 cd ff ff ff       	call   c00292d2 <ATA::~ATA()>
c0029305:	83 c4 10             	add    esp,0x10
c0029308:	83 ec 08             	sub    esp,0x8
c002930b:	68 7c 01 00 00       	push   0x17c
c0029310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029314:	e8 0e 96 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029319:	83 c4 10             	add    esp,0x10
c002931c:	83 c4 0c             	add    esp,0xc
c002931f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029320 <ATAPI::~ATAPI()>:
c0029320:	83 ec 0c             	sub    esp,0xc
c0029323:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0029328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932c:	89 10                	mov    DWORD PTR [eax],edx
c002932e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029332:	83 ec 0c             	sub    esp,0xc
c0029335:	50                   	push   eax
c0029336:	e8 c3 af fe ff       	call   c00142fe <PhysicalDisk::~PhysicalDisk()>
c002933b:	83 c4 10             	add    esp,0x10
c002933e:	90                   	nop
c002933f:	83 c4 0c             	add    esp,0xc
c0029342:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029344 <ATAPI::~ATAPI()>:
c0029344:	83 ec 0c             	sub    esp,0xc
c0029347:	83 ec 0c             	sub    esp,0xc
c002934a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002934e:	e8 cd ff ff ff       	call   c0029320 <ATAPI::~ATAPI()>
c0029353:	83 c4 10             	add    esp,0x10
c0029356:	83 ec 08             	sub    esp,0x8
c0029359:	68 80 01 00 00       	push   0x180
c002935e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029362:	e8 c0 95 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029367:	83 c4 10             	add    esp,0x10
c002936a:	83 c4 0c             	add    esp,0xc
c002936d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002936e <SATA::~SATA()>:
c002936e:	83 ec 0c             	sub    esp,0xc
c0029371:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c0029376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937a:	89 10                	mov    DWORD PTR [eax],edx
c002937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029380:	83 ec 0c             	sub    esp,0xc
c0029383:	50                   	push   eax
c0029384:	e8 75 af fe ff       	call   c00142fe <PhysicalDisk::~PhysicalDisk()>
c0029389:	83 c4 10             	add    esp,0x10
c002938c:	90                   	nop
c002938d:	83 c4 0c             	add    esp,0xc
c0029390:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029392 <SATA::~SATA()>:
c0029392:	83 ec 0c             	sub    esp,0xc
c0029395:	83 ec 0c             	sub    esp,0xc
c0029398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002939c:	e8 cd ff ff ff       	call   c002936e <SATA::~SATA()>
c00293a1:	83 c4 10             	add    esp,0x10
c00293a4:	83 ec 08             	sub    esp,0x8
c00293a7:	68 7c 01 00 00       	push   0x17c
c00293ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293b0:	e8 72 95 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00293b5:	83 c4 10             	add    esp,0x10
c00293b8:	83 c4 0c             	add    esp,0xc
c00293bb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00293bc <SATAPI::~SATAPI()>:
c00293bc:	83 ec 0c             	sub    esp,0xc
c00293bf:	ba b0 d0 02 c0       	mov    edx,0xc002d0b0
c00293c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c8:	89 10                	mov    DWORD PTR [eax],edx
c00293ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ce:	83 ec 0c             	sub    esp,0xc
c00293d1:	50                   	push   eax
c00293d2:	e8 27 af fe ff       	call   c00142fe <PhysicalDisk::~PhysicalDisk()>
c00293d7:	83 c4 10             	add    esp,0x10
c00293da:	90                   	nop
c00293db:	83 c4 0c             	add    esp,0xc
c00293de:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00293e0 <SATAPI::~SATAPI()>:
c00293e0:	83 ec 0c             	sub    esp,0xc
c00293e3:	83 ec 0c             	sub    esp,0xc
c00293e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ea:	e8 cd ff ff ff       	call   c00293bc <SATAPI::~SATAPI()>
c00293ef:	83 c4 10             	add    esp,0x10
c00293f2:	83 ec 08             	sub    esp,0x8
c00293f5:	68 80 01 00 00       	push   0x180
c00293fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fe:	e8 24 95 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	83 c4 0c             	add    esp,0xc
c0029409:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002940a <AVX::~AVX()>:
c002940a:	83 ec 0c             	sub    esp,0xc
c002940d:	ba f0 d0 02 c0       	mov    edx,0xc002d0f0
c0029412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029416:	89 10                	mov    DWORD PTR [eax],edx
c0029418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941c:	83 ec 0c             	sub    esp,0xc
c002941f:	50                   	push   eax
c0029420:	e8 5d af fe ff       	call   c0014382 <FPU::~FPU()>
c0029425:	83 c4 10             	add    esp,0x10
c0029428:	90                   	nop
c0029429:	83 c4 0c             	add    esp,0xc
c002942c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002942e <AVX::~AVX()>:
c002942e:	83 ec 0c             	sub    esp,0xc
c0029431:	83 ec 0c             	sub    esp,0xc
c0029434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029438:	e8 cd ff ff ff       	call   c002940a <AVX::~AVX()>
c002943d:	83 c4 10             	add    esp,0x10
c0029440:	83 ec 08             	sub    esp,0x8
c0029443:	68 58 01 00 00       	push   0x158
c0029448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002944c:	e8 d6 94 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029451:	83 c4 10             	add    esp,0x10
c0029454:	83 c4 0c             	add    esp,0xc
c0029457:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029458 <MMX::~MMX()>:
c0029458:	83 ec 0c             	sub    esp,0xc
c002945b:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0029460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029464:	89 10                	mov    DWORD PTR [eax],edx
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	83 ec 0c             	sub    esp,0xc
c002946d:	50                   	push   eax
c002946e:	e8 0f af fe ff       	call   c0014382 <FPU::~FPU()>
c0029473:	83 c4 10             	add    esp,0x10
c0029476:	90                   	nop
c0029477:	83 c4 0c             	add    esp,0xc
c002947a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002947c <MMX::~MMX()>:
c002947c:	83 ec 0c             	sub    esp,0xc
c002947f:	83 ec 0c             	sub    esp,0xc
c0029482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029486:	e8 cd ff ff ff       	call   c0029458 <MMX::~MMX()>
c002948b:	83 c4 10             	add    esp,0x10
c002948e:	83 ec 08             	sub    esp,0x8
c0029491:	68 58 01 00 00       	push   0x158
c0029496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002949a:	e8 88 94 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002949f:	83 c4 10             	add    esp,0x10
c00294a2:	83 c4 0c             	add    esp,0xc
c00294a5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00294a6 <SSE::~SSE()>:
c00294a6:	83 ec 0c             	sub    esp,0xc
c00294a9:	ba 70 d1 02 c0       	mov    edx,0xc002d170
c00294ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b2:	89 10                	mov    DWORD PTR [eax],edx
c00294b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b8:	83 ec 0c             	sub    esp,0xc
c00294bb:	50                   	push   eax
c00294bc:	e8 c1 ae fe ff       	call   c0014382 <FPU::~FPU()>
c00294c1:	83 c4 10             	add    esp,0x10
c00294c4:	90                   	nop
c00294c5:	83 c4 0c             	add    esp,0xc
c00294c8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00294ca <SSE::~SSE()>:
c00294ca:	83 ec 0c             	sub    esp,0xc
c00294cd:	83 ec 0c             	sub    esp,0xc
c00294d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294d4:	e8 cd ff ff ff       	call   c00294a6 <SSE::~SSE()>
c00294d9:	83 c4 10             	add    esp,0x10
c00294dc:	83 ec 08             	sub    esp,0x8
c00294df:	68 58 01 00 00       	push   0x158
c00294e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294e8:	e8 3a 94 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00294ed:	83 c4 10             	add    esp,0x10
c00294f0:	83 c4 0c             	add    esp,0xc
c00294f3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00294f4 <x87::~x87()>:
c00294f4:	83 ec 0c             	sub    esp,0xc
c00294f7:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c00294fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029500:	89 10                	mov    DWORD PTR [eax],edx
c0029502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029506:	83 ec 0c             	sub    esp,0xc
c0029509:	50                   	push   eax
c002950a:	e8 73 ae fe ff       	call   c0014382 <FPU::~FPU()>
c002950f:	83 c4 10             	add    esp,0x10
c0029512:	90                   	nop
c0029513:	83 c4 0c             	add    esp,0xc
c0029516:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029518 <x87::~x87()>:
c0029518:	83 ec 0c             	sub    esp,0xc
c002951b:	83 ec 0c             	sub    esp,0xc
c002951e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029522:	e8 cd ff ff ff       	call   c00294f4 <x87::~x87()>
c0029527:	83 c4 10             	add    esp,0x10
c002952a:	83 ec 08             	sub    esp,0x8
c002952d:	68 58 01 00 00       	push   0x158
c0029532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029536:	e8 ec 93 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c002953b:	83 c4 10             	add    esp,0x10
c002953e:	83 c4 0c             	add    esp,0xc
c0029541:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029542 <IOAPIC::~IOAPIC()>:
c0029542:	83 ec 0c             	sub    esp,0xc
c0029545:	ba 08 d3 02 c0       	mov    edx,0xc002d308
c002954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954e:	89 10                	mov    DWORD PTR [eax],edx
c0029550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029554:	83 ec 0c             	sub    esp,0xc
c0029557:	50                   	push   eax
c0029558:	e8 a9 a7 fe ff       	call   c0013d06 <Device::~Device()>
c002955d:	83 c4 10             	add    esp,0x10
c0029560:	90                   	nop
c0029561:	83 c4 0c             	add    esp,0xc
c0029564:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029566 <IOAPIC::~IOAPIC()>:
c0029566:	83 ec 0c             	sub    esp,0xc
c0029569:	83 ec 0c             	sub    esp,0xc
c002956c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029570:	e8 cd ff ff ff       	call   c0029542 <IOAPIC::~IOAPIC()>
c0029575:	83 c4 10             	add    esp,0x10
c0029578:	83 ec 08             	sub    esp,0x8
c002957b:	68 68 01 00 00       	push   0x168
c0029580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029584:	e8 9e 93 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029589:	83 c4 10             	add    esp,0x10
c002958c:	83 c4 0c             	add    esp,0xc
c002958f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029590 <APIC::~APIC()>:
c0029590:	83 ec 0c             	sub    esp,0xc
c0029593:	ba c0 d2 02 c0       	mov    edx,0xc002d2c0
c0029598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959c:	89 10                	mov    DWORD PTR [eax],edx
c002959e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a2:	83 ec 0c             	sub    esp,0xc
c00295a5:	50                   	push   eax
c00295a6:	e8 a1 b2 fe ff       	call   c001484c <InterruptController::~InterruptController()>
c00295ab:	83 c4 10             	add    esp,0x10
c00295ae:	90                   	nop
c00295af:	83 c4 0c             	add    esp,0xc
c00295b2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00295b4 <APIC::~APIC()>:
c00295b4:	83 ec 0c             	sub    esp,0xc
c00295b7:	83 ec 0c             	sub    esp,0xc
c00295ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295be:	e8 cd ff ff ff       	call   c0029590 <APIC::~APIC()>
c00295c3:	83 c4 10             	add    esp,0x10
c00295c6:	83 ec 08             	sub    esp,0x8
c00295c9:	68 58 21 00 00       	push   0x2158
c00295ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295d2:	e8 50 93 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00295d7:	83 c4 10             	add    esp,0x10
c00295da:	83 c4 0c             	add    esp,0xc
c00295dd:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00295de <PIC::~PIC()>:
c00295de:	83 ec 0c             	sub    esp,0xc
c00295e1:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c00295e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ea:	89 10                	mov    DWORD PTR [eax],edx
c00295ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f0:	83 ec 0c             	sub    esp,0xc
c00295f3:	50                   	push   eax
c00295f4:	e8 53 b2 fe ff       	call   c001484c <InterruptController::~InterruptController()>
c00295f9:	83 c4 10             	add    esp,0x10
c00295fc:	90                   	nop
c00295fd:	83 c4 0c             	add    esp,0xc
c0029600:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029602 <PIC::~PIC()>:
c0029602:	83 ec 0c             	sub    esp,0xc
c0029605:	83 ec 0c             	sub    esp,0xc
c0029608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002960c:	e8 cd ff ff ff       	call   c00295de <PIC::~PIC()>
c0029611:	83 c4 10             	add    esp,0x10
c0029614:	83 ec 08             	sub    esp,0x8
c0029617:	68 58 21 00 00       	push   0x2158
c002961c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029620:	e8 02 93 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029625:	83 c4 10             	add    esp,0x10
c0029628:	83 c4 0c             	add    esp,0xc
c002962b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002962c <APICTimer::~APICTimer()>:
c002962c:	83 ec 0c             	sub    esp,0xc
c002962f:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c0029634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029638:	89 10                	mov    DWORD PTR [eax],edx
c002963a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963e:	83 ec 0c             	sub    esp,0xc
c0029641:	50                   	push   eax
c0029642:	e8 63 d2 fe ff       	call   c00168aa <Timer::~Timer()>
c0029647:	83 c4 10             	add    esp,0x10
c002964a:	90                   	nop
c002964b:	83 c4 0c             	add    esp,0xc
c002964e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029650 <APICTimer::~APICTimer()>:
c0029650:	83 ec 0c             	sub    esp,0xc
c0029653:	83 ec 0c             	sub    esp,0xc
c0029656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002965a:	e8 cd ff ff ff       	call   c002962c <APICTimer::~APICTimer()>
c002965f:	83 c4 10             	add    esp,0x10
c0029662:	83 ec 08             	sub    esp,0x8
c0029665:	68 60 01 00 00       	push   0x160
c002966a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002966e:	e8 b4 92 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c0029673:	83 c4 10             	add    esp,0x10
c0029676:	83 c4 0c             	add    esp,0xc
c0029679:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002967a <PIT::~PIT()>:
c002967a:	83 ec 0c             	sub    esp,0xc
c002967d:	ba fc d3 02 c0       	mov    edx,0xc002d3fc
c0029682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029686:	89 10                	mov    DWORD PTR [eax],edx
c0029688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968c:	83 ec 0c             	sub    esp,0xc
c002968f:	50                   	push   eax
c0029690:	e8 15 d2 fe ff       	call   c00168aa <Timer::~Timer()>
c0029695:	83 c4 10             	add    esp,0x10
c0029698:	90                   	nop
c0029699:	83 c4 0c             	add    esp,0xc
c002969c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002969e <PIT::~PIT()>:
c002969e:	83 ec 0c             	sub    esp,0xc
c00296a1:	83 ec 0c             	sub    esp,0xc
c00296a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296a8:	e8 cd ff ff ff       	call   c002967a <PIT::~PIT()>
c00296ad:	83 c4 10             	add    esp,0x10
c00296b0:	83 ec 08             	sub    esp,0x8
c00296b3:	68 5c 01 00 00       	push   0x15c
c00296b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296bc:	e8 66 92 fe ff       	call   c0012927 <operator delete(void*, unsigned long)>
c00296c1:	83 c4 10             	add    esp,0x10
c00296c4:	83 c4 0c             	add    esp,0xc
c00296c7:	c3                   	ret    
