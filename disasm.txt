
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ad 78 00 00       	call   c00078cd <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 1c 02 c0       	mov    eax,0xc0021c28
c0000025:	3d 28 1c 02 c0       	cmp    eax,0xc0021c28
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 1c 02 c0       	push   0xc0021c28
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 1c 02 c0       	mov    eax,0xc0021c28
c0000051:	2d 28 1c 02 c0       	sub    eax,0xc0021c28
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 1c 02 c0       	push   0xc0021c28
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb a8 eb 01 c0       	mov    ebx,0xc001eba8
c0000097:	81 eb a4 eb 01 c0    	sub    ebx,0xc001eba4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a4 eb 01 c0       	mov    esi,0xc001eba4
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 1c 02 c0       	push   0xc0021c28
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 28 1c 02 c0       	push   0xc0021c28
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 e3 40 01 00       	call   c0014390 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 62 a1 00 00       	call   c000a427 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 c1 40 01 00       	call   c0014390 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d6 45 01 00       	call   c00148c4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 61 4c 01 00       	call   c0014f58 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 83 00 01 00       	jmp    c0010402 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	5b                   	pop    ebx
c00003af:	31 c0                	xor    eax,eax
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	31 c0                	xor    eax,eax
c00003c2:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	74 7f                	je     c000046b <memmove+0x9b>
c00003ec:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ef:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f2:	39 cd                	cmp    ebp,ecx
c00003f4:	0f 93 c1             	setae  cl
c00003f7:	39 f3                	cmp    ebx,esi
c00003f9:	0f 93 c0             	setae  al
c00003fc:	89 c6                	mov    esi,eax
c00003fe:	09 ce                	or     esi,ecx
c0000400:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000403:	83 f9 0c             	cmp    ecx,0xc
c0000406:	89 f0                	mov    eax,esi
c0000408:	0f 97 c1             	seta   cl
c000040b:	84 c8                	test   al,cl
c000040d:	0f 84 8d 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000413:	89 e9                	mov    ecx,ebp
c0000415:	09 d9                	or     ecx,ebx
c0000417:	83 e1 03             	and    ecx,0x3
c000041a:	0f 85 80 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000420:	89 d7                	mov    edi,edx
c0000422:	89 d9                	mov    ecx,ebx
c0000424:	83 e7 fc             	and    edi,0xfffffffc
c0000427:	89 ee                	mov    esi,ebp
c0000429:	01 df                	add    edi,ebx
c000042b:	90                   	nop
c000042c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c1 04             	add    ecx,0x4
c0000435:	89 06                	mov    DWORD PTR [esi],eax
c0000437:	83 c6 04             	add    esi,0x4
c000043a:	39 f9                	cmp    ecx,edi
c000043c:	75 f2                	jne    c0000430 <memmove+0x60>
c000043e:	89 d1                	mov    ecx,edx
c0000440:	89 d7                	mov    edi,edx
c0000442:	83 e1 fc             	and    ecx,0xfffffffc
c0000445:	29 cf                	sub    edi,ecx
c0000447:	01 cb                	add    ebx,ecx
c0000449:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044d:	39 ca                	cmp    edx,ecx
c000044f:	74 1a                	je     c000046b <memmove+0x9b>
c0000451:	8a 03                	mov    al,BYTE PTR [ebx]
c0000453:	83 ff 01             	cmp    edi,0x1
c0000456:	88 06                	mov    BYTE PTR [esi],al
c0000458:	74 11                	je     c000046b <memmove+0x9b>
c000045a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045d:	83 ff 02             	cmp    edi,0x2
c0000460:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000463:	74 06                	je     c000046b <memmove+0x9b>
c0000465:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000468:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046b:	5b                   	pop    ebx
c000046c:	89 e8                	mov    eax,ebp
c000046e:	5e                   	pop    esi
c000046f:	5f                   	pop    edi
c0000470:	5d                   	pop    ebp
c0000471:	c3                   	ret    
c0000472:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 e9                	jbe    c000046b <memmove+0x9b>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e5                	je     c000046b <memmove+0x9b>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb ae                	jmp    c000046b <memmove+0x9b>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	56                   	push   esi
c00004c2:	53                   	push   ebx
c00004c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004cb:	85 d2                	test   edx,edx
c00004cd:	74 1b                	je     c00004ea <memset+0x2a>
c00004cf:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00004d4:	89 f7                	mov    edi,esi
c00004d6:	83 fa 04             	cmp    edx,0x4
c00004d9:	73 15                	jae    c00004f0 <memset+0x30>
c00004db:	83 e2 03             	and    edx,0x3
c00004de:	74 0a                	je     c00004ea <memset+0x2a>
c00004e0:	31 c0                	xor    eax,eax
c00004e2:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c00004e5:	40                   	inc    eax
c00004e6:	39 d0                	cmp    eax,edx
c00004e8:	72 f8                	jb     c00004e2 <memset+0x22>
c00004ea:	5b                   	pop    ebx
c00004eb:	89 f0                	mov    eax,esi
c00004ed:	5e                   	pop    esi
c00004ee:	5f                   	pop    edi
c00004ef:	c3                   	ret    
c00004f0:	31 c0                	xor    eax,eax
c00004f2:	88 d8                	mov    al,bl
c00004f4:	88 c4                	mov    ah,al
c00004f6:	89 c1                	mov    ecx,eax
c00004f8:	c1 e1 10             	shl    ecx,0x10
c00004fb:	09 c8                	or     eax,ecx
c00004fd:	f7 c6 01 00 00 00    	test   esi,0x1
c0000503:	75 12                	jne    c0000517 <memset+0x57>
c0000505:	f7 c7 02 00 00 00    	test   edi,0x2
c000050b:	75 12                	jne    c000051f <memset+0x5f>
c000050d:	89 d1                	mov    ecx,edx
c000050f:	c1 e9 02             	shr    ecx,0x2
c0000512:	fc                   	cld    
c0000513:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000515:	eb c4                	jmp    c00004db <memset+0x1b>
c0000517:	88 06                	mov    BYTE PTR [esi],al
c0000519:	8d 7e 01             	lea    edi,[esi+0x1]
c000051c:	4a                   	dec    edx
c000051d:	eb e6                	jmp    c0000505 <memset+0x45>
c000051f:	66 89 07             	mov    WORD PTR [edi],ax
c0000522:	83 ea 02             	sub    edx,0x2
c0000525:	83 c7 02             	add    edi,0x2
c0000528:	eb e3                	jmp    c000050d <memset+0x4d>
c000052a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	5b                   	pop    ebx
c0000595:	89 f0                	mov    eax,esi
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	5b                   	pop    ebx
c00005d4:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	5b                   	pop    ebx
c00005eb:	31 c0                	xor    eax,eax
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	41                   	inc    ecx
c0000611:	88 13                	mov    BYTE PTR [ebx],dl
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000062f:	85 f6                	test   esi,esi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000635:	8d 46 ff             	lea    eax,[esi-0x1]
c0000638:	8d 7a 01             	lea    edi,[edx+0x1]
c000063b:	88 0a                	mov    BYTE PTR [edx],cl
c000063d:	84 c9                	test   cl,cl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8d 4b 02             	lea    ecx,[ebx+0x2]
c0000648:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c000064b:	8d 46 fe             	lea    eax,[esi-0x2]
c000064e:	8d 7a 02             	lea    edi,[edx+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	41                   	inc    ecx
c0000661:	47                   	inc    edi
c0000662:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	89 c3                	mov    ebx,eax
c0000686:	83 f8 04             	cmp    eax,0x4
c0000689:	73 25                	jae    c00006b0 <strncpy+0x90>
c000068b:	f6 c3 02             	test   bl,0x2
c000068e:	74 08                	je     c0000698 <strncpy+0x78>
c0000690:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000695:	83 c7 02             	add    edi,0x2
c0000698:	83 e3 01             	and    ebx,0x1
c000069b:	74 d4                	je     c0000671 <strncpy+0x51>
c000069d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00006a0:	89 d0                	mov    eax,edx
c00006a2:	5b                   	pop    ebx
c00006a3:	5e                   	pop    esi
c00006a4:	5f                   	pop    edi
c00006a5:	c3                   	ret    
c00006a6:	8d 76 00             	lea    esi,[esi+0x0]
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00006b6:	75 14                	jne    c00006cc <strncpy+0xac>
c00006b8:	f7 c7 02 00 00 00    	test   edi,0x2
c00006be:	75 13                	jne    c00006d3 <strncpy+0xb3>
c00006c0:	89 d9                	mov    ecx,ebx
c00006c2:	c1 e9 02             	shr    ecx,0x2
c00006c5:	fc                   	cld    
c00006c6:	31 c0                	xor    eax,eax
c00006c8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006ca:	eb bf                	jmp    c000068b <strncpy+0x6b>
c00006cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00006cf:	4b                   	dec    ebx
c00006d0:	47                   	inc    edi
c00006d1:	eb e5                	jmp    c00006b8 <strncpy+0x98>
c00006d3:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006d8:	83 eb 02             	sub    ebx,0x2
c00006db:	83 c7 02             	add    edi,0x2
c00006de:	eb e0                	jmp    c00006c0 <strncpy+0xa0>

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	5b                   	pop    ebx
c0000721:	31 c0                	xor    eax,eax
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	88 d0                	mov    al,dl
c00007b5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000085b:	57                   	push   edi
c000085c:	e8 cf fc ff ff       	call   c0000530 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	89 c6                	mov    esi,eax
c0000864:	85 c0                	test   eax,eax
c0000866:	75 18                	jne    c0000880 <strstr+0x30>
c0000868:	eb 36                	jmp    c00008a0 <strstr+0x50>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 08 fb ff ff       	call   c0000380 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 aa fc ff ff       	call   c0000530 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 c0 eb 01 c0 02 	test   BYTE PTR [edx-0x3ffe1440],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 eb 01 c0 01 	test   BYTE PTR [edx-0x3ffe1440],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	31 d2                	xor    edx,edx
c00008f3:	57                   	push   edi
c00008f4:	56                   	push   esi
c00008f5:	53                   	push   ebx
c00008f6:	83 ec 08             	sub    esp,0x8
c00008f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00008fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000901:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000905:	8a 00                	mov    al,BYTE PTR [eax]
c0000907:	88 c2                	mov    dl,al
c0000909:	f6 82 c0 eb 01 c0 08 	test   BYTE PTR [edx-0x3ffe1440],0x8
c0000910:	74 1e                	je     c0000930 <simple_strtoul+0x40>
c0000912:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	41                   	inc    ecx
c0000921:	31 d2                	xor    edx,edx
c0000923:	8a 01                	mov    al,BYTE PTR [ecx]
c0000925:	88 c2                	mov    dl,al
c0000927:	f6 82 c0 eb 01 c0 08 	test   BYTE PTR [edx-0x3ffe1440],0x8
c000092e:	75 f0                	jne    c0000920 <simple_strtoul+0x30>
c0000930:	3c 09                	cmp    al,0x9
c0000932:	74 ec                	je     c0000920 <simple_strtoul+0x30>
c0000934:	3c 2d                	cmp    al,0x2d
c0000936:	0f 84 44 01 00 00    	je     c0000a80 <simple_strtoul+0x190>
c000093c:	3c 2b                	cmp    al,0x2b
c000093e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000946:	0f 94 c0             	sete   al
c0000949:	25 ff 00 00 00       	and    eax,0xff
c000094e:	01 c1                	add    ecx,eax
c0000950:	85 f6                	test   esi,esi
c0000952:	0f 85 c8 00 00 00    	jne    c0000a20 <simple_strtoul+0x130>
c0000958:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c000095b:	be 0a 00 00 00       	mov    esi,0xa
c0000960:	80 fa 30             	cmp    dl,0x30
c0000963:	0f 84 72 01 00 00    	je     c0000adb <simple_strtoul+0x1eb>
c0000969:	84 d2                	test   dl,dl
c000096b:	0f 84 3f 01 00 00    	je     c0000ab0 <simple_strtoul+0x1c0>
c0000971:	31 ed                	xor    ebp,ebp
c0000973:	31 ff                	xor    edi,edi
c0000975:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000097c:	eb 2e                	jmp    c00009ac <simple_strtoul+0xbc>
c000097e:	66 90                	xchg   ax,ax
c0000980:	83 eb 30             	sub    ebx,0x30
c0000983:	39 f3                	cmp    ebx,esi
c0000985:	73 59                	jae    c00009e0 <simple_strtoul+0xf0>
c0000987:	89 d8                	mov    eax,ebx
c0000989:	31 d2                	xor    edx,edx
c000098b:	83 f0 ff             	xor    eax,0xffffffff
c000098e:	f7 f6                	div    esi
c0000990:	39 f8                	cmp    eax,edi
c0000992:	0f 82 d8 00 00 00    	jb     c0000a70 <simple_strtoul+0x180>
c0000998:	0f af fe             	imul   edi,esi
c000099b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a2:	01 df                	add    edi,ebx
c00009a4:	41                   	inc    ecx
c00009a5:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009a8:	84 d2                	test   dl,dl
c00009aa:	74 34                	je     c00009e0 <simple_strtoul+0xf0>
c00009ac:	31 db                	xor    ebx,ebx
c00009ae:	88 d3                	mov    bl,dl
c00009b0:	f6 83 c0 eb 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1440],0x4
c00009b7:	75 c7                	jne    c0000980 <simple_strtoul+0x90>
c00009b9:	52                   	push   edx
c00009ba:	e8 f1 fe ff ff       	call   c00008b0 <toupper>
c00009bf:	5a                   	pop    edx
c00009c0:	31 d2                	xor    edx,edx
c00009c2:	88 c2                	mov    dl,al
c00009c4:	f6 82 c0 eb 01 c0 01 	test   BYTE PTR [edx-0x3ffe1440],0x1
c00009cb:	74 13                	je     c00009e0 <simple_strtoul+0xf0>
c00009cd:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009d0:	39 f3                	cmp    ebx,esi
c00009d2:	72 b3                	jb     c0000987 <simple_strtoul+0x97>
c00009d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00009e0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00009e4:	85 f6                	test   esi,esi
c00009e6:	74 11                	je     c00009f9 <simple_strtoul+0x109>
c00009e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009eb:	09 f8                	or     eax,edi
c00009ed:	0f 84 9d 00 00 00    	je     c0000a90 <simple_strtoul+0x1a0>
c00009f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f7:	89 08                	mov    DWORD PTR [eax],ecx
c00009f9:	4d                   	dec    ebp
c00009fa:	75 03                	jne    c00009ff <simple_strtoul+0x10f>
c00009fc:	83 cf ff             	or     edi,0xffffffff
c00009ff:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a04:	75 02                	jne    c0000a08 <simple_strtoul+0x118>
c0000a06:	f7 df                	neg    edi
c0000a08:	83 c4 08             	add    esp,0x8
c0000a0b:	89 f8                	mov    eax,edi
c0000a0d:	5b                   	pop    ebx
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	5d                   	pop    ebp
c0000a11:	c3                   	ret    
c0000a12:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a20:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a23:	83 f8 22             	cmp    eax,0x22
c0000a26:	0f 87 84 00 00 00    	ja     c0000ab0 <simple_strtoul+0x1c0>
c0000a2c:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2f:	83 fe 08             	cmp    esi,0x8
c0000a32:	0f 84 ca 00 00 00    	je     c0000b02 <simple_strtoul+0x212>
c0000a38:	83 fe 10             	cmp    esi,0x10
c0000a3b:	0f 85 28 ff ff ff    	jne    c0000969 <simple_strtoul+0x79>
c0000a41:	be 10 00 00 00       	mov    esi,0x10
c0000a46:	80 fa 30             	cmp    dl,0x30
c0000a49:	0f 85 1a ff ff ff    	jne    c0000969 <simple_strtoul+0x79>
c0000a4f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a53:	88 04 24             	mov    BYTE PTR [esp],al
c0000a56:	50                   	push   eax
c0000a57:	e8 74 fe ff ff       	call   c00008d0 <tolower>
c0000a5c:	5b                   	pop    ebx
c0000a5d:	83 f8 78             	cmp    eax,0x78
c0000a60:	0f 84 c5 00 00 00    	je     c0000b2b <simple_strtoul+0x23b>
c0000a66:	41                   	inc    ecx
c0000a67:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a6b:	e9 f9 fe ff ff       	jmp    c0000969 <simple_strtoul+0x79>
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 28 ff ff ff       	jmp    c00009a4 <simple_strtoul+0xb4>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	41                   	inc    ecx
c0000a81:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a89:	e9 c2 fe ff ff       	jmp    c0000950 <simple_strtoul+0x60>
c0000a8e:	66 90                	xchg   ax,ax
c0000a90:	85 c9                	test   ecx,ecx
c0000a92:	74 39                	je     c0000acd <simple_strtoul+0x1dd>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a9c:	31 ff                	xor    edi,edi
c0000a9e:	89 30                	mov    DWORD PTR [eax],esi
c0000aa0:	e9 54 ff ff ff       	jmp    c00009f9 <simple_strtoul+0x109>
c0000aa5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000aa9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ab0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0000ab4:	85 db                	test   ebx,ebx
c0000ab6:	74 1c                	je     c0000ad4 <simple_strtoul+0x1e4>
c0000ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000abc:	85 c9                	test   ecx,ecx
c0000abe:	74 5e                	je     c0000b1e <simple_strtoul+0x22e>
c0000ac0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000ac4:	31 ff                	xor    edi,edi
c0000ac6:	89 30                	mov    DWORD PTR [eax],esi
c0000ac8:	e9 32 ff ff ff       	jmp    c00009ff <simple_strtoul+0x10f>
c0000acd:	31 ff                	xor    edi,edi
c0000acf:	e9 1f ff ff ff       	jmp    c00009f3 <simple_strtoul+0x103>
c0000ad4:	31 ff                	xor    edi,edi
c0000ad6:	e9 24 ff ff ff       	jmp    c00009ff <simple_strtoul+0x10f>
c0000adb:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000adf:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae2:	50                   	push   eax
c0000ae3:	e8 e8 fd ff ff       	call   c00008d0 <tolower>
c0000ae8:	5e                   	pop    esi
c0000ae9:	83 f8 78             	cmp    eax,0x78
c0000aec:	74 24                	je     c0000b12 <simple_strtoul+0x222>
c0000aee:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af2:	41                   	inc    ecx
c0000af3:	80 fa 30             	cmp    dl,0x30
c0000af6:	74 13                	je     c0000b0b <simple_strtoul+0x21b>
c0000af8:	be 08 00 00 00       	mov    esi,0x8
c0000afd:	e9 67 fe ff ff       	jmp    c0000969 <simple_strtoul+0x79>
c0000b02:	80 fa 30             	cmp    dl,0x30
c0000b05:	0f 85 5e fe ff ff    	jne    c0000969 <simple_strtoul+0x79>
c0000b0b:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b0f:	41                   	inc    ecx
c0000b10:	eb e6                	jmp    c0000af8 <simple_strtoul+0x208>
c0000b12:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 ff ff ff       	jmp    c0000a41 <simple_strtoul+0x151>
c0000b1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b24:	31 ff                	xor    edi,edi
c0000b26:	e9 d4 fe ff ff       	jmp    c00009ff <simple_strtoul+0x10f>
c0000b2b:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b2f:	83 c1 02             	add    ecx,0x2
c0000b32:	e9 32 fe ff ff       	jmp    c0000969 <simple_strtoul+0x79>

c0000b37 <largebin_index>:
c0000b37:	89 c2                	mov    edx,eax
c0000b39:	c1 ea 08             	shr    edx,0x8
c0000b3c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b42:	77 10                	ja     c0000b54 <largebin_index+0x1d>
c0000b44:	0f bd d2             	bsr    edx,edx
c0000b47:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b4a:	d3 e8                	shr    eax,cl
c0000b4c:	83 e0 03             	and    eax,0x3
c0000b4f:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b53:	c3                   	ret    
c0000b54:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b59:	c3                   	ret    

c0000b5a <malloc_init_state>:
c0000b5a:	8d 50 34             	lea    edx,[eax+0x34]
c0000b5d:	53                   	push   ebx
c0000b5e:	89 d1                	mov    ecx,edx
c0000b60:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b66:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b69:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b6c:	83 c2 08             	add    edx,0x8
c0000b6f:	39 da                	cmp    edx,ebx
c0000b71:	75 f3                	jne    c0000b66 <malloc_init_state+0xc>
c0000b73:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b75:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b7f:	83 e2 03             	and    edx,0x3
c0000b82:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b8c:	83 ca 48             	or     edx,0x48
c0000b8f:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b99:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ba3:	89 10                	mov    DWORD PTR [eax],edx
c0000ba5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bac:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000baf:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb9:	5b                   	pop    ebx
c0000bba:	c3                   	ret    

c0000bbb <malloc_consolidate>:
c0000bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bbd:	85 d2                	test   edx,edx
c0000bbf:	0f 84 d8 00 00 00    	je     c0000c9d <malloc_consolidate+0xe2>
c0000bc5:	55                   	push   ebp
c0000bc6:	83 e2 fd             	and    edx,0xfffffffd
c0000bc9:	57                   	push   edi
c0000bca:	8d 78 34             	lea    edi,[eax+0x34]
c0000bcd:	56                   	push   esi
c0000bce:	89 c5                	mov    ebp,eax
c0000bd0:	53                   	push   ebx
c0000bd1:	83 ec 10             	sub    esp,0x10
c0000bd4:	89 10                	mov    DWORD PTR [eax],edx
c0000bd6:	c1 ea 03             	shr    edx,0x3
c0000bd9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bdd:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000be1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000be5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000be8:	85 d2                	test   edx,edx
c0000bea:	0f 84 98 00 00 00    	je     c0000c88 <malloc_consolidate+0xcd>
c0000bf0:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bf7:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bfa:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c01:	89 f9                	mov    ecx,edi
c0000c03:	83 e1 fe             	and    ecx,0xfffffffe
c0000c06:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c09:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c0c:	83 e3 fc             	and    ebx,0xfffffffc
c0000c0f:	83 e7 01             	and    edi,0x1
c0000c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c15:	75 14                	jne    c0000c2b <malloc_consolidate+0x70>
c0000c17:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c19:	29 fa                	sub    edx,edi
c0000c1b:	01 f9                	add    ecx,edi
c0000c1d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c20:	89 fb                	mov    ebx,edi
c0000c22:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c25:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c28:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c2b:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c2e:	74 40                	je     c0000c70 <malloc_consolidate+0xb5>
c0000c30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c33:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c36:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c3a:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c3d:	83 e7 01             	and    edi,0x1
c0000c40:	75 0e                	jne    c0000c50 <malloc_consolidate+0x95>
c0000c42:	01 d9                	add    ecx,ebx
c0000c44:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c47:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c4d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c50:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c53:	89 ce                	mov    esi,ecx
c0000c55:	83 ce 01             	or     esi,0x1
c0000c58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c5b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c5e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c61:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c65:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c68:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c6b:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c6e:	eb 0c                	jmp    c0000c7c <malloc_consolidate+0xc1>
c0000c70:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c73:	83 c9 01             	or     ecx,0x1
c0000c76:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c79:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c80:	85 d2                	test   edx,edx
c0000c82:	0f 85 6f ff ff ff    	jne    c0000bf7 <malloc_consolidate+0x3c>
c0000c88:	83 c5 04             	add    ebp,0x4
c0000c8b:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c8f:	0f 85 50 ff ff ff    	jne    c0000be5 <malloc_consolidate+0x2a>
c0000c95:	83 c4 10             	add    esp,0x10
c0000c98:	5b                   	pop    ebx
c0000c99:	5e                   	pop    esi
c0000c9a:	5f                   	pop    edi
c0000c9b:	5d                   	pop    ebp
c0000c9c:	c3                   	ret    
c0000c9d:	e9 b8 fe ff ff       	jmp    c0000b5a <malloc_init_state>

c0000ca2 <dlfree>:
c0000ca2:	57                   	push   edi
c0000ca3:	56                   	push   esi
c0000ca4:	53                   	push   ebx
c0000ca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca9:	85 db                	test   ebx,ebx
c0000cab:	0f 84 e2 00 00 00    	je     c0000d93 <dlfree+0xf1>
c0000cb1:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cb4:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000cba:	89 f0                	mov    eax,esi
c0000cbc:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cbf:	83 e0 fc             	and    eax,0xfffffffc
c0000cc2:	39 c1                	cmp    ecx,eax
c0000cc4:	72 24                	jb     c0000cea <dlfree+0x48>
c0000cc6:	c1 e8 03             	shr    eax,0x3
c0000cc9:	83 c9 03             	or     ecx,0x3
c0000ccc:	83 e8 02             	sub    eax,0x2
c0000ccf:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cd5:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cdc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cde:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ce5:	e9 a9 00 00 00       	jmp    c0000d93 <dlfree+0xf1>
c0000cea:	83 e6 02             	and    esi,0x2
c0000ced:	0f 85 a0 00 00 00    	jne    c0000d93 <dlfree+0xf1>
c0000cf3:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf6:	83 c9 01             	or     ecx,0x1
c0000cf9:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cff:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d02:	83 e1 fc             	and    ecx,0xfffffffc
c0000d05:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d09:	75 13                	jne    c0000d1e <dlfree+0x7c>
c0000d0b:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d0e:	29 da                	sub    edx,ebx
c0000d10:	01 d8                	add    eax,ebx
c0000d12:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d15:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d18:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d1b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d1e:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d24:	74 40                	je     c0000d66 <dlfree+0xc4>
c0000d26:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d2a:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d2d:	80 e3 01             	and    bl,0x1
c0000d30:	75 0e                	jne    c0000d40 <dlfree+0x9e>
c0000d32:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d35:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d38:	01 c8                	add    eax,ecx
c0000d3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d40:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d46:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d4d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d50:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d56:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d59:	89 c1                	mov    ecx,eax
c0000d5b:	83 c9 01             	or     ecx,0x1
c0000d5e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d61:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d64:	eb 10                	jmp    c0000d76 <dlfree+0xd4>
c0000d66:	01 c8                	add    eax,ecx
c0000d68:	89 c1                	mov    ecx,eax
c0000d6a:	83 c9 01             	or     ecx,0x1
c0000d6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d70:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d76:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d7b:	76 16                	jbe    c0000d93 <dlfree+0xf1>
c0000d7d:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d84:	74 0d                	je     c0000d93 <dlfree+0xf1>
c0000d86:	5b                   	pop    ebx
c0000d87:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d8c:	5e                   	pop    esi
c0000d8d:	5f                   	pop    edi
c0000d8e:	e9 28 fe ff ff       	jmp    c0000bbb <malloc_consolidate>
c0000d93:	5b                   	pop    ebx
c0000d94:	5e                   	pop    esi
c0000d95:	5f                   	pop    edi
c0000d96:	c3                   	ret    

c0000d97 <sYSMALLOc>:
c0000d97:	55                   	push   ebp
c0000d98:	57                   	push   edi
c0000d99:	56                   	push   esi
c0000d9a:	53                   	push   ebx
c0000d9b:	89 d3                	mov    ebx,edx
c0000d9d:	83 ec 2c             	sub    esp,0x2c
c0000da0:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000da6:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000da9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dad:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000db0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000db4:	74 1f                	je     c0000dd5 <sYSMALLOc+0x3e>
c0000db6:	89 d0                	mov    eax,edx
c0000db8:	e8 fe fd ff ff       	call   c0000bbb <malloc_consolidate>
c0000dbd:	83 ec 0c             	sub    esp,0xc
c0000dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000dc4:	83 e8 07             	sub    eax,0x7
c0000dc7:	50                   	push   eax
c0000dc8:	e8 33 02 00 00       	call   c0001000 <dlmalloc>
c0000dcd:	83 c4 10             	add    esp,0x10
c0000dd0:	e9 23 02 00 00       	jmp    c0000ff8 <sYSMALLOc+0x261>
c0000dd5:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ddc:	83 c0 10             	add    eax,0x10
c0000ddf:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000de5:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000de8:	01 c2                	add    edx,eax
c0000dea:	83 e5 fc             	and    ebp,0xfffffffc
c0000ded:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000df1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df8:	74 02                	je     c0000dfc <sYSMALLOc+0x65>
c0000dfa:	29 ea                	sub    edx,ebp
c0000dfc:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000e00:	f7 d9                	neg    ecx
c0000e02:	21 ca                	and    edx,ecx
c0000e04:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000e08:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000e0c:	7f 07                	jg     c0000e15 <sYSMALLOc+0x7e>
c0000e0e:	31 c0                	xor    eax,eax
c0000e10:	e9 e3 01 00 00       	jmp    c0000ff8 <sYSMALLOc+0x261>
c0000e15:	83 ec 0c             	sub    esp,0xc
c0000e18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e1c:	e8 2b 69 00 00       	call   c000774c <sbrk>
c0000e21:	83 c4 10             	add    esp,0x10
c0000e24:	89 c6                	mov    esi,eax
c0000e26:	83 f8 ff             	cmp    eax,0xffffffff
c0000e29:	74 e3                	je     c0000e0e <sYSMALLOc+0x77>
c0000e2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000e2f:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000e32:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000e38:	39 c2                	cmp    edx,eax
c0000e3a:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000e40:	75 11                	jne    c0000e53 <sYSMALLOc+0xbc>
c0000e42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e46:	01 e8                	add    eax,ebp
c0000e48:	83 c8 01             	or     eax,0x1
c0000e4b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e4e:	e9 93 00 00 00       	jmp    c0000ee6 <sYSMALLOc+0x14f>
c0000e53:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000e59:	a8 01                	test   al,0x1
c0000e5b:	0f 84 73 01 00 00    	je     c0000fd4 <sYSMALLOc+0x23d>
c0000e61:	85 ed                	test   ebp,ebp
c0000e63:	74 12                	je     c0000e77 <sYSMALLOc+0xe0>
c0000e65:	39 f2                	cmp    edx,esi
c0000e67:	76 0e                	jbe    c0000e77 <sYSMALLOc+0xe0>
c0000e69:	83 e0 fe             	and    eax,0xfffffffe
c0000e6c:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000e72:	e9 5d 01 00 00       	jmp    c0000fd4 <sYSMALLOc+0x23d>
c0000e77:	85 ed                	test   ebp,ebp
c0000e79:	74 0c                	je     c0000e87 <sYSMALLOc+0xf0>
c0000e7b:	89 f0                	mov    eax,esi
c0000e7d:	29 d0                	sub    eax,edx
c0000e7f:	01 c1                	add    ecx,eax
c0000e81:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000e87:	89 f2                	mov    edx,esi
c0000e89:	83 e2 07             	and    edx,0x7
c0000e8c:	0f 84 b1 00 00 00    	je     c0000f43 <sYSMALLOc+0x1ac>
c0000e92:	b8 08 00 00 00       	mov    eax,0x8
c0000e97:	29 d0                	sub    eax,edx
c0000e99:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000e9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ea0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ea4:	01 e8                	add    eax,ebp
c0000ea6:	83 ec 0c             	sub    esp,0xc
c0000ea9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000eac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000eb0:	01 f2                	add    edx,esi
c0000eb2:	01 d1                	add    ecx,edx
c0000eb4:	29 d0                	sub    eax,edx
c0000eb6:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000eba:	01 c1                	add    ecx,eax
c0000ebc:	51                   	push   ecx
c0000ebd:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000ec1:	e8 86 68 00 00       	call   c000774c <sbrk>
c0000ec6:	83 c4 10             	add    esp,0x10
c0000ec9:	83 f8 ff             	cmp    eax,0xffffffff
c0000ecc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000ed0:	75 7c                	jne    c0000f4e <sYSMALLOc+0x1b7>
c0000ed2:	83 ec 0c             	sub    esp,0xc
c0000ed5:	6a 00                	push   0x0
c0000ed7:	e8 70 68 00 00       	call   c000774c <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	31 c9                	xor    ecx,ecx
c0000ee1:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee4:	75 7e                	jne    c0000f64 <sYSMALLOc+0x1cd>
c0000ee6:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000eec:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ef2:	73 06                	jae    c0000efa <sYSMALLOc+0x163>
c0000ef4:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000efa:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f00:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000f06:	73 06                	jae    c0000f0e <sYSMALLOc+0x177>
c0000f08:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000f0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f11:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000f14:	83 e2 fc             	and    edx,0xfffffffc
c0000f17:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000f1b:	0f 87 ed fe ff ff    	ja     c0000e0e <sYSMALLOc+0x77>
c0000f21:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000f25:	29 fa                	sub    edx,edi
c0000f27:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f2a:	83 ca 01             	or     edx,0x1
c0000f2d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f30:	89 fb                	mov    ebx,edi
c0000f32:	83 cb 01             	or     ebx,0x1
c0000f35:	83 c0 08             	add    eax,0x8
c0000f38:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f3e:	e9 b5 00 00 00       	jmp    c0000ff8 <sYSMALLOc+0x261>
c0000f43:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000f47:	31 c0                	xor    eax,eax
c0000f49:	e9 52 ff ff ff       	jmp    c0000ea0 <sYSMALLOc+0x109>
c0000f4e:	39 c6                	cmp    esi,eax
c0000f50:	76 12                	jbe    c0000f64 <sYSMALLOc+0x1cd>
c0000f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f56:	01 f0                	add    eax,esi
c0000f58:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f5f:	e9 7b ff ff ff       	jmp    c0000edf <sYSMALLOc+0x148>
c0000f64:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000f68:	29 f0                	sub    eax,esi
c0000f6a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000f6d:	01 c8                	add    eax,ecx
c0000f6f:	83 c8 01             	or     eax,0x1
c0000f72:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000f75:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000f7b:	85 ed                	test   ebp,ebp
c0000f7d:	0f 84 63 ff ff ff    	je     c0000ee6 <sYSMALLOc+0x14f>
c0000f83:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000f86:	83 e0 f8             	and    eax,0xfffffff8
c0000f89:	89 c2                	mov    edx,eax
c0000f8b:	83 ca 01             	or     edx,0x1
c0000f8e:	83 f8 0f             	cmp    eax,0xf
c0000f91:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f94:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f9c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fa4:	0f 86 3c ff ff ff    	jbe    c0000ee6 <sYSMALLOc+0x14f>
c0000faa:	83 ec 0c             	sub    esp,0xc
c0000fad:	83 c7 08             	add    edi,0x8
c0000fb0:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb6:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc0:	57                   	push   edi
c0000fc1:	e8 dc fc ff ff       	call   c0000ca2 <dlfree>
c0000fc6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fcc:	83 c4 10             	add    esp,0x10
c0000fcf:	e9 12 ff ff ff       	jmp    c0000ee6 <sYSMALLOc+0x14f>
c0000fd4:	83 ec 0c             	sub    esp,0xc
c0000fd7:	6a 00                	push   0x0
c0000fd9:	e8 6e 67 00 00       	call   c000774c <sbrk>
c0000fde:	89 c2                	mov    edx,eax
c0000fe0:	29 f2                	sub    edx,esi
c0000fe2:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fe6:	83 c4 10             	add    esp,0x10
c0000fe9:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fef:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ff3:	e9 e7 fe ff ff       	jmp    c0000edf <sYSMALLOc+0x148>
c0000ff8:	83 c4 2c             	add    esp,0x2c
c0000ffb:	5b                   	pop    ebx
c0000ffc:	5e                   	pop    esi
c0000ffd:	5f                   	pop    edi
c0000ffe:	5d                   	pop    ebp
c0000fff:	c3                   	ret    

c0001000 <dlmalloc>:
c0001000:	55                   	push   ebp
c0001001:	57                   	push   edi
c0001002:	56                   	push   esi
c0001003:	53                   	push   ebx
c0001004:	83 ec 1c             	sub    esp,0x1c
c0001007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000100b:	83 f8 df             	cmp    eax,0xffffffdf
c000100e:	0f 87 70 03 00 00    	ja     c0001384 <dlmalloc+0x384>
c0001014:	83 c0 0b             	add    eax,0xb
c0001017:	be 10 00 00 00       	mov    esi,0x10
c000101c:	83 f8 0f             	cmp    eax,0xf
c000101f:	76 05                	jbe    c0001026 <dlmalloc+0x26>
c0001021:	83 e0 f8             	and    eax,0xfffffff8
c0001024:	89 c6                	mov    esi,eax
c0001026:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c000102c:	f7 c7 01 00 00 00    	test   edi,0x1
c0001032:	75 17                	jne    c000104b <dlmalloc+0x4b>
c0001034:	85 ff                	test   edi,edi
c0001036:	0f 85 05 03 00 00    	jne    c0001341 <dlmalloc+0x341>
c000103c:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001041:	e8 75 fb ff ff       	call   c0000bbb <malloc_consolidate>
c0001046:	e9 f6 02 00 00       	jmp    c0001341 <dlmalloc+0x341>
c000104b:	39 f7                	cmp    edi,esi
c000104d:	72 1f                	jb     c000106e <dlmalloc+0x6e>
c000104f:	89 f2                	mov    edx,esi
c0001051:	c1 ea 03             	shr    edx,0x3
c0001054:	83 ea 02             	sub    edx,0x2
c0001057:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c000105e:	85 c0                	test   eax,eax
c0001060:	74 0c                	je     c000106e <dlmalloc+0x6e>
c0001062:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001065:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c000106c:	eb 30                	jmp    c000109e <dlmalloc+0x9e>
c000106e:	89 f0                	mov    eax,esi
c0001070:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001076:	77 2e                	ja     c00010a6 <dlmalloc+0xa6>
c0001078:	c1 e8 03             	shr    eax,0x3
c000107b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001086:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001089:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000108c:	39 c3                	cmp    ebx,eax
c000108e:	74 2e                	je     c00010be <dlmalloc+0xbe>
c0001090:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001093:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001098:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000109b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000109e:	83 c0 08             	add    eax,0x8
c00010a1:	e9 e0 02 00 00       	jmp    c0001386 <dlmalloc+0x386>
c00010a6:	e8 8c fa ff ff       	call   c0000b37 <largebin_index>
c00010ab:	83 e7 02             	and    edi,0x2
c00010ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b2:	74 0a                	je     c00010be <dlmalloc+0xbe>
c00010b4:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00010b9:	e8 fd fa ff ff       	call   c0000bbb <malloc_consolidate>
c00010be:	8d 46 10             	lea    eax,[esi+0x10]
c00010c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010c5:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010cb:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010d1:	0f 84 13 01 00 00    	je     c00011ea <dlmalloc+0x1ea>
c00010d7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010dd:	83 e7 fc             	and    edi,0xfffffffc
c00010e0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e6:	77 4c                	ja     c0001134 <dlmalloc+0x134>
c00010e8:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010ed:	75 45                	jne    c0001134 <dlmalloc+0x134>
c00010ef:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010f5:	75 3d                	jne    c0001134 <dlmalloc+0x134>
c00010f7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010fb:	73 37                	jae    c0001134 <dlmalloc+0x134>
c00010fd:	89 fa                	mov    edx,edi
c00010ff:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001102:	29 f2                	sub    edx,esi
c0001104:	83 ce 01             	or     esi,0x1
c0001107:	89 d1                	mov    ecx,edx
c0001109:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c000110e:	83 c9 01             	or     ecx,0x1
c0001111:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001116:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c000111b:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001122:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001129:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000112c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000112f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001132:	eb 15                	jmp    c0001149 <dlmalloc+0x149>
c0001134:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001139:	39 fe                	cmp    esi,edi
c000113b:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001142:	75 0d                	jne    c0001151 <dlmalloc+0x151>
c0001144:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001149:	8d 43 08             	lea    eax,[ebx+0x8]
c000114c:	e9 35 02 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001151:	89 f8                	mov    eax,edi
c0001153:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001159:	77 19                	ja     c0001174 <dlmalloc+0x174>
c000115b:	c1 e8 03             	shr    eax,0x3
c000115e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001161:	83 c2 0d             	add    edx,0xd
c0001164:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000116b:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001172:	eb 46                	jmp    c00011ba <dlmalloc+0x1ba>
c0001174:	e8 be f9 ff ff       	call   c0000b37 <largebin_index>
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c0001186:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c000118d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001190:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001194:	89 d5                	mov    ebp,edx
c0001196:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000119a:	74 1e                	je     c00011ba <dlmalloc+0x1ba>
c000119c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000119f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011a2:	77 12                	ja     c00011b6 <dlmalloc+0x1b6>
c00011a4:	83 cf 01             	or     edi,0x1
c00011a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011aa:	76 05                	jbe    c00011b1 <dlmalloc+0x1b1>
c00011ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011af:	eb f6                	jmp    c00011a7 <dlmalloc+0x1a7>
c00011b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011b4:	eb 04                	jmp    c00011ba <dlmalloc+0x1ba>
c00011b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ba:	89 c7                	mov    edi,eax
c00011bc:	88 c1                	mov    cl,al
c00011be:	c1 ff 05             	sar    edi,0x5
c00011c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011c5:	bf 01 00 00 00       	mov    edi,0x1
c00011ca:	d3 e7                	shl    edi,cl
c00011cc:	89 f8                	mov    eax,edi
c00011ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011d2:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011e5:	e9 db fe ff ff       	jmp    c00010c5 <dlmalloc+0xc5>
c00011ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f0:	76 78                	jbe    c000126a <dlmalloc+0x26a>
c00011f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011f6:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001200:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001203:	39 ca                	cmp    edx,ecx
c0001205:	74 63                	je     c000126a <dlmalloc+0x26a>
c0001207:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000120a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000120d:	83 e3 fc             	and    ebx,0xfffffffc
c0001210:	39 de                	cmp    esi,ebx
c0001212:	77 52                	ja     c0001266 <dlmalloc+0x266>
c0001214:	89 df                	mov    edi,ebx
c0001216:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001219:	29 f7                	sub    edi,esi
c000121b:	01 d3                	add    ebx,edx
c000121d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001220:	83 ff 0f             	cmp    edi,0xf
c0001223:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001226:	8d 42 08             	lea    eax,[edx+0x8]
c0001229:	77 09                	ja     c0001234 <dlmalloc+0x234>
c000122b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000122f:	e9 52 01 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001234:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001237:	83 ce 01             	or     esi,0x1
c000123a:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001240:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c0001246:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c000124d:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001254:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001257:	89 fa                	mov    edx,edi
c0001259:	83 ca 01             	or     edx,0x1
c000125c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000125f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001261:	e9 20 01 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001266:	89 c2                	mov    edx,eax
c0001268:	eb 99                	jmp    c0001203 <dlmalloc+0x203>
c000126a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000126e:	b8 01 00 00 00       	mov    eax,0x1
c0001273:	41                   	inc    ecx
c0001274:	89 cb                	mov    ebx,ecx
c0001276:	c1 eb 05             	shr    ebx,0x5
c0001279:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001280:	d3 e0                	shl    eax,cl
c0001282:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001289:	39 f8                	cmp    eax,edi
c000128b:	77 04                	ja     c0001291 <dlmalloc+0x291>
c000128d:	85 c0                	test   eax,eax
c000128f:	75 26                	jne    c00012b7 <dlmalloc+0x2b7>
c0001291:	43                   	inc    ebx
c0001292:	83 fb 02             	cmp    ebx,0x2
c0001295:	0f 87 a6 00 00 00    	ja     c0001341 <dlmalloc+0x341>
c000129b:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c00012a2:	85 ff                	test   edi,edi
c00012a4:	74 eb                	je     c0001291 <dlmalloc+0x291>
c00012a6:	89 d8                	mov    eax,ebx
c00012a8:	c1 e0 06             	shl    eax,0x6
c00012ab:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c00012b2:	b8 01 00 00 00       	mov    eax,0x1
c00012b7:	85 f8                	test   eax,edi
c00012b9:	75 07                	jne    c00012c2 <dlmalloc+0x2c2>
c00012bb:	83 c2 08             	add    edx,0x8
c00012be:	01 c0                	add    eax,eax
c00012c0:	eb f5                	jmp    c00012b7 <dlmalloc+0x2b7>
c00012c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012c5:	39 ca                	cmp    edx,ecx
c00012c7:	75 14                	jne    c00012dd <dlmalloc+0x2dd>
c00012c9:	89 c1                	mov    ecx,eax
c00012cb:	83 c2 08             	add    edx,0x8
c00012ce:	f7 d1                	not    ecx
c00012d0:	21 cf                	and    edi,ecx
c00012d2:	01 c0                	add    eax,eax
c00012d4:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012db:	eb ac                	jmp    c0001289 <dlmalloc+0x289>
c00012dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012e3:	83 e0 fc             	and    eax,0xfffffffc
c00012e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012e9:	89 c3                	mov    ebx,eax
c00012eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012ee:	29 f3                	sub    ebx,esi
c00012f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012f3:	83 fb 0f             	cmp    ebx,0xf
c00012f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00012f9:	77 09                	ja     c0001304 <dlmalloc+0x304>
c00012fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012ff:	e9 82 00 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001304:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001307:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130d:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c0001313:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c0001319:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001320:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c0001327:	77 06                	ja     c000132f <dlmalloc+0x32f>
c0001329:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c000132f:	83 ce 01             	or     esi,0x1
c0001332:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001335:	89 d9                	mov    ecx,ebx
c0001337:	83 c9 01             	or     ecx,0x1
c000133a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000133d:	89 1a                	mov    DWORD PTR [edx],ebx
c000133f:	eb 45                	jmp    c0001386 <dlmalloc+0x386>
c0001341:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001346:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001349:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000134c:	83 e2 fc             	and    edx,0xfffffffc
c000134f:	39 d1                	cmp    ecx,edx
c0001351:	77 1e                	ja     c0001371 <dlmalloc+0x371>
c0001353:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001356:	89 f3                	mov    ebx,esi
c0001358:	29 f2                	sub    edx,esi
c000135a:	83 cb 01             	or     ebx,0x1
c000135d:	83 ca 01             	or     edx,0x1
c0001360:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001366:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001369:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136c:	e9 2d fd ff ff       	jmp    c000109e <dlmalloc+0x9e>
c0001371:	83 c4 1c             	add    esp,0x1c
c0001374:	89 f0                	mov    eax,esi
c0001376:	ba 00 31 02 c0       	mov    edx,0xc0023100
c000137b:	5b                   	pop    ebx
c000137c:	5e                   	pop    esi
c000137d:	5f                   	pop    edi
c000137e:	5d                   	pop    ebp
c000137f:	e9 13 fa ff ff       	jmp    c0000d97 <sYSMALLOc>
c0001384:	31 c0                	xor    eax,eax
c0001386:	83 c4 1c             	add    esp,0x1c
c0001389:	5b                   	pop    ebx
c000138a:	5e                   	pop    esi
c000138b:	5f                   	pop    edi
c000138c:	5d                   	pop    ebp
c000138d:	c3                   	ret    

c000138e <iALLOc>:
c000138e:	55                   	push   ebp
c000138f:	89 c5                	mov    ebp,eax
c0001391:	57                   	push   edi
c0001392:	56                   	push   esi
c0001393:	53                   	push   ebx
c0001394:	83 ec 2c             	sub    esp,0x2c
c0001397:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000139e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013aa:	75 12                	jne    c00013be <iALLOc+0x30>
c00013ac:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00013b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013b5:	e8 01 f8 ff ff       	call   c0000bbb <malloc_consolidate>
c00013ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c3:	74 12                	je     c00013d7 <iALLOc+0x49>
c00013c5:	85 ed                	test   ebp,ebp
c00013c7:	0f 84 64 01 00 00    	je     c0001531 <iALLOc+0x1a3>
c00013cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013d5:	eb 33                	jmp    c000140a <iALLOc+0x7c>
c00013d7:	85 ed                	test   ebp,ebp
c00013d9:	75 14                	jne    c00013ef <iALLOc+0x61>
c00013db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013e3:	83 c4 2c             	add    esp,0x2c
c00013e6:	5b                   	pop    ebx
c00013e7:	5e                   	pop    esi
c00013e8:	5f                   	pop    edi
c00013e9:	5d                   	pop    ebp
c00013ea:	e9 11 fc ff ff       	jmp    c0001000 <dlmalloc>
c00013ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013fe:	83 f8 0f             	cmp    eax,0xf
c0001401:	76 07                	jbe    c000140a <iALLOc+0x7c>
c0001403:	83 e0 f8             	and    eax,0xfffffff8
c0001406:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000140a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000140f:	75 09                	jne    c000141a <iALLOc+0x8c>
c0001411:	89 d0                	mov    eax,edx
c0001413:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001416:	31 f6                	xor    esi,esi
c0001418:	eb 3b                	jmp    c0001455 <iALLOc+0xc7>
c000141a:	8b 02                	mov    eax,DWORD PTR [edx]
c000141c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001424:	83 c0 0b             	add    eax,0xb
c0001427:	83 f8 0f             	cmp    eax,0xf
c000142a:	76 07                	jbe    c0001433 <iALLOc+0xa5>
c000142c:	83 e0 f8             	and    eax,0xfffffff8
c000142f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001433:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001437:	0f af f5             	imul   esi,ebp
c000143a:	eb 25                	jmp    c0001461 <iALLOc+0xd3>
c000143c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000143e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001441:	bb 10 00 00 00       	mov    ebx,0x10
c0001446:	83 f9 0f             	cmp    ecx,0xf
c0001449:	76 05                	jbe    c0001450 <iALLOc+0xc2>
c000144b:	83 e1 f8             	and    ecx,0xfffffff8
c000144e:	89 cb                	mov    ebx,ecx
c0001450:	01 de                	add    esi,ebx
c0001452:	83 c0 04             	add    eax,0x4
c0001455:	39 c7                	cmp    edi,eax
c0001457:	75 e3                	jne    c000143c <iALLOc+0xae>
c0001459:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001465:	83 ec 0c             	sub    esp,0xc
c0001468:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000146e:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000147c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001480:	50                   	push   eax
c0001481:	e8 7a fb ff ff       	call   c0001000 <dlmalloc>
c0001486:	83 c4 10             	add    esp,0x10
c0001489:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c000148f:	85 c0                	test   eax,eax
c0001491:	0f 84 92 00 00 00    	je     c0001529 <iALLOc+0x19b>
c0001497:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000149a:	8d 78 f8             	lea    edi,[eax-0x8]
c000149d:	83 e3 fc             	and    ebx,0xfffffffc
c00014a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014a9:	74 1e                	je     c00014c9 <iALLOc+0x13b>
c00014ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014af:	89 d9                	mov    ecx,ebx
c00014b1:	52                   	push   edx
c00014b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014b6:	83 e9 04             	sub    ecx,0x4
c00014b9:	51                   	push   ecx
c00014ba:	6a 00                	push   0x0
c00014bc:	50                   	push   eax
c00014bd:	e8 fe ef ff ff       	call   c00004c0 <memset>
c00014c2:	83 c4 10             	add    esp,0x10
c00014c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	75 14                	jne    c00014e4 <iALLOc+0x156>
c00014d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00014d3:	29 f3                	sub    ebx,esi
c00014d5:	83 cb 01             	or     ebx,0x1
c00014d8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014e2:	89 f3                	mov    ebx,esi
c00014e4:	31 c0                	xor    eax,eax
c00014e6:	4d                   	dec    ebp
c00014e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014eb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ee:	39 c5                	cmp    ebp,eax
c00014f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014f3:	74 2c                	je     c0001521 <iALLOc+0x193>
c00014f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014f9:	85 c9                	test   ecx,ecx
c00014fb:	75 15                	jne    c0001512 <iALLOc+0x184>
c00014fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001500:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001503:	b9 10 00 00 00       	mov    ecx,0x10
c0001508:	83 fe 0f             	cmp    esi,0xf
c000150b:	76 05                	jbe    c0001512 <iALLOc+0x184>
c000150d:	83 e6 f8             	and    esi,0xfffffff8
c0001510:	89 f1                	mov    ecx,esi
c0001512:	89 ce                	mov    esi,ecx
c0001514:	29 cb                	sub    ebx,ecx
c0001516:	83 ce 01             	or     esi,0x1
c0001519:	40                   	inc    eax
c000151a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000151d:	01 cf                	add    edi,ecx
c000151f:	eb c6                	jmp    c00014e7 <iALLOc+0x159>
c0001521:	83 cb 01             	or     ebx,0x1
c0001524:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001527:	eb 08                	jmp    c0001531 <iALLOc+0x1a3>
c0001529:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001535:	83 c4 2c             	add    esp,0x2c
c0001538:	5b                   	pop    ebx
c0001539:	5e                   	pop    esi
c000153a:	5f                   	pop    edi
c000153b:	5d                   	pop    ebp
c000153c:	c3                   	ret    

c000153d <dlrealloc>:
c000153d:	55                   	push   ebp
c000153e:	57                   	push   edi
c000153f:	56                   	push   esi
c0001540:	53                   	push   ebx
c0001541:	83 ec 1c             	sub    esp,0x1c
c0001544:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001548:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000154c:	85 db                	test   ebx,ebx
c000154e:	75 10                	jne    c0001560 <dlrealloc+0x23>
c0001550:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001554:	83 c4 1c             	add    esp,0x1c
c0001557:	5b                   	pop    ebx
c0001558:	5e                   	pop    esi
c0001559:	5f                   	pop    edi
c000155a:	5d                   	pop    ebp
c000155b:	e9 a0 fa ff ff       	jmp    c0001000 <dlmalloc>
c0001560:	83 f8 df             	cmp    eax,0xffffffdf
c0001563:	76 07                	jbe    c000156c <dlrealloc+0x2f>
c0001565:	31 db                	xor    ebx,ebx
c0001567:	e9 6a 01 00 00       	jmp    c00016d6 <dlrealloc+0x199>
c000156c:	83 c0 0b             	add    eax,0xb
c000156f:	bd 10 00 00 00       	mov    ebp,0x10
c0001574:	83 f8 0f             	cmp    eax,0xf
c0001577:	76 05                	jbe    c000157e <dlrealloc+0x41>
c0001579:	83 e0 f8             	and    eax,0xfffffff8
c000157c:	89 c5                	mov    ebp,eax
c000157e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001581:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001584:	89 c6                	mov    esi,eax
c0001586:	83 e6 fc             	and    esi,0xfffffffc
c0001589:	a8 02                	test   al,0x2
c000158b:	75 d8                	jne    c0001565 <dlrealloc+0x28>
c000158d:	39 f5                	cmp    ebp,esi
c000158f:	0f 86 04 01 00 00    	jbe    c0001699 <dlrealloc+0x15c>
c0001595:	8d 14 37             	lea    edx,[edi+esi*1]
c0001598:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c000159e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015a1:	75 33                	jne    c00015d6 <dlrealloc+0x99>
c00015a3:	83 e1 fc             	and    ecx,0xfffffffc
c00015a6:	01 f1                	add    ecx,esi
c00015a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ac:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015af:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015b3:	77 49                	ja     c00015fe <dlrealloc+0xc1>
c00015b5:	83 e0 01             	and    eax,0x1
c00015b8:	01 ef                	add    edi,ebp
c00015ba:	09 e8                	or     eax,ebp
c00015bc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015c3:	29 e8                	sub    eax,ebp
c00015c5:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015cb:	83 c8 01             	or     eax,0x1
c00015ce:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015d1:	e9 00 01 00 00       	jmp    c00016d6 <dlrealloc+0x199>
c00015d6:	89 c8                	mov    eax,ecx
c00015d8:	83 e0 fe             	and    eax,0xfffffffe
c00015db:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015e0:	75 1c                	jne    c00015fe <dlrealloc+0xc1>
c00015e2:	83 e1 fc             	and    ecx,0xfffffffc
c00015e5:	01 f1                	add    ecx,esi
c00015e7:	39 cd                	cmp    ebp,ecx
c00015e9:	77 13                	ja     c00015fe <dlrealloc+0xc1>
c00015eb:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015f1:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015f4:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015f7:	89 ce                	mov    esi,ecx
c00015f9:	e9 9b 00 00 00       	jmp    c0001699 <dlrealloc+0x15c>
c00015fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001602:	83 ec 0c             	sub    esp,0xc
c0001605:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001608:	50                   	push   eax
c0001609:	e8 f2 f9 ff ff       	call   c0001000 <dlmalloc>
c000160e:	83 c4 10             	add    esp,0x10
c0001611:	85 c0                	test   eax,eax
c0001613:	0f 84 4c ff ff ff    	je     c0001565 <dlrealloc+0x28>
c0001619:	8d 48 f8             	lea    ecx,[eax-0x8]
c000161c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001620:	39 ca                	cmp    edx,ecx
c0001622:	75 0a                	jne    c000162e <dlrealloc+0xf1>
c0001624:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001627:	83 e0 fc             	and    eax,0xfffffffc
c000162a:	01 c6                	add    esi,eax
c000162c:	eb 6b                	jmp    c0001699 <dlrealloc+0x15c>
c000162e:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001631:	83 f9 27             	cmp    ecx,0x27
c0001634:	76 08                	jbe    c000163e <dlrealloc+0x101>
c0001636:	89 de                	mov    esi,ebx
c0001638:	89 c7                	mov    edi,eax
c000163a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000163c:	eb 43                	jmp    c0001681 <dlrealloc+0x144>
c000163e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001640:	83 f9 13             	cmp    ecx,0x13
c0001643:	89 10                	mov    DWORD PTR [eax],edx
c0001645:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001648:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000164b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000164e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001651:	76 2e                	jbe    c0001681 <dlrealloc+0x144>
c0001653:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001656:	83 f9 1b             	cmp    ecx,0x1b
c0001659:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000165c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000165f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001662:	76 1d                	jbe    c0001681 <dlrealloc+0x144>
c0001664:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001667:	83 f9 23             	cmp    ecx,0x23
c000166a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000166d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001670:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001673:	76 0c                	jbe    c0001681 <dlrealloc+0x144>
c0001675:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001678:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000167b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000167e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	53                   	push   ebx
c0001689:	e8 14 f6 ff ff       	call   c0000ca2 <dlfree>
c000168e:	83 c4 10             	add    esp,0x10
c0001691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001695:	89 c3                	mov    ebx,eax
c0001697:	eb 3d                	jmp    c00016d6 <dlrealloc+0x199>
c0001699:	89 f2                	mov    edx,esi
c000169b:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000169e:	29 ea                	sub    edx,ebp
c00016a0:	83 e1 01             	and    ecx,0x1
c00016a3:	8d 04 37             	lea    eax,[edi+esi*1]
c00016a6:	83 fa 0f             	cmp    edx,0xf
c00016a9:	77 0b                	ja     c00016b6 <dlrealloc+0x179>
c00016ab:	09 ce                	or     esi,ecx
c00016ad:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016b0:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b4:	eb 20                	jmp    c00016d6 <dlrealloc+0x199>
c00016b6:	01 ef                	add    edi,ebp
c00016b8:	83 ca 01             	or     edx,0x1
c00016bb:	09 cd                	or     ebp,ecx
c00016bd:	83 ec 0c             	sub    esp,0xc
c00016c0:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016c3:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00016c6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016ca:	83 c7 08             	add    edi,0x8
c00016cd:	57                   	push   edi
c00016ce:	e8 cf f5 ff ff       	call   c0000ca2 <dlfree>
c00016d3:	83 c4 10             	add    esp,0x10
c00016d6:	83 c4 1c             	add    esp,0x1c
c00016d9:	89 d8                	mov    eax,ebx
c00016db:	5b                   	pop    ebx
c00016dc:	5e                   	pop    esi
c00016dd:	5f                   	pop    edi
c00016de:	5d                   	pop    ebp
c00016df:	c3                   	ret    

c00016e0 <dlmemalign>:
c00016e0:	55                   	push   ebp
c00016e1:	57                   	push   edi
c00016e2:	56                   	push   esi
c00016e3:	53                   	push   ebx
c00016e4:	83 ec 0c             	sub    esp,0xc
c00016e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016ef:	83 fa 08             	cmp    edx,0x8
c00016f2:	77 10                	ja     c0001704 <dlmemalign+0x24>
c00016f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016f8:	83 c4 0c             	add    esp,0xc
c00016fb:	5b                   	pop    ebx
c00016fc:	5e                   	pop    esi
c00016fd:	5f                   	pop    edi
c00016fe:	5d                   	pop    ebp
c00016ff:	e9 fc f8 ff ff       	jmp    c0001000 <dlmalloc>
c0001704:	bf 10 00 00 00       	mov    edi,0x10
c0001709:	83 fa 0f             	cmp    edx,0xf
c000170c:	76 13                	jbe    c0001721 <dlmemalign+0x41>
c000170e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001711:	85 d1                	test   ecx,edx
c0001713:	75 04                	jne    c0001719 <dlmemalign+0x39>
c0001715:	89 d7                	mov    edi,edx
c0001717:	eb 08                	jmp    c0001721 <dlmemalign+0x41>
c0001719:	39 d7                	cmp    edi,edx
c000171b:	73 04                	jae    c0001721 <dlmemalign+0x41>
c000171d:	01 ff                	add    edi,edi
c000171f:	eb f8                	jmp    c0001719 <dlmemalign+0x39>
c0001721:	83 f8 df             	cmp    eax,0xffffffdf
c0001724:	76 07                	jbe    c000172d <dlmemalign+0x4d>
c0001726:	31 c0                	xor    eax,eax
c0001728:	e9 ce 00 00 00       	jmp    c00017fb <dlmemalign+0x11b>
c000172d:	83 c0 0b             	add    eax,0xb
c0001730:	bd 10 00 00 00       	mov    ebp,0x10
c0001735:	83 f8 0f             	cmp    eax,0xf
c0001738:	76 05                	jbe    c000173f <dlmemalign+0x5f>
c000173a:	83 e0 f8             	and    eax,0xfffffff8
c000173d:	89 c5                	mov    ebp,eax
c000173f:	83 ec 0c             	sub    esp,0xc
c0001742:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001746:	50                   	push   eax
c0001747:	e8 b4 f8 ff ff       	call   c0001000 <dlmalloc>
c000174c:	83 c4 10             	add    esp,0x10
c000174f:	89 c1                	mov    ecx,eax
c0001751:	85 c0                	test   eax,eax
c0001753:	74 d1                	je     c0001726 <dlmemalign+0x46>
c0001755:	31 d2                	xor    edx,edx
c0001757:	8d 70 f8             	lea    esi,[eax-0x8]
c000175a:	f7 f7                	div    edi
c000175c:	85 d2                	test   edx,edx
c000175e:	74 62                	je     c00017c2 <dlmemalign+0xe2>
c0001760:	89 f8                	mov    eax,edi
c0001762:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001766:	f7 d8                	neg    eax
c0001768:	21 c3                	and    ebx,eax
c000176a:	83 eb 08             	sub    ebx,0x8
c000176d:	89 d8                	mov    eax,ebx
c000176f:	29 f0                	sub    eax,esi
c0001771:	83 f8 0f             	cmp    eax,0xf
c0001774:	77 02                	ja     c0001778 <dlmemalign+0x98>
c0001776:	01 fb                	add    ebx,edi
c0001778:	89 d8                	mov    eax,ebx
c000177a:	29 f0                	sub    eax,esi
c000177c:	89 c6                	mov    esi,eax
c000177e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001781:	89 c2                	mov    edx,eax
c0001783:	83 e2 fc             	and    edx,0xfffffffc
c0001786:	29 f2                	sub    edx,esi
c0001788:	a8 02                	test   al,0x2
c000178a:	74 10                	je     c000179c <dlmemalign+0xbc>
c000178c:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000178f:	83 ca 02             	or     edx,0x2
c0001792:	8d 43 08             	lea    eax,[ebx+0x8]
c0001795:	89 33                	mov    DWORD PTR [ebx],esi
c0001797:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000179a:	eb 5f                	jmp    c00017fb <dlmemalign+0x11b>
c000179c:	89 d0                	mov    eax,edx
c000179e:	83 ec 0c             	sub    esp,0xc
c00017a1:	83 c8 01             	or     eax,0x1
c00017a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017a7:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017ac:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017af:	83 e0 01             	and    eax,0x1
c00017b2:	09 f0                	or     eax,esi
c00017b4:	89 de                	mov    esi,ebx
c00017b6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017b9:	51                   	push   ecx
c00017ba:	e8 e3 f4 ff ff       	call   c0000ca2 <dlfree>
c00017bf:	83 c4 10             	add    esp,0x10
c00017c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017c5:	a8 02                	test   al,0x2
c00017c7:	75 2f                	jne    c00017f8 <dlmemalign+0x118>
c00017c9:	83 e0 fc             	and    eax,0xfffffffc
c00017cc:	8d 55 10             	lea    edx,[ebp+0x10]
c00017cf:	39 c2                	cmp    edx,eax
c00017d1:	73 25                	jae    c00017f8 <dlmemalign+0x118>
c00017d3:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017d6:	29 e8                	sub    eax,ebp
c00017d8:	83 c8 01             	or     eax,0x1
c00017db:	83 ec 0c             	sub    esp,0xc
c00017de:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00017e1:	83 c2 08             	add    edx,0x8
c00017e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e7:	83 e0 01             	and    eax,0x1
c00017ea:	09 c5                	or     ebp,eax
c00017ec:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017ef:	52                   	push   edx
c00017f0:	e8 ad f4 ff ff       	call   c0000ca2 <dlfree>
c00017f5:	83 c4 10             	add    esp,0x10
c00017f8:	8d 46 08             	lea    eax,[esi+0x8]
c00017fb:	83 c4 0c             	add    esp,0xc
c00017fe:	5b                   	pop    ebx
c00017ff:	5e                   	pop    esi
c0001800:	5f                   	pop    edi
c0001801:	5d                   	pop    ebp
c0001802:	c3                   	ret    

c0001803 <dlcalloc>:
c0001803:	53                   	push   ebx
c0001804:	83 ec 14             	sub    esp,0x14
c0001807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000180b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001810:	50                   	push   eax
c0001811:	e8 ea f7 ff ff       	call   c0001000 <dlmalloc>
c0001816:	83 c4 10             	add    esp,0x10
c0001819:	89 c3                	mov    ebx,eax
c000181b:	85 c0                	test   eax,eax
c000181d:	74 77                	je     c0001896 <dlcalloc+0x93>
c000181f:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001822:	89 d0                	mov    eax,edx
c0001824:	83 e0 fc             	and    eax,0xfffffffc
c0001827:	80 e2 02             	and    dl,0x2
c000182a:	75 5a                	jne    c0001886 <dlcalloc+0x83>
c000182c:	83 e8 04             	sub    eax,0x4
c000182f:	83 f8 27             	cmp    eax,0x27
c0001832:	76 03                	jbe    c0001837 <dlcalloc+0x34>
c0001834:	51                   	push   ecx
c0001835:	eb 53                	jmp    c000188a <dlcalloc+0x87>
c0001837:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000183d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001844:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000184b:	83 f8 13             	cmp    eax,0x13
c000184e:	76 46                	jbe    c0001896 <dlcalloc+0x93>
c0001850:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001857:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000185e:	83 f8 1b             	cmp    eax,0x1b
c0001861:	76 33                	jbe    c0001896 <dlcalloc+0x93>
c0001863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000186a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001871:	83 f8 23             	cmp    eax,0x23
c0001874:	76 20                	jbe    c0001896 <dlcalloc+0x93>
c0001876:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000187d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001884:	eb 10                	jmp    c0001896 <dlcalloc+0x93>
c0001886:	83 e8 08             	sub    eax,0x8
c0001889:	52                   	push   edx
c000188a:	50                   	push   eax
c000188b:	6a 00                	push   0x0
c000188d:	53                   	push   ebx
c000188e:	e8 2d ec ff ff       	call   c00004c0 <memset>
c0001893:	83 c4 10             	add    esp,0x10
c0001896:	83 c4 08             	add    esp,0x8
c0001899:	89 d8                	mov    eax,ebx
c000189b:	5b                   	pop    ebx
c000189c:	c3                   	ret    

c000189d <dlcfree>:
c000189d:	e9 00 f4 ff ff       	jmp    c0000ca2 <dlfree>

c00018a2 <dlindependent_calloc>:
c00018a2:	83 ec 28             	sub    esp,0x28
c00018a5:	b9 03 00 00 00       	mov    ecx,0x3
c00018aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018ba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018be:	e8 cb fa ff ff       	call   c000138e <iALLOc>
c00018c3:	83 c4 2c             	add    esp,0x2c
c00018c6:	c3                   	ret    

c00018c7 <dlindependent_comalloc>:
c00018c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018cf:	31 c9                	xor    ecx,ecx
c00018d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018d9:	e9 b0 fa ff ff       	jmp    c000138e <iALLOc>

c00018de <dlvalloc>:
c00018de:	83 ec 0c             	sub    esp,0xc
c00018e1:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018e8:	75 0a                	jne    c00018f4 <dlvalloc+0x16>
c00018ea:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018ef:	e8 c7 f2 ff ff       	call   c0000bbb <malloc_consolidate>
c00018f4:	50                   	push   eax
c00018f5:	50                   	push   eax
c00018f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018fa:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c0001900:	e8 db fd ff ff       	call   c00016e0 <dlmemalign>
c0001905:	83 c4 1c             	add    esp,0x1c
c0001908:	c3                   	ret    

c0001909 <dlpvalloc>:
c0001909:	83 ec 0c             	sub    esp,0xc
c000190c:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c0001913:	75 0a                	jne    c000191f <dlpvalloc+0x16>
c0001915:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000191a:	e8 9c f2 ff ff       	call   c0000bbb <malloc_consolidate>
c000191f:	52                   	push   edx
c0001920:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001925:	52                   	push   edx
c0001926:	89 c1                	mov    ecx,eax
c0001928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000192c:	f7 d9                	neg    ecx
c000192e:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001932:	21 ca                	and    edx,ecx
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	e8 a5 fd ff ff       	call   c00016e0 <dlmemalign>
c000193b:	83 c4 1c             	add    esp,0x1c
c000193e:	c3                   	ret    

c000193f <dlmalloc_trim>:
c000193f:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001944:	e8 72 f2 ff ff       	call   c0000bbb <malloc_consolidate>
c0001949:	31 c0                	xor    eax,eax
c000194b:	c3                   	ret    

c000194c <dlmalloc_usable_size>:
c000194c:	53                   	push   ebx
c000194d:	31 c0                	xor    eax,eax
c000194f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001953:	85 c9                	test   ecx,ecx
c0001955:	74 24                	je     c000197b <dlmalloc_usable_size+0x2f>
c0001957:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000195a:	f6 c2 02             	test   dl,0x2
c000195d:	74 08                	je     c0001967 <dlmalloc_usable_size+0x1b>
c000195f:	83 e2 fc             	and    edx,0xfffffffc
c0001962:	8d 42 f8             	lea    eax,[edx-0x8]
c0001965:	eb 14                	jmp    c000197b <dlmalloc_usable_size+0x2f>
c0001967:	89 d3                	mov    ebx,edx
c0001969:	31 c0                	xor    eax,eax
c000196b:	83 e3 fe             	and    ebx,0xfffffffe
c000196e:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001973:	74 06                	je     c000197b <dlmalloc_usable_size+0x2f>
c0001975:	83 e2 fc             	and    edx,0xfffffffc
c0001978:	8d 42 fc             	lea    eax,[edx-0x4]
c000197b:	5b                   	pop    ebx
c000197c:	c3                   	ret    

c000197d <dlmallinfo>:
c000197d:	55                   	push   ebp
c000197e:	57                   	push   edi
c000197f:	56                   	push   esi
c0001980:	53                   	push   ebx
c0001981:	83 ec 08             	sub    esp,0x8
c0001984:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c000198b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000198f:	75 0a                	jne    c000199b <dlmallinfo+0x1e>
c0001991:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001996:	e8 20 f2 ff ff       	call   c0000bbb <malloc_consolidate>
c000199b:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c00019a0:	31 ed                	xor    ebp,ebp
c00019a2:	31 c9                	xor    ecx,ecx
c00019a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019a7:	83 e0 fc             	and    eax,0xfffffffc
c00019aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ae:	31 c0                	xor    eax,eax
c00019b0:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c00019b7:	85 d2                	test   edx,edx
c00019b9:	74 0e                	je     c00019c9 <dlmallinfo+0x4c>
c00019bb:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019be:	45                   	inc    ebp
c00019bf:	83 e6 fc             	and    esi,0xfffffffc
c00019c2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019c5:	01 f1                	add    ecx,esi
c00019c7:	eb ee                	jmp    c00019b7 <dlmallinfo+0x3a>
c00019c9:	40                   	inc    eax
c00019ca:	83 f8 0a             	cmp    eax,0xa
c00019cd:	75 e1                	jne    c00019b0 <dlmallinfo+0x33>
c00019cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019d3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019da:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019dd:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019e2:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019e5:	39 f0                	cmp    eax,esi
c00019e7:	74 10                	je     c00019f9 <dlmallinfo+0x7c>
c00019e9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019ec:	ff 04 24             	inc    DWORD PTR [esp]
c00019ef:	83 e7 fc             	and    edi,0xfffffffc
c00019f2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019f5:	01 fa                	add    edx,edi
c00019f7:	eb ec                	jmp    c00019e5 <dlmallinfo+0x68>
c00019f9:	83 c0 08             	add    eax,0x8
c00019fc:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c0001a01:	75 df                	jne    c00019e2 <dlmallinfo+0x65>
c0001a03:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c0001a08:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a0e:	89 03                	mov    DWORD PTR [ebx],eax
c0001a10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a1b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a21:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a24:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a31:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a37:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a3a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a40:	83 c4 08             	add    esp,0x8
c0001a43:	89 d8                	mov    eax,ebx
c0001a45:	5b                   	pop    ebx
c0001a46:	5e                   	pop    esi
c0001a47:	5f                   	pop    edi
c0001a48:	5d                   	pop    ebp
c0001a49:	c2 04 00             	ret    0x4

c0001a4c <dlmalloc_stats>:
c0001a4c:	83 ec 30             	sub    esp,0x30
c0001a4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a53:	50                   	push   eax
c0001a54:	e8 24 ff ff ff       	call   c000197d <dlmallinfo>
c0001a59:	83 c4 30             	add    esp,0x30
c0001a5c:	c3                   	ret    

c0001a5d <dlmallopt>:
c0001a5d:	56                   	push   esi
c0001a5e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a63:	53                   	push   ebx
c0001a64:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a6c:	e8 4a f1 ff ff       	call   c0000bbb <malloc_consolidate>
c0001a71:	8d 46 04             	lea    eax,[esi+0x4]
c0001a74:	83 f8 05             	cmp    eax,0x5
c0001a77:	77 67                	ja     c0001ae0 <dlmallopt+0x83>
c0001a79:	ff 24 85 c4 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe133c]
c0001a80:	83 fb 50             	cmp    ebx,0x50
c0001a83:	77 5b                	ja     c0001ae0 <dlmallopt+0x83>
c0001a85:	ba 08 00 00 00       	mov    edx,0x8
c0001a8a:	85 db                	test   ebx,ebx
c0001a8c:	74 12                	je     c0001aa0 <dlmallopt+0x43>
c0001a8e:	83 c3 0b             	add    ebx,0xb
c0001a91:	ba 10 00 00 00       	mov    edx,0x10
c0001a96:	83 fb 0f             	cmp    ebx,0xf
c0001a99:	76 05                	jbe    c0001aa0 <dlmallopt+0x43>
c0001a9b:	89 da                	mov    edx,ebx
c0001a9d:	83 e2 f8             	and    edx,0xfffffff8
c0001aa0:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001aa5:	83 e0 03             	and    eax,0x3
c0001aa8:	09 d0                	or     eax,edx
c0001aaa:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001aaf:	eb 31                	jmp    c0001ae2 <dlmallopt+0x85>
c0001ab1:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001ab7:	eb 06                	jmp    c0001abf <dlmallopt+0x62>
c0001ab9:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001abf:	be 01 00 00 00       	mov    esi,0x1
c0001ac4:	eb 1c                	jmp    c0001ae2 <dlmallopt+0x85>
c0001ac6:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001acc:	eb f1                	jmp    c0001abf <dlmallopt+0x62>
c0001ace:	31 f6                	xor    esi,esi
c0001ad0:	85 db                	test   ebx,ebx
c0001ad2:	75 0e                	jne    c0001ae2 <dlmallopt+0x85>
c0001ad4:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ade:	eb df                	jmp    c0001abf <dlmallopt+0x62>
c0001ae0:	31 f6                	xor    esi,esi
c0001ae2:	5b                   	pop    ebx
c0001ae3:	89 f0                	mov    eax,esi
c0001ae5:	5e                   	pop    esi
c0001ae6:	c3                   	ret    
c0001ae7:	90                   	nop

c0001ae8 <isblank>:
c0001ae8:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001aed:	74 09                	je     c0001af8 <isblank+0x10>
c0001aef:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001af4:	75 0a                	jne    c0001b00 <isblank+0x18>
c0001af6:	66 90                	xchg   ax,ax
c0001af8:	b8 01 00 00 00       	mov    eax,0x1
c0001afd:	c3                   	ret    
c0001afe:	66 90                	xchg   ax,ax
c0001b00:	b8 00 00 00 00       	mov    eax,0x0
c0001b05:	c3                   	ret    
c0001b06:	66 90                	xchg   ax,ax

c0001b08 <iscntrl>:
c0001b08:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b0d:	7e 09                	jle    c0001b18 <iscntrl+0x10>
c0001b0f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b14:	75 0a                	jne    c0001b20 <iscntrl+0x18>
c0001b16:	66 90                	xchg   ax,ax
c0001b18:	b8 01 00 00 00       	mov    eax,0x1
c0001b1d:	c3                   	ret    
c0001b1e:	66 90                	xchg   ax,ax
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <isdigit>:
c0001b28:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b2d:	7e 0d                	jle    c0001b3c <isdigit+0x14>
c0001b2f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b34:	7f 06                	jg     c0001b3c <isdigit+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <islower>:
c0001b44:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b49:	7e 0d                	jle    c0001b58 <islower+0x14>
c0001b4b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b50:	7f 06                	jg     c0001b58 <islower+0x14>
c0001b52:	b8 01 00 00 00       	mov    eax,0x1
c0001b57:	c3                   	ret    
c0001b58:	b8 00 00 00 00       	mov    eax,0x0
c0001b5d:	c3                   	ret    
c0001b5e:	66 90                	xchg   ax,ax

c0001b60 <isspace>:
c0001b60:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b65:	7c 19                	jl     c0001b80 <isspace+0x20>
c0001b67:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b6c:	7e 0a                	jle    c0001b78 <isspace+0x18>
c0001b6e:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b73:	75 0b                	jne    c0001b80 <isspace+0x20>
c0001b75:	8d 76 00             	lea    esi,[esi+0x0]
c0001b78:	b8 01 00 00 00       	mov    eax,0x1
c0001b7d:	c3                   	ret    
c0001b7e:	66 90                	xchg   ax,ax
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isupper>:
c0001b88:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b8d:	7e 0d                	jle    c0001b9c <isupper+0x14>
c0001b8f:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b94:	7f 06                	jg     c0001b9c <isupper+0x14>
c0001b96:	b8 01 00 00 00       	mov    eax,0x1
c0001b9b:	c3                   	ret    
c0001b9c:	b8 00 00 00 00       	mov    eax,0x0
c0001ba1:	c3                   	ret    
c0001ba2:	66 90                	xchg   ax,ax

c0001ba4 <isalpha>:
c0001ba4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ba8:	e8 db ff ff ff       	call   c0001b88 <isupper>
c0001bad:	83 c4 04             	add    esp,0x4
c0001bb0:	85 c0                	test   eax,eax
c0001bb2:	75 10                	jne    c0001bc4 <isalpha+0x20>
c0001bb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bb8:	e8 87 ff ff ff       	call   c0001b44 <islower>
c0001bbd:	83 c4 04             	add    esp,0x4
c0001bc0:	85 c0                	test   eax,eax
c0001bc2:	74 08                	je     c0001bcc <isalpha+0x28>
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isalnum>:
c0001bd4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bd8:	e8 c7 ff ff ff       	call   c0001ba4 <isalpha>
c0001bdd:	83 c4 04             	add    esp,0x4
c0001be0:	85 c0                	test   eax,eax
c0001be2:	75 10                	jne    c0001bf4 <isalnum+0x20>
c0001be4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001be8:	e8 3b ff ff ff       	call   c0001b28 <isdigit>
c0001bed:	83 c4 04             	add    esp,0x4
c0001bf0:	85 c0                	test   eax,eax
c0001bf2:	74 08                	je     c0001bfc <isalnum+0x28>
c0001bf4:	b8 01 00 00 00       	mov    eax,0x1
c0001bf9:	c3                   	ret    
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 00 00 00 00       	mov    eax,0x0
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax

c0001c04 <ispunct>:
c0001c04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c08:	e8 c7 ff ff ff       	call   c0001bd4 <isalnum>
c0001c0d:	83 c4 04             	add    esp,0x4
c0001c10:	85 c0                	test   eax,eax
c0001c12:	75 28                	jne    c0001c3c <ispunct+0x38>
c0001c14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c18:	e8 43 ff ff ff       	call   c0001b60 <isspace>
c0001c1d:	83 c4 04             	add    esp,0x4
c0001c20:	85 c0                	test   eax,eax
c0001c22:	75 18                	jne    c0001c3c <ispunct+0x38>
c0001c24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c28:	e8 db fe ff ff       	call   c0001b08 <iscntrl>
c0001c2d:	83 c4 04             	add    esp,0x4
c0001c30:	85 c0                	test   eax,eax
c0001c32:	75 08                	jne    c0001c3c <ispunct+0x38>
c0001c34:	b8 01 00 00 00       	mov    eax,0x1
c0001c39:	c3                   	ret    
c0001c3a:	66 90                	xchg   ax,ax
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isgraph>:
c0001c44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c48:	e8 87 ff ff ff       	call   c0001bd4 <isalnum>
c0001c4d:	83 c4 04             	add    esp,0x4
c0001c50:	85 c0                	test   eax,eax
c0001c52:	75 10                	jne    c0001c64 <isgraph+0x20>
c0001c54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c58:	e8 a7 ff ff ff       	call   c0001c04 <ispunct>
c0001c5d:	83 c4 04             	add    esp,0x4
c0001c60:	85 c0                	test   eax,eax
c0001c62:	74 08                	je     c0001c6c <isgraph+0x28>
c0001c64:	b8 01 00 00 00       	mov    eax,0x1
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax
c0001c6c:	b8 00 00 00 00       	mov    eax,0x0
c0001c71:	c3                   	ret    
c0001c72:	66 90                	xchg   ax,ax

c0001c74 <isprint>:
c0001c74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c78:	e8 c7 ff ff ff       	call   c0001c44 <isgraph>
c0001c7d:	83 c4 04             	add    esp,0x4
c0001c80:	85 c0                	test   eax,eax
c0001c82:	75 08                	jne    c0001c8c <isprint+0x18>
c0001c84:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c89:	75 09                	jne    c0001c94 <isprint+0x20>
c0001c8b:	90                   	nop
c0001c8c:	b8 01 00 00 00       	mov    eax,0x1
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax
c0001c94:	b8 00 00 00 00       	mov    eax,0x0
c0001c99:	c3                   	ret    
c0001c9a:	66 90                	xchg   ax,ax

c0001c9c <isxdigit>:
c0001c9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ca0:	e8 83 fe ff ff       	call   c0001b28 <isdigit>
c0001ca5:	83 c4 04             	add    esp,0x4
c0001ca8:	85 c0                	test   eax,eax
c0001caa:	75 20                	jne    c0001ccc <isxdigit+0x30>
c0001cac:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cb1:	7e 09                	jle    c0001cbc <isxdigit+0x20>
c0001cb3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cb8:	7e 12                	jle    c0001ccc <isxdigit+0x30>
c0001cba:	66 90                	xchg   ax,ax
c0001cbc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cc1:	7e 11                	jle    c0001cd4 <isxdigit+0x38>
c0001cc3:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cc8:	7f 0a                	jg     c0001cd4 <isxdigit+0x38>
c0001cca:	66 90                	xchg   ax,ax
c0001ccc:	b8 01 00 00 00       	mov    eax,0x1
c0001cd1:	c3                   	ret    
c0001cd2:	66 90                	xchg   ax,ax
c0001cd4:	b8 00 00 00 00       	mov    eax,0x0
c0001cd9:	c3                   	ret    

c0001cda <disk_status>:
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	c3                   	ret    

c0001cdd <disk_initialize>:
c0001cdd:	31 c0                	xor    eax,eax
c0001cdf:	c3                   	ret    

c0001ce0 <disk_read>:
c0001ce0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ce5:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cf1:	e9 66 66 01 00       	jmp    c001835c <fatWrapperReadDisk>

c0001cf6 <disk_write>:
c0001cf6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfb:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d07:	e9 94 66 01 00       	jmp    c00183a0 <fatWrapperWriteDisk>

c0001d0c <disk_ioctl>:
c0001d0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d1a:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d26:	e9 b9 66 01 00       	jmp    c00183e4 <fatWrapperIoctl>

c0001d2b <ld_word>:
c0001d2b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d2f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d32:	c1 e2 08             	shl    edx,0x8
c0001d35:	09 d0                	or     eax,edx
c0001d37:	c3                   	ret    

c0001d38 <ld_dword>:
c0001d38:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d3c:	89 d1                	mov    ecx,edx
c0001d3e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d42:	c1 e1 08             	shl    ecx,0x8
c0001d45:	09 ca                	or     edx,ecx
c0001d47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d4a:	c1 e2 08             	shl    edx,0x8
c0001d4d:	09 d0                	or     eax,edx
c0001d4f:	c3                   	ret    

c0001d50 <st_word>:
c0001d50:	66 89 10             	mov    WORD PTR [eax],dx
c0001d53:	c3                   	ret    

c0001d54 <st_dword>:
c0001d54:	89 10                	mov    DWORD PTR [eax],edx
c0001d56:	c3                   	ret    

c0001d57 <mem_cpy>:
c0001d57:	85 c9                	test   ecx,ecx
c0001d59:	74 10                	je     c0001d6b <mem_cpy+0x14>
c0001d5b:	57                   	push   edi
c0001d5c:	01 c1                	add    ecx,eax
c0001d5e:	56                   	push   esi
c0001d5f:	89 c7                	mov    edi,eax
c0001d61:	89 d6                	mov    esi,edx
c0001d63:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d64:	39 f9                	cmp    ecx,edi
c0001d66:	75 fb                	jne    c0001d63 <mem_cpy+0xc>
c0001d68:	5e                   	pop    esi
c0001d69:	5f                   	pop    edi
c0001d6a:	c3                   	ret    
c0001d6b:	c3                   	ret    

c0001d6c <mem_set>:
c0001d6c:	01 c1                	add    ecx,eax
c0001d6e:	40                   	inc    eax
c0001d6f:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d72:	39 c8                	cmp    eax,ecx
c0001d74:	75 f8                	jne    c0001d6e <mem_set+0x2>
c0001d76:	c3                   	ret    

c0001d77 <mem_cmp>:
c0001d77:	57                   	push   edi
c0001d78:	56                   	push   esi
c0001d79:	89 c6                	mov    esi,eax
c0001d7b:	53                   	push   ebx
c0001d7c:	46                   	inc    esi
c0001d7d:	42                   	inc    edx
c0001d7e:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d82:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d86:	29 fb                	sub    ebx,edi
c0001d88:	89 cf                	mov    edi,ecx
c0001d8a:	29 f7                	sub    edi,esi
c0001d8c:	01 c7                	add    edi,eax
c0001d8e:	74 04                	je     c0001d94 <mem_cmp+0x1d>
c0001d90:	85 db                	test   ebx,ebx
c0001d92:	74 e8                	je     c0001d7c <mem_cmp+0x5>
c0001d94:	89 d8                	mov    eax,ebx
c0001d96:	5b                   	pop    ebx
c0001d97:	5e                   	pop    esi
c0001d98:	5f                   	pop    edi
c0001d99:	c3                   	ret    

c0001d9a <chk_chr>:
c0001d9a:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d9d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001da0:	74 07                	je     c0001da9 <chk_chr+0xf>
c0001da2:	39 d1                	cmp    ecx,edx
c0001da4:	74 03                	je     c0001da9 <chk_chr+0xf>
c0001da6:	40                   	inc    eax
c0001da7:	eb f1                	jmp    c0001d9a <chk_chr>
c0001da9:	89 c8                	mov    eax,ecx
c0001dab:	c3                   	ret    

c0001dac <dbc_1st>:
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <dbc_2nd>:
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	c3                   	ret    

c0001db2 <tchar2uni>:
c0001db2:	57                   	push   edi
c0001db3:	89 c7                	mov    edi,eax
c0001db5:	56                   	push   esi
c0001db6:	53                   	push   ebx
c0001db7:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001db9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dbb:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dbe:	84 c9                	test   cl,cl
c0001dc0:	78 0a                	js     c0001dcc <tchar2uni+0x1a>
c0001dc2:	0f b6 d1             	movzx  edx,cl
c0001dc5:	89 f3                	mov    ebx,esi
c0001dc7:	e9 9f 00 00 00       	jmp    c0001e6b <tchar2uni+0xb9>
c0001dcc:	88 ca                	mov    dl,cl
c0001dce:	83 e2 e0             	and    edx,0xffffffe0
c0001dd1:	80 fa c0             	cmp    dl,0xc0
c0001dd4:	75 0c                	jne    c0001de2 <tchar2uni+0x30>
c0001dd6:	89 ca                	mov    edx,ecx
c0001dd8:	b9 01 00 00 00       	mov    ecx,0x1
c0001ddd:	83 e2 1f             	and    edx,0x1f
c0001de0:	eb 2e                	jmp    c0001e10 <tchar2uni+0x5e>
c0001de2:	88 ca                	mov    dl,cl
c0001de4:	83 e2 f0             	and    edx,0xfffffff0
c0001de7:	80 fa e0             	cmp    dl,0xe0
c0001dea:	75 0c                	jne    c0001df8 <tchar2uni+0x46>
c0001dec:	89 ca                	mov    edx,ecx
c0001dee:	b9 02 00 00 00       	mov    ecx,0x2
c0001df3:	83 e2 0f             	and    edx,0xf
c0001df6:	eb 18                	jmp    c0001e10 <tchar2uni+0x5e>
c0001df8:	88 ca                	mov    dl,cl
c0001dfa:	83 e2 f8             	and    edx,0xfffffff8
c0001dfd:	88 d0                	mov    al,dl
c0001dff:	83 ca ff             	or     edx,0xffffffff
c0001e02:	3c f0                	cmp    al,0xf0
c0001e04:	75 6c                	jne    c0001e72 <tchar2uni+0xc0>
c0001e06:	89 ca                	mov    edx,ecx
c0001e08:	b9 03 00 00 00       	mov    ecx,0x3
c0001e0d:	83 e2 07             	and    edx,0x7
c0001e10:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e14:	46                   	inc    esi
c0001e15:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e18:	88 c8                	mov    al,cl
c0001e1a:	83 e0 c0             	and    eax,0xffffffc0
c0001e1d:	3c 80                	cmp    al,0x80
c0001e1f:	75 4e                	jne    c0001e6f <tchar2uni+0xbd>
c0001e21:	c1 e2 06             	shl    edx,0x6
c0001e24:	83 e1 3f             	and    ecx,0x3f
c0001e27:	09 ca                	or     edx,ecx
c0001e29:	39 de                	cmp    esi,ebx
c0001e2b:	75 e7                	jne    c0001e14 <tchar2uni+0x62>
c0001e2d:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e33:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e39:	76 34                	jbe    c0001e6f <tchar2uni+0xbd>
c0001e3b:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e3e:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e44:	77 29                	ja     c0001e6f <tchar2uni+0xbd>
c0001e46:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e4c:	76 1d                	jbe    c0001e6b <tchar2uni+0xb9>
c0001e4e:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e54:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e5a:	c1 e1 06             	shl    ecx,0x6
c0001e5d:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e63:	09 ca                	or     edx,ecx
c0001e65:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e6b:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e6d:	eb 03                	jmp    c0001e72 <tchar2uni+0xc0>
c0001e6f:	83 ca ff             	or     edx,0xffffffff
c0001e72:	5b                   	pop    ebx
c0001e73:	89 d0                	mov    eax,edx
c0001e75:	5e                   	pop    esi
c0001e76:	5f                   	pop    edi
c0001e77:	c3                   	ret    

c0001e78 <put_utf>:
c0001e78:	53                   	push   ebx
c0001e79:	83 f8 7f             	cmp    eax,0x7f
c0001e7c:	89 c3                	mov    ebx,eax
c0001e7e:	b0 00                	mov    al,0x0
c0001e80:	77 11                	ja     c0001e93 <put_utf+0x1b>
c0001e82:	85 c9                	test   ecx,ecx
c0001e84:	0f 84 e5 00 00 00    	je     c0001f6f <put_utf+0xf7>
c0001e8a:	88 1a                	mov    BYTE PTR [edx],bl
c0001e8c:	b0 01                	mov    al,0x1
c0001e8e:	e9 dc 00 00 00       	jmp    c0001f6f <put_utf+0xf7>
c0001e93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e99:	77 23                	ja     c0001ebe <put_utf+0x46>
c0001e9b:	83 f9 01             	cmp    ecx,0x1
c0001e9e:	0f 86 cb 00 00 00    	jbe    c0001f6f <put_utf+0xf7>
c0001ea4:	89 d8                	mov    eax,ebx
c0001ea6:	83 e3 3f             	and    ebx,0x3f
c0001ea9:	c1 e8 06             	shr    eax,0x6
c0001eac:	83 cb 80             	or     ebx,0xffffff80
c0001eaf:	83 c8 c0             	or     eax,0xffffffc0
c0001eb2:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001eb5:	88 02                	mov    BYTE PTR [edx],al
c0001eb7:	b0 02                	mov    al,0x2
c0001eb9:	e9 b1 00 00 00       	jmp    c0001f6f <put_utf+0xf7>
c0001ebe:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ec4:	77 40                	ja     c0001f06 <put_utf+0x8e>
c0001ec6:	83 f9 02             	cmp    ecx,0x2
c0001ec9:	0f 86 a0 00 00 00    	jbe    c0001f6f <put_utf+0xf7>
c0001ecf:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ed5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001edb:	0f 86 8e 00 00 00    	jbe    c0001f6f <put_utf+0xf7>
c0001ee1:	89 d8                	mov    eax,ebx
c0001ee3:	c1 e8 0c             	shr    eax,0xc
c0001ee6:	83 c8 e0             	or     eax,0xffffffe0
c0001ee9:	88 02                	mov    BYTE PTR [edx],al
c0001eeb:	89 d8                	mov    eax,ebx
c0001eed:	c1 e8 06             	shr    eax,0x6
c0001ef0:	83 e3 3f             	and    ebx,0x3f
c0001ef3:	83 e0 3f             	and    eax,0x3f
c0001ef6:	83 cb 80             	or     ebx,0xffffff80
c0001ef9:	83 c8 80             	or     eax,0xffffff80
c0001efc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001eff:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f02:	b0 03                	mov    al,0x3
c0001f04:	eb 69                	jmp    c0001f6f <put_utf+0xf7>
c0001f06:	83 f9 03             	cmp    ecx,0x3
c0001f09:	76 64                	jbe    c0001f6f <put_utf+0xf7>
c0001f0b:	89 d9                	mov    ecx,ebx
c0001f0d:	66 31 c9             	xor    cx,cx
c0001f10:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f16:	0f b7 c3             	movzx  eax,bx
c0001f19:	c1 e9 06             	shr    ecx,0x6
c0001f1c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f22:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f28:	77 43                	ja     c0001f6d <put_utf+0xf5>
c0001f2a:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f30:	77 3b                	ja     c0001f6d <put_utf+0xf5>
c0001f32:	09 cb                	or     ebx,ecx
c0001f34:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f3a:	89 d8                	mov    eax,ebx
c0001f3c:	c1 e8 12             	shr    eax,0x12
c0001f3f:	83 c8 f0             	or     eax,0xfffffff0
c0001f42:	88 02                	mov    BYTE PTR [edx],al
c0001f44:	89 d8                	mov    eax,ebx
c0001f46:	c1 e8 0c             	shr    eax,0xc
c0001f49:	83 e0 3f             	and    eax,0x3f
c0001f4c:	83 c8 80             	or     eax,0xffffff80
c0001f4f:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f52:	89 d8                	mov    eax,ebx
c0001f54:	c1 e8 06             	shr    eax,0x6
c0001f57:	83 e3 3f             	and    ebx,0x3f
c0001f5a:	83 e0 3f             	and    eax,0x3f
c0001f5d:	83 cb 80             	or     ebx,0xffffff80
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f66:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f69:	b0 04                	mov    al,0x4
c0001f6b:	eb 02                	jmp    c0001f6f <put_utf+0xf7>
c0001f6d:	31 c0                	xor    eax,eax
c0001f6f:	5b                   	pop    ebx
c0001f70:	c3                   	ret    

c0001f71 <clst2sect>:
c0001f71:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f77:	83 ea 02             	sub    edx,0x2
c0001f7a:	39 ca                	cmp    edx,ecx
c0001f7c:	76 0d                	jbe    c0001f8b <clst2sect+0x1a>
c0001f7e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f82:	0f af d1             	imul   edx,ecx
c0001f85:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f88:	89 d0                	mov    eax,edx
c0001f8a:	c3                   	ret    
c0001f8b:	31 c0                	xor    eax,eax
c0001f8d:	c3                   	ret    

c0001f8e <pick_lfn>:
c0001f8e:	55                   	push   ebp
c0001f8f:	57                   	push   edi
c0001f90:	56                   	push   esi
c0001f91:	89 d6                	mov    esi,edx
c0001f93:	53                   	push   ebx
c0001f94:	89 c3                	mov    ebx,eax
c0001f96:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f99:	e8 8d fd ff ff       	call   c0001d2b <ld_word>
c0001f9e:	66 85 c0             	test   ax,ax
c0001fa1:	74 04                	je     c0001fa7 <pick_lfn+0x19>
c0001fa3:	31 c0                	xor    eax,eax
c0001fa5:	eb 5c                	jmp    c0002003 <pick_lfn+0x75>
c0001fa7:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001faa:	83 e1 bf             	and    ecx,0xffffffbf
c0001fad:	bd 01 00 00 00       	mov    ebp,0x1
c0001fb2:	49                   	dec    ecx
c0001fb3:	31 ff                	xor    edi,edi
c0001fb5:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fb8:	0f b6 87 20 ee 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe11e0]
c0001fbf:	01 f0                	add    eax,esi
c0001fc1:	e8 65 fd ff ff       	call   c0001d2b <ld_word>
c0001fc6:	66 85 ed             	test   bp,bp
c0001fc9:	74 11                	je     c0001fdc <pick_lfn+0x4e>
c0001fcb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd1:	77 d0                	ja     c0001fa3 <pick_lfn+0x15>
c0001fd3:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fd7:	89 c5                	mov    ebp,eax
c0001fd9:	41                   	inc    ecx
c0001fda:	eb 04                	jmp    c0001fe0 <pick_lfn+0x52>
c0001fdc:	66 40                	inc    ax
c0001fde:	75 c3                	jne    c0001fa3 <pick_lfn+0x15>
c0001fe0:	47                   	inc    edi
c0001fe1:	83 ff 0d             	cmp    edi,0xd
c0001fe4:	75 d2                	jne    c0001fb8 <pick_lfn+0x2a>
c0001fe6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fe9:	74 13                	je     c0001ffe <pick_lfn+0x70>
c0001feb:	66 85 ed             	test   bp,bp
c0001fee:	74 0e                	je     c0001ffe <pick_lfn+0x70>
c0001ff0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff6:	77 ab                	ja     c0001fa3 <pick_lfn+0x15>
c0001ff8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ffe:	b8 01 00 00 00       	mov    eax,0x1
c0002003:	5b                   	pop    ebx
c0002004:	5e                   	pop    esi
c0002005:	5f                   	pop    edi
c0002006:	5d                   	pop    ebp
c0002007:	c3                   	ret    

c0002008 <put_lfn>:
c0002008:	55                   	push   ebp
c0002009:	31 ed                	xor    ebp,ebp
c000200b:	57                   	push   edi
c000200c:	89 d7                	mov    edi,edx
c000200e:	56                   	push   esi
c000200f:	31 f6                	xor    esi,esi
c0002011:	53                   	push   ebx
c0002012:	83 ec 08             	sub    esp,0x8
c0002015:	89 04 24             	mov    DWORD PTR [esp],eax
c0002018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000201c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002025:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002028:	31 d2                	xor    edx,edx
c000202a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000202e:	e8 1d fd ff ff       	call   c0001d50 <st_word>
c0002033:	0f b6 d9             	movzx  ebx,cl
c0002036:	4b                   	dec    ebx
c0002037:	6b db 0d             	imul   ebx,ebx,0xd
c000203a:	66 83 fe ff          	cmp    si,0xffff
c000203e:	74 08                	je     c0002048 <put_lfn+0x40>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002047:	43                   	inc    ebx
c0002048:	0f b6 85 20 ee 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe11e0]
c000204f:	0f b7 d6             	movzx  edx,si
c0002052:	01 f8                	add    eax,edi
c0002054:	e8 f7 fc ff ff       	call   c0001d50 <st_word>
c0002059:	66 85 f6             	test   si,si
c000205c:	75 03                	jne    c0002061 <put_lfn+0x59>
c000205e:	83 ce ff             	or     esi,0xffffffff
c0002061:	45                   	inc    ebp
c0002062:	83 fd 0d             	cmp    ebp,0xd
c0002065:	75 d3                	jne    c000203a <put_lfn+0x32>
c0002067:	66 46                	inc    si
c0002069:	74 0a                	je     c0002075 <put_lfn+0x6d>
c000206b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000206e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002073:	75 09                	jne    c000207e <put_lfn+0x76>
c0002075:	88 c8                	mov    al,cl
c0002077:	83 c8 40             	or     eax,0x40
c000207a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000207e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002082:	88 07                	mov    BYTE PTR [edi],al
c0002084:	83 c4 08             	add    esp,0x8
c0002087:	5b                   	pop    ebx
c0002088:	5e                   	pop    esi
c0002089:	5f                   	pop    edi
c000208a:	5d                   	pop    ebp
c000208b:	c3                   	ret    

c000208c <gen_numname>:
c000208c:	57                   	push   edi
c000208d:	89 cf                	mov    edi,ecx
c000208f:	56                   	push   esi
c0002090:	b9 0b 00 00 00       	mov    ecx,0xb
c0002095:	53                   	push   ebx
c0002096:	89 c6                	mov    esi,eax
c0002098:	83 ec 10             	sub    esp,0x10
c000209b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000209f:	e8 b3 fc ff ff       	call   c0001d57 <mem_cpy>
c00020a4:	83 fb 05             	cmp    ebx,0x5
c00020a7:	76 2d                	jbe    c00020d6 <gen_numname+0x4a>
c00020a9:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020ac:	66 85 c0             	test   ax,ax
c00020af:	74 25                	je     c00020d6 <gen_numname+0x4a>
c00020b1:	83 c7 02             	add    edi,0x2
c00020b4:	ba 10 00 00 00       	mov    edx,0x10
c00020b9:	89 c1                	mov    ecx,eax
c00020bb:	01 db                	add    ebx,ebx
c00020bd:	66 d1 e8             	shr    ax,1
c00020c0:	83 e1 01             	and    ecx,0x1
c00020c3:	01 cb                	add    ebx,ecx
c00020c5:	0f ba e3 10          	bt     ebx,0x10
c00020c9:	73 06                	jae    c00020d1 <gen_numname+0x45>
c00020cb:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020d1:	4a                   	dec    edx
c00020d2:	75 e5                	jne    c00020b9 <gen_numname+0x2d>
c00020d4:	eb d3                	jmp    c00020a9 <gen_numname+0x1d>
c00020d6:	b8 07 00 00 00       	mov    eax,0x7
c00020db:	88 d9                	mov    cl,bl
c00020dd:	83 e1 0f             	and    ecx,0xf
c00020e0:	8d 51 30             	lea    edx,[ecx+0x30]
c00020e3:	80 fa 39             	cmp    dl,0x39
c00020e6:	76 03                	jbe    c00020eb <gen_numname+0x5f>
c00020e8:	8d 51 37             	lea    edx,[ecx+0x37]
c00020eb:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020ee:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020f2:	89 da                	mov    edx,ebx
c00020f4:	c1 ea 04             	shr    edx,0x4
c00020f7:	83 fb 0f             	cmp    ebx,0xf
c00020fa:	76 06                	jbe    c0002102 <gen_numname+0x76>
c00020fc:	89 c8                	mov    eax,ecx
c00020fe:	89 d3                	mov    ebx,edx
c0002100:	eb d9                	jmp    c00020db <gen_numname+0x4f>
c0002102:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002107:	31 d2                	xor    edx,edx
c0002109:	8d 58 fe             	lea    ebx,[eax-0x2]
c000210c:	8d 04 16             	lea    eax,[esi+edx*1]
c000210f:	39 ca                	cmp    edx,ecx
c0002111:	73 18                	jae    c000212b <gen_numname+0x9f>
c0002113:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002116:	3c 20                	cmp    al,0x20
c0002118:	74 11                	je     c000212b <gen_numname+0x9f>
c000211a:	e8 8d fc ff ff       	call   c0001dac <dbc_1st>
c000211f:	85 c0                	test   eax,eax
c0002121:	74 05                	je     c0002128 <gen_numname+0x9c>
c0002123:	39 d3                	cmp    ebx,edx
c0002125:	74 04                	je     c000212b <gen_numname+0x9f>
c0002127:	42                   	inc    edx
c0002128:	42                   	inc    edx
c0002129:	eb e1                	jmp    c000210c <gen_numname+0x80>
c000212b:	b0 20                	mov    al,0x20
c000212d:	83 f9 07             	cmp    ecx,0x7
c0002130:	77 05                	ja     c0002137 <gen_numname+0xab>
c0002132:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002136:	41                   	inc    ecx
c0002137:	42                   	inc    edx
c0002138:	83 fa 07             	cmp    edx,0x7
c000213b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000213f:	76 ea                	jbe    c000212b <gen_numname+0x9f>
c0002141:	83 c4 10             	add    esp,0x10
c0002144:	5b                   	pop    ebx
c0002145:	5e                   	pop    esi
c0002146:	5f                   	pop    edi
c0002147:	c3                   	ret    

c0002148 <sum_sfn>:
c0002148:	31 c9                	xor    ecx,ecx
c000214a:	31 d2                	xor    edx,edx
c000214c:	d0 ca                	ror    dl,1
c000214e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002151:	41                   	inc    ecx
c0002152:	83 f9 0b             	cmp    ecx,0xb
c0002155:	75 f5                	jne    c000214c <sum_sfn+0x4>
c0002157:	88 d0                	mov    al,dl
c0002159:	c3                   	ret    

c000215a <get_ldnumber>:
c000215a:	57                   	push   edi
c000215b:	56                   	push   esi
c000215c:	53                   	push   ebx
c000215d:	83 cb ff             	or     ebx,0xffffffff
c0002160:	8b 10                	mov    edx,DWORD PTR [eax]
c0002162:	85 d2                	test   edx,edx
c0002164:	74 34                	je     c000219a <get_ldnumber+0x40>
c0002166:	89 c7                	mov    edi,eax
c0002168:	89 d1                	mov    ecx,edx
c000216a:	41                   	inc    ecx
c000216b:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000216e:	3c 1f                	cmp    al,0x1f
c0002170:	76 04                	jbe    c0002176 <get_ldnumber+0x1c>
c0002172:	3c 3a                	cmp    al,0x3a
c0002174:	75 f4                	jne    c000216a <get_ldnumber+0x10>
c0002176:	31 db                	xor    ebx,ebx
c0002178:	3c 3a                	cmp    al,0x3a
c000217a:	75 1e                	jne    c000219a <get_ldnumber+0x40>
c000217c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000217f:	83 cb ff             	or     ebx,0xffffffff
c0002182:	8d 46 d0             	lea    eax,[esi-0x30]
c0002185:	3c 09                	cmp    al,0x9
c0002187:	77 11                	ja     c000219a <get_ldnumber+0x40>
c0002189:	83 c2 02             	add    edx,0x2
c000218c:	39 d1                	cmp    ecx,edx
c000218e:	75 0a                	jne    c000219a <get_ldnumber+0x40>
c0002190:	89 f0                	mov    eax,esi
c0002192:	89 0f                	mov    DWORD PTR [edi],ecx
c0002194:	0f be d8             	movsx  ebx,al
c0002197:	83 eb 30             	sub    ebx,0x30
c000219a:	89 d8                	mov    eax,ebx
c000219c:	5b                   	pop    ebx
c000219d:	5e                   	pop    esi
c000219e:	5f                   	pop    edi
c000219f:	c3                   	ret    

c00021a0 <validate>:
c00021a0:	56                   	push   esi
c00021a1:	89 d6                	mov    esi,edx
c00021a3:	53                   	push   ebx
c00021a4:	85 c0                	test   eax,eax
c00021a6:	51                   	push   ecx
c00021a7:	75 09                	jne    c00021b2 <validate+0x12>
c00021a9:	b8 09 00 00 00       	mov    eax,0x9
c00021ae:	31 c9                	xor    ecx,ecx
c00021b0:	eb 2f                	jmp    c00021e1 <validate+0x41>
c00021b2:	89 c3                	mov    ebx,eax
c00021b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b6:	85 c0                	test   eax,eax
c00021b8:	74 ef                	je     c00021a9 <validate+0x9>
c00021ba:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021bd:	74 ea                	je     c00021a9 <validate+0x9>
c00021bf:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021c3:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c7:	75 e0                	jne    c00021a9 <validate+0x9>
c00021c9:	83 ec 0c             	sub    esp,0xc
c00021cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021d0:	50                   	push   eax
c00021d1:	e8 04 fb ff ff       	call   c0001cda <disk_status>
c00021d6:	83 c4 10             	add    esp,0x10
c00021d9:	a8 01                	test   al,0x1
c00021db:	75 cc                	jne    c00021a9 <validate+0x9>
c00021dd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021df:	31 c0                	xor    eax,eax
c00021e1:	89 0e                	mov    DWORD PTR [esi],ecx
c00021e3:	5a                   	pop    edx
c00021e4:	5b                   	pop    ebx
c00021e5:	5e                   	pop    esi
c00021e6:	c3                   	ret    

c00021e7 <sync_window>:
c00021e7:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021eb:	74 58                	je     c0002245 <sync_window+0x5e>
c00021ed:	56                   	push   esi
c00021ee:	8d 70 34             	lea    esi,[eax+0x34]
c00021f1:	53                   	push   ebx
c00021f2:	89 c3                	mov    ebx,eax
c00021f4:	51                   	push   ecx
c00021f5:	6a 01                	push   0x1
c00021f7:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021fa:	56                   	push   esi
c00021fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ff:	50                   	push   eax
c0002200:	e8 f1 fa ff ff       	call   c0001cf6 <disk_write>
c0002205:	83 c4 10             	add    esp,0x10
c0002208:	ba 01 00 00 00       	mov    edx,0x1
c000220d:	85 c0                	test   eax,eax
c000220f:	75 2e                	jne    c000223f <sync_window+0x58>
c0002211:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002214:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002217:	89 c1                	mov    ecx,eax
c0002219:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000221d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002220:	39 d1                	cmp    ecx,edx
c0002222:	73 19                	jae    c000223d <sync_window+0x56>
c0002224:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002228:	75 13                	jne    c000223d <sync_window+0x56>
c000222a:	6a 01                	push   0x1
c000222c:	01 d0                	add    eax,edx
c000222e:	50                   	push   eax
c000222f:	56                   	push   esi
c0002230:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002234:	50                   	push   eax
c0002235:	e8 bc fa ff ff       	call   c0001cf6 <disk_write>
c000223a:	83 c4 10             	add    esp,0x10
c000223d:	31 d2                	xor    edx,edx
c000223f:	89 d0                	mov    eax,edx
c0002241:	5a                   	pop    edx
c0002242:	5b                   	pop    ebx
c0002243:	5e                   	pop    esi
c0002244:	c3                   	ret    
c0002245:	31 d2                	xor    edx,edx
c0002247:	89 d0                	mov    eax,edx
c0002249:	c3                   	ret    

c000224a <move_window>:
c000224a:	57                   	push   edi
c000224b:	56                   	push   esi
c000224c:	31 f6                	xor    esi,esi
c000224e:	53                   	push   ebx
c000224f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002252:	74 32                	je     c0002286 <move_window+0x3c>
c0002254:	89 c3                	mov    ebx,eax
c0002256:	89 d7                	mov    edi,edx
c0002258:	e8 8a ff ff ff       	call   c00021e7 <sync_window>
c000225d:	89 c6                	mov    esi,eax
c000225f:	85 c0                	test   eax,eax
c0002261:	75 23                	jne    c0002286 <move_window+0x3c>
c0002263:	6a 01                	push   0x1
c0002265:	8d 43 34             	lea    eax,[ebx+0x34]
c0002268:	57                   	push   edi
c0002269:	50                   	push   eax
c000226a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226e:	50                   	push   eax
c000226f:	e8 6c fa ff ff       	call   c0001ce0 <disk_read>
c0002274:	83 c4 10             	add    esp,0x10
c0002277:	85 c0                	test   eax,eax
c0002279:	74 08                	je     c0002283 <move_window+0x39>
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	83 cf ff             	or     edi,0xffffffff
c0002283:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002286:	5b                   	pop    ebx
c0002287:	89 f0                	mov    eax,esi
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	c3                   	ret    

c000228c <check_fs>:
c000228c:	53                   	push   ebx
c000228d:	89 c3                	mov    ebx,eax
c000228f:	83 ec 08             	sub    esp,0x8
c0002292:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002296:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000229d:	e8 a8 ff ff ff       	call   c000224a <move_window>
c00022a2:	ba 04 00 00 00       	mov    edx,0x4
c00022a7:	85 c0                	test   eax,eax
c00022a9:	75 68                	jne    c0002313 <check_fs+0x87>
c00022ab:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022b1:	e8 75 fa ff ff       	call   c0001d2b <ld_word>
c00022b6:	ba 03 00 00 00       	mov    edx,0x3
c00022bb:	66 3d 55 aa          	cmp    ax,0xaa55
c00022bf:	75 52                	jne    c0002313 <check_fs+0x87>
c00022c1:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022c4:	8d 50 18             	lea    edx,[eax+0x18]
c00022c7:	80 fa 01             	cmp    dl,0x1
c00022ca:	76 09                	jbe    c00022d5 <check_fs+0x49>
c00022cc:	ba 02 00 00 00       	mov    edx,0x2
c00022d1:	3c eb                	cmp    al,0xeb
c00022d3:	75 3e                	jne    c0002313 <check_fs+0x87>
c00022d5:	ba 24 0f 02 c0       	mov    edx,0xc0020f24
c00022da:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 90 fa ff ff       	call   c0001d77 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 26                	je     c0002313 <check_fs+0x87>
c00022ed:	ba dc ec 01 c0       	mov    edx,0xc001ecdc
c00022f2:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 75 fa ff ff       	call   c0001d77 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0b                	je     c0002313 <check_fs+0x87>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000230e:	0f 95 c2             	setne  dl
c0002311:	01 d2                	add    edx,edx
c0002313:	83 c4 08             	add    esp,0x8
c0002316:	89 d0                	mov    eax,edx
c0002318:	5b                   	pop    ebx
c0002319:	c3                   	ret    

c000231a <find_volume>:
c000231a:	55                   	push   ebp
c000231b:	57                   	push   edi
c000231c:	89 c7                	mov    edi,eax
c000231e:	56                   	push   esi
c000231f:	89 d6                	mov    esi,edx
c0002321:	53                   	push   ebx
c0002322:	31 d2                	xor    edx,edx
c0002324:	83 ec 2c             	sub    esp,0x2c
c0002327:	e8 60 ff ff ff       	call   c000228c <check_fs>
c000232c:	85 f6                	test   esi,esi
c000232e:	0f 94 c3             	sete   bl
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 06                	je     c000233c <find_volume+0x22>
c0002336:	77 5f                	ja     c0002397 <find_volume+0x7d>
c0002338:	84 db                	test   bl,bl
c000233a:	75 5b                	jne    c0002397 <find_volume+0x7d>
c000233c:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c0002342:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c0002348:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000234c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002350:	89 e8                	mov    eax,ebp
c0002352:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002356:	e8 dd f9 ff ff       	call   c0001d38 <ld_dword>
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	83 c5 10             	add    ebp,0x10
c0002362:	83 c1 04             	add    ecx,0x4
c0002365:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002368:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000236c:	75 e2                	jne    c0002350 <find_volume+0x36>
c000236e:	83 fe 01             	cmp    esi,0x1
c0002371:	83 d6 ff             	adc    esi,0xffffffff
c0002374:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002378:	b8 03 00 00 00       	mov    eax,0x3
c000237d:	85 d2                	test   edx,edx
c000237f:	74 07                	je     c0002388 <find_volume+0x6e>
c0002381:	89 f8                	mov    eax,edi
c0002383:	e8 04 ff ff ff       	call   c000228c <check_fs>
c0002388:	83 f8 01             	cmp    eax,0x1
c000238b:	76 0a                	jbe    c0002397 <find_volume+0x7d>
c000238d:	84 db                	test   bl,bl
c000238f:	74 06                	je     c0002397 <find_volume+0x7d>
c0002391:	46                   	inc    esi
c0002392:	83 fe 03             	cmp    esi,0x3
c0002395:	76 dd                	jbe    c0002374 <find_volume+0x5a>
c0002397:	83 c4 2c             	add    esp,0x2c
c000239a:	5b                   	pop    ebx
c000239b:	5e                   	pop    esi
c000239c:	5f                   	pop    edi
c000239d:	5d                   	pop    ebp
c000239e:	c3                   	ret    

c000239f <mount_volume>:
c000239f:	55                   	push   ebp
c00023a0:	89 d5                	mov    ebp,edx
c00023a2:	57                   	push   edi
c00023a3:	89 cf                	mov    edi,ecx
c00023a5:	56                   	push   esi
c00023a6:	53                   	push   ebx
c00023a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00023ac:	83 ec 2c             	sub    esp,0x2c
c00023af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023b5:	e8 a0 fd ff ff       	call   c000215a <get_ldnumber>
c00023ba:	85 c0                	test   eax,eax
c00023bc:	0f 88 d6 02 00 00    	js     c0002698 <mount_volume+0x2f9>
c00023c2:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023c9:	89 c2                	mov    edx,eax
c00023cb:	bb 0c 00 00 00       	mov    ebx,0xc
c00023d0:	85 f6                	test   esi,esi
c00023d2:	0f 84 c0 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c00023d8:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023db:	83 e7 fe             	and    edi,0xfffffffe
c00023de:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023e1:	74 3a                	je     c000241d <mount_volume+0x7e>
c00023e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e7:	83 ec 0c             	sub    esp,0xc
c00023ea:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023ee:	50                   	push   eax
c00023ef:	e8 e6 f8 ff ff       	call   c0001cda <disk_status>
c00023f4:	83 c4 10             	add    esp,0x10
c00023f7:	a8 01                	test   al,0x1
c00023f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023fd:	75 1e                	jne    c000241d <mount_volume+0x7e>
c00023ff:	89 f9                	mov    ecx,edi
c0002401:	31 db                	xor    ebx,ebx
c0002403:	84 c9                	test   cl,cl
c0002405:	0f 84 8d 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c000240b:	a8 04                	test   al,0x4
c000240d:	0f 84 85 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c0002413:	bb 0a 00 00 00       	mov    ebx,0xa
c0002418:	e9 7b 02 00 00       	jmp    c0002698 <mount_volume+0x2f9>
c000241d:	83 ec 0c             	sub    esp,0xc
c0002420:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002423:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002426:	bb 03 00 00 00       	mov    ebx,0x3
c000242b:	0f b6 c2             	movzx  eax,dl
c000242e:	50                   	push   eax
c000242f:	e8 a9 f8 ff ff       	call   c0001cdd <disk_initialize>
c0002434:	83 c4 10             	add    esp,0x10
c0002437:	a8 01                	test   al,0x1
c0002439:	0f 85 59 02 00 00    	jne    c0002698 <mount_volume+0x2f9>
c000243f:	89 f9                	mov    ecx,edi
c0002441:	84 c9                	test   cl,cl
c0002443:	74 04                	je     c0002449 <mount_volume+0xaa>
c0002445:	a8 04                	test   al,0x4
c0002447:	75 ca                	jne    c0002413 <mount_volume+0x74>
c0002449:	31 d2                	xor    edx,edx
c000244b:	89 f0                	mov    eax,esi
c000244d:	e8 c8 fe ff ff       	call   c000231a <find_volume>
c0002452:	bb 01 00 00 00       	mov    ebx,0x1
c0002457:	83 f8 04             	cmp    eax,0x4
c000245a:	0f 84 38 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c0002460:	83 f8 01             	cmp    eax,0x1
c0002463:	76 0a                	jbe    c000246f <mount_volume+0xd0>
c0002465:	bb 0d 00 00 00       	mov    ebx,0xd
c000246a:	e9 29 02 00 00       	jmp    c0002698 <mount_volume+0x2f9>
c000246f:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002472:	e8 b4 f8 ff ff       	call   c0001d2b <ld_word>
c0002477:	66 3d 00 02          	cmp    ax,0x200
c000247b:	75 e8                	jne    c0002465 <mount_volume+0xc6>
c000247d:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002480:	e8 a6 f8 ff ff       	call   c0001d2b <ld_word>
c0002485:	0f b7 c0             	movzx  eax,ax
c0002488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000248c:	85 c0                	test   eax,eax
c000248e:	75 0c                	jne    c000249c <mount_volume+0xfd>
c0002490:	8d 46 58             	lea    eax,[esi+0x58]
c0002493:	e8 a0 f8 ff ff       	call   c0001d38 <ld_dword>
c0002498:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000249c:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000249f:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024aa:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024ad:	89 e8                	mov    eax,ebp
c00024af:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024b2:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024b5:	3c 01                	cmp    al,0x1
c00024b7:	77 ac                	ja     c0002465 <mount_volume+0xc6>
c00024b9:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024bd:	89 c3                	mov    ebx,eax
c00024bf:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024c3:	66 85 c0             	test   ax,ax
c00024c6:	74 9d                	je     c0002465 <mount_volume+0xc6>
c00024c8:	8d 40 ff             	lea    eax,[eax-0x1]
c00024cb:	85 d8                	test   eax,ebx
c00024cd:	75 96                	jne    c0002465 <mount_volume+0xc6>
c00024cf:	8d 46 45             	lea    eax,[esi+0x45]
c00024d2:	e8 54 f8 ff ff       	call   c0001d2b <ld_word>
c00024d7:	89 c7                	mov    edi,eax
c00024d9:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024dd:	a8 0f                	test   al,0xf
c00024df:	75 84                	jne    c0002465 <mount_volume+0xc6>
c00024e1:	8d 46 47             	lea    eax,[esi+0x47]
c00024e4:	e8 42 f8 ff ff       	call   c0001d2b <ld_word>
c00024e9:	0f b7 d0             	movzx  edx,ax
c00024ec:	85 d2                	test   edx,edx
c00024ee:	75 0a                	jne    c00024fa <mount_volume+0x15b>
c00024f0:	8d 46 54             	lea    eax,[esi+0x54]
c00024f3:	e8 40 f8 ff ff       	call   c0001d38 <ld_dword>
c00024f8:	89 c2                	mov    edx,eax
c00024fa:	8d 46 42             	lea    eax,[esi+0x42]
c00024fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002501:	e8 25 f8 ff ff       	call   c0001d2b <ld_word>
c0002506:	66 85 c0             	test   ax,ax
c0002509:	0f 84 56 ff ff ff    	je     c0002465 <mount_volume+0xc6>
c000250f:	89 e9                	mov    ecx,ebp
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b6 e9             	movzx  ebp,cl
c0002518:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000251c:	0f af cd             	imul   ecx,ebp
c000251f:	0f b7 c0             	movzx  eax,ax
c0002522:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002526:	89 f8                	mov    eax,edi
c0002528:	66 c1 e8 04          	shr    ax,0x4
c000252c:	0f b7 c0             	movzx  eax,ax
c000252f:	01 c8                	add    eax,ecx
c0002531:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002535:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002539:	39 c2                	cmp    edx,eax
c000253b:	0f 82 24 ff ff ff    	jb     c0002465 <mount_volume+0xc6>
c0002541:	29 c2                	sub    edx,eax
c0002543:	89 d5                	mov    ebp,edx
c0002545:	89 d0                	mov    eax,edx
c0002547:	31 d2                	xor    edx,edx
c0002549:	f7 f3                	div    ebx
c000254b:	39 dd                	cmp    ebp,ebx
c000254d:	0f 82 12 ff ff ff    	jb     c0002465 <mount_volume+0xc6>
c0002553:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002558:	0f 87 07 ff ff ff    	ja     c0002465 <mount_volume+0xc6>
c000255e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002563:	0f 86 1f 01 00 00    	jbe    c0002688 <mount_volume+0x2e9>
c0002569:	bb 03 00 00 00       	mov    ebx,0x3
c000256e:	8d 68 02             	lea    ebp,[eax+0x2]
c0002571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002575:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002584:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002588:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000258b:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258e:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002591:	83 fb 03             	cmp    ebx,0x3
c0002594:	75 21                	jne    c00025b7 <mount_volume+0x218>
c0002596:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002599:	e8 8d f7 ff ff       	call   c0001d2b <ld_word>
c000259e:	66 09 c7             	or     di,ax
c00025a1:	0f 85 be fe ff ff    	jne    c0002465 <mount_volume+0xc6>
c00025a7:	c1 e5 02             	shl    ebp,0x2
c00025aa:	8d 46 60             	lea    eax,[esi+0x60]
c00025ad:	e8 86 f7 ff ff       	call   c0001d38 <ld_dword>
c00025b2:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b5:	eb 22                	jmp    c00025d9 <mount_volume+0x23a>
c00025b7:	66 85 ff             	test   di,di
c00025ba:	0f 84 a5 fe ff ff    	je     c0002465 <mount_volume+0xc6>
c00025c0:	01 c8                	add    eax,ecx
c00025c2:	83 fb 02             	cmp    ebx,0x2
c00025c5:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c8:	75 04                	jne    c00025ce <mount_volume+0x22f>
c00025ca:	01 ed                	add    ebp,ebp
c00025cc:	eb 0b                	jmp    c00025d9 <mount_volume+0x23a>
c00025ce:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025d2:	83 e5 01             	and    ebp,0x1
c00025d5:	d1 e8                	shr    eax,1
c00025d7:	01 c5                	add    ebp,eax
c00025d9:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025df:	c1 ed 09             	shr    ebp,0x9
c00025e2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025e6:	0f 87 79 fe ff ff    	ja     c0002465 <mount_volume+0xc6>
c00025ec:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025f3:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025fa:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025fe:	83 fb 03             	cmp    ebx,0x3
c0002601:	75 6e                	jne    c0002671 <mount_volume+0x2d2>
c0002603:	8d 46 64             	lea    eax,[esi+0x64]
c0002606:	e8 20 f7 ff ff       	call   c0001d2b <ld_word>
c000260b:	66 48                	dec    ax
c000260d:	75 62                	jne    c0002671 <mount_volume+0x2d2>
c000260f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002613:	89 f0                	mov    eax,esi
c0002615:	42                   	inc    edx
c0002616:	e8 2f fc ff ff       	call   c000224a <move_window>
c000261b:	85 c0                	test   eax,eax
c000261d:	75 52                	jne    c0002671 <mount_volume+0x2d2>
c000261f:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002623:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002629:	e8 fd f6 ff ff       	call   c0001d2b <ld_word>
c000262e:	66 3d 55 aa          	cmp    ax,0xaa55
c0002632:	75 3d                	jne    c0002671 <mount_volume+0x2d2>
c0002634:	8d 46 34             	lea    eax,[esi+0x34]
c0002637:	e8 fc f6 ff ff       	call   c0001d38 <ld_dword>
c000263c:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002641:	75 2e                	jne    c0002671 <mount_volume+0x2d2>
c0002643:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002649:	e8 ea f6 ff ff       	call   c0001d38 <ld_dword>
c000264e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002653:	75 1c                	jne    c0002671 <mount_volume+0x2d2>
c0002655:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000265b:	e8 d8 f6 ff ff       	call   c0001d38 <ld_dword>
c0002660:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002663:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002669:	e8 ca f6 ff ff       	call   c0001d38 <ld_dword>
c000266e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002671:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002677:	88 1e                	mov    BYTE PTR [esi],bl
c0002679:	40                   	inc    eax
c000267a:	31 db                	xor    ebx,ebx
c000267c:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c0002682:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002686:	eb 10                	jmp    c0002698 <mount_volume+0x2f9>
c0002688:	31 db                	xor    ebx,ebx
c000268a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000268f:	0f 97 c3             	seta   bl
c0002692:	43                   	inc    ebx
c0002693:	e9 d6 fe ff ff       	jmp    c000256e <mount_volume+0x1cf>
c0002698:	83 c4 2c             	add    esp,0x2c
c000269b:	89 d8                	mov    eax,ebx
c000269d:	5b                   	pop    ebx
c000269e:	5e                   	pop    esi
c000269f:	5f                   	pop    edi
c00026a0:	5d                   	pop    ebp
c00026a1:	c3                   	ret    

c00026a2 <put_fat>:
c00026a2:	55                   	push   ebp
c00026a3:	bd 02 00 00 00       	mov    ebp,0x2
c00026a8:	57                   	push   edi
c00026a9:	56                   	push   esi
c00026aa:	53                   	push   ebx
c00026ab:	83 ec 1c             	sub    esp,0x1c
c00026ae:	83 fa 01             	cmp    edx,0x1
c00026b1:	0f 86 31 01 00 00    	jbe    c00027e8 <put_fat+0x146>
c00026b7:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026ba:	0f 86 28 01 00 00    	jbe    c00027e8 <put_fat+0x146>
c00026c0:	89 c6                	mov    esi,eax
c00026c2:	8a 00                	mov    al,BYTE PTR [eax]
c00026c4:	89 cf                	mov    edi,ecx
c00026c6:	89 d3                	mov    ebx,edx
c00026c8:	3c 02                	cmp    al,0x2
c00026ca:	0f 84 ac 00 00 00    	je     c000277c <put_fat+0xda>
c00026d0:	3c 03                	cmp    al,0x3
c00026d2:	0f 84 d1 00 00 00    	je     c00027a9 <put_fat+0x107>
c00026d8:	fe c8                	dec    al
c00026da:	0f 85 08 01 00 00    	jne    c00027e8 <put_fat+0x146>
c00026e0:	89 d1                	mov    ecx,edx
c00026e2:	89 f0                	mov    eax,esi
c00026e4:	d1 e9                	shr    ecx,1
c00026e6:	01 d1                	add    ecx,edx
c00026e8:	89 ca                	mov    edx,ecx
c00026ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026ee:	c1 ea 09             	shr    edx,0x9
c00026f1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026f4:	e8 51 fb ff ff       	call   c000224a <move_window>
c00026f9:	89 c5                	mov    ebp,eax
c00026fb:	85 c0                	test   eax,eax
c00026fd:	0f 85 e5 00 00 00    	jne    c00027e8 <put_fat+0x146>
c0002703:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002707:	8d 46 34             	lea    eax,[esi+0x34]
c000270a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000270e:	8d 41 01             	lea    eax,[ecx+0x1]
c0002711:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002717:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000271b:	83 e3 01             	and    ebx,0x1
c000271e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002722:	89 f8                	mov    eax,edi
c0002724:	74 0c                	je     c0002732 <put_fat+0x90>
c0002726:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002728:	89 f8                	mov    eax,edi
c000272a:	c1 e0 04             	shl    eax,0x4
c000272d:	83 e2 0f             	and    edx,0xf
c0002730:	09 d0                	or     eax,edx
c0002732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002736:	88 01                	mov    BYTE PTR [ecx],al
c0002738:	c1 ea 09             	shr    edx,0x9
c000273b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000273f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002742:	89 f0                	mov    eax,esi
c0002744:	e8 01 fb ff ff       	call   c000224a <move_window>
c0002749:	89 c5                	mov    ebp,eax
c000274b:	85 c0                	test   eax,eax
c000274d:	0f 85 95 00 00 00    	jne    c00027e8 <put_fat+0x146>
c0002753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002757:	25 ff 01 00 00       	and    eax,0x1ff
c000275c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002760:	85 db                	test   ebx,ebx
c0002762:	74 07                	je     c000276b <put_fat+0xc9>
c0002764:	c1 ef 04             	shr    edi,0x4
c0002767:	89 f9                	mov    ecx,edi
c0002769:	eb 0d                	jmp    c0002778 <put_fat+0xd6>
c000276b:	c1 ef 08             	shr    edi,0x8
c000276e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002770:	83 e1 f0             	and    ecx,0xfffffff0
c0002773:	83 e7 0f             	and    edi,0xf
c0002776:	09 f9                	or     ecx,edi
c0002778:	88 08                	mov    BYTE PTR [eax],cl
c000277a:	eb 27                	jmp    c00027a3 <put_fat+0x101>
c000277c:	c1 ea 08             	shr    edx,0x8
c000277f:	89 f0                	mov    eax,esi
c0002781:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002784:	e8 c1 fa ff ff       	call   c000224a <move_window>
c0002789:	89 c5                	mov    ebp,eax
c000278b:	85 c0                	test   eax,eax
c000278d:	75 59                	jne    c00027e8 <put_fat+0x146>
c000278f:	01 db                	add    ebx,ebx
c0002791:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002797:	0f b7 d7             	movzx  edx,di
c000279a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000279e:	e8 ad f5 ff ff       	call   c0001d50 <st_word>
c00027a3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a7:	eb 3f                	jmp    c00027e8 <put_fat+0x146>
c00027a9:	c1 ea 07             	shr    edx,0x7
c00027ac:	89 f0                	mov    eax,esi
c00027ae:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027b1:	e8 94 fa ff ff       	call   c000224a <move_window>
c00027b6:	89 c5                	mov    ebp,eax
c00027b8:	85 c0                	test   eax,eax
c00027ba:	75 2c                	jne    c00027e8 <put_fat+0x146>
c00027bc:	c1 e3 02             	shl    ebx,0x2
c00027bf:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027c5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027cb:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027cf:	89 d8                	mov    eax,ebx
c00027d1:	e8 62 f5 ff ff       	call   c0001d38 <ld_dword>
c00027d6:	25 00 00 00 f0       	and    eax,0xf0000000
c00027db:	09 f8                	or     eax,edi
c00027dd:	89 c2                	mov    edx,eax
c00027df:	89 d8                	mov    eax,ebx
c00027e1:	e8 6e f5 ff ff       	call   c0001d54 <st_dword>
c00027e6:	eb bb                	jmp    c00027a3 <put_fat+0x101>
c00027e8:	83 c4 1c             	add    esp,0x1c
c00027eb:	89 e8                	mov    eax,ebp
c00027ed:	5b                   	pop    ebx
c00027ee:	5e                   	pop    esi
c00027ef:	5f                   	pop    edi
c00027f0:	5d                   	pop    ebp
c00027f1:	c3                   	ret    

c00027f2 <dir_clear>:
c00027f2:	55                   	push   ebp
c00027f3:	57                   	push   edi
c00027f4:	56                   	push   esi
c00027f5:	89 c6                	mov    esi,eax
c00027f7:	53                   	push   ebx
c00027f8:	83 ec 1c             	sub    esp,0x1c
c00027fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027ff:	e8 e3 f9 ff ff       	call   c00021e7 <sync_window>
c0002804:	85 c0                	test   eax,eax
c0002806:	0f 85 c0 00 00 00    	jne    c00028cc <dir_clear+0xda>
c000280c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002810:	89 f0                	mov    eax,esi
c0002812:	e8 5a f7 ff ff       	call   c0001f71 <clst2sect>
c0002817:	31 d2                	xor    edx,edx
c0002819:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c000281c:	89 c5                	mov    ebp,eax
c000281e:	b9 00 02 00 00       	mov    ecx,0x200
c0002823:	8d 46 34             	lea    eax,[esi+0x34]
c0002826:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000282a:	e8 3d f5 ff ff       	call   c0001d6c <mem_set>
c000282f:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002833:	c1 e3 09             	shl    ebx,0x9
c0002836:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000283c:	76 1b                	jbe    c0002859 <dir_clear+0x67>
c000283e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002843:	eb 14                	jmp    c0002859 <dir_clear+0x67>
c0002845:	83 ec 0c             	sub    esp,0xc
c0002848:	53                   	push   ebx
c0002849:	e8 12 32 00 00       	call   c0005a60 <ff_memalloc>
c000284e:	83 c4 10             	add    esp,0x10
c0002851:	89 c7                	mov    edi,eax
c0002853:	85 c0                	test   eax,eax
c0002855:	75 7c                	jne    c00028d3 <dir_clear+0xe1>
c0002857:	d1 eb                	shr    ebx,1
c0002859:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000285f:	77 e4                	ja     c0002845 <dir_clear+0x53>
c0002861:	31 db                	xor    ebx,ebx
c0002863:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002867:	39 d8                	cmp    eax,ebx
c0002869:	76 53                	jbe    c00028be <dir_clear+0xcc>
c000286b:	6a 01                	push   0x1
c000286d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002870:	50                   	push   eax
c0002871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002875:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002879:	50                   	push   eax
c000287a:	e8 77 f4 ff ff       	call   c0001cf6 <disk_write>
c000287f:	83 c4 10             	add    esp,0x10
c0002882:	85 c0                	test   eax,eax
c0002884:	75 38                	jne    c00028be <dir_clear+0xcc>
c0002886:	43                   	inc    ebx
c0002887:	eb da                	jmp    c0002863 <dir_clear+0x71>
c0002889:	52                   	push   edx
c000288a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000288d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002891:	50                   	push   eax
c0002892:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002896:	57                   	push   edi
c0002897:	50                   	push   eax
c0002898:	e8 59 f4 ff ff       	call   c0001cf6 <disk_write>
c000289d:	83 c4 10             	add    esp,0x10
c00028a0:	85 c0                	test   eax,eax
c00028a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a6:	75 0a                	jne    c00028b2 <dir_clear+0xc0>
c00028a8:	01 d3                	add    ebx,edx
c00028aa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ae:	39 d8                	cmp    eax,ebx
c00028b0:	77 d7                	ja     c0002889 <dir_clear+0x97>
c00028b2:	83 ec 0c             	sub    esp,0xc
c00028b5:	57                   	push   edi
c00028b6:	e8 bd 31 00 00       	call   c0005a78 <ff_memfree>
c00028bb:	83 c4 10             	add    esp,0x10
c00028be:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c2:	39 d8                	cmp    eax,ebx
c00028c4:	0f 95 c0             	setne  al
c00028c7:	0f b6 c0             	movzx  eax,al
c00028ca:	eb 19                	jmp    c00028e5 <dir_clear+0xf3>
c00028cc:	b8 01 00 00 00       	mov    eax,0x1
c00028d1:	eb 12                	jmp    c00028e5 <dir_clear+0xf3>
c00028d3:	89 d9                	mov    ecx,ebx
c00028d5:	31 d2                	xor    edx,edx
c00028d7:	e8 90 f4 ff ff       	call   c0001d6c <mem_set>
c00028dc:	89 da                	mov    edx,ebx
c00028de:	c1 ea 09             	shr    edx,0x9
c00028e1:	31 db                	xor    ebx,ebx
c00028e3:	eb c5                	jmp    c00028aa <dir_clear+0xb8>
c00028e5:	83 c4 1c             	add    esp,0x1c
c00028e8:	5b                   	pop    ebx
c00028e9:	5e                   	pop    esi
c00028ea:	5f                   	pop    edi
c00028eb:	5d                   	pop    ebp
c00028ec:	c3                   	ret    

c00028ed <create_name>:
c00028ed:	55                   	push   ebp
c00028ee:	89 d5                	mov    ebp,edx
c00028f0:	57                   	push   edi
c00028f1:	89 c7                	mov    edi,eax
c00028f3:	56                   	push   esi
c00028f4:	31 f6                	xor    esi,esi
c00028f6:	53                   	push   ebx
c00028f7:	83 ec 3c             	sub    esp,0x3c
c00028fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00028fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002900:	8b 07                	mov    eax,DWORD PTR [edi]
c0002902:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002909:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000290d:	e8 a0 f4 ff ff       	call   c0001db2 <tchar2uni>
c0002912:	89 c3                	mov    ebx,eax
c0002914:	83 f8 ff             	cmp    eax,0xffffffff
c0002917:	75 0a                	jne    c0002923 <create_name+0x36>
c0002919:	b8 06 00 00 00       	mov    eax,0x6
c000291e:	e9 83 02 00 00       	jmp    c0002ba6 <create_name+0x2b9>
c0002923:	3d ff ff 00 00       	cmp    eax,0xffff
c0002928:	76 0c                	jbe    c0002936 <create_name+0x49>
c000292a:	c1 e8 10             	shr    eax,0x10
c000292d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002931:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002935:	46                   	inc    esi
c0002936:	66 83 fb 1f          	cmp    bx,0x1f
c000293a:	89 d8                	mov    eax,ebx
c000293c:	76 36                	jbe    c0002974 <create_name+0x87>
c000293e:	66 83 fb 2f          	cmp    bx,0x2f
c0002942:	74 30                	je     c0002974 <create_name+0x87>
c0002944:	66 83 fb 5c          	cmp    bx,0x5c
c0002948:	74 39                	je     c0002983 <create_name+0x96>
c000294a:	66 83 fb 7f          	cmp    bx,0x7f
c000294e:	77 11                	ja     c0002961 <create_name+0x74>
c0002950:	0f b7 d3             	movzx  edx,bx
c0002953:	b8 e2 ec 01 c0       	mov    eax,0xc001ece2
c0002958:	e8 3d f4 ff ff       	call   c0001d9a <chk_chr>
c000295d:	85 c0                	test   eax,eax
c000295f:	75 b8                	jne    c0002919 <create_name+0x2c>
c0002961:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002967:	77 b0                	ja     c0002919 <create_name+0x2c>
c0002969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000296d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002971:	46                   	inc    esi
c0002972:	eb 95                	jmp    c0002909 <create_name+0x1c>
c0002974:	66 83 f8 1f          	cmp    ax,0x1f
c0002978:	b3 04                	mov    bl,0x4
c000297a:	76 19                	jbe    c0002995 <create_name+0xa8>
c000297c:	eb 05                	jmp    c0002983 <create_name+0x96>
c000297e:	40                   	inc    eax
c000297f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002983:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002987:	8a 10                	mov    dl,BYTE PTR [eax]
c0002989:	80 fa 2f             	cmp    dl,0x2f
c000298c:	74 f0                	je     c000297e <create_name+0x91>
c000298e:	80 fa 5c             	cmp    dl,0x5c
c0002991:	74 eb                	je     c000297e <create_name+0x91>
c0002993:	31 db                	xor    ebx,ebx
c0002995:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002999:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000299c:	85 f6                	test   esi,esi
c000299e:	74 18                	je     c00029b8 <create_name+0xcb>
c00029a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029a4:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029a9:	66 83 f8 20          	cmp    ax,0x20
c00029ad:	74 06                	je     c00029b5 <create_name+0xc8>
c00029af:	66 83 f8 2e          	cmp    ax,0x2e
c00029b3:	75 03                	jne    c00029b8 <create_name+0xcb>
c00029b5:	4e                   	dec    esi
c00029b6:	eb e4                	jmp    c000299c <create_name+0xaf>
c00029b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029bc:	31 ed                	xor    ebp,ebp
c00029be:	85 f6                	test   esi,esi
c00029c0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029c6:	0f 84 4d ff ff ff    	je     c0002919 <create_name+0x2c>
c00029cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029d0:	8d 55 01             	lea    edx,[ebp+0x1]
c00029d3:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029d7:	66 83 f8 20          	cmp    ax,0x20
c00029db:	75 04                	jne    c00029e1 <create_name+0xf4>
c00029dd:	89 d5                	mov    ebp,edx
c00029df:	eb eb                	jmp    c00029cc <create_name+0xdf>
c00029e1:	85 ed                	test   ebp,ebp
c00029e3:	75 06                	jne    c00029eb <create_name+0xfe>
c00029e5:	66 83 f8 2e          	cmp    ax,0x2e
c00029e9:	75 08                	jne    c00029f3 <create_name+0x106>
c00029eb:	83 cb 03             	or     ebx,0x3
c00029ee:	eb 03                	jmp    c00029f3 <create_name+0x106>
c00029f0:	4e                   	dec    esi
c00029f1:	74 0c                	je     c00029ff <create_name+0x112>
c00029f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029f7:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029fd:	75 f1                	jne    c00029f0 <create_name+0x103>
c00029ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a04:	8d 47 20             	lea    eax,[edi+0x20]
c0002a07:	ba 20 00 00 00       	mov    edx,0x20
c0002a0c:	e8 5b f3 ff ff       	call   c0001d6c <mem_set>
c0002a11:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002a19:	31 c9                	xor    ecx,ecx
c0002a1b:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0002a20:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a2b:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a2f:	66 85 ed             	test   bp,bp
c0002a32:	0f 84 1f 01 00 00    	je     c0002b57 <create_name+0x26a>
c0002a38:	66 83 fd 20          	cmp    bp,0x20
c0002a3c:	74 0c                	je     c0002a4a <create_name+0x15d>
c0002a3e:	66 83 fd 2e          	cmp    bp,0x2e
c0002a42:	75 0f                	jne    c0002a53 <create_name+0x166>
c0002a44:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a48:	74 09                	je     c0002a53 <create_name+0x166>
c0002a4a:	83 cb 03             	or     ebx,0x3
c0002a4d:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0002a51:	eb cd                	jmp    c0002a20 <create_name+0x133>
c0002a53:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002a57:	73 06                	jae    c0002a5f <create_name+0x172>
c0002a59:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a5d:	75 3a                	jne    c0002a99 <create_name+0x1ac>
c0002a5f:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002a64:	75 08                	jne    c0002a6e <create_name+0x181>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	e9 e9 00 00 00       	jmp    c0002b57 <create_name+0x26a>
c0002a6e:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a72:	74 0d                	je     c0002a81 <create_name+0x194>
c0002a74:	83 cb 03             	or     ebx,0x3
c0002a77:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a7b:	0f 87 d6 00 00 00    	ja     c0002b57 <create_name+0x26a>
c0002a81:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0002a86:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002a8a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002a92:	b9 08 00 00 00       	mov    ecx,0x8
c0002a97:	eb b4                	jmp    c0002a4d <create_name+0x160>
c0002a99:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9d:	76 68                	jbe    c0002b07 <create_name+0x21a>
c0002a9f:	88 da                	mov    dl,bl
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	83 ca 02             	or     edx,0x2
c0002aa8:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aac:	50                   	push   eax
c0002aad:	50                   	push   eax
c0002aae:	68 b5 01 00 00       	push   0x1b5
c0002ab3:	55                   	push   ebp
c0002ab4:	e8 d7 2f 00 00       	call   c0005a90 <ff_uni2oem>
c0002ab9:	83 c4 10             	add    esp,0x10
c0002abc:	89 c5                	mov    ebp,eax
c0002abe:	a8 80                	test   al,0x80
c0002ac0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ac8:	74 0c                	je     c0002ad6 <create_name+0x1e9>
c0002aca:	83 e5 7f             	and    ebp,0x7f
c0002acd:	0f b6 ad a0 ed 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1260]
c0002ad4:	eb 2a                	jmp    c0002b00 <create_name+0x213>
c0002ad6:	66 3d ff 00          	cmp    ax,0xff
c0002ada:	76 24                	jbe    c0002b00 <create_name+0x213>
c0002adc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ae0:	48                   	dec    eax
c0002ae1:	39 c8                	cmp    eax,ecx
c0002ae3:	77 0c                	ja     c0002af1 <create_name+0x204>
c0002ae5:	83 cb 03             	or     ebx,0x3
c0002ae8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002aec:	e9 5c ff ff ff       	jmp    c0002a4d <create_name+0x160>
c0002af1:	89 e8                	mov    eax,ebp
c0002af3:	88 d3                	mov    bl,dl
c0002af5:	66 c1 e8 08          	shr    ax,0x8
c0002af9:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002afd:	41                   	inc    ecx
c0002afe:	eb 4b                	jmp    c0002b4b <create_name+0x25e>
c0002b00:	66 85 ed             	test   bp,bp
c0002b03:	88 d3                	mov    bl,dl
c0002b05:	74 19                	je     c0002b20 <create_name+0x233>
c0002b07:	0f b7 d5             	movzx  edx,bp
c0002b0a:	b8 eb ec 01 c0       	mov    eax,0xc001eceb
c0002b0f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b13:	e8 82 f2 ff ff       	call   c0001d9a <chk_chr>
c0002b18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1c:	85 c0                	test   eax,eax
c0002b1e:	74 0a                	je     c0002b2a <create_name+0x23d>
c0002b20:	83 cb 03             	or     ebx,0x3
c0002b23:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b28:	eb 21                	jmp    c0002b4b <create_name+0x25e>
c0002b2a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2d:	66 83 f8 19          	cmp    ax,0x19
c0002b31:	77 07                	ja     c0002b3a <create_name+0x24d>
c0002b33:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0002b38:	eb 11                	jmp    c0002b4b <create_name+0x25e>
c0002b3a:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3d:	66 83 f8 19          	cmp    ax,0x19
c0002b41:	77 08                	ja     c0002b4b <create_name+0x25e>
c0002b43:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0002b48:	83 ed 20             	sub    ebp,0x20
c0002b4b:	89 e8                	mov    eax,ebp
c0002b4d:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b51:	41                   	inc    ecx
c0002b52:	e9 f6 fe ff ff       	jmp    c0002a4d <create_name+0x160>
c0002b57:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5b:	75 04                	jne    c0002b61 <create_name+0x274>
c0002b5d:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b61:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002b66:	75 05                	jne    c0002b6d <create_name+0x280>
c0002b68:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0002b6d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0002b71:	83 e0 0c             	and    eax,0xc
c0002b74:	3c 0c                	cmp    al,0xc
c0002b76:	74 0b                	je     c0002b83 <create_name+0x296>
c0002b78:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0002b7c:	83 e0 03             	and    eax,0x3
c0002b7f:	3c 03                	cmp    al,0x3
c0002b81:	75 05                	jne    c0002b88 <create_name+0x29b>
c0002b83:	83 cb 02             	or     ebx,0x2
c0002b86:	eb 19                	jmp    c0002ba1 <create_name+0x2b4>
c0002b88:	f6 c3 02             	test   bl,0x2
c0002b8b:	75 14                	jne    c0002ba1 <create_name+0x2b4>
c0002b8d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0002b92:	74 03                	je     c0002b97 <create_name+0x2aa>
c0002b94:	83 cb 10             	or     ebx,0x10
c0002b97:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0002b9c:	74 03                	je     c0002ba1 <create_name+0x2b4>
c0002b9e:	83 cb 08             	or     ebx,0x8
c0002ba1:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba4:	31 c0                	xor    eax,eax
c0002ba6:	83 c4 3c             	add    esp,0x3c
c0002ba9:	5b                   	pop    ebx
c0002baa:	5e                   	pop    esi
c0002bab:	5f                   	pop    edi
c0002bac:	5d                   	pop    ebp
c0002bad:	c3                   	ret    

c0002bae <cmp_lfn>:
c0002bae:	55                   	push   ebp
c0002baf:	57                   	push   edi
c0002bb0:	89 d7                	mov    edi,edx
c0002bb2:	56                   	push   esi
c0002bb3:	53                   	push   ebx
c0002bb4:	83 ec 1c             	sub    esp,0x1c
c0002bb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bbe:	e8 68 f1 ff ff       	call   c0001d2b <ld_word>
c0002bc3:	66 85 c0             	test   ax,ax
c0002bc6:	74 07                	je     c0002bcf <cmp_lfn+0x21>
c0002bc8:	31 c0                	xor    eax,eax
c0002bca:	e9 9a 00 00 00       	jmp    c0002c69 <cmp_lfn+0xbb>
c0002bcf:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd1:	bd 01 00 00 00       	mov    ebp,0x1
c0002bd6:	83 e3 3f             	and    ebx,0x3f
c0002bd9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be1:	4b                   	dec    ebx
c0002be2:	6b db 0d             	imul   ebx,ebx,0xd
c0002be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be9:	0f b6 80 20 ee 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe11e0]
c0002bf0:	01 f8                	add    eax,edi
c0002bf2:	e8 34 f1 ff ff       	call   c0001d2b <ld_word>
c0002bf7:	66 85 ed             	test   bp,bp
c0002bfa:	89 c6                	mov    esi,eax
c0002bfc:	74 3c                	je     c0002c3a <cmp_lfn+0x8c>
c0002bfe:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c04:	77 c2                	ja     c0002bc8 <cmp_lfn+0x1a>
c0002c06:	83 ec 0c             	sub    esp,0xc
c0002c09:	0f b7 c0             	movzx  eax,ax
c0002c0c:	50                   	push   eax
c0002c0d:	e8 92 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c12:	89 c5                	mov    ebp,eax
c0002c14:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c1f:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c23:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c26:	e8 79 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2b:	83 c4 10             	add    esp,0x10
c0002c2e:	39 c5                	cmp    ebp,eax
c0002c30:	75 96                	jne    c0002bc8 <cmp_lfn+0x1a>
c0002c32:	89 f5                	mov    ebp,esi
c0002c34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c38:	eb 04                	jmp    c0002c3e <cmp_lfn+0x90>
c0002c3a:	66 46                	inc    si
c0002c3c:	75 8a                	jne    c0002bc8 <cmp_lfn+0x1a>
c0002c3e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c42:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c47:	75 9c                	jne    c0002be5 <cmp_lfn+0x37>
c0002c49:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c4c:	74 16                	je     c0002c64 <cmp_lfn+0xb6>
c0002c4e:	66 85 ed             	test   bp,bp
c0002c51:	74 11                	je     c0002c64 <cmp_lfn+0xb6>
c0002c53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c57:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c5c:	0f 94 c0             	sete   al
c0002c5f:	0f b6 c0             	movzx  eax,al
c0002c62:	eb 05                	jmp    c0002c69 <cmp_lfn+0xbb>
c0002c64:	b8 01 00 00 00       	mov    eax,0x1
c0002c69:	83 c4 1c             	add    esp,0x1c
c0002c6c:	5b                   	pop    ebx
c0002c6d:	5e                   	pop    esi
c0002c6e:	5f                   	pop    edi
c0002c6f:	5d                   	pop    ebp
c0002c70:	c3                   	ret    

c0002c71 <sync_fs>:
c0002c71:	56                   	push   esi
c0002c72:	53                   	push   ebx
c0002c73:	53                   	push   ebx
c0002c74:	89 c3                	mov    ebx,eax
c0002c76:	e8 6c f5 ff ff       	call   c00021e7 <sync_window>
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	0f 85 9a 00 00 00    	jne    c0002d1d <sync_fs+0xac>
c0002c83:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c86:	75 7b                	jne    c0002d03 <sync_fs+0x92>
c0002c88:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c8c:	75 75                	jne    c0002d03 <sync_fs+0x92>
c0002c8e:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c91:	b9 00 02 00 00       	mov    ecx,0x200
c0002c96:	31 d2                	xor    edx,edx
c0002c98:	89 f0                	mov    eax,esi
c0002c9a:	e8 cd f0 ff ff       	call   c0001d6c <mem_set>
c0002c9f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002caa:	e8 a1 f0 ff ff       	call   c0001d50 <st_word>
c0002caf:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb4:	89 f0                	mov    eax,esi
c0002cb6:	e8 99 f0 ff ff       	call   c0001d54 <st_dword>
c0002cbb:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc1:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cc6:	e8 89 f0 ff ff       	call   c0001d54 <st_dword>
c0002ccb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cce:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd4:	e8 7b f0 ff ff       	call   c0001d54 <st_dword>
c0002cd9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cdc:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce2:	e8 6d f0 ff ff       	call   c0001d54 <st_dword>
c0002ce7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cea:	6a 01                	push   0x1
c0002cec:	40                   	inc    eax
c0002ced:	50                   	push   eax
c0002cee:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cf5:	56                   	push   esi
c0002cf6:	50                   	push   eax
c0002cf7:	e8 fa ef ff ff       	call   c0001cf6 <disk_write>
c0002cfc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d00:	83 c4 10             	add    esp,0x10
c0002d03:	51                   	push   ecx
c0002d04:	6a 00                	push   0x0
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	6a 00                	push   0x0
c0002d0c:	50                   	push   eax
c0002d0d:	e8 fa ef ff ff       	call   c0001d0c <disk_ioctl>
c0002d12:	83 c4 10             	add    esp,0x10
c0002d15:	85 c0                	test   eax,eax
c0002d17:	0f 95 c0             	setne  al
c0002d1a:	0f b6 c0             	movzx  eax,al
c0002d1d:	5a                   	pop    edx
c0002d1e:	5b                   	pop    ebx
c0002d1f:	5e                   	pop    esi
c0002d20:	c3                   	ret    

c0002d21 <create_partition>:
c0002d21:	55                   	push   ebp
c0002d22:	57                   	push   edi
c0002d23:	56                   	push   esi
c0002d24:	53                   	push   ebx
c0002d25:	83 ec 40             	sub    esp,0x40
c0002d28:	0f b6 c0             	movzx  eax,al
c0002d2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d2f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	50                   	push   eax
c0002d3c:	6a 01                	push   0x1
c0002d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d42:	e8 c5 ef ff ff       	call   c0001d0c <disk_ioctl>
c0002d47:	83 c4 10             	add    esp,0x10
c0002d4a:	85 c0                	test   eax,eax
c0002d4c:	0f 85 70 01 00 00    	jne    c0002ec2 <create_partition+0x1a1>
c0002d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d56:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d5f:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d64:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d69:	31 d2                	xor    edx,edx
c0002d6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d6f:	f7 f3                	div    ebx
c0002d71:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d76:	76 0c                	jbe    c0002d84 <create_partition+0x63>
c0002d78:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d7c:	49                   	dec    ecx
c0002d7d:	75 e5                	jne    c0002d64 <create_partition+0x43>
c0002d7f:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d84:	b9 00 02 00 00       	mov    ecx,0x200
c0002d89:	31 d2                	xor    edx,edx
c0002d8b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d8f:	e8 d8 ef ff ff       	call   c0001d6c <mem_set>
c0002d94:	b9 64 00 00 00       	mov    ecx,0x64
c0002d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	f7 f1                	div    ecx
c0002da1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002da5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da9:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002db6:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dbc:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0002dc1:	0f 96 c2             	setbe  dl
c0002dc4:	85 c9                	test   ecx,ecx
c0002dc6:	0f 95 c0             	setne  al
c0002dc9:	84 c2                	test   dl,al
c0002dcb:	0f 84 c0 00 00 00    	je     c0002e91 <create_partition+0x170>
c0002dd1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0002dd5:	0f 83 b6 00 00 00    	jae    c0002e91 <create_partition+0x170>
c0002ddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ddf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002de3:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002de6:	83 fe 64             	cmp    esi,0x64
c0002de9:	77 0d                	ja     c0002df8 <create_partition+0xd7>
c0002deb:	74 07                	je     c0002df4 <create_partition+0xd3>
c0002ded:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002df2:	eb 04                	jmp    c0002df8 <create_partition+0xd7>
c0002df4:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002df8:	89 ca                	mov    edx,ecx
c0002dfa:	31 c0                	xor    eax,eax
c0002dfc:	01 f2                	add    edx,esi
c0002dfe:	0f 92 c0             	setb   al
c0002e01:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e05:	77 04                	ja     c0002e0b <create_partition+0xea>
c0002e07:	85 c0                	test   eax,eax
c0002e09:	74 08                	je     c0002e13 <create_partition+0xf2>
c0002e0b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e0f:	29 ce                	sub    esi,ecx
c0002e11:	eb 04                	jmp    c0002e17 <create_partition+0xf6>
c0002e13:	85 f6                	test   esi,esi
c0002e15:	74 7a                	je     c0002e91 <create_partition+0x170>
c0002e17:	89 ca                	mov    edx,ecx
c0002e19:	89 d8                	mov    eax,ebx
c0002e1b:	e8 34 ef ff ff       	call   c0001d54 <st_dword>
c0002e20:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e23:	89 f2                	mov    edx,esi
c0002e25:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e2a:	e8 25 ef ff ff       	call   c0001d54 <st_dword>
c0002e2f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e33:	88 43 fc             	mov    BYTE PTR [ebx-0x4],al
c0002e36:	31 d2                	xor    edx,edx
c0002e38:	89 c8                	mov    eax,ecx
c0002e3a:	01 f1                	add    ecx,esi
c0002e3c:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e41:	f7 f5                	div    ebp
c0002e43:	89 d5                	mov    ebp,edx
c0002e45:	31 d2                	xor    edx,edx
c0002e47:	f7 f7                	div    edi
c0002e49:	88 53 f9             	mov    BYTE PTR [ebx-0x7],dl
c0002e4c:	89 c2                	mov    edx,eax
c0002e4e:	c1 ea 02             	shr    edx,0x2
c0002e51:	45                   	inc    ebp
c0002e52:	83 e2 c0             	and    edx,0xffffffc0
c0002e55:	88 43 fb             	mov    BYTE PTR [ebx-0x5],al
c0002e58:	09 ea                	or     edx,ebp
c0002e5a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e5d:	88 53 fa             	mov    BYTE PTR [ebx-0x6],dl
c0002e60:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e65:	31 d2                	xor    edx,edx
c0002e67:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d6                	mov    esi,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	f7 f7                	div    edi
c0002e73:	89 c7                	mov    edi,eax
c0002e75:	46                   	inc    esi
c0002e76:	c1 ef 02             	shr    edi,0x2
c0002e79:	88 53 fd             	mov    BYTE PTR [ebx-0x3],dl
c0002e7c:	83 e7 c0             	and    edi,0xffffffc0
c0002e7f:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0002e82:	09 fe                	or     esi,edi
c0002e84:	83 c3 10             	add    ebx,0x10
c0002e87:	89 f2                	mov    edx,esi
c0002e89:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002e8c:	e9 2b ff ff ff       	jmp    c0002dbc <create_partition+0x9b>
c0002e91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e9a:	05 fe 01 00 00       	add    eax,0x1fe
c0002e9f:	e8 ac ee ff ff       	call   c0001d50 <st_word>
c0002ea4:	6a 01                	push   0x1
c0002ea6:	6a 00                	push   0x0
c0002ea8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002eb0:	e8 41 ee ff ff       	call   c0001cf6 <disk_write>
c0002eb5:	83 c4 10             	add    esp,0x10
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 95 c0             	setne  al
c0002ebd:	0f b6 c0             	movzx  eax,al
c0002ec0:	eb 05                	jmp    c0002ec7 <create_partition+0x1a6>
c0002ec2:	b8 01 00 00 00       	mov    eax,0x1
c0002ec7:	83 c4 3c             	add    esp,0x3c
c0002eca:	5b                   	pop    ebx
c0002ecb:	5e                   	pop    esi
c0002ecc:	5f                   	pop    edi
c0002ecd:	5d                   	pop    ebp
c0002ece:	c3                   	ret    

c0002ecf <get_fileinfo>:
c0002ecf:	55                   	push   ebp
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed8:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002edc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002ee0:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee4:	0f 84 c1 01 00 00    	je     c00030ab <get_fileinfo+0x1dc>
c0002eea:	89 d3                	mov    ebx,edx
c0002eec:	89 c6                	mov    esi,eax
c0002eee:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ef2:	74 6a                	je     c0002f5e <get_fileinfo+0x8f>
c0002ef4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002efc:	31 ed                	xor    ebp,ebp
c0002efe:	31 ff                	xor    edi,edi
c0002f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f0b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0f:	66 85 d2             	test   dx,dx
c0002f12:	74 3e                	je     c0002f52 <get_fileinfo+0x83>
c0002f14:	66 85 ed             	test   bp,bp
c0002f17:	75 0c                	jne    c0002f25 <get_fileinfo+0x56>
c0002f19:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1f:	66 3d ff 07          	cmp    ax,0x7ff
c0002f23:	76 22                	jbe    c0002f47 <get_fileinfo+0x78>
c0002f25:	89 e8                	mov    eax,ebp
c0002f27:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f2c:	c1 e0 10             	shl    eax,0x10
c0002f2f:	29 f9                	sub    ecx,edi
c0002f31:	09 d0                	or     eax,edx
c0002f33:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f37:	e8 3c ef ff ff       	call   c0001e78 <put_utf>
c0002f3c:	84 c0                	test   al,al
c0002f3e:	74 10                	je     c0002f50 <get_fileinfo+0x81>
c0002f40:	0f b6 c0             	movzx  eax,al
c0002f43:	01 c7                	add    edi,eax
c0002f45:	31 d2                	xor    edx,edx
c0002f47:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f4c:	89 d5                	mov    ebp,edx
c0002f4e:	eb b0                	jmp    c0002f00 <get_fileinfo+0x31>
c0002f50:	31 ff                	xor    edi,edi
c0002f52:	66 85 ed             	test   bp,bp
c0002f55:	74 02                	je     c0002f59 <get_fileinfo+0x8a>
c0002f57:	31 ff                	xor    edi,edi
c0002f59:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5e:	31 ff                	xor    edi,edi
c0002f60:	31 c9                	xor    ecx,ecx
c0002f62:	83 f9 0a             	cmp    ecx,0xa
c0002f65:	0f 87 ad 00 00 00    	ja     c0003018 <get_fileinfo+0x149>
c0002f6b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6e:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f71:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f75:	66 83 fa 20          	cmp    dx,0x20
c0002f79:	0f 84 92 00 00 00    	je     c0003011 <get_fileinfo+0x142>
c0002f7f:	66 83 fa 05          	cmp    dx,0x5
c0002f83:	75 05                	jne    c0002f8a <get_fileinfo+0xbb>
c0002f85:	ba e5 00 00 00       	mov    edx,0xe5
c0002f8a:	83 fd 09             	cmp    ebp,0x9
c0002f8d:	75 0b                	jne    c0002f9a <get_fileinfo+0xcb>
c0002f8f:	83 ff 0b             	cmp    edi,0xb
c0002f92:	77 06                	ja     c0002f9a <get_fileinfo+0xcb>
c0002f94:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f99:	47                   	inc    edi
c0002f9a:	0f b7 c2             	movzx  eax,dx
c0002f9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fa1:	e8 06 ee ff ff       	call   c0001dac <dbc_1st>
c0002fa6:	85 c0                	test   eax,eax
c0002fa8:	74 2f                	je     c0002fd9 <get_fileinfo+0x10a>
c0002faa:	83 fd 08             	cmp    ebp,0x8
c0002fad:	74 2a                	je     c0002fd9 <get_fileinfo+0x10a>
c0002faf:	83 fd 0b             	cmp    ebp,0xb
c0002fb2:	74 25                	je     c0002fd9 <get_fileinfo+0x10a>
c0002fb4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fbb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbf:	e8 eb ed ff ff       	call   c0001daf <dbc_2nd>
c0002fc4:	85 c0                	test   eax,eax
c0002fc6:	74 11                	je     c0002fd9 <get_fileinfo+0x10a>
c0002fc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fcc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fcf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fd4:	c1 e2 08             	shl    edx,0x8
c0002fd7:	09 c2                	or     edx,eax
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	0f b7 d2             	movzx  edx,dx
c0002fe3:	52                   	push   edx
c0002fe4:	e8 47 2b 00 00       	call   c0005b30 <ff_oem2uni>
c0002fe9:	83 c4 10             	add    esp,0x10
c0002fec:	66 85 c0             	test   ax,ax
c0002fef:	75 04                	jne    c0002ff5 <get_fileinfo+0x126>
c0002ff1:	31 ff                	xor    edi,edi
c0002ff3:	eb 23                	jmp    c0003018 <get_fileinfo+0x149>
c0002ff5:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ffa:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffe:	29 f9                	sub    ecx,edi
c0003000:	0f b7 c0             	movzx  eax,ax
c0003003:	e8 70 ee ff ff       	call   c0001e78 <put_utf>
c0003008:	84 c0                	test   al,al
c000300a:	74 e5                	je     c0002ff1 <get_fileinfo+0x122>
c000300c:	0f b6 c0             	movzx  eax,al
c000300f:	01 c7                	add    edi,eax
c0003011:	89 e9                	mov    ecx,ebp
c0003013:	e9 4a ff ff ff       	jmp    c0002f62 <get_fileinfo+0x93>
c0003018:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301d:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003021:	75 54                	jne    c0003077 <get_fileinfo+0x1a8>
c0003023:	85 ff                	test   edi,edi
c0003025:	75 0b                	jne    c0003032 <get_fileinfo+0x163>
c0003027:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000302b:	ba 01 00 00 00       	mov    edx,0x1
c0003030:	eb 33                	jmp    c0003065 <get_fileinfo+0x196>
c0003032:	b1 08                	mov    cl,0x8
c0003034:	31 d2                	xor    edx,edx
c0003036:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000303c:	84 c0                	test   al,al
c000303e:	74 25                	je     c0003065 <get_fileinfo+0x196>
c0003040:	66 83 f8 2e          	cmp    ax,0x2e
c0003044:	74 16                	je     c000305c <get_fileinfo+0x18d>
c0003046:	8d 78 bf             	lea    edi,[eax-0x41]
c0003049:	66 83 ff 19          	cmp    di,0x19
c000304d:	77 0f                	ja     c000305e <get_fileinfo+0x18f>
c000304f:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0003052:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003055:	74 07                	je     c000305e <get_fileinfo+0x18f>
c0003057:	83 c0 20             	add    eax,0x20
c000305a:	eb 02                	jmp    c000305e <get_fileinfo+0x18f>
c000305c:	b1 10                	mov    cl,0x10
c000305e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003062:	42                   	inc    edx
c0003063:	eb d1                	jmp    c0003036 <get_fileinfo+0x167>
c0003065:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000306a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003071:	75 04                	jne    c0003077 <get_fileinfo+0x1a8>
c0003073:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003080:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003083:	83 c0 1c             	add    eax,0x1c
c0003086:	e8 ad ec ff ff       	call   c0001d38 <ld_dword>
c000308b:	89 03                	mov    DWORD PTR [ebx],eax
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 16             	add    eax,0x16
c0003093:	e8 93 ec ff ff       	call   c0001d2b <ld_word>
c0003098:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000309c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309f:	83 c0 18             	add    eax,0x18
c00030a2:	e8 84 ec ff ff       	call   c0001d2b <ld_word>
c00030a7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030ab:	83 c4 1c             	add    esp,0x1c
c00030ae:	5b                   	pop    ebx
c00030af:	5e                   	pop    esi
c00030b0:	5f                   	pop    edi
c00030b1:	5d                   	pop    ebp
c00030b2:	c3                   	ret    

c00030b3 <ld_clust.isra.0>:
c00030b3:	56                   	push   esi
c00030b4:	89 c6                	mov    esi,eax
c00030b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b9:	53                   	push   ebx
c00030ba:	89 d3                	mov    ebx,edx
c00030bc:	e8 6a ec ff ff       	call   c0001d2b <ld_word>
c00030c1:	0f b7 c8             	movzx  ecx,ax
c00030c4:	89 f0                	mov    eax,esi
c00030c6:	3c 03                	cmp    al,0x3
c00030c8:	75 0d                	jne    c00030d7 <ld_clust.isra.0+0x24>
c00030ca:	8d 43 14             	lea    eax,[ebx+0x14]
c00030cd:	e8 59 ec ff ff       	call   c0001d2b <ld_word>
c00030d2:	c1 e0 10             	shl    eax,0x10
c00030d5:	09 c1                	or     ecx,eax
c00030d7:	5b                   	pop    ebx
c00030d8:	89 c8                	mov    eax,ecx
c00030da:	5e                   	pop    esi
c00030db:	c3                   	ret    

c00030dc <st_clust.isra.1>:
c00030dc:	56                   	push   esi
c00030dd:	89 c6                	mov    esi,eax
c00030df:	53                   	push   ebx
c00030e0:	89 d3                	mov    ebx,edx
c00030e2:	0f b7 d1             	movzx  edx,cx
c00030e5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e8:	e8 63 ec ff ff       	call   c0001d50 <st_word>
c00030ed:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030f0:	75 0f                	jne    c0003101 <st_clust.isra.1+0x25>
c00030f2:	c1 e9 10             	shr    ecx,0x10
c00030f5:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f8:	89 ca                	mov    edx,ecx
c00030fa:	5b                   	pop    ebx
c00030fb:	5e                   	pop    esi
c00030fc:	e9 4f ec ff ff       	jmp    c0001d50 <st_word>
c0003101:	5b                   	pop    ebx
c0003102:	5e                   	pop    esi
c0003103:	c3                   	ret    

c0003104 <get_fat.isra.2>:
c0003104:	b9 01 00 00 00       	mov    ecx,0x1
c0003109:	83 fa 01             	cmp    edx,0x1
c000310c:	0f 86 f1 00 00 00    	jbe    c0003203 <get_fat.isra.2+0xff>
c0003112:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003115:	0f 83 e8 00 00 00    	jae    c0003203 <get_fat.isra.2+0xff>
c000311b:	55                   	push   ebp
c000311c:	57                   	push   edi
c000311d:	89 c7                	mov    edi,eax
c000311f:	56                   	push   esi
c0003120:	89 d6                	mov    esi,edx
c0003122:	53                   	push   ebx
c0003123:	83 ec 0c             	sub    esp,0xc
c0003126:	8a 00                	mov    al,BYTE PTR [eax]
c0003128:	3c 02                	cmp    al,0x2
c000312a:	74 78                	je     c00031a4 <get_fat.isra.2+0xa0>
c000312c:	3c 03                	cmp    al,0x3
c000312e:	0f 84 97 00 00 00    	je     c00031cb <get_fat.isra.2+0xc7>
c0003134:	fe c8                	dec    al
c0003136:	0f 85 bd 00 00 00    	jne    c00031f9 <get_fat.isra.2+0xf5>
c000313c:	89 d3                	mov    ebx,edx
c000313e:	89 f8                	mov    eax,edi
c0003140:	d1 eb                	shr    ebx,1
c0003142:	01 d3                	add    ebx,edx
c0003144:	89 da                	mov    edx,ebx
c0003146:	c1 ea 09             	shr    edx,0x9
c0003149:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000314c:	e8 f9 f0 ff ff       	call   c000224a <move_window>
c0003151:	85 c0                	test   eax,eax
c0003153:	74 08                	je     c000315d <get_fat.isra.2+0x59>
c0003155:	83 c9 ff             	or     ecx,0xffffffff
c0003158:	e9 9c 00 00 00       	jmp    c00031f9 <get_fat.isra.2+0xf5>
c000315d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003160:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003166:	89 ea                	mov    edx,ebp
c0003168:	89 f8                	mov    eax,edi
c000316a:	c1 ea 09             	shr    edx,0x9
c000316d:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003171:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003174:	e8 d1 f0 ff ff       	call   c000224a <move_window>
c0003179:	85 c0                	test   eax,eax
c000317b:	75 d8                	jne    c0003155 <get_fat.isra.2+0x51>
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 c3             	movzx  eax,bl
c0003186:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000318b:	c1 e3 08             	shl    ebx,0x8
c000318e:	09 c3                	or     ebx,eax
c0003190:	89 d9                	mov    ecx,ebx
c0003192:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003198:	83 e6 01             	and    esi,0x1
c000319b:	74 5c                	je     c00031f9 <get_fat.isra.2+0xf5>
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	c1 e9 04             	shr    ecx,0x4
c00031a2:	eb 55                	jmp    c00031f9 <get_fat.isra.2+0xf5>
c00031a4:	c1 ea 08             	shr    edx,0x8
c00031a7:	89 f8                	mov    eax,edi
c00031a9:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031ac:	e8 99 f0 ff ff       	call   c000224a <move_window>
c00031b1:	85 c0                	test   eax,eax
c00031b3:	75 a0                	jne    c0003155 <get_fat.isra.2+0x51>
c00031b5:	01 f6                	add    esi,esi
c00031b7:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031bd:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031c1:	e8 65 eb ff ff       	call   c0001d2b <ld_word>
c00031c6:	0f b7 c8             	movzx  ecx,ax
c00031c9:	eb 2e                	jmp    c00031f9 <get_fat.isra.2+0xf5>
c00031cb:	c1 ea 07             	shr    edx,0x7
c00031ce:	89 f8                	mov    eax,edi
c00031d0:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d3:	e8 72 f0 ff ff       	call   c000224a <move_window>
c00031d8:	85 c0                	test   eax,eax
c00031da:	0f 85 75 ff ff ff    	jne    c0003155 <get_fat.isra.2+0x51>
c00031e0:	c1 e6 02             	shl    esi,0x2
c00031e3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e9:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ed:	e8 46 eb ff ff       	call   c0001d38 <ld_dword>
c00031f2:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f7:	89 c1                	mov    ecx,eax
c00031f9:	83 c4 0c             	add    esp,0xc
c00031fc:	89 c8                	mov    eax,ecx
c00031fe:	5b                   	pop    ebx
c00031ff:	5e                   	pop    esi
c0003200:	5f                   	pop    edi
c0003201:	5d                   	pop    ebp
c0003202:	c3                   	ret    
c0003203:	89 c8                	mov    eax,ecx
c0003205:	c3                   	ret    

c0003206 <dir_sdi>:
c0003206:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000320c:	0f 87 b6 00 00 00    	ja     c00032c8 <dir_sdi+0xc2>
c0003212:	55                   	push   ebp
c0003213:	57                   	push   edi
c0003214:	56                   	push   esi
c0003215:	53                   	push   ebx
c0003216:	89 d3                	mov    ebx,edx
c0003218:	83 ec 1c             	sub    esp,0x1c
c000321b:	f6 c2 1f             	test   dl,0x1f
c000321e:	74 0a                	je     c000322a <dir_sdi+0x24>
c0003220:	b8 02 00 00 00       	mov    eax,0x2
c0003225:	e9 96 00 00 00       	jmp    c00032c0 <dir_sdi+0xba>
c000322a:	89 c6                	mov    esi,eax
c000322c:	8b 38                	mov    edi,DWORD PTR [eax]
c000322e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003231:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003234:	85 c9                	test   ecx,ecx
c0003236:	75 23                	jne    c000325b <dir_sdi+0x55>
c0003238:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000323b:	76 07                	jbe    c0003244 <dir_sdi+0x3e>
c000323d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003240:	85 c0                	test   eax,eax
c0003242:	75 15                	jne    c0003259 <dir_sdi+0x53>
c0003244:	89 da                	mov    edx,ebx
c0003246:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324a:	c1 ea 05             	shr    edx,0x5
c000324d:	39 c2                	cmp    edx,eax
c000324f:	73 cf                	jae    c0003220 <dir_sdi+0x1a>
c0003251:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003254:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003257:	eb 3d                	jmp    c0003296 <dir_sdi+0x90>
c0003259:	89 c1                	mov    ecx,eax
c000325b:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325f:	c1 e5 09             	shl    ebp,0x9
c0003262:	89 ca                	mov    edx,ecx
c0003264:	39 eb                	cmp    ebx,ebp
c0003266:	72 1c                	jb     c0003284 <dir_sdi+0x7e>
c0003268:	8b 06                	mov    eax,DWORD PTR [esi]
c000326a:	e8 95 fe ff ff       	call   c0003104 <get_fat.isra.2>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	83 f8 ff             	cmp    eax,0xffffffff
c0003274:	74 45                	je     c00032bb <dir_sdi+0xb5>
c0003276:	83 f8 01             	cmp    eax,0x1
c0003279:	76 a5                	jbe    c0003220 <dir_sdi+0x1a>
c000327b:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327e:	76 a0                	jbe    c0003220 <dir_sdi+0x1a>
c0003280:	29 eb                	sub    ebx,ebp
c0003282:	eb de                	jmp    c0003262 <dir_sdi+0x5c>
c0003284:	89 f8                	mov    eax,edi
c0003286:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000328a:	e8 e2 ec ff ff       	call   c0001f71 <clst2sect>
c000328f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003293:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003296:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003299:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c000329c:	85 d2                	test   edx,edx
c000329e:	74 80                	je     c0003220 <dir_sdi+0x1a>
c00032a0:	89 d8                	mov    eax,ebx
c00032a2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a8:	c1 e8 09             	shr    eax,0x9
c00032ab:	01 d0                	add    eax,edx
c00032ad:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032b0:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b7:	31 c0                	xor    eax,eax
c00032b9:	eb 05                	jmp    c00032c0 <dir_sdi+0xba>
c00032bb:	b8 01 00 00 00       	mov    eax,0x1
c00032c0:	83 c4 1c             	add    esp,0x1c
c00032c3:	5b                   	pop    ebx
c00032c4:	5e                   	pop    esi
c00032c5:	5f                   	pop    edi
c00032c6:	5d                   	pop    ebp
c00032c7:	c3                   	ret    
c00032c8:	b8 02 00 00 00       	mov    eax,0x2
c00032cd:	c3                   	ret    

c00032ce <create_chain>:
c00032ce:	55                   	push   ebp
c00032cf:	89 c5                	mov    ebp,eax
c00032d1:	57                   	push   edi
c00032d2:	89 d7                	mov    edi,edx
c00032d4:	56                   	push   esi
c00032d5:	53                   	push   ebx
c00032d6:	83 ec 1c             	sub    esp,0x1c
c00032d9:	85 d2                	test   edx,edx
c00032db:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032dd:	75 0e                	jne    c00032ed <create_chain+0x1f>
c00032df:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00032e2:	85 c9                	test   ecx,ecx
c00032e4:	74 32                	je     c0003318 <create_chain+0x4a>
c00032e6:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00032e9:	77 32                	ja     c000331d <create_chain+0x4f>
c00032eb:	eb 2b                	jmp    c0003318 <create_chain+0x4a>
c00032ed:	89 d8                	mov    eax,ebx
c00032ef:	e8 10 fe ff ff       	call   c0003104 <get_fat.isra.2>
c00032f4:	83 f8 01             	cmp    eax,0x1
c00032f7:	77 0a                	ja     c0003303 <create_chain+0x35>
c00032f9:	b8 01 00 00 00       	mov    eax,0x1
c00032fe:	e9 f9 00 00 00       	jmp    c00033fc <create_chain+0x12e>
c0003303:	83 f8 ff             	cmp    eax,0xffffffff
c0003306:	0f 84 ed 00 00 00    	je     c00033f9 <create_chain+0x12b>
c000330c:	89 f9                	mov    ecx,edi
c000330e:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003311:	76 0a                	jbe    c000331d <create_chain+0x4f>
c0003313:	e9 e4 00 00 00       	jmp    c00033fc <create_chain+0x12e>
c0003318:	b9 01 00 00 00       	mov    ecx,0x1
c000331d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003321:	75 07                	jne    c000332a <create_chain+0x5c>
c0003323:	31 c0                	xor    eax,eax
c0003325:	e9 d2 00 00 00       	jmp    c00033fc <create_chain+0x12e>
c000332a:	39 f9                	cmp    ecx,edi
c000332c:	75 4a                	jne    c0003378 <create_chain+0xaa>
c000332e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003331:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003334:	77 05                	ja     c000333b <create_chain+0x6d>
c0003336:	be 02 00 00 00       	mov    esi,0x2
c000333b:	89 f2                	mov    edx,esi
c000333d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003340:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003344:	e8 bb fd ff ff       	call   c0003104 <get_fat.isra.2>
c0003349:	83 f8 01             	cmp    eax,0x1
c000334c:	0f 84 aa 00 00 00    	je     c00033fc <create_chain+0x12e>
c0003352:	83 f8 ff             	cmp    eax,0xffffffff
c0003355:	0f 84 a1 00 00 00    	je     c00033fc <create_chain+0x12e>
c000335b:	85 c0                	test   eax,eax
c000335d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003361:	74 11                	je     c0003374 <create_chain+0xa6>
c0003363:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003366:	83 f8 01             	cmp    eax,0x1
c0003369:	76 0d                	jbe    c0003378 <create_chain+0xaa>
c000336b:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000336e:	76 08                	jbe    c0003378 <create_chain+0xaa>
c0003370:	89 c1                	mov    ecx,eax
c0003372:	eb 04                	jmp    c0003378 <create_chain+0xaa>
c0003374:	85 f6                	test   esi,esi
c0003376:	75 3b                	jne    c00033b3 <create_chain+0xe5>
c0003378:	89 ce                	mov    esi,ecx
c000337a:	46                   	inc    esi
c000337b:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000337e:	77 0a                	ja     c000338a <create_chain+0xbc>
c0003380:	83 f9 01             	cmp    ecx,0x1
c0003383:	76 9e                	jbe    c0003323 <create_chain+0x55>
c0003385:	be 02 00 00 00       	mov    esi,0x2
c000338a:	89 f2                	mov    edx,esi
c000338c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003393:	e8 6c fd ff ff       	call   c0003104 <get_fat.isra.2>
c0003398:	85 c0                	test   eax,eax
c000339a:	74 17                	je     c00033b3 <create_chain+0xe5>
c000339c:	83 f8 01             	cmp    eax,0x1
c000339f:	74 5b                	je     c00033fc <create_chain+0x12e>
c00033a1:	83 f8 ff             	cmp    eax,0xffffffff
c00033a4:	74 56                	je     c00033fc <create_chain+0x12e>
c00033a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033aa:	39 ce                	cmp    esi,ecx
c00033ac:	75 cc                	jne    c000337a <create_chain+0xac>
c00033ae:	e9 70 ff ff ff       	jmp    c0003323 <create_chain+0x55>
c00033b3:	83 c9 ff             	or     ecx,0xffffffff
c00033b6:	89 f2                	mov    edx,esi
c00033b8:	89 d8                	mov    eax,ebx
c00033ba:	e8 e3 f2 ff ff       	call   c00026a2 <put_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	75 0f                	jne    c00033d2 <create_chain+0x104>
c00033c3:	85 ff                	test   edi,edi
c00033c5:	74 0b                	je     c00033d2 <create_chain+0x104>
c00033c7:	89 f1                	mov    ecx,esi
c00033c9:	89 fa                	mov    edx,edi
c00033cb:	89 d8                	mov    eax,ebx
c00033cd:	e8 d0 f2 ff ff       	call   c00026a2 <put_fat>
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 1c                	jne    c00033f2 <create_chain+0x124>
c00033d6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00033d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00033dc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00033df:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e2:	39 d0                	cmp    eax,edx
c00033e4:	77 04                	ja     c00033ea <create_chain+0x11c>
c00033e6:	48                   	dec    eax
c00033e7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00033ea:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	eb 0a                	jmp    c00033fc <create_chain+0x12e>
c00033f2:	48                   	dec    eax
c00033f3:	0f 85 00 ff ff ff    	jne    c00032f9 <create_chain+0x2b>
c00033f9:	83 c8 ff             	or     eax,0xffffffff
c00033fc:	83 c4 1c             	add    esp,0x1c
c00033ff:	5b                   	pop    ebx
c0003400:	5e                   	pop    esi
c0003401:	5f                   	pop    edi
c0003402:	5d                   	pop    ebp
c0003403:	c3                   	ret    

c0003404 <remove_chain>:
c0003404:	55                   	push   ebp
c0003405:	57                   	push   edi
c0003406:	56                   	push   esi
c0003407:	89 d6                	mov    esi,edx
c0003409:	53                   	push   ebx
c000340a:	83 ec 0c             	sub    esp,0xc
c000340d:	83 fa 01             	cmp    edx,0x1
c0003410:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003412:	76 65                	jbe    c0003479 <remove_chain+0x75>
c0003414:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003417:	76 60                	jbe    c0003479 <remove_chain+0x75>
c0003419:	89 c5                	mov    ebp,eax
c000341b:	89 ca                	mov    edx,ecx
c000341d:	85 c9                	test   ecx,ecx
c000341f:	74 0e                	je     c000342f <remove_chain+0x2b>
c0003421:	83 c9 ff             	or     ecx,0xffffffff
c0003424:	89 d8                	mov    eax,ebx
c0003426:	e8 77 f2 ff ff       	call   c00026a2 <put_fat>
c000342b:	85 c0                	test   eax,eax
c000342d:	75 56                	jne    c0003485 <remove_chain+0x81>
c000342f:	89 f2                	mov    edx,esi
c0003431:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003434:	e8 cb fc ff ff       	call   c0003104 <get_fat.isra.2>
c0003439:	89 c7                	mov    edi,eax
c000343b:	85 c0                	test   eax,eax
c000343d:	75 04                	jne    c0003443 <remove_chain+0x3f>
c000343f:	31 c0                	xor    eax,eax
c0003441:	eb 42                	jmp    c0003485 <remove_chain+0x81>
c0003443:	83 f8 01             	cmp    eax,0x1
c0003446:	74 31                	je     c0003479 <remove_chain+0x75>
c0003448:	83 f8 ff             	cmp    eax,0xffffffff
c000344b:	74 33                	je     c0003480 <remove_chain+0x7c>
c000344d:	31 c9                	xor    ecx,ecx
c000344f:	89 f2                	mov    edx,esi
c0003451:	89 d8                	mov    eax,ebx
c0003453:	e8 4a f2 ff ff       	call   c00026a2 <put_fat>
c0003458:	85 c0                	test   eax,eax
c000345a:	75 29                	jne    c0003485 <remove_chain+0x81>
c000345c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000345f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003462:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003465:	39 c8                	cmp    eax,ecx
c0003467:	73 08                	jae    c0003471 <remove_chain+0x6d>
c0003469:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346d:	40                   	inc    eax
c000346e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003471:	89 fe                	mov    esi,edi
c0003473:	39 fa                	cmp    edx,edi
c0003475:	77 b8                	ja     c000342f <remove_chain+0x2b>
c0003477:	eb c6                	jmp    c000343f <remove_chain+0x3b>
c0003479:	b8 02 00 00 00       	mov    eax,0x2
c000347e:	eb 05                	jmp    c0003485 <remove_chain+0x81>
c0003480:	b8 01 00 00 00       	mov    eax,0x1
c0003485:	83 c4 0c             	add    esp,0xc
c0003488:	5b                   	pop    ebx
c0003489:	5e                   	pop    esi
c000348a:	5f                   	pop    edi
c000348b:	5d                   	pop    ebp
c000348c:	c3                   	ret    

c000348d <dir_next>:
c000348d:	55                   	push   ebp
c000348e:	57                   	push   edi
c000348f:	56                   	push   esi
c0003490:	53                   	push   ebx
c0003491:	83 ec 1c             	sub    esp,0x1c
c0003494:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003497:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003499:	83 c7 20             	add    edi,0x20
c000349c:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a2:	76 07                	jbe    c00034ab <dir_next+0x1e>
c00034a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ab:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034ae:	b9 04 00 00 00       	mov    ecx,0x4
c00034b3:	85 f6                	test   esi,esi
c00034b5:	0f 84 cd 00 00 00    	je     c0003588 <dir_next+0xfb>
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	89 f8                	mov    eax,edi
c00034bf:	25 ff 01 00 00       	and    eax,0x1ff
c00034c4:	89 d1                	mov    ecx,edx
c00034c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034ca:	0f 85 a8 00 00 00    	jne    c0003578 <dir_next+0xeb>
c00034d0:	46                   	inc    esi
c00034d1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d7:	85 d2                	test   edx,edx
c00034d9:	75 22                	jne    c00034fd <dir_next+0x70>
c00034db:	89 fa                	mov    edx,edi
c00034dd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e1:	c1 ea 05             	shr    edx,0x5
c00034e4:	39 c2                	cmp    edx,eax
c00034e6:	0f 82 8c 00 00 00    	jb     c0003578 <dir_next+0xeb>
c00034ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f3:	b9 04 00 00 00       	mov    ecx,0x4
c00034f8:	e9 8b 00 00 00       	jmp    c0003588 <dir_next+0xfb>
c00034fd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003501:	89 fe                	mov    esi,edi
c0003503:	48                   	dec    eax
c0003504:	c1 ee 09             	shr    esi,0x9
c0003507:	85 f0                	test   eax,esi
c0003509:	75 6d                	jne    c0003578 <dir_next+0xeb>
c000350b:	89 e8                	mov    eax,ebp
c000350d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003511:	e8 ee fb ff ff       	call   c0003104 <get_fat.isra.2>
c0003516:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351a:	89 c6                	mov    esi,eax
c000351c:	83 f8 01             	cmp    eax,0x1
c000351f:	77 07                	ja     c0003528 <dir_next+0x9b>
c0003521:	b9 02 00 00 00       	mov    ecx,0x2
c0003526:	eb 60                	jmp    c0003588 <dir_next+0xfb>
c0003528:	83 f8 ff             	cmp    eax,0xffffffff
c000352b:	75 07                	jne    c0003534 <dir_next+0xa7>
c000352d:	b9 01 00 00 00       	mov    ecx,0x1
c0003532:	eb 54                	jmp    c0003588 <dir_next+0xfb>
c0003534:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003537:	77 30                	ja     c0003569 <dir_next+0xdc>
c0003539:	85 c9                	test   ecx,ecx
c000353b:	74 af                	je     c00034ec <dir_next+0x5f>
c000353d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003540:	89 d8                	mov    eax,ebx
c0003542:	e8 87 fd ff ff       	call   c00032ce <create_chain>
c0003547:	b9 07 00 00 00       	mov    ecx,0x7
c000354c:	89 c6                	mov    esi,eax
c000354e:	85 c0                	test   eax,eax
c0003550:	74 36                	je     c0003588 <dir_next+0xfb>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 ca                	je     c0003521 <dir_next+0x94>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 d1                	je     c000352d <dir_next+0xa0>
c000355c:	89 c2                	mov    edx,eax
c000355e:	89 e8                	mov    eax,ebp
c0003560:	e8 8d f2 ff ff       	call   c00027f2 <dir_clear>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 c4                	jne    c000352d <dir_next+0xa0>
c0003569:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356c:	89 f2                	mov    edx,esi
c000356e:	89 e8                	mov    eax,ebp
c0003570:	e8 fc e9 ff ff       	call   c0001f71 <clst2sect>
c0003575:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000357f:	31 c9                	xor    ecx,ecx
c0003581:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003585:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003588:	83 c4 1c             	add    esp,0x1c
c000358b:	89 c8                	mov    eax,ecx
c000358d:	5b                   	pop    ebx
c000358e:	5e                   	pop    esi
c000358f:	5f                   	pop    edi
c0003590:	5d                   	pop    ebp
c0003591:	c3                   	ret    

c0003592 <dir_alloc>:
c0003592:	55                   	push   ebp
c0003593:	89 c5                	mov    ebp,eax
c0003595:	57                   	push   edi
c0003596:	89 d7                	mov    edi,edx
c0003598:	56                   	push   esi
c0003599:	31 d2                	xor    edx,edx
c000359b:	53                   	push   ebx
c000359c:	83 ec 0c             	sub    esp,0xc
c000359f:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a1:	e8 60 fc ff ff       	call   c0003206 <dir_sdi>
c00035a6:	85 c0                	test   eax,eax
c00035a8:	75 37                	jne    c00035e1 <dir_alloc+0x4f>
c00035aa:	31 db                	xor    ebx,ebx
c00035ac:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035af:	89 f0                	mov    eax,esi
c00035b1:	e8 94 ec ff ff       	call   c000224a <move_window>
c00035b6:	85 c0                	test   eax,eax
c00035b8:	75 27                	jne    c00035e1 <dir_alloc+0x4f>
c00035ba:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035bd:	8a 12                	mov    dl,BYTE PTR [edx]
c00035bf:	80 fa e5             	cmp    dl,0xe5
c00035c2:	74 04                	je     c00035c8 <dir_alloc+0x36>
c00035c4:	84 d2                	test   dl,dl
c00035c6:	75 07                	jne    c00035cf <dir_alloc+0x3d>
c00035c8:	43                   	inc    ebx
c00035c9:	39 fb                	cmp    ebx,edi
c00035cb:	75 04                	jne    c00035d1 <dir_alloc+0x3f>
c00035cd:	eb 1c                	jmp    c00035eb <dir_alloc+0x59>
c00035cf:	31 db                	xor    ebx,ebx
c00035d1:	ba 01 00 00 00       	mov    edx,0x1
c00035d6:	89 e8                	mov    eax,ebp
c00035d8:	e8 b0 fe ff ff       	call   c000348d <dir_next>
c00035dd:	85 c0                	test   eax,eax
c00035df:	74 cb                	je     c00035ac <dir_alloc+0x1a>
c00035e1:	83 f8 04             	cmp    eax,0x4
c00035e4:	75 05                	jne    c00035eb <dir_alloc+0x59>
c00035e6:	b8 07 00 00 00       	mov    eax,0x7
c00035eb:	83 c4 0c             	add    esp,0xc
c00035ee:	5b                   	pop    ebx
c00035ef:	5e                   	pop    esi
c00035f0:	5f                   	pop    edi
c00035f1:	5d                   	pop    ebp
c00035f2:	c3                   	ret    

c00035f3 <dir_read>:
c00035f3:	55                   	push   ebp
c00035f4:	57                   	push   edi
c00035f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fa:	56                   	push   esi
c00035fb:	be 04 00 00 00       	mov    esi,0x4
c0003600:	53                   	push   ebx
c0003601:	89 c3                	mov    ebx,eax
c0003603:	83 ec 1c             	sub    esp,0x1c
c0003606:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003611:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003614:	85 d2                	test   edx,edx
c0003616:	0f 84 d8 00 00 00    	je     c00036f4 <dir_read+0x101>
c000361c:	89 e8                	mov    eax,ebp
c000361e:	e8 27 ec ff ff       	call   c000224a <move_window>
c0003623:	89 c6                	mov    esi,eax
c0003625:	85 c0                	test   eax,eax
c0003627:	0f 85 d2 00 00 00    	jne    c00036ff <dir_read+0x10c>
c000362d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003630:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003632:	84 c9                	test   cl,cl
c0003634:	0f 84 c0 00 00 00    	je     c00036fa <dir_read+0x107>
c000363a:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363d:	83 e0 3f             	and    eax,0x3f
c0003640:	80 f9 e5             	cmp    cl,0xe5
c0003643:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003647:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364a:	0f 84 8a 00 00 00    	je     c00036da <dir_read+0xe7>
c0003650:	80 f9 2e             	cmp    cl,0x2e
c0003653:	0f 84 81 00 00 00    	je     c00036da <dir_read+0xe7>
c0003659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365d:	83 e0 1f             	and    eax,0x1f
c0003660:	83 f8 08             	cmp    eax,0x8
c0003663:	0f 94 c0             	sete   al
c0003666:	0f b6 c0             	movzx  eax,al
c0003669:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366d:	75 6b                	jne    c00036da <dir_read+0xe7>
c000366f:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003674:	75 44                	jne    c00036ba <dir_read+0xc7>
c0003676:	f6 c1 40             	test   cl,0x40
c0003679:	74 12                	je     c000368d <dir_read+0x9a>
c000367b:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367e:	83 e1 bf             	and    ecx,0xffffffbf
c0003681:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003685:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003688:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368b:	eb 06                	jmp    c0003693 <dir_read+0xa0>
c000368d:	89 f8                	mov    eax,edi
c000368f:	38 c8                	cmp    al,cl
c0003691:	75 47                	jne    c00036da <dir_read+0xe7>
c0003693:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003697:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369c:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000369f:	75 3e                	jne    c00036df <dir_read+0xec>
c00036a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a8:	e8 e1 e8 ff ff       	call   c0001f8e <pick_lfn>
c00036ad:	85 c0                	test   eax,eax
c00036af:	74 2e                	je     c00036df <dir_read+0xec>
c00036b1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b5:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b8:	eb 25                	jmp    c00036df <dir_read+0xec>
c00036ba:	89 f8                	mov    eax,edi
c00036bc:	84 c0                	test   al,al
c00036be:	75 11                	jne    c00036d1 <dir_read+0xde>
c00036c0:	89 d0                	mov    eax,edx
c00036c2:	e8 81 ea ff ff       	call   c0002148 <sum_sfn>
c00036c7:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cb:	75 04                	jne    c00036d1 <dir_read+0xde>
c00036cd:	31 f6                	xor    esi,esi
c00036cf:	eb 35                	jmp    c0003706 <dir_read+0x113>
c00036d1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d8:	eb 2c                	jmp    c0003706 <dir_read+0x113>
c00036da:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 d8                	mov    eax,ebx
c00036e3:	e8 a5 fd ff ff       	call   c000348d <dir_next>
c00036e8:	89 c6                	mov    esi,eax
c00036ea:	85 c0                	test   eax,eax
c00036ec:	0f 84 1f ff ff ff    	je     c0003611 <dir_read+0x1e>
c00036f2:	eb 0b                	jmp    c00036ff <dir_read+0x10c>
c00036f4:	85 f6                	test   esi,esi
c00036f6:	74 d5                	je     c00036cd <dir_read+0xda>
c00036f8:	eb 05                	jmp    c00036ff <dir_read+0x10c>
c00036fa:	be 04 00 00 00       	mov    esi,0x4
c00036ff:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003706:	83 c4 1c             	add    esp,0x1c
c0003709:	89 f0                	mov    eax,esi
c000370b:	5b                   	pop    ebx
c000370c:	5e                   	pop    esi
c000370d:	5f                   	pop    edi
c000370e:	5d                   	pop    ebp
c000370f:	c3                   	ret    

c0003710 <dir_remove>:
c0003710:	57                   	push   edi
c0003711:	56                   	push   esi
c0003712:	53                   	push   ebx
c0003713:	89 c3                	mov    ebx,eax
c0003715:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003718:	8b 30                	mov    esi,DWORD PTR [eax]
c000371a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371d:	83 fa ff             	cmp    edx,0xffffffff
c0003720:	74 09                	je     c000372b <dir_remove+0x1b>
c0003722:	e8 df fa ff ff       	call   c0003206 <dir_sdi>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 34                	jne    c000375f <dir_remove+0x4f>
c000372b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372e:	89 f0                	mov    eax,esi
c0003730:	e8 15 eb ff ff       	call   c000224a <move_window>
c0003735:	85 c0                	test   eax,eax
c0003737:	75 1c                	jne    c0003755 <dir_remove+0x45>
c0003739:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373c:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000373f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003743:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003746:	73 17                	jae    c000375f <dir_remove+0x4f>
c0003748:	31 d2                	xor    edx,edx
c000374a:	89 d8                	mov    eax,ebx
c000374c:	e8 3c fd ff ff       	call   c000348d <dir_next>
c0003751:	85 c0                	test   eax,eax
c0003753:	74 d6                	je     c000372b <dir_remove+0x1b>
c0003755:	83 f8 04             	cmp    eax,0x4
c0003758:	75 05                	jne    c000375f <dir_remove+0x4f>
c000375a:	b8 02 00 00 00       	mov    eax,0x2
c000375f:	5b                   	pop    ebx
c0003760:	5e                   	pop    esi
c0003761:	5f                   	pop    edi
c0003762:	c3                   	ret    

c0003763 <dir_find>:
c0003763:	55                   	push   ebp
c0003764:	31 d2                	xor    edx,edx
c0003766:	57                   	push   edi
c0003767:	56                   	push   esi
c0003768:	53                   	push   ebx
c0003769:	89 c3                	mov    ebx,eax
c000376b:	83 ec 1c             	sub    esp,0x1c
c000376e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003774:	89 d8                	mov    eax,ebx
c0003776:	e8 8b fa ff ff       	call   c0003206 <dir_sdi>
c000377b:	89 c6                	mov    esi,eax
c000377d:	85 c0                	test   eax,eax
c000377f:	0f 85 02 01 00 00    	jne    c0003887 <dir_find+0x124>
c0003785:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378c:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003791:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003796:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003799:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379d:	e8 a8 ea ff ff       	call   c000224a <move_window>
c00037a2:	89 c6                	mov    esi,eax
c00037a4:	85 c0                	test   eax,eax
c00037a6:	0f 85 db 00 00 00    	jne    c0003887 <dir_find+0x124>
c00037ac:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037af:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b2:	84 c9                	test   cl,cl
c00037b4:	0f 84 c8 00 00 00    	je     c0003882 <dir_find+0x11f>
c00037ba:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037bd:	88 d0                	mov    al,dl
c00037bf:	83 e0 3f             	and    eax,0x3f
c00037c2:	80 f9 e5             	cmp    cl,0xe5
c00037c5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c8:	0f 84 93 00 00 00    	je     c0003861 <dir_find+0xfe>
c00037ce:	80 e2 08             	and    dl,0x8
c00037d1:	74 0a                	je     c00037dd <dir_find+0x7a>
c00037d3:	3c 0f                	cmp    al,0xf
c00037d5:	0f 85 86 00 00 00    	jne    c0003861 <dir_find+0xfe>
c00037db:	eb 04                	jmp    c00037e1 <dir_find+0x7e>
c00037dd:	3c 0f                	cmp    al,0xf
c00037df:	75 54                	jne    c0003835 <dir_find+0xd2>
c00037e1:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e5:	0f 85 82 00 00 00    	jne    c000386d <dir_find+0x10a>
c00037eb:	f6 c1 40             	test   cl,0x40
c00037ee:	74 12                	je     c0003802 <dir_find+0x9f>
c00037f0:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f3:	83 e1 bf             	and    ecx,0xffffffbf
c00037f6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003800:	eb 06                	jmp    c0003808 <dir_find+0xa5>
c0003802:	89 f8                	mov    eax,edi
c0003804:	38 c8                	cmp    al,cl
c0003806:	75 60                	jne    c0003868 <dir_find+0x105>
c0003808:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003811:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003814:	75 57                	jne    c000386d <dir_find+0x10a>
c0003816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381a:	89 ea                	mov    edx,ebp
c000381c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0003820:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003823:	e8 86 f3 ff ff       	call   c0002bae <cmp_lfn>
c0003828:	85 c0                	test   eax,eax
c000382a:	74 41                	je     c000386d <dir_find+0x10a>
c000382c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003830:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003833:	eb 38                	jmp    c000386d <dir_find+0x10a>
c0003835:	89 f8                	mov    eax,edi
c0003837:	84 c0                	test   al,al
c0003839:	75 0d                	jne    c0003848 <dir_find+0xe5>
c000383b:	89 e8                	mov    eax,ebp
c000383d:	e8 06 e9 ff ff       	call   c0002148 <sum_sfn>
c0003842:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003846:	74 3f                	je     c0003887 <dir_find+0x124>
c0003848:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384c:	75 13                	jne    c0003861 <dir_find+0xfe>
c000384e:	8d 53 20             	lea    edx,[ebx+0x20]
c0003851:	b9 0b 00 00 00       	mov    ecx,0xb
c0003856:	89 e8                	mov    eax,ebp
c0003858:	e8 1a e5 ff ff       	call   c0001d77 <mem_cmp>
c000385d:	85 c0                	test   eax,eax
c000385f:	74 26                	je     c0003887 <dir_find+0x124>
c0003861:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003868:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386d:	31 d2                	xor    edx,edx
c000386f:	89 d8                	mov    eax,ebx
c0003871:	e8 17 fc ff ff       	call   c000348d <dir_next>
c0003876:	89 c6                	mov    esi,eax
c0003878:	85 c0                	test   eax,eax
c000387a:	0f 84 16 ff ff ff    	je     c0003796 <dir_find+0x33>
c0003880:	eb 05                	jmp    c0003887 <dir_find+0x124>
c0003882:	be 04 00 00 00       	mov    esi,0x4
c0003887:	83 c4 1c             	add    esp,0x1c
c000388a:	89 f0                	mov    eax,esi
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <follow_path>:
c0003891:	56                   	push   esi
c0003892:	53                   	push   ebx
c0003893:	89 c3                	mov    ebx,eax
c0003895:	83 ec 14             	sub    esp,0x14
c0003898:	8b 30                	mov    esi,DWORD PTR [eax]
c000389a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a2:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a4:	80 fa 2f             	cmp    dl,0x2f
c00038a7:	75 07                	jne    c00038b0 <follow_path+0x1f>
c00038a9:	40                   	inc    eax
c00038aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038ae:	eb ee                	jmp    c000389e <follow_path+0xd>
c00038b0:	80 fa 5c             	cmp    dl,0x5c
c00038b3:	74 f4                	je     c00038a9 <follow_path+0x18>
c00038b5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bc:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038bf:	77 3e                	ja     c00038ff <follow_path+0x6e>
c00038c1:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c5:	31 d2                	xor    edx,edx
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	e8 38 f9 ff ff       	call   c0003206 <dir_sdi>
c00038ce:	eb 4f                	jmp    c000391f <follow_path+0x8e>
c00038d0:	89 d8                	mov    eax,ebx
c00038d2:	e8 8c fe ff ff       	call   c0003763 <dir_find>
c00038d7:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038da:	85 c0                	test   eax,eax
c00038dc:	75 32                	jne    c0003910 <follow_path+0x7f>
c00038de:	80 e2 04             	and    dl,0x4
c00038e1:	75 3c                	jne    c000391f <follow_path+0x8e>
c00038e3:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e7:	74 31                	je     c000391a <follow_path+0x89>
c00038e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ec:	25 ff 01 00 00       	and    eax,0x1ff
c00038f1:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f5:	8a 06                	mov    al,BYTE PTR [esi]
c00038f7:	e8 b7 f7 ff ff       	call   c00030b3 <ld_clust.isra.0>
c00038fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00038ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003903:	89 d8                	mov    eax,ebx
c0003905:	e8 e3 ef ff ff       	call   c00028ed <create_name>
c000390a:	85 c0                	test   eax,eax
c000390c:	74 c2                	je     c00038d0 <follow_path+0x3f>
c000390e:	eb 0f                	jmp    c000391f <follow_path+0x8e>
c0003910:	83 f8 04             	cmp    eax,0x4
c0003913:	75 0a                	jne    c000391f <follow_path+0x8e>
c0003915:	80 e2 04             	and    dl,0x4
c0003918:	75 05                	jne    c000391f <follow_path+0x8e>
c000391a:	b8 05 00 00 00       	mov    eax,0x5
c000391f:	83 c4 14             	add    esp,0x14
c0003922:	5b                   	pop    ebx
c0003923:	5e                   	pop    esi
c0003924:	c3                   	ret    

c0003925 <dir_register>:
c0003925:	55                   	push   ebp
c0003926:	57                   	push   edi
c0003927:	56                   	push   esi
c0003928:	be 06 00 00 00       	mov    esi,0x6
c000392d:	53                   	push   ebx
c000392e:	83 ec 2c             	sub    esp,0x2c
c0003931:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003935:	0f 85 65 01 00 00    	jne    c0003aa0 <dir_register+0x17b>
c000393b:	8b 38                	mov    edi,DWORD PTR [eax]
c000393d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003945:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394c:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003951:	74 06                	je     c0003959 <dir_register+0x34>
c0003953:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003957:	eb ef                	jmp    c0003948 <dir_register+0x23>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	8d 40 20             	lea    eax,[eax+0x20]
c000395e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003962:	89 c2                	mov    edx,eax
c0003964:	b9 0c 00 00 00       	mov    ecx,0xc
c0003969:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396d:	e8 e5 e3 ff ff       	call   c0001d57 <mem_cpy>
c0003972:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003977:	74 48                	je     c00039c1 <dir_register+0x9c>
c0003979:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397d:	bd 01 00 00 00       	mov    ebp,0x1
c0003982:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003985:	55                   	push   ebp
c0003986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398e:	e8 f9 e6 ff ff       	call   c000208c <gen_numname>
c0003993:	58                   	pop    eax
c0003994:	89 d8                	mov    eax,ebx
c0003996:	e8 c8 fd ff ff       	call   c0003763 <dir_find>
c000399b:	89 c6                	mov    esi,eax
c000399d:	85 c0                	test   eax,eax
c000399f:	75 10                	jne    c00039b1 <dir_register+0x8c>
c00039a1:	45                   	inc    ebp
c00039a2:	83 fd 64             	cmp    ebp,0x64
c00039a5:	75 db                	jne    c0003982 <dir_register+0x5d>
c00039a7:	be 07 00 00 00       	mov    esi,0x7
c00039ac:	e9 ef 00 00 00       	jmp    c0003aa0 <dir_register+0x17b>
c00039b1:	83 f8 04             	cmp    eax,0x4
c00039b4:	0f 85 e6 00 00 00    	jne    c0003aa0 <dir_register+0x17b>
c00039ba:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039be:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c1:	bd 01 00 00 00       	mov    ebp,0x1
c00039c6:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cb:	74 13                	je     c00039e0 <dir_register+0xbb>
c00039cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d1:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d6:	83 c0 0c             	add    eax,0xc
c00039d9:	31 d2                	xor    edx,edx
c00039db:	f7 f1                	div    ecx
c00039dd:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e0:	89 ea                	mov    edx,ebp
c00039e2:	89 d8                	mov    eax,ebx
c00039e4:	e8 a9 fb ff ff       	call   c0003592 <dir_alloc>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	0f 85 ad 00 00 00    	jne    c0003aa0 <dir_register+0x17b>
c00039f3:	4d                   	dec    ebp
c00039f4:	74 6a                	je     c0003a60 <dir_register+0x13b>
c00039f6:	89 e8                	mov    eax,ebp
c00039f8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fb:	c1 e0 05             	shl    eax,0x5
c00039fe:	29 c2                	sub    edx,eax
c0003a00:	89 d8                	mov    eax,ebx
c0003a02:	e8 ff f7 ff ff       	call   c0003206 <dir_sdi>
c0003a07:	89 c6                	mov    esi,eax
c0003a09:	85 c0                	test   eax,eax
c0003a0b:	0f 85 8f 00 00 00    	jne    c0003aa0 <dir_register+0x17b>
c0003a11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a15:	e8 2e e7 ff ff       	call   c0002148 <sum_sfn>
c0003a1a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a21:	89 f8                	mov    eax,edi
c0003a23:	e8 22 e8 ff ff       	call   c000224a <move_window>
c0003a28:	89 c6                	mov    esi,eax
c0003a2a:	85 c0                	test   eax,eax
c0003a2c:	75 72                	jne    c0003aa0 <dir_register+0x17b>
c0003a2e:	83 ec 0c             	sub    esp,0xc
c0003a31:	89 e8                	mov    eax,ebp
c0003a33:	0f b6 c8             	movzx  ecx,al
c0003a36:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a3b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3e:	52                   	push   edx
c0003a3f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a42:	e8 c1 e5 ff ff       	call   c0002008 <put_lfn>
c0003a47:	31 d2                	xor    edx,edx
c0003a49:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4d:	89 d8                	mov    eax,ebx
c0003a4f:	e8 39 fa ff ff       	call   c000348d <dir_next>
c0003a54:	83 c4 10             	add    esp,0x10
c0003a57:	89 c6                	mov    esi,eax
c0003a59:	85 c0                	test   eax,eax
c0003a5b:	75 43                	jne    c0003aa0 <dir_register+0x17b>
c0003a5d:	4d                   	dec    ebp
c0003a5e:	75 be                	jne    c0003a1e <dir_register+0xf9>
c0003a60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a63:	89 f8                	mov    eax,edi
c0003a65:	e8 e0 e7 ff ff       	call   c000224a <move_window>
c0003a6a:	89 c6                	mov    esi,eax
c0003a6c:	85 c0                	test   eax,eax
c0003a6e:	75 30                	jne    c0003aa0 <dir_register+0x17b>
c0003a70:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a73:	b9 20 00 00 00       	mov    ecx,0x20
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	e8 ed e2 ff ff       	call   c0001d6c <mem_set>
c0003a7f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a86:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8b:	e8 c7 e2 ff ff       	call   c0001d57 <mem_cpy>
c0003a90:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a93:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a96:	83 e0 18             	and    eax,0x18
c0003a99:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa0:	83 c4 2c             	add    esp,0x2c
c0003aa3:	89 f0                	mov    eax,esi
c0003aa5:	5b                   	pop    ebx
c0003aa6:	5e                   	pop    esi
c0003aa7:	5f                   	pop    edi
c0003aa8:	5d                   	pop    ebp
c0003aa9:	c3                   	ret    

c0003aaa <f_mount>:
c0003aaa:	53                   	push   ebx
c0003aab:	83 ec 18             	sub    esp,0x18
c0003aae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abe:	e8 97 e6 ff ff       	call   c000215a <get_ldnumber>
c0003ac3:	89 c2                	mov    edx,eax
c0003ac5:	b8 0b 00 00 00       	mov    eax,0xb
c0003aca:	85 d2                	test   edx,edx
c0003acc:	78 39                	js     c0003b07 <f_mount+0x5d>
c0003ace:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad5:	85 c0                	test   eax,eax
c0003ad7:	74 03                	je     c0003adc <f_mount+0x32>
c0003ad9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae0:	85 c0                	test   eax,eax
c0003ae2:	74 03                	je     c0003ae7 <f_mount+0x3d>
c0003ae4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aeb:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af2:	31 c0                	xor    eax,eax
c0003af4:	84 db                	test   bl,bl
c0003af6:	74 0f                	je     c0003b07 <f_mount+0x5d>
c0003af8:	31 c9                	xor    ecx,ecx
c0003afa:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003afe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b02:	e8 98 e8 ff ff       	call   c000239f <mount_volume>
c0003b07:	83 c4 18             	add    esp,0x18
c0003b0a:	5b                   	pop    ebx
c0003b0b:	c3                   	ret    

c0003b0c <f_open>:
c0003b0c:	55                   	push   ebp
c0003b0d:	b8 09 00 00 00       	mov    eax,0x9
c0003b12:	57                   	push   edi
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	83 ec 5c             	sub    esp,0x5c
c0003b18:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b20:	85 db                	test   ebx,ebx
c0003b22:	0f 84 a7 02 00 00    	je     c0003dcf <f_open+0x2c3>
c0003b28:	89 fe                	mov    esi,edi
c0003b2a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2e:	83 e6 3f             	and    esi,0x3f
c0003b31:	89 f0                	mov    eax,esi
c0003b33:	0f b6 c8             	movzx  ecx,al
c0003b36:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3a:	e8 60 e8 ff ff       	call   c000239f <mount_volume>
c0003b3f:	85 c0                	test   eax,eax
c0003b41:	0f 85 82 02 00 00    	jne    c0003dc9 <f_open+0x2bd>
c0003b47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4b:	83 ec 0c             	sub    esp,0xc
c0003b4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b52:	68 00 02 00 00       	push   0x200
c0003b57:	e8 04 1f 00 00       	call   c0005a60 <ff_memalloc>
c0003b5c:	89 c5                	mov    ebp,eax
c0003b5e:	83 c4 10             	add    esp,0x10
c0003b61:	b8 11 00 00 00       	mov    eax,0x11
c0003b66:	85 ed                	test   ebp,ebp
c0003b68:	0f 84 61 02 00 00    	je     c0003dcf <f_open+0x2c3>
c0003b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b72:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b76:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b79:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7d:	e8 0f fd ff ff       	call   c0003891 <follow_path>
c0003b82:	85 c0                	test   eax,eax
c0003b84:	75 0c                	jne    c0003b92 <f_open+0x86>
c0003b86:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8b:	79 05                	jns    c0003b92 <f_open+0x86>
c0003b8d:	b8 06 00 00 00       	mov    eax,0x6
c0003b92:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b98:	0f 84 de 00 00 00    	je     c0003c7c <f_open+0x170>
c0003b9e:	85 c0                	test   eax,eax
c0003ba0:	74 1e                	je     c0003bc0 <f_open+0xb4>
c0003ba2:	83 f8 04             	cmp    eax,0x4
c0003ba5:	0f 85 06 02 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003bab:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003baf:	83 ce 08             	or     esi,0x8
c0003bb2:	e8 6e fd ff ff       	call   c0003925 <dir_register>
c0003bb7:	85 c0                	test   eax,eax
c0003bb9:	74 2f                	je     c0003bea <f_open+0xde>
c0003bbb:	e9 f1 01 00 00       	jmp    c0003db1 <f_open+0x2a5>
c0003bc0:	b8 07 00 00 00       	mov    eax,0x7
c0003bc5:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bca:	0f 85 e1 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003bd0:	b8 08 00 00 00       	mov    eax,0x8
c0003bd5:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdb:	0f 85 d0 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003be1:	83 e7 08             	and    edi,0x8
c0003be4:	0f 84 bf 00 00 00    	je     c0003ca9 <f_open+0x19d>
c0003bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bee:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bf2:	89 ca                	mov    edx,ecx
c0003bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf8:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfa:	e8 b4 f4 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0003bff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c03:	89 c7                	mov    edi,eax
c0003c05:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0a:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0d:	e8 42 e1 ff ff       	call   c0001d54 <st_dword>
c0003c12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c16:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1a:	31 c9                	xor    ecx,ecx
c0003c1c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c24:	e8 b3 f4 ff ff       	call   c00030dc <st_clust.isra.1>
c0003c29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2d:	83 c0 1c             	add    eax,0x1c
c0003c30:	31 d2                	xor    edx,edx
c0003c32:	e8 1d e1 ff ff       	call   c0001d54 <st_dword>
c0003c37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3b:	85 ff                	test   edi,edi
c0003c3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c41:	74 66                	je     c0003ca9 <f_open+0x19d>
c0003c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	89 fa                	mov    edx,edi
c0003c4b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c52:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c56:	e8 a9 f7 ff ff       	call   c0003404 <remove_chain>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	0f 85 4e 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6b:	e8 da e5 ff ff       	call   c000224a <move_window>
c0003c70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c74:	4f                   	dec    edi
c0003c75:	85 c0                	test   eax,eax
c0003c77:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7a:	eb 27                	jmp    c0003ca3 <f_open+0x197>
c0003c7c:	85 c0                	test   eax,eax
c0003c7e:	0f 85 2d 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003c84:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c88:	b8 04 00 00 00       	mov    eax,0x4
c0003c8d:	f6 c2 10             	test   dl,0x10
c0003c90:	0f 85 1b 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003c96:	83 e7 02             	and    edi,0x2
c0003c99:	74 0e                	je     c0003ca9 <f_open+0x19d>
c0003c9b:	b8 07 00 00 00       	mov    eax,0x7
c0003ca0:	80 e2 01             	and    dl,0x1
c0003ca3:	0f 85 08 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003ca9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003caf:	74 03                	je     c0003cb4 <f_open+0x1a8>
c0003cb1:	83 ce 40             	or     esi,0x40
c0003cb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbc:	89 fa                	mov    edx,edi
c0003cbe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc2:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc5:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003ccb:	8a 01                	mov    al,BYTE PTR [ecx]
c0003ccd:	e8 e1 f3 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0003cd2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd5:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd8:	e8 5b e0 ff ff       	call   c0001d38 <ld_dword>
c0003cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce1:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce6:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cea:	31 d2                	xor    edx,edx
c0003cec:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf0:	89 f0                	mov    eax,esi
c0003cf2:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003cf5:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf9:	8d 43 28             	lea    eax,[ebx+0x28]
c0003cfc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d03:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d0a:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d13:	e8 54 e0 ff ff       	call   c0001d6c <mem_set>
c0003d18:	83 e6 20             	and    esi,0x20
c0003d1b:	75 07                	jne    c0003d24 <f_open+0x218>
c0003d1d:	31 c0                	xor    eax,eax
c0003d1f:	e9 8d 00 00 00       	jmp    c0003db1 <f_open+0x2a5>
c0003d24:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d27:	85 ff                	test   edi,edi
c0003d29:	74 f2                	je     c0003d1d <f_open+0x211>
c0003d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d2f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d32:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d35:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d39:	c1 e6 09             	shl    esi,0x9
c0003d3c:	31 c0                	xor    eax,eax
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	75 23                	jne    c0003d65 <f_open+0x259>
c0003d42:	39 f7                	cmp    edi,esi
c0003d44:	76 1f                	jbe    c0003d65 <f_open+0x259>
c0003d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d48:	e8 b7 f3 ff ff       	call   c0003104 <get_fat.isra.2>
c0003d4d:	89 c2                	mov    edx,eax
c0003d4f:	b8 02 00 00 00       	mov    eax,0x2
c0003d54:	83 fa 01             	cmp    edx,0x1
c0003d57:	76 08                	jbe    c0003d61 <f_open+0x255>
c0003d59:	31 c0                	xor    eax,eax
c0003d5b:	83 fa ff             	cmp    edx,0xffffffff
c0003d5e:	0f 94 c0             	sete   al
c0003d61:	29 f7                	sub    edi,esi
c0003d63:	eb d9                	jmp    c0003d3e <f_open+0x232>
c0003d65:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d68:	85 c0                	test   eax,eax
c0003d6a:	75 45                	jne    c0003db1 <f_open+0x2a5>
c0003d6c:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d72:	74 a9                	je     c0003d1d <f_open+0x211>
c0003d74:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d78:	89 f0                	mov    eax,esi
c0003d7a:	e8 f2 e1 ff ff       	call   c0001f71 <clst2sect>
c0003d7f:	89 c2                	mov    edx,eax
c0003d81:	b8 02 00 00 00       	mov    eax,0x2
c0003d86:	85 d2                	test   edx,edx
c0003d88:	74 27                	je     c0003db1 <f_open+0x2a5>
c0003d8a:	89 f9                	mov    ecx,edi
c0003d8c:	c1 e9 09             	shr    ecx,0x9
c0003d8f:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d92:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d95:	6a 01                	push   0x1
c0003d97:	50                   	push   eax
c0003d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da0:	50                   	push   eax
c0003da1:	e8 3a df ff ff       	call   c0001ce0 <disk_read>
c0003da6:	83 c4 10             	add    esp,0x10
c0003da9:	85 c0                	test   eax,eax
c0003dab:	0f 95 c0             	setne  al
c0003dae:	0f b6 c0             	movzx  eax,al
c0003db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db5:	83 ec 0c             	sub    esp,0xc
c0003db8:	55                   	push   ebp
c0003db9:	e8 ba 1c 00 00       	call   c0005a78 <ff_memfree>
c0003dbe:	83 c4 10             	add    esp,0x10
c0003dc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	74 06                	je     c0003dcf <f_open+0x2c3>
c0003dc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dcf:	83 c4 5c             	add    esp,0x5c
c0003dd2:	5b                   	pop    ebx
c0003dd3:	5e                   	pop    esi
c0003dd4:	5f                   	pop    edi
c0003dd5:	5d                   	pop    ebp
c0003dd6:	c3                   	ret    

c0003dd7 <f_read>:
c0003dd7:	55                   	push   ebp
c0003dd8:	57                   	push   edi
c0003dd9:	56                   	push   esi
c0003dda:	53                   	push   ebx
c0003ddb:	83 ec 2c             	sub    esp,0x2c
c0003dde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003dea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003dee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003df4:	89 d8                	mov    eax,ebx
c0003df6:	e8 a5 e3 ff ff       	call   c00021a0 <validate>
c0003dfb:	89 c5                	mov    ebp,eax
c0003dfd:	85 c0                	test   eax,eax
c0003dff:	0f 85 c7 01 00 00    	jne    c0003fcc <f_read+0x1f5>
c0003e05:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e09:	85 ed                	test   ebp,ebp
c0003e0b:	0f 85 bb 01 00 00    	jne    c0003fcc <f_read+0x1f5>
c0003e11:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e15:	0f 84 ac 01 00 00    	je     c0003fc7 <f_read+0x1f0>
c0003e1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1e:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e21:	89 c7                	mov    edi,eax
c0003e23:	39 f0                	cmp    eax,esi
c0003e25:	0f 86 ad 00 00 00    	jbe    c0003ed8 <f_read+0x101>
c0003e2b:	89 f7                	mov    edi,esi
c0003e2d:	e9 a6 00 00 00       	jmp    c0003ed8 <f_read+0x101>
c0003e32:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e35:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3b:	0f 85 5b 01 00 00    	jne    c0003f9c <f_read+0x1c5>
c0003e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e45:	89 d1                	mov    ecx,edx
c0003e47:	c1 e9 09             	shr    ecx,0x9
c0003e4a:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4e:	48                   	dec    eax
c0003e4f:	21 c8                	and    eax,ecx
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	0f 84 8a 00 00 00    	je     c0003ee5 <f_read+0x10e>
c0003e5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e5f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e62:	89 c8                	mov    eax,ecx
c0003e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e68:	e8 04 e1 ff ff       	call   c0001f71 <clst2sect>
c0003e6d:	85 c0                	test   eax,eax
c0003e6f:	0f 84 88 00 00 00    	je     c0003efd <f_read+0x126>
c0003e75:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e81:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e87:	0f 86 bd 00 00 00    	jbe    c0003f4a <f_read+0x173>
c0003e8d:	89 fe                	mov    esi,edi
c0003e8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e93:	c1 ee 09             	shr    esi,0x9
c0003e96:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e9a:	01 f2                	add    edx,esi
c0003e9c:	39 c2                	cmp    edx,eax
c0003e9e:	76 06                	jbe    c0003ea6 <f_read+0xcf>
c0003ea0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	56                   	push   esi
c0003ea7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eaf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb3:	50                   	push   eax
c0003eb4:	e8 27 de ff ff       	call   c0001ce0 <disk_read>
c0003eb9:	83 c4 10             	add    esp,0x10
c0003ebc:	85 c0                	test   eax,eax
c0003ebe:	75 50                	jne    c0003f10 <f_read+0x139>
c0003ec0:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec4:	78 60                	js     c0003f26 <f_read+0x14f>
c0003ec6:	c1 e6 09             	shl    esi,0x9
c0003ec9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ecd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed1:	01 30                	add    DWORD PTR [eax],esi
c0003ed3:	29 f7                	sub    edi,esi
c0003ed5:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed8:	85 ff                	test   edi,edi
c0003eda:	0f 85 52 ff ff ff    	jne    c0003e32 <f_read+0x5b>
c0003ee0:	e9 e7 00 00 00       	jmp    c0003fcc <f_read+0x1f5>
c0003ee5:	85 d2                	test   edx,edx
c0003ee7:	75 05                	jne    c0003eee <f_read+0x117>
c0003ee9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eec:	eb 0a                	jmp    c0003ef8 <f_read+0x121>
c0003eee:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef3:	e8 0c f2 ff ff       	call   c0003104 <get_fat.isra.2>
c0003ef8:	83 f8 01             	cmp    eax,0x1
c0003efb:	77 0e                	ja     c0003f0b <f_read+0x134>
c0003efd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f01:	bd 02 00 00 00       	mov    ebp,0x2
c0003f06:	e9 c1 00 00 00       	jmp    c0003fcc <f_read+0x1f5>
c0003f0b:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0e:	75 0e                	jne    c0003f1e <f_read+0x147>
c0003f10:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f14:	bd 01 00 00 00       	mov    ebp,0x1
c0003f19:	e9 ae 00 00 00       	jmp    c0003fcc <f_read+0x1f5>
c0003f1e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f21:	e9 35 ff ff ff       	jmp    c0003e5b <f_read+0x84>
c0003f26:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f29:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2d:	39 f0                	cmp    eax,esi
c0003f2f:	73 95                	jae    c0003ec6 <f_read+0xef>
c0003f31:	c1 e0 09             	shl    eax,0x9
c0003f34:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f37:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3b:	b9 00 02 00 00       	mov    ecx,0x200
c0003f40:	e8 12 de ff ff       	call   c0001d57 <mem_cpy>
c0003f45:	e9 7c ff ff ff       	jmp    c0003ec6 <f_read+0xef>
c0003f4a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4d:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f51:	74 42                	je     c0003f95 <f_read+0x1be>
c0003f53:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f56:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5a:	79 19                	jns    c0003f75 <f_read+0x19e>
c0003f5c:	6a 01                	push   0x1
c0003f5e:	50                   	push   eax
c0003f5f:	56                   	push   esi
c0003f60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f64:	50                   	push   eax
c0003f65:	e8 8c dd ff ff       	call   c0001cf6 <disk_write>
c0003f6a:	83 c4 10             	add    esp,0x10
c0003f6d:	85 c0                	test   eax,eax
c0003f6f:	75 9f                	jne    c0003f10 <f_read+0x139>
c0003f71:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f75:	6a 01                	push   0x1
c0003f77:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7b:	56                   	push   esi
c0003f7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f80:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f84:	50                   	push   eax
c0003f85:	e8 56 dd ff ff       	call   c0001ce0 <disk_read>
c0003f8a:	83 c4 10             	add    esp,0x10
c0003f8d:	85 c0                	test   eax,eax
c0003f8f:	0f 85 7b ff ff ff    	jne    c0003f10 <f_read+0x139>
c0003f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f9f:	ba 00 02 00 00       	mov    edx,0x200
c0003fa4:	25 ff 01 00 00       	and    eax,0x1ff
c0003fa9:	89 fe                	mov    esi,edi
c0003fab:	29 c2                	sub    edx,eax
c0003fad:	39 d7                	cmp    edi,edx
c0003faf:	76 02                	jbe    c0003fb3 <f_read+0x1dc>
c0003fb1:	89 d6                	mov    esi,edx
c0003fb3:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb7:	89 f1                	mov    ecx,esi
c0003fb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbd:	e8 95 dd ff ff       	call   c0001d57 <mem_cpy>
c0003fc2:	e9 02 ff ff ff       	jmp    c0003ec9 <f_read+0xf2>
c0003fc7:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcc:	83 c4 2c             	add    esp,0x2c
c0003fcf:	89 e8                	mov    eax,ebp
c0003fd1:	5b                   	pop    ebx
c0003fd2:	5e                   	pop    esi
c0003fd3:	5f                   	pop    edi
c0003fd4:	5d                   	pop    ebp
c0003fd5:	c3                   	ret    

c0003fd6 <f_write>:
c0003fd6:	55                   	push   ebp
c0003fd7:	57                   	push   edi
c0003fd8:	56                   	push   esi
c0003fd9:	53                   	push   ebx
c0003fda:	83 ec 2c             	sub    esp,0x2c
c0003fdd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fef:	89 d8                	mov    eax,ebx
c0003ff1:	e8 aa e1 ff ff       	call   c00021a0 <validate>
c0003ff6:	89 c5                	mov    ebp,eax
c0003ff8:	85 c0                	test   eax,eax
c0003ffa:	0f 85 00 02 00 00    	jne    c0004200 <f_write+0x22a>
c0004000:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004004:	85 ed                	test   ebp,ebp
c0004006:	0f 85 f4 01 00 00    	jne    c0004200 <f_write+0x22a>
c000400c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004010:	0f 84 e5 01 00 00    	je     c00041fb <f_write+0x225>
c0004016:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004019:	89 c7                	mov    edi,eax
c000401b:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000401f:	0f 83 ea 00 00 00    	jae    c000410f <f_write+0x139>
c0004025:	f7 d0                	not    eax
c0004027:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402b:	e9 df 00 00 00       	jmp    c000410f <f_write+0x139>
c0004030:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004033:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004039:	0f 85 8b 01 00 00    	jne    c00041ca <f_write+0x1f4>
c000403f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004043:	89 d1                	mov    ecx,edx
c0004045:	c1 e9 09             	shr    ecx,0x9
c0004048:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404c:	48                   	dec    eax
c000404d:	21 c8                	and    eax,ecx
c000404f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004053:	0f 84 c3 00 00 00    	je     c000411c <f_write+0x146>
c0004059:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405d:	0f 88 18 01 00 00    	js     c000417b <f_write+0x1a5>
c0004063:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004067:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406a:	89 c8                	mov    eax,ecx
c000406c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004070:	e8 fc de ff ff       	call   c0001f71 <clst2sect>
c0004075:	85 c0                	test   eax,eax
c0004077:	0f 84 c8 00 00 00    	je     c0004145 <f_write+0x16f>
c000407d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004081:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004085:	01 c7                	add    edi,eax
c0004087:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000408f:	0f 86 0d 01 00 00    	jbe    c00041a2 <f_write+0x1cc>
c0004095:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004099:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000409d:	c1 ee 09             	shr    esi,0x9
c00040a0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040a4:	01 f2                	add    edx,esi
c00040a6:	39 c2                	cmp    edx,eax
c00040a8:	76 06                	jbe    c00040b0 <f_write+0xda>
c00040aa:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040ae:	89 c6                	mov    esi,eax
c00040b0:	56                   	push   esi
c00040b1:	57                   	push   edi
c00040b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ba:	50                   	push   eax
c00040bb:	e8 36 dc ff ff       	call   c0001cf6 <disk_write>
c00040c0:	83 c4 10             	add    esp,0x10
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 8d 00 00 00    	jne    c0004158 <f_write+0x182>
c00040cb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ce:	29 fa                	sub    edx,edi
c00040d0:	39 f2                	cmp    edx,esi
c00040d2:	73 18                	jae    c00040ec <f_write+0x116>
c00040d4:	c1 e2 09             	shl    edx,0x9
c00040d7:	8d 43 28             	lea    eax,[ebx+0x28]
c00040da:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040de:	b9 00 02 00 00       	mov    ecx,0x200
c00040e3:	e8 6f dc ff ff       	call   c0001d57 <mem_cpy>
c00040e8:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ec:	c1 e6 09             	shl    esi,0x9
c00040ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f7:	01 30                	add    DWORD PTR [eax],esi
c00040f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004100:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004103:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004106:	39 f0                	cmp    eax,esi
c0004108:	73 02                	jae    c000410c <f_write+0x136>
c000410a:	89 f0                	mov    eax,esi
c000410c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000410f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004114:	0f 85 16 ff ff ff    	jne    c0004030 <f_write+0x5a>
c000411a:	eb 1b                	jmp    c0004137 <f_write+0x161>
c000411c:	85 d2                	test   edx,edx
c000411e:	75 09                	jne    c0004129 <f_write+0x153>
c0004120:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004123:	85 c0                	test   eax,eax
c0004125:	75 19                	jne    c0004140 <f_write+0x16a>
c0004127:	eb 03                	jmp    c000412c <f_write+0x156>
c0004129:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412c:	89 d8                	mov    eax,ebx
c000412e:	e8 9b f1 ff ff       	call   c00032ce <create_chain>
c0004133:	85 c0                	test   eax,eax
c0004135:	75 09                	jne    c0004140 <f_write+0x16a>
c0004137:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413b:	e9 c0 00 00 00       	jmp    c0004200 <f_write+0x22a>
c0004140:	83 f8 01             	cmp    eax,0x1
c0004143:	75 0e                	jne    c0004153 <f_write+0x17d>
c0004145:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004149:	bd 02 00 00 00       	mov    ebp,0x2
c000414e:	e9 ad 00 00 00       	jmp    c0004200 <f_write+0x22a>
c0004153:	83 f8 ff             	cmp    eax,0xffffffff
c0004156:	75 0e                	jne    c0004166 <f_write+0x190>
c0004158:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415c:	bd 01 00 00 00       	mov    ebp,0x1
c0004161:	e9 9a 00 00 00       	jmp    c0004200 <f_write+0x22a>
c0004166:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004169:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416d:	0f 85 e6 fe ff ff    	jne    c0004059 <f_write+0x83>
c0004173:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004176:	e9 de fe ff ff       	jmp    c0004059 <f_write+0x83>
c000417b:	6a 01                	push   0x1
c000417d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004180:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004183:	50                   	push   eax
c0004184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004188:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418c:	50                   	push   eax
c000418d:	e8 64 db ff ff       	call   c0001cf6 <disk_write>
c0004192:	83 c4 10             	add    esp,0x10
c0004195:	85 c0                	test   eax,eax
c0004197:	75 bf                	jne    c0004158 <f_write+0x182>
c0004199:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419d:	e9 c1 fe ff ff       	jmp    c0004063 <f_write+0x8d>
c00041a2:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a5:	74 20                	je     c00041c7 <f_write+0x1f1>
c00041a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041aa:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ad:	76 18                	jbe    c00041c7 <f_write+0x1f1>
c00041af:	6a 01                	push   0x1
c00041b1:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b4:	57                   	push   edi
c00041b5:	50                   	push   eax
c00041b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041ba:	50                   	push   eax
c00041bb:	e8 20 db ff ff       	call   c0001ce0 <disk_read>
c00041c0:	83 c4 10             	add    esp,0x10
c00041c3:	85 c0                	test   eax,eax
c00041c5:	75 91                	jne    c0004158 <f_write+0x182>
c00041c7:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041cd:	ba 00 02 00 00       	mov    edx,0x200
c00041d2:	25 ff 01 00 00       	and    eax,0x1ff
c00041d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041db:	29 c2                	sub    edx,eax
c00041dd:	39 d6                	cmp    esi,edx
c00041df:	76 02                	jbe    c00041e3 <f_write+0x20d>
c00041e1:	89 d6                	mov    esi,edx
c00041e3:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e7:	89 f1                	mov    ecx,esi
c00041e9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ed:	e8 65 db ff ff       	call   c0001d57 <mem_cpy>
c00041f2:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f6:	e9 f4 fe ff ff       	jmp    c00040ef <f_write+0x119>
c00041fb:	bd 07 00 00 00       	mov    ebp,0x7
c0004200:	83 c4 2c             	add    esp,0x2c
c0004203:	89 e8                	mov    eax,ebp
c0004205:	5b                   	pop    ebx
c0004206:	5e                   	pop    esi
c0004207:	5f                   	pop    edi
c0004208:	5d                   	pop    ebp
c0004209:	c3                   	ret    

c000420a <f_sync>:
c000420a:	56                   	push   esi
c000420b:	53                   	push   ebx
c000420c:	83 ec 14             	sub    esp,0x14
c000420f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004213:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004217:	89 d8                	mov    eax,ebx
c0004219:	e8 82 df ff ff       	call   c00021a0 <validate>
c000421e:	85 c0                	test   eax,eax
c0004220:	0f 85 93 00 00 00    	jne    c00042b9 <f_sync+0xaf>
c0004226:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004229:	f6 c2 40             	test   dl,0x40
c000422c:	0f 84 87 00 00 00    	je     c00042b9 <f_sync+0xaf>
c0004232:	84 d2                	test   dl,dl
c0004234:	79 29                	jns    c000425f <f_sync+0x55>
c0004236:	6a 01                	push   0x1
c0004238:	8d 43 28             	lea    eax,[ebx+0x28]
c000423b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423e:	50                   	push   eax
c000423f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004243:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004247:	50                   	push   eax
c0004248:	e8 a9 da ff ff       	call   c0001cf6 <disk_write>
c000424d:	89 c2                	mov    edx,eax
c000424f:	83 c4 10             	add    esp,0x10
c0004252:	b8 01 00 00 00       	mov    eax,0x1
c0004257:	85 d2                	test   edx,edx
c0004259:	75 5e                	jne    c00042b9 <f_sync+0xaf>
c000425b:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000425f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004266:	e8 df df ff ff       	call   c000224a <move_window>
c000426b:	85 c0                	test   eax,eax
c000426d:	75 4a                	jne    c00042b9 <f_sync+0xaf>
c000426f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004272:	89 f2                	mov    edx,esi
c0004274:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004278:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427d:	e8 5a ee ff ff       	call   c00030dc <st_clust.isra.1>
c0004282:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004285:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004288:	e8 c7 da ff ff       	call   c0001d54 <st_dword>
c000428d:	8d 46 16             	lea    eax,[esi+0x16]
c0004290:	ba 00 00 21 50       	mov    edx,0x50210000
c0004295:	e8 ba da ff ff       	call   c0001d54 <st_dword>
c000429a:	8d 46 12             	lea    eax,[esi+0x12]
c000429d:	31 d2                	xor    edx,edx
c000429f:	e8 ac da ff ff       	call   c0001d50 <st_word>
c00042a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b0:	e8 bc e9 ff ff       	call   c0002c71 <sync_fs>
c00042b5:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042b9:	83 c4 14             	add    esp,0x14
c00042bc:	5b                   	pop    ebx
c00042bd:	5e                   	pop    esi
c00042be:	c3                   	ret    

c00042bf <f_close>:
c00042bf:	53                   	push   ebx
c00042c0:	83 ec 24             	sub    esp,0x24
c00042c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c7:	53                   	push   ebx
c00042c8:	e8 3d ff ff ff       	call   c000420a <f_sync>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	85 c0                	test   eax,eax
c00042d2:	75 15                	jne    c00042e9 <f_close+0x2a>
c00042d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d8:	89 d8                	mov    eax,ebx
c00042da:	e8 c1 de ff ff       	call   c00021a0 <validate>
c00042df:	85 c0                	test   eax,eax
c00042e1:	75 06                	jne    c00042e9 <f_close+0x2a>
c00042e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042e9:	83 c4 18             	add    esp,0x18
c00042ec:	5b                   	pop    ebx
c00042ed:	c3                   	ret    

c00042ee <f_lseek>:
c00042ee:	55                   	push   ebp
c00042ef:	57                   	push   edi
c00042f0:	56                   	push   esi
c00042f1:	53                   	push   ebx
c00042f2:	83 ec 2c             	sub    esp,0x2c
c00042f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042fd:	89 d8                	mov    eax,ebx
c00042ff:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004303:	e8 98 de ff ff       	call   c00021a0 <validate>
c0004308:	89 c5                	mov    ebp,eax
c000430a:	85 c0                	test   eax,eax
c000430c:	0f 85 79 01 00 00    	jne    c000448b <f_lseek+0x19d>
c0004312:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004316:	85 ed                	test   ebp,ebp
c0004318:	0f 85 6d 01 00 00    	jne    c000448b <f_lseek+0x19d>
c000431e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004321:	39 f0                	cmp    eax,esi
c0004323:	73 08                	jae    c000432d <f_lseek+0x3f>
c0004325:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004329:	75 02                	jne    c000432d <f_lseek+0x3f>
c000432b:	89 c6                	mov    esi,eax
c000432d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004330:	85 f6                	test   esi,esi
c0004332:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004339:	75 07                	jne    c0004342 <f_lseek+0x54>
c000433b:	31 f6                	xor    esi,esi
c000433d:	e9 e2 00 00 00       	jmp    c0004424 <f_lseek+0x136>
c0004342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004346:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434a:	c1 e7 09             	shl    edi,0x9
c000434d:	85 c9                	test   ecx,ecx
c000434f:	74 28                	je     c0004379 <f_lseek+0x8b>
c0004351:	31 d2                	xor    edx,edx
c0004353:	8d 46 ff             	lea    eax,[esi-0x1]
c0004356:	f7 f7                	div    edi
c0004358:	49                   	dec    ecx
c0004359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000435d:	31 d2                	xor    edx,edx
c000435f:	89 c8                	mov    eax,ecx
c0004361:	f7 f7                	div    edi
c0004363:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004367:	72 10                	jb     c0004379 <f_lseek+0x8b>
c0004369:	89 f8                	mov    eax,edi
c000436b:	f7 d8                	neg    eax
c000436d:	21 c1                	and    ecx,eax
c000436f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004372:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004375:	29 ce                	sub    esi,ecx
c0004377:	eb 3c                	jmp    c00043b5 <f_lseek+0xc7>
c0004379:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437c:	85 c0                	test   eax,eax
c000437e:	75 32                	jne    c00043b2 <f_lseek+0xc4>
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 d8                	mov    eax,ebx
c0004384:	e8 45 ef ff ff       	call   c00032ce <create_chain>
c0004389:	83 f8 01             	cmp    eax,0x1
c000438c:	75 0e                	jne    c000439c <f_lseek+0xae>
c000438e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004392:	bd 02 00 00 00       	mov    ebp,0x2
c0004397:	e9 ef 00 00 00       	jmp    c000448b <f_lseek+0x19d>
c000439c:	83 f8 ff             	cmp    eax,0xffffffff
c000439f:	75 0e                	jne    c00043af <f_lseek+0xc1>
c00043a1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a5:	bd 01 00 00 00       	mov    ebp,0x1
c00043aa:	e9 dc 00 00 00       	jmp    c000448b <f_lseek+0x19d>
c00043af:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b5:	85 c0                	test   eax,eax
c00043b7:	74 82                	je     c000433b <f_lseek+0x4d>
c00043b9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bc:	39 fe                	cmp    esi,edi
c00043be:	76 3d                	jbe    c00043fd <f_lseek+0x10f>
c00043c0:	01 fa                	add    edx,edi
c00043c2:	29 fe                	sub    esi,edi
c00043c4:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c7:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cb:	89 c2                	mov    edx,eax
c00043cd:	74 0d                	je     c00043dc <f_lseek+0xee>
c00043cf:	89 d8                	mov    eax,ebx
c00043d1:	e8 f8 ee ff ff       	call   c00032ce <create_chain>
c00043d6:	85 c0                	test   eax,eax
c00043d8:	75 09                	jne    c00043e3 <f_lseek+0xf5>
c00043da:	eb 1f                	jmp    c00043fb <f_lseek+0x10d>
c00043dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043de:	e8 21 ed ff ff       	call   c0003104 <get_fat.isra.2>
c00043e3:	83 f8 ff             	cmp    eax,0xffffffff
c00043e6:	74 b9                	je     c00043a1 <f_lseek+0xb3>
c00043e8:	83 f8 01             	cmp    eax,0x1
c00043eb:	76 a1                	jbe    c000438e <f_lseek+0xa0>
c00043ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f1:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f4:	76 98                	jbe    c000438e <f_lseek+0xa0>
c00043f6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043f9:	eb be                	jmp    c00043b9 <f_lseek+0xcb>
c00043fb:	31 f6                	xor    esi,esi
c00043fd:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004400:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004406:	0f 84 2f ff ff ff    	je     c000433b <f_lseek+0x4d>
c000440c:	89 c2                	mov    edx,eax
c000440e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004412:	e8 5a db ff ff       	call   c0001f71 <clst2sect>
c0004417:	85 c0                	test   eax,eax
c0004419:	0f 84 6f ff ff ff    	je     c000438e <f_lseek+0xa0>
c000441f:	c1 ee 09             	shr    esi,0x9
c0004422:	01 c6                	add    esi,eax
c0004424:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004427:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442a:	76 07                	jbe    c0004433 <f_lseek+0x145>
c000442c:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004430:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004433:	a9 ff 01 00 00       	test   eax,0x1ff
c0004438:	74 51                	je     c000448b <f_lseek+0x19d>
c000443a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443d:	39 f0                	cmp    eax,esi
c000443f:	74 4a                	je     c000448b <f_lseek+0x19d>
c0004441:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004444:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004448:	79 21                	jns    c000446b <f_lseek+0x17d>
c000444a:	6a 01                	push   0x1
c000444c:	50                   	push   eax
c000444d:	57                   	push   edi
c000444e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004452:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004456:	50                   	push   eax
c0004457:	e8 9a d8 ff ff       	call   c0001cf6 <disk_write>
c000445c:	83 c4 10             	add    esp,0x10
c000445f:	85 c0                	test   eax,eax
c0004461:	0f 85 3a ff ff ff    	jne    c00043a1 <f_lseek+0xb3>
c0004467:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446b:	6a 01                	push   0x1
c000446d:	56                   	push   esi
c000446e:	57                   	push   edi
c000446f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004477:	50                   	push   eax
c0004478:	e8 63 d8 ff ff       	call   c0001ce0 <disk_read>
c000447d:	83 c4 10             	add    esp,0x10
c0004480:	85 c0                	test   eax,eax
c0004482:	0f 85 19 ff ff ff    	jne    c00043a1 <f_lseek+0xb3>
c0004488:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448b:	83 c4 2c             	add    esp,0x2c
c000448e:	89 e8                	mov    eax,ebp
c0004490:	5b                   	pop    ebx
c0004491:	5e                   	pop    esi
c0004492:	5f                   	pop    edi
c0004493:	5d                   	pop    ebp
c0004494:	c3                   	ret    

c0004495 <f_opendir>:
c0004495:	56                   	push   esi
c0004496:	b8 09 00 00 00       	mov    eax,0x9
c000449b:	53                   	push   ebx
c000449c:	83 ec 24             	sub    esp,0x24
c000449f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a3:	85 db                	test   ebx,ebx
c00044a5:	0f 84 af 00 00 00    	je     c000455a <f_opendir+0xc5>
c00044ab:	31 c9                	xor    ecx,ecx
c00044ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b5:	e8 e5 de ff ff       	call   c000239f <mount_volume>
c00044ba:	85 c0                	test   eax,eax
c00044bc:	0f 85 92 00 00 00    	jne    c0004554 <f_opendir+0xbf>
c00044c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c6:	83 ec 0c             	sub    esp,0xc
c00044c9:	89 03                	mov    DWORD PTR [ebx],eax
c00044cb:	68 00 02 00 00       	push   0x200
c00044d0:	e8 8b 15 00 00       	call   c0005a60 <ff_memalloc>
c00044d5:	89 c6                	mov    esi,eax
c00044d7:	83 c4 10             	add    esp,0x10
c00044da:	b8 11 00 00 00       	mov    eax,0x11
c00044df:	85 f6                	test   esi,esi
c00044e1:	74 77                	je     c000455a <f_opendir+0xc5>
c00044e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044eb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ee:	89 d8                	mov    eax,ebx
c00044f0:	e8 9c f3 ff ff       	call   c0003891 <follow_path>
c00044f5:	85 c0                	test   eax,eax
c00044f7:	75 37                	jne    c0004530 <f_opendir+0x9b>
c00044f9:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fd:	78 1c                	js     c000451b <f_opendir+0x86>
c00044ff:	b8 05 00 00 00       	mov    eax,0x5
c0004504:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004508:	74 26                	je     c0004530 <f_opendir+0x9b>
c000450a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000450e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004511:	8a 00                	mov    al,BYTE PTR [eax]
c0004513:	e8 9b eb ff ff       	call   c00030b3 <ld_clust.isra.0>
c0004518:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000451f:	31 d2                	xor    edx,edx
c0004521:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004525:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004529:	89 d8                	mov    eax,ebx
c000452b:	e8 d6 ec ff ff       	call   c0003206 <dir_sdi>
c0004530:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004534:	83 ec 0c             	sub    esp,0xc
c0004537:	56                   	push   esi
c0004538:	e8 3b 15 00 00       	call   c0005a78 <ff_memfree>
c000453d:	83 c4 10             	add    esp,0x10
c0004540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004544:	83 f8 04             	cmp    eax,0x4
c0004547:	74 06                	je     c000454f <f_opendir+0xba>
c0004549:	85 c0                	test   eax,eax
c000454b:	74 0d                	je     c000455a <f_opendir+0xc5>
c000454d:	eb 05                	jmp    c0004554 <f_opendir+0xbf>
c000454f:	b8 05 00 00 00       	mov    eax,0x5
c0004554:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455a:	83 c4 24             	add    esp,0x24
c000455d:	5b                   	pop    ebx
c000455e:	5e                   	pop    esi
c000455f:	c3                   	ret    

c0004560 <f_closedir>:
c0004560:	53                   	push   ebx
c0004561:	83 ec 18             	sub    esp,0x18
c0004564:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004568:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456c:	89 d8                	mov    eax,ebx
c000456e:	e8 2d dc ff ff       	call   c00021a0 <validate>
c0004573:	85 c0                	test   eax,eax
c0004575:	75 06                	jne    c000457d <f_closedir+0x1d>
c0004577:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457d:	83 c4 18             	add    esp,0x18
c0004580:	5b                   	pop    ebx
c0004581:	c3                   	ret    

c0004582 <f_readdir>:
c0004582:	57                   	push   edi
c0004583:	56                   	push   esi
c0004584:	53                   	push   ebx
c0004585:	83 ec 20             	sub    esp,0x20
c0004588:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004590:	89 d8                	mov    eax,ebx
c0004592:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004596:	e8 05 dc ff ff       	call   c00021a0 <validate>
c000459b:	85 c0                	test   eax,eax
c000459d:	75 6e                	jne    c000460d <f_readdir+0x8b>
c000459f:	85 ff                	test   edi,edi
c00045a1:	75 0b                	jne    c00045ae <f_readdir+0x2c>
c00045a3:	31 d2                	xor    edx,edx
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 5a ec ff ff       	call   c0003206 <dir_sdi>
c00045ac:	eb 5f                	jmp    c000460d <f_readdir+0x8b>
c00045ae:	83 ec 0c             	sub    esp,0xc
c00045b1:	68 00 02 00 00       	push   0x200
c00045b6:	e8 a5 14 00 00       	call   c0005a60 <ff_memalloc>
c00045bb:	89 c6                	mov    esi,eax
c00045bd:	83 c4 10             	add    esp,0x10
c00045c0:	b8 11 00 00 00       	mov    eax,0x11
c00045c5:	85 f6                	test   esi,esi
c00045c7:	74 44                	je     c000460d <f_readdir+0x8b>
c00045c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045cd:	31 d2                	xor    edx,edx
c00045cf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d2:	89 d8                	mov    eax,ebx
c00045d4:	e8 1a f0 ff ff       	call   c00035f3 <dir_read>
c00045d9:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045de:	75 19                	jne    c00045f9 <f_readdir+0x77>
c00045e0:	89 fa                	mov    edx,edi
c00045e2:	89 d8                	mov    eax,ebx
c00045e4:	e8 e6 e8 ff ff       	call   c0002ecf <get_fileinfo>
c00045e9:	31 d2                	xor    edx,edx
c00045eb:	89 d8                	mov    eax,ebx
c00045ed:	e8 9b ee ff ff       	call   c000348d <dir_next>
c00045f2:	83 f8 04             	cmp    eax,0x4
c00045f5:	75 02                	jne    c00045f9 <f_readdir+0x77>
c00045f7:	31 c0                	xor    eax,eax
c00045f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fd:	83 ec 0c             	sub    esp,0xc
c0004600:	56                   	push   esi
c0004601:	e8 72 14 00 00       	call   c0005a78 <ff_memfree>
c0004606:	83 c4 10             	add    esp,0x10
c0004609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460d:	83 c4 20             	add    esp,0x20
c0004610:	5b                   	pop    ebx
c0004611:	5e                   	pop    esi
c0004612:	5f                   	pop    edi
c0004613:	c3                   	ret    

c0004614 <f_stat>:
c0004614:	57                   	push   edi
c0004615:	31 c9                	xor    ecx,ecx
c0004617:	56                   	push   esi
c0004618:	53                   	push   ebx
c0004619:	83 ec 30             	sub    esp,0x30
c000461c:	89 e2                	mov    edx,esp
c000461e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004622:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004626:	e8 74 dd ff ff       	call   c000239f <mount_volume>
c000462b:	89 c3                	mov    ebx,eax
c000462d:	85 c0                	test   eax,eax
c000462f:	75 59                	jne    c000468a <f_stat+0x76>
c0004631:	83 ec 0c             	sub    esp,0xc
c0004634:	bb 11 00 00 00       	mov    ebx,0x11
c0004639:	68 00 02 00 00       	push   0x200
c000463e:	e8 1d 14 00 00       	call   c0005a60 <ff_memalloc>
c0004643:	83 c4 10             	add    esp,0x10
c0004646:	89 c6                	mov    esi,eax
c0004648:	85 c0                	test   eax,eax
c000464a:	74 3e                	je     c000468a <f_stat+0x76>
c000464c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000464f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004653:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004656:	89 e0                	mov    eax,esp
c0004658:	e8 34 f2 ff ff       	call   c0003891 <follow_path>
c000465d:	89 c3                	mov    ebx,eax
c000465f:	85 c0                	test   eax,eax
c0004661:	75 1b                	jne    c000467e <f_stat+0x6a>
c0004663:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004668:	78 0f                	js     c0004679 <f_stat+0x65>
c000466a:	85 ff                	test   edi,edi
c000466c:	74 10                	je     c000467e <f_stat+0x6a>
c000466e:	89 fa                	mov    edx,edi
c0004670:	89 e0                	mov    eax,esp
c0004672:	e8 58 e8 ff ff       	call   c0002ecf <get_fileinfo>
c0004677:	eb 05                	jmp    c000467e <f_stat+0x6a>
c0004679:	bb 06 00 00 00       	mov    ebx,0x6
c000467e:	83 ec 0c             	sub    esp,0xc
c0004681:	56                   	push   esi
c0004682:	e8 f1 13 00 00       	call   c0005a78 <ff_memfree>
c0004687:	83 c4 10             	add    esp,0x10
c000468a:	83 c4 30             	add    esp,0x30
c000468d:	89 d8                	mov    eax,ebx
c000468f:	5b                   	pop    ebx
c0004690:	5e                   	pop    esi
c0004691:	5f                   	pop    edi
c0004692:	c3                   	ret    

c0004693 <f_getfree>:
c0004693:	55                   	push   ebp
c0004694:	31 c9                	xor    ecx,ecx
c0004696:	57                   	push   edi
c0004697:	56                   	push   esi
c0004698:	53                   	push   ebx
c0004699:	83 ec 2c             	sub    esp,0x2c
c000469c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a0:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a4:	e8 f6 dc ff ff       	call   c000239f <mount_volume>
c00046a9:	89 c7                	mov    edi,eax
c00046ab:	85 c0                	test   eax,eax
c00046ad:	0f 85 d8 00 00 00    	jne    c000478b <f_getfree+0xf8>
c00046b3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046bb:	89 30                	mov    DWORD PTR [eax],esi
c00046bd:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c3:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c6:	39 d0                	cmp    eax,edx
c00046c8:	77 0b                	ja     c00046d5 <f_getfree+0x42>
c00046ca:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ce:	89 01                	mov    DWORD PTR [ecx],eax
c00046d0:	e9 b6 00 00 00       	jmp    c000478b <f_getfree+0xf8>
c00046d5:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d8:	75 29                	jne    c0004703 <f_getfree+0x70>
c00046da:	bd 02 00 00 00       	mov    ebp,0x2
c00046df:	31 db                	xor    ebx,ebx
c00046e1:	89 ea                	mov    edx,ebp
c00046e3:	89 f0                	mov    eax,esi
c00046e5:	e8 1a ea ff ff       	call   c0003104 <get_fat.isra.2>
c00046ea:	83 f8 ff             	cmp    eax,0xffffffff
c00046ed:	74 7b                	je     c000476a <f_getfree+0xd7>
c00046ef:	83 f8 01             	cmp    eax,0x1
c00046f2:	74 7d                	je     c0004771 <f_getfree+0xde>
c00046f4:	83 d3 00             	adc    ebx,0x0
c00046f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fb:	45                   	inc    ebp
c00046fc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c00046ff:	77 e0                	ja     c00046e1 <f_getfree+0x4e>
c0004701:	eb 77                	jmp    c000477a <f_getfree+0xe7>
c0004703:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004706:	31 db                	xor    ebx,ebx
c0004708:	31 f6                	xor    esi,esi
c000470a:	85 f6                	test   esi,esi
c000470c:	75 18                	jne    c0004726 <f_getfree+0x93>
c000470e:	8d 42 01             	lea    eax,[edx+0x1]
c0004711:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004719:	e8 2c db ff ff       	call   c000224a <move_window>
c000471e:	85 c0                	test   eax,eax
c0004720:	75 56                	jne    c0004778 <f_getfree+0xe5>
c0004722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004726:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472e:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004732:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004735:	75 11                	jne    c0004748 <f_getfree+0xb5>
c0004737:	e8 ef d5 ff ff       	call   c0001d2b <ld_word>
c000473c:	66 83 f8 01          	cmp    ax,0x1
c0004740:	83 d3 00             	adc    ebx,0x0
c0004743:	83 c6 02             	add    esi,0x2
c0004746:	eb 13                	jmp    c000475b <f_getfree+0xc8>
c0004748:	e8 eb d5 ff ff       	call   c0001d38 <ld_dword>
c000474d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004752:	83 f8 01             	cmp    eax,0x1
c0004755:	83 d3 00             	adc    ebx,0x0
c0004758:	83 c6 04             	add    esi,0x4
c000475b:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004761:	4d                   	dec    ebp
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	75 a2                	jne    c000470a <f_getfree+0x77>
c0004768:	eb 10                	jmp    c000477a <f_getfree+0xe7>
c000476a:	bf 01 00 00 00       	mov    edi,0x1
c000476f:	eb 09                	jmp    c000477a <f_getfree+0xe7>
c0004771:	bf 02 00 00 00       	mov    edi,0x2
c0004776:	eb 02                	jmp    c000477a <f_getfree+0xe7>
c0004778:	89 c7                	mov    edi,eax
c000477a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477e:	89 18                	mov    DWORD PTR [eax],ebx
c0004780:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004784:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004788:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000478b:	83 c4 2c             	add    esp,0x2c
c000478e:	89 f8                	mov    eax,edi
c0004790:	5b                   	pop    ebx
c0004791:	5e                   	pop    esi
c0004792:	5f                   	pop    edi
c0004793:	5d                   	pop    ebp
c0004794:	c3                   	ret    

c0004795 <f_truncate>:
c0004795:	56                   	push   esi
c0004796:	53                   	push   ebx
c0004797:	83 ec 14             	sub    esp,0x14
c000479a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a2:	89 d8                	mov    eax,ebx
c00047a4:	e8 f7 d9 ff ff       	call   c00021a0 <validate>
c00047a9:	89 c6                	mov    esi,eax
c00047ab:	85 c0                	test   eax,eax
c00047ad:	0f 85 be 00 00 00    	jne    c0004871 <f_truncate+0xdc>
c00047b3:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b7:	85 f6                	test   esi,esi
c00047b9:	0f 85 b2 00 00 00    	jne    c0004871 <f_truncate+0xdc>
c00047bf:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c3:	0f 84 a3 00 00 00    	je     c000486c <f_truncate+0xd7>
c00047c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047cf:	0f 83 9c 00 00 00    	jae    c0004871 <f_truncate+0xdc>
c00047d5:	85 c0                	test   eax,eax
c00047d7:	75 15                	jne    c00047ee <f_truncate+0x59>
c00047d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dc:	31 c9                	xor    ecx,ecx
c00047de:	89 d8                	mov    eax,ebx
c00047e0:	e8 1f ec ff ff       	call   c0003404 <remove_chain>
c00047e5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ec:	eb 35                	jmp    c0004823 <f_truncate+0x8e>
c00047ee:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f3:	e8 0c e9 ff ff       	call   c0003104 <get_fat.isra.2>
c00047f8:	89 c2                	mov    edx,eax
c00047fa:	b8 01 00 00 00       	mov    eax,0x1
c00047ff:	83 fa ff             	cmp    edx,0xffffffff
c0004802:	74 1f                	je     c0004823 <f_truncate+0x8e>
c0004804:	b8 02 00 00 00       	mov    eax,0x2
c0004809:	83 fa 01             	cmp    edx,0x1
c000480c:	74 15                	je     c0004823 <f_truncate+0x8e>
c000480e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004812:	31 c0                	xor    eax,eax
c0004814:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004817:	76 0a                	jbe    c0004823 <f_truncate+0x8e>
c0004819:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481c:	89 d8                	mov    eax,ebx
c000481e:	e8 e1 eb ff ff       	call   c0003404 <remove_chain>
c0004823:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004826:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004829:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482c:	83 ca 40             	or     edx,0x40
c000482f:	85 c0                	test   eax,eax
c0004831:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004834:	75 2f                	jne    c0004865 <f_truncate+0xd0>
c0004836:	84 d2                	test   dl,dl
c0004838:	79 37                	jns    c0004871 <f_truncate+0xdc>
c000483a:	6a 01                	push   0x1
c000483c:	8d 43 28             	lea    eax,[ebx+0x28]
c000483f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004842:	50                   	push   eax
c0004843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004847:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484b:	50                   	push   eax
c000484c:	e8 a5 d4 ff ff       	call   c0001cf6 <disk_write>
c0004851:	83 c4 10             	add    esp,0x10
c0004854:	85 c0                	test   eax,eax
c0004856:	75 08                	jne    c0004860 <f_truncate+0xcb>
c0004858:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485c:	31 f6                	xor    esi,esi
c000485e:	eb 11                	jmp    c0004871 <f_truncate+0xdc>
c0004860:	b8 01 00 00 00       	mov    eax,0x1
c0004865:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004868:	89 c6                	mov    esi,eax
c000486a:	eb 05                	jmp    c0004871 <f_truncate+0xdc>
c000486c:	be 07 00 00 00       	mov    esi,0x7
c0004871:	83 c4 14             	add    esp,0x14
c0004874:	89 f0                	mov    eax,esi
c0004876:	5b                   	pop    ebx
c0004877:	5e                   	pop    esi
c0004878:	c3                   	ret    

c0004879 <f_unlink>:
c0004879:	55                   	push   ebp
c000487a:	b9 02 00 00 00       	mov    ecx,0x2
c000487f:	57                   	push   edi
c0004880:	56                   	push   esi
c0004881:	53                   	push   ebx
c0004882:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004888:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488c:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004893:	e8 07 db ff ff       	call   c000239f <mount_volume>
c0004898:	85 c0                	test   eax,eax
c000489a:	0f 85 ee 00 00 00    	jne    c000498e <f_unlink+0x115>
c00048a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a4:	83 ec 0c             	sub    esp,0xc
c00048a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ab:	68 00 02 00 00       	push   0x200
c00048b0:	e8 ab 11 00 00       	call   c0005a60 <ff_memalloc>
c00048b5:	89 c3                	mov    ebx,eax
c00048b7:	83 c4 10             	add    esp,0x10
c00048ba:	b8 11 00 00 00       	mov    eax,0x11
c00048bf:	85 db                	test   ebx,ebx
c00048c1:	0f 84 c7 00 00 00    	je     c000498e <f_unlink+0x115>
c00048c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cb:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048d9:	e8 b3 ef ff ff       	call   c0003891 <follow_path>
c00048de:	85 c0                	test   eax,eax
c00048e0:	0f 85 94 00 00 00    	jne    c000497a <f_unlink+0x101>
c00048e6:	b8 06 00 00 00       	mov    eax,0x6
c00048eb:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f0:	0f 88 84 00 00 00    	js     c000497a <f_unlink+0x101>
c00048f6:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fb:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004901:	74 07                	je     c000490a <f_unlink+0x91>
c0004903:	b8 07 00 00 00       	mov    eax,0x7
c0004908:	eb 70                	jmp    c000497a <f_unlink+0x101>
c000490a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004912:	8a 07                	mov    al,BYTE PTR [edi]
c0004914:	e8 9a e7 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0004919:	83 e5 10             	and    ebp,0x10
c000491c:	89 c6                	mov    esi,eax
c000491e:	75 20                	jne    c0004940 <f_unlink+0xc7>
c0004920:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004924:	e8 e7 ed ff ff       	call   c0003710 <dir_remove>
c0004929:	85 c0                	test   eax,eax
c000492b:	75 40                	jne    c000496d <f_unlink+0xf4>
c000492d:	85 f6                	test   esi,esi
c000492f:	74 3c                	je     c000496d <f_unlink+0xf4>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	89 f2                	mov    edx,esi
c0004935:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004939:	e8 c6 ea ff ff       	call   c0003404 <remove_chain>
c000493e:	eb 2d                	jmp    c000496d <f_unlink+0xf4>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494e:	e8 b3 e8 ff ff       	call   c0003206 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 23                	jne    c000497a <f_unlink+0x101>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 91 ec ff ff       	call   c00035f3 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 9d                	je     c0004903 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 0f                	jne    c000497a <f_unlink+0x101>
c000496b:	eb b3                	jmp    c0004920 <f_unlink+0xa7>
c000496d:	85 c0                	test   eax,eax
c000496f:	75 09                	jne    c000497a <f_unlink+0x101>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 f7 e2 ff ff       	call   c0002c71 <sync_fs>
c000497a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000497e:	83 ec 0c             	sub    esp,0xc
c0004981:	53                   	push   ebx
c0004982:	e8 f1 10 00 00       	call   c0005a78 <ff_memfree>
c0004987:	83 c4 10             	add    esp,0x10
c000498a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000498e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004994:	5b                   	pop    ebx
c0004995:	5e                   	pop    esi
c0004996:	5f                   	pop    edi
c0004997:	5d                   	pop    ebp
c0004998:	c3                   	ret    

c0004999 <f_mkdir>:
c0004999:	57                   	push   edi
c000499a:	b9 02 00 00 00       	mov    ecx,0x2
c000499f:	56                   	push   esi
c00049a0:	53                   	push   ebx
c00049a1:	83 ec 50             	sub    esp,0x50
c00049a4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049a8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049ac:	e8 ee d9 ff ff       	call   c000239f <mount_volume>
c00049b1:	89 c3                	mov    ebx,eax
c00049b3:	85 c0                	test   eax,eax
c00049b5:	0f 85 70 01 00 00    	jne    c0004b2b <f_mkdir+0x192>
c00049bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049bf:	83 ec 0c             	sub    esp,0xc
c00049c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00049c6:	bb 11 00 00 00       	mov    ebx,0x11
c00049cb:	68 00 02 00 00       	push   0x200
c00049d0:	e8 8b 10 00 00       	call   c0005a60 <ff_memalloc>
c00049d5:	83 c4 10             	add    esp,0x10
c00049d8:	89 c7                	mov    edi,eax
c00049da:	85 c0                	test   eax,eax
c00049dc:	0f 84 49 01 00 00    	je     c0004b2b <f_mkdir+0x192>
c00049e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ea:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049ed:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f1:	e8 9b ee ff ff       	call   c0003891 <follow_path>
c00049f6:	89 c3                	mov    ebx,eax
c00049f8:	85 c0                	test   eax,eax
c00049fa:	74 3e                	je     c0004a3a <f_mkdir+0xa1>
c00049fc:	83 f8 04             	cmp    eax,0x4
c00049ff:	75 3e                	jne    c0004a3f <f_mkdir+0xa6>
c0004a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a0f:	e8 ba e8 ff ff       	call   c00032ce <create_chain>
c0004a14:	89 c6                	mov    esi,eax
c0004a16:	85 c0                	test   eax,eax
c0004a18:	74 0c                	je     c0004a26 <f_mkdir+0x8d>
c0004a1a:	bb 02 00 00 00       	mov    ebx,0x2
c0004a1f:	83 f8 01             	cmp    eax,0x1
c0004a22:	74 07                	je     c0004a2b <f_mkdir+0x92>
c0004a24:	eb 2a                	jmp    c0004a50 <f_mkdir+0xb7>
c0004a26:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 f2                	mov    edx,esi
c0004a2f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a33:	e8 cc e9 ff ff       	call   c0003404 <remove_chain>
c0004a38:	eb 05                	jmp    c0004a3f <f_mkdir+0xa6>
c0004a3a:	bb 08 00 00 00       	mov    ebx,0x8
c0004a3f:	83 ec 0c             	sub    esp,0xc
c0004a42:	57                   	push   edi
c0004a43:	e8 30 10 00 00       	call   c0005a78 <ff_memfree>
c0004a48:	83 c4 10             	add    esp,0x10
c0004a4b:	e9 db 00 00 00       	jmp    c0004b2b <f_mkdir+0x192>
c0004a50:	bb 01 00 00 00       	mov    ebx,0x1
c0004a55:	83 f8 ff             	cmp    eax,0xffffffff
c0004a58:	74 d1                	je     c0004a2b <f_mkdir+0x92>
c0004a5a:	89 f2                	mov    edx,esi
c0004a5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a60:	e8 8d dd ff ff       	call   c00027f2 <dir_clear>
c0004a65:	89 c3                	mov    ebx,eax
c0004a67:	85 c0                	test   eax,eax
c0004a69:	75 c0                	jne    c0004a2b <f_mkdir+0x92>
c0004a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a74:	83 c0 34             	add    eax,0x34
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	e8 eb d2 ff ff       	call   c0001d6c <mem_set>
c0004a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a85:	83 c0 4a             	add    eax,0x4a
c0004a88:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0004a8c:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004a90:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a95:	e8 ba d2 ff ff       	call   c0001d54 <st_dword>
c0004a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a9e:	89 f1                	mov    ecx,esi
c0004aa0:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa3:	e8 34 e6 ff ff       	call   c00030dc <st_clust.isra.1>
c0004aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aac:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab1:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab4:	83 c0 54             	add    eax,0x54
c0004ab7:	e8 9b d2 ff ff       	call   c0001d57 <mem_cpy>
c0004abc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac4:	8d 50 54             	lea    edx,[eax+0x54]
c0004ac7:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004acb:	e8 0c e6 ff ff       	call   c00030dc <st_clust.isra.1>
c0004ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ad8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adc:	e8 44 ee ff ff       	call   c0003925 <dir_register>
c0004ae1:	89 c3                	mov    ebx,eax
c0004ae3:	85 c0                	test   eax,eax
c0004ae5:	0f 85 40 ff ff ff    	jne    c0004a2b <f_mkdir+0x92>
c0004aeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004aef:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af4:	83 c0 16             	add    eax,0x16
c0004af7:	e8 58 d2 ff ff       	call   c0001d54 <st_dword>
c0004afc:	89 f1                	mov    ecx,esi
c0004afe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b06:	e8 d1 e5 ff ff       	call   c00030dc <st_clust.isra.1>
c0004b0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b0f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b17:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1f:	e8 4d e1 ff ff       	call   c0002c71 <sync_fs>
c0004b24:	89 c3                	mov    ebx,eax
c0004b26:	e9 14 ff ff ff       	jmp    c0004a3f <f_mkdir+0xa6>
c0004b2b:	83 c4 50             	add    esp,0x50
c0004b2e:	89 d8                	mov    eax,ebx
c0004b30:	5b                   	pop    ebx
c0004b31:	5e                   	pop    esi
c0004b32:	5f                   	pop    edi
c0004b33:	c3                   	ret    

c0004b34 <f_rename>:
c0004b34:	57                   	push   edi
c0004b35:	56                   	push   esi
c0004b36:	53                   	push   ebx
c0004b37:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b3d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b44:	e8 11 d6 ff ff       	call   c000215a <get_ldnumber>
c0004b49:	b9 02 00 00 00       	mov    ecx,0x2
c0004b4e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b52:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b59:	e8 41 d8 ff ff       	call   c000239f <mount_volume>
c0004b5e:	85 c0                	test   eax,eax
c0004b60:	0f 85 7a 01 00 00    	jne    c0004ce0 <f_rename+0x1ac>
c0004b66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6a:	83 ec 0c             	sub    esp,0xc
c0004b6d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b71:	68 00 02 00 00       	push   0x200
c0004b76:	e8 e5 0e 00 00       	call   c0005a60 <ff_memalloc>
c0004b7b:	89 c6                	mov    esi,eax
c0004b7d:	83 c4 10             	add    esp,0x10
c0004b80:	b8 11 00 00 00       	mov    eax,0x11
c0004b85:	85 f6                	test   esi,esi
c0004b87:	0f 84 53 01 00 00    	je     c0004ce0 <f_rename+0x1ac>
c0004b8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b91:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b98:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b9f:	e8 ed ec ff ff       	call   c0003891 <follow_path>
c0004ba4:	85 c0                	test   eax,eax
c0004ba6:	0f 85 20 01 00 00    	jne    c0004ccc <f_rename+0x198>
c0004bac:	b8 06 00 00 00       	mov    eax,0x6
c0004bb1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb6:	0f 85 10 01 00 00    	jne    c0004ccc <f_rename+0x198>
c0004bbc:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bc9:	e8 89 d1 ff ff       	call   c0001d57 <mem_cpy>
c0004bce:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bd7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bdb:	e8 77 d1 ff ff       	call   c0001d57 <mem_cpy>
c0004be0:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004be7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004beb:	e8 a1 ec ff ff       	call   c0003891 <follow_path>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	75 20                	jne    c0004c14 <f_rename+0xe0>
c0004bf4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bf8:	b8 08 00 00 00       	mov    eax,0x8
c0004bfd:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c01:	0f 85 c5 00 00 00    	jne    c0004ccc <f_rename+0x198>
c0004c07:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c12:	eb 03                	jmp    c0004c17 <f_rename+0xe3>
c0004c14:	83 f8 04             	cmp    eax,0x4
c0004c17:	0f 85 af 00 00 00    	jne    c0004ccc <f_rename+0x198>
c0004c1d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c21:	e8 ff ec ff ff       	call   c0003925 <dir_register>
c0004c26:	85 c0                	test   eax,eax
c0004c28:	0f 85 9e 00 00 00    	jne    c0004ccc <f_rename+0x198>
c0004c2e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c35:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3a:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c3e:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c41:	e8 11 d1 ff ff       	call   c0001d57 <mem_cpy>
c0004c46:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4a:	a8 10                	test   al,0x10
c0004c4c:	75 03                	jne    c0004c51 <f_rename+0x11d>
c0004c4e:	83 c8 20             	or     eax,0x20
c0004c51:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c58:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c60:	74 54                	je     c0004cb6 <f_rename+0x182>
c0004c62:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c66:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6a:	74 4a                	je     c0004cb6 <f_rename+0x182>
c0004c6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c70:	89 da                	mov    edx,ebx
c0004c72:	8a 07                	mov    al,BYTE PTR [edi]
c0004c74:	e8 3a e4 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0004c79:	89 c2                	mov    edx,eax
c0004c7b:	89 f8                	mov    eax,edi
c0004c7d:	e8 ef d2 ff ff       	call   c0001f71 <clst2sect>
c0004c82:	89 c2                	mov    edx,eax
c0004c84:	b8 02 00 00 00       	mov    eax,0x2
c0004c89:	85 d2                	test   edx,edx
c0004c8b:	74 3f                	je     c0004ccc <f_rename+0x198>
c0004c8d:	89 f8                	mov    eax,edi
c0004c8f:	e8 b6 d5 ff ff       	call   c000224a <move_window>
c0004c94:	85 c0                	test   eax,eax
c0004c96:	75 34                	jne    c0004ccc <f_rename+0x198>
c0004c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9c:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca0:	75 14                	jne    c0004cb6 <f_rename+0x182>
c0004ca2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ca9:	e8 2e e4 ff ff       	call   c00030dc <st_clust.isra.1>
c0004cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cba:	e8 51 ea ff ff       	call   c0003710 <dir_remove>
c0004cbf:	85 c0                	test   eax,eax
c0004cc1:	75 09                	jne    c0004ccc <f_rename+0x198>
c0004cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc7:	e8 a5 df ff ff       	call   c0002c71 <sync_fs>
c0004ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd0:	83 ec 0c             	sub    esp,0xc
c0004cd3:	56                   	push   esi
c0004cd4:	e8 9f 0d 00 00       	call   c0005a78 <ff_memfree>
c0004cd9:	83 c4 10             	add    esp,0x10
c0004cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce0:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce6:	5b                   	pop    ebx
c0004ce7:	5e                   	pop    esi
c0004ce8:	5f                   	pop    edi
c0004ce9:	c3                   	ret    

c0004cea <f_chmod>:
c0004cea:	57                   	push   edi
c0004ceb:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf0:	56                   	push   esi
c0004cf1:	53                   	push   ebx
c0004cf2:	83 ec 50             	sub    esp,0x50
c0004cf5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004cfd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d01:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d05:	e8 95 d6 ff ff       	call   c000239f <mount_volume>
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	75 7e                	jne    c0004d8c <f_chmod+0xa2>
c0004d0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d12:	83 ec 0c             	sub    esp,0xc
c0004d15:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d19:	68 00 02 00 00       	push   0x200
c0004d1e:	e8 3d 0d 00 00       	call   c0005a60 <ff_memalloc>
c0004d23:	89 c6                	mov    esi,eax
c0004d25:	83 c4 10             	add    esp,0x10
c0004d28:	b8 11 00 00 00       	mov    eax,0x11
c0004d2d:	85 f6                	test   esi,esi
c0004d2f:	74 5b                	je     c0004d8c <f_chmod+0xa2>
c0004d31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d35:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d39:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d40:	e8 4c eb ff ff       	call   c0003891 <follow_path>
c0004d45:	85 c0                	test   eax,eax
c0004d47:	75 2f                	jne    c0004d78 <f_chmod+0x8e>
c0004d49:	b8 06 00 00 00       	mov    eax,0x6
c0004d4e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d53:	75 23                	jne    c0004d78 <f_chmod+0x8e>
c0004d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d59:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5c:	21 fb                	and    ebx,edi
c0004d5e:	83 e3 27             	and    ebx,0x27
c0004d61:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d64:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d73:	e8 f9 de ff ff       	call   c0002c71 <sync_fs>
c0004d78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7c:	83 ec 0c             	sub    esp,0xc
c0004d7f:	56                   	push   esi
c0004d80:	e8 f3 0c 00 00       	call   c0005a78 <ff_memfree>
c0004d85:	83 c4 10             	add    esp,0x10
c0004d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8c:	83 c4 50             	add    esp,0x50
c0004d8f:	5b                   	pop    ebx
c0004d90:	5e                   	pop    esi
c0004d91:	5f                   	pop    edi
c0004d92:	c3                   	ret    

c0004d93 <f_utime>:
c0004d93:	56                   	push   esi
c0004d94:	b9 02 00 00 00       	mov    ecx,0x2
c0004d99:	53                   	push   ebx
c0004d9a:	83 ec 54             	sub    esp,0x54
c0004d9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004da5:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da9:	e8 f1 d5 ff ff       	call   c000239f <mount_volume>
c0004dae:	85 c0                	test   eax,eax
c0004db0:	0f 85 85 00 00 00    	jne    c0004e3b <f_utime+0xa8>
c0004db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dba:	83 ec 0c             	sub    esp,0xc
c0004dbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc1:	68 00 02 00 00       	push   0x200
c0004dc6:	e8 95 0c 00 00       	call   c0005a60 <ff_memalloc>
c0004dcb:	89 c3                	mov    ebx,eax
c0004dcd:	83 c4 10             	add    esp,0x10
c0004dd0:	b8 11 00 00 00       	mov    eax,0x11
c0004dd5:	85 db                	test   ebx,ebx
c0004dd7:	74 62                	je     c0004e3b <f_utime+0xa8>
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de1:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004de8:	e8 a4 ea ff ff       	call   c0003891 <follow_path>
c0004ded:	85 c0                	test   eax,eax
c0004def:	75 36                	jne    c0004e27 <f_utime+0x94>
c0004df1:	b8 06 00 00 00       	mov    eax,0x6
c0004df6:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfb:	75 2a                	jne    c0004e27 <f_utime+0x94>
c0004dfd:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e01:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e05:	c1 e2 10             	shl    edx,0x10
c0004e08:	09 c2                	or     edx,eax
c0004e0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e0e:	83 c0 16             	add    eax,0x16
c0004e11:	e8 3e cf ff ff       	call   c0001d54 <st_dword>
c0004e16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e22:	e8 4a de ff ff       	call   c0002c71 <sync_fs>
c0004e27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	53                   	push   ebx
c0004e2f:	e8 44 0c 00 00       	call   c0005a78 <ff_memfree>
c0004e34:	83 c4 10             	add    esp,0x10
c0004e37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3b:	83 c4 54             	add    esp,0x54
c0004e3e:	5b                   	pop    ebx
c0004e3f:	5e                   	pop    esi
c0004e40:	c3                   	ret    

c0004e41 <f_getlabel>:
c0004e41:	55                   	push   ebp
c0004e42:	31 c9                	xor    ecx,ecx
c0004e44:	57                   	push   edi
c0004e45:	56                   	push   esi
c0004e46:	53                   	push   ebx
c0004e47:	83 ec 5c             	sub    esp,0x5c
c0004e4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e4e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e52:	e8 48 d5 ff ff       	call   c000239f <mount_volume>
c0004e57:	89 c3                	mov    ebx,eax
c0004e59:	85 c0                	test   eax,eax
c0004e5b:	0f 85 e2 00 00 00    	jne    c0004f43 <f_getlabel+0x102>
c0004e61:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e66:	0f 84 d7 00 00 00    	je     c0004f43 <f_getlabel+0x102>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	31 d2                	xor    edx,edx
c0004e72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e82:	e8 7f e3 ff ff       	call   c0003206 <dir_sdi>
c0004e87:	89 c3                	mov    ebx,eax
c0004e89:	85 c0                	test   eax,eax
c0004e8b:	0f 85 a4 00 00 00    	jne    c0004f35 <f_getlabel+0xf4>
c0004e91:	ba 01 00 00 00       	mov    edx,0x1
c0004e96:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9a:	e8 54 e7 ff ff       	call   c00035f3 <dir_read>
c0004e9f:	89 c3                	mov    ebx,eax
c0004ea1:	85 c0                	test   eax,eax
c0004ea3:	0f 85 8c 00 00 00    	jne    c0004f35 <f_getlabel+0xf4>
c0004ea9:	31 f6                	xor    esi,esi
c0004eab:	31 c9                	xor    ecx,ecx
c0004ead:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb1:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb4:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb9:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec2:	e8 e5 ce ff ff       	call   c0001dac <dbc_1st>
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 16                	je     c0004ee1 <f_getlabel+0xa0>
c0004ecb:	83 ff 0b             	cmp    edi,0xb
c0004ece:	74 11                	je     c0004ee1 <f_getlabel+0xa0>
c0004ed0:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed9:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edc:	c1 e0 08             	shl    eax,0x8
c0004edf:	09 c2                	or     edx,eax
c0004ee1:	50                   	push   eax
c0004ee2:	50                   	push   eax
c0004ee3:	68 b5 01 00 00       	push   0x1b5
c0004ee8:	0f b7 d2             	movzx  edx,dx
c0004eeb:	52                   	push   edx
c0004eec:	e8 3f 0c 00 00       	call   c0005b30 <ff_oem2uni>
c0004ef1:	83 c4 10             	add    esp,0x10
c0004ef4:	66 85 c0             	test   ax,ax
c0004ef7:	74 25                	je     c0004f1e <f_getlabel+0xdd>
c0004ef9:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efd:	b9 04 00 00 00       	mov    ecx,0x4
c0004f02:	01 f2                	add    edx,esi
c0004f04:	0f b7 c0             	movzx  eax,ax
c0004f07:	e8 6c cf ff ff       	call   c0001e78 <put_utf>
c0004f0c:	84 c0                	test   al,al
c0004f0e:	74 0e                	je     c0004f1e <f_getlabel+0xdd>
c0004f10:	0f b6 c0             	movzx  eax,al
c0004f13:	01 c6                	add    esi,eax
c0004f15:	83 ff 0b             	cmp    edi,0xb
c0004f18:	74 06                	je     c0004f20 <f_getlabel+0xdf>
c0004f1a:	89 f9                	mov    ecx,edi
c0004f1c:	eb 8f                	jmp    c0004ead <f_getlabel+0x6c>
c0004f1e:	31 f6                	xor    esi,esi
c0004f20:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c0004f24:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0004f27:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c0004f2b:	74 16                	je     c0004f43 <f_getlabel+0x102>
c0004f2d:	4e                   	dec    esi
c0004f2e:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0004f31:	74 f1                	je     c0004f24 <f_getlabel+0xe3>
c0004f33:	eb 0e                	jmp    c0004f43 <f_getlabel+0x102>
c0004f35:	83 fb 04             	cmp    ebx,0x4
c0004f38:	75 09                	jne    c0004f43 <f_getlabel+0x102>
c0004f3a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3e:	31 db                	xor    ebx,ebx
c0004f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f43:	85 db                	test   ebx,ebx
c0004f45:	75 47                	jne    c0004f8e <f_getlabel+0x14d>
c0004f47:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f4c:	74 40                	je     c0004f8e <f_getlabel+0x14d>
c0004f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f52:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f55:	e8 f0 d2 ff ff       	call   c000224a <move_window>
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	85 c0                	test   eax,eax
c0004f5e:	75 2e                	jne    c0004f8e <f_getlabel+0x14d>
c0004f60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f64:	b8 43 00 00 00       	mov    eax,0x43
c0004f69:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f6b:	80 f9 03             	cmp    cl,0x3
c0004f6e:	74 0f                	je     c0004f7f <f_getlabel+0x13e>
c0004f70:	31 c0                	xor    eax,eax
c0004f72:	80 f9 04             	cmp    cl,0x4
c0004f75:	0f 94 c0             	sete   al
c0004f78:	48                   	dec    eax
c0004f79:	83 e0 c3             	and    eax,0xffffffc3
c0004f7c:	83 c0 64             	add    eax,0x64
c0004f7f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f83:	e8 b0 cd ff ff       	call   c0001d38 <ld_dword>
c0004f88:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f8c:	89 07                	mov    DWORD PTR [edi],eax
c0004f8e:	83 c4 5c             	add    esp,0x5c
c0004f91:	89 d8                	mov    eax,ebx
c0004f93:	5b                   	pop    ebx
c0004f94:	5e                   	pop    esi
c0004f95:	5f                   	pop    edi
c0004f96:	5d                   	pop    ebp
c0004f97:	c3                   	ret    

c0004f98 <f_setlabel>:
c0004f98:	56                   	push   esi
c0004f99:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9e:	53                   	push   ebx
c0004f9f:	83 ec 54             	sub    esp,0x54
c0004fa2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004faa:	e8 f0 d3 ff ff       	call   c000239f <mount_volume>
c0004faf:	89 c6                	mov    esi,eax
c0004fb1:	85 c0                	test   eax,eax
c0004fb3:	0f 85 67 01 00 00    	jne    c0005120 <f_setlabel+0x188>
c0004fb9:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbe:	ba 20 00 00 00       	mov    edx,0x20
c0004fc3:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc7:	31 db                	xor    ebx,ebx
c0004fc9:	e8 9e cd ff ff       	call   c0001d6c <mem_set>
c0004fce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fd2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd5:	76 5b                	jbe    c0005032 <f_setlabel+0x9a>
c0004fd7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fdb:	e8 d2 cd ff ff       	call   c0001db2 <tchar2uni>
c0004fe0:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe5:	76 0a                	jbe    c0004ff1 <f_setlabel+0x59>
c0004fe7:	be 06 00 00 00       	mov    esi,0x6
c0004fec:	e9 2f 01 00 00       	jmp    c0005120 <f_setlabel+0x188>
c0004ff1:	83 ec 0c             	sub    esp,0xc
c0004ff4:	50                   	push   eax
c0004ff5:	e8 aa 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ffa:	5a                   	pop    edx
c0004ffb:	59                   	pop    ecx
c0004ffc:	68 b5 01 00 00       	push   0x1b5
c0005001:	50                   	push   eax
c0005002:	e8 89 0a 00 00       	call   c0005a90 <ff_uni2oem>
c0005007:	83 c4 10             	add    esp,0x10
c000500a:	89 c6                	mov    esi,eax
c000500c:	66 85 c0             	test   ax,ax
c000500f:	74 d6                	je     c0004fe7 <f_setlabel+0x4f>
c0005011:	0f b7 d0             	movzx  edx,ax
c0005014:	b8 70 ed 01 c0       	mov    eax,0xc001ed70
c0005019:	e8 7c cd ff ff       	call   c0001d9a <chk_chr>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 c5                	jne    c0004fe7 <f_setlabel+0x4f>
c0005022:	66 81 fe ff 00       	cmp    si,0xff
c0005027:	0f 87 c9 00 00 00    	ja     c00050f6 <f_setlabel+0x15e>
c000502d:	e9 e4 00 00 00       	jmp    c0005116 <f_setlabel+0x17e>
c0005032:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005037:	74 ae                	je     c0004fe7 <f_setlabel+0x4f>
c0005039:	85 db                	test   ebx,ebx
c000503b:	74 0e                	je     c000504b <f_setlabel+0xb3>
c000503d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005040:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005045:	75 04                	jne    c000504b <f_setlabel+0xb3>
c0005047:	89 c3                	mov    ebx,eax
c0005049:	eb ee                	jmp    c0005039 <f_setlabel+0xa1>
c000504b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504f:	31 d2                	xor    edx,edx
c0005051:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005055:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005059:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005061:	e8 a0 e1 ff ff       	call   c0003206 <dir_sdi>
c0005066:	89 c6                	mov    esi,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	0f 85 b0 00 00 00    	jne    c0005120 <f_setlabel+0x188>
c0005070:	ba 01 00 00 00       	mov    edx,0x1
c0005075:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005079:	e8 75 e5 ff ff       	call   c00035f3 <dir_read>
c000507e:	85 c0                	test   eax,eax
c0005080:	75 18                	jne    c000509a <f_setlabel+0x102>
c0005082:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005086:	85 db                	test   ebx,ebx
c0005088:	74 0b                	je     c0005095 <f_setlabel+0xfd>
c000508a:	b9 0b 00 00 00       	mov    ecx,0xb
c000508f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005093:	eb 47                	jmp    c00050dc <f_setlabel+0x144>
c0005095:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005098:	eb 47                	jmp    c00050e1 <f_setlabel+0x149>
c000509a:	83 f8 04             	cmp    eax,0x4
c000509d:	75 53                	jne    c00050f2 <f_setlabel+0x15a>
c000509f:	85 db                	test   ebx,ebx
c00050a1:	74 7d                	je     c0005120 <f_setlabel+0x188>
c00050a3:	ba 01 00 00 00       	mov    edx,0x1
c00050a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ac:	e8 e1 e4 ff ff       	call   c0003592 <dir_alloc>
c00050b1:	89 c6                	mov    esi,eax
c00050b3:	85 c0                	test   eax,eax
c00050b5:	75 69                	jne    c0005120 <f_setlabel+0x188>
c00050b7:	b9 20 00 00 00       	mov    ecx,0x20
c00050bc:	31 d2                	xor    edx,edx
c00050be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c2:	e8 a5 cc ff ff       	call   c0001d6c <mem_set>
c00050c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00050d4:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050dc:	e8 76 cc ff ff       	call   c0001d57 <mem_cpy>
c00050e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ed:	e8 7f db ff ff       	call   c0002c71 <sync_fs>
c00050f2:	89 c6                	mov    esi,eax
c00050f4:	eb 2a                	jmp    c0005120 <f_setlabel+0x188>
c00050f6:	83 fb 09             	cmp    ebx,0x9
c00050f9:	0f 87 e8 fe ff ff    	ja     c0004fe7 <f_setlabel+0x4f>
c00050ff:	89 f0                	mov    eax,esi
c0005101:	66 c1 e8 08          	shr    ax,0x8
c0005105:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005109:	43                   	inc    ebx
c000510a:	89 f0                	mov    eax,esi
c000510c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005110:	43                   	inc    ebx
c0005111:	e9 b8 fe ff ff       	jmp    c0004fce <f_setlabel+0x36>
c0005116:	83 fb 0a             	cmp    ebx,0xa
c0005119:	76 ef                	jbe    c000510a <f_setlabel+0x172>
c000511b:	e9 c7 fe ff ff       	jmp    c0004fe7 <f_setlabel+0x4f>
c0005120:	83 c4 54             	add    esp,0x54
c0005123:	89 f0                	mov    eax,esi
c0005125:	5b                   	pop    ebx
c0005126:	5e                   	pop    esi
c0005127:	c3                   	ret    

c0005128 <f_expand>:
c0005128:	55                   	push   ebp
c0005129:	57                   	push   edi
c000512a:	56                   	push   esi
c000512b:	53                   	push   ebx
c000512c:	83 ec 2c             	sub    esp,0x2c
c000512f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000513b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513f:	89 d8                	mov    eax,ebx
c0005141:	e8 5a d0 ff ff       	call   c00021a0 <validate>
c0005146:	89 c6                	mov    esi,eax
c0005148:	85 c0                	test   eax,eax
c000514a:	0f 85 2e 01 00 00    	jne    c000527e <f_expand+0x156>
c0005150:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005154:	85 f6                	test   esi,esi
c0005156:	0f 85 22 01 00 00    	jne    c000527e <f_expand+0x156>
c000515c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005161:	75 0a                	jne    c000516d <f_expand+0x45>
c0005163:	be 07 00 00 00       	mov    esi,0x7
c0005168:	e9 11 01 00 00       	jmp    c000527e <f_expand+0x156>
c000516d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005171:	75 f0                	jne    c0005163 <f_expand+0x3b>
c0005173:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005177:	74 ea                	je     c0005163 <f_expand+0x3b>
c0005179:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517d:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005181:	c1 e1 09             	shl    ecx,0x9
c0005184:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005187:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c7                	mov    edi,eax
c0005193:	31 d2                	xor    edx,edx
c0005195:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005199:	f7 f1                	div    ecx
c000519b:	01 f8                	add    eax,edi
c000519d:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a4:	83 ff 01             	cmp    edi,0x1
c00051a7:	76 05                	jbe    c00051ae <f_expand+0x86>
c00051a9:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051ac:	77 05                	ja     c00051b3 <f_expand+0x8b>
c00051ae:	bf 02 00 00 00       	mov    edi,0x2
c00051b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b6:	89 fd                	mov    ebp,edi
c00051b8:	31 c9                	xor    ecx,ecx
c00051ba:	89 ea                	mov    edx,ebp
c00051bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051c2:	e8 3d df ff ff       	call   c0003104 <get_fat.isra.2>
c00051c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051cb:	45                   	inc    ebp
c00051cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051d0:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d3:	77 05                	ja     c00051da <f_expand+0xb2>
c00051d5:	bd 02 00 00 00       	mov    ebp,0x2
c00051da:	83 f8 01             	cmp    eax,0x1
c00051dd:	74 20                	je     c00051ff <f_expand+0xd7>
c00051df:	83 f8 ff             	cmp    eax,0xffffffff
c00051e2:	74 22                	je     c0005206 <f_expand+0xde>
c00051e4:	85 c0                	test   eax,eax
c00051e6:	75 09                	jne    c00051f1 <f_expand+0xc9>
c00051e8:	41                   	inc    ecx
c00051e9:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ed:	75 07                	jne    c00051f6 <f_expand+0xce>
c00051ef:	eb 1c                	jmp    c000520d <f_expand+0xe5>
c00051f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f4:	31 c9                	xor    ecx,ecx
c00051f6:	39 fd                	cmp    ebp,edi
c00051f8:	75 c0                	jne    c00051ba <f_expand+0x92>
c00051fa:	e9 64 ff ff ff       	jmp    c0005163 <f_expand+0x3b>
c00051ff:	be 02 00 00 00       	mov    esi,0x2
c0005204:	eb 78                	jmp    c000527e <f_expand+0x156>
c0005206:	be 01 00 00 00       	mov    esi,0x1
c000520b:	eb 71                	jmp    c000527e <f_expand+0x156>
c000520d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005212:	74 2b                	je     c000523f <f_expand+0x117>
c0005214:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005217:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000521b:	85 ed                	test   ebp,ebp
c000521d:	74 24                	je     c0005243 <f_expand+0x11b>
c000521f:	83 c9 ff             	or     ecx,0xffffffff
c0005222:	83 fd 01             	cmp    ebp,0x1
c0005225:	74 03                	je     c000522a <f_expand+0x102>
c0005227:	8d 4f 01             	lea    ecx,[edi+0x1]
c000522a:	89 fa                	mov    edx,edi
c000522c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005230:	e8 6d d4 ff ff       	call   c00026a2 <put_fat>
c0005235:	85 c0                	test   eax,eax
c0005237:	75 43                	jne    c000527c <f_expand+0x154>
c0005239:	89 f8                	mov    eax,edi
c000523b:	4d                   	dec    ebp
c000523c:	47                   	inc    edi
c000523d:	eb dc                	jmp    c000521b <f_expand+0xf3>
c000523f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005242:	48                   	dec    eax
c0005243:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005247:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000524c:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524f:	74 2d                	je     c000527e <f_expand+0x156>
c0005251:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005255:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005258:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005268:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000526b:	39 c8                	cmp    eax,ecx
c000526d:	77 0f                	ja     c000527e <f_expand+0x156>
c000526f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005273:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005277:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000527a:	eb 02                	jmp    c000527e <f_expand+0x156>
c000527c:	89 c6                	mov    esi,eax
c000527e:	83 c4 2c             	add    esp,0x2c
c0005281:	89 f0                	mov    eax,esi
c0005283:	5b                   	pop    ebx
c0005284:	5e                   	pop    esi
c0005285:	5f                   	pop    edi
c0005286:	5d                   	pop    ebp
c0005287:	c3                   	ret    

c0005288 <f_mkfs>:
c0005288:	55                   	push   ebp
c0005289:	57                   	push   edi
c000528a:	bf 0b 00 00 00       	mov    edi,0xb
c000528f:	56                   	push   esi
c0005290:	53                   	push   ebx
c0005291:	83 ec 4c             	sub    esp,0x4c
c0005294:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005298:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000529c:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a0:	e8 b5 ce ff ff       	call   c000215a <get_ldnumber>
c00052a5:	85 c0                	test   eax,eax
c00052a7:	0f 88 a6 07 00 00    	js     c0005a53 <f_mkfs+0x7cb>
c00052ad:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b4:	85 d2                	test   edx,edx
c00052b6:	74 03                	je     c00052bb <f_mkfs+0x33>
c00052b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052bb:	85 db                	test   ebx,ebx
c00052bd:	75 05                	jne    c00052c4 <f_mkfs+0x3c>
c00052bf:	bb 60 ed 01 c0       	mov    ebx,0xc001ed60
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00052cb:	83 ec 0c             	sub    esp,0xc
c00052ce:	bf 03 00 00 00       	mov    edi,0x3
c00052d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d7:	e8 01 ca ff ff       	call   c0001cdd <disk_initialize>
c00052dc:	83 c4 10             	add    esp,0x10
c00052df:	a8 01                	test   al,0x1
c00052e1:	0f 85 6c 07 00 00    	jne    c0005a53 <f_mkfs+0x7cb>
c00052e7:	bf 0a 00 00 00       	mov    edi,0xa
c00052ec:	a8 04                	test   al,0x4
c00052ee:	0f 85 5f 07 00 00    	jne    c0005a53 <f_mkfs+0x7cb>
c00052f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052fb:	85 c0                	test   eax,eax
c00052fd:	75 20                	jne    c000531f <f_mkfs+0x97>
c00052ff:	51                   	push   ecx
c0005300:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005304:	50                   	push   eax
c0005305:	6a 03                	push   0x3
c0005307:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000530b:	e8 fc c9 ff ff       	call   c0001d0c <disk_ioctl>
c0005310:	83 c4 10             	add    esp,0x10
c0005313:	85 c0                	test   eax,eax
c0005315:	74 08                	je     c000531f <f_mkfs+0x97>
c0005317:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005323:	8d 42 ff             	lea    eax,[edx-0x1]
c0005326:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000532b:	77 04                	ja     c0005331 <f_mkfs+0xa9>
c000532d:	85 c2                	test   edx,eax
c000532f:	74 08                	je     c0005339 <f_mkfs+0xb1>
c0005331:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005339:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000533c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0005340:	48                   	dec    eax
c0005341:	3c 01                	cmp    al,0x1
c0005343:	76 05                	jbe    c000534a <f_mkfs+0xc2>
c0005345:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c000534a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	48                   	dec    eax
c0005352:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005357:	77 07                	ja     c0005360 <f_mkfs+0xd8>
c0005359:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535e:	74 08                	je     c0005368 <f_mkfs+0xe0>
c0005360:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005368:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000536b:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005371:	77 07                	ja     c000537a <f_mkfs+0xf2>
c0005373:	8d 47 ff             	lea    eax,[edi-0x1]
c0005376:	85 f8                	test   eax,edi
c0005378:	74 02                	je     c000537c <f_mkfs+0xf4>
c000537a:	31 ff                	xor    edi,edi
c000537c:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005384:	77 0a                	ja     c0005390 <f_mkfs+0x108>
c0005386:	bf 11 00 00 00       	mov    edi,0x11
c000538b:	e9 c3 06 00 00       	jmp    c0005a53 <f_mkfs+0x7cb>
c0005390:	8a 1b                	mov    bl,BYTE PTR [ebx]
c0005392:	89 ee                	mov    esi,ebp
c0005394:	85 ed                	test   ebp,ebp
c0005396:	75 1b                	jne    c00053b3 <f_mkfs+0x12b>
c0005398:	83 ec 0c             	sub    esp,0xc
c000539b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a4:	50                   	push   eax
c00053a5:	e8 b6 06 00 00       	call   c0005a60 <ff_memalloc>
c00053aa:	83 c4 10             	add    esp,0x10
c00053ad:	89 c6                	mov    esi,eax
c00053af:	85 c0                	test   eax,eax
c00053b1:	74 d3                	je     c0005386 <f_mkfs+0xfe>
c00053b3:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053bb:	52                   	push   edx
c00053bc:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053c0:	50                   	push   eax
c00053c1:	6a 01                	push   0x1
c00053c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c7:	e8 40 c9 ff ff       	call   c0001d0c <disk_ioctl>
c00053cc:	83 c4 10             	add    esp,0x10
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 25 06 00 00    	jne    c00059fc <f_mkfs+0x774>
c00053d7:	88 d8                	mov    al,bl
c00053d9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053e1:	24 08                	and    al,0x8
c00053e3:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e7:	75 18                	jne    c0005401 <f_mkfs+0x179>
c00053e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ed:	83 f8 3f             	cmp    eax,0x3f
c00053f0:	76 0f                	jbe    c0005401 <f_mkfs+0x179>
c00053f2:	83 e8 3f             	sub    eax,0x3f
c00053f5:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005409:	83 f8 7f             	cmp    eax,0x7f
c000540c:	0f 86 52 02 00 00    	jbe    c0005664 <f_mkfs+0x3dc>
c0005412:	b9 80 00 00 00       	mov    ecx,0x80
c0005417:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541d:	77 05                	ja     c0005424 <f_mkfs+0x19c>
c000541f:	89 f9                	mov    ecx,edi
c0005421:	c1 e9 09             	shr    ecx,0x9
c0005424:	88 d8                	mov    al,bl
c0005426:	83 e0 01             	and    eax,0x1
c0005429:	80 e3 02             	and    bl,0x2
c000542c:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c0005430:	74 0a                	je     c000543c <f_mkfs+0x1b4>
c0005432:	84 c0                	test   al,al
c0005434:	0f 84 4c 01 00 00    	je     c0005586 <f_mkfs+0x2fe>
c000543a:	eb 38                	jmp    c0005474 <f_mkfs+0x1ec>
c000543c:	bf 13 00 00 00       	mov    edi,0x13
c0005441:	84 c0                	test   al,al
c0005443:	75 2f                	jne    c0005474 <f_mkfs+0x1ec>
c0005445:	e9 c9 05 00 00       	jmp    c0005a13 <f_mkfs+0x78b>
c000544a:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544f:	0f 85 08 02 00 00    	jne    c000565d <f_mkfs+0x3d5>
c0005455:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000545a:	0f 86 e1 01 00 00    	jbe    c0005641 <f_mkfs+0x3b9>
c0005460:	85 c9                	test   ecx,ecx
c0005462:	0f 85 bd 05 00 00    	jne    c0005a25 <f_mkfs+0x79d>
c0005468:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000546b:	83 f9 40             	cmp    ecx,0x40
c000546e:	0f 87 c1 05 00 00    	ja     c0005a35 <f_mkfs+0x7ad>
c0005474:	89 cf                	mov    edi,ecx
c0005476:	85 c9                	test   ecx,ecx
c0005478:	75 1d                	jne    c0005497 <f_mkfs+0x20f>
c000547a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547e:	ba 40 ed 01 c0       	mov    edx,0xc001ed40
c0005483:	c1 eb 0c             	shr    ebx,0xc
c0005486:	bf 01 00 00 00       	mov    edi,0x1
c000548b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548e:	66 85 c0             	test   ax,ax
c0005491:	0f 85 5f 01 00 00    	jne    c00055f6 <f_mkfs+0x36e>
c0005497:	31 d2                	xor    edx,edx
c0005499:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549d:	f7 f7                	div    edi
c000549f:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a4:	0f 86 5e 01 00 00    	jbe    c0005608 <f_mkfs+0x380>
c00054aa:	83 c0 02             	add    eax,0x2
c00054ad:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054b2:	01 c0                	add    eax,eax
c00054b4:	05 ff 01 00 00       	add    eax,0x1ff
c00054b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054c1:	c1 e8 09             	shr    eax,0x9
c00054c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054cc:	c1 e0 05             	shl    eax,0x5
c00054cf:	c1 e8 09             	shr    eax,0x9
c00054d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e3:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ef:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f8:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005504:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005508:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c000550c:	f7 d8                	neg    eax
c000550e:	21 c3                	and    ebx,eax
c0005510:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005514:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005519:	0f 85 fc 00 00 00    	jne    c000561b <f_mkfs+0x393>
c000551f:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005523:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005527:	89 f8                	mov    eax,edi
c0005529:	c1 e0 04             	shl    eax,0x4
c000552c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005530:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005534:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005538:	0f 82 26 01 00 00    	jb     c0005664 <f_mkfs+0x3dc>
c000553e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005542:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005546:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554b:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c000554f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005553:	29 d0                	sub    eax,edx
c0005555:	31 d2                	xor    edx,edx
c0005557:	f7 f7                	div    edi
c0005559:	89 c3                	mov    ebx,eax
c000555b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005560:	0f 85 e4 fe ff ff    	jne    c000544a <f_mkfs+0x1c2>
c0005566:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000556b:	0f 87 02 01 00 00    	ja     c0005673 <f_mkfs+0x3eb>
c0005571:	85 c9                	test   ecx,ecx
c0005573:	0f 85 eb 00 00 00    	jne    c0005664 <f_mkfs+0x3dc>
c0005579:	83 ff 01             	cmp    edi,0x1
c000557c:	0f 86 e2 00 00 00    	jbe    c0005664 <f_mkfs+0x3dc>
c0005582:	89 f9                	mov    ecx,edi
c0005584:	d1 e9                	shr    ecx,1
c0005586:	89 cb                	mov    ebx,ecx
c0005588:	85 c9                	test   ecx,ecx
c000558a:	75 26                	jne    c00055b2 <f_mkfs+0x32a>
c000558c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005590:	ba 50 ed 01 c0       	mov    edx,0xc001ed50
c0005595:	c1 eb 11             	shr    ebx,0x11
c0005598:	b9 01 00 00 00       	mov    ecx,0x1
c000559d:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055a0:	66 85 c0             	test   ax,ax
c00055a3:	74 0b                	je     c00055b0 <f_mkfs+0x328>
c00055a5:	83 c2 02             	add    edx,0x2
c00055a8:	39 d8                	cmp    eax,ebx
c00055aa:	77 04                	ja     c00055b0 <f_mkfs+0x328>
c00055ac:	01 c9                	add    ecx,ecx
c00055ae:	eb ed                	jmp    c000559d <f_mkfs+0x315>
c00055b0:	31 db                	xor    ebx,ebx
c00055b2:	31 d2                	xor    edx,edx
c00055b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b8:	f7 f1                	div    ecx
c00055ba:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055c1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c6:	c1 ea 09             	shr    edx,0x9
c00055c9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055d2:	0f 87 8c 00 00 00    	ja     c0005664 <f_mkfs+0x3dc>
c00055d8:	89 cf                	mov    edi,ecx
c00055da:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055e2:	89 d9                	mov    ecx,ebx
c00055e4:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055ec:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055f1:	e9 e0 fe ff ff       	jmp    c00054d6 <f_mkfs+0x24e>
c00055f6:	83 c2 02             	add    edx,0x2
c00055f9:	39 d8                	cmp    eax,ebx
c00055fb:	0f 87 96 fe ff ff    	ja     c0005497 <f_mkfs+0x20f>
c0005601:	01 ff                	add    edi,edi
c0005603:	e9 83 fe ff ff       	jmp    c000548b <f_mkfs+0x203>
c0005608:	8d 04 40             	lea    eax,[eax+eax*2]
c000560b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005610:	40                   	inc    eax
c0005611:	d1 e8                	shr    eax,1
c0005613:	83 c0 03             	add    eax,0x3
c0005616:	e9 99 fe ff ff       	jmp    c00054b4 <f_mkfs+0x22c>
c000561b:	31 d2                	xor    edx,edx
c000561d:	89 d8                	mov    eax,ebx
c000561f:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005623:	85 d2                	test   edx,edx
c0005625:	74 09                	je     c0005630 <f_mkfs+0x3a8>
c0005627:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000562b:	4b                   	dec    ebx
c000562c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0005630:	89 d8                	mov    eax,ebx
c0005632:	31 d2                	xor    edx,edx
c0005634:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005638:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c000563c:	e9 e6 fe ff ff       	jmp    c0005527 <f_mkfs+0x29f>
c0005641:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005646:	77 2b                	ja     c0005673 <f_mkfs+0x3eb>
c0005648:	85 c9                	test   ecx,ecx
c000564a:	75 18                	jne    c0005664 <f_mkfs+0x3dc>
c000564c:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005655:	0f 86 19 fe ff ff    	jbe    c0005474 <f_mkfs+0x1ec>
c000565b:	eb 07                	jmp    c0005664 <f_mkfs+0x3dc>
c000565d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005662:	76 0a                	jbe    c000566e <f_mkfs+0x3e6>
c0005664:	bf 0e 00 00 00       	mov    edi,0xe
c0005669:	e9 a5 03 00 00       	jmp    c0005a13 <f_mkfs+0x78b>
c000566e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005673:	31 d2                	xor    edx,edx
c0005675:	b9 00 02 00 00       	mov    ecx,0x200
c000567a:	89 f0                	mov    eax,esi
c000567c:	e8 eb c6 ff ff       	call   c0001d6c <mem_set>
c0005681:	b9 0b 00 00 00       	mov    ecx,0xb
c0005686:	ba f2 ec 01 c0       	mov    edx,0xc001ecf2
c000568b:	89 f0                	mov    eax,esi
c000568d:	e8 c5 c6 ff ff       	call   c0001d57 <mem_cpy>
c0005692:	8d 46 0b             	lea    eax,[esi+0xb]
c0005695:	ba 00 02 00 00       	mov    edx,0x200
c000569a:	e8 b1 c6 ff ff       	call   c0001d50 <st_word>
c000569f:	89 f8                	mov    eax,edi
c00056a1:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a6:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a9:	8d 46 0e             	lea    eax,[esi+0xe]
c00056ac:	e8 9f c6 ff ff       	call   c0001d50 <st_word>
c00056b1:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b5:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056b8:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056bd:	75 08                	jne    c00056c7 <f_mkfs+0x43f>
c00056bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056cb:	8d 46 11             	lea    eax,[esi+0x11]
c00056ce:	e8 7d c6 ff ff       	call   c0001d50 <st_word>
c00056d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056dd:	77 0a                	ja     c00056e9 <f_mkfs+0x461>
c00056df:	8d 46 13             	lea    eax,[esi+0x13]
c00056e2:	e8 69 c6 ff ff       	call   c0001d50 <st_word>
c00056e7:	eb 08                	jmp    c00056f1 <f_mkfs+0x469>
c00056e9:	8d 46 20             	lea    eax,[esi+0x20]
c00056ec:	e8 63 c6 ff ff       	call   c0001d54 <st_dword>
c00056f1:	8d 46 18             	lea    eax,[esi+0x18]
c00056f4:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f9:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fd:	e8 4e c6 ff ff       	call   c0001d50 <st_word>
c0005702:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005705:	ba ff 00 00 00       	mov    edx,0xff
c000570a:	e8 41 c6 ff ff       	call   c0001d50 <st_word>
c000570f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005716:	e8 39 c6 ff ff       	call   c0001d54 <st_dword>
c000571b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005720:	75 57                	jne    c0005779 <f_mkfs+0x4f1>
c0005722:	8d 46 43             	lea    eax,[esi+0x43]
c0005725:	ba 00 00 21 50       	mov    edx,0x50210000
c000572a:	e8 25 c6 ff ff       	call   c0001d54 <st_dword>
c000572f:	8d 46 24             	lea    eax,[esi+0x24]
c0005732:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005736:	e8 19 c6 ff ff       	call   c0001d54 <st_dword>
c000573b:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573e:	ba 02 00 00 00       	mov    edx,0x2
c0005743:	e8 0c c6 ff ff       	call   c0001d54 <st_dword>
c0005748:	8d 46 30             	lea    eax,[esi+0x30]
c000574b:	ba 01 00 00 00       	mov    edx,0x1
c0005750:	e8 fb c5 ff ff       	call   c0001d50 <st_word>
c0005755:	8d 46 32             	lea    eax,[esi+0x32]
c0005758:	ba 06 00 00 00       	mov    edx,0x6
c000575d:	e8 ee c5 ff ff       	call   c0001d50 <st_word>
c0005762:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005766:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c000576a:	8d 46 47             	lea    eax,[esi+0x47]
c000576d:	b9 13 00 00 00       	mov    ecx,0x13
c0005772:	ba fe ec 01 c0       	mov    edx,0xc001ecfe
c0005777:	eb 2f                	jmp    c00057a8 <f_mkfs+0x520>
c0005779:	8d 46 27             	lea    eax,[esi+0x27]
c000577c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005781:	e8 ce c5 ff ff       	call   c0001d54 <st_dword>
c0005786:	8d 46 16             	lea    eax,[esi+0x16]
c0005789:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c000578e:	e8 bd c5 ff ff       	call   c0001d50 <st_word>
c0005793:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005797:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c000579b:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579e:	b9 13 00 00 00       	mov    ecx,0x13
c00057a3:	ba 12 ed 01 c0       	mov    edx,0xc001ed12
c00057a8:	e8 aa c5 ff ff       	call   c0001d57 <mem_cpy>
c00057ad:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057bc:	e8 8f c5 ff ff       	call   c0001d50 <st_word>
c00057c1:	6a 01                	push   0x1
c00057c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c7:	56                   	push   esi
c00057c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057cc:	e8 25 c5 ff ff       	call   c0001cf6 <disk_write>
c00057d1:	83 c4 10             	add    esp,0x10
c00057d4:	85 c0                	test   eax,eax
c00057d6:	0f 85 20 02 00 00    	jne    c00059fc <f_mkfs+0x774>
c00057dc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057e1:	0f 85 98 00 00 00    	jne    c000587f <f_mkfs+0x5f7>
c00057e7:	6a 01                	push   0x1
c00057e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ed:	83 c0 06             	add    eax,0x6
c00057f0:	50                   	push   eax
c00057f1:	56                   	push   esi
c00057f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f6:	e8 fb c4 ff ff       	call   c0001cf6 <disk_write>
c00057fb:	b9 00 02 00 00       	mov    ecx,0x200
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	e8 63 c5 ff ff       	call   c0001d6c <mem_set>
c0005809:	ba 52 52 61 41       	mov    edx,0x41615252
c000580e:	89 f0                	mov    eax,esi
c0005810:	e8 3f c5 ff ff       	call   c0001d54 <st_dword>
c0005815:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c000581b:	ba 72 72 41 61       	mov    edx,0x61417272
c0005820:	e8 2f c5 ff ff       	call   c0001d54 <st_dword>
c0005825:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005828:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582e:	e8 21 c5 ff ff       	call   c0001d54 <st_dword>
c0005833:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005839:	ba 02 00 00 00       	mov    edx,0x2
c000583e:	e8 11 c5 ff ff       	call   c0001d54 <st_dword>
c0005843:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005848:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584e:	e8 fd c4 ff ff       	call   c0001d50 <st_word>
c0005853:	6a 01                	push   0x1
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	83 c0 07             	add    eax,0x7
c000585c:	50                   	push   eax
c000585d:	56                   	push   esi
c000585e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005862:	e8 8f c4 ff ff       	call   c0001cf6 <disk_write>
c0005867:	83 c4 20             	add    esp,0x20
c000586a:	6a 01                	push   0x1
c000586c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005870:	40                   	inc    eax
c0005871:	50                   	push   eax
c0005872:	56                   	push   esi
c0005873:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005877:	e8 7a c4 ff ff       	call   c0001cf6 <disk_write>
c000587c:	83 c4 10             	add    esp,0x10
c000587f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005883:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005887:	c1 e8 09             	shr    eax,0x9
c000588a:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005890:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005894:	31 d2                	xor    edx,edx
c0005896:	31 db                	xor    ebx,ebx
c0005898:	89 f0                	mov    eax,esi
c000589a:	e8 cd c4 ff ff       	call   c0001d6c <mem_set>
c000589f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a7:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058ac:	0f 94 c3             	sete   bl
c00058af:	4b                   	dec    ebx
c00058b0:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b6:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058bc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058c1:	75 21                	jne    c00058e4 <f_mkfs+0x65c>
c00058c3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c8:	89 f0                	mov    eax,esi
c00058ca:	e8 85 c4 ff ff       	call   c0001d54 <st_dword>
c00058cf:	8d 46 04             	lea    eax,[esi+0x4]
c00058d2:	83 ca ff             	or     edx,0xffffffff
c00058d5:	e8 7a c4 ff ff       	call   c0001d54 <st_dword>
c00058da:	8d 46 08             	lea    eax,[esi+0x8]
c00058dd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058e2:	eb 04                	jmp    c00058e8 <f_mkfs+0x660>
c00058e4:	89 da                	mov    edx,ebx
c00058e6:	89 f0                	mov    eax,esi
c00058e8:	e8 67 c4 ff ff       	call   c0001d54 <st_dword>
c00058ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005901:	76 08                	jbe    c000590b <f_mkfs+0x683>
c0005903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005913:	56                   	push   esi
c0005914:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005918:	e8 d9 c3 ff ff       	call   c0001cf6 <disk_write>
c000591d:	83 c4 10             	add    esp,0x10
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 85 d4 00 00 00    	jne    c00059fc <f_mkfs+0x774>
c0005928:	b9 00 02 00 00       	mov    ecx,0x200
c000592d:	31 d2                	xor    edx,edx
c000592f:	89 f0                	mov    eax,esi
c0005931:	e8 36 c4 ff ff       	call   c0001d6c <mem_set>
c0005936:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000593a:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593e:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c0005942:	75 b1                	jne    c00058f5 <f_mkfs+0x66d>
c0005944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005948:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005950:	40                   	inc    eax
c0005951:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005955:	0f 87 61 ff ff ff    	ja     c00058bc <f_mkfs+0x634>
c000595b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005960:	74 04                	je     c0005966 <f_mkfs+0x6de>
c0005962:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005966:	89 fb                	mov    ebx,edi
c0005968:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000596c:	76 04                	jbe    c0005972 <f_mkfs+0x6ea>
c000596e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0005972:	53                   	push   ebx
c0005973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005977:	56                   	push   esi
c0005978:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000597c:	e8 75 c3 ff ff       	call   c0001cf6 <disk_write>
c0005981:	83 c4 10             	add    esp,0x10
c0005984:	85 c0                	test   eax,eax
c0005986:	75 74                	jne    c00059fc <f_mkfs+0x774>
c0005988:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000598c:	29 df                	sub    edi,ebx
c000598e:	75 d6                	jne    c0005966 <f_mkfs+0x6de>
c0005990:	b1 0c                	mov    cl,0xc
c0005992:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005997:	74 18                	je     c00059b1 <f_mkfs+0x729>
c0005999:	b1 06                	mov    cl,0x6
c000599b:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a3:	77 0c                	ja     c00059b1 <f_mkfs+0x729>
c00059a5:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059aa:	0f 94 c1             	sete   cl
c00059ad:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059b1:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b6:	75 2d                	jne    c00059e5 <f_mkfs+0x75d>
c00059b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059bc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	0f b6 c9             	movzx  ecx,cl
c00059ce:	56                   	push   esi
c00059cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d3:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d7:	e8 45 d3 ff ff       	call   c0002d21 <create_partition>
c00059dc:	83 c4 10             	add    esp,0x10
c00059df:	89 c7                	mov    edi,eax
c00059e1:	85 c0                	test   eax,eax
c00059e3:	75 2e                	jne    c0005a13 <f_mkfs+0x78b>
c00059e5:	50                   	push   eax
c00059e6:	31 ff                	xor    edi,edi
c00059e8:	6a 00                	push   0x0
c00059ea:	6a 00                	push   0x0
c00059ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059f0:	e8 17 c3 ff ff       	call   c0001d0c <disk_ioctl>
c00059f5:	83 c4 10             	add    esp,0x10
c00059f8:	85 c0                	test   eax,eax
c00059fa:	74 17                	je     c0005a13 <f_mkfs+0x78b>
c00059fc:	85 ed                	test   ebp,ebp
c00059fe:	75 0c                	jne    c0005a0c <f_mkfs+0x784>
c0005a00:	83 ec 0c             	sub    esp,0xc
c0005a03:	56                   	push   esi
c0005a04:	e8 6f 00 00 00       	call   c0005a78 <ff_memfree>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	bf 01 00 00 00       	mov    edi,0x1
c0005a11:	eb 40                	jmp    c0005a53 <f_mkfs+0x7cb>
c0005a13:	85 ed                	test   ebp,ebp
c0005a15:	75 3c                	jne    c0005a53 <f_mkfs+0x7cb>
c0005a17:	83 ec 0c             	sub    esp,0xc
c0005a1a:	56                   	push   esi
c0005a1b:	e8 58 00 00 00       	call   c0005a78 <ff_memfree>
c0005a20:	83 c4 10             	add    esp,0x10
c0005a23:	eb 2e                	jmp    c0005a53 <f_mkfs+0x7cb>
c0005a25:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a2a:	0f 85 56 fb ff ff    	jne    c0005586 <f_mkfs+0x2fe>
c0005a30:	e9 2f fc ff ff       	jmp    c0005664 <f_mkfs+0x3dc>
c0005a35:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a3a:	0f 85 4c fb ff ff    	jne    c000558c <f_mkfs+0x304>
c0005a40:	89 cf                	mov    edi,ecx
c0005a42:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a48:	0f 86 49 fa ff ff    	jbe    c0005497 <f_mkfs+0x20f>
c0005a4e:	e9 11 fc ff ff       	jmp    c0005664 <f_mkfs+0x3dc>
c0005a53:	83 c4 4c             	add    esp,0x4c
c0005a56:	89 f8                	mov    eax,edi
c0005a58:	5b                   	pop    ebx
c0005a59:	5e                   	pop    esi
c0005a5a:	5f                   	pop    edi
c0005a5b:	5d                   	pop    ebp
c0005a5c:	c3                   	ret    
c0005a5d:	66 90                	xchg   ax,ax
c0005a5f:	90                   	nop

c0005a60 <ff_memalloc>:
c0005a60:	83 ec 0c             	sub    esp,0xc
c0005a63:	83 ec 0c             	sub    esp,0xc
c0005a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a6a:	e8 04 1e 00 00       	call   c0007873 <malloc>
c0005a6f:	83 c4 10             	add    esp,0x10
c0005a72:	83 c4 0c             	add    esp,0xc
c0005a75:	c3                   	ret    
c0005a76:	66 90                	xchg   ax,ax

c0005a78 <ff_memfree>:
c0005a78:	83 ec 0c             	sub    esp,0xc
c0005a7b:	83 ec 0c             	sub    esp,0xc
c0005a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a82:	e8 fc 1d 00 00       	call   c0007883 <free>
c0005a87:	83 c4 10             	add    esp,0x10
c0005a8a:	90                   	nop
c0005a8b:	83 c4 0c             	add    esp,0xc
c0005a8e:	c3                   	ret    
c0005a8f:	90                   	nop

c0005a90 <ff_uni2oem>:
c0005a90:	83 ec 14             	sub    esp,0x14
c0005a93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a97:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a9b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aa2:	c7 44 24 0c 40 f1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f140
c0005aaa:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aaf:	77 0b                	ja     c0005abc <ff_uni2oem+0x2c>
c0005ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aba:	eb 68                	jmp    c0005b24 <ff_uni2oem+0x94>
c0005abc:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac4:	77 5e                	ja     c0005b24 <ff_uni2oem+0x94>
c0005ac6:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005acc:	75 56                	jne    c0005b24 <ff_uni2oem+0x94>
c0005ace:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad5:	eb 0d                	jmp    c0005ae4 <ff_uni2oem+0x54>
c0005ad7:	90                   	nop
c0005ad8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005add:	40                   	inc    eax
c0005ade:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae3:	90                   	nop
c0005ae4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005aea:	77 24                	ja     c0005b10 <ff_uni2oem+0x80>
c0005aec:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005af1:	25 ff ff 00 00       	and    eax,0xffff
c0005af6:	8d 14 00             	lea    edx,[eax+eax*1]
c0005af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afd:	01 d0                	add    eax,edx
c0005aff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b02:	25 ff ff 00 00       	and    eax,0xffff
c0005b07:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b0b:	75 cb                	jne    c0005ad8 <ff_uni2oem+0x48>
c0005b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0005b10:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b15:	83 e8 80             	sub    eax,0xffffff80
c0005b18:	25 ff 00 00 00       	and    eax,0xff
c0005b1d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b22:	66 90                	xchg   ax,ax
c0005b24:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b29:	83 c4 14             	add    esp,0x14
c0005b2c:	c3                   	ret    
c0005b2d:	8d 76 00             	lea    esi,[esi+0x0]

c0005b30 <ff_oem2uni>:
c0005b30:	83 ec 18             	sub    esp,0x18
c0005b33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b3b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b40:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b44:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b4b:	c7 44 24 10 40 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f140
c0005b53:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b59:	77 0d                	ja     c0005b68 <ff_oem2uni+0x38>
c0005b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b64:	eb 32                	jmp    c0005b98 <ff_oem2uni+0x68>
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6e:	75 28                	jne    c0005b98 <ff_oem2uni+0x68>
c0005b70:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b77:	77 1f                	ja     c0005b98 <ff_oem2uni+0x68>
c0005b79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b7d:	25 ff ff 00 00       	and    eax,0xffff
c0005b82:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b87:	8d 14 00             	lea    edx,[eax+eax*1]
c0005b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8e:	01 d0                	add    eax,edx
c0005b90:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b93:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 40 ef 01 c0       	mov    eax,0xc001ef40
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 80 ee 01 c0       	mov    eax,0xc001ee80
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 40 ee 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe11c0]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	01 d0                	add    eax,edx
c0005c98:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca0:	eb 4e                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca2:	66 90                	xchg   ax,ax
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	89 de                	mov    esi,ebx
c0005d41:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	c1 e6 08             	shl    esi,0x8
c0005d71:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 df                	mov    edi,ebx
c0005d88:	89 de                	mov    esi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 6c aa ff ff       	call   c00008d0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 62 aa ff ff       	call   c00008d0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	83 fb 2f             	cmp    ebx,0x2f
c0005e85:	0f 95 c2             	setne  dl
c0005e88:	31 c0                	xor    eax,eax
c0005e8a:	85 db                	test   ebx,ebx
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 f8 a9 ff ff       	call   c00008d0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 ea a9 ff ff       	call   c00008d0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	80 fa 2f             	cmp    dl,0x2f
c0005efa:	0f 95 c1             	setne  cl
c0005efd:	31 c0                	xor    eax,eax
c0005eff:	84 d2                	test   dl,dl
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 40 f2 01 c0       	push   0xc001f240
c0005f1d:	e8 72 2d 01 00       	call   c0018c94 <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	83 f8 10             	cmp    eax,0x10
c0005f3f:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 4e f2 01 c0       	push   0xc001f24e
c0005f55:	e8 3a 2d 01 00       	call   c0018c94 <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 a3 2c 01 00       	call   c0018c38 <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	50                   	push   eax
c0005fc9:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 82 a8 ff ff       	call   c00008d0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 04 24             	mov    DWORD PTR [esp],eax
c0006057:	e8 74 a8 ff ff       	call   c00008d0 <tolower>
c000605c:	83 c4 10             	add    esp,0x10
c000605f:	29 c7                	sub    edi,eax
c0006061:	89 ee                	mov    esi,ebp
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006088:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000608f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006093:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 4c 01 00 00       	jmp    c0006216 <find_object+0x1a3>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060fd:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c0006103:	89 ca                	mov    edx,ecx
c0006105:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006109:	85 f6                	test   esi,esi
c000610b:	74 31                	je     c000613e <find_object+0xcb>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c7 00 00 00    	je     c00061e8 <find_object+0x175>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	7f b9                	jg     c00060eb <find_object+0x78>
c0006132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0006136:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000613a:	7f 96                	jg     c00060d2 <find_object+0x5f>
c000613c:	eb ad                	jmp    c00060eb <find_object+0x78>
c000613e:	0f b6 f0             	movzx  esi,al
c0006141:	29 ce                	sub    esi,ecx
c0006143:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006147:	80 e2 01             	and    dl,0x1
c000614a:	74 05                	je     c0006151 <find_object+0xde>
c000614c:	83 ee 21             	sub    esi,0x21
c000614f:	eb 55                	jmp    c00061a6 <find_object+0x133>
c0006151:	47                   	inc    edi
c0006152:	83 ee 22             	sub    esi,0x22
c0006155:	eb 4f                	jmp    c00061a6 <find_object+0x133>
c0006157:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000615a:	48                   	dec    eax
c000615b:	3c 01                	cmp    al,0x1
c000615d:	77 4c                	ja     c00061ab <find_object+0x138>
c000615f:	50                   	push   eax
c0006160:	6a 02                	push   0x2
c0006162:	68 5d f2 01 c0       	push   0xc001f25d
c0006167:	57                   	push   edi
c0006168:	e8 f3 a5 ff ff       	call   c0000760 <strncmp>
c000616d:	83 c4 10             	add    esp,0x10
c0006170:	85 c0                	test   eax,eax
c0006172:	75 2a                	jne    c000619e <find_object+0x12b>
c0006174:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006178:	8d 42 fb             	lea    eax,[edx-0x5]
c000617b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000617f:	50                   	push   eax
c0006180:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006184:	8d 47 05             	lea    eax,[edi+0x5]
c0006187:	50                   	push   eax
c0006188:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000618c:	50                   	push   eax
c000618d:	e8 8e a4 ff ff       	call   c0000620 <strncpy>
c0006192:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006196:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000619b:	83 c4 10             	add    esp,0x10
c000619e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061a2:	29 c6                	sub    esi,eax
c00061a4:	01 c7                	add    edi,eax
c00061a6:	83 fe 03             	cmp    esi,0x3
c00061a9:	7f ac                	jg     c0006157 <find_object+0xe4>
c00061ab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061b0:	7e 40                	jle    c00061f2 <find_object+0x17f>
c00061b2:	51                   	push   ecx
c00061b3:	51                   	push   ecx
c00061b4:	6a 2f                	push   0x2f
c00061b6:	55                   	push   ebp
c00061b7:	e8 74 a5 ff ff       	call   c0000730 <strchr>
c00061bc:	83 c4 10             	add    esp,0x10
c00061bf:	85 c0                	test   eax,eax
c00061c1:	74 04                	je     c00061c7 <find_object+0x154>
c00061c3:	29 e8                	sub    eax,ebp
c00061c5:	eb 0c                	jmp    c00061d3 <find_object+0x160>
c00061c7:	83 ec 0c             	sub    esp,0xc
c00061ca:	55                   	push   ebp
c00061cb:	e8 60 a3 ff ff       	call   c0000530 <strlen>
c00061d0:	83 c4 10             	add    esp,0x10
c00061d3:	52                   	push   edx
c00061d4:	50                   	push   eax
c00061d5:	55                   	push   ebp
c00061d6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061da:	50                   	push   eax
c00061db:	e8 34 fe ff ff       	call   c0006014 <strnicmp>
c00061e0:	83 c4 10             	add    esp,0x10
c00061e3:	e9 31 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e8:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061ec:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061f0:	eb 1e                	jmp    c0006210 <find_object+0x19d>
c00061f2:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f6:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f9:	89 e9                	mov    ecx,ebp
c00061fb:	e8 a0 fc ff ff       	call   c0005ea0 <fncompare>
c0006200:	85 c0                	test   eax,eax
c0006202:	0f 85 19 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006208:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000620c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0006210:	0f 85 0b ff ff ff    	jne    c0006121 <find_object+0xae>
c0006216:	81 c4 2c 01 00 00    	add    esp,0x12c
c000621c:	89 d8                	mov    eax,ebx
c000621e:	5b                   	pop    ebx
c000621f:	5e                   	pop    esi
c0006220:	5f                   	pop    edi
c0006221:	5d                   	pop    ebp
c0006222:	c3                   	ret    

c0006223 <find_object_path>:
c0006223:	55                   	push   ebp
c0006224:	57                   	push   edi
c0006225:	89 d7                	mov    edi,edx
c0006227:	56                   	push   esi
c0006228:	89 c6                	mov    esi,eax
c000622a:	53                   	push   ebx
c000622b:	89 cb                	mov    ebx,ecx
c000622d:	83 ec 0c             	sub    esp,0xc
c0006230:	50                   	push   eax
c0006231:	50                   	push   eax
c0006232:	6a 2f                	push   0x2f
c0006234:	56                   	push   esi
c0006235:	e8 f6 a4 ff ff       	call   c0000730 <strchr>
c000623a:	83 c4 10             	add    esp,0x10
c000623d:	89 c5                	mov    ebp,eax
c000623f:	85 c0                	test   eax,eax
c0006241:	74 3a                	je     c000627d <find_object_path+0x5a>
c0006243:	39 ee                	cmp    esi,ebp
c0006245:	74 31                	je     c0006278 <find_object_path+0x55>
c0006247:	8d 43 0a             	lea    eax,[ebx+0xa]
c000624a:	e8 b4 fb ff ff       	call   c0005e03 <iso_733>
c000624f:	89 c2                	mov    edx,eax
c0006251:	8d 43 02             	lea    eax,[ebx+0x2]
c0006254:	e8 aa fb ff ff       	call   c0005e03 <iso_733>
c0006259:	83 ec 0c             	sub    esp,0xc
c000625c:	89 c1                	mov    ecx,eax
c000625e:	52                   	push   edx
c000625f:	89 f0                	mov    eax,esi
c0006261:	ba 01 00 00 00       	mov    edx,0x1
c0006266:	e8 08 fe ff ff       	call   c0006073 <find_object>
c000626b:	83 c4 10             	add    esp,0x10
c000626e:	89 c3                	mov    ebx,eax
c0006270:	85 c0                	test   eax,eax
c0006272:	75 04                	jne    c0006278 <find_object_path+0x55>
c0006274:	31 db                	xor    ebx,ebx
c0006276:	eb 36                	jmp    c00062ae <find_object_path+0x8b>
c0006278:	8d 75 01             	lea    esi,[ebp+0x1]
c000627b:	eb b3                	jmp    c0006230 <find_object_path+0xd>
c000627d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006280:	74 28                	je     c00062aa <find_object_path+0x87>
c0006282:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006285:	e8 79 fb ff ff       	call   c0005e03 <iso_733>
c000628a:	89 c2                	mov    edx,eax
c000628c:	8d 43 02             	lea    eax,[ebx+0x2]
c000628f:	e8 6f fb ff ff       	call   c0005e03 <iso_733>
c0006294:	83 ec 0c             	sub    esp,0xc
c0006297:	89 c1                	mov    ecx,eax
c0006299:	52                   	push   edx
c000629a:	89 f0                	mov    eax,esi
c000629c:	89 fa                	mov    edx,edi
c000629e:	e8 d0 fd ff ff       	call   c0006073 <find_object>
c00062a3:	83 c4 10             	add    esp,0x10
c00062a6:	89 c3                	mov    ebx,eax
c00062a8:	eb 04                	jmp    c00062ae <find_object_path+0x8b>
c00062aa:	85 ff                	test   edi,edi
c00062ac:	74 c6                	je     c0006274 <find_object_path+0x51>
c00062ae:	83 c4 0c             	add    esp,0xc
c00062b1:	89 d8                	mov    eax,ebx
c00062b3:	5b                   	pop    ebx
c00062b4:	5e                   	pop    esi
c00062b5:	5f                   	pop    edi
c00062b6:	5d                   	pop    ebp
c00062b7:	c3                   	ret    

c00062b8 <stricmp>:
c00062b8:	57                   	push   edi
c00062b9:	56                   	push   esi
c00062ba:	31 f6                	xor    esi,esi
c00062bc:	53                   	push   ebx
c00062bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062c1:	83 ec 0c             	sub    esp,0xc
c00062c4:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062d0:	50                   	push   eax
c00062d1:	e8 da a5 ff ff       	call   c00008b0 <toupper>
c00062d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d9:	e8 f2 a5 ff ff       	call   c00008d0 <tolower>
c00062de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062e1:	89 c3                	mov    ebx,eax
c00062e3:	e8 c8 a5 ff ff       	call   c00008b0 <toupper>
c00062e8:	46                   	inc    esi
c00062e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ec:	e8 df a5 ff ff       	call   c00008d0 <tolower>
c00062f1:	83 c4 10             	add    esp,0x10
c00062f4:	39 c3                	cmp    ebx,eax
c00062f6:	75 04                	jne    c00062fc <stricmp+0x44>
c00062f8:	85 db                	test   ebx,ebx
c00062fa:	75 c1                	jne    c00062bd <stricmp+0x5>
c00062fc:	29 c3                	sub    ebx,eax
c00062fe:	89 d8                	mov    eax,ebx
c0006300:	5b                   	pop    ebx
c0006301:	5e                   	pop    esi
c0006302:	5f                   	pop    edi
c0006303:	c3                   	ret    

c0006304 <iso_open>:
c0006304:	57                   	push   edi
c0006305:	31 c0                	xor    eax,eax
c0006307:	56                   	push   esi
c0006308:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000630d:	53                   	push   ebx
c000630e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006313:	0f 95 c0             	setne  al
c0006316:	89 c2                	mov    edx,eax
c0006318:	89 c6                	mov    esi,eax
c000631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000631e:	e8 00 ff ff ff       	call   c0006223 <find_object_path>
c0006323:	83 ca ff             	or     edx,0xffffffff
c0006326:	85 c0                	test   eax,eax
c0006328:	74 5e                	je     c0006388 <iso_open+0x84>
c000632a:	89 c1                	mov    ecx,eax
c000632c:	31 d2                	xor    edx,edx
c000632e:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006334:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000633b:	75 42                	jne    c000637f <iso_open+0x7b>
c000633d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006340:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c000634a:	e8 b4 fa ff ff       	call   c0005e03 <iso_733>
c000634f:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006355:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000635b:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006365:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006368:	e8 96 fa ff ff       	call   c0005e03 <iso_733>
c000636d:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006377:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000637d:	eb 09                	jmp    c0006388 <iso_open+0x84>
c000637f:	42                   	inc    edx
c0006380:	83 fa 10             	cmp    edx,0x10
c0006383:	75 a9                	jne    c000632e <iso_open+0x2a>
c0006385:	83 ca ff             	or     edx,0xffffffff
c0006388:	5b                   	pop    ebx
c0006389:	89 d0                	mov    eax,edx
c000638b:	5e                   	pop    esi
c000638c:	5f                   	pop    edi
c000638d:	c3                   	ret    

c000638e <iso_close>:
c000638e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006392:	83 f8 0f             	cmp    eax,0xf
c0006395:	7f 10                	jg     c00063a7 <iso_close+0x19>
c0006397:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000639d:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063a7:	e9 69 fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063ac <iso_read>:
c00063ac:	55                   	push   ebp
c00063ad:	57                   	push   edi
c00063ae:	56                   	push   esi
c00063af:	53                   	push   ebx
c00063b0:	83 ec 1c             	sub    esp,0x1c
c00063b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b7:	83 fd 0f             	cmp    ebp,0xf
c00063ba:	7e 0a                	jle    c00063c6 <iso_read+0x1a>
c00063bc:	83 c8 ff             	or     eax,0xffffffff
c00063bf:	89 c2                	mov    edx,eax
c00063c1:	e9 f4 00 00 00       	jmp    c00064ba <iso_read+0x10e>
c00063c6:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063cc:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063d3:	74 e7                	je     c00063bc <iso_read+0x10>
c00063d5:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063db:	85 d2                	test   edx,edx
c00063dd:	75 dd                	jne    c00063bc <iso_read+0x10>
c00063df:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063e4:	0f 84 cd 00 00 00    	je     c00064b7 <iso_read+0x10b>
c00063ea:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063f0:	8b 9d 4c 35 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdcab4]
c00063f6:	29 c3                	sub    ebx,eax
c00063f8:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00063fc:	76 04                	jbe    c0006402 <iso_read+0x56>
c00063fe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0006402:	85 db                	test   ebx,ebx
c0006404:	0f 84 ad 00 00 00    	je     c00064b7 <iso_read+0x10b>
c000640a:	89 c6                	mov    esi,eax
c000640c:	b9 00 08 00 00       	mov    ecx,0x800
c0006411:	c1 e8 0b             	shr    eax,0xb
c0006414:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000641a:	29 f1                	sub    ecx,esi
c000641c:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006422:	81 f9 00 08 00 00    	cmp    ecx,0x800
c0006428:	75 3f                	jne    c0006469 <iso_read+0xbd>
c000642a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006430:	7e 37                	jle    c0006469 <iso_read+0xbd>
c0006432:	b9 20 00 00 00       	mov    ecx,0x20
c0006437:	81 fb ff 07 01 00    	cmp    ebx,0x107ff
c000643d:	7f 05                	jg     c0006444 <iso_read+0x98>
c000643f:	89 d9                	mov    ecx,ebx
c0006441:	c1 f9 0b             	sar    ecx,0xb
c0006444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006448:	52                   	push   edx
c0006449:	51                   	push   ecx
c000644a:	89 cb                	mov    ebx,ecx
c000644c:	c1 e3 0b             	shl    ebx,0xb
c000644f:	50                   	push   eax
c0006450:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006454:	e8 20 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006459:	83 c4 10             	add    esp,0x10
c000645c:	85 c0                	test   eax,eax
c000645e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006462:	7f 3e                	jg     c00064a2 <iso_read+0xf6>
c0006464:	e9 53 ff ff ff       	jmp    c00063bc <iso_read+0x10>
c0006469:	39 cb                	cmp    ebx,ecx
c000646b:	7e 02                	jle    c000646f <iso_read+0xc3>
c000646d:	89 cb                	mov    ebx,ecx
c000646f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006473:	e8 93 fb ff ff       	call   c000600b <bdread>
c0006478:	85 c0                	test   eax,eax
c000647a:	0f 88 3c ff ff ff    	js     c00063bc <iso_read+0x10>
c0006480:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006487:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c000648d:	25 ff 07 00 00       	and    eax,0x7ff
c0006492:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006496:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000649a:	89 d9                	mov    ecx,ebx
c000649c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000649e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064a2:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064a6:	01 da                	add    edx,ebx
c00064a8:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064ae:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064b2:	e9 28 ff ff ff       	jmp    c00063df <iso_read+0x33>
c00064b7:	89 d0                	mov    eax,edx
c00064b9:	99                   	cdq    
c00064ba:	83 c4 1c             	add    esp,0x1c
c00064bd:	5b                   	pop    ebx
c00064be:	5e                   	pop    esi
c00064bf:	5f                   	pop    edi
c00064c0:	5d                   	pop    ebp
c00064c1:	c3                   	ret    

c00064c2 <iso_seek>:
c00064c2:	55                   	push   ebp
c00064c3:	83 c8 ff             	or     eax,0xffffffff
c00064c6:	57                   	push   edi
c00064c7:	89 c2                	mov    edx,eax
c00064c9:	56                   	push   esi
c00064ca:	53                   	push   ebx
c00064cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d7:	83 fe 0f             	cmp    esi,0xf
c00064da:	7f 65                	jg     c0006541 <iso_seek+0x7f>
c00064dc:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064e2:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064e8:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064ef:	74 50                	je     c0006541 <iso_seek+0x7f>
c00064f1:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f8:	75 47                	jne    c0006541 <iso_seek+0x7f>
c00064fa:	83 fb 01             	cmp    ebx,0x1
c00064fd:	74 0e                	je     c000650d <iso_seek+0x4b>
c00064ff:	83 fb 02             	cmp    ebx,0x2
c0006502:	74 0e                	je     c0006512 <iso_seek+0x50>
c0006504:	85 db                	test   ebx,ebx
c0006506:	75 39                	jne    c0006541 <iso_seek+0x7f>
c0006508:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000650b:	eb 0d                	jmp    c000651a <iso_seek+0x58>
c000650d:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006510:	eb 08                	jmp    c000651a <iso_seek+0x58>
c0006512:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006515:	01 f8                	add    eax,edi
c0006517:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000651a:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006520:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006526:	05 40 35 02 c0       	add    eax,0xc0023540
c000652b:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000652e:	76 03                	jbe    c0006533 <iso_seek+0x71>
c0006530:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006533:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006539:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000653f:	31 d2                	xor    edx,edx
c0006541:	5b                   	pop    ebx
c0006542:	5e                   	pop    esi
c0006543:	5f                   	pop    edi
c0006544:	5d                   	pop    ebp
c0006545:	c3                   	ret    

c0006546 <iso_tell>:
c0006546:	53                   	push   ebx
c0006547:	83 c8 ff             	or     eax,0xffffffff
c000654a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000654e:	89 c2                	mov    edx,eax
c0006550:	83 f9 0f             	cmp    ecx,0xf
c0006553:	7f 20                	jg     c0006575 <iso_tell+0x2f>
c0006555:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000655b:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006562:	74 11                	je     c0006575 <iso_tell+0x2f>
c0006564:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000656b:	75 08                	jne    c0006575 <iso_tell+0x2f>
c000656d:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006573:	31 d2                	xor    edx,edx
c0006575:	5b                   	pop    ebx
c0006576:	c3                   	ret    

c0006577 <iso_total>:
c0006577:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000657b:	83 c8 ff             	or     eax,0xffffffff
c000657e:	83 fa 0f             	cmp    edx,0xf
c0006581:	7f 1e                	jg     c00065a1 <iso_total+0x2a>
c0006583:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006589:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c0006590:	74 0f                	je     c00065a1 <iso_total+0x2a>
c0006592:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c0006599:	75 06                	jne    c00065a1 <iso_total+0x2a>
c000659b:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065a1:	c3                   	ret    

c00065a2 <fn_postprocess>:
c00065a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065a6:	89 d0                	mov    eax,edx
c00065a8:	8a 08                	mov    cl,BYTE PTR [eax]
c00065aa:	84 c9                	test   cl,cl
c00065ac:	74 08                	je     c00065b6 <fn_postprocess+0x14>
c00065ae:	80 f9 3b             	cmp    cl,0x3b
c00065b1:	74 03                	je     c00065b6 <fn_postprocess+0x14>
c00065b3:	40                   	inc    eax
c00065b4:	eb f2                	jmp    c00065a8 <fn_postprocess+0x6>
c00065b6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b9:	39 d0                	cmp    eax,edx
c00065bb:	76 0a                	jbe    c00065c7 <fn_postprocess+0x25>
c00065bd:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065c1:	75 04                	jne    c00065c7 <fn_postprocess+0x25>
c00065c3:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c7:	c3                   	ret    

c00065c8 <iso_readdir>:
c00065c8:	55                   	push   ebp
c00065c9:	57                   	push   edi
c00065ca:	56                   	push   esi
c00065cb:	53                   	push   ebx
c00065cc:	83 ec 1c             	sub    esp,0x1c
c00065cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065d3:	83 fb 0f             	cmp    ebx,0xf
c00065d6:	7f 28                	jg     c0006600 <iso_readdir+0x38>
c00065d8:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065de:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065e4:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065eb:	74 13                	je     c0006600 <iso_readdir+0x38>
c00065ed:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00065f1:	74 0d                	je     c0006600 <iso_readdir+0x38>
c00065f3:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00065fa:	0f 84 b1 00 00 00    	je     c00066b1 <iso_readdir+0xe9>
c0006600:	83 ec 0c             	sub    esp,0xc
c0006603:	68 60 f2 01 c0       	push   0xc001f260
c0006608:	e8 87 26 01 00       	call   c0018c94 <iso_kprintf>
c000660d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006610:	e8 9b 26 01 00       	call   c0018cb0 <iso_kprintfd>
c0006615:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000661b:	c7 04 24 65 f2 01 c0 	mov    DWORD PTR [esp],0xc001f265
c0006622:	e8 6d 26 01 00       	call   c0018c94 <iso_kprintf>
c0006627:	5d                   	pop    ebp
c0006628:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000662e:	e8 7d 26 01 00       	call   c0018cb0 <iso_kprintfd>
c0006633:	c7 04 24 6b f2 01 c0 	mov    DWORD PTR [esp],0xc001f26b
c000663a:	e8 55 26 01 00       	call   c0018c94 <iso_kprintf>
c000663f:	58                   	pop    eax
c0006640:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006646:	e8 65 26 01 00       	call   c0018cb0 <iso_kprintfd>
c000664b:	c7 04 24 71 f2 01 c0 	mov    DWORD PTR [esp],0xc001f271
c0006652:	e8 3d 26 01 00       	call   c0018c94 <iso_kprintf>
c0006657:	58                   	pop    eax
c0006658:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000665e:	e8 4d 26 01 00       	call   c0018cb0 <iso_kprintfd>
c0006663:	83 c4 10             	add    esp,0x10
c0006666:	eb 42                	jmp    c00066aa <iso_readdir+0xe2>
c0006668:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000666b:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006672:	89 d1                	mov    ecx,edx
c0006674:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000667a:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000667e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006681:	75 35                	jne    c00066b8 <iso_readdir+0xf0>
c0006683:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006689:	81 c2 00 08 00 00    	add    edx,0x800
c000668f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006692:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006695:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006698:	73 1e                	jae    c00066b8 <iso_readdir+0xf0>
c000669a:	c1 ea 0b             	shr    edx,0xb
c000669d:	8b 07                	mov    eax,DWORD PTR [edi]
c000669f:	01 d0                	add    eax,edx
c00066a1:	e8 5c f9 ff ff       	call   c0006002 <biread>
c00066a6:	85 c0                	test   eax,eax
c00066a8:	79 be                	jns    c0006668 <iso_readdir+0xa0>
c00066aa:	31 c0                	xor    eax,eax
c00066ac:	e9 66 01 00 00       	jmp    c0006817 <iso_readdir+0x24f>
c00066b1:	31 f6                	xor    esi,esi
c00066b3:	83 c8 ff             	or     eax,0xffffffff
c00066b6:	eb da                	jmp    c0006692 <iso_readdir+0xca>
c00066b8:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066be:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066c4:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066ca:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066cd:	73 db                	jae    c00066aa <iso_readdir+0xe2>
c00066cf:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066d3:	75 34                	jne    c0006709 <iso_readdir+0x141>
c00066d5:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066d9:	75 2e                	jne    c0006709 <iso_readdir+0x141>
c00066db:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066de:	01 f9                	add    ecx,edi
c00066e0:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066e7:	89 c8                	mov    eax,ecx
c00066e9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066ec:	25 ff 07 00 00       	and    eax,0x7ff
c00066f1:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00066f6:	01 c8                	add    eax,ecx
c00066f8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006704:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006707:	74 a1                	je     c00066aa <iso_readdir+0xe2>
c0006709:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000670f:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006713:	8d 56 21             	lea    edx,[esi+0x21]
c0006716:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000671a:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c0006720:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006727:	74 0c                	je     c0006735 <iso_readdir+0x16d>
c0006729:	89 e8                	mov    eax,ebp
c000672b:	e8 26 f6 ff ff       	call   c0005d56 <ucs2utfn>
c0006730:	e9 a6 00 00 00       	jmp    c00067db <iso_readdir+0x213>
c0006735:	57                   	push   edi
c0006736:	51                   	push   ecx
c0006737:	52                   	push   edx
c0006738:	55                   	push   ebp
c0006739:	e8 e2 9e ff ff       	call   c0000620 <strncpy>
c000673e:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006744:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006748:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000674b:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006753:	e8 4a fe ff ff       	call   c00065a2 <fn_postprocess>
c0006758:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000675c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000675f:	83 c4 10             	add    esp,0x10
c0006762:	29 d0                	sub    eax,edx
c0006764:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006768:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000676c:	74 05                	je     c0006773 <iso_readdir+0x1ab>
c000676e:	83 e8 21             	sub    eax,0x21
c0006771:	eb 04                	jmp    c0006777 <iso_readdir+0x1af>
c0006773:	47                   	inc    edi
c0006774:	83 e8 22             	sub    eax,0x22
c0006777:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000677b:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006781:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006785:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000678a:	7e 4f                	jle    c00067db <iso_readdir+0x213>
c000678c:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000678f:	48                   	dec    eax
c0006790:	3c 01                	cmp    al,0x1
c0006792:	77 47                	ja     c00067db <iso_readdir+0x213>
c0006794:	52                   	push   edx
c0006795:	6a 02                	push   0x2
c0006797:	68 5d f2 01 c0       	push   0xc001f25d
c000679c:	57                   	push   edi
c000679d:	e8 be 9f ff ff       	call   c0000760 <strncmp>
c00067a2:	83 c4 10             	add    esp,0x10
c00067a5:	85 c0                	test   eax,eax
c00067a7:	75 26                	jne    c00067cf <iso_readdir+0x207>
c00067a9:	50                   	push   eax
c00067aa:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067ae:	83 e8 05             	sub    eax,0x5
c00067b1:	50                   	push   eax
c00067b2:	8d 47 05             	lea    eax,[edi+0x5]
c00067b5:	50                   	push   eax
c00067b6:	55                   	push   ebp
c00067b7:	e8 64 9e ff ff       	call   c0000620 <strncpy>
c00067bc:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067c4:	83 c4 10             	add    esp,0x10
c00067c7:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067d7:	01 c7                	add    edi,eax
c00067d9:	eb aa                	jmp    c0006785 <iso_readdir+0x1bd>
c00067db:	83 c8 ff             	or     eax,0xffffffff
c00067de:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067e2:	89 c2                	mov    edx,eax
c00067e4:	75 0a                	jne    c00067f0 <iso_readdir+0x228>
c00067e6:	8d 46 0a             	lea    eax,[esi+0xa]
c00067e9:	e8 15 f6 ff ff       	call   c0005e03 <iso_733>
c00067ee:	31 d2                	xor    edx,edx
c00067f0:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067f6:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c00067fc:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006802:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006805:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c000680b:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000680e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006812:	05 50 35 02 c0       	add    eax,0xc0023550
c0006817:	83 c4 1c             	add    esp,0x1c
c000681a:	5b                   	pop    ebx
c000681b:	5e                   	pop    esi
c000681c:	5f                   	pop    edi
c000681d:	5d                   	pop    ebp
c000681e:	c3                   	ret    

c000681f <iso_reset>:
c000681f:	83 ec 18             	sub    esp,0x18
c0006822:	68 7a f2 01 c0       	push   0xc001f27a
c0006827:	e8 68 24 01 00       	call   c0018c94 <iso_kprintf>
c000682c:	e8 1c f7 ff ff       	call   c0005f4d <iso_break_all>
c0006831:	e8 15 f7 ff ff       	call   c0005f4b <bclear>
c0006836:	31 c0                	xor    eax,eax
c0006838:	83 c4 1c             	add    esp,0x1c
c000683b:	c3                   	ret    

c000683c <init_percd>:
c000683c:	57                   	push   edi
c000683d:	56                   	push   esi
c000683e:	53                   	push   ebx
c000683f:	bb 01 00 00 00       	mov    ebx,0x1
c0006844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006848:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000684d:	e8 cd ff ff ff       	call   c000681f <iso_reset>
c0006852:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000685c:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006861:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006865:	e8 98 f7 ff ff       	call   c0006002 <biread>
c000686a:	89 c6                	mov    esi,eax
c000686c:	85 c0                	test   eax,eax
c000686e:	0f 88 ba 00 00 00    	js     c000692e <init_percd+0xf2>
c0006874:	52                   	push   edx
c0006875:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000687c:	6a 06                	push   0x6
c000687e:	83 c0 04             	add    eax,0x4
c0006881:	68 85 f2 01 c0       	push   0xc001f285
c0006886:	50                   	push   eax
c0006887:	e8 f4 9a ff ff       	call   c0000380 <memcmp>
c000688c:	83 c4 10             	add    esp,0x10
c000688f:	85 c0                	test   eax,eax
c0006891:	74 08                	je     c000689b <init_percd+0x5f>
c0006893:	43                   	inc    ebx
c0006894:	83 fb 04             	cmp    ebx,0x4
c0006897:	75 c3                	jne    c000685c <init_percd+0x20>
c0006899:	eb 1a                	jmp    c00068b5 <init_percd+0x79>
c000689b:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068a2:	83 c0 5c             	add    eax,0x5c
c00068a5:	e8 2a f5 ff ff       	call   c0005dd4 <isjoliet>
c00068aa:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068af:	85 c0                	test   eax,eax
c00068b1:	74 e0                	je     c0006893 <init_percd+0x57>
c00068b3:	eb 3e                	jmp    c00068f3 <init_percd+0xb7>
c00068b5:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068bc:	75 35                	jne    c00068f3 <init_percd+0xb7>
c00068be:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068c3:	83 c0 10             	add    eax,0x10
c00068c6:	e8 37 f7 ff ff       	call   c0006002 <biread>
c00068cb:	89 c6                	mov    esi,eax
c00068cd:	85 c0                	test   eax,eax
c00068cf:	78 5f                	js     c0006930 <init_percd+0xf4>
c00068d1:	50                   	push   eax
c00068d2:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068d9:	6a 06                	push   0x6
c00068db:	83 c0 04             	add    eax,0x4
c00068de:	68 8c f2 01 c0       	push   0xc001f28c
c00068e3:	83 cb ff             	or     ebx,0xffffffff
c00068e6:	50                   	push   eax
c00068e7:	e8 94 9a ff ff       	call   c0000380 <memcmp>
c00068ec:	83 c4 10             	add    esp,0x10
c00068ef:	85 c0                	test   eax,eax
c00068f1:	75 3d                	jne    c0006930 <init_percd+0xf4>
c00068f3:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c00068fa:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c00068ff:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006905:	b9 22 00 00 00       	mov    ecx,0x22
c000690a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000690c:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006911:	31 db                	xor    ebx,ebx
c0006913:	e8 eb f4 ff ff       	call   c0005e03 <iso_733>
c0006918:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000691d:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000692c:	eb 02                	jmp    c0006930 <init_percd+0xf4>
c000692e:	89 c3                	mov    ebx,eax
c0006930:	89 d8                	mov    eax,ebx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	c3                   	ret    

c0006936 <iso_ioctl>:
c0006936:	83 ec 18             	sub    esp,0x18
c0006939:	68 93 f2 01 c0       	push   0xc001f293
c000693e:	e8 51 23 01 00       	call   c0018c94 <iso_kprintf>
c0006943:	e8 d7 fe ff ff       	call   c000681f <iso_reset>
c0006948:	31 c0                	xor    eax,eax
c000694a:	83 c4 1c             	add    esp,0x1c
c000694d:	c3                   	ret    

c000694e <fs_iso9660_init>:
c000694e:	53                   	push   ebx
c000694f:	31 db                	xor    ebx,ebx
c0006951:	83 ec 14             	sub    esp,0x14
c0006954:	68 9e f2 01 c0       	push   0xc001f29e
c0006959:	e8 36 23 01 00       	call   c0018c94 <iso_kprintf>
c000695e:	83 c4 0c             	add    esp,0xc
c0006961:	68 40 09 00 00       	push   0x940
c0006966:	6a 00                	push   0x0
c0006968:	68 40 35 02 c0       	push   0xc0023540
c000696d:	e8 4e 9b ff ff       	call   c00004c0 <memset>
c0006972:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006979:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006983:	e8 eb 0e 00 00       	call   c0007873 <malloc>
c0006988:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000698f:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c0006994:	e8 da 0e 00 00       	call   c0007873 <malloc>
c0006999:	83 c4 10             	add    esp,0x10
c000699c:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069a1:	83 ec 0c             	sub    esp,0xc
c00069a4:	68 04 08 00 00       	push   0x804
c00069a9:	e8 c5 0e 00 00       	call   c0007873 <malloc>
c00069ae:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069b5:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069bb:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069c2:	e8 ac 0e 00 00       	call   c0007873 <malloc>
c00069c7:	83 c4 10             	add    esp,0x10
c00069ca:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069d1:	43                   	inc    ebx
c00069d2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069d8:	83 fb 10             	cmp    ebx,0x10
c00069db:	75 c4                	jne    c00069a1 <fs_iso9660_init+0x53>
c00069dd:	83 c4 08             	add    esp,0x8
c00069e0:	31 c0                	xor    eax,eax
c00069e2:	5b                   	pop    ebx
c00069e3:	c3                   	ret    

c00069e4 <fs_iso9660_shutdown>:
c00069e4:	53                   	push   ebx
c00069e5:	31 db                	xor    ebx,ebx
c00069e7:	83 ec 08             	sub    esp,0x8
c00069ea:	83 ec 0c             	sub    esp,0xc
c00069ed:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c00069f4:	e8 8a 0e 00 00       	call   c0007883 <free>
c00069f9:	58                   	pop    eax
c00069fa:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a01:	43                   	inc    ebx
c0006a02:	e8 7c 0e 00 00       	call   c0007883 <free>
c0006a07:	83 c4 10             	add    esp,0x10
c0006a0a:	83 fb 10             	cmp    ebx,0x10
c0006a0d:	75 db                	jne    c00069ea <fs_iso9660_shutdown+0x6>
c0006a0f:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a14:	85 c0                	test   eax,eax
c0006a16:	74 0c                	je     c0006a24 <fs_iso9660_shutdown+0x40>
c0006a18:	83 ec 0c             	sub    esp,0xc
c0006a1b:	50                   	push   eax
c0006a1c:	e8 62 0e 00 00       	call   c0007883 <free>
c0006a21:	83 c4 10             	add    esp,0x10
c0006a24:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a29:	85 c0                	test   eax,eax
c0006a2b:	74 0c                	je     c0006a39 <fs_iso9660_shutdown+0x55>
c0006a2d:	83 ec 0c             	sub    esp,0xc
c0006a30:	50                   	push   eax
c0006a31:	e8 4d 0e 00 00       	call   c0007883 <free>
c0006a36:	83 c4 10             	add    esp,0x10
c0006a39:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a43:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a4d:	83 c4 08             	add    esp,0x8
c0006a50:	31 c0                	xor    eax,eax
c0006a52:	5b                   	pop    ebx
c0006a53:	c3                   	ret    

c0006a54 <Computer::close(int, int, void*)>:
c0006a54:	57                   	push   edi
c0006a55:	56                   	push   esi
c0006a56:	53                   	push   ebx
c0006a57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a63:	83 ec 0c             	sub    esp,0xc
c0006a66:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a6c:	50                   	push   eax
c0006a6d:	e8 48 51 00 00       	call   c000bbba <Device::closeAll()>
c0006a72:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a78:	83 c4 10             	add    esp,0x10
c0006a7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a7d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a81:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a89:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006a91:	5b                   	pop    ebx
c0006a92:	5e                   	pop    esi
c0006a93:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006a96:	5f                   	pop    edi
c0006a97:	ff e0                	jmp    eax

c0006a99 <Krnl::firstTask()>:
c0006a99:	53                   	push   ebx
c0006a9a:	83 ec 14             	sub    esp,0x14
c0006a9d:	fb                   	sti    
c0006a9e:	68 af f2 01 c0       	push   0xc001f2af
c0006aa3:	e8 f7 92 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006aa8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006aaf:	e8 bf 0d 00 00       	call   c0007873 <malloc>
c0006ab4:	89 c3                	mov    ebx,eax
c0006ab6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006abb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ac2:	50                   	push   eax
c0006ac3:	68 c8 f2 01 c0       	push   0xc001f2c8
c0006ac8:	6a 01                	push   0x1
c0006aca:	53                   	push   ebx
c0006acb:	e8 1c dc 00 00       	call   c00146ec <Process::Process(bool, char const*, Process*, char**)>
c0006ad0:	83 c4 20             	add    esp,0x20
c0006ad3:	68 ff 00 00 00       	push   0xff
c0006ad8:	6a 00                	push   0x0
c0006ada:	68 cb 72 00 c0       	push   0xc00072cb
c0006adf:	53                   	push   ebx
c0006ae0:	e8 2f de 00 00       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c0006ae5:	6a 7a                	push   0x7a
c0006ae7:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006aed:	6a 00                	push   0x0
c0006aef:	68 b0 53 01 c0       	push   0xc00153b0
c0006af4:	52                   	push   edx
c0006af5:	e8 1a de 00 00       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c0006afa:	83 c4 20             	add    esp,0x20
c0006afd:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b02:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b09:	e8 c2 9a 00 00       	call   c00105d0 <KeInitRand()>
c0006b0e:	83 ec 0c             	sub    esp,0xc
c0006b11:	68 c4 f3 01 c0       	push   0xc001f3c4
c0006b16:	e8 84 92 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006b1b:	e8 9f ec 00 00       	call   c00157bf <Vm::initialise8086()>
c0006b20:	e8 df 3e 00 00       	call   c000aa04 <Fs::initVFS()>
c0006b25:	c7 04 24 d5 f2 01 c0 	mov    DWORD PTR [esp],0xc001f2d5
c0006b2c:	e8 6e 92 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006b31:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b36:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b3e:	6a 00                	push   0x0
c0006b40:	6a 00                	push   0x0
c0006b42:	6a 00                	push   0x0
c0006b44:	50                   	push   eax
c0006b45:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b48:	83 c4 14             	add    esp,0x14
c0006b4b:	68 c4 f3 01 c0       	push   0xc001f3c4
c0006b50:	e8 4a 92 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006b55:	e8 20 97 00 00       	call   c001027a <Krnl::loadSystemEnv()>
c0006b5a:	e8 7d 99 00 00       	call   c00104dc <Krnl::setupPowerManager()>
c0006b5f:	83 c4 0c             	add    esp,0xc
c0006b62:	6a 3a                	push   0x3a
c0006b64:	68 ef f2 01 c0       	push   0xc001f2ef
c0006b69:	68 f8 f2 01 c0       	push   0xc001f2f8
c0006b6e:	e8 b6 be 00 00       	call   c0012a29 <Reg::readIntWithDefault(char*, char*, int)>
c0006b73:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b76:	e8 95 49 00 00       	call   c000b510 <User::loadClockSettings(int)>
c0006b7b:	c7 04 24 e8 f3 01 c0 	mov    DWORD PTR [esp],0xc001f3e8
c0006b82:	e8 18 92 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006b87:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b8c:	59                   	pop    ecx
c0006b8d:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b93:	53                   	push   ebx
c0006b94:	e8 1f 50 00 00       	call   c000bbb8 <Device::loadDriversForAll()>
c0006b99:	c7 04 24 00 f3 01 c0 	mov    DWORD PTR [esp],0xc001f300
c0006ba0:	e8 fa 91 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006ba5:	58                   	pop    eax
c0006ba6:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bac:	5a                   	pop    edx
c0006bad:	6a 01                	push   0x1
c0006baf:	68 11 f3 01 c0       	push   0xc001f311
c0006bb4:	e8 3f d5 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c0006bb9:	59                   	pop    ecx
c0006bba:	5a                   	pop    edx
c0006bbb:	53                   	push   ebx
c0006bbc:	50                   	push   eax
c0006bbd:	e8 6b d7 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c0006bc2:	83 c4 10             	add    esp,0x10
c0006bc5:	83 ec 0c             	sub    esp,0xc
c0006bc8:	6a 02                	push   0x2
c0006bca:	e8 85 e1 00 00       	call   c0014d54 <blockTask(TaskState)>
c0006bcf:	83 c4 10             	add    esp,0x10
c0006bd2:	eb f1                	jmp    c0006bc5 <Krnl::firstTask()+0x12c>

c0006bd4 <Computer::Computer()>:
c0006bd4:	83 ec 0c             	sub    esp,0xc
c0006bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdb:	83 ec 08             	sub    esp,0x8
c0006bde:	68 2d f3 01 c0       	push   0xc001f32d
c0006be3:	50                   	push   eax
c0006be4:	e8 4b 50 00 00       	call   c000bc34 <Device::Device(char const*)>
c0006be9:	83 c4 10             	add    esp,0x10
c0006bec:	ba 34 f4 01 c0       	mov    edx,0xc001f434
c0006bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf5:	89 10                	mov    DWORD PTR [eax],edx
c0006bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfb:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c09:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c17:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c1d:	83 ca 04             	or     edx,0x4
c0006c20:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c30:	31 d2                	xor    edx,edx
c0006c32:	88 c2                	mov    dl,al
c0006c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c38:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c49:	31 d2                	xor    edx,edx
c0006c4b:	88 c2                	mov    dl,al
c0006c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c51:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c60:	8d 50 01             	lea    edx,[eax+0x1]
c0006c63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c67:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c6d:	31 d2                	xor    edx,edx
c0006c6f:	88 c2                	mov    dl,al
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c79:	83 e1 3f             	and    ecx,0x3f
c0006c7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c80:	90                   	nop
c0006c81:	83 c4 0c             	add    esp,0xc
c0006c84:	c3                   	ret    
c0006c85:	90                   	nop

c0006c86 <Computer::setBootMessage(char const*)>:
c0006c86:	c3                   	ret    
c0006c87:	90                   	nop

c0006c88 <Computer::detectFeatures()>:
c0006c88:	55                   	push   ebp
c0006c89:	57                   	push   edi
c0006c8a:	56                   	push   esi
c0006c8b:	53                   	push   ebx
c0006c8c:	83 ec 1c             	sub    esp,0x1c
c0006c8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c93:	8b 8b 6c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x16c]
c0006c99:	81 e1 04 00 fc ff    	and    ecx,0xfffc0004
c0006c9f:	89 8b 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],ecx
c0006ca5:	e8 4f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006caa:	85 c0                	test   eax,eax
c0006cac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cb2:	0f 95 c2             	setne  dl
c0006cb5:	01 d2                	add    edx,edx
c0006cb7:	83 e0 fd             	and    eax,0xfffffffd
c0006cba:	09 d0                	or     eax,edx
c0006cbc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cc2:	a8 02                	test   al,0x2
c0006cc4:	75 4e                	jne    c0006d14 <Computer::detectFeatures()+0x8c>
c0006cc6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ccd:	74 0f                	je     c0006cde <Computer::detectFeatures()+0x56>
c0006ccf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cd5:	83 e0 fb             	and    eax,0xfffffffb
c0006cd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cde:	e8 c3 6e 01 00       	call   c001dba6 <x87Detect>
c0006ce3:	83 e0 01             	and    eax,0x1
c0006ce6:	c1 e0 04             	shl    eax,0x4
c0006ce9:	88 c2                	mov    dl,al
c0006ceb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf1:	83 e0 ef             	and    eax,0xffffffef
c0006cf4:	09 d0                	or     eax,edx
c0006cf6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfc:	a8 10                	test   al,0x10
c0006cfe:	0f 85 32 01 00 00    	jne    c0006e36 <Computer::detectFeatures()+0x1ae>
c0006d04:	84 c0                	test   al,al
c0006d06:	0f 88 4d 01 00 00    	js     c0006e59 <Computer::detectFeatures()+0x1d1>
c0006d0c:	83 c4 1c             	add    esp,0x1c
c0006d0f:	5b                   	pop    ebx
c0006d10:	5e                   	pop    esi
c0006d11:	5f                   	pop    edi
c0006d12:	5d                   	pop    ebp
c0006d13:	c3                   	ret    
c0006d14:	83 ec 0c             	sub    esp,0xc
c0006d17:	6a 20                	push   0x20
c0006d19:	e8 ae 85 00 00       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d1e:	83 e0 01             	and    eax,0x1
c0006d21:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d28:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d2e:	83 e0 f7             	and    eax,0xfffffff7
c0006d31:	09 d0                	or     eax,edx
c0006d33:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d39:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d40:	e8 87 85 00 00       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d45:	83 e0 01             	and    eax,0x1
c0006d48:	88 c2                	mov    dl,al
c0006d4a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d50:	83 e0 fe             	and    eax,0xfffffffe
c0006d53:	09 d0                	or     eax,edx
c0006d55:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d5b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d62:	e8 65 85 00 00       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d67:	c1 e0 07             	shl    eax,0x7
c0006d6a:	88 c2                	mov    dl,al
c0006d6c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d72:	83 e0 7f             	and    eax,0x7f
c0006d75:	09 d0                	or     eax,edx
c0006d77:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d7d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d84:	e8 43 85 00 00       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d89:	83 c4 10             	add    esp,0x10
c0006d8c:	83 e0 01             	and    eax,0x1
c0006d8f:	c1 e0 05             	shl    eax,0x5
c0006d92:	88 c2                	mov    dl,al
c0006d94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d9a:	83 e0 df             	and    eax,0xffffffdf
c0006d9d:	09 d0                	or     eax,edx
c0006d9f:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006daf:	0f 84 ca 00 00 00    	je     c0006e7f <Computer::detectFeatures()+0x1f7>
c0006db5:	83 e0 fe             	and    eax,0xfffffffe
c0006db8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dbe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dc4:	88 c2                	mov    dl,al
c0006dc6:	83 e2 09             	and    edx,0x9
c0006dc9:	fe ca                	dec    dl
c0006dcb:	75 09                	jne    c0006dd6 <Computer::detectFeatures()+0x14e>
c0006dcd:	83 e0 fe             	and    eax,0xfffffffe
c0006dd0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ddd:	50                   	push   eax
c0006dde:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006de2:	55                   	push   ebp
c0006de3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006de7:	57                   	push   edi
c0006de8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006dec:	56                   	push   esi
c0006ded:	68 00 00 00 80       	push   0x80000000
c0006df2:	e8 51 84 00 00       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006df7:	83 c4 20             	add    esp,0x20
c0006dfa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e05:	0f 86 bb fe ff ff    	jbe    c0006cc6 <Computer::detectFeatures()+0x3e>
c0006e0b:	83 ec 0c             	sub    esp,0xc
c0006e0e:	50                   	push   eax
c0006e0f:	55                   	push   ebp
c0006e10:	57                   	push   edi
c0006e11:	56                   	push   esi
c0006e12:	68 01 00 00 80       	push   0x80000001
c0006e17:	e8 2c 84 00 00       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e1c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006e22:	83 c4 20             	add    esp,0x20
c0006e25:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c0006e2b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006e31:	e9 90 fe ff ff       	jmp    c0006cc6 <Computer::detectFeatures()+0x3e>
c0006e36:	e8 25 6d 01 00       	call   c001db60 <absolutelyNoChanceInHell>
c0006e3b:	88 c2                	mov    dl,al
c0006e3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e43:	c1 e2 07             	shl    edx,0x7
c0006e46:	83 e0 7f             	and    eax,0x7f
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	84 c0                	test   al,al
c0006e53:	0f 89 b3 fe ff ff    	jns    c0006d0c <Computer::detectFeatures()+0x84>
c0006e59:	e8 72 69 01 00       	call   c001d7d0 <avxDetect>
c0006e5e:	83 e0 01             	and    eax,0x1
c0006e61:	c1 e0 05             	shl    eax,0x5
c0006e64:	88 c2                	mov    dl,al
c0006e66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e6c:	83 e0 df             	and    eax,0xffffffdf
c0006e6f:	09 d0                	or     eax,edx
c0006e71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e77:	83 c4 1c             	add    esp,0x1c
c0006e7a:	5b                   	pop    ebx
c0006e7b:	5e                   	pop    esi
c0006e7c:	5f                   	pop    edi
c0006e7d:	5d                   	pop    ebp
c0006e7e:	c3                   	ret    
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	68 00 02 00 00       	push   0x200
c0006e87:	e8 40 84 00 00       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c0006e8c:	83 e0 01             	and    eax,0x1
c0006e8f:	83 c4 10             	add    esp,0x10
c0006e92:	88 c2                	mov    dl,al
c0006e94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e9a:	83 e0 fe             	and    eax,0xfffffffe
c0006e9d:	09 d0                	or     eax,edx
c0006e9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ea5:	e9 14 ff ff ff       	jmp    c0006dbe <Computer::detectFeatures()+0x136>

c0006eaa <Computer::displayFeatures()>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::rdmsr(unsigned int)>:
c0006eac:	83 ec 0c             	sub    esp,0xc
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eba:	74 0a                	je     c0006ec6 <Computer::rdmsr(unsigned int)+0x1a>
c0006ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ec0:	0f 32                	rdmsr  
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    
c0006ec6:	83 ec 0c             	sub    esp,0xc
c0006ec9:	68 36 f3 01 c0       	push   0xc001f336
c0006ece:	e8 44 95 00 00       	call   c0010417 <KePanic(char const*)>
c0006ed3:	83 c4 10             	add    esp,0x10
c0006ed6:	eb e4                	jmp    c0006ebc <Computer::rdmsr(unsigned int)+0x10>

c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed8:	57                   	push   edi
c0006ed9:	56                   	push   esi
c0006eda:	52                   	push   edx
c0006edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ee3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ee7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eee:	74 0e                	je     c0006efe <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef4:	89 f0                	mov    eax,esi
c0006ef6:	89 fa                	mov    edx,edi
c0006ef8:	0f 30                	wrmsr  
c0006efa:	58                   	pop    eax
c0006efb:	5e                   	pop    esi
c0006efc:	5f                   	pop    edi
c0006efd:	c3                   	ret    
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	68 3c f3 01 c0       	push   0xc001f33c
c0006f06:	e8 0c 95 00 00       	call   c0010417 <KePanic(char const*)>
c0006f0b:	83 c4 10             	add    esp,0x10
c0006f0e:	eb e0                	jmp    c0006ef0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f10 <Computer::shutdown()>:
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f17:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f19:	6a 00                	push   0x0
c0006f1b:	6a 00                	push   0x0
c0006f1d:	6a 00                	push   0x0
c0006f1f:	50                   	push   eax
c0006f20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	c3                   	ret    
c0006f27:	90                   	nop

c0006f28 <Computer::restart()>:
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f31:	6a 00                	push   0x0
c0006f33:	6a 00                	push   0x0
c0006f35:	6a 01                	push   0x1
c0006f37:	50                   	push   eax
c0006f38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	c3                   	ret    
c0006f3f:	90                   	nop

c0006f40 <Computer::sleep()>:
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f4e:	e9 f1 7d 00 00       	jmp    c000ed44 <ACPI::sleep()>
c0006f53:	90                   	nop

c0006f54 <Computer::nmiEnabled()>:
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f5e:	c3                   	ret    
c0006f5f:	90                   	nop

c0006f60 <Computer::readCMOS(unsigned char)>:
c0006f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f68:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f6f:	19 c0                	sbb    eax,eax
c0006f71:	83 e0 80             	and    eax,0xffffff80
c0006f74:	09 d0                	or     eax,edx
c0006f76:	e6 70                	out    0x70,al
c0006f78:	e4 71                	in     al,0x71
c0006f7a:	c3                   	ret    
c0006f7b:	90                   	nop

c0006f7c <Computer::enableNMI(bool)>:
c0006f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f84:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f8a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f92:	eb cc                	jmp    c0006f60 <Computer::readCMOS(unsigned char)>

c0006f94 <Computer::open(int, int, void*)>:
c0006f94:	56                   	push   esi
c0006f95:	53                   	push   ebx
c0006f96:	83 ec 10             	sub    esp,0x10
c0006f99:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006fa0:	0f 94 05 60 17 02 c0 	sete   BYTE PTR ds:0xc0021760
c0006fa7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006fab:	68 42 f3 01 c0       	push   0xc001f342
c0006fb0:	e8 ea 8d 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006fb5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fbc:	e8 b2 08 00 00       	call   c0007873 <malloc>
c0006fc1:	89 c6                	mov    esi,eax
c0006fc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fc6:	e8 11 79 00 00       	call   c000e8dc <ACPI::ACPI()>
c0006fcb:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fd1:	58                   	pop    eax
c0006fd2:	5a                   	pop    edx
c0006fd3:	56                   	push   esi
c0006fd4:	53                   	push   ebx
c0006fd5:	e8 c2 4a 00 00       	call   c000ba9c <Device::addChild(Device*)>
c0006fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fdd:	e8 a6 fc ff ff       	call   c0006c88 <Computer::detectFeatures()>
c0006fe2:	59                   	pop    ecx
c0006fe3:	5e                   	pop    esi
c0006fe4:	6a 01                	push   0x1
c0006fe6:	53                   	push   ebx
c0006fe7:	e8 90 ff ff ff       	call   c0006f7c <Computer::enableNMI(bool)>
c0006fec:	c7 04 24 5a f3 01 c0 	mov    DWORD PTR [esp],0xc001f35a
c0006ff3:	e8 a7 8d 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0006ff8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fff:	e8 6f 08 00 00       	call   c0007873 <malloc>
c0007004:	89 c6                	mov    esi,eax
c0007006:	89 04 24             	mov    DWORD PTR [esp],eax
c0007009:	e8 76 83 00 00       	call   c000f384 <CPU::CPU()>
c000700e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007014:	58                   	pop    eax
c0007015:	5a                   	pop    edx
c0007016:	56                   	push   esi
c0007017:	53                   	push   ebx
c0007018:	e8 7f 4a 00 00       	call   c000ba9c <Device::addChild(Device*)>
c000701d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007023:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007027:	8b 10                	mov    edx,DWORD PTR [eax]
c0007029:	51                   	push   ecx
c000702a:	6a 00                	push   0x0
c000702c:	6a 00                	push   0x0
c000702e:	50                   	push   eax
c000702f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007032:	83 c4 14             	add    esp,0x14
c0007035:	68 08 f4 01 c0       	push   0xc001f408
c000703a:	e8 60 8d 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000703f:	e8 ed f8 00 00       	call   c0016931 <HalInitialiseCoprocessor()>
c0007044:	c7 04 24 74 f3 01 c0 	mov    DWORD PTR [esp],0xc001f374
c000704b:	e8 4f 8d 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c0007050:	c7 04 24 99 6a 00 c0 	mov    DWORD PTR [esp],0xc0006a99
c0007057:	e8 e0 d9 00 00       	call   c0014a3c <setupMultitasking(void (*)())>
c000705c:	83 c4 14             	add    esp,0x14
c000705f:	5b                   	pop    ebx
c0007060:	83 c8 ff             	or     eax,0xffffffff
c0007063:	5e                   	pop    esi
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::disableNMI()>:
c0007066:	6a 00                	push   0x0
c0007068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000706c:	50                   	push   eax
c000706d:	e8 0a ff ff ff       	call   c0006f7c <Computer::enableNMI(bool)>
c0007072:	5a                   	pop    edx
c0007073:	59                   	pop    ecx
c0007074:	c3                   	ret    
c0007075:	90                   	nop

c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000707e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007085:	19 c0                	sbb    eax,eax
c0007087:	83 e0 80             	and    eax,0xffffff80
c000708a:	09 d0                	or     eax,edx
c000708c:	e6 70                	out    0x70,al
c000708e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007092:	e6 71                	out    0x71,al
c0007094:	c3                   	ret    
c0007095:	90                   	nop

c0007096 <Computer::handleNMI()>:
c0007096:	56                   	push   esi
c0007097:	53                   	push   ebx
c0007098:	83 ec 10             	sub    esp,0x10
c000709b:	e4 92                	in     al,0x92
c000709d:	89 c6                	mov    esi,eax
c000709f:	e4 61                	in     al,0x61
c00070a1:	68 8f f3 01 c0       	push   0xc001f38f
c00070a6:	88 c3                	mov    bl,al
c00070a8:	e8 b6 35 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00070ad:	83 c4 10             	add    esp,0x10
c00070b0:	83 e6 10             	and    esi,0x10
c00070b3:	75 0d                	jne    c00070c2 <Computer::handleNMI()+0x2c>
c00070b5:	f6 c3 40             	test   bl,0x40
c00070b8:	75 1d                	jne    c00070d7 <Computer::handleNMI()+0x41>
c00070ba:	84 db                	test   bl,bl
c00070bc:	78 2d                	js     c00070eb <Computer::handleNMI()+0x55>
c00070be:	58                   	pop    eax
c00070bf:	5b                   	pop    ebx
c00070c0:	5e                   	pop    esi
c00070c1:	c3                   	ret    
c00070c2:	83 ec 0c             	sub    esp,0xc
c00070c5:	68 a0 f3 01 c0       	push   0xc001f3a0
c00070ca:	e8 48 93 00 00       	call   c0010417 <KePanic(char const*)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	f6 c3 40             	test   bl,0x40
c00070d5:	74 e3                	je     c00070ba <Computer::handleNMI()+0x24>
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	68 ad f3 01 c0       	push   0xc001f3ad
c00070df:	e8 33 93 00 00       	call   c0010417 <KePanic(char const*)>
c00070e4:	83 c4 10             	add    esp,0x10
c00070e7:	84 db                	test   bl,bl
c00070e9:	79 d3                	jns    c00070be <Computer::handleNMI()+0x28>
c00070eb:	c7 44 24 10 b7 f3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f3b7
c00070f3:	5a                   	pop    edx
c00070f4:	5b                   	pop    ebx
c00070f5:	5e                   	pop    esi
c00070f6:	e9 1c 93 00 00       	jmp    c0010417 <KePanic(char const*)>
c00070fb:	90                   	nop

c00070fc <GDTEntry::setBase(unsigned int)>:
c00070fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007100:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007104:	89 c1                	mov    ecx,eax
c0007106:	c1 e9 10             	shr    ecx,0x10
c0007109:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000710d:	c1 e8 18             	shr    eax,0x18
c0007110:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007113:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007116:	c3                   	ret    
c0007117:	90                   	nop

c0007118 <GDTEntry::setLimit(unsigned int)>:
c0007118:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000711c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007120:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007123:	66 89 01             	mov    WORD PTR [ecx],ax
c0007126:	c1 e8 10             	shr    eax,0x10
c0007129:	83 e2 f0             	and    edx,0xfffffff0
c000712c:	83 e0 0f             	and    eax,0xf
c000712f:	09 d0                	or     eax,edx
c0007131:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007134:	c3                   	ret    
c0007135:	90                   	nop

c0007136 <GDT::GDT()>:
c0007136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000713a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007144:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000714a:	90                   	nop
c000714b:	c3                   	ret    

c000714c <GDT::addEntry(GDTEntry)>:
c000714c:	53                   	push   ebx
c000714d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007151:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007155:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007159:	8b 02                	mov    eax,DWORD PTR [edx]
c000715b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000715f:	8d 48 01             	lea    ecx,[eax+0x1]
c0007162:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007166:	89 0a                	mov    DWORD PTR [edx],ecx
c0007168:	c1 e0 03             	shl    eax,0x3
c000716b:	5b                   	pop    ebx
c000716c:	c3                   	ret    
c000716d:	90                   	nop

c000716e <GDT::getNumberOfEntries()>:
c000716e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007172:	8b 00                	mov    eax,DWORD PTR [eax]
c0007174:	c3                   	ret    
c0007175:	90                   	nop

c0007176 <GDT::flush()>:
c0007176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717a:	83 c0 04             	add    eax,0x4
c000717d:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0007180:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007185:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000718c:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007193:	e9 c2 91 ff ff       	jmp    c000035a <loadGDT>

c0007198 <GDT::setup()>:
c0007198:	57                   	push   edi
c0007199:	56                   	push   esi
c000719a:	53                   	push   ebx
c000719b:	83 ec 30             	sub    esp,0x30
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	6a 00                	push   0x0
c00071a4:	8d 74 24 14          	lea    esi,[esp+0x14]
c00071a8:	56                   	push   esi
c00071a9:	e8 4e ff ff ff       	call   c00070fc <GDTEntry::setBase(unsigned int)>
c00071ae:	6a 00                	push   0x0
c00071b0:	56                   	push   esi
c00071b1:	e8 62 ff ff ff       	call   c0007118 <GDTEntry::setLimit(unsigned int)>
c00071b6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071be:	6a 00                	push   0x0
c00071c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071c4:	56                   	push   esi
c00071c5:	e8 32 ff ff ff       	call   c00070fc <GDTEntry::setBase(unsigned int)>
c00071ca:	68 ff ff ff 00       	push   0xffffff
c00071cf:	56                   	push   esi
c00071d0:	e8 43 ff ff ff       	call   c0007118 <GDTEntry::setLimit(unsigned int)>
c00071d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071dd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071e2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071e6:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071eb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071f3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071f7:	89 f8                	mov    eax,edi
c00071f9:	89 fa                	mov    edx,edi
c00071fb:	80 e4 f7             	and    ah,0xf7
c00071fe:	80 ce 60             	or     dh,0x60
c0007201:	89 c7                	mov    edi,eax
c0007203:	80 cc 60             	or     ah,0x60
c0007206:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000720a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000720e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007212:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007216:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000721a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000721e:	83 c4 20             	add    esp,0x20
c0007221:	6a 00                	push   0x0
c0007223:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007227:	50                   	push   eax
c0007228:	e8 cf fe ff ff       	call   c00070fc <GDTEntry::setBase(unsigned int)>
c000722d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007231:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007235:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000723a:	6a 00                	push   0x0
c000723c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007240:	50                   	push   eax
c0007241:	e8 b6 fe ff ff       	call   c00070fc <GDTEntry::setBase(unsigned int)>
c0007246:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000724b:	83 c4 0c             	add    esp,0xc
c000724e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007256:	53                   	push   ebx
c0007257:	e8 f0 fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c000725c:	83 c4 0c             	add    esp,0xc
c000725f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007263:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007267:	53                   	push   ebx
c0007268:	e8 df fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c000726d:	83 c4 0c             	add    esp,0xc
c0007270:	57                   	push   edi
c0007271:	56                   	push   esi
c0007272:	53                   	push   ebx
c0007273:	e8 d4 fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000727f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007283:	53                   	push   ebx
c0007284:	e8 c3 fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c0007289:	83 c4 0c             	add    esp,0xc
c000728c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007290:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007294:	53                   	push   ebx
c0007295:	e8 b2 fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c000729a:	83 c4 0c             	add    esp,0xc
c000729d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072a5:	53                   	push   ebx
c00072a6:	e8 a1 fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c00072ab:	83 c4 0c             	add    esp,0xc
c00072ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b6:	53                   	push   ebx
c00072b7:	e8 90 fe ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c00072bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072bf:	e8 b2 fe ff ff       	call   c0007176 <GDT::flush()>
c00072c4:	83 c4 40             	add    esp,0x40
c00072c7:	5b                   	pop    ebx
c00072c8:	5e                   	pop    esi
c00072c9:	5f                   	pop    edi
c00072ca:	c3                   	ret    

c00072cb <idleFunction(void*)>:
c00072cb:	83 ec 0c             	sub    esp,0xc
c00072ce:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072d3:	48                   	dec    eax
c00072d4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072d9:	75 01                	jne    c00072dc <idleFunction(void*)+0x11>
c00072db:	fb                   	sti    
c00072dc:	e8 2a f3 00 00       	call   c001660b <HalSystemIdle()>
c00072e1:	e8 7c 6e 01 00       	call   c001e162 <idleCommon()>
c00072e6:	eb f4                	jmp    c00072dc <idleFunction(void*)+0x11>

c00072e8 <IDTEntry::IDTEntry(bool)>:
c00072e8:	83 ec 04             	sub    esp,0x4
c00072eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ef:	88 04 24             	mov    BYTE PTR [esp],al
c00072f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 f0             	and    edx,0xfffffff0
c000730e:	83 ca 0e             	or     edx,0xe
c0007311:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007318:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000731b:	83 e2 ef             	and    edx,0xffffffef
c000731e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007321:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007325:	74 05                	je     c000732c <IDTEntry::IDTEntry(bool)+0x44>
c0007327:	b2 03                	mov    dl,0x3
c0007329:	eb 05                	jmp    c0007330 <IDTEntry::IDTEntry(bool)+0x48>
c000732b:	90                   	nop
c000732c:	b2 00                	mov    dl,0x0
c000732e:	66 90                	xchg   ax,ax
c0007330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007334:	83 e2 03             	and    edx,0x3
c0007337:	88 d1                	mov    cl,dl
c0007339:	c1 e1 05             	shl    ecx,0x5
c000733c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733f:	83 e2 9f             	and    edx,0xffffff9f
c0007342:	09 ca                	or     edx,ecx
c0007344:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000734e:	83 ca 80             	or     edx,0xffffff80
c0007351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007354:	90                   	nop
c0007355:	83 c4 04             	add    esp,0x4
c0007358:	c3                   	ret    
c0007359:	90                   	nop

c000735a <IDTEntry::setOffset(unsigned int)>:
c000735a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	66 89 02             	mov    WORD PTR [edx],ax
c0007365:	c1 e8 10             	shr    eax,0x10
c0007368:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000736c:	c3                   	ret    
c000736d:	90                   	nop
c000736e:	66 90                	xchg   ax,ax

c0007370 <IDT::IDT()>:
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007376:	83 c0 30             	add    eax,0x30
c0007379:	c3                   	ret    

c000737a <IDT::addEntry(IDTEntry, int)>:
c000737a:	53                   	push   ebx
c000737b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000737f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000738b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000738e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007392:	5b                   	pop    ebx
c0007393:	c3                   	ret    

c0007394 <IDT::addEntry(int, void (*)(), bool)>:
c0007394:	53                   	push   ebx
c0007395:	83 ec 10             	sub    esp,0x10
c0007398:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000739d:	50                   	push   eax
c000739e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00073a2:	53                   	push   ebx
c00073a3:	e8 40 ff ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c00073a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073ac:	53                   	push   ebx
c00073ad:	e8 a8 ff ff ff       	call   c000735a <IDTEntry::setOffset(unsigned int)>
c00073b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073c2:	e8 b3 ff ff ff       	call   c000737a <IDT::addEntry(IDTEntry, int)>
c00073c7:	83 c4 30             	add    esp,0x30
c00073ca:	5b                   	pop    ebx
c00073cb:	c3                   	ret    

c00073cc <IDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073d9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073de:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073e5:	c3                   	ret    

c00073e6 <IDT::setup()>:
c00073e6:	57                   	push   edi
c00073e7:	56                   	push   esi
c00073e8:	53                   	push   ebx
c00073e9:	83 ec 10             	sub    esp,0x10
c00073ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073f0:	6a 00                	push   0x0
c00073f2:	68 60 d8 01 c0       	push   0xc001d860
c00073f7:	6a 00                	push   0x0
c00073f9:	53                   	push   ebx
c00073fa:	e8 95 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00073ff:	6a 00                	push   0x0
c0007401:	68 70 d8 01 c0       	push   0xc001d870
c0007406:	6a 01                	push   0x1
c0007408:	53                   	push   ebx
c0007409:	e8 86 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000740e:	83 c4 20             	add    esp,0x20
c0007411:	6a 00                	push   0x0
c0007413:	68 7a d8 01 c0       	push   0xc001d87a
c0007418:	6a 02                	push   0x2
c000741a:	53                   	push   ebx
c000741b:	e8 74 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007420:	6a 00                	push   0x0
c0007422:	68 84 d8 01 c0       	push   0xc001d884
c0007427:	6a 03                	push   0x3
c0007429:	53                   	push   ebx
c000742a:	e8 65 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000742f:	83 c4 20             	add    esp,0x20
c0007432:	6a 00                	push   0x0
c0007434:	68 8e d8 01 c0       	push   0xc001d88e
c0007439:	6a 04                	push   0x4
c000743b:	53                   	push   ebx
c000743c:	e8 53 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007441:	6a 00                	push   0x0
c0007443:	68 98 d8 01 c0       	push   0xc001d898
c0007448:	6a 05                	push   0x5
c000744a:	53                   	push   ebx
c000744b:	e8 44 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007450:	83 c4 20             	add    esp,0x20
c0007453:	6a 00                	push   0x0
c0007455:	68 a2 d8 01 c0       	push   0xc001d8a2
c000745a:	6a 06                	push   0x6
c000745c:	53                   	push   ebx
c000745d:	e8 32 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007462:	6a 00                	push   0x0
c0007464:	68 ac d8 01 c0       	push   0xc001d8ac
c0007469:	6a 07                	push   0x7
c000746b:	53                   	push   ebx
c000746c:	e8 23 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	6a 00                	push   0x0
c0007476:	68 b6 d8 01 c0       	push   0xc001d8b6
c000747b:	6a 08                	push   0x8
c000747d:	53                   	push   ebx
c000747e:	e8 11 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007483:	6a 00                	push   0x0
c0007485:	68 be d8 01 c0       	push   0xc001d8be
c000748a:	6a 09                	push   0x9
c000748c:	53                   	push   ebx
c000748d:	e8 02 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007492:	83 c4 20             	add    esp,0x20
c0007495:	6a 00                	push   0x0
c0007497:	68 c8 d8 01 c0       	push   0xc001d8c8
c000749c:	6a 0a                	push   0xa
c000749e:	53                   	push   ebx
c000749f:	e8 f0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074a4:	6a 00                	push   0x0
c00074a6:	68 d0 d8 01 c0       	push   0xc001d8d0
c00074ab:	6a 0b                	push   0xb
c00074ad:	53                   	push   ebx
c00074ae:	e8 e1 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074b3:	83 c4 20             	add    esp,0x20
c00074b6:	6a 00                	push   0x0
c00074b8:	68 d8 d8 01 c0       	push   0xc001d8d8
c00074bd:	6a 0c                	push   0xc
c00074bf:	53                   	push   ebx
c00074c0:	e8 cf fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074c5:	6a 00                	push   0x0
c00074c7:	68 e0 d8 01 c0       	push   0xc001d8e0
c00074cc:	6a 0d                	push   0xd
c00074ce:	53                   	push   ebx
c00074cf:	e8 c0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074d4:	83 c4 20             	add    esp,0x20
c00074d7:	6a 00                	push   0x0
c00074d9:	68 fa d8 01 c0       	push   0xc001d8fa
c00074de:	6a 0e                	push   0xe
c00074e0:	53                   	push   ebx
c00074e1:	e8 ae fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074e6:	6a 00                	push   0x0
c00074e8:	68 02 d9 01 c0       	push   0xc001d902
c00074ed:	6a 0f                	push   0xf
c00074ef:	53                   	push   ebx
c00074f0:	e8 9f fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074f5:	83 c4 20             	add    esp,0x20
c00074f8:	6a 00                	push   0x0
c00074fa:	68 0c d9 01 c0       	push   0xc001d90c
c00074ff:	6a 10                	push   0x10
c0007501:	53                   	push   ebx
c0007502:	e8 8d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007507:	6a 00                	push   0x0
c0007509:	68 16 d9 01 c0       	push   0xc001d916
c000750e:	6a 11                	push   0x11
c0007510:	53                   	push   ebx
c0007511:	e8 7e fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007516:	83 c4 20             	add    esp,0x20
c0007519:	6a 00                	push   0x0
c000751b:	68 20 d9 01 c0       	push   0xc001d920
c0007520:	6a 12                	push   0x12
c0007522:	53                   	push   ebx
c0007523:	e8 6c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007528:	6a 01                	push   0x1
c000752a:	68 ba d9 01 c0       	push   0xc001d9ba
c000752f:	6a 60                	push   0x60
c0007531:	53                   	push   ebx
c0007532:	e8 5d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007537:	83 c4 20             	add    esp,0x20
c000753a:	6a 00                	push   0x0
c000753c:	68 c1 d9 01 c0       	push   0xc001d9c1
c0007541:	6a 20                	push   0x20
c0007543:	53                   	push   ebx
c0007544:	e8 4b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007549:	6a 00                	push   0x0
c000754b:	68 ac d9 01 c0       	push   0xc001d9ac
c0007550:	6a 21                	push   0x21
c0007552:	53                   	push   ebx
c0007553:	e8 3c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007558:	83 c4 20             	add    esp,0x20
c000755b:	6a 00                	push   0x0
c000755d:	68 b3 d9 01 c0       	push   0xc001d9b3
c0007562:	6a 22                	push   0x22
c0007564:	53                   	push   ebx
c0007565:	e8 2a fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000756a:	6a 00                	push   0x0
c000756c:	68 2a d9 01 c0       	push   0xc001d92a
c0007571:	6a 23                	push   0x23
c0007573:	53                   	push   ebx
c0007574:	e8 1b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007579:	83 c4 20             	add    esp,0x20
c000757c:	6a 00                	push   0x0
c000757e:	68 34 d9 01 c0       	push   0xc001d934
c0007583:	6a 24                	push   0x24
c0007585:	53                   	push   ebx
c0007586:	e8 09 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000758b:	6a 00                	push   0x0
c000758d:	68 3e d9 01 c0       	push   0xc001d93e
c0007592:	6a 25                	push   0x25
c0007594:	53                   	push   ebx
c0007595:	e8 fa fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000759a:	83 c4 20             	add    esp,0x20
c000759d:	6a 00                	push   0x0
c000759f:	68 48 d9 01 c0       	push   0xc001d948
c00075a4:	6a 26                	push   0x26
c00075a6:	53                   	push   ebx
c00075a7:	e8 e8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ac:	6a 00                	push   0x0
c00075ae:	68 52 d9 01 c0       	push   0xc001d952
c00075b3:	6a 27                	push   0x27
c00075b5:	53                   	push   ebx
c00075b6:	e8 d9 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075bb:	83 c4 20             	add    esp,0x20
c00075be:	6a 00                	push   0x0
c00075c0:	68 5c d9 01 c0       	push   0xc001d95c
c00075c5:	6a 28                	push   0x28
c00075c7:	53                   	push   ebx
c00075c8:	e8 c7 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075cd:	6a 00                	push   0x0
c00075cf:	68 66 d9 01 c0       	push   0xc001d966
c00075d4:	6a 29                	push   0x29
c00075d6:	53                   	push   ebx
c00075d7:	e8 b8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075dc:	83 c4 20             	add    esp,0x20
c00075df:	6a 00                	push   0x0
c00075e1:	68 70 d9 01 c0       	push   0xc001d970
c00075e6:	6a 2a                	push   0x2a
c00075e8:	53                   	push   ebx
c00075e9:	e8 a6 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ee:	6a 00                	push   0x0
c00075f0:	68 7a d9 01 c0       	push   0xc001d97a
c00075f5:	6a 2b                	push   0x2b
c00075f7:	53                   	push   ebx
c00075f8:	e8 97 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075fd:	83 c4 20             	add    esp,0x20
c0007600:	6a 00                	push   0x0
c0007602:	68 84 d9 01 c0       	push   0xc001d984
c0007607:	6a 2c                	push   0x2c
c0007609:	53                   	push   ebx
c000760a:	e8 85 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000760f:	6a 00                	push   0x0
c0007611:	68 8e d9 01 c0       	push   0xc001d98e
c0007616:	6a 2d                	push   0x2d
c0007618:	53                   	push   ebx
c0007619:	e8 76 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	83 c4 20             	add    esp,0x20
c0007621:	6a 00                	push   0x0
c0007623:	68 98 d9 01 c0       	push   0xc001d998
c0007628:	6a 2e                	push   0x2e
c000762a:	53                   	push   ebx
c000762b:	e8 64 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007630:	6a 00                	push   0x0
c0007632:	68 a2 d9 01 c0       	push   0xc001d9a2
c0007637:	6a 2f                	push   0x2f
c0007639:	53                   	push   ebx
c000763a:	e8 55 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	83 c4 20             	add    esp,0x20
c0007642:	6a 00                	push   0x0
c0007644:	68 fc da 01 c0       	push   0xc001dafc
c0007649:	6a 30                	push   0x30
c000764b:	53                   	push   ebx
c000764c:	e8 43 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007651:	6a 00                	push   0x0
c0007653:	68 06 db 01 c0       	push   0xc001db06
c0007658:	6a 31                	push   0x31
c000765a:	53                   	push   ebx
c000765b:	e8 34 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	83 c4 20             	add    esp,0x20
c0007663:	6a 00                	push   0x0
c0007665:	68 10 db 01 c0       	push   0xc001db10
c000766a:	6a 32                	push   0x32
c000766c:	53                   	push   ebx
c000766d:	e8 22 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007672:	6a 00                	push   0x0
c0007674:	68 1a db 01 c0       	push   0xc001db1a
c0007679:	6a 33                	push   0x33
c000767b:	53                   	push   ebx
c000767c:	e8 13 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	6a 00                	push   0x0
c0007686:	68 24 db 01 c0       	push   0xc001db24
c000768b:	6a 34                	push   0x34
c000768d:	53                   	push   ebx
c000768e:	e8 01 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007693:	6a 00                	push   0x0
c0007695:	68 2e db 01 c0       	push   0xc001db2e
c000769a:	6a 35                	push   0x35
c000769c:	53                   	push   ebx
c000769d:	e8 f2 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	83 c4 20             	add    esp,0x20
c00076a5:	6a 00                	push   0x0
c00076a7:	68 38 db 01 c0       	push   0xc001db38
c00076ac:	6a 36                	push   0x36
c00076ae:	53                   	push   ebx
c00076af:	e8 e0 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076b4:	6a 00                	push   0x0
c00076b6:	68 42 db 01 c0       	push   0xc001db42
c00076bb:	6a 37                	push   0x37
c00076bd:	53                   	push   ebx
c00076be:	e8 d1 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	83 c4 1c             	add    esp,0x1c
c00076c6:	6a 03                	push   0x3
c00076c8:	6a 02                	push   0x2
c00076ca:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076d0:	e8 73 24 00 00       	call   c0009b48 <VAS::allocatePages(int, int)>
c00076d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076dc:	89 c6                	mov    esi,eax
c00076de:	e8 90 01 00 00       	call   c0007873 <malloc>
c00076e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076e6:	89 c7                	mov    edi,eax
c00076e8:	e8 c3 15 00 00       	call   c0008cb0 <TSS::TSS()>
c00076ed:	83 c4 0c             	add    esp,0xc
c00076f0:	81 c6 00 20 00 00    	add    esi,0x2000
c00076f6:	68 b6 d8 01 c0       	push   0xc001d8b6
c00076fb:	56                   	push   esi
c00076fc:	57                   	push   edi
c00076fd:	e8 f2 15 00 00       	call   c0008cf4 <TSS::setup(unsigned long, unsigned long)>
c0007702:	89 c6                	mov    esi,eax
c0007704:	58                   	pop    eax
c0007705:	5a                   	pop    edx
c0007706:	6a 00                	push   0x0
c0007708:	8d 44 24 14          	lea    eax,[esp+0x14]
c000770c:	50                   	push   eax
c000770d:	e8 d6 fb ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c0007712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007716:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000771b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007721:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007728:	80 ce 05             	or     dh,0x5
c000772b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007733:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000773a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000773d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007740:	e8 87 fc ff ff       	call   c00073cc <IDT::flush()>
c0007745:	83 c4 20             	add    esp,0x20
c0007748:	5b                   	pop    ebx
c0007749:	5e                   	pop    esi
c000774a:	5f                   	pop    edi
c000774b:	c3                   	ret    

c000774c <sbrk>:
c000774c:	55                   	push   ebp
c000774d:	57                   	push   edi
c000774e:	56                   	push   esi
c000774f:	53                   	push   ebx
c0007750:	83 ec 1c             	sub    esp,0x1c
c0007753:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007757:	85 ed                	test   ebp,ebp
c0007759:	a1 4c 17 02 c0       	mov    eax,ds:0xc002174c
c000775e:	74 5f                	je     c00077bf <sbrk+0x73>
c0007760:	78 65                	js     c00077c7 <sbrk+0x7b>
c0007762:	a1 4c 17 02 c0       	mov    eax,ds:0xc002174c
c0007767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000776b:	81 c5 ff 0f 00 00    	add    ebp,0xfff
c0007771:	89 e8                	mov    eax,ebp
c0007773:	c1 f8 1f             	sar    eax,0x1f
c0007776:	25 ff 0f 00 00       	and    eax,0xfff
c000777b:	01 c5                	add    ebp,eax
c000777d:	c1 fd 0c             	sar    ebp,0xc
c0007780:	bb 00 00 00 00       	mov    ebx,0x0
c0007785:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000778b:	8b 3d 4c 17 02 c0    	mov    edi,DWORD PTR ds:0xc002174c
c0007791:	e8 d4 03 00 00       	call   c0007b6a <Phys::allocatePage()>
c0007796:	68 01 04 00 00       	push   0x401
c000779b:	57                   	push   edi
c000779c:	50                   	push   eax
c000779d:	56                   	push   esi
c000779e:	e8 9f 22 00 00       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c00077a3:	81 05 4c 17 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002174c,0x1000
c00077ad:	43                   	inc    ebx
c00077ae:	83 c4 10             	add    esp,0x10
c00077b1:	39 dd                	cmp    ebp,ebx
c00077b3:	75 d0                	jne    c0007785 <sbrk+0x39>
c00077b5:	0f 20 d8             	mov    eax,cr3
c00077b8:	0f 22 d8             	mov    cr3,eax
c00077bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077bf:	83 c4 1c             	add    esp,0x1c
c00077c2:	5b                   	pop    ebx
c00077c3:	5e                   	pop    esi
c00077c4:	5f                   	pop    edi
c00077c5:	5d                   	pop    ebp
c00077c6:	c3                   	ret    
c00077c7:	83 ec 08             	sub    esp,0x8
c00077ca:	55                   	push   ebp
c00077cb:	68 58 f4 01 c0       	push   0xc001f458
c00077d0:	e8 8e 2e 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00077d5:	83 c4 10             	add    esp,0x10
c00077d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077dd:	eb e0                	jmp    c00077bf <sbrk+0x73>

c00077df <mmap>:
c00077df:	83 ec 18             	sub    esp,0x18
c00077e2:	68 88 f4 01 c0       	push   0xc001f488
c00077e7:	e8 2b 8c 00 00       	call   c0010417 <KePanic(char const*)>
c00077ec:	b8 00 00 00 00       	mov    eax,0x0
c00077f1:	83 c4 1c             	add    esp,0x1c
c00077f4:	c3                   	ret    

c00077f5 <munmap>:
c00077f5:	83 ec 18             	sub    esp,0x18
c00077f8:	68 8d f4 01 c0       	push   0xc001f48d
c00077fd:	e8 15 8c 00 00       	call   c0010417 <KePanic(char const*)>
c0007802:	b8 00 00 00 00       	mov    eax,0x0
c0007807:	83 c4 1c             	add    esp,0x1c
c000780a:	c3                   	ret    

c000780b <liballoc_lock()>:
c000780b:	fa                   	cli    
c000780c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007812:	b8 00 00 00 00       	mov    eax,0x0
c0007817:	c3                   	ret    

c0007818 <liballoc_unlock()>:
c0007818:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000781d:	48                   	dec    eax
c000781e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007823:	75 01                	jne    c0007826 <liballoc_unlock()+0xe>
c0007825:	fb                   	sti    
c0007826:	b8 00 00 00 00       	mov    eax,0x0
c000782b:	c3                   	ret    

c000782c <liballoc_alloc(int)>:
c000782c:	83 ec 10             	sub    esp,0x10
c000782f:	6a 01                	push   0x1
c0007831:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007835:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000783b:	e8 08 23 00 00       	call   c0009b48 <VAS::allocatePages(int, int)>
c0007840:	83 c4 1c             	add    esp,0x1c
c0007843:	c3                   	ret    

c0007844 <liballoc_free(void*, int)>:
c0007844:	83 ec 14             	sub    esp,0x14
c0007847:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000784b:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007851:	e8 3e 1f 00 00       	call   c0009794 <VAS::freeAllocatedPages(unsigned long)>
c0007856:	b8 00 00 00 00       	mov    eax,0x0
c000785b:	83 c4 1c             	add    esp,0x1c
c000785e:	c3                   	ret    

c000785f <realloc>:
c000785f:	83 ec 14             	sub    esp,0x14
c0007862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786a:	e8 ce 9c ff ff       	call   c000153d <dlrealloc>
c000786f:	83 c4 1c             	add    esp,0x1c
c0007872:	c3                   	ret    

c0007873 <malloc>:
c0007873:	83 ec 18             	sub    esp,0x18
c0007876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787a:	e8 81 97 ff ff       	call   c0001000 <dlmalloc>
c000787f:	83 c4 1c             	add    esp,0x1c
c0007882:	c3                   	ret    

c0007883 <free>:
c0007883:	83 ec 18             	sub    esp,0x18
c0007886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788a:	e8 13 94 ff ff       	call   c0000ca2 <dlfree>
c000788f:	83 c4 1c             	add    esp,0x1c
c0007892:	c3                   	ret    

c0007893 <rfree>:
c0007893:	83 ec 18             	sub    esp,0x18
c0007896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000789a:	e8 03 94 ff ff       	call   c0000ca2 <dlfree>
c000789f:	83 c4 1c             	add    esp,0x1c
c00078a2:	c3                   	ret    

c00078a3 <calloc>:
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 10             	sub    esp,0x10
c00078a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078ac:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078b1:	53                   	push   ebx
c00078b2:	e8 bc ff ff ff       	call   c0007873 <malloc>
c00078b7:	89 c6                	mov    esi,eax
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	53                   	push   ebx
c00078bd:	6a 00                	push   0x0
c00078bf:	50                   	push   eax
c00078c0:	e8 fb 8b ff ff       	call   c00004c0 <memset>
c00078c5:	89 f0                	mov    eax,esi
c00078c7:	83 c4 14             	add    esp,0x14
c00078ca:	5b                   	pop    ebx
c00078cb:	5e                   	pop    esi
c00078cc:	c3                   	ret    

c00078cd <KeEntryPoint>:
c00078cd:	57                   	push   edi
c00078ce:	bf f9 03 00 00       	mov    edi,0x3f9
c00078d3:	56                   	push   esi
c00078d4:	31 f6                	xor    esi,esi
c00078d6:	53                   	push   ebx
c00078d7:	89 fa                	mov    edx,edi
c00078d9:	83 ec 2c             	sub    esp,0x2c
c00078dc:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078e1:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078e6:	89 f0                	mov    eax,esi
c00078e8:	ee                   	out    dx,al
c00078e9:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078ee:	b0 80                	mov    al,0x80
c00078f0:	89 da                	mov    edx,ebx
c00078f2:	ee                   	out    dx,al
c00078f3:	b1 03                	mov    cl,0x3
c00078f5:	ba f8 03 00 00       	mov    edx,0x3f8
c00078fa:	88 c8                	mov    al,cl
c00078fc:	ee                   	out    dx,al
c00078fd:	89 f0                	mov    eax,esi
c00078ff:	89 fa                	mov    edx,edi
c0007901:	ee                   	out    dx,al
c0007902:	88 c8                	mov    al,cl
c0007904:	89 da                	mov    edx,ebx
c0007906:	ee                   	out    dx,al
c0007907:	b0 c7                	mov    al,0xc7
c0007909:	ba fa 03 00 00       	mov    edx,0x3fa
c000790e:	ee                   	out    dx,al
c000790f:	b0 0b                	mov    al,0xb
c0007911:	ba fc 03 00 00       	mov    edx,0x3fc
c0007916:	ee                   	out    dx,al
c0007917:	68 94 f4 01 c0       	push   0xc001f494
c000791c:	e8 42 2d 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0007921:	e8 0b 84 00 00       	call   c000fd31 <KeDisplaySplashScreen()>
c0007926:	a1 24 05 00 00       	mov    eax,ds:0x524
c000792b:	05 ff 0f 00 00       	add    eax,0xfff
c0007930:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007935:	89 04 24             	mov    DWORD PTR [esp],eax
c0007938:	e8 92 03 00 00       	call   c0007ccf <Phys::physicalMemorySetup(unsigned int)>
c000793d:	e8 f9 1b 00 00       	call   c000953b <Virt::virtualMemorySetup()>
c0007942:	58                   	pop    eax
c0007943:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007947:	53                   	push   ebx
c0007948:	e8 c9 1e 00 00       	call   c0009816 <VAS::VAS()>
c000794d:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007953:	e8 a2 67 01 00       	call   c001e0fa <_init>
c0007958:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c000795f:	e8 0f ff ff ff       	call   c0007873 <malloc>
c0007964:	89 04 24             	mov    DWORD PTR [esp],eax
c0007967:	89 c6                	mov    esi,eax
c0007969:	e8 66 f2 ff ff       	call   c0006bd4 <Computer::Computer()>
c000796e:	6a 00                	push   0x0
c0007970:	6a 00                	push   0x0
c0007972:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007978:	6a 00                	push   0x0
c000797a:	56                   	push   esi
c000797b:	e8 14 f6 ff ff       	call   c0006f94 <Computer::open(int, int, void*)>
c0007980:	83 c4 14             	add    esp,0x14
c0007983:	53                   	push   ebx
c0007984:	e8 55 1f 00 00       	call   c00098de <VAS::~VAS()>
c0007989:	83 c4 30             	add    esp,0x30
c000798c:	5b                   	pop    ebx
c000798d:	5e                   	pop    esi
c000798e:	5f                   	pop    edi
c000798f:	c3                   	ret    

c0007990 <Phys::allocateDMA(unsigned long)>:
c0007990:	55                   	push   ebp
c0007991:	31 ed                	xor    ebp,ebp
c0007993:	57                   	push   edi
c0007994:	56                   	push   esi
c0007995:	53                   	push   ebx
c0007996:	31 db                	xor    ebx,ebx
c0007998:	83 ec 1c             	sub    esp,0x1c
c000799b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000799f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00079a7:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00079ad:	31 c0                	xor    eax,eax
c00079af:	c1 ef 0c             	shr    edi,0xc
c00079b2:	eb 19                	jmp    c00079cd <Phys::allocateDMA(unsigned long)+0x3d>
c00079b4:	85 c0                	test   eax,eax
c00079b6:	75 06                	jne    c00079be <Phys::allocateDMA(unsigned long)+0x2e>
c00079b8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079bc:	89 dd                	mov    ebp,ebx
c00079be:	8d 70 01             	lea    esi,[eax+0x1]
c00079c1:	39 f7                	cmp    edi,esi
c00079c3:	74 33                	je     c00079f8 <Phys::allocateDMA(unsigned long)+0x68>
c00079c5:	89 f0                	mov    eax,esi
c00079c7:	43                   	inc    ebx
c00079c8:	83 fb 0f             	cmp    ebx,0xf
c00079cb:	7f 11                	jg     c00079de <Phys::allocateDMA(unsigned long)+0x4e>
c00079cd:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079d4:	74 de                	je     c00079b4 <Phys::allocateDMA(unsigned long)+0x24>
c00079d6:	31 c0                	xor    eax,eax
c00079d8:	43                   	inc    ebx
c00079d9:	83 fb 0f             	cmp    ebx,0xf
c00079dc:	7e ef                	jle    c00079cd <Phys::allocateDMA(unsigned long)+0x3d>
c00079de:	83 ec 0c             	sub    esp,0xc
c00079e1:	68 ac f4 01 c0       	push   0xc001f4ac
c00079e6:	e8 2c 8a 00 00       	call   c0010417 <KePanic(char const*)>
c00079eb:	83 c4 10             	add    esp,0x10
c00079ee:	31 c0                	xor    eax,eax
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	89 e9                	mov    ecx,ebp
c00079fa:	c1 f9 04             	sar    ecx,0x4
c00079fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007a01:	8d 4c 2f ff          	lea    ecx,[edi+ebp*1-0x1]
c0007a05:	89 ca                	mov    edx,ecx
c0007a07:	c1 fa 1f             	sar    edx,0x1f
c0007a0a:	83 e2 0f             	and    edx,0xf
c0007a0d:	01 ca                	add    edx,ecx
c0007a0f:	c1 fa 04             	sar    edx,0x4
c0007a12:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a16:	74 08                	je     c0007a20 <Phys::allocateDMA(unsigned long)+0x90>
c0007a18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a1c:	31 c0                	xor    eax,eax
c0007a1e:	eb b8                	jmp    c00079d8 <Phys::allocateDMA(unsigned long)+0x48>
c0007a20:	85 ff                	test   edi,edi
c0007a22:	74 15                	je     c0007a39 <Phys::allocateDMA(unsigned long)+0xa9>
c0007a24:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a2a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a31:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a34:	42                   	inc    edx
c0007a35:	39 d0                	cmp    eax,edx
c0007a37:	75 f8                	jne    c0007a31 <Phys::allocateDMA(unsigned long)+0xa1>
c0007a39:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0007a3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a42:	01 f8                	add    eax,edi
c0007a44:	85 d2                	test   edx,edx
c0007a46:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0007a4b:	74 17                	je     c0007a64 <Phys::allocateDMA(unsigned long)+0xd4>
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	68 ac f4 01 c0       	push   0xc001f4ac
c0007a55:	e8 bd 89 00 00       	call   c0010417 <KePanic(char const*)>
c0007a5a:	83 c4 10             	add    esp,0x10
c0007a5d:	89 f0                	mov    eax,esi
c0007a5f:	e9 63 ff ff ff       	jmp    c00079c7 <Phys::allocateDMA(unsigned long)+0x37>
c0007a64:	c1 e5 0c             	shl    ebp,0xc
c0007a67:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a6d:	eb 81                	jmp    c00079f0 <Phys::allocateDMA(unsigned long)+0x60>

c0007a6f <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a73:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a79:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0007a7e:	c1 ea 0c             	shr    edx,0xc
c0007a81:	29 d0                	sub    eax,edx
c0007a83:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0007a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a8c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a91:	c1 e8 0c             	shr    eax,0xc
c0007a94:	85 d2                	test   edx,edx
c0007a96:	74 0f                	je     c0007aa7 <Phys::freeDMA(unsigned long, unsigned long)+0x38>
c0007a98:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a9d:	01 c2                	add    edx,eax
c0007a9f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007aa2:	40                   	inc    eax
c0007aa3:	39 d0                	cmp    eax,edx
c0007aa5:	75 f8                	jne    c0007a9f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007aa7:	c3                   	ret    

c0007aa8 <Phys::setPageState(unsigned long, bool)>:
c0007aa8:	56                   	push   esi
c0007aa9:	ba 01 00 00 00       	mov    edx,0x1
c0007aae:	53                   	push   ebx
c0007aaf:	8b 35 50 17 02 c0    	mov    esi,DWORD PTR ds:0xc0021750
c0007ab5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007abd:	89 c8                	mov    eax,ecx
c0007abf:	83 e1 07             	and    ecx,0x7
c0007ac2:	c1 e8 03             	shr    eax,0x3
c0007ac5:	01 c6                	add    esi,eax
c0007ac7:	d3 e2                	shl    edx,cl
c0007ac9:	83 f2 ff             	xor    edx,0xffffffff
c0007acc:	20 16                	and    BYTE PTR [esi],dl
c0007ace:	8b 15 50 17 02 c0    	mov    edx,DWORD PTR ds:0xc0021750
c0007ad4:	01 d0                	add    eax,edx
c0007ad6:	d3 e3                	shl    ebx,cl
c0007ad8:	8a 08                	mov    cl,BYTE PTR [eax]
c0007ada:	09 d9                	or     ecx,ebx
c0007adc:	88 08                	mov    BYTE PTR [eax],cl
c0007ade:	5b                   	pop    ebx
c0007adf:	5e                   	pop    esi
c0007ae0:	c3                   	ret    

c0007ae1 <Phys::getPageState(unsigned long)>:
c0007ae1:	53                   	push   ebx
c0007ae2:	8b 15 50 17 02 c0    	mov    edx,DWORD PTR ds:0xc0021750
c0007ae8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007aec:	31 db                	xor    ebx,ebx
c0007aee:	89 c8                	mov    eax,ecx
c0007af0:	83 e1 07             	and    ecx,0x7
c0007af3:	c1 e8 03             	shr    eax,0x3
c0007af6:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007af9:	89 d8                	mov    eax,ebx
c0007afb:	5b                   	pop    ebx
c0007afc:	d3 f8                	sar    eax,cl
c0007afe:	83 e0 01             	and    eax,0x1
c0007b01:	c3                   	ret    

c0007b02 <Phys::freePage(unsigned long)>:
c0007b02:	53                   	push   ebx
c0007b03:	83 ec 08             	sub    esp,0x8
c0007b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007b0a:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007b10:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b16:	76 40                	jbe    c0007b58 <Phys::freePage(unsigned long)+0x56>
c0007b18:	c1 e8 0c             	shr    eax,0xc
c0007b1b:	50                   	push   eax
c0007b1c:	89 c3                	mov    ebx,eax
c0007b1e:	e8 be ff ff ff       	call   c0007ae1 <Phys::getPageState(unsigned long)>
c0007b23:	59                   	pop    ecx
c0007b24:	84 c0                	test   al,al
c0007b26:	74 1f                	je     c0007b47 <Phys::freePage(unsigned long)+0x45>
c0007b28:	50                   	push   eax
c0007b29:	8b 0d e4 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee4
c0007b2f:	50                   	push   eax
c0007b30:	49                   	dec    ecx
c0007b31:	6a 00                	push   0x0
c0007b33:	89 0d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ecx
c0007b39:	53                   	push   ebx
c0007b3a:	e8 69 ff ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007b3f:	83 c4 10             	add    esp,0x10
c0007b42:	83 c4 08             	add    esp,0x8
c0007b45:	5b                   	pop    ebx
c0007b46:	c3                   	ret    
c0007b47:	c7 44 24 10 51 f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f551
c0007b4f:	83 c4 08             	add    esp,0x8
c0007b52:	5b                   	pop    ebx
c0007b53:	e9 bf 88 00 00       	jmp    c0010417 <KePanic(char const*)>
c0007b58:	68 00 10 00 00       	push   0x1000
c0007b5d:	50                   	push   eax
c0007b5e:	e8 0c ff ff ff       	call   c0007a6f <Phys::freeDMA(unsigned long, unsigned long)>
c0007b63:	5b                   	pop    ebx
c0007b64:	58                   	pop    eax
c0007b65:	83 c4 08             	add    esp,0x8
c0007b68:	5b                   	pop    ebx
c0007b69:	c3                   	ret    

c0007b6a <Phys::allocatePage()>:
c0007b6a:	56                   	push   esi
c0007b6b:	53                   	push   ebx
c0007b6c:	83 ec 14             	sub    esp,0x14
c0007b6f:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b75:	89 f3                	mov    ebx,esi
c0007b77:	eb 0a                	jmp    c0007b83 <Phys::allocatePage()+0x19>
c0007b79:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b7f:	39 de                	cmp    esi,ebx
c0007b81:	74 24                	je     c0007ba7 <Phys::allocatePage()+0x3d>
c0007b83:	53                   	push   ebx
c0007b84:	e8 58 ff ff ff       	call   c0007ae1 <Phys::getPageState(unsigned long)>
c0007b89:	5a                   	pop    edx
c0007b8a:	84 c0                	test   al,al
c0007b8c:	74 67                	je     c0007bf5 <Phys::allocatePage()+0x8b>
c0007b8e:	43                   	inc    ebx
c0007b8f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b95:	75 e2                	jne    c0007b79 <Phys::allocatePage()+0xf>
c0007b97:	31 db                	xor    ebx,ebx
c0007b99:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007ba3:	39 de                	cmp    esi,ebx
c0007ba5:	75 dc                	jne    c0007b83 <Phys::allocatePage()+0x19>
c0007ba7:	8a 0d fc 3e 02 c0    	mov    cl,BYTE PTR ds:0xc0023efc
c0007bad:	83 ec 0c             	sub    esp,0xc
c0007bb0:	83 f1 01             	xor    ecx,0x1
c0007bb3:	88 0d fc 3e 02 c0    	mov    BYTE PTR ds:0xc0023efc,cl
c0007bb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007bbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007bc1:	8b 98 12 05 00 00    	mov    ebx,DWORD PTR [eax+0x512]
c0007bc7:	53                   	push   ebx
c0007bc8:	e8 77 27 00 00       	call   c000a344 <VAS::scanForEviction()>
c0007bcd:	83 c4 10             	add    esp,0x10
c0007bd0:	85 c0                	test   eax,eax
c0007bd2:	75 46                	jne    c0007c1a <Phys::allocatePage()+0xb0>
c0007bd4:	83 ec 0c             	sub    esp,0xc
c0007bd7:	68 d4 f4 01 c0       	push   0xc001f4d4
c0007bdc:	e8 36 88 00 00       	call   c0010417 <KePanic(char const*)>
c0007be1:	83 c4 10             	add    esp,0x10
c0007be4:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bea:	53                   	push   ebx
c0007beb:	e8 f1 fe ff ff       	call   c0007ae1 <Phys::getPageState(unsigned long)>
c0007bf0:	5a                   	pop    edx
c0007bf1:	84 c0                	test   al,al
c0007bf3:	75 99                	jne    c0007b8e <Phys::allocatePage()+0x24>
c0007bf5:	6a 01                	push   0x1
c0007bf7:	53                   	push   ebx
c0007bf8:	e8 ab fe ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007bfd:	8b 35 e4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ee4
c0007c03:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007c08:	46                   	inc    esi
c0007c09:	5a                   	pop    edx
c0007c0a:	89 35 e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,esi
c0007c10:	59                   	pop    ecx
c0007c11:	c1 e0 0c             	shl    eax,0xc
c0007c14:	83 c4 14             	add    esp,0x14
c0007c17:	5b                   	pop    ebx
c0007c18:	5e                   	pop    esi
c0007c19:	c3                   	ret    
c0007c1a:	52                   	push   edx
c0007c1b:	52                   	push   edx
c0007c1c:	89 c2                	mov    edx,eax
c0007c1e:	c1 ea 0c             	shr    edx,0xc
c0007c21:	6a 01                	push   0x1
c0007c23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c27:	52                   	push   edx
c0007c28:	e8 7b fe ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007c2d:	83 c4 10             	add    esp,0x10
c0007c30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c34:	eb de                	jmp    c0007c14 <Phys::allocatePage()+0xaa>

c0007c36 <Phys::allocateContiguousPages(int)>:
c0007c36:	57                   	push   edi
c0007c37:	56                   	push   esi
c0007c38:	53                   	push   ebx
c0007c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c3d:	fa                   	cli    
c0007c3e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c43:	31 db                	xor    ebx,ebx
c0007c45:	40                   	inc    eax
c0007c46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c4b:	85 db                	test   ebx,ebx
c0007c4d:	75 11                	jne    c0007c60 <Phys::allocateContiguousPages(int)+0x2a>
c0007c4f:	e8 16 ff ff ff       	call   c0007b6a <Phys::allocatePage()>
c0007c54:	83 fe 01             	cmp    esi,0x1
c0007c57:	89 c7                	mov    edi,eax
c0007c59:	74 21                	je     c0007c7c <Phys::allocateContiguousPages(int)+0x46>
c0007c5b:	bb 01 00 00 00       	mov    ebx,0x1
c0007c60:	e8 05 ff ff ff       	call   c0007b6a <Phys::allocatePage()>
c0007c65:	89 da                	mov    edx,ebx
c0007c67:	c1 e2 0c             	shl    edx,0xc
c0007c6a:	01 fa                	add    edx,edi
c0007c6c:	39 c2                	cmp    edx,eax
c0007c6e:	74 20                	je     c0007c90 <Phys::allocateContiguousPages(int)+0x5a>
c0007c70:	bb 01 00 00 00       	mov    ebx,0x1
c0007c75:	89 c7                	mov    edi,eax
c0007c77:	83 fe 01             	cmp    esi,0x1
c0007c7a:	75 e4                	jne    c0007c60 <Phys::allocateContiguousPages(int)+0x2a>
c0007c7c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c81:	48                   	dec    eax
c0007c82:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c87:	75 01                	jne    c0007c8a <Phys::allocateContiguousPages(int)+0x54>
c0007c89:	fb                   	sti    
c0007c8a:	5b                   	pop    ebx
c0007c8b:	89 f8                	mov    eax,edi
c0007c8d:	5e                   	pop    esi
c0007c8e:	5f                   	pop    edi
c0007c8f:	c3                   	ret    
c0007c90:	43                   	inc    ebx
c0007c91:	39 f3                	cmp    ebx,esi
c0007c93:	75 b6                	jne    c0007c4b <Phys::allocateContiguousPages(int)+0x15>
c0007c95:	eb e5                	jmp    c0007c7c <Phys::allocateContiguousPages(int)+0x46>

c0007c97 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c97:	56                   	push   esi
c0007c98:	53                   	push   ebx
c0007c99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c9d:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007ca3:	73 06                	jae    c0007cab <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ca5:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007cab:	c1 eb 0c             	shr    ebx,0xc
c0007cae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007cb2:	c1 e8 0c             	shr    eax,0xc
c0007cb5:	39 d8                	cmp    eax,ebx
c0007cb7:	73 13                	jae    c0007ccc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007cb9:	6a 00                	push   0x0
c0007cbb:	8d 70 01             	lea    esi,[eax+0x1]
c0007cbe:	50                   	push   eax
c0007cbf:	e8 e4 fd ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007cc4:	5a                   	pop    edx
c0007cc5:	89 f0                	mov    eax,esi
c0007cc7:	59                   	pop    ecx
c0007cc8:	39 f3                	cmp    ebx,esi
c0007cca:	75 ed                	jne    c0007cb9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ccc:	5b                   	pop    ebx
c0007ccd:	5e                   	pop    esi
c0007cce:	c3                   	ret    

c0007ccf <Phys::physicalMemorySetup(unsigned int)>:
c0007ccf:	55                   	push   ebp
c0007cd0:	57                   	push   edi
c0007cd1:	56                   	push   esi
c0007cd2:	53                   	push   ebx
c0007cd3:	31 db                	xor    ebx,ebx
c0007cd5:	83 ec 40             	sub    esp,0x40
c0007cd8:	6a 10                	push   0x10
c0007cda:	6a 00                	push   0x0
c0007cdc:	68 ec 3e 02 c0       	push   0xc0023eec
c0007ce1:	e8 da 87 ff ff       	call   c00004c0 <memset>
c0007ce6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cef:	05 00 10 00 00       	add    eax,0x1000
c0007cf4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007cf8:	5a                   	pop    edx
c0007cf9:	59                   	pop    ecx
c0007cfa:	50                   	push   eax
c0007cfb:	68 67 f5 01 c0       	push   0xc001f567
c0007d00:	e8 5e 29 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0007d05:	83 c4 10             	add    esp,0x10
c0007d08:	50                   	push   eax
c0007d09:	50                   	push   eax
c0007d0a:	6a 01                	push   0x1
c0007d0c:	53                   	push   ebx
c0007d0d:	43                   	inc    ebx
c0007d0e:	e8 95 fd ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007d13:	83 c4 10             	add    esp,0x10
c0007d16:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007d1c:	75 ea                	jne    c0007d08 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007d1e:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007d24:	66 85 c0             	test   ax,ax
c0007d27:	0f 84 46 01 00 00    	je     c0007e73 <Phys::physicalMemorySetup(unsigned int)+0x1a4>
c0007d2d:	89 c7                	mov    edi,eax
c0007d2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d37:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d3d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d42:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0007d46:	eb 6d                	jmp    c0007db5 <Phys::physicalMemorySetup(unsigned int)+0xe6>
c0007d48:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d4c:	89 c1                	mov    ecx,eax
c0007d4e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d52:	0f 83 c0 00 00 00    	jae    c0007e18 <Phys::physicalMemorySetup(unsigned int)+0x149>
c0007d58:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d65:	39 f2                	cmp    edx,esi
c0007d67:	19 f8                	sbb    eax,edi
c0007d69:	73 07                	jae    c0007d72 <Phys::physicalMemorySetup(unsigned int)+0xa3>
c0007d6b:	be 00 00 0a 00       	mov    esi,0xa0000
c0007d70:	31 ff                	xor    edi,edi
c0007d72:	89 f2                	mov    edx,esi
c0007d74:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007d79:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007d7f:	89 f9                	mov    ecx,edi
c0007d81:	83 d1 ff             	adc    ecx,0xffffffff
c0007d84:	39 d0                	cmp    eax,edx
c0007d86:	b8 00 00 00 00       	mov    eax,0x0
c0007d8b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007d8f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007d93:	19 c8                	sbb    eax,ecx
c0007d95:	0f 82 9c 01 00 00    	jb     c0007f37 <Phys::physicalMemorySetup(unsigned int)+0x268>
c0007d9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d9f:	83 c3 18             	add    ebx,0x18
c0007da2:	40                   	inc    eax
c0007da3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007da7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007dab:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0007daf:	0f 84 ce 00 00 00    	je     c0007e83 <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007db5:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007db7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007dba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007dbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007dc4:	01 f0                	add    eax,esi
c0007dc6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007dc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dcd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007dd1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007dd5:	11 fa                	adc    edx,edi
c0007dd7:	55                   	push   ebp
c0007dd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ddc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007de0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007de4:	50                   	push   eax
c0007de5:	56                   	push   esi
c0007de6:	68 04 f5 01 c0       	push   0xc001f504
c0007deb:	e8 73 28 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0007df0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007df4:	83 c4 10             	add    esp,0x10
c0007df7:	09 f8                	or     eax,edi
c0007df9:	0f 85 84 00 00 00    	jne    c0007e83 <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007dff:	83 fd 01             	cmp    ebp,0x1
c0007e02:	75 11                	jne    c0007e15 <Phys::physicalMemorySetup(unsigned int)+0x146>
c0007e04:	ba 00 00 08 00       	mov    edx,0x80000
c0007e09:	89 c1                	mov    ecx,eax
c0007e0b:	39 f2                	cmp    edx,esi
c0007e0d:	19 f9                	sbb    ecx,edi
c0007e0f:	0f 83 33 ff ff ff    	jae    c0007d48 <Phys::physicalMemorySetup(unsigned int)+0x79>
c0007e15:	4d                   	dec    ebp
c0007e16:	75 83                	jne    c0007d9b <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e18:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007e1c:	31 d2                	xor    edx,edx
c0007e1e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0007e22:	89 c8                	mov    eax,ecx
c0007e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e28:	19 d1                	sbb    ecx,edx
c0007e2a:	0f 82 6b ff ff ff    	jb     c0007d9b <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e30:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0007e35:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0007e39:	b9 00 00 00 00       	mov    ecx,0x0
c0007e3e:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007e42:	0f 83 53 ff ff ff    	jae    c0007d9b <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e48:	39 c6                	cmp    esi,eax
c0007e4a:	19 d7                	sbb    edi,edx
c0007e4c:	0f 83 f1 00 00 00    	jae    c0007f43 <Phys::physicalMemorySetup(unsigned int)+0x274>
c0007e52:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e56:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007e5a:	29 c7                	sub    edi,eax
c0007e5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007e60:	19 d5                	sbb    ebp,edx
c0007e62:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007e66:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007e6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007e6e:	e9 d0 00 00 00       	jmp    c0007f43 <Phys::physicalMemorySetup(unsigned int)+0x274>
c0007e73:	83 ec 0c             	sub    esp,0xc
c0007e76:	68 7f f5 01 c0       	push   0xc001f57f
c0007e7b:	e8 97 85 00 00       	call   c0010417 <KePanic(char const*)>
c0007e80:	83 c4 10             	add    esp,0x10
c0007e83:	53                   	push   ebx
c0007e84:	53                   	push   ebx
c0007e85:	bb 60 00 00 00       	mov    ebx,0x60
c0007e8a:	6a 00                	push   0x0
c0007e8c:	6a 06                	push   0x6
c0007e8e:	e8 15 fc ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007e93:	5e                   	pop    esi
c0007e94:	5f                   	pop    edi
c0007e95:	6a 00                	push   0x0
c0007e97:	6a 07                	push   0x7
c0007e99:	e8 0a fc ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007e9e:	8b 2d e8 3e 02 c0    	mov    ebp,DWORD PTR ds:0xc0023ee8
c0007ea4:	83 c4 10             	add    esp,0x10
c0007ea7:	83 c5 02             	add    ebp,0x2
c0007eaa:	89 2d e8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee8,ebp
c0007eb0:	51                   	push   ecx
c0007eb1:	51                   	push   ecx
c0007eb2:	6a 00                	push   0x0
c0007eb4:	53                   	push   ebx
c0007eb5:	43                   	inc    ebx
c0007eb6:	e8 ed fb ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007ebb:	83 c4 10             	add    esp,0x10
c0007ebe:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ec4:	75 ea                	jne    c0007eb0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0007ec6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007ecb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ed0:	83 c0 20             	add    eax,0x20
c0007ed3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ed8:	eb 21                	jmp    c0007efb <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007eda:	52                   	push   edx
c0007edb:	52                   	push   edx
c0007edc:	6a 00                	push   0x0
c0007ede:	53                   	push   ebx
c0007edf:	e8 c4 fb ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007ee4:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007ee9:	43                   	inc    ebx
c0007eea:	40                   	inc    eax
c0007eeb:	83 c4 10             	add    esp,0x10
c0007eee:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ef3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007ef9:	74 07                	je     c0007f02 <Phys::physicalMemorySetup(unsigned int)+0x233>
c0007efb:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f00:	7e d8                	jle    c0007eda <Phys::physicalMemorySetup(unsigned int)+0x20b>
c0007f02:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f07:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f0c:	7f 21                	jg     c0007f2f <Phys::physicalMemorySetup(unsigned int)+0x260>
c0007f0e:	50                   	push   eax
c0007f0f:	50                   	push   eax
c0007f10:	6a 00                	push   0x0
c0007f12:	53                   	push   ebx
c0007f13:	e8 90 fb ff ff       	call   c0007aa8 <Phys::setPageState(unsigned long, bool)>
c0007f18:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f1d:	43                   	inc    ebx
c0007f1e:	40                   	inc    eax
c0007f1f:	83 c4 10             	add    esp,0x10
c0007f22:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f27:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f2d:	75 d8                	jne    c0007f07 <Phys::physicalMemorySetup(unsigned int)+0x238>
c0007f2f:	83 c4 3c             	add    esp,0x3c
c0007f32:	5b                   	pop    ebx
c0007f33:	5e                   	pop    esi
c0007f34:	5f                   	pop    edi
c0007f35:	5d                   	pop    ebp
c0007f36:	c3                   	ret    
c0007f37:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0007f3b:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0007f43:	50                   	push   eax
c0007f44:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0007f48:	56                   	push   esi
c0007f49:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0007f4d:	57                   	push   edi
c0007f4e:	68 28 f5 01 c0       	push   0xc001f528
c0007f53:	e8 0b 27 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0007f58:	58                   	pop    eax
c0007f59:	5a                   	pop    edx
c0007f5a:	56                   	push   esi
c0007f5b:	57                   	push   edi
c0007f5c:	e8 36 fd ff ff       	call   c0007c97 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007f61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007f65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f69:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0007f6f:	83 c4 0c             	add    esp,0xc
c0007f72:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007f76:	01 c8                	add    eax,ecx
c0007f78:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f7d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007f84:	52                   	push   edx
c0007f85:	50                   	push   eax
c0007f86:	68 8d f5 01 c0       	push   0xc001f58d
c0007f8b:	e8 d3 26 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0007f90:	83 c4 10             	add    esp,0x10
c0007f93:	e9 03 fe ff ff       	jmp    c0007d9b <Phys::physicalMemorySetup(unsigned int)+0xcc>

c0007f98 <Pipe::isAtty()>:
c0007f98:	31 c0                	xor    eax,eax
c0007f9a:	c3                   	ret    
c0007f9b:	90                   	nop

c0007f9c <Pipe::~Pipe()>:
c0007f9c:	83 ec 0c             	sub    esp,0xc
c0007f9f:	ba ec f5 01 c0       	mov    edx,0xc001f5ec
c0007fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa8:	89 10                	mov    DWORD PTR [eax],edx
c0007faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fae:	83 ec 0c             	sub    esp,0xc
c0007fb1:	50                   	push   eax
c0007fb2:	e8 55 11 00 00       	call   c000910c <UnixFile::~UnixFile()>
c0007fb7:	83 c4 10             	add    esp,0x10
c0007fba:	90                   	nop
c0007fbb:	83 c4 0c             	add    esp,0xc
c0007fbe:	c3                   	ret    
c0007fbf:	90                   	nop

c0007fc0 <Pipe::~Pipe()>:
c0007fc0:	83 ec 0c             	sub    esp,0xc
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fca:	e8 cd ff ff ff       	call   c0007f9c <Pipe::~Pipe()>
c0007fcf:	83 c4 10             	add    esp,0x10
c0007fd2:	83 ec 08             	sub    esp,0x8
c0007fd5:	6a 20                	push   0x20
c0007fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fdb:	e8 8d 25 00 00       	call   c000a56d <operator delete(void*, unsigned long)>
c0007fe0:	83 c4 10             	add    esp,0x10
c0007fe3:	83 c4 0c             	add    esp,0xc
c0007fe6:	c3                   	ret    
c0007fe7:	90                   	nop

c0007fe8 <Pipe::write(unsigned long long, void*, int*)>:
c0007fe8:	55                   	push   ebp
c0007fe9:	57                   	push   edi
c0007fea:	56                   	push   esi
c0007feb:	53                   	push   ebx
c0007fec:	83 ec 1c             	sub    esp,0x1c
c0007fef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007ff3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ff7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fff:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008002:	89 04 24             	mov    DWORD PTR [esp],eax
c0008005:	89 d6                	mov    esi,edx
c0008007:	89 d7                	mov    edi,edx
c0008009:	c1 ff 1f             	sar    edi,0x1f
c000800c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000800f:	03 34 24             	add    esi,DWORD PTR [esp]
c0008012:	89 d8                	mov    eax,ebx
c0008014:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008018:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000801c:	c1 f8 1f             	sar    eax,0x1f
c000801f:	39 f3                	cmp    ebx,esi
c0008021:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008029:	19 f8                	sbb    eax,edi
c000802b:	b8 01 00 00 00       	mov    eax,0x1
c0008030:	72 6e                	jb     c00080a0 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008032:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008035:	01 d0                	add    eax,edx
c0008037:	99                   	cdq    
c0008038:	f7 fb                	idiv   ebx
c000803a:	29 d3                	sub    ebx,edx
c000803c:	89 d7                	mov    edi,edx
c000803e:	89 de                	mov    esi,ebx
c0008040:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008043:	c1 fb 1f             	sar    ebx,0x1f
c0008046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000804a:	39 f2                	cmp    edx,esi
c000804c:	19 d8                	sbb    eax,ebx
c000804e:	b8 00 00 00 00       	mov    eax,0x0
c0008053:	72 04                	jb     c0008059 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008055:	89 d0                	mov    eax,edx
c0008057:	29 f0                	sub    eax,esi
c0008059:	89 d3                	mov    ebx,edx
c000805b:	29 c3                	sub    ebx,eax
c000805d:	74 0b                	je     c000806a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000805f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008062:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008066:	89 d9                	mov    ecx,ebx
c0008068:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806a:	85 c0                	test   eax,eax
c000806c:	74 0d                	je     c000807b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000806e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008072:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008075:	89 de                	mov    esi,ebx
c0008077:	89 c1                	mov    ecx,eax
c0008079:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000807b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000807e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008083:	75 10                	jne    c0008095 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008085:	83 ec 0c             	sub    esp,0xc
c0008088:	68 a9 f5 01 c0       	push   0xc001f5a9
c000808d:	e8 85 83 00 00       	call   c0010417 <KePanic(char const*)>
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008099:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000809c:	89 08                	mov    DWORD PTR [eax],ecx
c000809e:	31 c0                	xor    eax,eax
c00080a0:	83 c4 1c             	add    esp,0x1c
c00080a3:	5b                   	pop    ebx
c00080a4:	5e                   	pop    esi
c00080a5:	5f                   	pop    edi
c00080a6:	5d                   	pop    ebp
c00080a7:	c3                   	ret    

c00080a8 <Pipe::read(unsigned long long, void*, int*)>:
c00080a8:	55                   	push   ebp
c00080a9:	57                   	push   edi
c00080aa:	56                   	push   esi
c00080ab:	53                   	push   ebx
c00080ac:	83 ec 1c             	sub    esp,0x1c
c00080af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00080b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00080b7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00080bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00080be:	89 c8                	mov    eax,ecx
c00080c0:	99                   	cdq    
c00080c1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00080c5:	74 24                	je     c00080eb <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080c7:	39 f9                	cmp    ecx,edi
c00080c9:	89 d1                	mov    ecx,edx
c00080cb:	19 f1                	sbb    ecx,esi
c00080cd:	73 1c                	jae    c00080eb <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080cf:	fa                   	cli    
c00080d0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00080d6:	e8 85 ca 00 00       	call   c0014b60 <schedule()>
c00080db:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080e0:	48                   	dec    eax
c00080e1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080e6:	75 d3                	jne    c00080bb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080e8:	fb                   	sti    
c00080e9:	eb d0                	jmp    c00080bb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080eb:	39 f8                	cmp    eax,edi
c00080ed:	89 d1                	mov    ecx,edx
c00080ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080f2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080f6:	19 f1                	sbb    ecx,esi
c00080f8:	73 07                	jae    c0008101 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00080fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008101:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008104:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008107:	29 f7                	sub    edi,esi
c0008109:	89 f8                	mov    eax,edi
c000810b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000810f:	99                   	cdq    
c0008110:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008113:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008117:	19 d0                	sbb    eax,edx
c0008119:	73 07                	jae    c0008122 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000811b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000811e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008122:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008125:	89 ea                	mov    edx,ebp
c0008127:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000812b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008130:	74 0d                	je     c000813f <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008132:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008135:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008139:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000813d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000813f:	85 d2                	test   edx,edx
c0008141:	74 11                	je     c0008154 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008147:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000814a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000814e:	89 d1                	mov    ecx,edx
c0008150:	89 c7                	mov    edi,eax
c0008152:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008154:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008157:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000815a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000815d:	99                   	cdq    
c000815e:	03 04 24             	add    eax,DWORD PTR [esp]
c0008161:	89 f7                	mov    edi,esi
c0008163:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008167:	c1 ff 1f             	sar    edi,0x1f
c000816a:	57                   	push   edi
c000816b:	56                   	push   esi
c000816c:	52                   	push   edx
c000816d:	50                   	push   eax
c000816e:	e8 6d 5e 01 00       	call   c001dfe0 <__umoddi3>
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008179:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000817e:	75 10                	jne    c0008190 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008180:	83 ec 0c             	sub    esp,0xc
c0008183:	68 c6 f5 01 c0       	push   0xc001f5c6
c0008188:	e8 8a 82 00 00       	call   c0010417 <KePanic(char const*)>
c000818d:	83 c4 10             	add    esp,0x10
c0008190:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008194:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008197:	89 10                	mov    DWORD PTR [eax],edx
c0008199:	83 c4 1c             	add    esp,0x1c
c000819c:	31 c0                	xor    eax,eax
c000819e:	5b                   	pop    ebx
c000819f:	5e                   	pop    esi
c00081a0:	5f                   	pop    edi
c00081a1:	5d                   	pop    ebp
c00081a2:	c3                   	ret    
c00081a3:	90                   	nop

c00081a4 <Pipe::Pipe(int)>:
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081ab:	83 ec 08             	sub    esp,0x8
c00081ae:	6a 00                	push   0x0
c00081b0:	50                   	push   eax
c00081b1:	e8 74 0d 00 00       	call   c0008f2a <UnixFile::UnixFile(int)>
c00081b6:	83 c4 10             	add    esp,0x10
c00081b9:	ba ec f5 01 c0       	mov    edx,0xc001f5ec
c00081be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c2:	89 10                	mov    DWORD PTR [eax],edx
c00081c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00081cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081de:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081e9:	83 ec 0c             	sub    esp,0xc
c00081ec:	50                   	push   eax
c00081ed:	e8 81 f6 ff ff       	call   c0007873 <malloc>
c00081f2:	83 c4 10             	add    esp,0x10
c00081f5:	89 c2                	mov    edx,eax
c00081f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008202:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008206:	90                   	nop
c0008207:	83 c4 0c             	add    esp,0xc
c000820a:	c3                   	ret    
c000820b:	90                   	nop

c000820c <VgaText::isAtty()>:
c000820c:	b0 01                	mov    al,0x1
c000820e:	c3                   	ret    
c000820f:	90                   	nop

c0008210 <VgaText::~VgaText()>:
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	ba 34 f6 01 c0       	mov    edx,0xc001f634
c0008218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821c:	89 10                	mov    DWORD PTR [eax],edx
c000821e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008222:	83 ec 0c             	sub    esp,0xc
c0008225:	50                   	push   eax
c0008226:	e8 e1 0e 00 00       	call   c000910c <UnixFile::~UnixFile()>
c000822b:	83 c4 10             	add    esp,0x10
c000822e:	90                   	nop
c000822f:	83 c4 0c             	add    esp,0xc
c0008232:	c3                   	ret    
c0008233:	90                   	nop

c0008234 <VgaText::~VgaText()>:
c0008234:	83 ec 0c             	sub    esp,0xc
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823e:	e8 cd ff ff ff       	call   c0008210 <VgaText::~VgaText()>
c0008243:	83 c4 10             	add    esp,0x10
c0008246:	83 ec 08             	sub    esp,0x8
c0008249:	68 84 01 00 00       	push   0x184
c000824e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008252:	e8 16 23 00 00       	call   c000a56d <operator delete(void*, unsigned long)>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	83 c4 0c             	add    esp,0xc
c000825d:	c3                   	ret    

c000825e <VgaText::read(unsigned long long, void*, int*)>:
c000825e:	83 ec 10             	sub    esp,0x10
c0008261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008265:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826d:	e8 4a 46 00 00       	call   c000c8bc <readKeyboard(VgaText*, char*, unsigned long)>
c0008272:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008276:	89 02                	mov    DWORD PTR [edx],eax
c0008278:	31 c0                	xor    eax,eax
c000827a:	83 c4 1c             	add    esp,0x1c
c000827d:	c3                   	ret    

c000827e <setTerminalScrollLock(bool)>:
c000827e:	c3                   	ret    

c000827f <doTerminalCycle()>:
c000827f:	c3                   	ret    

c0008280 <addToTerminalCycle(VgaText*)>:
c0008280:	c3                   	ret    

c0008281 <scrollTerminalScrollLock(int)>:
c0008281:	c3                   	ret    

c0008282 <VgaText::updateTitle()>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::load()>:
c0008284:	c3                   	ret    
c0008285:	90                   	nop

c0008286 <VgaText::updateCursor()>:
c0008286:	83 ec 14             	sub    esp,0x14
c0008289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000828d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008290:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008293:	e8 28 f5 00 00       	call   c00177c0 <HalConsoleCursorUpdate(int, int)>
c0008298:	83 c4 1c             	add    esp,0x1c
c000829b:	c3                   	ret    

c000829c <VgaText::doANSI_SGR(int)>:
c000829c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082a4:	85 d2                	test   edx,edx
c00082a6:	75 0b                	jne    c00082b3 <VgaText::doANSI_SGR(int)+0x17>
c00082a8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00082ab:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082ae:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00082b1:	eb 59                	jmp    c000830c <VgaText::doANSI_SGR(int)+0x70>
c00082b3:	83 fa 07             	cmp    edx,0x7
c00082b6:	75 0b                	jne    c00082c3 <VgaText::doANSI_SGR(int)+0x27>
c00082b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00082bb:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00082be:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00082c1:	eb 49                	jmp    c000830c <VgaText::doANSI_SGR(int)+0x70>
c00082c3:	83 fa 1b             	cmp    edx,0x1b
c00082c6:	74 e0                	je     c00082a8 <VgaText::doANSI_SGR(int)+0xc>
c00082c8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00082cb:	83 f9 07             	cmp    ecx,0x7
c00082ce:	77 09                	ja     c00082d9 <VgaText::doANSI_SGR(int)+0x3d>
c00082d0:	8b 14 8d 80 17 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde880]
c00082d7:	eb 20                	jmp    c00082f9 <VgaText::doANSI_SGR(int)+0x5d>
c00082d9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082dc:	83 f9 07             	cmp    ecx,0x7
c00082df:	77 09                	ja     c00082ea <VgaText::doANSI_SGR(int)+0x4e>
c00082e1:	8b 14 8d 80 17 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde880]
c00082e8:	eb 22                	jmp    c000830c <VgaText::doANSI_SGR(int)+0x70>
c00082ea:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082ed:	83 f9 07             	cmp    ecx,0x7
c00082f0:	77 0b                	ja     c00082fd <VgaText::doANSI_SGR(int)+0x61>
c00082f2:	8b 14 95 38 16 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde9c8]
c00082f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082fc:	c3                   	ret    
c00082fd:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008300:	83 f9 07             	cmp    ecx,0x7
c0008303:	77 0a                	ja     c000830f <VgaText::doANSI_SGR(int)+0x73>
c0008305:	8b 14 95 10 16 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde9f0]
c000830c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000830f:	c3                   	ret    

c0008310 <VgaText::setDefaultBgColour(VgaColour)>:
c0008310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008318:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000831b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000831e:	c3                   	ret    
c000831f:	90                   	nop

c0008320 <VgaText::setDefaultFgColour(VgaColour)>:
c0008320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008328:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000832b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000832e:	c3                   	ret    
c000832f:	90                   	nop

c0008330 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008330:	53                   	push   ebx
c0008331:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008335:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008339:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000833d:	51                   	push   ecx
c000833e:	e8 cd ff ff ff       	call   c0008310 <VgaText::setDefaultBgColour(VgaColour)>
c0008343:	58                   	pop    eax
c0008344:	5a                   	pop    edx
c0008345:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008349:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000834d:	5b                   	pop    ebx
c000834e:	eb d0                	jmp    c0008320 <VgaText::setDefaultFgColour(VgaColour)>

c0008350 <VgaText::setTitleTextColour(VgaColour)>:
c0008350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008358:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000835b:	c3                   	ret    

c000835c <VgaText::setTitleColour(VgaColour)>:
c000835c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008364:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008367:	c3                   	ret    

c0008368 <VgaText::setTitle(char*)>:
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <VgaText::combineColours(unsigned char, unsigned char)>:
c000836a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000836f:	c1 e2 04             	shl    edx,0x4
c0008372:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008376:	83 e0 0f             	and    eax,0xf
c0008379:	09 d0                	or     eax,edx
c000837b:	c3                   	ret    

c000837c <VgaText::scrollScreen()>:
c000837c:	55                   	push   ebp
c000837d:	57                   	push   edi
c000837e:	56                   	push   esi
c000837f:	be 01 00 00 00       	mov    esi,0x1
c0008384:	53                   	push   ebx
c0008385:	83 ec 0c             	sub    esp,0xc
c0008388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000838c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000838f:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008395:	31 ff                	xor    edi,edi
c0008397:	01 e9                	add    ecx,ebp
c0008399:	8a 01                	mov    al,BYTE PTR [ecx]
c000839b:	83 fe 18             	cmp    esi,0x18
c000839e:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00083a4:	75 20                	jne    c00083c6 <VgaText::scrollScreen()+0x4a>
c00083a6:	f7 c7 01 00 00 00    	test   edi,0x1
c00083ac:	74 15                	je     c00083c3 <VgaText::scrollScreen()+0x47>
c00083ae:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083b2:	50                   	push   eax
c00083b3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083b7:	50                   	push   eax
c00083b8:	e8 ad ff ff ff       	call   c000836a <VgaText::combineColours(unsigned char, unsigned char)>
c00083bd:	5a                   	pop    edx
c00083be:	5a                   	pop    edx
c00083bf:	88 01                	mov    BYTE PTR [ecx],al
c00083c1:	eb 03                	jmp    c00083c6 <VgaText::scrollScreen()+0x4a>
c00083c3:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00083c6:	47                   	inc    edi
c00083c7:	41                   	inc    ecx
c00083c8:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00083ce:	75 c9                	jne    c0008399 <VgaText::scrollScreen()+0x1d>
c00083d0:	46                   	inc    esi
c00083d1:	83 fe 19             	cmp    esi,0x19
c00083d4:	75 b9                	jne    c000838f <VgaText::scrollScreen()+0x13>
c00083d6:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083dc:	75 1f                	jne    c00083fd <VgaText::scrollScreen()+0x81>
c00083de:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083e2:	74 05                	je     c00083e9 <VgaText::scrollScreen()+0x6d>
c00083e4:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083e7:	eb 14                	jmp    c00083fd <VgaText::scrollScreen()+0x81>
c00083e9:	50                   	push   eax
c00083ea:	50                   	push   eax
c00083eb:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083ef:	50                   	push   eax
c00083f0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083f4:	50                   	push   eax
c00083f5:	e8 52 f2 00 00       	call   c001764c <HalConsoleScroll(int, int)>
c00083fa:	83 c4 10             	add    esp,0x10
c00083fd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008401:	83 c4 0c             	add    esp,0xc
c0008404:	5b                   	pop    ebx
c0008405:	5e                   	pop    esi
c0008406:	5f                   	pop    edi
c0008407:	5d                   	pop    ebp
c0008408:	e9 79 fe ff ff       	jmp    c0008286 <VgaText::updateCursor()>
c000840d:	90                   	nop

c000840e <VgaText::combineCharAndColour(char, unsigned char)>:
c000840e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008413:	c1 e0 08             	shl    eax,0x8
c0008416:	89 c2                	mov    edx,eax
c0008418:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000841d:	09 d0                	or     eax,edx
c000841f:	c3                   	ret    

c0008420 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008420:	55                   	push   ebp
c0008421:	57                   	push   edi
c0008422:	56                   	push   esi
c0008423:	53                   	push   ebx
c0008424:	83 ec 1c             	sub    esp,0x1c
c0008427:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000842b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000842f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008433:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008437:	0f b6 c3             	movzx  eax,bl
c000843a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000843e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008442:	50                   	push   eax
c0008443:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008448:	50                   	push   eax
c0008449:	e8 1c ff ff ff       	call   c000836a <VgaText::combineColours(unsigned char, unsigned char)>
c000844e:	5a                   	pop    edx
c000844f:	59                   	pop    ecx
c0008450:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008455:	0f b6 c0             	movzx  eax,al
c0008458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000845c:	50                   	push   eax
c000845d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008461:	e8 a8 ff ff ff       	call   c000840e <VgaText::combineCharAndColour(char, unsigned char)>
c0008466:	5a                   	pop    edx
c0008467:	6b d7 50             	imul   edx,edi,0x50
c000846a:	01 f2                	add    edx,esi
c000846c:	59                   	pop    ecx
c000846d:	0f b7 d2             	movzx  edx,dx
c0008470:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008473:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008477:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c000847d:	75 28                	jne    c00084a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c000847f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008483:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008487:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000848b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000848f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008493:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008497:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000849b:	83 c4 1c             	add    esp,0x1c
c000849e:	5b                   	pop    ebx
c000849f:	5e                   	pop    esi
c00084a0:	5f                   	pop    edi
c00084a1:	5d                   	pop    ebp
c00084a2:	e9 ad f2 00 00       	jmp    c0017754 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00084a7:	83 c4 1c             	add    esp,0x1c
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	5f                   	pop    edi
c00084ad:	5d                   	pop    ebp
c00084ae:	c3                   	ret    
c00084af:	90                   	nop

c00084b0 <VgaText::getCursorX()>:
c00084b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00084b7:	c3                   	ret    

c00084b8 <VgaText::getCursorY()>:
c00084b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00084bf:	c3                   	ret    

c00084c0 <VgaText::setCursor(int, int)>:
c00084c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00084cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00084cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084d2:	e9 af fd ff ff       	jmp    c0008286 <VgaText::updateCursor()>

c00084d7 <setActiveTerminal(VgaText*)>:
c00084d7:	53                   	push   ebx
c00084d8:	83 ec 08             	sub    esp,0x8
c00084db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084df:	85 db                	test   ebx,ebx
c00084e1:	75 11                	jne    c00084f4 <setActiveTerminal(VgaText*)+0x1d>
c00084e3:	c7 44 24 10 00 f6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f600
c00084eb:	83 c4 08             	add    esp,0x8
c00084ee:	5b                   	pop    ebx
c00084ef:	e9 23 7f 00 00       	jmp    c0010417 <KePanic(char const*)>
c00084f4:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084f9:	85 c0                	test   eax,eax
c00084fb:	74 0c                	je     c0008509 <setActiveTerminal(VgaText*)+0x32>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	50                   	push   eax
c0008501:	e8 80 fd ff ff       	call   c0008286 <VgaText::updateCursor()>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	50                   	push   eax
c000850a:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c0008510:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008513:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008516:	53                   	push   ebx
c0008517:	e8 a4 ff ff ff       	call   c00084c0 <VgaText::setCursor(int, int)>
c000851c:	83 c4 18             	add    esp,0x18
c000851f:	5b                   	pop    ebx
c0008520:	c3                   	ret    
c0008521:	90                   	nop

c0008522 <VgaText::clearScreen()>:
c0008522:	57                   	push   edi
c0008523:	56                   	push   esi
c0008524:	31 f6                	xor    esi,esi
c0008526:	53                   	push   ebx
c0008527:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000852b:	52                   	push   edx
c000852c:	6a 00                	push   0x0
c000852e:	6a 00                	push   0x0
c0008530:	53                   	push   ebx
c0008531:	e8 8a ff ff ff       	call   c00084c0 <VgaText::setCursor(int, int)>
c0008536:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000853d:	83 c4 10             	add    esp,0x10
c0008540:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008543:	7e 20                	jle    c0008565 <VgaText::clearScreen()+0x43>
c0008545:	31 ff                	xor    edi,edi
c0008547:	50                   	push   eax
c0008548:	50                   	push   eax
c0008549:	56                   	push   esi
c000854a:	57                   	push   edi
c000854b:	47                   	inc    edi
c000854c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000854f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008552:	6a 20                	push   0x20
c0008554:	53                   	push   ebx
c0008555:	e8 c6 fe ff ff       	call   c0008420 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000855a:	83 c4 20             	add    esp,0x20
c000855d:	83 ff 50             	cmp    edi,0x50
c0008560:	75 e5                	jne    c0008547 <VgaText::clearScreen()+0x25>
c0008562:	46                   	inc    esi
c0008563:	eb db                	jmp    c0008540 <VgaText::clearScreen()+0x1e>
c0008565:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000856c:	5b                   	pop    ebx
c000856d:	5e                   	pop    esi
c000856e:	5f                   	pop    edi
c000856f:	c3                   	ret    

c0008570 <VgaText::setCursorX(int)>:
c0008570:	83 ec 10             	sub    esp,0x10
c0008573:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008577:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000857a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000857e:	50                   	push   eax
c000857f:	e8 3c ff ff ff       	call   c00084c0 <VgaText::setCursor(int, int)>
c0008584:	83 c4 1c             	add    esp,0x1c
c0008587:	c3                   	ret    

c0008588 <VgaText::setCursorY(int)>:
c0008588:	83 ec 10             	sub    esp,0x10
c000858b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000858f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008593:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008596:	50                   	push   eax
c0008597:	e8 24 ff ff ff       	call   c00084c0 <VgaText::setCursor(int, int)>
c000859c:	83 c4 1c             	add    esp,0x1c
c000859f:	c3                   	ret    

c00085a0 <VgaText::incrementCursor(bool)>:
c00085a0:	56                   	push   esi
c00085a1:	53                   	push   ebx
c00085a2:	51                   	push   ecx
c00085a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00085ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00085ae:	40                   	inc    eax
c00085af:	83 f8 50             	cmp    eax,0x50
c00085b2:	74 05                	je     c00085b9 <VgaText::incrementCursor(bool)+0x19>
c00085b4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00085b7:	eb 24                	jmp    c00085dd <VgaText::incrementCursor(bool)+0x3d>
c00085b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00085bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085c3:	8d 50 01             	lea    edx,[eax+0x1]
c00085c6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085c9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085cc:	75 0f                	jne    c00085dd <VgaText::incrementCursor(bool)+0x3d>
c00085ce:	83 ec 0c             	sub    esp,0xc
c00085d1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085d4:	53                   	push   ebx
c00085d5:	e8 a2 fd ff ff       	call   c000837c <VgaText::scrollScreen()>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	89 f0                	mov    eax,esi
c00085df:	84 c0                	test   al,al
c00085e1:	74 0c                	je     c00085ef <VgaText::incrementCursor(bool)+0x4f>
c00085e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085e7:	5a                   	pop    edx
c00085e8:	5b                   	pop    ebx
c00085e9:	5e                   	pop    esi
c00085ea:	e9 97 fc ff ff       	jmp    c0008286 <VgaText::updateCursor()>
c00085ef:	58                   	pop    eax
c00085f0:	5b                   	pop    ebx
c00085f1:	5e                   	pop    esi
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <VgaText::decrementCursor(bool)>:
c00085f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085fc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085ff:	85 c0                	test   eax,eax
c0008601:	74 04                	je     c0008607 <VgaText::decrementCursor(bool)+0x13>
c0008603:	48                   	dec    eax
c0008604:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008607:	84 c9                	test   cl,cl
c0008609:	74 09                	je     c0008614 <VgaText::decrementCursor(bool)+0x20>
c000860b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000860f:	e9 72 fc ff ff       	jmp    c0008286 <VgaText::updateCursor()>
c0008614:	c3                   	ret    
c0008615:	90                   	nop

c0008616 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008616:	53                   	push   ebx
c0008617:	83 ec 08             	sub    esp,0x8
c000861a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000861e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008622:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008626:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000862a:	3c 07                	cmp    al,0x7
c000862c:	75 21                	jne    c000864f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000862e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008636:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000863e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008646:	83 c4 08             	add    esp,0x8
c0008649:	5b                   	pop    ebx
c000864a:	e9 68 2e 00 00       	jmp    c000b4b7 <Krnl::beep(int, int, bool)>
c000864f:	3c 0d                	cmp    al,0xd
c0008651:	75 09                	jne    c000865c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000865a:	eb 2c                	jmp    c0008688 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000865c:	3c 0a                	cmp    al,0xa
c000865e:	75 31                	jne    c0008691 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008660:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008663:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000866a:	8d 50 01             	lea    edx,[eax+0x1]
c000866d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008670:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008673:	75 0f                	jne    c0008684 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008675:	83 ec 0c             	sub    esp,0xc
c0008678:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000867b:	53                   	push   ebx
c000867c:	e8 fb fc ff ff       	call   c000837c <VgaText::scrollScreen()>
c0008681:	83 c4 10             	add    esp,0x10
c0008684:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008688:	83 c4 08             	add    esp,0x8
c000868b:	5b                   	pop    ebx
c000868c:	e9 f5 fb ff ff       	jmp    c0008286 <VgaText::updateCursor()>
c0008691:	3c 08                	cmp    al,0x8
c0008693:	75 25                	jne    c00086ba <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008695:	50                   	push   eax
c0008696:	50                   	push   eax
c0008697:	6a 01                	push   0x1
c0008699:	53                   	push   ebx
c000869a:	e8 55 ff ff ff       	call   c00085f4 <VgaText::decrementCursor(bool)>
c000869f:	5a                   	pop    edx
c00086a0:	59                   	pop    ecx
c00086a1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00086a4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086a7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086aa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086ad:	6a 20                	push   0x20
c00086af:	53                   	push   ebx
c00086b0:	e8 6b fd ff ff       	call   c0008420 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086b5:	83 c4 28             	add    esp,0x28
c00086b8:	5b                   	pop    ebx
c00086b9:	c3                   	ret    
c00086ba:	83 ec 08             	sub    esp,0x8
c00086bd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00086c0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086c3:	0f be c0             	movsx  eax,al
c00086c6:	51                   	push   ecx
c00086c7:	52                   	push   edx
c00086c8:	50                   	push   eax
c00086c9:	53                   	push   ebx
c00086ca:	e8 51 fd ff ff       	call   c0008420 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086cf:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086d3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086db:	83 c4 28             	add    esp,0x28
c00086de:	5b                   	pop    ebx
c00086df:	e9 bc fe ff ff       	jmp    c00085a0 <VgaText::incrementCursor(bool)>

c00086e4 <VgaText::putchar(char)>:
c00086e4:	56                   	push   esi
c00086e5:	53                   	push   ebx
c00086e6:	83 ec 14             	sub    esp,0x14
c00086e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086f1:	3c 5b                	cmp    al,0x5b
c00086f3:	75 18                	jne    c000870d <VgaText::putchar(char)+0x29>
c00086f5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086f9:	74 1f                	je     c000871a <VgaText::putchar(char)+0x36>
c00086fb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008701:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008708:	e9 bd 00 00 00       	jmp    c00087ca <VgaText::putchar(char)+0xe6>
c000870d:	3c 1b                	cmp    al,0x1b
c000870f:	75 09                	jne    c000871a <VgaText::putchar(char)+0x36>
c0008711:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008715:	e9 b0 00 00 00       	jmp    c00087ca <VgaText::putchar(char)+0xe6>
c000871a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000871d:	84 c9                	test   cl,cl
c000871f:	0f 84 92 00 00 00    	je     c00087b7 <VgaText::putchar(char)+0xd3>
c0008725:	8d 50 c0             	lea    edx,[eax-0x40]
c0008728:	80 fa 3e             	cmp    dl,0x3e
c000872b:	77 76                	ja     c00087a3 <VgaText::putchar(char)+0xbf>
c000872d:	3c 6d                	cmp    al,0x6d
c000872f:	75 47                	jne    c0008778 <VgaText::putchar(char)+0x94>
c0008731:	31 f6                	xor    esi,esi
c0008733:	31 d2                	xor    edx,edx
c0008735:	31 c0                	xor    eax,eax
c0008737:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000873a:	7e 2d                	jle    c0008769 <VgaText::putchar(char)+0x85>
c000873c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008741:	80 fa 3b             	cmp    dl,0x3b
c0008744:	75 17                	jne    c000875d <VgaText::putchar(char)+0x79>
c0008746:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000874a:	50                   	push   eax
c000874b:	53                   	push   ebx
c000874c:	e8 4b fb ff ff       	call   c000829c <VgaText::doANSI_SGR(int)>
c0008751:	59                   	pop    ecx
c0008752:	31 d2                	xor    edx,edx
c0008754:	58                   	pop    eax
c0008755:	31 c0                	xor    eax,eax
c0008757:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000875b:	eb 09                	jmp    c0008766 <VgaText::putchar(char)+0x82>
c000875d:	6b c0 0a             	imul   eax,eax,0xa
c0008760:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008764:	88 ca                	mov    dl,cl
c0008766:	46                   	inc    esi
c0008767:	eb ce                	jmp    c0008737 <VgaText::putchar(char)+0x53>
c0008769:	84 d2                	test   dl,dl
c000876b:	74 2e                	je     c000879b <VgaText::putchar(char)+0xb7>
c000876d:	50                   	push   eax
c000876e:	53                   	push   ebx
c000876f:	e8 28 fb ff ff       	call   c000829c <VgaText::doANSI_SGR(int)>
c0008774:	58                   	pop    eax
c0008775:	5a                   	pop    edx
c0008776:	eb 23                	jmp    c000879b <VgaText::putchar(char)+0xb7>
c0008778:	3c 4a                	cmp    al,0x4a
c000877a:	75 1f                	jne    c000879b <VgaText::putchar(char)+0xb7>
c000877c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008780:	75 19                	jne    c000879b <VgaText::putchar(char)+0xb7>
c0008782:	83 ec 0c             	sub    esp,0xc
c0008785:	53                   	push   ebx
c0008786:	e8 97 fd ff ff       	call   c0008522 <VgaText::clearScreen()>
c000878b:	83 c4 0c             	add    esp,0xc
c000878e:	6a 00                	push   0x0
c0008790:	6a 00                	push   0x0
c0008792:	53                   	push   ebx
c0008793:	e8 28 fd ff ff       	call   c00084c0 <VgaText::setCursor(int, int)>
c0008798:	83 c4 10             	add    esp,0x10
c000879b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00087a1:	eb 27                	jmp    c00087ca <VgaText::putchar(char)+0xe6>
c00087a3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00087a6:	83 fa 0e             	cmp    edx,0xe
c00087a9:	7f 1f                	jg     c00087ca <VgaText::putchar(char)+0xe6>
c00087ab:	8d 4a 01             	lea    ecx,[edx+0x1]
c00087ae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00087b1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00087b5:	eb 13                	jmp    c00087ca <VgaText::putchar(char)+0xe6>
c00087b7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087ba:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087bd:	0f be c0             	movsx  eax,al
c00087c0:	50                   	push   eax
c00087c1:	53                   	push   ebx
c00087c2:	e8 4f fe ff ff       	call   c0008616 <VgaText::putchar(char, VgaColour, VgaColour)>
c00087c7:	83 c4 10             	add    esp,0x10
c00087ca:	83 c4 14             	add    esp,0x14
c00087cd:	5b                   	pop    ebx
c00087ce:	5e                   	pop    esi
c00087cf:	c3                   	ret    

c00087d0 <VgaText::putx(unsigned int)>:
c00087d0:	57                   	push   edi
c00087d1:	b9 11 00 00 00       	mov    ecx,0x11
c00087d6:	56                   	push   esi
c00087d7:	be 0e f6 01 c0       	mov    esi,0xc001f60e
c00087dc:	53                   	push   ebx
c00087dd:	83 ec 20             	sub    esp,0x20
c00087e0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087e4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087e8:	fc                   	cld    
c00087e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087eb:	be 08 00 00 00       	mov    esi,0x8
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	89 d8                	mov    eax,ebx
c00087f4:	c1 e8 1c             	shr    eax,0x1c
c00087f7:	c1 e3 04             	shl    ebx,0x4
c00087fa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087ff:	50                   	push   eax
c0008800:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008804:	e8 db fe ff ff       	call   c00086e4 <VgaText::putchar(char)>
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	4e                   	dec    esi
c000880d:	75 e1                	jne    c00087f0 <VgaText::putx(unsigned int)+0x20>
c000880f:	83 c4 20             	add    esp,0x20
c0008812:	5b                   	pop    ebx
c0008813:	5e                   	pop    esi
c0008814:	5f                   	pop    edi
c0008815:	c3                   	ret    

c0008816 <VgaText::puts(char const*)>:
c0008816:	53                   	push   ebx
c0008817:	83 ec 08             	sub    esp,0x8
c000881a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000881e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008821:	84 c0                	test   al,al
c0008823:	74 12                	je     c0008837 <VgaText::puts(char const*)+0x21>
c0008825:	51                   	push   ecx
c0008826:	43                   	inc    ebx
c0008827:	51                   	push   ecx
c0008828:	50                   	push   eax
c0008829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000882d:	e8 b2 fe ff ff       	call   c00086e4 <VgaText::putchar(char)>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	eb e7                	jmp    c000881e <VgaText::puts(char const*)+0x8>
c0008837:	83 c4 08             	add    esp,0x8
c000883a:	5b                   	pop    ebx
c000883b:	c3                   	ret    

c000883c <VgaText::write(unsigned long long, void*, int*)>:
c000883c:	55                   	push   ebp
c000883d:	57                   	push   edi
c000883e:	56                   	push   esi
c000883f:	53                   	push   ebx
c0008840:	83 ec 0c             	sub    esp,0xc
c0008843:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008847:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000884b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000884f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008856:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008859:	39 eb                	cmp    ebx,ebp
c000885b:	74 13                	je     c0008870 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000885d:	50                   	push   eax
c000885e:	43                   	inc    ebx
c000885f:	50                   	push   eax
c0008860:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008864:	50                   	push   eax
c0008865:	56                   	push   esi
c0008866:	e8 79 fe ff ff       	call   c00086e4 <VgaText::putchar(char)>
c000886b:	83 c4 10             	add    esp,0x10
c000886e:	eb e9                	jmp    c0008859 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008870:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008874:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000887b:	89 38                	mov    DWORD PTR [eax],edi
c000887d:	83 c4 0c             	add    esp,0xc
c0008880:	31 c0                	xor    eax,eax
c0008882:	5b                   	pop    ebx
c0008883:	5e                   	pop    esi
c0008884:	5f                   	pop    edi
c0008885:	5d                   	pop    ebp
c0008886:	c3                   	ret    
c0008887:	90                   	nop

c0008888 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008888:	55                   	push   ebp
c0008889:	57                   	push   edi
c000888a:	56                   	push   esi
c000888b:	53                   	push   ebx
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008893:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008898:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000889f:	50                   	push   eax
c00088a0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00088a5:	50                   	push   eax
c00088a6:	e8 bf fa ff ff       	call   c000836a <VgaText::combineColours(unsigned char, unsigned char)>
c00088ab:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088b0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088b3:	5a                   	pop    edx
c00088b4:	0f b7 f6             	movzx  esi,si
c00088b7:	01 f6                	add    esi,esi
c00088b9:	59                   	pop    ecx
c00088ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088bd:	89 c5                	mov    ebp,eax
c00088bf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00088c3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088c6:	84 c0                	test   al,al
c00088c8:	0f 84 f4 00 00 00    	je     c00089c2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00088ce:	3c 0d                	cmp    al,0xd
c00088d0:	75 0c                	jne    c00088de <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d9:	e9 de 00 00 00       	jmp    c00089bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088de:	3c 0a                	cmp    al,0xa
c00088e0:	75 45                	jne    c0008927 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ec:	8d 48 01             	lea    ecx,[eax+0x1]
c00088ef:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088f2:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088f5:	75 0f                	jne    c0008906 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088f7:	83 ec 0c             	sub    esp,0xc
c00088fa:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fd:	53                   	push   ebx
c00088fe:	e8 79 fa ff ff       	call   c000837c <VgaText::scrollScreen()>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	83 ec 0c             	sub    esp,0xc
c0008909:	53                   	push   ebx
c000890a:	e8 77 f9 ff ff       	call   c0008286 <VgaText::updateCursor()>
c000890f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008914:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008917:	83 c4 10             	add    esp,0x10
c000891a:	0f b7 f6             	movzx  esi,si
c000891d:	01 f6                	add    esi,esi
c000891f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008922:	e9 95 00 00 00       	jmp    c00089bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008927:	3c 08                	cmp    al,0x8
c0008929:	75 35                	jne    c0008960 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000892b:	51                   	push   ecx
c000892c:	51                   	push   ecx
c000892d:	6a 01                	push   0x1
c000892f:	53                   	push   ebx
c0008930:	e8 bf fc ff ff       	call   c00085f4 <VgaText::decrementCursor(bool)>
c0008935:	5e                   	pop    esi
c0008936:	58                   	pop    eax
c0008937:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000893a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000893d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008940:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008943:	6a 20                	push   0x20
c0008945:	53                   	push   ebx
c0008946:	e8 d5 fa ff ff       	call   c0008420 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000894b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008950:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008953:	83 c4 20             	add    esp,0x20
c0008956:	0f b7 f6             	movzx  esi,si
c0008959:	01 f6                	add    esi,esi
c000895b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000895e:	eb 5c                	jmp    c00089bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008960:	52                   	push   edx
c0008961:	52                   	push   edx
c0008962:	89 ea                	mov    edx,ebp
c0008964:	0f b6 ca             	movzx  ecx,dl
c0008967:	51                   	push   ecx
c0008968:	50                   	push   eax
c0008969:	e8 a0 fa ff ff       	call   c000840e <VgaText::combineCharAndColour(char, unsigned char)>
c000896e:	66 89 06             	mov    WORD PTR [esi],ax
c0008971:	83 c4 10             	add    esp,0x10
c0008974:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c000897a:	75 1d                	jne    c0008999 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000897c:	83 ec 0c             	sub    esp,0xc
c000897f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008982:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008985:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008989:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000898d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008990:	50                   	push   eax
c0008991:	e8 be ed 00 00       	call   c0017754 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008996:	83 c4 20             	add    esp,0x20
c0008999:	50                   	push   eax
c000899a:	83 c6 02             	add    esi,0x2
c000899d:	50                   	push   eax
c000899e:	6a 00                	push   0x0
c00089a0:	53                   	push   ebx
c00089a1:	e8 fa fb ff ff       	call   c00085a0 <VgaText::incrementCursor(bool)>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00089ad:	75 0d                	jne    c00089bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00089af:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00089b4:	0f b7 f6             	movzx  esi,si
c00089b7:	01 f6                	add    esi,esi
c00089b9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00089bc:	47                   	inc    edi
c00089bd:	e9 01 ff ff ff       	jmp    c00088c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00089c2:	83 ec 0c             	sub    esp,0xc
c00089c5:	53                   	push   ebx
c00089c6:	e8 bb f8 ff ff       	call   c0008286 <VgaText::updateCursor()>
c00089cb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089d2:	83 c4 1c             	add    esp,0x1c
c00089d5:	5b                   	pop    ebx
c00089d6:	5e                   	pop    esi
c00089d7:	5f                   	pop    edi
c00089d8:	5d                   	pop    ebp
c00089d9:	c3                   	ret    

c00089da <VgaText::VgaText(char const*)>:
c00089da:	56                   	push   esi
c00089db:	53                   	push   ebx
c00089dc:	83 ec 04             	sub    esp,0x4
c00089df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e3:	83 ec 08             	sub    esp,0x8
c00089e6:	6a 00                	push   0x0
c00089e8:	50                   	push   eax
c00089e9:	e8 3c 05 00 00       	call   c0008f2a <UnixFile::UnixFile(int)>
c00089ee:	83 c4 10             	add    esp,0x10
c00089f1:	ba 34 f6 01 c0       	mov    edx,0xc001f634
c00089f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089fa:	89 10                	mov    DWORD PTR [eax],edx
c00089fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a00:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a16:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a26:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a31:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a47:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a52:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a59:	83 ec 0c             	sub    esp,0xc
c0008a5c:	6a 01                	push   0x1
c0008a5e:	e8 0f 09 00 00       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c0008a63:	83 c4 10             	add    esp,0x10
c0008a66:	89 c2                	mov    edx,eax
c0008a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a6c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a6f:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a7c:	89 c6                	mov    esi,eax
c0008a7e:	e8 e7 f0 ff ff       	call   c0007b6a <Phys::allocatePage()>
c0008a83:	68 05 0c 00 00       	push   0xc05
c0008a88:	56                   	push   esi
c0008a89:	50                   	push   eax
c0008a8a:	53                   	push   ebx
c0008a8b:	e8 b2 0f 00 00       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a90:	83 c4 10             	add    esp,0x10
c0008a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a9a:	83 ec 04             	sub    esp,0x4
c0008a9d:	68 a0 0f 00 00       	push   0xfa0
c0008aa2:	6a 00                	push   0x0
c0008aa4:	50                   	push   eax
c0008aa5:	e8 16 7a ff ff       	call   c00004c0 <memset>
c0008aaa:	83 c4 10             	add    esp,0x10
c0008aad:	83 ec 04             	sub    esp,0x4
c0008ab0:	6a 00                	push   0x0
c0008ab2:	6a 07                	push   0x7
c0008ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab8:	e8 73 f8 ff ff       	call   c0008330 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	83 ec 04             	sub    esp,0x4
c0008ac3:	6a 00                	push   0x0
c0008ac5:	6a 00                	push   0x0
c0008ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008acb:	e8 f0 f9 ff ff       	call   c00084c0 <VgaText::setCursor(int, int)>
c0008ad0:	83 c4 10             	add    esp,0x10
c0008ad3:	83 ec 0c             	sub    esp,0xc
c0008ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ada:	e8 43 fa ff ff       	call   c0008522 <VgaText::clearScreen()>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae6:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aee:	05 82 00 00 00       	add    eax,0x82
c0008af3:	83 ec 04             	sub    esp,0x4
c0008af6:	68 80 00 00 00       	push   0x80
c0008afb:	6a 00                	push   0x0
c0008afd:	50                   	push   eax
c0008afe:	e8 bd 79 ff ff       	call   c00004c0 <memset>
c0008b03:	83 c4 10             	add    esp,0x10
c0008b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0a:	05 02 01 00 00       	add    eax,0x102
c0008b0f:	83 ec 04             	sub    esp,0x4
c0008b12:	68 80 00 00 00       	push   0x80
c0008b17:	6a 00                	push   0x0
c0008b19:	50                   	push   eax
c0008b1a:	e8 a1 79 ff ff       	call   c00004c0 <memset>
c0008b1f:	83 c4 10             	add    esp,0x10
c0008b22:	90                   	nop
c0008b23:	83 c4 04             	add    esp,0x4
c0008b26:	5b                   	pop    ebx
c0008b27:	5e                   	pop    esi
c0008b28:	c3                   	ret    
c0008b29:	90                   	nop

c0008b2a <VgaText::receiveKey(unsigned char)>:
c0008b2a:	55                   	push   ebp
c0008b2b:	57                   	push   edi
c0008b2c:	56                   	push   esi
c0008b2d:	53                   	push   ebx
c0008b2e:	83 ec 1c             	sub    esp,0x1c
c0008b31:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b39:	89 f0                	mov    eax,esi
c0008b3b:	84 c0                	test   al,al
c0008b3d:	0f 84 3f 01 00 00    	je     c0008c82 <VgaText::receiveKey(unsigned char)+0x158>
c0008b43:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b49:	3c 08                	cmp    al,0x8
c0008b4b:	75 66                	jne    c0008bb3 <VgaText::receiveKey(unsigned char)+0x89>
c0008b4d:	83 ec 0c             	sub    esp,0xc
c0008b50:	57                   	push   edi
c0008b51:	e8 da 79 ff ff       	call   c0000530 <strlen>
c0008b56:	83 c4 10             	add    esp,0x10
c0008b59:	85 c0                	test   eax,eax
c0008b5b:	0f 84 e6 00 00 00    	je     c0008c47 <VgaText::receiveKey(unsigned char)+0x11d>
c0008b61:	50                   	push   eax
c0008b62:	50                   	push   eax
c0008b63:	6a 08                	push   0x8
c0008b65:	53                   	push   ebx
c0008b66:	e8 79 fb ff ff       	call   c00086e4 <VgaText::putchar(char)>
c0008b6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b6e:	e8 bd 79 ff ff       	call   c0000530 <strlen>
c0008b73:	83 c4 10             	add    esp,0x10
c0008b76:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b7d:	3c 1f                	cmp    al,0x1f
c0008b7f:	7f 1c                	jg     c0008b9d <VgaText::receiveKey(unsigned char)+0x73>
c0008b81:	8d 50 f8             	lea    edx,[eax-0x8]
c0008b84:	80 fa 02             	cmp    dl,0x2
c0008b87:	76 14                	jbe    c0008b9d <VgaText::receiveKey(unsigned char)+0x73>
c0008b89:	3c 0d                	cmp    al,0xd
c0008b8b:	74 10                	je     c0008b9d <VgaText::receiveKey(unsigned char)+0x73>
c0008b8d:	55                   	push   ebp
c0008b8e:	55                   	push   ebp
c0008b8f:	68 1f f6 01 c0       	push   0xc001f61f
c0008b94:	53                   	push   ebx
c0008b95:	e8 7c fc ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0008b9a:	83 c4 10             	add    esp,0x10
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	57                   	push   edi
c0008ba1:	e8 8a 79 ff ff       	call   c0000530 <strlen>
c0008ba6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008bae:	e9 91 00 00 00       	jmp    c0008c44 <VgaText::receiveKey(unsigned char)+0x11a>
c0008bb3:	83 ec 0c             	sub    esp,0xc
c0008bb6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008bbc:	50                   	push   eax
c0008bbd:	e8 6e 79 ff ff       	call   c0000530 <strlen>
c0008bc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008bc5:	89 c5                	mov    ebp,eax
c0008bc7:	e8 64 79 ff ff       	call   c0000530 <strlen>
c0008bcc:	83 c4 10             	add    esp,0x10
c0008bcf:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008bd3:	3d 80 00 00 00       	cmp    eax,0x80
c0008bd8:	0f 87 a4 00 00 00    	ja     c0008c82 <VgaText::receiveKey(unsigned char)+0x158>
c0008bde:	8d 46 ff             	lea    eax,[esi-0x1]
c0008be1:	3c 1e                	cmp    al,0x1e
c0008be3:	77 36                	ja     c0008c1b <VgaText::receiveKey(unsigned char)+0xf1>
c0008be5:	8d 46 f7             	lea    eax,[esi-0x9]
c0008be8:	3c 01                	cmp    al,0x1
c0008bea:	76 2f                	jbe    c0008c1b <VgaText::receiveKey(unsigned char)+0xf1>
c0008bec:	89 f0                	mov    eax,esi
c0008bee:	3c 0d                	cmp    al,0xd
c0008bf0:	74 29                	je     c0008c1b <VgaText::receiveKey(unsigned char)+0xf1>
c0008bf2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bf5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bf8:	68 25 f6 01 c0       	push   0xc001f625
c0008bfd:	53                   	push   ebx
c0008bfe:	e8 85 fc ff ff       	call   c0008888 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008c03:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c06:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c09:	8d 46 40             	lea    eax,[esi+0x40]
c0008c0c:	0f b6 c0             	movzx  eax,al
c0008c0f:	50                   	push   eax
c0008c10:	53                   	push   ebx
c0008c11:	e8 00 fa ff ff       	call   c0008616 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008c16:	83 c4 20             	add    esp,0x20
c0008c19:	eb 11                	jmp    c0008c2c <VgaText::receiveKey(unsigned char)+0x102>
c0008c1b:	89 f0                	mov    eax,esi
c0008c1d:	51                   	push   ecx
c0008c1e:	51                   	push   ecx
c0008c1f:	0f be c0             	movsx  eax,al
c0008c22:	50                   	push   eax
c0008c23:	53                   	push   ebx
c0008c24:	e8 bb fa ff ff       	call   c00086e4 <VgaText::putchar(char)>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 f0                	mov    eax,esi
c0008c2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c33:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c37:	52                   	push   edx
c0008c38:	52                   	push   edx
c0008c39:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c3d:	50                   	push   eax
c0008c3e:	57                   	push   edi
c0008c3f:	e8 7c 7b ff ff       	call   c00007c0 <strcat>
c0008c44:	83 c4 10             	add    esp,0x10
c0008c47:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c4e:	75 10                	jne    c0008c60 <VgaText::receiveKey(unsigned char)+0x136>
c0008c50:	89 f0                	mov    eax,esi
c0008c52:	3c 1c                	cmp    al,0x1c
c0008c54:	77 2c                	ja     c0008c82 <VgaText::receiveKey(unsigned char)+0x158>
c0008c56:	b8 08 04 00 10       	mov    eax,0x10000408
c0008c5b:	0f a3 f0             	bt     eax,esi
c0008c5e:	73 22                	jae    c0008c82 <VgaText::receiveKey(unsigned char)+0x158>
c0008c60:	50                   	push   eax
c0008c61:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c67:	50                   	push   eax
c0008c68:	57                   	push   edi
c0008c69:	53                   	push   ebx
c0008c6a:	e8 51 7b ff ff       	call   c00007c0 <strcat>
c0008c6f:	83 c4 0c             	add    esp,0xc
c0008c72:	68 80 00 00 00       	push   0x80
c0008c77:	6a 00                	push   0x0
c0008c79:	57                   	push   edi
c0008c7a:	e8 41 78 ff ff       	call   c00004c0 <memset>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	83 c4 1c             	add    esp,0x1c
c0008c85:	5b                   	pop    ebx
c0008c86:	5e                   	pop    esi
c0008c87:	5f                   	pop    edi
c0008c88:	5d                   	pop    ebp
c0008c89:	c3                   	ret    

c0008c8a <VgaText::doUpdate()>:
c0008c8a:	c3                   	ret    

c0008c8b <newTerminal(char*)>:
c0008c8b:	83 ec 28             	sub    esp,0x28
c0008c8e:	68 84 01 00 00       	push   0x184
c0008c93:	e8 db eb ff ff       	call   c0007873 <malloc>
c0008c98:	5a                   	pop    edx
c0008c99:	59                   	pop    ecx
c0008c9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c9e:	50                   	push   eax
c0008c9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ca3:	e8 32 fd ff ff       	call   c00089da <VgaText::VgaText(char const*)>
c0008ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cac:	83 c4 2c             	add    esp,0x2c
c0008caf:	c3                   	ret    

c0008cb0 <TSS::TSS()>:
c0008cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008cb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008cbb:	90                   	nop
c0008cbc:	c3                   	ret    
c0008cbd:	90                   	nop
c0008cbe:	66 90                	xchg   ax,ax

c0008cc0 <TSS::setESP(unsigned long)>:
c0008cc0:	55                   	push   ebp
c0008cc1:	89 e5                	mov    ebp,esp
c0008cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ccc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ccf:	90                   	nop
c0008cd0:	5d                   	pop    ebp
c0008cd1:	c3                   	ret    
c0008cd2:	66 90                	xchg   ax,ax

c0008cd4 <TSS::flush()>:
c0008cd4:	55                   	push   ebp
c0008cd5:	89 e5                	mov    ebp,esp
c0008cd7:	83 ec 10             	sub    esp,0x10
c0008cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cdf:	83 c8 03             	or     eax,0x3
c0008ce2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008ce6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cea:	66 89 d0             	mov    ax,dx
c0008ced:	0f 00 d8             	ltr    ax
c0008cf0:	90                   	nop
c0008cf1:	c9                   	leave  
c0008cf2:	c3                   	ret    
c0008cf3:	90                   	nop

c0008cf4 <TSS::setup(unsigned long, unsigned long)>:
c0008cf4:	55                   	push   ebp
c0008cf5:	89 e5                	mov    ebp,esp
c0008cf7:	83 ec 18             	sub    esp,0x18
c0008cfa:	83 ec 0c             	sub    esp,0xc
c0008cfd:	6a 68                	push   0x68
c0008cff:	e8 6f eb ff ff       	call   c0007873 <malloc>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	89 c2                	mov    edx,eax
c0008d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d15:	83 ec 04             	sub    esp,0x4
c0008d18:	6a 68                	push   0x68
c0008d1a:	6a 00                	push   0x0
c0008d1c:	50                   	push   eax
c0008d1d:	e8 9e 77 ff ff       	call   c00004c0 <memset>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d37:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d43:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d46:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d67:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d73:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d97:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d9a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008da0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008da3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008da6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008daf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008db9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dbc:	0f 20 da             	mov    edx,cr3
c0008dbf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008dc2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008dc5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	50                   	push   eax
c0008dd2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dd5:	50                   	push   eax
c0008dd6:	e8 21 e3 ff ff       	call   c00070fc <GDTEntry::setBase(unsigned int)>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	83 ec 08             	sub    esp,0x8
c0008de1:	6a 68                	push   0x68
c0008de3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008de6:	50                   	push   eax
c0008de7:	e8 2c e3 ff ff       	call   c0007118 <GDTEntry::setLimit(unsigned int)>
c0008dec:	83 c4 10             	add    esp,0x10
c0008def:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008df3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008df6:	83 e0 0f             	and    eax,0xf
c0008df9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dfc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dff:	83 c8 40             	or     eax,0x40
c0008e02:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008e05:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e10:	05 78 01 00 00       	add    eax,0x178
c0008e15:	83 ec 04             	sub    esp,0x4
c0008e18:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008e1b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008e1e:	50                   	push   eax
c0008e1f:	e8 28 e3 ff ff       	call   c000714c <GDT::addEntry(GDTEntry)>
c0008e24:	83 c4 10             	add    esp,0x10
c0008e27:	89 c2                	mov    edx,eax
c0008e29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2c:	89 10                	mov    DWORD PTR [eax],edx
c0008e2e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e33:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e39:	05 78 01 00 00       	add    eax,0x178
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 2f e3 ff ff       	call   c0007176 <GDT::flush()>
c0008e47:	83 c4 10             	add    esp,0x10
c0008e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e4f:	c9                   	leave  
c0008e50:	c3                   	ret    
c0008e51:	90                   	nop

c0008e52 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e5d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e62:	75 08                	jne    c0008e6c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e64:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e6a:	eb 38                	jmp    c0008ea4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e6c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e71:	75 17                	jne    c0008e8a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e81:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e87:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e8a:	89 c1                	mov    ecx,eax
c0008e8c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e8f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e95:	74 cd                	je     c0008e64 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e97:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e9c:	83 e0 ef             	and    eax,0xffffffef
c0008e9f:	83 f8 08             	cmp    eax,0x8
c0008ea2:	76 c0                	jbe    c0008e64 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008ea4:	31 c0                	xor    eax,eax
c0008ea6:	c3                   	ret    
c0008ea7:	90                   	nop

c0008ea8 <ReservedFilename::isAtty()>:
c0008ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008eac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008eaf:	31 c0                	xor    eax,eax
c0008eb1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008eb7:	74 09                	je     c0008ec2 <ReservedFilename::isAtty()+0x1a>
c0008eb9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ebf:	0f 94 c0             	sete   al
c0008ec2:	c3                   	ret    
c0008ec3:	90                   	nop

c0008ec4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ec8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008ecc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008ed0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ed3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ed8:	75 08                	jne    c0008ee2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eda:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ee0:	eb 3d                	jmp    c0008f1f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ee2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ee7:	75 17                	jne    c0008f00 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008eee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ef1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ef7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ef9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008efd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008f00:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008f05:	75 04                	jne    c0008f0b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008f07:	89 0a                	mov    DWORD PTR [edx],ecx
c0008f09:	eb 14                	jmp    c0008f1f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008f0b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008f10:	74 c8                	je     c0008eda <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f12:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008f17:	83 e0 ef             	and    eax,0xffffffef
c0008f1a:	83 f8 08             	cmp    eax,0x8
c0008f1d:	76 bb                	jbe    c0008eda <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f1f:	31 c0                	xor    eax,eax
c0008f21:	c3                   	ret    

c0008f22 <UnixFile::getFileDescriptor()>:
c0008f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f29:	c3                   	ret    

c0008f2a <UnixFile::UnixFile(int)>:
c0008f2a:	53                   	push   ebx
c0008f2b:	83 ec 28             	sub    esp,0x28
c0008f2e:	ba fc f6 01 c0       	mov    edx,0xc001f6fc
c0008f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f37:	89 10                	mov    DWORD PTR [eax],edx
c0008f39:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f41:	0f 8f 8c 01 00 00    	jg     c00090d3 <UnixFile::UnixFile(int)+0x1a9>
c0008f47:	a1 c0 17 02 c0       	mov    eax,ds:0xc00217c0
c0008f4c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f4f:	89 15 c0 17 02 c0    	mov    DWORD PTR ds:0xc00217c0,edx
c0008f55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f59:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f5c:	83 ec 08             	sub    esp,0x8
c0008f5f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f63:	68 98 3f 02 c0       	push   0xc0023f98
c0008f68:	e8 5b 52 01 00       	call   c001e1c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f75:	83 f0 01             	xor    eax,0x1
c0008f78:	84 c0                	test   al,al
c0008f7a:	0f 84 54 01 00 00    	je     c00090d4 <UnixFile::UnixFile(int)+0x1aa>
c0008f80:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f87:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f8f:	83 ec 0c             	sub    esp,0xc
c0008f92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f96:	e8 d8 e8 ff ff       	call   c0007873 <malloc>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 c3                	mov    ebx,eax
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	68 03 ff ff 0f       	push   0xfffff03
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 2c 01 00 00       	call   c00090da <ReservedFilename::ReservedFilename(int)>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008fb7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008fbf:	83 ec 0c             	sub    esp,0xc
c0008fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fc6:	e8 a8 e8 ff ff       	call   c0007873 <malloc>
c0008fcb:	83 c4 10             	add    esp,0x10
c0008fce:	89 c3                	mov    ebx,eax
c0008fd0:	83 ec 08             	sub    esp,0x8
c0008fd3:	68 01 ff ff 0f       	push   0xfffff01
c0008fd8:	53                   	push   ebx
c0008fd9:	e8 fc 00 00 00       	call   c00090da <ReservedFilename::ReservedFilename(int)>
c0008fde:	83 c4 10             	add    esp,0x10
c0008fe1:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fe7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fef:	83 ec 0c             	sub    esp,0xc
c0008ff2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008ff6:	e8 78 e8 ff ff       	call   c0007873 <malloc>
c0008ffb:	83 c4 10             	add    esp,0x10
c0008ffe:	89 c3                	mov    ebx,eax
c0009000:	83 ec 08             	sub    esp,0x8
c0009003:	68 00 ff ff 0f       	push   0xfffff00
c0009008:	53                   	push   ebx
c0009009:	e8 cc 00 00 00       	call   c00090da <ReservedFilename::ReservedFilename(int)>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0009017:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000901f:	83 ec 0c             	sub    esp,0xc
c0009022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009026:	e8 48 e8 ff ff       	call   c0007873 <malloc>
c000902b:	83 c4 10             	add    esp,0x10
c000902e:	89 c3                	mov    ebx,eax
c0009030:	83 ec 08             	sub    esp,0x8
c0009033:	68 02 ff ff 0f       	push   0xfffff02
c0009038:	53                   	push   ebx
c0009039:	e8 9c 00 00 00       	call   c00090da <ReservedFilename::ReservedFilename(int)>
c000903e:	83 c4 10             	add    esp,0x10
c0009041:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009047:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000904f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009054:	7f 7e                	jg     c00090d4 <UnixFile::UnixFile(int)+0x1aa>
c0009056:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000905e:	83 ec 0c             	sub    esp,0xc
c0009061:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009065:	e8 09 e8 ff ff       	call   c0007873 <malloc>
c000906a:	83 c4 10             	add    esp,0x10
c000906d:	89 c3                	mov    ebx,eax
c000906f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009073:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009078:	83 ec 08             	sub    esp,0x8
c000907b:	50                   	push   eax
c000907c:	53                   	push   ebx
c000907d:	e8 58 00 00 00       	call   c00090da <ReservedFilename::ReservedFilename(int)>
c0009082:	83 c4 10             	add    esp,0x10
c0009085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009089:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009090:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009098:	83 ec 0c             	sub    esp,0xc
c000909b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000909f:	e8 cf e7 ff ff       	call   c0007873 <malloc>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	89 c3                	mov    ebx,eax
c00090a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090ad:	05 20 ff ff 0f       	add    eax,0xfffff20
c00090b2:	83 ec 08             	sub    esp,0x8
c00090b5:	50                   	push   eax
c00090b6:	53                   	push   ebx
c00090b7:	e8 1e 00 00 00       	call   c00090da <ReservedFilename::ReservedFilename(int)>
c00090bc:	83 c4 10             	add    esp,0x10
c00090bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090c3:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090ca:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090ce:	e9 7c ff ff ff       	jmp    c000904f <UnixFile::UnixFile(int)+0x125>
c00090d3:	90                   	nop
c00090d4:	83 c4 28             	add    esp,0x28
c00090d7:	5b                   	pop    ebx
c00090d8:	c3                   	ret    
c00090d9:	90                   	nop

c00090da <ReservedFilename::ReservedFilename(int)>:
c00090da:	83 ec 0c             	sub    esp,0xc
c00090dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e1:	83 ec 08             	sub    esp,0x8
c00090e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e8:	50                   	push   eax
c00090e9:	e8 3c fe ff ff       	call   c0008f2a <UnixFile::UnixFile(int)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	ba 18 f7 01 c0       	mov    edx,0xc001f718
c00090f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fa:	89 10                	mov    DWORD PTR [eax],edx
c00090fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009100:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009104:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009107:	90                   	nop
c0009108:	83 c4 0c             	add    esp,0xc
c000910b:	c3                   	ret    

c000910c <UnixFile::~UnixFile()>:
c000910c:	83 ec 1c             	sub    esp,0x1c
c000910f:	ba fc f6 01 c0       	mov    edx,0xc001f6fc
c0009114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009118:	89 10                	mov    DWORD PTR [eax],edx
c000911a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009121:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009126:	7f 73                	jg     c000919b <UnixFile::~UnixFile()+0x8f>
c0009128:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009130:	83 ec 0c             	sub    esp,0xc
c0009133:	68 98 3f 02 c0       	push   0xc0023f98
c0009138:	e8 5f 51 01 00       	call   c001e29c <LinkedList<UnixFile>::getFirstElement()>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009144:	83 ec 0c             	sub    esp,0xc
c0009147:	68 98 3f 02 c0       	push   0xc0023f98
c000914c:	e8 53 51 01 00       	call   c001e2a4 <LinkedList<UnixFile>::removeFirst()>
c0009151:	83 c4 10             	add    esp,0x10
c0009154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009158:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000915c:	74 40                	je     c000919e <UnixFile::~UnixFile()+0x92>
c000915e:	83 ec 08             	sub    esp,0x8
c0009161:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009165:	68 98 3f 02 c0       	push   0xc0023f98
c000916a:	e8 59 50 01 00       	call   c001e1c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009176:	8d 50 01             	lea    edx,[eax+0x1]
c0009179:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009182:	0f 94 c0             	sete   al
c0009185:	84 c0                	test   al,al
c0009187:	74 a7                	je     c0009130 <UnixFile::~UnixFile()+0x24>
c0009189:	83 ec 0c             	sub    esp,0xc
c000918c:	68 d4 f6 01 c0       	push   0xc001f6d4
c0009191:	e8 81 72 00 00       	call   c0010417 <KePanic(char const*)>
c0009196:	83 c4 10             	add    esp,0x10
c0009199:	eb 95                	jmp    c0009130 <UnixFile::~UnixFile()+0x24>
c000919b:	90                   	nop
c000919c:	eb 01                	jmp    c000919f <UnixFile::~UnixFile()+0x93>
c000919e:	90                   	nop
c000919f:	90                   	nop
c00091a0:	83 c4 1c             	add    esp,0x1c
c00091a3:	c3                   	ret    

c00091a4 <UnixFile::~UnixFile()>:
c00091a4:	83 ec 0c             	sub    esp,0xc
c00091a7:	83 ec 0c             	sub    esp,0xc
c00091aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ae:	e8 59 ff ff ff       	call   c000910c <UnixFile::~UnixFile()>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	83 ec 08             	sub    esp,0x8
c00091b9:	6a 0c                	push   0xc
c00091bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091bf:	e8 a9 13 00 00       	call   c000a56d <operator delete(void*, unsigned long)>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	83 c4 0c             	add    esp,0xc
c00091ca:	c3                   	ret    
c00091cb:	90                   	nop

c00091cc <ReservedFilename::~ReservedFilename()>:
c00091cc:	83 ec 0c             	sub    esp,0xc
c00091cf:	ba 18 f7 01 c0       	mov    edx,0xc001f718
c00091d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091d8:	89 10                	mov    DWORD PTR [eax],edx
c00091da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091de:	83 ec 0c             	sub    esp,0xc
c00091e1:	50                   	push   eax
c00091e2:	e8 25 ff ff ff       	call   c000910c <UnixFile::~UnixFile()>
c00091e7:	83 c4 10             	add    esp,0x10
c00091ea:	90                   	nop
c00091eb:	83 c4 0c             	add    esp,0xc
c00091ee:	c3                   	ret    
c00091ef:	90                   	nop

c00091f0 <ReservedFilename::~ReservedFilename()>:
c00091f0:	83 ec 0c             	sub    esp,0xc
c00091f3:	83 ec 0c             	sub    esp,0xc
c00091f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091fa:	e8 cd ff ff ff       	call   c00091cc <ReservedFilename::~ReservedFilename()>
c00091ff:	83 c4 10             	add    esp,0x10
c0009202:	83 ec 08             	sub    esp,0x8
c0009205:	6a 0c                	push   0xc
c0009207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000920b:	e8 5d 13 00 00       	call   c000a56d <operator delete(void*, unsigned long)>
c0009210:	83 c4 10             	add    esp,0x10
c0009213:	83 c4 0c             	add    esp,0xc
c0009216:	c3                   	ret    

c0009217 <getFromFileDescriptor(int)>:
c0009217:	53                   	push   ebx
c0009218:	83 ec 08             	sub    esp,0x8
c000921b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000921f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009225:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000922b:	7f 2c                	jg     c0009259 <getFromFileDescriptor(int)+0x42>
c000922d:	83 ec 0c             	sub    esp,0xc
c0009230:	68 98 3f 02 c0       	push   0xc0023f98
c0009235:	e8 62 50 01 00       	call   c001e29c <LinkedList<UnixFile>::getFirstElement()>
c000923a:	83 c4 10             	add    esp,0x10
c000923d:	85 c0                	test   eax,eax
c000923f:	75 04                	jne    c0009245 <getFromFileDescriptor(int)+0x2e>
c0009241:	31 c0                	xor    eax,eax
c0009243:	eb 6e                	jmp    c00092b3 <getFromFileDescriptor(int)+0x9c>
c0009245:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009248:	74 69                	je     c00092b3 <getFromFileDescriptor(int)+0x9c>
c000924a:	52                   	push   edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	68 98 3f 02 c0       	push   0xc0023f98
c0009252:	e8 ef 50 01 00       	call   c001e346 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009257:	eb e1                	jmp    c000923a <getFromFileDescriptor(int)+0x23>
c0009259:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000925e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009264:	74 4d                	je     c00092b3 <getFromFileDescriptor(int)+0x9c>
c0009266:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000926b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009271:	74 40                	je     c00092b3 <getFromFileDescriptor(int)+0x9c>
c0009273:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009278:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000927e:	74 33                	je     c00092b3 <getFromFileDescriptor(int)+0x9c>
c0009280:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009285:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000928b:	74 26                	je     c00092b3 <getFromFileDescriptor(int)+0x9c>
c000928d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009293:	83 f8 08             	cmp    eax,0x8
c0009296:	77 09                	ja     c00092a1 <getFromFileDescriptor(int)+0x8a>
c0009298:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000929f:	eb 12                	jmp    c00092b3 <getFromFileDescriptor(int)+0x9c>
c00092a1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00092a7:	83 fb 08             	cmp    ebx,0x8
c00092aa:	77 95                	ja     c0009241 <getFromFileDescriptor(int)+0x2a>
c00092ac:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c00092b3:	83 c4 08             	add    esp,0x8
c00092b6:	5b                   	pop    ebx
c00092b7:	c3                   	ret    

c00092b8 <__static_initialization_and_destruction_0(int, int)>:
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092c0:	75 34                	jne    c00092f6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092c2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092ca:	75 2a                	jne    c00092f6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092cc:	83 ec 0c             	sub    esp,0xc
c00092cf:	68 98 3f 02 c0       	push   0xc0023f98
c00092d4:	e8 ad 4e 01 00       	call   c001e186 <LinkedList<UnixFile>::LinkedList()>
c00092d9:	83 c4 10             	add    esp,0x10
c00092dc:	83 ec 04             	sub    esp,0x4
c00092df:	68 48 17 02 c0       	push   0xc0021748
c00092e4:	68 98 3f 02 c0       	push   0xc0023f98
c00092e9:	68 84 e1 01 c0       	push   0xc001e184
c00092ee:	e8 2a 12 00 00       	call   c000a51d <__cxa_atexit>
c00092f3:	83 c4 10             	add    esp,0x10
c00092f6:	90                   	nop
c00092f7:	83 c4 0c             	add    esp,0xc
c00092fa:	c3                   	ret    

c00092fb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092fb:	83 ec 0c             	sub    esp,0xc
c00092fe:	83 ec 08             	sub    esp,0x8
c0009301:	68 ff ff 00 00       	push   0xffff
c0009306:	6a 01                	push   0x1
c0009308:	e8 ab ff ff ff       	call   c00092b8 <__static_initialization_and_destruction_0(int, int)>
c000930d:	83 c4 10             	add    esp,0x10
c0009310:	83 c4 0c             	add    esp,0xc
c0009313:	c3                   	ret    

c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009314:	53                   	push   ebx
c0009315:	8b 15 c8 17 02 c0    	mov    edx,DWORD PTR ds:0xc00217c8
c000931b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000931f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009323:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009329:	89 c8                	mov    eax,ecx
c000932b:	d1 e8                	shr    eax,1
c000932d:	01 d0                	add    eax,edx
c000932f:	83 e1 01             	and    ecx,0x1
c0009332:	8a 10                	mov    dl,BYTE PTR [eax]
c0009334:	75 09                	jne    c000933f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0009336:	83 e2 f0             	and    edx,0xfffffff0
c0009339:	09 da                	or     edx,ebx
c000933b:	88 10                	mov    BYTE PTR [eax],dl
c000933d:	5b                   	pop    ebx
c000933e:	c3                   	ret    
c000933f:	c1 e3 04             	shl    ebx,0x4
c0009342:	83 e2 0f             	and    edx,0xf
c0009345:	09 da                	or     edx,ebx
c0009347:	88 10                	mov    BYTE PTR [eax],dl
c0009349:	5b                   	pop    ebx
c000934a:	c3                   	ret    

c000934b <Virt::getPageState(unsigned long)>:
c000934b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000934f:	8b 0d c8 17 02 c0    	mov    ecx,DWORD PTR ds:0xc00217c8
c0009355:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000935b:	89 d0                	mov    eax,edx
c000935d:	d1 e8                	shr    eax,1
c000935f:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c0009362:	88 c8                	mov    al,cl
c0009364:	c0 e8 04             	shr    al,0x4
c0009367:	83 e2 01             	and    edx,0x1
c000936a:	75 05                	jne    c0009371 <Virt::getPageState(unsigned long)+0x26>
c000936c:	88 c8                	mov    al,cl
c000936e:	83 e0 0f             	and    eax,0xf
c0009371:	c3                   	ret    

c0009372 <Virt::allocateKernelVirtualPages(int)>:
c0009372:	55                   	push   ebp
c0009373:	31 ed                	xor    ebp,ebp
c0009375:	57                   	push   edi
c0009376:	56                   	push   esi
c0009377:	53                   	push   ebx
c0009378:	31 db                	xor    ebx,ebx
c000937a:	83 ec 1c             	sub    esp,0x1c
c000937d:	8b 3d c4 17 02 c0    	mov    edi,DWORD PTR ds:0xc00217c4
c0009383:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009387:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000938c:	57                   	push   edi
c000938d:	e8 b9 ff ff ff       	call   c000934b <Virt::getPageState(unsigned long)>
c0009392:	5a                   	pop    edx
c0009393:	84 c0                	test   al,al
c0009395:	75 3a                	jne    c00093d1 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009397:	85 db                	test   ebx,ebx
c0009399:	75 02                	jne    c000939d <Virt::allocateKernelVirtualPages(int)+0x2b>
c000939b:	89 fd                	mov    ebp,edi
c000939d:	43                   	inc    ebx
c000939e:	39 f3                	cmp    ebx,esi
c00093a0:	74 5a                	je     c00093fc <Virt::allocateKernelVirtualPages(int)+0x8a>
c00093a2:	47                   	inc    edi
c00093a3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093a9:	76 31                	jbe    c00093dc <Virt::allocateKernelVirtualPages(int)+0x6a>
c00093ab:	c7 05 c4 17 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00217c4,0xc8000
c00093b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00093ba:	75 28                	jne    c00093e4 <Virt::allocateKernelVirtualPages(int)+0x72>
c00093bc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093c1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00093c6:	57                   	push   edi
c00093c7:	e8 7f ff ff ff       	call   c000934b <Virt::getPageState(unsigned long)>
c00093cc:	5a                   	pop    edx
c00093cd:	84 c0                	test   al,al
c00093cf:	74 c6                	je     c0009397 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093d1:	47                   	inc    edi
c00093d2:	31 db                	xor    ebx,ebx
c00093d4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093da:	77 cf                	ja     c00093ab <Virt::allocateKernelVirtualPages(int)+0x39>
c00093dc:	89 3d c4 17 02 c0    	mov    DWORD PTR ds:0xc00217c4,edi
c00093e2:	eb a8                	jmp    c000938c <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093e4:	83 ec 0c             	sub    esp,0xc
c00093e7:	68 2c f7 01 c0       	push   0xc001f72c
c00093ec:	e8 26 70 00 00       	call   c0010417 <KePanic(char const*)>
c00093f1:	8b 3d c4 17 02 c0    	mov    edi,DWORD PTR ds:0xc00217c4
c00093f7:	83 c4 10             	add    esp,0x10
c00093fa:	eb 90                	jmp    c000938c <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093fc:	89 2d c4 17 02 c0    	mov    DWORD PTR ds:0xc00217c4,ebp
c0009402:	4b                   	dec    ebx
c0009403:	74 5f                	je     c0009464 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009405:	85 f6                	test   esi,esi
c0009407:	74 3d                	je     c0009446 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009409:	89 e8                	mov    eax,ebp
c000940b:	31 db                	xor    ebx,ebx
c000940d:	8d 7e ff             	lea    edi,[esi-0x1]
c0009410:	eb 14                	jmp    c0009426 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009412:	6a 01                	push   0x1
c0009414:	43                   	inc    ebx
c0009415:	50                   	push   eax
c0009416:	e8 f9 fe ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941b:	58                   	pop    eax
c000941c:	39 f3                	cmp    ebx,esi
c000941e:	5a                   	pop    edx
c000941f:	74 25                	je     c0009446 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009421:	a1 c4 17 02 c0       	mov    eax,ds:0xc00217c4
c0009426:	8d 50 01             	lea    edx,[eax+0x1]
c0009429:	85 db                	test   ebx,ebx
c000942b:	89 15 c4 17 02 c0    	mov    DWORD PTR ds:0xc00217c4,edx
c0009431:	74 20                	je     c0009453 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009433:	39 df                	cmp    edi,ebx
c0009435:	75 db                	jne    c0009412 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009437:	6a 03                	push   0x3
c0009439:	43                   	inc    ebx
c000943a:	50                   	push   eax
c000943b:	e8 d4 fe ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009440:	59                   	pop    ecx
c0009441:	39 f3                	cmp    ebx,esi
c0009443:	58                   	pop    eax
c0009444:	75 db                	jne    c0009421 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009446:	83 c4 1c             	add    esp,0x1c
c0009449:	89 e8                	mov    eax,ebp
c000944b:	c1 e0 0c             	shl    eax,0xc
c000944e:	5b                   	pop    ebx
c000944f:	5e                   	pop    esi
c0009450:	5f                   	pop    edi
c0009451:	5d                   	pop    ebp
c0009452:	c3                   	ret    
c0009453:	6a 02                	push   0x2
c0009455:	bb 01 00 00 00       	mov    ebx,0x1
c000945a:	50                   	push   eax
c000945b:	e8 b4 fe ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009460:	58                   	pop    eax
c0009461:	5a                   	pop    edx
c0009462:	eb bd                	jmp    c0009421 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009464:	6a 04                	push   0x4
c0009466:	8d 45 01             	lea    eax,[ebp+0x1]
c0009469:	55                   	push   ebp
c000946a:	a3 c4 17 02 c0       	mov    ds:0xc00217c4,eax
c000946f:	e8 a0 fe ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009474:	59                   	pop    ecx
c0009475:	5b                   	pop    ebx
c0009476:	89 e8                	mov    eax,ebp
c0009478:	c1 e0 0c             	shl    eax,0xc
c000947b:	83 c4 1c             	add    esp,0x1c
c000947e:	5b                   	pop    ebx
c000947f:	5e                   	pop    esi
c0009480:	5f                   	pop    edi
c0009481:	5d                   	pop    ebp
c0009482:	c3                   	ret    

c0009483 <Virt::freeSwapfilePage(unsigned long)>:
c0009483:	53                   	push   ebx
c0009484:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c000948a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000948e:	b8 01 00 00 00       	mov    eax,0x1
c0009493:	89 cb                	mov    ebx,ecx
c0009495:	c1 eb 05             	shr    ebx,0x5
c0009498:	d3 e0                	shl    eax,cl
c000949a:	83 f0 ff             	xor    eax,0xffffffff
c000949d:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00094a0:	21 c1                	and    ecx,eax
c00094a2:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00094a5:	5b                   	pop    ebx
c00094a6:	c3                   	ret    

c00094a7 <Virt::swapIDToSector(unsigned long)>:
c00094a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094ab:	8b 15 cc 17 02 c0    	mov    edx,DWORD PTR ds:0xc00217cc
c00094b1:	0f af c2             	imul   eax,edx
c00094b4:	8b 0d d4 17 02 c0    	mov    ecx,DWORD PTR ds:0xc00217d4
c00094ba:	01 c8                	add    eax,ecx
c00094bc:	c3                   	ret    

c00094bd <Virt::allocateSwapfilePage()>:
c00094bd:	55                   	push   ebp
c00094be:	31 d2                	xor    edx,edx
c00094c0:	57                   	push   edi
c00094c1:	56                   	push   esi
c00094c2:	53                   	push   ebx
c00094c3:	83 ec 0c             	sub    esp,0xc
c00094c6:	8b 0d cc 17 02 c0    	mov    ecx,DWORD PTR ds:0xc00217cc
c00094cc:	a1 d0 17 02 c0       	mov    eax,ds:0xc00217d0
c00094d1:	f7 f1                	div    ecx
c00094d3:	39 0d d0 17 02 c0    	cmp    DWORD PTR ds:0xc00217d0,ecx
c00094d9:	72 2d                	jb     c0009508 <Virt::allocateSwapfilePage()+0x4b>
c00094db:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094e1:	8b 16                	mov    edx,DWORD PTR [esi]
c00094e3:	f6 c2 01             	test   dl,0x1
c00094e6:	74 3c                	je     c0009524 <Virt::allocateSwapfilePage()+0x67>
c00094e8:	31 c9                	xor    ecx,ecx
c00094ea:	bf 01 00 00 00       	mov    edi,0x1
c00094ef:	eb 12                	jmp    c0009503 <Virt::allocateSwapfilePage()+0x46>
c00094f1:	89 ca                	mov    edx,ecx
c00094f3:	89 fd                	mov    ebp,edi
c00094f5:	c1 ea 05             	shr    edx,0x5
c00094f8:	d3 e5                	shl    ebp,cl
c00094fa:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094fd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094ff:	85 ea                	test   edx,ebp
c0009501:	74 2a                	je     c000952d <Virt::allocateSwapfilePage()+0x70>
c0009503:	41                   	inc    ecx
c0009504:	39 c8                	cmp    eax,ecx
c0009506:	77 e9                	ja     c00094f1 <Virt::allocateSwapfilePage()+0x34>
c0009508:	83 ec 0c             	sub    esp,0xc
c000950b:	68 93 f8 01 c0       	push   0xc001f893
c0009510:	e8 02 6f 00 00       	call   c0010417 <KePanic(char const*)>
c0009515:	83 c4 10             	add    esp,0x10
c0009518:	31 c9                	xor    ecx,ecx
c000951a:	83 c4 0c             	add    esp,0xc
c000951d:	89 c8                	mov    eax,ecx
c000951f:	5b                   	pop    ebx
c0009520:	5e                   	pop    esi
c0009521:	5f                   	pop    edi
c0009522:	5d                   	pop    ebp
c0009523:	c3                   	ret    
c0009524:	89 f3                	mov    ebx,esi
c0009526:	bd 01 00 00 00       	mov    ebp,0x1
c000952b:	31 c9                	xor    ecx,ecx
c000952d:	09 ea                	or     edx,ebp
c000952f:	89 c8                	mov    eax,ecx
c0009531:	89 13                	mov    DWORD PTR [ebx],edx
c0009533:	83 c4 0c             	add    esp,0xc
c0009536:	5b                   	pop    ebx
c0009537:	5e                   	pop    esi
c0009538:	5f                   	pop    edi
c0009539:	5d                   	pop    ebp
c000953a:	c3                   	ret    

c000953b <Virt::virtualMemorySetup()>:
c000953b:	53                   	push   ebx
c000953c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009541:	6a 0f                	push   0xf
c0009543:	53                   	push   ebx
c0009544:	43                   	inc    ebx
c0009545:	e8 ca fd ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000954a:	58                   	pop    eax
c000954b:	5a                   	pop    edx
c000954c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009552:	75 ed                	jne    c0009541 <Virt::virtualMemorySetup()+0x6>
c0009554:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009559:	6a 00                	push   0x0
c000955b:	53                   	push   ebx
c000955c:	43                   	inc    ebx
c000955d:	e8 b2 fd ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009562:	59                   	pop    ecx
c0009563:	58                   	pop    eax
c0009564:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000956a:	75 ed                	jne    c0009559 <Virt::virtualMemorySetup()+0x1e>
c000956c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009571:	6a 0f                	push   0xf
c0009573:	53                   	push   ebx
c0009574:	43                   	inc    ebx
c0009575:	e8 9a fd ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000957a:	58                   	pop    eax
c000957b:	5a                   	pop    edx
c000957c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009582:	75 ed                	jne    c0009571 <Virt::virtualMemorySetup()+0x36>
c0009584:	5b                   	pop    ebx
c0009585:	c3                   	ret    

c0009586 <Virt::setupPageSwapping(int)>:
c0009586:	53                   	push   ebx
c0009587:	83 ec 0c             	sub    esp,0xc
c000958a:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000958f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009593:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009599:	8b 10                	mov    edx,DWORD PTR [eax]
c000959b:	53                   	push   ebx
c000959c:	c1 e3 0b             	shl    ebx,0xb
c000959f:	68 aa f8 01 c0       	push   0xc001f8aa
c00095a4:	50                   	push   eax
c00095a5:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00095a8:	89 1d d0 17 02 c0    	mov    DWORD PTR ds:0xc00217d0,ebx
c00095ae:	c6 05 d8 17 02 c0 43 	mov    BYTE PTR ds:0xc00217d8,0x43
c00095b5:	c1 eb 08             	shr    ebx,0x8
c00095b8:	a3 d4 17 02 c0       	mov    ds:0xc00217d4,eax
c00095bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00095c0:	c7 05 cc 17 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00217cc,0x8
c00095ca:	e8 a4 e2 ff ff       	call   c0007873 <malloc>
c00095cf:	31 d2                	xor    edx,edx
c00095d1:	89 c1                	mov    ecx,eax
c00095d3:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095d8:	a1 d0 17 02 c0       	mov    eax,ds:0xc00217d0
c00095dd:	83 c4 0c             	add    esp,0xc
c00095e0:	f7 35 cc 17 02 c0    	div    DWORD PTR ds:0xc00217cc
c00095e6:	c1 e8 05             	shr    eax,0x5
c00095e9:	50                   	push   eax
c00095ea:	6a 00                	push   0x0
c00095ec:	51                   	push   ecx
c00095ed:	e8 ce 6e ff ff       	call   c00004c0 <memset>
c00095f2:	83 c4 18             	add    esp,0x18
c00095f5:	5b                   	pop    ebx
c00095f6:	c3                   	ret    
c00095f7:	90                   	nop

c00095f8 <VAS::VAS(VAS*)>:
c00095f8:	83 ec 0c             	sub    esp,0xc
c00095fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000960a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009611:	83 ec 0c             	sub    esp,0xc
c0009614:	68 4c f7 01 c0       	push   0xc001f74c
c0009619:	e8 f9 6d 00 00       	call   c0010417 <KePanic(char const*)>
c000961e:	83 c4 10             	add    esp,0x10
c0009621:	90                   	nop
c0009622:	83 c4 0c             	add    esp,0xc
c0009625:	c3                   	ret    

c0009626 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009626:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000962a:	89 c2                	mov    edx,eax
c000962c:	c1 ea 16             	shr    edx,0x16
c000962f:	c1 e8 0a             	shr    eax,0xa
c0009632:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009637:	19 c9                	sbb    ecx,ecx
c0009639:	25 fc 0f 00 00       	and    eax,0xffc
c000963e:	c1 e2 0c             	shl    edx,0xc
c0009641:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009647:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000964e:	01 d0                	add    eax,edx
c0009650:	c3                   	ret    
c0009651:	90                   	nop

c0009652 <VAS::getPageTableEntry(unsigned long)>:
c0009652:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009656:	89 ca                	mov    edx,ecx
c0009658:	c1 ea 16             	shr    edx,0x16
c000965b:	c1 e9 0a             	shr    ecx,0xa
c000965e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009664:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000966a:	c1 e0 0c             	shl    eax,0xc
c000966d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009670:	c3                   	ret    

c0009671 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009671:	57                   	push   edi
c0009672:	56                   	push   esi
c0009673:	be 01 00 00 00       	mov    esi,0x1
c0009678:	53                   	push   ebx
c0009679:	83 ec 10             	sub    esp,0x10
c000967c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009680:	c1 eb 0c             	shr    ebx,0xc
c0009683:	eb 3f                	jmp    c00096c4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009685:	51                   	push   ecx
c0009686:	51                   	push   ecx
c0009687:	57                   	push   edi
c0009688:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c000968e:	57                   	push   edi
c000968f:	e8 be ff ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000969b:	8b 00                	mov    eax,DWORD PTR [eax]
c000969d:	f6 c4 04             	test   ah,0x4
c00096a0:	75 60                	jne    c0009702 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00096a2:	80 fa 04             	cmp    dl,0x4
c00096a5:	74 79                	je     c0009720 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00096a7:	80 fa 02             	cmp    dl,0x2
c00096aa:	0f 84 89 00 00 00    	je     c0009739 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00096b0:	80 fa 03             	cmp    dl,0x3
c00096b3:	0f 84 ad 00 00 00    	je     c0009766 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00096b9:	fe ca                	dec    dl
c00096bb:	0f 84 93 00 00 00    	je     c0009754 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096c1:	43                   	inc    ebx
c00096c2:	31 f6                	xor    esi,esi
c00096c4:	53                   	push   ebx
c00096c5:	e8 81 fc ff ff       	call   c000934b <Virt::getPageState(unsigned long)>
c00096ca:	5f                   	pop    edi
c00096cb:	89 df                	mov    edi,ebx
c00096cd:	c1 e7 0c             	shl    edi,0xc
c00096d0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096d4:	84 c0                	test   al,al
c00096d6:	75 ad                	jne    c0009685 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096d8:	83 ec 0c             	sub    esp,0xc
c00096db:	68 c1 f8 01 c0       	push   0xc001f8c1
c00096e0:	e8 32 6d 00 00       	call   c0010417 <KePanic(char const*)>
c00096e5:	58                   	pop    eax
c00096e6:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c00096ec:	5a                   	pop    edx
c00096ed:	57                   	push   edi
c00096ee:	51                   	push   ecx
c00096ef:	e8 5e ff ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c00096f4:	83 c4 10             	add    esp,0x10
c00096f7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00096fd:	f6 c4 04             	test   ah,0x4
c0009700:	74 bf                	je     c00096c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009702:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009706:	83 ec 0c             	sub    esp,0xc
c0009709:	25 00 f0 ff ff       	and    eax,0xfffff000
c000970e:	50                   	push   eax
c000970f:	e8 ee e3 ff ff       	call   c0007b02 <Phys::freePage(unsigned long)>
c0009714:	83 c4 10             	add    esp,0x10
c0009717:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000971b:	80 fa 04             	cmp    dl,0x4
c000971e:	75 87                	jne    c00096a7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009720:	89 f0                	mov    eax,esi
c0009722:	84 c0                	test   al,al
c0009724:	75 46                	jne    c000976c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0009726:	c7 44 24 20 70 f7 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f770
c000972e:	83 c4 10             	add    esp,0x10
c0009731:	5b                   	pop    ebx
c0009732:	5e                   	pop    esi
c0009733:	5f                   	pop    edi
c0009734:	e9 de 6c 00 00       	jmp    c0010417 <KePanic(char const*)>
c0009739:	89 f0                	mov    eax,esi
c000973b:	84 c0                	test   al,al
c000973d:	75 15                	jne    c0009754 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000973f:	83 ec 0c             	sub    esp,0xc
c0009742:	68 dd f8 01 c0       	push   0xc001f8dd
c0009747:	e8 cb 6c 00 00       	call   c0010417 <KePanic(char const*)>
c000974c:	83 c4 10             	add    esp,0x10
c000974f:	e9 6d ff ff ff       	jmp    c00096c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009754:	50                   	push   eax
c0009755:	50                   	push   eax
c0009756:	6a 00                	push   0x0
c0009758:	53                   	push   ebx
c0009759:	e8 b6 fb ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000975e:	83 c4 10             	add    esp,0x10
c0009761:	e9 5b ff ff ff       	jmp    c00096c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009766:	89 f0                	mov    eax,esi
c0009768:	84 c0                	test   al,al
c000976a:	75 14                	jne    c0009780 <Virt::freeKernelVirtualPages(unsigned long)+0x10f>
c000976c:	52                   	push   edx
c000976d:	52                   	push   edx
c000976e:	6a 00                	push   0x0
c0009770:	53                   	push   ebx
c0009771:	e8 9e fb ff ff       	call   c0009314 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009776:	83 c4 10             	add    esp,0x10
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	5b                   	pop    ebx
c000977d:	5e                   	pop    esi
c000977e:	5f                   	pop    edi
c000977f:	c3                   	ret    
c0009780:	c7 44 24 20 f9 f8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f8f9
c0009788:	83 c4 10             	add    esp,0x10
c000978b:	5b                   	pop    ebx
c000978c:	5e                   	pop    esi
c000978d:	5f                   	pop    edi
c000978e:	e9 84 6c 00 00       	jmp    c0010417 <KePanic(char const*)>
c0009793:	90                   	nop

c0009794 <VAS::freeAllocatedPages(unsigned long)>:
c0009794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000979c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00097a0:	74 09                	je     c00097ab <VAS::freeAllocatedPages(unsigned long)+0x17>
c00097a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a6:	e9 c6 fe ff ff       	jmp    c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c00097ab:	c7 44 24 04 94 f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f794
c00097b3:	e9 ab 0e 00 00       	jmp    c000a663 <Dbg::kprintf(char const*, ...)>

c00097b8 <VAS::virtualToPhysical(unsigned long)>:
c00097b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097bc:	50                   	push   eax
c00097bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00097c1:	52                   	push   edx
c00097c2:	e8 8b fe ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c00097c7:	59                   	pop    ecx
c00097c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00097ca:	5a                   	pop    edx
c00097cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097d0:	c3                   	ret    
c00097d1:	90                   	nop

c00097d2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097d2:	55                   	push   ebp
c00097d3:	57                   	push   edi
c00097d4:	56                   	push   esi
c00097d5:	53                   	push   ebx
c00097d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00097da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097de:	89 c3                	mov    ebx,eax
c00097e0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097e4:	c1 e3 0c             	shl    ebx,0xc
c00097e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097eb:	01 f3                	add    ebx,esi
c00097ed:	85 c0                	test   eax,eax
c00097ef:	7e 1f                	jle    c0009810 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c00097f1:	56                   	push   esi
c00097f2:	81 c6 00 10 00 00    	add    esi,0x1000
c00097f8:	55                   	push   ebp
c00097f9:	e8 54 fe ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c00097fe:	5a                   	pop    edx
c00097ff:	59                   	pop    ecx
c0009800:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009802:	21 f9                	and    ecx,edi
c0009804:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009808:	09 d1                	or     ecx,edx
c000980a:	39 f3                	cmp    ebx,esi
c000980c:	89 08                	mov    DWORD PTR [eax],ecx
c000980e:	75 e1                	jne    c00097f1 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009810:	5b                   	pop    ebx
c0009811:	5e                   	pop    esi
c0009812:	5f                   	pop    edi
c0009813:	5d                   	pop    ebp
c0009814:	c3                   	ret    
c0009815:	90                   	nop

c0009816 <VAS::VAS()>:
c0009816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000981a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009825:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000982c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009830:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c0009835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009839:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000983d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009841:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009848:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000984f:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009854:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009859:	29 c2                	sub    edx,eax
c000985b:	89 d0                	mov    eax,edx
c000985d:	05 ff 0f 00 00       	add    eax,0xfff
c0009862:	c1 e8 0c             	shr    eax,0xc
c0009865:	89 c2                	mov    edx,eax
c0009867:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000986c:	6a 04                	push   0x4
c000986e:	6a ff                	push   0xffffffff
c0009870:	52                   	push   edx
c0009871:	50                   	push   eax
c0009872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009876:	e8 57 ff ff ff       	call   c00097d2 <VAS::reflagRange(unsigned long, int, int, int)>
c000987b:	83 c4 14             	add    esp,0x14
c000987e:	90                   	nop
c000987f:	c3                   	ret    

c0009880 <VAS::setToWriteCombining(unsigned long, int)>:
c0009880:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009885:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000988b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009892:	75 01                	jne    c0009895 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009894:	c3                   	ret    
c0009895:	68 80 00 00 00       	push   0x80
c000989a:	6a ff                	push   0xffffffff
c000989c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098a0:	50                   	push   eax
c00098a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00098a5:	52                   	push   edx
c00098a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00098aa:	51                   	push   ecx
c00098ab:	e8 22 ff ff ff       	call   c00097d2 <VAS::reflagRange(unsigned long, int, int, int)>
c00098b0:	83 c4 14             	add    esp,0x14
c00098b3:	c3                   	ret    

c00098b4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00098b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00098c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098c4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00098c7:	19 c0                	sbb    eax,eax
c00098c9:	83 ca 03             	or     edx,0x3
c00098cc:	83 e0 fc             	and    eax,0xfffffffc
c00098cf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098d6:	0f 20 d8             	mov    eax,cr3
c00098d9:	0f 22 d8             	mov    cr3,eax
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <VAS::~VAS()>:
c00098de:	83 ec 2c             	sub    esp,0x2c
c00098e1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098e9:	fa                   	cli    
c00098ea:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098ef:	40                   	inc    eax
c00098f0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00098fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098ff:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009905:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009909:	6a 01                	push   0x1
c000990b:	50                   	push   eax
c000990c:	e8 a3 ff ff ff       	call   c00098b4 <VAS::mapOtherVASIn(bool, VAS*)>
c0009911:	83 c4 0c             	add    esp,0xc
c0009914:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000991c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009924:	0f 8f d4 00 00 00    	jg     c00099fe <VAS::~VAS()+0x120>
c000992a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000992e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009931:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009935:	c1 e2 02             	shl    edx,0x2
c0009938:	01 d0                	add    eax,edx
c000993a:	8b 00                	mov    eax,DWORD PTR [eax]
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009944:	83 e0 01             	and    eax,0x1
c0009947:	0f 84 a8 00 00 00    	je     c00099f5 <VAS::~VAS()+0x117>
c000994d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009955:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000995d:	7f 72                	jg     c00099d1 <VAS::~VAS()+0xf3>
c000995f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009963:	c1 e0 0a             	shl    eax,0xa
c0009966:	89 c2                	mov    edx,eax
c0009968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000996c:	01 d0                	add    eax,edx
c000996e:	c1 e0 0c             	shl    eax,0xc
c0009971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009975:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000997a:	8b 00                	mov    eax,DWORD PTR [eax]
c000997c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000997f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009985:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009989:	6a 01                	push   0x1
c000998b:	50                   	push   eax
c000998c:	e8 95 fc ff ff       	call   c0009626 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009991:	83 c4 0c             	add    esp,0xc
c0009994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000999c:	8b 00                	mov    eax,DWORD PTR [eax]
c000999e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099a6:	25 01 04 00 00       	and    eax,0x401
c00099ab:	3d 01 04 00 00       	cmp    eax,0x401
c00099b0:	75 19                	jne    c00099cb <VAS::~VAS()+0xed>
c00099b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	50                   	push   eax
c00099bf:	e8 3e e1 ff ff       	call   c0007b02 <Phys::freePage(unsigned long)>
c00099c4:	83 c4 10             	add    esp,0x10
c00099c7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099cb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00099cf:	eb 84                	jmp    c0009955 <VAS::~VAS()+0x77>
c00099d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099d5:	25 00 04 00 00       	and    eax,0x400
c00099da:	74 19                	je     c00099f5 <VAS::~VAS()+0x117>
c00099dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099e5:	83 ec 0c             	sub    esp,0xc
c00099e8:	50                   	push   eax
c00099e9:	e8 14 e1 ff ff       	call   c0007b02 <Phys::freePage(unsigned long)>
c00099ee:	83 c4 10             	add    esp,0x10
c00099f1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099f5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099f9:	e9 1e ff ff ff       	jmp    c000991c <VAS::~VAS()+0x3e>
c00099fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009a05:	83 ec 0c             	sub    esp,0xc
c0009a08:	50                   	push   eax
c0009a09:	e8 63 fc ff ff       	call   c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a15:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a18:	83 ec 0c             	sub    esp,0xc
c0009a1b:	50                   	push   eax
c0009a1c:	e8 e1 e0 ff ff       	call   c0007b02 <Phys::freePage(unsigned long)>
c0009a21:	83 c4 10             	add    esp,0x10
c0009a24:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009a28:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a2d:	48                   	dec    eax
c0009a2e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0009a33:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a38:	85 c0                	test   eax,eax
c0009a3a:	75 01                	jne    c0009a3d <VAS::~VAS()+0x15f>
c0009a3c:	fb                   	sti    
c0009a3d:	90                   	nop
c0009a3e:	83 c4 2c             	add    esp,0x2c
c0009a41:	c3                   	ret    

c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a42:	55                   	push   ebp
c0009a43:	57                   	push   edi
c0009a44:	56                   	push   esi
c0009a45:	53                   	push   ebx
c0009a46:	83 ec 1c             	sub    esp,0x1c
c0009a49:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a4d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a51:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a57:	77 0b                	ja     c0009a64 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a59:	0f 20 d8             	mov    eax,cr3
c0009a5c:	0f 20 d8             	mov    eax,cr3
c0009a5f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a62:	75 49                	jne    c0009aad <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009a64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a68:	09 d8                	or     eax,ebx
c0009a6a:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a6f:	75 59                	jne    c0009aca <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009a71:	89 de                	mov    esi,ebx
c0009a73:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a76:	c1 ee 16             	shr    esi,0x16
c0009a79:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a80:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a84:	74 56                	je     c0009adc <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009a86:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a8c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a90:	c1 eb 0a             	shr    ebx,0xa
c0009a93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009a97:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a9d:	09 d0                	or     eax,edx
c0009a9f:	c1 e6 0c             	shl    esi,0xc
c0009aa2:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009aa5:	83 c4 1c             	add    esp,0x1c
c0009aa8:	5b                   	pop    ebx
c0009aa9:	5e                   	pop    esi
c0009aaa:	5f                   	pop    edi
c0009aab:	5d                   	pop    ebp
c0009aac:	c3                   	ret    
c0009aad:	83 ec 0c             	sub    esp,0xc
c0009ab0:	68 b8 f7 01 c0       	push   0xc001f7b8
c0009ab5:	e8 a9 0b 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ac1:	09 d8                	or     eax,ebx
c0009ac3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ac8:	74 a7                	je     c0009a71 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aca:	83 ec 0c             	sub    esp,0xc
c0009acd:	68 20 f8 01 c0       	push   0xc001f820
c0009ad2:	e8 40 69 00 00       	call   c0010417 <KePanic(char const*)>
c0009ad7:	83 c4 10             	add    esp,0x10
c0009ada:	eb 95                	jmp    c0009a71 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009adc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ae0:	e8 85 e0 ff ff       	call   c0007b6a <Phys::allocatePage()>
c0009ae5:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009aeb:	83 ec 0c             	sub    esp,0xc
c0009aee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009af2:	89 c5                	mov    ebp,eax
c0009af4:	6a 01                	push   0x1
c0009af6:	e8 77 f8 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c0009afb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009b02:	6a 01                	push   0x1
c0009b04:	50                   	push   eax
c0009b05:	55                   	push   ebp
c0009b06:	81 cd 07 04 00 00    	or     ebp,0x407
c0009b0c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009b10:	51                   	push   ecx
c0009b11:	e8 2a 02 00 00       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009b16:	83 c4 1c             	add    esp,0x1c
c0009b19:	68 00 10 00 00       	push   0x1000
c0009b1e:	6a 00                	push   0x0
c0009b20:	50                   	push   eax
c0009b21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b25:	e8 96 69 ff ff       	call   c00004c0 <memset>
c0009b2a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009b2e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b31:	e8 3b fb ff ff       	call   c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b3a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b3d:	83 c4 10             	add    esp,0x10
c0009b40:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b43:	e9 3e ff ff ff       	jmp    c0009a86 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b48 <VAS::allocatePages(int, int)>:
c0009b48:	55                   	push   ebp
c0009b49:	57                   	push   edi
c0009b4a:	56                   	push   esi
c0009b4b:	53                   	push   ebx
c0009b4c:	83 ec 1c             	sub    esp,0x1c
c0009b4f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b54:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b64:	83 e0 01             	and    eax,0x1
c0009b67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b6b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b6f:	0f 85 ca 00 00 00    	jne    c0009c3f <VAS::allocatePages(int, int)+0xf7>
c0009b75:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b7c:	85 c0                	test   eax,eax
c0009b7e:	0f 84 9f 00 00 00    	je     c0009c23 <VAS::allocatePages(int, int)+0xdb>
c0009b84:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b88:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b8c:	c1 e6 0c             	shl    esi,0xc
c0009b8f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b93:	01 de                	add    esi,ebx
c0009b95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b99:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b9f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009ba2:	85 c0                	test   eax,eax
c0009ba4:	7e 25                	jle    c0009bcb <VAS::allocatePages(int, int)+0x83>
c0009ba6:	e8 bf df ff ff       	call   c0007b6a <Phys::allocatePage()>
c0009bab:	55                   	push   ebp
c0009bac:	53                   	push   ebx
c0009bad:	50                   	push   eax
c0009bae:	57                   	push   edi
c0009baf:	e8 8e fe ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bb4:	83 c4 10             	add    esp,0x10
c0009bb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bbc:	74 03                	je     c0009bc1 <VAS::allocatePages(int, int)+0x79>
c0009bbe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bc1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc7:	39 de                	cmp    esi,ebx
c0009bc9:	75 db                	jne    c0009ba6 <VAS::allocatePages(int, int)+0x5e>
c0009bcb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bd0:	75 12                	jne    c0009be4 <VAS::allocatePages(int, int)+0x9c>
c0009bd2:	0f 20 d8             	mov    eax,cr3
c0009bd5:	0f 22 d8             	mov    cr3,eax
c0009bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bdc:	83 c4 1c             	add    esp,0x1c
c0009bdf:	5b                   	pop    ebx
c0009be0:	5e                   	pop    esi
c0009be1:	5f                   	pop    edi
c0009be2:	5d                   	pop    ebp
c0009be3:	c3                   	ret    
c0009be4:	c1 ee 0a             	shr    esi,0xa
c0009be7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009beb:	c1 eb 0a             	shr    ebx,0xa
c0009bee:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bf4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bfa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c00:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009c06:	39 c3                	cmp    ebx,eax
c0009c08:	77 ce                	ja     c0009bd8 <VAS::allocatePages(int, int)+0x90>
c0009c0a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c0d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c13:	39 d8                	cmp    eax,ebx
c0009c15:	73 f3                	jae    c0009c0a <VAS::allocatePages(int, int)+0xc2>
c0009c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	68 44 f8 01 c0       	push   0xc001f844
c0009c2b:	e8 e7 67 00 00       	call   c0010417 <KePanic(char const*)>
c0009c30:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c37:	83 c4 10             	add    esp,0x10
c0009c3a:	e9 45 ff ff ff       	jmp    c0009b84 <VAS::allocatePages(int, int)+0x3c>
c0009c3f:	83 ec 0c             	sub    esp,0xc
c0009c42:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009c46:	53                   	push   ebx
c0009c47:	e8 26 f7 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c0009c4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c50:	83 c4 10             	add    esp,0x10
c0009c53:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c58:	0f 87 9b 00 00 00    	ja     c0009cf9 <VAS::allocatePages(int, int)+0x1b1>
c0009c5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c62:	85 d2                	test   edx,edx
c0009c64:	7e 3c                	jle    c0009ca2 <VAS::allocatePages(int, int)+0x15a>
c0009c66:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c6a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c6e:	c1 e5 0c             	shl    ebp,0xc
c0009c71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c75:	81 ce 00 04 00 00    	or     esi,0x400
c0009c7b:	01 dd                	add    ebp,ebx
c0009c7d:	e8 e8 de ff ff       	call   c0007b6a <Phys::allocatePage()>
c0009c82:	56                   	push   esi
c0009c83:	53                   	push   ebx
c0009c84:	50                   	push   eax
c0009c85:	57                   	push   edi
c0009c86:	e8 b7 fd ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c8b:	83 c4 10             	add    esp,0x10
c0009c8e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c93:	74 03                	je     c0009c98 <VAS::allocatePages(int, int)+0x150>
c0009c95:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c98:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c9e:	39 dd                	cmp    ebp,ebx
c0009ca0:	75 db                	jne    c0009c7d <VAS::allocatePages(int, int)+0x135>
c0009ca2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ca7:	0f 84 25 ff ff ff    	je     c0009bd2 <VAS::allocatePages(int, int)+0x8a>
c0009cad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009cb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cb5:	c1 e0 0c             	shl    eax,0xc
c0009cb8:	89 d3                	mov    ebx,edx
c0009cba:	c1 eb 0a             	shr    ebx,0xa
c0009cbd:	01 d0                	add    eax,edx
c0009cbf:	c1 e8 0a             	shr    eax,0xa
c0009cc2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ccd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cd3:	2d 00 00 40 00       	sub    eax,0x400000
c0009cd8:	39 c3                	cmp    ebx,eax
c0009cda:	0f 87 f8 fe ff ff    	ja     c0009bd8 <VAS::allocatePages(int, int)+0x90>
c0009ce0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ce3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ce9:	39 d8                	cmp    eax,ebx
c0009ceb:	73 f3                	jae    c0009ce0 <VAS::allocatePages(int, int)+0x198>
c0009ced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cf1:	83 c4 1c             	add    esp,0x1c
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    
c0009cf9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cfe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d04:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009d0b:	0f 84 4d ff ff ff    	je     c0009c5e <VAS::allocatePages(int, int)+0x116>
c0009d11:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009d15:	80 cd 01             	or     ch,0x1
c0009d18:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0009d1c:	e9 3d ff ff ff       	jmp    c0009c5e <VAS::allocatePages(int, int)+0x116>
c0009d21:	90                   	nop

c0009d22 <VAS::setCPUSpecific(unsigned long)>:
c0009d22:	83 ec 0c             	sub    esp,0xc
c0009d25:	6a 05                	push   0x5
c0009d27:	68 00 00 40 c2       	push   0xc2400000
c0009d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d30:	50                   	push   eax
c0009d31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d35:	52                   	push   edx
c0009d36:	e8 07 fd ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d3b:	83 c4 1c             	add    esp,0x1c
c0009d3e:	c3                   	ret    
c0009d3f:	90                   	nop

c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d40:	55                   	push   ebp
c0009d41:	57                   	push   edi
c0009d42:	56                   	push   esi
c0009d43:	53                   	push   ebx
c0009d44:	83 ec 1c             	sub    esp,0x1c
c0009d47:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d4c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d50:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d5a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d5e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d64:	83 e0 01             	and    eax,0x1
c0009d67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d6f:	85 c0                	test   eax,eax
c0009d71:	7e 39                	jle    c0009dac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d77:	89 f3                	mov    ebx,esi
c0009d79:	c1 e0 0c             	shl    eax,0xc
c0009d7c:	01 f0                	add    eax,esi
c0009d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d82:	55                   	push   ebp
c0009d83:	53                   	push   ebx
c0009d84:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d88:	29 f0                	sub    eax,esi
c0009d8a:	01 d8                	add    eax,ebx
c0009d8c:	50                   	push   eax
c0009d8d:	57                   	push   edi
c0009d8e:	e8 af fc ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d93:	83 c4 10             	add    esp,0x10
c0009d96:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d9b:	74 03                	je     c0009da0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d9d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009da0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009da6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009daa:	75 d6                	jne    c0009d82 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009dac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009db1:	75 10                	jne    c0009dc3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009db3:	0f 20 d8             	mov    eax,cr3
c0009db6:	0f 22 d8             	mov    cr3,eax
c0009db9:	83 c4 1c             	add    esp,0x1c
c0009dbc:	89 f0                	mov    eax,esi
c0009dbe:	5b                   	pop    ebx
c0009dbf:	5e                   	pop    esi
c0009dc0:	5f                   	pop    edi
c0009dc1:	5d                   	pop    ebp
c0009dc2:	c3                   	ret    
c0009dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009dc7:	89 f3                	mov    ebx,esi
c0009dc9:	c1 e0 0c             	shl    eax,0xc
c0009dcc:	c1 eb 0a             	shr    ebx,0xa
c0009dcf:	01 f0                	add    eax,esi
c0009dd1:	c1 e8 0a             	shr    eax,0xa
c0009dd4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009dda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ddf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009de5:	2d 00 00 40 00       	sub    eax,0x400000
c0009dea:	39 c3                	cmp    ebx,eax
c0009dec:	77 cb                	ja     c0009db9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009dee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009df1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009df7:	39 d8                	cmp    eax,ebx
c0009df9:	73 f3                	jae    c0009dee <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dfb:	83 c4 1c             	add    esp,0x1c
c0009dfe:	89 f0                	mov    eax,esi
c0009e00:	5b                   	pop    ebx
c0009e01:	5e                   	pop    esi
c0009e02:	5f                   	pop    edi
c0009e03:	5d                   	pop    ebp
c0009e04:	c3                   	ret    
c0009e05:	90                   	nop

c0009e06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e11:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0009e15:	09 f0                	or     eax,esi
c0009e17:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e1f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009e24:	75 4c                	jne    c0009e72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c0009e26:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009e2a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e2d:	c1 eb 16             	shr    ebx,0x16
c0009e30:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009e37:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e3b:	74 4f                	je     c0009e8c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c0009e3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e41:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e45:	c1 e8 0a             	shr    eax,0xa
c0009e48:	80 fa 01             	cmp    dl,0x1
c0009e4b:	19 d2                	sbb    edx,edx
c0009e4d:	25 fc 0f 00 00       	and    eax,0xffc
c0009e52:	c1 e3 0c             	shl    ebx,0xc
c0009e55:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e5b:	01 d8                	add    eax,ebx
c0009e5d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009e61:	09 d9                	or     ecx,ebx
c0009e63:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e6a:	83 c4 1c             	add    esp,0x1c
c0009e6d:	5b                   	pop    ebx
c0009e6e:	5e                   	pop    esi
c0009e6f:	5f                   	pop    edi
c0009e70:	5d                   	pop    ebp
c0009e71:	c3                   	ret    
c0009e72:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e76:	83 ec 0c             	sub    esp,0xc
c0009e79:	68 70 f8 01 c0       	push   0xc001f870
c0009e7e:	e8 94 65 00 00       	call   c0010417 <KePanic(char const*)>
c0009e83:	83 c4 10             	add    esp,0x10
c0009e86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e8a:	eb 9a                	jmp    c0009e26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009e8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e90:	e8 d5 dc ff ff       	call   c0007b6a <Phys::allocatePage()>
c0009e95:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e9b:	83 ec 0c             	sub    esp,0xc
c0009e9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ea2:	89 c5                	mov    ebp,eax
c0009ea4:	6a 01                	push   0x1
c0009ea6:	e8 c7 f4 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c0009eab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009eb2:	6a 01                	push   0x1
c0009eb4:	50                   	push   eax
c0009eb5:	55                   	push   ebp
c0009eb6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ebc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ec0:	51                   	push   ecx
c0009ec1:	e8 7a fe ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ec6:	83 c4 1c             	add    esp,0x1c
c0009ec9:	68 00 10 00 00       	push   0x1000
c0009ece:	6a 00                	push   0x0
c0009ed0:	50                   	push   eax
c0009ed1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ed5:	e8 e6 65 ff ff       	call   c00004c0 <memset>
c0009eda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ede:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ee1:	e8 8b f7 ff ff       	call   c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ee6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009ee9:	83 c4 10             	add    esp,0x10
c0009eec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ef0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009ef3:	e9 45 ff ff ff       	jmp    c0009e3d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>

c0009ef8 <VAS::VAS(bool)>:
c0009ef8:	53                   	push   ebx
c0009ef9:	83 ec 28             	sub    esp,0x28
c0009efc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f00:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009f04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009f0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009f1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009f22:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009f25:	e8 40 dc ff ff       	call   c0007b6a <Phys::allocatePage()>
c0009f2a:	89 c2                	mov    edx,eax
c0009f2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009f33:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009f39:	83 ec 0c             	sub    esp,0xc
c0009f3c:	6a 01                	push   0x1
c0009f3e:	e8 2f f4 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c0009f43:	83 c4 10             	add    esp,0x10
c0009f46:	89 c2                	mov    edx,eax
c0009f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f4f:	83 ec 0c             	sub    esp,0xc
c0009f52:	6a 03                	push   0x3
c0009f54:	6a 01                	push   0x1
c0009f56:	52                   	push   edx
c0009f57:	50                   	push   eax
c0009f58:	53                   	push   ebx
c0009f59:	e8 e2 fd ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f5e:	83 c4 20             	add    esp,0x20
c0009f61:	89 c2                	mov    edx,eax
c0009f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f6a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f72:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f7a:	7f 1c                	jg     c0009f98 <VAS::VAS(bool)+0xa0>
c0009f7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f87:	c1 e2 02             	shl    edx,0x2
c0009f8a:	01 d0                	add    eax,edx
c0009f8c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f92:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f96:	eb da                	jmp    c0009f72 <VAS::VAS(bool)+0x7a>
c0009f98:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009fa0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009fa8:	7f 7a                	jg     c000a024 <VAS::VAS(bool)+0x12c>
c0009faa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fae:	2d 00 02 00 00       	sub    eax,0x200
c0009fb3:	c1 e0 0c             	shl    eax,0xc
c0009fb6:	83 c8 05             	or     eax,0x5
c0009fb9:	89 c2                	mov    edx,eax
c0009fbb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fcc:	83 e0 10             	and    eax,0x10
c0009fcf:	84 c0                	test   al,al
c0009fd1:	74 07                	je     c0009fda <VAS::VAS(bool)+0xe2>
c0009fd3:	b8 00 01 00 00       	mov    eax,0x100
c0009fd8:	eb 05                	jmp    c0009fdf <VAS::VAS(bool)+0xe7>
c0009fda:	b8 00 00 00 00       	mov    eax,0x0
c0009fdf:	09 d0                	or     eax,edx
c0009fe1:	89 c1                	mov    ecx,eax
c0009fe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fe7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fee:	c1 e2 02             	shl    edx,0x2
c0009ff1:	01 d0                	add    eax,edx
c0009ff3:	89 ca                	mov    edx,ecx
c0009ff5:	89 10                	mov    DWORD PTR [eax],edx
c0009ff7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ffb:	2d 40 03 00 00       	sub    eax,0x340
c000a000:	83 f8 7f             	cmp    eax,0x7f
c000a003:	77 16                	ja     c000a01b <VAS::VAS(bool)+0x123>
c000a005:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a009:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a00c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a010:	c1 e2 02             	shl    edx,0x2
c000a013:	01 d0                	add    eax,edx
c000a015:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a01b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a01f:	e9 7c ff ff ff       	jmp    c0009fa0 <VAS::VAS(bool)+0xa8>
c000a024:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a029:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a035:	83 e0 10             	and    eax,0x10
c000a038:	84 c0                	test   al,al
c000a03a:	74 07                	je     c000a043 <VAS::VAS(bool)+0x14b>
c000a03c:	b8 03 41 00 00       	mov    eax,0x4103
c000a041:	eb 05                	jmp    c000a048 <VAS::VAS(bool)+0x150>
c000a043:	b8 03 40 00 00       	mov    eax,0x4003
c000a048:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a04c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a04f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a055:	89 02                	mov    DWORD PTR [edx],eax
c000a057:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a05c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a062:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a068:	83 ec 08             	sub    esp,0x8
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a070:	e8 ad fc ff ff       	call   c0009d22 <VAS::setCPUSpecific(unsigned long)>
c000a075:	83 c4 10             	add    esp,0x10
c000a078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a07c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a07f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a084:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a08a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a090:	83 e0 10             	and    eax,0x10
c000a093:	84 c0                	test   al,al
c000a095:	74 07                	je     c000a09e <VAS::VAS(bool)+0x1a6>
c000a097:	b8 00 01 00 00       	mov    eax,0x100
c000a09c:	eb 05                	jmp    c000a0a3 <VAS::VAS(bool)+0x1ab>
c000a09e:	b8 00 00 00 00       	mov    eax,0x0
c000a0a3:	09 c2                	or     edx,eax
c000a0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ac:	05 fc 0f 00 00       	add    eax,0xffc
c000a0b1:	83 ca 03             	or     edx,0x3
c000a0b4:	89 10                	mov    DWORD PTR [eax],edx
c000a0b6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0c1:	83 ec 0c             	sub    esp,0xc
c000a0c4:	50                   	push   eax
c000a0c5:	e8 66 1c 00 00       	call   c000bd30 <Device::getName()>
c000a0ca:	83 c4 10             	add    esp,0x10
c000a0cd:	83 ec 08             	sub    esp,0x8
c000a0d0:	68 13 f9 01 c0       	push   0xc001f913
c000a0d5:	50                   	push   eax
c000a0d6:	e8 05 66 ff ff       	call   c00006e0 <strcmp>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	85 c0                	test   eax,eax
c000a0e0:	0f 94 c0             	sete   al
c000a0e3:	84 c0                	test   al,al
c000a0e5:	0f 84 87 00 00 00    	je     c000a172 <VAS::VAS(bool)+0x27a>
c000a0eb:	fa                   	cli    
c000a0ec:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0f1:	40                   	inc    eax
c000a0f2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0f7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a102:	05 7c 09 00 00       	add    eax,0x97c
c000a107:	83 ec 0c             	sub    esp,0xc
c000a10a:	50                   	push   eax
c000a10b:	e8 62 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a110:	83 c4 10             	add    esp,0x10
c000a113:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a118:	89 c3                	mov    ebx,eax
c000a11a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a11f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a125:	05 7c 09 00 00       	add    eax,0x97c
c000a12a:	83 ec 0c             	sub    esp,0xc
c000a12d:	50                   	push   eax
c000a12e:	e8 3f d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a133:	83 c4 10             	add    esp,0x10
c000a136:	83 ec 08             	sub    esp,0x8
c000a139:	50                   	push   eax
c000a13a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a13e:	e8 0f f5 ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c000a143:	83 c4 10             	add    esp,0x10
c000a146:	8b 00                	mov    eax,DWORD PTR [eax]
c000a148:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a14d:	6a 11                	push   0x11
c000a14f:	53                   	push   ebx
c000a150:	50                   	push   eax
c000a151:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a155:	e8 e8 f8 ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a15a:	83 c4 10             	add    esp,0x10
c000a15d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a162:	48                   	dec    eax
c000a163:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a168:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a16d:	85 c0                	test   eax,eax
c000a16f:	75 01                	jne    c000a172 <VAS::VAS(bool)+0x27a>
c000a171:	fb                   	sti    
c000a172:	90                   	nop
c000a173:	83 c4 28             	add    esp,0x28
c000a176:	5b                   	pop    ebx
c000a177:	c3                   	ret    

c000a178 <VAS::evict(unsigned long)>:
c000a178:	55                   	push   ebp
c000a179:	57                   	push   edi
c000a17a:	56                   	push   esi
c000a17b:	53                   	push   ebx
c000a17c:	83 ec 1c             	sub    esp,0x1c
c000a17f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a183:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a18b:	e8 2d f3 ff ff       	call   c00094bd <Virt::allocateSwapfilePage()>
c000a190:	89 c7                	mov    edi,eax
c000a192:	a1 cc 17 02 c0       	mov    eax,ds:0xc00217cc
c000a197:	85 c0                	test   eax,eax
c000a199:	7e 3e                	jle    c000a1d9 <VAS::evict(unsigned long)+0x61>
c000a19b:	89 ee                	mov    esi,ebp
c000a19d:	31 db                	xor    ebx,ebx
c000a19f:	83 ec 0c             	sub    esp,0xc
c000a1a2:	57                   	push   edi
c000a1a3:	e8 ff f2 ff ff       	call   c00094a7 <Virt::swapIDToSector(unsigned long)>
c000a1a8:	89 34 24             	mov    DWORD PTR [esp],esi
c000a1ab:	31 d2                	xor    edx,edx
c000a1ad:	6a 01                	push   0x1
c000a1af:	01 d8                	add    eax,ebx
c000a1b1:	52                   	push   edx
c000a1b2:	43                   	inc    ebx
c000a1b3:	50                   	push   eax
c000a1b4:	81 c6 00 02 00 00    	add    esi,0x200
c000a1ba:	0f be 05 d8 17 02 c0 	movsx  eax,BYTE PTR ds:0xc00217d8
c000a1c1:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c000a1c8:	50                   	push   eax
c000a1c9:	e8 46 2c 00 00       	call   c000ce14 <LogicalDisk::write(unsigned long long, int, void*)>
c000a1ce:	83 c4 20             	add    esp,0x20
c000a1d1:	39 1d cc 17 02 c0    	cmp    DWORD PTR ds:0xc00217cc,ebx
c000a1d7:	7f c6                	jg     c000a19f <VAS::evict(unsigned long)+0x27>
c000a1d9:	c1 e7 0b             	shl    edi,0xb
c000a1dc:	50                   	push   eax
c000a1dd:	50                   	push   eax
c000a1de:	55                   	push   ebp
c000a1df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1e3:	52                   	push   edx
c000a1e4:	e8 69 f4 ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c000a1e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1eb:	89 d1                	mov    ecx,edx
c000a1ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1f3:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1f9:	09 cf                	or     edi,ecx
c000a1fb:	89 38                	mov    DWORD PTR [eax],edi
c000a1fd:	89 14 24             	mov    DWORD PTR [esp],edx
c000a200:	8b 0d a8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fa8
c000a206:	41                   	inc    ecx
c000a207:	89 0d a8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa8,ecx
c000a20d:	e8 f0 d8 ff ff       	call   c0007b02 <Phys::freePage(unsigned long)>
c000a212:	0f 20 d8             	mov    eax,cr3
c000a215:	0f 22 d8             	mov    cr3,eax
c000a218:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a21d:	c7 44 24 40 21 f9 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f921
c000a225:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a229:	8d 50 01             	lea    edx,[eax+0x1]
c000a22c:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a232:	83 c4 2c             	add    esp,0x2c
c000a235:	5b                   	pop    ebx
c000a236:	5e                   	pop    esi
c000a237:	5f                   	pop    edi
c000a238:	5d                   	pop    ebp
c000a239:	e9 25 04 00 00       	jmp    c000a663 <Dbg::kprintf(char const*, ...)>

c000a23e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a23e:	55                   	push   ebp
c000a23f:	57                   	push   edi
c000a240:	56                   	push   esi
c000a241:	53                   	push   ebx
c000a242:	83 ec 24             	sub    esp,0x24
c000a245:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a249:	53                   	push   ebx
c000a24a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a250:	68 32 f9 01 c0       	push   0xc001f932
c000a255:	e8 09 04 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a25a:	5d                   	pop    ebp
c000a25b:	58                   	pop    eax
c000a25c:	53                   	push   ebx
c000a25d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a261:	50                   	push   eax
c000a262:	e8 eb f3 ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c000a267:	83 c4 10             	add    esp,0x10
c000a26a:	89 c7                	mov    edi,eax
c000a26c:	85 c0                	test   eax,eax
c000a26e:	0f 95 c2             	setne  dl
c000a271:	85 db                	test   ebx,ebx
c000a273:	0f 95 c0             	setne  al
c000a276:	20 c2                	and    dl,al
c000a278:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000a27c:	75 0c                	jne    c000a28a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a27e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000a282:	83 c4 1c             	add    esp,0x1c
c000a285:	5b                   	pop    ebx
c000a286:	5e                   	pop    esi
c000a287:	5f                   	pop    edi
c000a288:	5d                   	pop    ebp
c000a289:	c3                   	ret    
c000a28a:	8b 07                	mov    eax,DWORD PTR [edi]
c000a28c:	a8 01                	test   al,0x1
c000a28e:	74 11                	je     c000a2a1 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c000a290:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000a295:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000a299:	83 c4 1c             	add    esp,0x1c
c000a29c:	5b                   	pop    ebx
c000a29d:	5e                   	pop    esi
c000a29e:	5f                   	pop    edi
c000a29f:	5d                   	pop    ebp
c000a2a0:	c3                   	ret    
c000a2a1:	c1 e8 0b             	shr    eax,0xb
c000a2a4:	89 c6                	mov    esi,eax
c000a2a6:	e8 bf d8 ff ff       	call   c0007b6a <Phys::allocatePage()>
c000a2ab:	8b 17                	mov    edx,DWORD PTR [edi]
c000a2ad:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a2b3:	09 c2                	or     edx,eax
c000a2b5:	81 ca 01 08 00 00    	or     edx,0x801
c000a2bb:	89 17                	mov    DWORD PTR [edi],edx
c000a2bd:	8b 3d cc 17 02 c0    	mov    edi,DWORD PTR ds:0xc00217cc
c000a2c3:	85 ff                	test   edi,edi
c000a2c5:	7e 3e                	jle    c000a305 <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a2c7:	89 dd                	mov    ebp,ebx
c000a2c9:	31 ff                	xor    edi,edi
c000a2cb:	83 ec 0c             	sub    esp,0xc
c000a2ce:	56                   	push   esi
c000a2cf:	e8 d3 f1 ff ff       	call   c00094a7 <Virt::swapIDToSector(unsigned long)>
c000a2d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2d7:	31 d2                	xor    edx,edx
c000a2d9:	6a 01                	push   0x1
c000a2db:	01 f8                	add    eax,edi
c000a2dd:	52                   	push   edx
c000a2de:	47                   	inc    edi
c000a2df:	50                   	push   eax
c000a2e0:	81 c5 00 02 00 00    	add    ebp,0x200
c000a2e6:	0f be 05 d8 17 02 c0 	movsx  eax,BYTE PTR ds:0xc00217d8
c000a2ed:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a2f4:	51                   	push   ecx
c000a2f5:	e8 ae 2a 00 00       	call   c000cda8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a2fa:	83 c4 20             	add    esp,0x20
c000a2fd:	39 3d cc 17 02 c0    	cmp    DWORD PTR ds:0xc00217cc,edi
c000a303:	7f c6                	jg     c000a2cb <VAS::tryLoadBackOffDisk(unsigned long)+0x8d>
c000a305:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a30a:	52                   	push   edx
c000a30b:	48                   	dec    eax
c000a30c:	50                   	push   eax
c000a30d:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a312:	53                   	push   ebx
c000a313:	68 45 f9 01 c0       	push   0xc001f945
c000a318:	e8 46 03 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a31d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a320:	e8 5e f1 ff ff       	call   c0009483 <Virt::freeSwapfilePage(unsigned long)>
c000a325:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a32a:	83 c4 10             	add    esp,0x10
c000a32d:	48                   	dec    eax
c000a32e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a333:	85 c0                	test   eax,eax
c000a335:	75 01                	jne    c000a338 <VAS::tryLoadBackOffDisk(unsigned long)+0xfa>
c000a337:	fb                   	sti    
c000a338:	0f 20 d8             	mov    eax,cr3
c000a33b:	0f 22 d8             	mov    cr3,eax
c000a33e:	e9 3b ff ff ff       	jmp    c000a27e <VAS::tryLoadBackOffDisk(unsigned long)+0x40>
c000a343:	90                   	nop

c000a344 <VAS::scanForEviction()>:
c000a344:	57                   	push   edi
c000a345:	31 ff                	xor    edi,edi
c000a347:	56                   	push   esi
c000a348:	53                   	push   ebx
c000a349:	83 ec 10             	sub    esp,0x10
c000a34c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a350:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a353:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a359:	75 0e                	jne    c000a369 <VAS::scanForEviction()+0x25>
c000a35b:	89 da                	mov    edx,ebx
c000a35d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a360:	c1 ea 16             	shr    edx,0x16
c000a363:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a367:	74 4e                	je     c000a3b7 <VAS::scanForEviction()+0x73>
c000a369:	53                   	push   ebx
c000a36a:	56                   	push   esi
c000a36b:	e8 e2 f2 ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c000a370:	5a                   	pop    edx
c000a371:	8b 10                	mov    edx,DWORD PTR [eax]
c000a373:	59                   	pop    ecx
c000a374:	89 d1                	mov    ecx,edx
c000a376:	81 e1 01 08 00 00    	and    ecx,0x801
c000a37c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a382:	74 3e                	je     c000a3c2 <VAS::scanForEviction()+0x7e>
c000a384:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a38a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a390:	76 2b                	jbe    c000a3bd <VAS::scanForEviction()+0x79>
c000a392:	47                   	inc    edi
c000a393:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a39a:	83 ff 03             	cmp    edi,0x3
c000a39d:	74 32                	je     c000a3d1 <VAS::scanForEviction()+0x8d>
c000a39f:	31 db                	xor    ebx,ebx
c000a3a1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a3a7:	75 c0                	jne    c000a369 <VAS::scanForEviction()+0x25>
c000a3a9:	89 da                	mov    edx,ebx
c000a3ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a3ae:	c1 ea 16             	shr    edx,0x16
c000a3b1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a3b5:	75 b2                	jne    c000a369 <VAS::scanForEviction()+0x25>
c000a3b7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a3bd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a3c0:	eb 91                	jmp    c000a353 <VAS::scanForEviction()+0xf>
c000a3c2:	f6 c2 20             	test   dl,0x20
c000a3c5:	74 13                	je     c000a3da <VAS::scanForEviction()+0x96>
c000a3c7:	83 e2 df             	and    edx,0xffffffdf
c000a3ca:	89 10                	mov    DWORD PTR [eax],edx
c000a3cc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a3cf:	eb b3                	jmp    c000a384 <VAS::scanForEviction()+0x40>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	31 c0                	xor    eax,eax
c000a3d6:	5b                   	pop    ebx
c000a3d7:	5e                   	pop    esi
c000a3d8:	5f                   	pop    edi
c000a3d9:	c3                   	ret    
c000a3da:	89 d0                	mov    eax,edx
c000a3dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3e5:	50                   	push   eax
c000a3e6:	50                   	push   eax
c000a3e7:	53                   	push   ebx
c000a3e8:	68 5a f9 01 c0       	push   0xc001f95a
c000a3ed:	e8 71 02 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a3f2:	5a                   	pop    edx
c000a3f3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a3f6:	59                   	pop    ecx
c000a3f7:	53                   	push   ebx
c000a3f8:	56                   	push   esi
c000a3f9:	e8 7a fd ff ff       	call   c000a178 <VAS::evict(unsigned long)>
c000a3fe:	5f                   	pop    edi
c000a3ff:	58                   	pop    eax
c000a400:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a403:	50                   	push   eax
c000a404:	68 6e f9 01 c0       	push   0xc001f96e
c000a409:	e8 55 02 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a40e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	05 00 10 00 00       	add    eax,0x1000
c000a419:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a41c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a420:	83 c4 10             	add    esp,0x10
c000a423:	5b                   	pop    ebx
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	c3                   	ret    

c000a427 <mapVASFirstTime>:
c000a427:	55                   	push   ebp
c000a428:	57                   	push   edi
c000a429:	56                   	push   esi
c000a42a:	53                   	push   ebx
c000a42b:	83 ec 0c             	sub    esp,0xc
c000a42e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a433:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a436:	4a                   	dec    edx
c000a437:	0f 84 c8 00 00 00    	je     c000a505 <mapVASFirstTime+0xde>
c000a43d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a440:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a443:	c1 e5 15             	shl    ebp,0x15
c000a446:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a44b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a450:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a456:	29 eb                	sub    ebx,ebp
c000a458:	29 ef                	sub    edi,ebp
c000a45a:	e8 0b d7 ff ff       	call   c0007b6a <Phys::allocatePage()>
c000a45f:	83 ec 0c             	sub    esp,0xc
c000a462:	68 03 04 00 00       	push   0x403
c000a467:	6a 01                	push   0x1
c000a469:	53                   	push   ebx
c000a46a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a470:	50                   	push   eax
c000a471:	56                   	push   esi
c000a472:	e8 c9 f8 ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a477:	83 c4 20             	add    esp,0x20
c000a47a:	39 fb                	cmp    ebx,edi
c000a47c:	75 dc                	jne    c000a45a <mapVASFirstTime+0x33>
c000a47e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a483:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a488:	29 eb                	sub    ebx,ebp
c000a48a:	29 ef                	sub    edi,ebp
c000a48c:	e8 d9 d6 ff ff       	call   c0007b6a <Phys::allocatePage()>
c000a491:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a495:	19 d2                	sbb    edx,edx
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	83 e2 04             	and    edx,0x4
c000a49d:	81 c2 03 04 00 00    	add    edx,0x403
c000a4a3:	52                   	push   edx
c000a4a4:	6a 01                	push   0x1
c000a4a6:	53                   	push   ebx
c000a4a7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a4ad:	50                   	push   eax
c000a4ae:	56                   	push   esi
c000a4af:	e8 8c f8 ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4b4:	83 c4 20             	add    esp,0x20
c000a4b7:	39 df                	cmp    edi,ebx
c000a4b9:	75 d1                	jne    c000a48c <mapVASFirstTime+0x65>
c000a4bb:	83 ec 0c             	sub    esp,0xc
c000a4be:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a4c3:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a4c9:	c1 eb 0c             	shr    ebx,0xc
c000a4cc:	6a 04                	push   0x4
c000a4ce:	6a ff                	push   0xffffffff
c000a4d0:	53                   	push   ebx
c000a4d1:	68 00 20 02 c0       	push   0xc0022000
c000a4d6:	56                   	push   esi
c000a4d7:	e8 f6 f2 ff ff       	call   c00097d2 <VAS::reflagRange(unsigned long, int, int, int)>
c000a4dc:	83 c4 14             	add    esp,0x14
c000a4df:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a4e4:	6a 04                	push   0x4
c000a4e6:	6a ff                	push   0xffffffff
c000a4e8:	53                   	push   ebx
c000a4e9:	68 00 20 02 c0       	push   0xc0022000
c000a4ee:	50                   	push   eax
c000a4ef:	e8 de f2 ff ff       	call   c00097d2 <VAS::reflagRange(unsigned long, int, int, int)>
c000a4f4:	0f 20 d8             	mov    eax,cr3
c000a4f7:	0f 22 d8             	mov    cr3,eax
c000a4fa:	83 c4 20             	add    esp,0x20
c000a4fd:	83 c4 0c             	add    esp,0xc
c000a500:	5b                   	pop    ebx
c000a501:	5e                   	pop    esi
c000a502:	5f                   	pop    edi
c000a503:	5d                   	pop    ebp
c000a504:	c3                   	ret    
c000a505:	83 ec 0c             	sub    esp,0xc
c000a508:	68 81 f9 01 c0       	push   0xc001f981
c000a50d:	e8 51 01 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	83 c4 0c             	add    esp,0xc
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	5f                   	pop    edi
c000a51b:	5d                   	pop    ebp
c000a51c:	c3                   	ret    

c000a51d <__cxa_atexit>:
c000a51d:	31 c0                	xor    eax,eax
c000a51f:	c3                   	ret    

c000a520 <__cxa_finalize>:
c000a520:	c3                   	ret    

c000a521 <__stack_chk_fail>:
c000a521:	55                   	push   ebp
c000a522:	89 e5                	mov    ebp,esp
c000a524:	83 ec 10             	sub    esp,0x10
c000a527:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a52a:	68 9a f9 01 c0       	push   0xc001f99a
c000a52f:	e8 2f 01 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a534:	58                   	pop    eax
c000a535:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a538:	5a                   	pop    edx
c000a539:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a53c:	68 9a f9 01 c0       	push   0xc001f99a
c000a541:	e8 1d 01 00 00       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000a546:	c7 04 24 a2 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a2
c000a54d:	e8 c5 5e 00 00       	call   c0010417 <KePanic(char const*)>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	c9                   	leave  
c000a556:	c3                   	ret    

c000a557 <__cxa_pure_virtual>:
c000a557:	83 ec 18             	sub    esp,0x18
c000a55a:	68 ba f9 01 c0       	push   0xc001f9ba
c000a55f:	e8 b3 5e 00 00       	call   c0010417 <KePanic(char const*)>
c000a564:	83 c4 1c             	add    esp,0x1c
c000a567:	c3                   	ret    

c000a568 <operator new[](unsigned long)>:
c000a568:	e9 06 d3 ff ff       	jmp    c0007873 <malloc>

c000a56d <operator delete(void*, unsigned long)>:
c000a56d:	e9 21 d3 ff ff       	jmp    c0007893 <rfree>

c000a572 <operator delete[](void*)>:
c000a572:	e9 1c d3 ff ff       	jmp    c0007893 <rfree>

c000a577 <operator delete[](void*, unsigned long)>:
c000a577:	e9 17 d3 ff ff       	jmp    c0007893 <rfree>

c000a57c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a57c:	57                   	push   edi
c000a57d:	56                   	push   esi
c000a57e:	53                   	push   ebx
c000a57f:	83 ec 20             	sub    esp,0x20
c000a582:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a586:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a58a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a592:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a59a:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a5a2:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a5aa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a5af:	89 f7                	mov    edi,esi
c000a5b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a5b5:	eb 02                	jmp    c000a5b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3d>
c000a5b7:	89 c7                	mov    edi,eax
c000a5b9:	31 d2                	xor    edx,edx
c000a5bb:	89 f8                	mov    eax,edi
c000a5bd:	43                   	inc    ebx
c000a5be:	f7 f1                	div    ecx
c000a5c0:	39 cf                	cmp    edi,ecx
c000a5c2:	73 f3                	jae    c000a5b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3b>
c000a5c4:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a5c7:	eb 02                	jmp    c000a5cb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4f>
c000a5c9:	89 c6                	mov    esi,eax
c000a5cb:	31 d2                	xor    edx,edx
c000a5cd:	89 f0                	mov    eax,esi
c000a5cf:	f7 f1                	div    ecx
c000a5d1:	4b                   	dec    ebx
c000a5d2:	39 ce                	cmp    esi,ecx
c000a5d4:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a5d8:	88 13                	mov    BYTE PTR [ebx],dl
c000a5da:	73 ed                	jae    c000a5c9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4d>
c000a5dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a5e0:	83 c4 20             	add    esp,0x20
c000a5e3:	5b                   	pop    ebx
c000a5e4:	5e                   	pop    esi
c000a5e5:	5f                   	pop    edi
c000a5e6:	c3                   	ret    

c000a5e7 <Dbg::logc(char)>:
c000a5e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5eb:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a5f2:	75 12                	jne    c000a606 <Dbg::logc(char)+0x1f>
c000a5f4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5f9:	ec                   	in     al,dx
c000a5fa:	a8 20                	test   al,0x20
c000a5fc:	74 fb                	je     c000a5f9 <Dbg::logc(char)+0x12>
c000a5fe:	ba f8 03 00 00       	mov    edx,0x3f8
c000a603:	88 c8                	mov    al,cl
c000a605:	ee                   	out    dx,al
c000a606:	c3                   	ret    

c000a607 <Dbg::logs(char*)>:
c000a607:	53                   	push   ebx
c000a608:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a60c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a60f:	84 c0                	test   al,al
c000a611:	74 0f                	je     c000a622 <Dbg::logs(char*)+0x1b>
c000a613:	43                   	inc    ebx
c000a614:	50                   	push   eax
c000a615:	e8 cd ff ff ff       	call   c000a5e7 <Dbg::logc(char)>
c000a61a:	5a                   	pop    edx
c000a61b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a61e:	84 c0                	test   al,al
c000a620:	75 f1                	jne    c000a613 <Dbg::logs(char*)+0xc>
c000a622:	5b                   	pop    ebx
c000a623:	c3                   	ret    

c000a624 <Dbg::logWriteInt(unsigned int)>:
c000a624:	83 ec 10             	sub    esp,0x10
c000a627:	6a 0a                	push   0xa
c000a629:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a62d:	50                   	push   eax
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	50                   	push   eax
c000a633:	e8 44 ff ff ff       	call   c000a57c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a638:	50                   	push   eax
c000a639:	e8 c9 ff ff ff       	call   c000a607 <Dbg::logs(char*)>
c000a63e:	83 c4 20             	add    esp,0x20
c000a641:	c3                   	ret    

c000a642 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a642:	83 ec 10             	sub    esp,0x10
c000a645:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a649:	50                   	push   eax
c000a64a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a64e:	50                   	push   eax
c000a64f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a653:	52                   	push   edx
c000a654:	e8 23 ff ff ff       	call   c000a57c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a659:	50                   	push   eax
c000a65a:	e8 a8 ff ff ff       	call   c000a607 <Dbg::logs(char*)>
c000a65f:	83 c4 20             	add    esp,0x20
c000a662:	c3                   	ret    

c000a663 <Dbg::kprintf(char const*, ...)>:
c000a663:	55                   	push   ebp
c000a664:	57                   	push   edi
c000a665:	56                   	push   esi
c000a666:	53                   	push   ebx
c000a667:	83 ec 0c             	sub    esp,0xc
c000a66a:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a671:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a675:	74 08                	je     c000a67f <Dbg::kprintf(char const*, ...)+0x1c>
c000a677:	83 c4 0c             	add    esp,0xc
c000a67a:	5b                   	pop    ebx
c000a67b:	5e                   	pop    esi
c000a67c:	5f                   	pop    edi
c000a67d:	5d                   	pop    ebp
c000a67e:	c3                   	ret    
c000a67f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a683:	31 ff                	xor    edi,edi
c000a685:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a689:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a68c:	84 c0                	test   al,al
c000a68e:	74 e7                	je     c000a677 <Dbg::kprintf(char const*, ...)+0x14>
c000a690:	8d 77 01             	lea    esi,[edi+0x1]
c000a693:	3c 25                	cmp    al,0x25
c000a695:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a698:	75 47                	jne    c000a6e1 <Dbg::kprintf(char const*, ...)+0x7e>
c000a69a:	83 c7 02             	add    edi,0x2
c000a69d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a6a0:	83 e8 25             	sub    eax,0x25
c000a6a3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a6a6:	3c 53                	cmp    al,0x53
c000a6a8:	0f 87 d2 00 00 00    	ja     c000a780 <Dbg::kprintf(char const*, ...)+0x11d>
c000a6ae:	25 ff 00 00 00       	and    eax,0xff
c000a6b3:	ff 24 85 d0 f9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0630]
c000a6ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6be:	89 c8                	mov    eax,ecx
c000a6c0:	83 c1 04             	add    ecx,0x4
c000a6c3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6c7:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a6c9:	55                   	push   ebp
c000a6ca:	e8 55 ff ff ff       	call   c000a624 <Dbg::logWriteInt(unsigned int)>
c000a6cf:	58                   	pop    eax
c000a6d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a6d3:	84 c0                	test   al,al
c000a6d5:	74 a0                	je     c000a677 <Dbg::kprintf(char const*, ...)+0x14>
c000a6d7:	8d 77 01             	lea    esi,[edi+0x1]
c000a6da:	3c 25                	cmp    al,0x25
c000a6dc:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a6df:	74 b9                	je     c000a69a <Dbg::kprintf(char const*, ...)+0x37>
c000a6e1:	50                   	push   eax
c000a6e2:	89 f7                	mov    edi,esi
c000a6e4:	e8 fe fe ff ff       	call   c000a5e7 <Dbg::logc(char)>
c000a6e9:	89 ee                	mov    esi,ebp
c000a6eb:	58                   	pop    eax
c000a6ec:	eb e2                	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6f2:	89 c8                	mov    eax,ecx
c000a6f4:	83 c1 04             	add    ecx,0x4
c000a6f7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6fd:	50                   	push   eax
c000a6fe:	e8 04 ff ff ff       	call   c000a607 <Dbg::logs(char*)>
c000a703:	58                   	pop    eax
c000a704:	eb ca                	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a706:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a70a:	89 d0                	mov    eax,edx
c000a70c:	83 c2 04             	add    edx,0x4
c000a70f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a713:	8b 00                	mov    eax,DWORD PTR [eax]
c000a715:	50                   	push   eax
c000a716:	e8 09 ff ff ff       	call   c000a624 <Dbg::logWriteInt(unsigned int)>
c000a71b:	58                   	pop    eax
c000a71c:	eb b2                	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a71e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a722:	89 d0                	mov    eax,edx
c000a724:	83 c2 04             	add    edx,0x4
c000a727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a72b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a72e:	50                   	push   eax
c000a72f:	e8 b3 fe ff ff       	call   c000a5e7 <Dbg::logc(char)>
c000a734:	58                   	pop    eax
c000a735:	eb 99                	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a737:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a73b:	89 c8                	mov    eax,ecx
c000a73d:	83 c1 04             	add    ecx,0x4
c000a740:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a744:	6a 10                	push   0x10
c000a746:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a748:	51                   	push   ecx
c000a749:	e8 f4 fe ff ff       	call   c000a642 <Dbg::logWriteIntBase(unsigned int, int)>
c000a74e:	5d                   	pop    ebp
c000a74f:	58                   	pop    eax
c000a750:	e9 7b ff ff ff       	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a755:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a759:	89 d0                	mov    eax,edx
c000a75b:	83 c2 08             	add    edx,0x8
c000a75e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a762:	6a 10                	push   0x10
c000a764:	8b 00                	mov    eax,DWORD PTR [eax]
c000a766:	50                   	push   eax
c000a767:	e8 d6 fe ff ff       	call   c000a642 <Dbg::logWriteIntBase(unsigned int, int)>
c000a76c:	58                   	pop    eax
c000a76d:	5a                   	pop    edx
c000a76e:	e9 5d ff ff ff       	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a773:	6a 25                	push   0x25
c000a775:	e8 6d fe ff ff       	call   c000a5e7 <Dbg::logc(char)>
c000a77a:	5a                   	pop    edx
c000a77b:	e9 50 ff ff ff       	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a780:	6a 25                	push   0x25
c000a782:	e8 60 fe ff ff       	call   c000a5e7 <Dbg::logc(char)>
c000a787:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a78b:	50                   	push   eax
c000a78c:	e8 56 fe ff ff       	call   c000a5e7 <Dbg::logc(char)>
c000a791:	5a                   	pop    edx
c000a792:	59                   	pop    ecx
c000a793:	e9 38 ff ff ff       	jmp    c000a6d0 <Dbg::kprintf(char const*, ...)+0x6d>

c000a798 <File::read(unsigned long long, void*, int*)>:
c000a798:	53                   	push   ebx
c000a799:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a79d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a8:	3c 19                	cmp    al,0x19
c000a7aa:	77 35                	ja     c000a7e1 <File::read(unsigned long long, void*, int*)+0x49>
c000a7ac:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7b3:	85 c0                	test   eax,eax
c000a7b5:	74 2a                	je     c000a7e1 <File::read(unsigned long long, void*, int*)+0x49>
c000a7b7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7bd:	85 c0                	test   eax,eax
c000a7bf:	74 20                	je     c000a7e1 <File::read(unsigned long long, void*, int*)+0x49>
c000a7c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c5:	74 21                	je     c000a7e8 <File::read(unsigned long long, void*, int*)+0x50>
c000a7c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7cd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7db:	5b                   	pop    ebx
c000a7dc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a7df:	ff e0                	jmp    eax
c000a7e1:	b8 0b 00 00 00       	mov    eax,0xb
c000a7e6:	eb 05                	jmp    c000a7ed <File::read(unsigned long long, void*, int*)+0x55>
c000a7e8:	b8 05 00 00 00       	mov    eax,0x5
c000a7ed:	5b                   	pop    ebx
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <File::write(unsigned long long, void*, int*)>:
c000a7f0:	53                   	push   ebx
c000a7f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a800:	3c 19                	cmp    al,0x19
c000a802:	77 35                	ja     c000a839 <File::write(unsigned long long, void*, int*)+0x49>
c000a804:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a80b:	85 c0                	test   eax,eax
c000a80d:	74 2a                	je     c000a839 <File::write(unsigned long long, void*, int*)+0x49>
c000a80f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a815:	85 c0                	test   eax,eax
c000a817:	74 20                	je     c000a839 <File::write(unsigned long long, void*, int*)+0x49>
c000a819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a81d:	74 21                	je     c000a840 <File::write(unsigned long long, void*, int*)+0x50>
c000a81f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a821:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a825:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a82b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a82f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a833:	5b                   	pop    ebx
c000a834:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a837:	ff e0                	jmp    eax
c000a839:	b8 0b 00 00 00       	mov    eax,0xb
c000a83e:	eb 05                	jmp    c000a845 <File::write(unsigned long long, void*, int*)+0x55>
c000a840:	b8 05 00 00 00       	mov    eax,0x5
c000a845:	5b                   	pop    ebx
c000a846:	c3                   	ret    
c000a847:	90                   	nop

c000a848 <Directory::read(unsigned long long, void*, int*)>:
c000a848:	53                   	push   ebx
c000a849:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a84d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a851:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a858:	3c 19                	cmp    al,0x19
c000a85a:	77 35                	ja     c000a891 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a85c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a863:	85 c0                	test   eax,eax
c000a865:	74 2a                	je     c000a891 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a867:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a86d:	85 c0                	test   eax,eax
c000a86f:	74 20                	je     c000a891 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a871:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a875:	74 21                	je     c000a898 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a877:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a879:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a87d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a887:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a88b:	5b                   	pop    ebx
c000a88c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a88f:	ff e0                	jmp    eax
c000a891:	b8 0b 00 00 00       	mov    eax,0xb
c000a896:	eb 05                	jmp    c000a89d <Directory::read(unsigned long long, void*, int*)+0x55>
c000a898:	b8 05 00 00 00       	mov    eax,0x5
c000a89d:	5b                   	pop    ebx
c000a89e:	c3                   	ret    
c000a89f:	90                   	nop

c000a8a0 <Directory::write(unsigned long long, void*, int*)>:
c000a8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8a4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a8ab:	b8 0b 00 00 00       	mov    eax,0xb
c000a8b0:	80 fa 19             	cmp    dl,0x19
c000a8b3:	77 18                	ja     c000a8cd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8b5:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a8bc:	85 d2                	test   edx,edx
c000a8be:	74 0d                	je     c000a8cd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8c0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a8c7:	19 c0                	sbb    eax,eax
c000a8c9:	83 e0 0a             	and    eax,0xa
c000a8cc:	40                   	inc    eax
c000a8cd:	c3                   	ret    

c000a8ce <File::isAtty()>:
c000a8ce:	31 c0                	xor    eax,eax
c000a8d0:	c3                   	ret    
c000a8d1:	90                   	nop

c000a8d2 <Directory::isAtty()>:
c000a8d2:	31 c0                	xor    eax,eax
c000a8d4:	c3                   	ret    
c000a8d5:	90                   	nop

c000a8d6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a8d6:	b8 0a 00 00 00       	mov    eax,0xa
c000a8db:	c3                   	ret    

c000a8dc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a8dc:	b8 0a 00 00 00       	mov    eax,0xa
c000a8e1:	c3                   	ret    

c000a8e2 <Filesystem::allocateSwapfile(char const*, int)>:
c000a8e2:	31 c0                	xor    eax,eax
c000a8e4:	31 d2                	xor    edx,edx
c000a8e6:	c3                   	ret    
c000a8e7:	90                   	nop

c000a8e8 <File::~File()>:
c000a8e8:	83 ec 0c             	sub    esp,0xc
c000a8eb:	ba 90 fb 01 c0       	mov    edx,0xc001fb90
c000a8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f4:	89 10                	mov    DWORD PTR [eax],edx
c000a8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fa:	83 ec 0c             	sub    esp,0xc
c000a8fd:	50                   	push   eax
c000a8fe:	e8 09 e8 ff ff       	call   c000910c <UnixFile::~UnixFile()>
c000a903:	83 c4 10             	add    esp,0x10
c000a906:	90                   	nop
c000a907:	83 c4 0c             	add    esp,0xc
c000a90a:	c3                   	ret    
c000a90b:	90                   	nop

c000a90c <File::~File()>:
c000a90c:	83 ec 0c             	sub    esp,0xc
c000a90f:	83 ec 0c             	sub    esp,0xc
c000a912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a916:	e8 cd ff ff ff       	call   c000a8e8 <File::~File()>
c000a91b:	83 c4 10             	add    esp,0x10
c000a91e:	83 ec 08             	sub    esp,0x8
c000a921:	68 14 01 00 00       	push   0x114
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 3e fc ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000a92f:	83 c4 10             	add    esp,0x10
c000a932:	83 c4 0c             	add    esp,0xc
c000a935:	c3                   	ret    

c000a936 <Directory::~Directory()>:
c000a936:	83 ec 0c             	sub    esp,0xc
c000a939:	ba ac fb 01 c0       	mov    edx,0xc001fbac
c000a93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a942:	89 10                	mov    DWORD PTR [eax],edx
c000a944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a948:	83 ec 0c             	sub    esp,0xc
c000a94b:	50                   	push   eax
c000a94c:	e8 bb e7 ff ff       	call   c000910c <UnixFile::~UnixFile()>
c000a951:	83 c4 10             	add    esp,0x10
c000a954:	90                   	nop
c000a955:	83 c4 0c             	add    esp,0xc
c000a958:	c3                   	ret    
c000a959:	90                   	nop

c000a95a <Directory::~Directory()>:
c000a95a:	83 ec 0c             	sub    esp,0xc
c000a95d:	83 ec 0c             	sub    esp,0xc
c000a960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a964:	e8 cd ff ff ff       	call   c000a936 <Directory::~Directory()>
c000a969:	83 c4 10             	add    esp,0x10
c000a96c:	83 ec 08             	sub    esp,0x8
c000a96f:	68 14 01 00 00       	push   0x114
c000a974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a978:	e8 f0 fb ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000a97d:	83 c4 10             	add    esp,0x10
c000a980:	83 c4 0c             	add    esp,0xc
c000a983:	c3                   	ret    

c000a984 <Filesystem::Filesystem()>:
c000a984:	ba 28 fb 01 c0       	mov    edx,0xc001fb28
c000a989:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98d:	89 10                	mov    DWORD PTR [eax],edx
c000a98f:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a995:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a999:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9a0:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a9a5:	90                   	nop
c000a9a6:	c3                   	ret    
c000a9a7:	90                   	nop

c000a9a8 <Filesystem::~Filesystem()>:
c000a9a8:	ba 28 fb 01 c0       	mov    edx,0xc001fb28
c000a9ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9b1:	89 10                	mov    DWORD PTR [eax],edx
c000a9b3:	90                   	nop
c000a9b4:	c3                   	ret    
c000a9b5:	90                   	nop

c000a9b6 <Filesystem::~Filesystem()>:
c000a9b6:	83 ec 0c             	sub    esp,0xc
c000a9b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a9bd:	e8 e6 ff ff ff       	call   c000a9a8 <Filesystem::~Filesystem()>
c000a9c2:	83 c4 04             	add    esp,0x4
c000a9c5:	83 ec 08             	sub    esp,0x8
c000a9c8:	6a 08                	push   0x8
c000a9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9ce:	e8 9a fb ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000a9d3:	83 c4 10             	add    esp,0x10
c000a9d6:	83 c4 0c             	add    esp,0xc
c000a9d9:	c3                   	ret    

c000a9da <Fs::getcwd(Process*, char*, int)>:
c000a9da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9de:	31 c0                	xor    eax,eax
c000a9e0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a9e3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a9e7:	7d 15                	jge    c000a9fe <Fs::getcwd(Process*, char*, int)+0x24>
c000a9e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ed:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9f4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9f7:	84 c9                	test   cl,cl
c000a9f9:	74 06                	je     c000aa01 <Fs::getcwd(Process*, char*, int)+0x27>
c000a9fb:	40                   	inc    eax
c000a9fc:	eb e2                	jmp    c000a9e0 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9fe:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aa01:	31 c0                	xor    eax,eax
c000aa03:	c3                   	ret    

c000aa04 <Fs::initVFS()>:
c000aa04:	83 ec 18             	sub    esp,0x18
c000aa07:	6a 08                	push   0x8
c000aa09:	e8 65 ce ff ff       	call   c0007873 <malloc>
c000aa0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa11:	e8 ea da 00 00       	call   c0018500 <FAT::FAT()>
c000aa16:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aa1d:	e8 51 ce ff ff       	call   c0007873 <malloc>
c000aa22:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa25:	e8 72 e9 00 00       	call   c001939c <ISO9660::ISO9660()>
c000aa2a:	83 c4 1c             	add    esp,0x1c
c000aa2d:	c3                   	ret    

c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aa2e:	55                   	push   ebp
c000aa2f:	57                   	push   edi
c000aa30:	56                   	push   esi
c000aa31:	53                   	push   ebx
c000aa32:	81 ec 10 04 00 00    	sub    esp,0x410
c000aa38:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000aa3f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aa46:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aa4d:	68 00 04 00 00       	push   0x400
c000aa52:	6a 00                	push   0x0
c000aa54:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa58:	56                   	push   esi
c000aa59:	e8 62 5a ff ff       	call   c00004c0 <memset>
c000aa5e:	83 c4 10             	add    esp,0x10
c000aa61:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa65:	75 0b                	jne    c000aa72 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa67:	50                   	push   eax
c000aa68:	50                   	push   eax
c000aa69:	57                   	push   edi
c000aa6a:	56                   	push   esi
c000aa6b:	e8 80 5b ff ff       	call   c00005f0 <strcpy>
c000aa70:	eb 41                	jmp    c000aab3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa72:	8a 07                	mov    al,BYTE PTR [edi]
c000aa74:	3c 2f                	cmp    al,0x2f
c000aa76:	74 04                	je     c000aa7c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa78:	3c 5c                	cmp    al,0x5c
c000aa7a:	75 18                	jne    c000aa94 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa7c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa7f:	3c 60                	cmp    al,0x60
c000aa81:	7e 03                	jle    c000aa86 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa83:	83 e8 20             	sub    eax,0x20
c000aa86:	88 04 24             	mov    BYTE PTR [esp],al
c000aa89:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa90:	50                   	push   eax
c000aa91:	50                   	push   eax
c000aa92:	eb 18                	jmp    c000aaac <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa94:	50                   	push   eax
c000aa95:	50                   	push   eax
c000aa96:	55                   	push   ebp
c000aa97:	56                   	push   esi
c000aa98:	e8 53 5b ff ff       	call   c00005f0 <strcpy>
c000aa9d:	5a                   	pop    edx
c000aa9e:	59                   	pop    ecx
c000aa9f:	68 7b 0a 02 c0       	push   0xc0020a7b
c000aaa4:	56                   	push   esi
c000aaa5:	e8 16 5d ff ff       	call   c00007c0 <strcat>
c000aaaa:	5d                   	pop    ebp
c000aaab:	58                   	pop    eax
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	e8 0d 5d ff ff       	call   c00007c0 <strcat>
c000aab3:	83 c4 10             	add    esp,0x10
c000aab6:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aab9:	3c 60                	cmp    al,0x60
c000aabb:	7e 03                	jle    c000aac0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aabd:	83 e8 20             	sub    eax,0x20
c000aac0:	88 04 24             	mov    BYTE PTR [esp],al
c000aac3:	88 03                	mov    BYTE PTR [ebx],al
c000aac5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aacc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aad2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aad6:	bf 03 00 00 00       	mov    edi,0x3
c000aadb:	b8 03 00 00 00       	mov    eax,0x3
c000aae0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aae3:	84 d2                	test   dl,dl
c000aae5:	0f 84 91 00 00 00    	je     c000ab7c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aaeb:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aaee:	80 fa 2f             	cmp    dl,0x2f
c000aaf1:	74 05                	je     c000aaf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aaf3:	80 fa 5c             	cmp    dl,0x5c
c000aaf6:	75 12                	jne    c000ab0a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaf8:	89 c5                	mov    ebp,eax
c000aafa:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaff:	74 09                	je     c000ab0a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ab01:	40                   	inc    eax
c000ab02:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ab06:	89 cf                	mov    edi,ecx
c000ab08:	eb d6                	jmp    c000aae0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000ab0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ab0f:	75 5b                	jne    c000ab6c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab11:	80 fa 2e             	cmp    dl,0x2e
c000ab14:	75 56                	jne    c000ab6c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab16:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ab1a:	74 19                	je     c000ab35 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ab1c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab21:	74 53                	je     c000ab76 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab23:	89 f9                	mov    ecx,edi
c000ab25:	41                   	inc    ecx
c000ab26:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ab29:	80 fa 2f             	cmp    dl,0x2f
c000ab2c:	74 f7                	je     c000ab25 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab2e:	80 fa 5c             	cmp    dl,0x5c
c000ab31:	74 f2                	je     c000ab25 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab33:	eb d1                	jmp    c000ab06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab35:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab3a:	74 3a                	je     c000ab76 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab3c:	83 f8 03             	cmp    eax,0x3
c000ab3f:	74 c5                	je     c000ab06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab41:	41                   	inc    ecx
c000ab42:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ab45:	80 fa 2f             	cmp    dl,0x2f
c000ab48:	74 f7                	je     c000ab41 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab4a:	80 fa 5c             	cmp    dl,0x5c
c000ab4d:	74 f2                	je     c000ab41 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab4f:	48                   	dec    eax
c000ab50:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab54:	75 06                	jne    c000ab5c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab56:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab5a:	eb f3                	jmp    c000ab4f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab5c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab60:	74 07                	je     c000ab69 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab62:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab66:	48                   	dec    eax
c000ab67:	eb f3                	jmp    c000ab5c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab69:	40                   	inc    eax
c000ab6a:	eb 9a                	jmp    c000ab06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab6c:	80 fa 2f             	cmp    dl,0x2f
c000ab6f:	74 95                	je     c000ab06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab71:	80 fa 5c             	cmp    dl,0x5c
c000ab74:	74 90                	je     c000ab06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab76:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab79:	40                   	inc    eax
c000ab7a:	eb 8a                	jmp    c000ab06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab7c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	53                   	push   ebx
c000ab84:	e8 a7 59 ff ff       	call   c0000530 <strlen>
c000ab89:	83 c4 10             	add    esp,0x10
c000ab8c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab91:	75 26                	jne    c000abb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab93:	83 ec 0c             	sub    esp,0xc
c000ab96:	53                   	push   ebx
c000ab97:	e8 94 59 ff ff       	call   c0000530 <strlen>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aba4:	74 26                	je     c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aba6:	83 ec 0c             	sub    esp,0xc
c000aba9:	53                   	push   ebx
c000abaa:	e8 81 59 ff ff       	call   c0000530 <strlen>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000abb7:	eb c7                	jmp    c000ab80 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000abb9:	83 ec 0c             	sub    esp,0xc
c000abbc:	53                   	push   ebx
c000abbd:	e8 6e 59 ff ff       	call   c0000530 <strlen>
c000abc2:	83 c4 10             	add    esp,0x10
c000abc5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000abca:	74 c7                	je     c000ab93 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000abcc:	81 c4 0c 04 00 00    	add    esp,0x40c
c000abd2:	5b                   	pop    ebx
c000abd3:	5e                   	pop    esi
c000abd4:	5f                   	pop    edi
c000abd5:	5d                   	pop    ebp
c000abd6:	c3                   	ret    
c000abd7:	90                   	nop

c000abd8 <File::File(char const*, Process*)>:
c000abd8:	83 ec 0c             	sub    esp,0xc
c000abdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdf:	83 ec 08             	sub    esp,0x8
c000abe2:	6a 00                	push   0x0
c000abe4:	50                   	push   eax
c000abe5:	e8 40 e3 ff ff       	call   c0008f2a <UnixFile::UnixFile(int)>
c000abea:	83 c4 10             	add    esp,0x10
c000abed:	ba 90 fb 01 c0       	mov    edx,0xc001fb90
c000abf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf6:	89 10                	mov    DWORD PTR [eax],edx
c000abf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abfc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ac02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac06:	83 c0 0d             	add    eax,0xd
c000ac09:	83 ec 04             	sub    esp,0x4
c000ac0c:	52                   	push   edx
c000ac0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac11:	50                   	push   eax
c000ac12:	e8 17 fe ff ff       	call   c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac1e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ac21:	8d 50 bf             	lea    edx,[eax-0x41]
c000ac24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac28:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ac36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac3a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac40:	25 ff 00 00 00       	and    eax,0xff
c000ac45:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac4c:	85 c0                	test   eax,eax
c000ac4e:	74 42                	je     c000ac92 <File::File(char const*, Process*)+0xba>
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac5a:	25 ff 00 00 00       	and    eax,0xff
c000ac5f:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac66:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac6c:	85 c0                	test   eax,eax
c000ac6e:	75 22                	jne    c000ac92 <File::File(char const*, Process*)+0xba>
c000ac70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac74:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac7a:	25 ff 00 00 00       	and    eax,0xff
c000ac7f:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac86:	83 ec 0c             	sub    esp,0xc
c000ac89:	50                   	push   eax
c000ac8a:	e8 57 20 00 00       	call   c000cce6 <LogicalDisk::mount()>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	90                   	nop
c000ac93:	83 c4 0c             	add    esp,0xc
c000ac96:	c3                   	ret    
c000ac97:	90                   	nop

c000ac98 <File::open(FileOpenMode)>:
c000ac98:	53                   	push   ebx
c000ac99:	b8 0b 00 00 00       	mov    eax,0xb
c000ac9e:	83 ec 08             	sub    esp,0x8
c000aca1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aca5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000acac:	80 fa 19             	cmp    dl,0x19
c000acaf:	77 40                	ja     c000acf1 <File::open(FileOpenMode)+0x59>
c000acb1:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000acb8:	85 d2                	test   edx,edx
c000acba:	74 35                	je     c000acf1 <File::open(FileOpenMode)+0x59>
c000acbc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000acc2:	85 d2                	test   edx,edx
c000acc4:	74 2b                	je     c000acf1 <File::open(FileOpenMode)+0x59>
c000acc6:	b8 06 00 00 00       	mov    eax,0x6
c000accb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000accf:	75 20                	jne    c000acf1 <File::open(FileOpenMode)+0x59>
c000acd1:	8b 02                	mov    eax,DWORD PTR [edx]
c000acd3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000acd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdd:	51                   	push   ecx
c000acde:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ace1:	51                   	push   ecx
c000ace2:	52                   	push   edx
c000ace3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ace6:	83 c4 10             	add    esp,0x10
c000ace9:	85 c0                	test   eax,eax
c000aceb:	75 04                	jne    c000acf1 <File::open(FileOpenMode)+0x59>
c000aced:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000acf1:	83 c4 08             	add    esp,0x8
c000acf4:	5b                   	pop    ebx
c000acf5:	c3                   	ret    

c000acf6 <File::close()>:
c000acf6:	53                   	push   ebx
c000acf7:	b8 0b 00 00 00       	mov    eax,0xb
c000acfc:	83 ec 08             	sub    esp,0x8
c000acff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad03:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad0a:	80 fa 19             	cmp    dl,0x19
c000ad0d:	77 41                	ja     c000ad50 <File::close()+0x5a>
c000ad0f:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad16:	85 db                	test   ebx,ebx
c000ad18:	74 36                	je     c000ad50 <File::close()+0x5a>
c000ad1a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000ad21:	74 2d                	je     c000ad50 <File::close()+0x5a>
c000ad23:	b8 05 00 00 00       	mov    eax,0x5
c000ad28:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad2c:	74 22                	je     c000ad50 <File::close()+0x5a>
c000ad2e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ad32:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000ad39:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad3f:	53                   	push   ebx
c000ad40:	53                   	push   ebx
c000ad41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad49:	50                   	push   eax
c000ad4a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	83 c4 08             	add    esp,0x8
c000ad53:	5b                   	pop    ebx
c000ad54:	c3                   	ret    
c000ad55:	90                   	nop

c000ad56 <File::seek(unsigned long long)>:
c000ad56:	56                   	push   esi
c000ad57:	b8 0b 00 00 00       	mov    eax,0xb
c000ad5c:	53                   	push   ebx
c000ad5d:	51                   	push   ecx
c000ad5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad6a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad71:	80 fa 19             	cmp    dl,0x19
c000ad74:	77 31                	ja     c000ada7 <File::seek(unsigned long long)+0x51>
c000ad76:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad7d:	85 d2                	test   edx,edx
c000ad7f:	74 26                	je     c000ada7 <File::seek(unsigned long long)+0x51>
c000ad81:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad87:	85 d2                	test   edx,edx
c000ad89:	74 1c                	je     c000ada7 <File::seek(unsigned long long)+0x51>
c000ad8b:	b8 05 00 00 00       	mov    eax,0x5
c000ad90:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad94:	74 11                	je     c000ada7 <File::seek(unsigned long long)+0x51>
c000ad96:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad98:	53                   	push   ebx
c000ad99:	51                   	push   ecx
c000ad9a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ada0:	52                   	push   edx
c000ada1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	5a                   	pop    edx
c000ada8:	5b                   	pop    ebx
c000ada9:	5e                   	pop    esi
c000adaa:	c3                   	ret    
c000adab:	90                   	nop

c000adac <File::tell(unsigned long long*)>:
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	b8 0b 00 00 00       	mov    eax,0xb
c000adb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adb8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000adbf:	80 fa 19             	cmp    dl,0x19
c000adc2:	77 34                	ja     c000adf8 <File::tell(unsigned long long*)+0x4c>
c000adc4:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000adcb:	85 d2                	test   edx,edx
c000adcd:	74 29                	je     c000adf8 <File::tell(unsigned long long*)+0x4c>
c000adcf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000add5:	85 d2                	test   edx,edx
c000add7:	74 1f                	je     c000adf8 <File::tell(unsigned long long*)+0x4c>
c000add9:	b8 05 00 00 00       	mov    eax,0x5
c000adde:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ade2:	74 14                	je     c000adf8 <File::tell(unsigned long long*)+0x4c>
c000ade4:	50                   	push   eax
c000ade5:	8b 02                	mov    eax,DWORD PTR [edx]
c000ade7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000adeb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000adf1:	52                   	push   edx
c000adf2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	83 c4 0c             	add    esp,0xc
c000adfb:	c3                   	ret    

c000adfc <File::rewind()>:
c000adfc:	83 ec 10             	sub    esp,0x10
c000adff:	6a 00                	push   0x0
c000ae01:	6a 00                	push   0x0
c000ae03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae07:	e8 4a ff ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c000ae0c:	83 c4 1c             	add    esp,0x1c
c000ae0f:	c3                   	ret    

c000ae10 <File::unlink()>:
c000ae10:	83 ec 0c             	sub    esp,0xc
c000ae13:	b8 0b 00 00 00       	mov    eax,0xb
c000ae18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae1c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae23:	80 f9 19             	cmp    cl,0x19
c000ae26:	77 2f                	ja     c000ae57 <File::unlink()+0x47>
c000ae28:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae2f:	85 c9                	test   ecx,ecx
c000ae31:	74 24                	je     c000ae57 <File::unlink()+0x47>
c000ae33:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae39:	85 c9                	test   ecx,ecx
c000ae3b:	74 1a                	je     c000ae57 <File::unlink()+0x47>
c000ae3d:	b8 06 00 00 00       	mov    eax,0x6
c000ae42:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae46:	75 0f                	jne    c000ae57 <File::unlink()+0x47>
c000ae48:	50                   	push   eax
c000ae49:	83 c2 0d             	add    edx,0xd
c000ae4c:	50                   	push   eax
c000ae4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae4f:	52                   	push   edx
c000ae50:	51                   	push   ecx
c000ae51:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae54:	83 c4 10             	add    esp,0x10
c000ae57:	83 c4 0c             	add    esp,0xc
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <File::rename(char const*)>:
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae6f:	80 f9 19             	cmp    cl,0x19
c000ae72:	77 32                	ja     c000aea6 <File::rename(char const*)+0x4a>
c000ae74:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae7b:	85 c9                	test   ecx,ecx
c000ae7d:	74 27                	je     c000aea6 <File::rename(char const*)+0x4a>
c000ae7f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae85:	85 c9                	test   ecx,ecx
c000ae87:	74 1d                	je     c000aea6 <File::rename(char const*)+0x4a>
c000ae89:	b8 06 00 00 00       	mov    eax,0x6
c000ae8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae92:	75 12                	jne    c000aea6 <File::rename(char const*)+0x4a>
c000ae94:	50                   	push   eax
c000ae95:	83 c2 0d             	add    edx,0xd
c000ae98:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae9e:	52                   	push   edx
c000ae9f:	51                   	push   ecx
c000aea0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000aea3:	83 c4 10             	add    esp,0x10
c000aea6:	83 c4 0c             	add    esp,0xc
c000aea9:	c3                   	ret    

c000aeaa <File::chfatattr(unsigned char, unsigned char)>:
c000aeaa:	57                   	push   edi
c000aeab:	b8 0b 00 00 00       	mov    eax,0xb
c000aeb0:	56                   	push   esi
c000aeb1:	53                   	push   ebx
c000aeb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeb6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aeba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aebe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aec5:	80 f9 19             	cmp    cl,0x19
c000aec8:	77 37                	ja     c000af01 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aeca:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aed1:	85 c9                	test   ecx,ecx
c000aed3:	74 2c                	je     c000af01 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aed5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aedb:	85 c9                	test   ecx,ecx
c000aedd:	74 22                	je     c000af01 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aedf:	b8 06 00 00 00       	mov    eax,0x6
c000aee4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aee8:	75 17                	jne    c000af01 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aeea:	89 f0                	mov    eax,esi
c000aeec:	8b 39                	mov    edi,DWORD PTR [ecx]
c000aeee:	0f b6 f0             	movzx  esi,al
c000aef1:	56                   	push   esi
c000aef2:	83 c2 0d             	add    edx,0xd
c000aef5:	0f b6 db             	movzx  ebx,bl
c000aef8:	53                   	push   ebx
c000aef9:	52                   	push   edx
c000aefa:	51                   	push   ecx
c000aefb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aefe:	83 c4 10             	add    esp,0x10
c000af01:	5b                   	pop    ebx
c000af02:	5e                   	pop    esi
c000af03:	5f                   	pop    edi
c000af04:	c3                   	ret    
c000af05:	90                   	nop

c000af06 <File::exists()>:
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	31 c0                	xor    eax,eax
c000af0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af0f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af16:	80 f9 19             	cmp    cl,0x19
c000af19:	77 24                	ja     c000af3f <File::exists()+0x39>
c000af1b:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af22:	85 c9                	test   ecx,ecx
c000af24:	74 19                	je     c000af3f <File::exists()+0x39>
c000af26:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af2c:	85 c9                	test   ecx,ecx
c000af2e:	74 0f                	je     c000af3f <File::exists()+0x39>
c000af30:	50                   	push   eax
c000af31:	83 c2 0d             	add    edx,0xd
c000af34:	50                   	push   eax
c000af35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af37:	52                   	push   edx
c000af38:	51                   	push   ecx
c000af39:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000af3c:	83 c4 10             	add    esp,0x10
c000af3f:	83 c4 0c             	add    esp,0xc
c000af42:	c3                   	ret    
c000af43:	90                   	nop

c000af44 <File::stat(unsigned long long*, bool*)>:
c000af44:	56                   	push   esi
c000af45:	53                   	push   ebx
c000af46:	50                   	push   eax
c000af47:	b8 0b 00 00 00       	mov    eax,0xb
c000af4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af50:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af54:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af5f:	80 f9 19             	cmp    cl,0x19
c000af62:	77 3d                	ja     c000afa1 <File::stat(unsigned long long*, bool*)+0x5d>
c000af64:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af6b:	85 c9                	test   ecx,ecx
c000af6d:	74 32                	je     c000afa1 <File::stat(unsigned long long*, bool*)+0x5d>
c000af6f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af75:	85 c9                	test   ecx,ecx
c000af77:	74 28                	je     c000afa1 <File::stat(unsigned long long*, bool*)+0x5d>
c000af79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af7f:	74 13                	je     c000af94 <File::stat(unsigned long long*, bool*)+0x50>
c000af81:	83 ec 04             	sub    esp,0x4
c000af84:	56                   	push   esi
c000af85:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af8b:	51                   	push   ecx
c000af8c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af8f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af92:	eb 0a                	jmp    c000af9e <File::stat(unsigned long long*, bool*)+0x5a>
c000af94:	53                   	push   ebx
c000af95:	83 c2 0d             	add    edx,0xd
c000af98:	56                   	push   esi
c000af99:	52                   	push   edx
c000af9a:	51                   	push   ecx
c000af9b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af9e:	83 c4 10             	add    esp,0x10
c000afa1:	5a                   	pop    edx
c000afa2:	5b                   	pop    ebx
c000afa3:	5e                   	pop    esi
c000afa4:	c3                   	ret    

c000afa5 <Fs::setcwd(Process*, char*)>:
c000afa5:	55                   	push   ebp
c000afa6:	57                   	push   edi
c000afa7:	56                   	push   esi
c000afa8:	53                   	push   ebx
c000afa9:	81 ec 20 02 00 00    	sub    esp,0x220
c000afaf:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000afb6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000afbc:	57                   	push   edi
c000afbd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000afc4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000afc8:	56                   	push   esi
c000afc9:	e8 60 fa ff ff       	call   c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)>
c000afce:	89 34 24             	mov    DWORD PTR [esp],esi
c000afd1:	e8 5a 55 ff ff       	call   c0000530 <strlen>
c000afd6:	83 c4 10             	add    esp,0x10
c000afd9:	83 f8 02             	cmp    eax,0x2
c000afdc:	77 15                	ja     c000aff3 <Fs::setcwd(Process*, char*)+0x4e>
c000afde:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000afe3:	83 eb 41             	sub    ebx,0x41
c000afe6:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000afed:	85 c0                	test   eax,eax
c000afef:	75 1c                	jne    c000b00d <Fs::setcwd(Process*, char*)+0x68>
c000aff1:	eb 2f                	jmp    c000b022 <Fs::setcwd(Process*, char*)+0x7d>
c000aff3:	83 ec 0c             	sub    esp,0xc
c000aff6:	56                   	push   esi
c000aff7:	e8 34 55 ff ff       	call   c0000530 <strlen>
c000affc:	83 c4 10             	add    esp,0x10
c000afff:	83 f8 03             	cmp    eax,0x3
c000b002:	75 57                	jne    c000b05b <Fs::setcwd(Process*, char*)+0xb6>
c000b004:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b009:	75 50                	jne    c000b05b <Fs::setcwd(Process*, char*)+0xb6>
c000b00b:	eb d1                	jmp    c000afde <Fs::setcwd(Process*, char*)+0x39>
c000b00d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b014:	75 0c                	jne    c000b022 <Fs::setcwd(Process*, char*)+0x7d>
c000b016:	83 ec 0c             	sub    esp,0xc
c000b019:	50                   	push   eax
c000b01a:	e8 c7 1c 00 00       	call   c000cce6 <LogicalDisk::mount()>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	b8 03 00 00 00       	mov    eax,0x3
c000b027:	83 fb 19             	cmp    ebx,0x19
c000b02a:	0f 87 c6 00 00 00    	ja     c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b030:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000b037:	b8 05 00 00 00       	mov    eax,0x5
c000b03c:	85 d2                	test   edx,edx
c000b03e:	0f 84 b2 00 00 00    	je     c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b044:	b8 06 00 00 00       	mov    eax,0x6
c000b049:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b050:	0f 85 92 00 00 00    	jne    c000b0e8 <Fs::setcwd(Process*, char*)+0x143>
c000b056:	e9 9b 00 00 00       	jmp    c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b05b:	83 ec 0c             	sub    esp,0xc
c000b05e:	68 14 01 00 00       	push   0x114
c000b063:	e8 0b c8 ff ff       	call   c0007873 <malloc>
c000b068:	83 c4 0c             	add    esp,0xc
c000b06b:	89 c3                	mov    ebx,eax
c000b06d:	55                   	push   ebp
c000b06e:	56                   	push   esi
c000b06f:	50                   	push   eax
c000b070:	e8 63 fb ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c000b075:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b07a:	83 c4 0c             	add    esp,0xc
c000b07d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b081:	50                   	push   eax
c000b082:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b086:	50                   	push   eax
c000b087:	53                   	push   ebx
c000b088:	e8 b7 fe ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	83 f8 02             	cmp    eax,0x2
c000b093:	74 27                	je     c000b0bc <Fs::setcwd(Process*, char*)+0x117>
c000b095:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b09a:	75 1c                	jne    c000b0b8 <Fs::setcwd(Process*, char*)+0x113>
c000b09c:	b8 02 00 00 00       	mov    eax,0x2
c000b0a1:	85 db                	test   ebx,ebx
c000b0a3:	74 51                	je     c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b0a5:	83 ec 0c             	sub    esp,0xc
c000b0a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0aa:	53                   	push   ebx
c000b0ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	b8 02 00 00 00       	mov    eax,0x2
c000b0b6:	eb 3e                	jmp    c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b0b8:	85 c0                	test   eax,eax
c000b0ba:	74 1c                	je     c000b0d8 <Fs::setcwd(Process*, char*)+0x133>
c000b0bc:	b8 01 00 00 00       	mov    eax,0x1
c000b0c1:	85 db                	test   ebx,ebx
c000b0c3:	74 31                	je     c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b0c5:	83 ec 0c             	sub    esp,0xc
c000b0c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ca:	53                   	push   ebx
c000b0cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ce:	83 c4 10             	add    esp,0x10
c000b0d1:	b8 01 00 00 00       	mov    eax,0x1
c000b0d6:	eb 1e                	jmp    c000b0f6 <Fs::setcwd(Process*, char*)+0x151>
c000b0d8:	85 db                	test   ebx,ebx
c000b0da:	74 0c                	je     c000b0e8 <Fs::setcwd(Process*, char*)+0x143>
c000b0dc:	83 ec 0c             	sub    esp,0xc
c000b0df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e1:	53                   	push   ebx
c000b0e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	50                   	push   eax
c000b0e9:	50                   	push   eax
c000b0ea:	56                   	push   esi
c000b0eb:	57                   	push   edi
c000b0ec:	e8 ff 54 ff ff       	call   c00005f0 <strcpy>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	31 c0                	xor    eax,eax
c000b0f6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0fc:	5b                   	pop    ebx
c000b0fd:	5e                   	pop    esi
c000b0fe:	5f                   	pop    edi
c000b0ff:	5d                   	pop    ebp
c000b100:	c3                   	ret    
c000b101:	90                   	nop

c000b102 <Directory::Directory(char const*, Process*)>:
c000b102:	83 ec 0c             	sub    esp,0xc
c000b105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b109:	83 ec 08             	sub    esp,0x8
c000b10c:	6a 00                	push   0x0
c000b10e:	50                   	push   eax
c000b10f:	e8 16 de ff ff       	call   c0008f2a <UnixFile::UnixFile(int)>
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	ba ac fb 01 c0       	mov    edx,0xc001fbac
c000b11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b120:	89 10                	mov    DWORD PTR [eax],edx
c000b122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b126:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b130:	83 c0 0d             	add    eax,0xd
c000b133:	83 ec 04             	sub    esp,0x4
c000b136:	52                   	push   edx
c000b137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b13b:	50                   	push   eax
c000b13c:	e8 ed f8 ff ff       	call   c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b148:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b14b:	8d 50 bf             	lea    edx,[eax-0x41]
c000b14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b152:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b15c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b164:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b16a:	25 ff 00 00 00       	and    eax,0xff
c000b16f:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b176:	85 c0                	test   eax,eax
c000b178:	74 42                	je     c000b1bc <Directory::Directory(char const*, Process*)+0xba>
c000b17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b184:	25 ff 00 00 00       	and    eax,0xff
c000b189:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b190:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b196:	85 c0                	test   eax,eax
c000b198:	75 22                	jne    c000b1bc <Directory::Directory(char const*, Process*)+0xba>
c000b19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1a4:	25 ff 00 00 00       	and    eax,0xff
c000b1a9:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b1b0:	83 ec 0c             	sub    esp,0xc
c000b1b3:	50                   	push   eax
c000b1b4:	e8 2d 1b 00 00       	call   c000cce6 <LogicalDisk::mount()>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	90                   	nop
c000b1bd:	83 c4 0c             	add    esp,0xc
c000b1c0:	c3                   	ret    
c000b1c1:	90                   	nop

c000b1c2 <Directory::open()>:
c000b1c2:	53                   	push   ebx
c000b1c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c8:	83 ec 08             	sub    esp,0x8
c000b1cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1cf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b1d6:	80 fa 19             	cmp    dl,0x19
c000b1d9:	77 3d                	ja     c000b218 <Directory::open()+0x56>
c000b1db:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1e2:	85 d2                	test   edx,edx
c000b1e4:	74 32                	je     c000b218 <Directory::open()+0x56>
c000b1e6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1ec:	85 d2                	test   edx,edx
c000b1ee:	74 28                	je     c000b218 <Directory::open()+0x56>
c000b1f0:	b8 06 00 00 00       	mov    eax,0x6
c000b1f5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1f9:	75 1d                	jne    c000b218 <Directory::open()+0x56>
c000b1fb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b201:	50                   	push   eax
c000b202:	8b 02                	mov    eax,DWORD PTR [edx]
c000b204:	51                   	push   ecx
c000b205:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b208:	51                   	push   ecx
c000b209:	52                   	push   edx
c000b20a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	85 c0                	test   eax,eax
c000b212:	75 04                	jne    c000b218 <Directory::open()+0x56>
c000b214:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b218:	83 c4 08             	add    esp,0x8
c000b21b:	5b                   	pop    ebx
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <Directory::close()>:
c000b21e:	53                   	push   ebx
c000b21f:	b8 0b 00 00 00       	mov    eax,0xb
c000b224:	83 ec 08             	sub    esp,0x8
c000b227:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b22b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b232:	80 fa 19             	cmp    dl,0x19
c000b235:	77 41                	ja     c000b278 <Directory::close()+0x5a>
c000b237:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b23e:	85 db                	test   ebx,ebx
c000b240:	74 36                	je     c000b278 <Directory::close()+0x5a>
c000b242:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b249:	74 2d                	je     c000b278 <Directory::close()+0x5a>
c000b24b:	b8 05 00 00 00       	mov    eax,0x5
c000b250:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b254:	74 22                	je     c000b278 <Directory::close()+0x5a>
c000b256:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b25a:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b261:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b267:	53                   	push   ebx
c000b268:	53                   	push   ebx
c000b269:	8b 10                	mov    edx,DWORD PTR [eax]
c000b26b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b271:	50                   	push   eax
c000b272:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	83 c4 08             	add    esp,0x8
c000b27b:	5b                   	pop    ebx
c000b27c:	c3                   	ret    
c000b27d:	90                   	nop

c000b27e <Directory::unlink()>:
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	b8 0b 00 00 00       	mov    eax,0xb
c000b286:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b28a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b291:	80 f9 19             	cmp    cl,0x19
c000b294:	77 2f                	ja     c000b2c5 <Directory::unlink()+0x47>
c000b296:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b29d:	85 c9                	test   ecx,ecx
c000b29f:	74 24                	je     c000b2c5 <Directory::unlink()+0x47>
c000b2a1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2a7:	85 c9                	test   ecx,ecx
c000b2a9:	74 1a                	je     c000b2c5 <Directory::unlink()+0x47>
c000b2ab:	b8 06 00 00 00       	mov    eax,0x6
c000b2b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2b4:	75 0f                	jne    c000b2c5 <Directory::unlink()+0x47>
c000b2b6:	50                   	push   eax
c000b2b7:	83 c2 0d             	add    edx,0xd
c000b2ba:	50                   	push   eax
c000b2bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2bd:	52                   	push   edx
c000b2be:	51                   	push   ecx
c000b2bf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	83 c4 0c             	add    esp,0xc
c000b2c8:	c3                   	ret    
c000b2c9:	90                   	nop

c000b2ca <Directory::rename(char const*)>:
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b2d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2dd:	80 f9 19             	cmp    cl,0x19
c000b2e0:	77 32                	ja     c000b314 <Directory::rename(char const*)+0x4a>
c000b2e2:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2e9:	85 c9                	test   ecx,ecx
c000b2eb:	74 27                	je     c000b314 <Directory::rename(char const*)+0x4a>
c000b2ed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2f3:	85 c9                	test   ecx,ecx
c000b2f5:	74 1d                	je     c000b314 <Directory::rename(char const*)+0x4a>
c000b2f7:	b8 06 00 00 00       	mov    eax,0x6
c000b2fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b300:	75 12                	jne    c000b314 <Directory::rename(char const*)+0x4a>
c000b302:	50                   	push   eax
c000b303:	83 c2 0d             	add    edx,0xd
c000b306:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b30c:	52                   	push   edx
c000b30d:	51                   	push   ecx
c000b30e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b311:	83 c4 10             	add    esp,0x10
c000b314:	83 c4 0c             	add    esp,0xc
c000b317:	c3                   	ret    

c000b318 <Directory::exists()>:
c000b318:	83 ec 0c             	sub    esp,0xc
c000b31b:	31 c0                	xor    eax,eax
c000b31d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b321:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b328:	80 f9 19             	cmp    cl,0x19
c000b32b:	77 24                	ja     c000b351 <Directory::exists()+0x39>
c000b32d:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b334:	85 c9                	test   ecx,ecx
c000b336:	74 19                	je     c000b351 <Directory::exists()+0x39>
c000b338:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b33e:	85 c9                	test   ecx,ecx
c000b340:	74 0f                	je     c000b351 <Directory::exists()+0x39>
c000b342:	50                   	push   eax
c000b343:	83 c2 0d             	add    edx,0xd
c000b346:	50                   	push   eax
c000b347:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b349:	52                   	push   edx
c000b34a:	51                   	push   ecx
c000b34b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b34e:	83 c4 10             	add    esp,0x10
c000b351:	83 c4 0c             	add    esp,0xc
c000b354:	c3                   	ret    
c000b355:	90                   	nop

c000b356 <Directory::read(dirent*)>:
c000b356:	83 ec 1c             	sub    esp,0x1c
c000b359:	b8 0b 00 00 00       	mov    eax,0xb
c000b35e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b362:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b369:	80 fa 19             	cmp    dl,0x19
c000b36c:	77 30                	ja     c000b39e <Directory::read(dirent*)+0x48>
c000b36e:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b375:	85 d2                	test   edx,edx
c000b377:	74 25                	je     c000b39e <Directory::read(dirent*)+0x48>
c000b379:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b380:	74 1c                	je     c000b39e <Directory::read(dirent*)+0x48>
c000b382:	83 ec 0c             	sub    esp,0xc
c000b385:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b387:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b38b:	52                   	push   edx
c000b38c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b390:	6a 00                	push   0x0
c000b392:	68 10 01 00 00       	push   0x110
c000b397:	51                   	push   ecx
c000b398:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b39b:	83 c4 20             	add    esp,0x20
c000b39e:	83 c4 1c             	add    esp,0x1c
c000b3a1:	c3                   	ret    

c000b3a2 <Directory::create()>:
c000b3a2:	83 ec 0c             	sub    esp,0xc
c000b3a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b3aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3b5:	80 f9 19             	cmp    cl,0x19
c000b3b8:	77 2f                	ja     c000b3e9 <Directory::create()+0x47>
c000b3ba:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b3c1:	85 c9                	test   ecx,ecx
c000b3c3:	74 24                	je     c000b3e9 <Directory::create()+0x47>
c000b3c5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b3cb:	85 c9                	test   ecx,ecx
c000b3cd:	74 1a                	je     c000b3e9 <Directory::create()+0x47>
c000b3cf:	b8 06 00 00 00       	mov    eax,0x6
c000b3d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d8:	75 0f                	jne    c000b3e9 <Directory::create()+0x47>
c000b3da:	50                   	push   eax
c000b3db:	83 c2 0d             	add    edx,0xd
c000b3de:	50                   	push   eax
c000b3df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3e1:	52                   	push   edx
c000b3e2:	51                   	push   ecx
c000b3e3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	83 c4 0c             	add    esp,0xc
c000b3ec:	c3                   	ret    
c000b3ed:	90                   	nop

c000b3ee <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b3ee:	b8 0a 00 00 00       	mov    eax,0xa
c000b3f3:	c3                   	ret    

c000b3f4 <Bus::Bus(char const*)>:
c000b3f4:	83 ec 0c             	sub    esp,0xc
c000b3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fb:	83 ec 08             	sub    esp,0x8
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	50                   	push   eax
c000b403:	e8 2c 08 00 00       	call   c000bc34 <Device::Device(char const*)>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	ba c8 fb 01 c0       	mov    edx,0xc001fbc8
c000b410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b414:	89 10                	mov    DWORD PTR [eax],edx
c000b416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b424:	90                   	nop
c000b425:	83 c4 0c             	add    esp,0xc
c000b428:	c3                   	ret    
c000b429:	90                   	nop
c000b42a:	66 90                	xchg   ax,ax

c000b42c <Bus::~Bus()>:
c000b42c:	83 ec 0c             	sub    esp,0xc
c000b42f:	ba c8 fb 01 c0       	mov    edx,0xc001fbc8
c000b434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b438:	89 10                	mov    DWORD PTR [eax],edx
c000b43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43e:	83 ec 0c             	sub    esp,0xc
c000b441:	50                   	push   eax
c000b442:	e8 5b 05 00 00       	call   c000b9a2 <Device::~Device()>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	90                   	nop
c000b44b:	83 c4 0c             	add    esp,0xc
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Bus::~Bus()>:
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	83 ec 0c             	sub    esp,0xc
c000b456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45a:	e8 cd ff ff ff       	call   c000b42c <Bus::~Bus()>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	83 ec 08             	sub    esp,0x8
c000b465:	68 58 01 00 00       	push   0x158
c000b46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46e:	e8 fa f0 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000b473:	83 c4 10             	add    esp,0x10
c000b476:	83 c4 0c             	add    esp,0xc
c000b479:	c3                   	ret    

c000b47a <beepThread(void*)>:
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b482:	48                   	dec    eax
c000b483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b487:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b48c:	75 01                	jne    c000b48f <beepThread(void*)+0x15>
c000b48e:	fb                   	sti    
c000b48f:	6b c2 0a             	imul   eax,edx,0xa
c000b492:	83 ec 0c             	sub    esp,0xc
c000b495:	50                   	push   eax
c000b496:	e8 cd 99 00 00       	call   c0014e68 <milliTenthSleep(unsigned int)>
c000b49b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b4a2:	e8 f2 b7 00 00       	call   c0016c99 <HalMakeBeep(int)>
c000b4a7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b4af:	83 c4 1c             	add    esp,0x1c
c000b4b2:	e9 9d 98 00 00       	jmp    c0014d54 <blockTask(TaskState)>

c000b4b7 <Krnl::beep(int, int, bool)>:
c000b4b7:	56                   	push   esi
c000b4b8:	53                   	push   ebx
c000b4b9:	83 ec 10             	sub    esp,0x10
c000b4bc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b4c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c8:	e8 cc b7 00 00       	call   c0016c99 <HalMakeBeep(int)>
c000b4cd:	89 f0                	mov    eax,esi
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	84 c0                	test   al,al
c000b4d4:	74 1e                	je     c000b4f4 <Krnl::beep(int, int, bool)+0x3d>
c000b4d6:	6b db 0a             	imul   ebx,ebx,0xa
c000b4d9:	83 ec 0c             	sub    esp,0xc
c000b4dc:	53                   	push   ebx
c000b4dd:	e8 86 99 00 00       	call   c0014e68 <milliTenthSleep(unsigned int)>
c000b4e2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b4ea:	83 c4 14             	add    esp,0x14
c000b4ed:	5b                   	pop    ebx
c000b4ee:	5e                   	pop    esi
c000b4ef:	e9 a5 b7 00 00       	jmp    c0016c99 <HalMakeBeep(int)>
c000b4f4:	68 e6 00 00 00       	push   0xe6
c000b4f9:	53                   	push   ebx
c000b4fa:	68 7a b4 00 c0       	push   0xc000b47a
c000b4ff:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b505:	e8 0a 94 00 00       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c000b50a:	83 c4 14             	add    esp,0x14
c000b50d:	5b                   	pop    ebx
c000b50e:	5e                   	pop    esi
c000b50f:	c3                   	ret    

c000b510 <User::loadClockSettings(int)>:
c000b510:	53                   	push   ebx
c000b511:	83 ec 14             	sub    esp,0x14
c000b514:	68 14 01 00 00       	push   0x114
c000b519:	e8 55 c3 ff ff       	call   c0007873 <malloc>
c000b51e:	83 c4 0c             	add    esp,0xc
c000b521:	89 c3                	mov    ebx,eax
c000b523:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b529:	68 ec fb 01 c0       	push   0xc001fbec
c000b52e:	50                   	push   eax
c000b52f:	e8 a4 f6 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c000b534:	58                   	pop    eax
c000b535:	5a                   	pop    edx
c000b536:	6a 01                	push   0x1
c000b538:	53                   	push   ebx
c000b539:	e8 5a f7 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c000b53e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b541:	e8 b0 f7 ff ff       	call   c000acf6 <File::close()>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	85 db                	test   ebx,ebx
c000b54b:	74 0f                	je     c000b55c <User::loadClockSettings(int)+0x4c>
c000b54d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b54f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b553:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b556:	83 c4 08             	add    esp,0x8
c000b559:	5b                   	pop    ebx
c000b55a:	ff e0                	jmp    eax
c000b55c:	83 c4 08             	add    esp,0x8
c000b55f:	5b                   	pop    ebx
c000b560:	c3                   	ret    
c000b561:	90                   	nop

c000b562 <Clock::Clock(char const*)>:
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b569:	83 ec 08             	sub    esp,0x8
c000b56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b570:	50                   	push   eax
c000b571:	e8 be 06 00 00       	call   c000bc34 <Device::Device(char const*)>
c000b576:	83 c4 10             	add    esp,0x10
c000b579:	ba 14 fc 01 c0       	mov    edx,0xc001fc14
c000b57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b582:	89 10                	mov    DWORD PTR [eax],edx
c000b584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b588:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b592:	90                   	nop
c000b593:	83 c4 0c             	add    esp,0xc
c000b596:	c3                   	ret    
c000b597:	90                   	nop

c000b598 <Clock::~Clock()>:
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	ba 14 fc 01 c0       	mov    edx,0xc001fc14
c000b5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5a4:	89 10                	mov    DWORD PTR [eax],edx
c000b5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5aa:	83 ec 0c             	sub    esp,0xc
c000b5ad:	50                   	push   eax
c000b5ae:	e8 ef 03 00 00       	call   c000b9a2 <Device::~Device()>
c000b5b3:	83 c4 10             	add    esp,0x10
c000b5b6:	90                   	nop
c000b5b7:	83 c4 0c             	add    esp,0xc
c000b5ba:	c3                   	ret    
c000b5bb:	90                   	nop

c000b5bc <Clock::~Clock()>:
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	83 ec 0c             	sub    esp,0xc
c000b5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c6:	e8 cd ff ff ff       	call   c000b598 <Clock::~Clock()>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	83 ec 08             	sub    esp,0x8
c000b5d1:	68 58 01 00 00       	push   0x158
c000b5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5da:	e8 8e ef ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000b5df:	83 c4 10             	add    esp,0x10
c000b5e2:	83 c4 0c             	add    esp,0xc
c000b5e5:	c3                   	ret    

c000b5e6 <Clock::timeInSecondsLocal()>:
c000b5e6:	53                   	push   ebx
c000b5e7:	83 ec 14             	sub    esp,0x14
c000b5ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ee:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5f0:	50                   	push   eax
c000b5f1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5f4:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b5fb:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b601:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b607:	89 cb                	mov    ebx,ecx
c000b609:	c1 fb 1f             	sar    ebx,0x1f
c000b60c:	01 c8                	add    eax,ecx
c000b60e:	11 da                	adc    edx,ebx
c000b610:	83 c4 10             	add    esp,0x10
c000b613:	31 c9                	xor    ecx,ecx
c000b615:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b61c:	74 05                	je     c000b623 <Clock::timeInSecondsLocal()+0x3d>
c000b61e:	b9 08 07 00 00       	mov    ecx,0x708
c000b623:	31 db                	xor    ebx,ebx
c000b625:	01 c8                	add    eax,ecx
c000b627:	11 da                	adc    edx,ebx
c000b629:	83 c4 08             	add    esp,0x8
c000b62c:	5b                   	pop    ebx
c000b62d:	c3                   	ret    

c000b62e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b62e:	57                   	push   edi
c000b62f:	56                   	push   esi
c000b630:	53                   	push   ebx
c000b631:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b635:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b639:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b63d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b63f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b642:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b649:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b64f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b655:	99                   	cdq    
c000b656:	29 c6                	sub    esi,eax
c000b658:	19 d7                	sbb    edi,edx
c000b65a:	89 f0                	mov    eax,esi
c000b65c:	89 fa                	mov    edx,edi
c000b65e:	31 f6                	xor    esi,esi
c000b660:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b667:	74 05                	je     c000b66e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b669:	be 08 07 00 00       	mov    esi,0x708
c000b66e:	31 ff                	xor    edi,edi
c000b670:	29 f0                	sub    eax,esi
c000b672:	19 fa                	sbb    edx,edi
c000b674:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b678:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b67c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b680:	89 d8                	mov    eax,ebx
c000b682:	5b                   	pop    ebx
c000b683:	5e                   	pop    esi
c000b684:	5f                   	pop    edi
c000b685:	ff e0                	jmp    eax

c000b687 <datetimeToSeconds(datetime_t)>:
c000b687:	55                   	push   ebp
c000b688:	57                   	push   edi
c000b689:	56                   	push   esi
c000b68a:	53                   	push   ebx
c000b68b:	83 ec 14             	sub    esp,0x14
c000b68e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b692:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b696:	0f b6 f5             	movzx  esi,ch
c000b699:	6b f6 3c             	imul   esi,esi,0x3c
c000b69c:	89 cf                	mov    edi,ecx
c000b69e:	89 d3                	mov    ebx,edx
c000b6a0:	0f b6 c9             	movzx  ecx,cl
c000b6a3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6a9:	0f b6 c6             	movzx  eax,dh
c000b6ac:	c1 ef 10             	shr    edi,0x10
c000b6af:	48                   	dec    eax
c000b6b0:	c1 eb 10             	shr    ebx,0x10
c000b6b3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b6b7:	89 f8                	mov    eax,edi
c000b6b9:	0f b6 f8             	movzx  edi,al
c000b6bc:	01 fe                	add    esi,edi
c000b6be:	01 f1                	add    ecx,esi
c000b6c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b6c4:	c1 f9 1f             	sar    ecx,0x1f
c000b6c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b6cb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b6d0:	0f b6 d2             	movzx  edx,dl
c000b6d3:	66 81 eb 6c 07       	sub    bx,0x76c
c000b6d8:	8b 0c 8d 60 fc 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe03a0]
c000b6df:	0f b7 f3             	movzx  esi,bx
c000b6e2:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b6e6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b6eb:	76 29                	jbe    c000b716 <datetimeToSeconds(datetime_t)+0x8f>
c000b6ed:	f6 c3 03             	test   bl,0x3
c000b6f0:	75 24                	jne    c000b716 <datetimeToSeconds(datetime_t)+0x8f>
c000b6f2:	31 d2                	xor    edx,edx
c000b6f4:	bf 64 00 00 00       	mov    edi,0x64
c000b6f9:	89 d8                	mov    eax,ebx
c000b6fb:	66 f7 f7             	div    di
c000b6fe:	66 85 d2             	test   dx,dx
c000b701:	75 12                	jne    c000b715 <datetimeToSeconds(datetime_t)+0x8e>
c000b703:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b709:	bf 90 01 00 00       	mov    edi,0x190
c000b70e:	99                   	cdq    
c000b70f:	f7 ff                	idiv   edi
c000b711:	85 d2                	test   edx,edx
c000b713:	75 01                	jne    c000b716 <datetimeToSeconds(datetime_t)+0x8f>
c000b715:	41                   	inc    ecx
c000b716:	66 83 fb 46          	cmp    bx,0x46
c000b71a:	76 45                	jbe    c000b761 <datetimeToSeconds(datetime_t)+0xda>
c000b71c:	bb 46 00 00 00       	mov    ebx,0x46
c000b721:	bf 64 00 00 00       	mov    edi,0x64
c000b726:	bd 90 01 00 00       	mov    ebp,0x190
c000b72b:	b8 6d 01 00 00       	mov    eax,0x16d
c000b730:	f6 c3 03             	test   bl,0x3
c000b733:	75 23                	jne    c000b758 <datetimeToSeconds(datetime_t)+0xd1>
c000b735:	89 d8                	mov    eax,ebx
c000b737:	99                   	cdq    
c000b738:	f7 ff                	idiv   edi
c000b73a:	85 d2                	test   edx,edx
c000b73c:	b8 6e 01 00 00       	mov    eax,0x16e
c000b741:	75 15                	jne    c000b758 <datetimeToSeconds(datetime_t)+0xd1>
c000b743:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b749:	99                   	cdq    
c000b74a:	f7 fd                	idiv   ebp
c000b74c:	31 c0                	xor    eax,eax
c000b74e:	85 d2                	test   edx,edx
c000b750:	0f 94 c0             	sete   al
c000b753:	05 6d 01 00 00       	add    eax,0x16d
c000b758:	43                   	inc    ebx
c000b759:	01 c1                	add    ecx,eax
c000b75b:	39 f3                	cmp    ebx,esi
c000b75d:	7c cc                	jl     c000b72b <datetimeToSeconds(datetime_t)+0xa4>
c000b75f:	eb 3b                	jmp    c000b79c <datetimeToSeconds(datetime_t)+0x115>
c000b761:	74 39                	je     c000b79c <datetimeToSeconds(datetime_t)+0x115>
c000b763:	b8 45 00 00 00       	mov    eax,0x45
c000b768:	89 c2                	mov    edx,eax
c000b76a:	83 e2 03             	and    edx,0x3
c000b76d:	39 f0                	cmp    eax,esi
c000b76f:	7e 13                	jle    c000b784 <datetimeToSeconds(datetime_t)+0xfd>
c000b771:	85 d2                	test   edx,edx
c000b773:	0f 94 c2             	sete   dl
c000b776:	0f b6 d2             	movzx  edx,dl
c000b779:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b77f:	48                   	dec    eax
c000b780:	29 d1                	sub    ecx,edx
c000b782:	eb e4                	jmp    c000b768 <datetimeToSeconds(datetime_t)+0xe1>
c000b784:	b8 6d 01 00 00       	mov    eax,0x16d
c000b789:	85 d2                	test   edx,edx
c000b78b:	75 0d                	jne    c000b79a <datetimeToSeconds(datetime_t)+0x113>
c000b78d:	31 c0                	xor    eax,eax
c000b78f:	66 85 db             	test   bx,bx
c000b792:	0f 95 c0             	setne  al
c000b795:	05 6d 01 00 00       	add    eax,0x16d
c000b79a:	29 c1                	sub    ecx,eax
c000b79c:	b8 80 51 01 00       	mov    eax,0x15180
c000b7a1:	f7 e9                	imul   ecx
c000b7a3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b7a7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b7ab:	83 c4 14             	add    esp,0x14
c000b7ae:	5b                   	pop    ebx
c000b7af:	5e                   	pop    esi
c000b7b0:	5f                   	pop    edi
c000b7b1:	5d                   	pop    ebp
c000b7b2:	c3                   	ret    
c000b7b3:	90                   	nop

c000b7b4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b7b4:	57                   	push   edi
c000b7b5:	56                   	push   esi
c000b7b6:	53                   	push   ebx
c000b7b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b7bb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b7bd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b7c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7c8:	e8 ba fe ff ff       	call   c000b687 <datetimeToSeconds(datetime_t)>
c000b7cd:	59                   	pop    ecx
c000b7ce:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b7d5:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b7db:	5b                   	pop    ebx
c000b7dc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b7e2:	89 cb                	mov    ebx,ecx
c000b7e4:	c1 fb 1f             	sar    ebx,0x1f
c000b7e7:	29 c8                	sub    eax,ecx
c000b7e9:	19 da                	sbb    edx,ebx
c000b7eb:	31 c9                	xor    ecx,ecx
c000b7ed:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b7f4:	74 05                	je     c000b7fb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b7f6:	b9 08 07 00 00       	mov    ecx,0x708
c000b7fb:	31 db                	xor    ebx,ebx
c000b7fd:	29 c8                	sub    eax,ecx
c000b7ff:	19 da                	sbb    edx,ebx
c000b801:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b805:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b809:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b80d:	5b                   	pop    ebx
c000b80e:	89 f8                	mov    eax,edi
c000b810:	5e                   	pop    esi
c000b811:	5f                   	pop    edi
c000b812:	ff e0                	jmp    eax

c000b814 <secondsToDatetime(unsigned long long)>:
c000b814:	55                   	push   ebp
c000b815:	57                   	push   edi
c000b816:	56                   	push   esi
c000b817:	53                   	push   ebx
c000b818:	83 ec 1c             	sub    esp,0x1c
c000b81b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b81f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b823:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b827:	6a 00                	push   0x0
c000b829:	68 80 51 01 00       	push   0x15180
c000b82e:	55                   	push   ebp
c000b82f:	57                   	push   edi
c000b830:	e8 ab 26 01 00       	call   c001dee0 <__udivdi3>
c000b835:	83 c4 10             	add    esp,0x10
c000b838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b83c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b842:	6a 00                	push   0x0
c000b844:	68 80 51 01 00       	push   0x15180
c000b849:	55                   	push   ebp
c000b84a:	57                   	push   edi
c000b84b:	e8 90 27 01 00       	call   c001dfe0 <__umoddi3>
c000b850:	bf 10 0e 00 00       	mov    edi,0xe10
c000b855:	83 c4 10             	add    esp,0x10
c000b858:	99                   	cdq    
c000b859:	f7 ff                	idiv   edi
c000b85b:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b85e:	89 d0                	mov    eax,edx
c000b860:	99                   	cdq    
c000b861:	bf 3c 00 00 00       	mov    edi,0x3c
c000b866:	f7 ff                	idiv   edi
c000b868:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b86b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b86e:	85 db                	test   ebx,ebx
c000b870:	79 11                	jns    c000b883 <secondsToDatetime(unsigned long long)+0x6f>
c000b872:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b876:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b87c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b881:	eb 07                	jmp    c000b88a <secondsToDatetime(unsigned long long)+0x76>
c000b883:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b888:	89 d8                	mov    eax,ebx
c000b88a:	99                   	cdq    
c000b88b:	f7 f9                	idiv   ecx
c000b88d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b891:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b896:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b89e:	01 c3                	add    ebx,eax
c000b8a0:	31 d2                	xor    edx,edx
c000b8a2:	89 d8                	mov    eax,ebx
c000b8a4:	bf b4 05 00 00       	mov    edi,0x5b4
c000b8a9:	f7 f1                	div    ecx
c000b8ab:	31 d2                	xor    edx,edx
c000b8ad:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b8b2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b8b5:	89 d8                	mov    eax,ebx
c000b8b7:	f7 f7                	div    edi
c000b8b9:	29 c1                	sub    ecx,eax
c000b8bb:	31 d2                	xor    edx,edx
c000b8bd:	89 d8                	mov    eax,ebx
c000b8bf:	f7 f5                	div    ebp
c000b8c1:	29 c1                	sub    ecx,eax
c000b8c3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b8c8:	89 c8                	mov    eax,ecx
c000b8ca:	31 d2                	xor    edx,edx
c000b8cc:	f7 f5                	div    ebp
c000b8ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8d2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b8d7:	89 c8                	mov    eax,ecx
c000b8d9:	31 d2                	xor    edx,edx
c000b8db:	f7 f5                	div    ebp
c000b8dd:	01 c3                	add    ebx,eax
c000b8df:	31 d2                	xor    edx,edx
c000b8e1:	89 c8                	mov    eax,ecx
c000b8e3:	f7 f7                	div    edi
c000b8e5:	29 c3                	sub    ebx,eax
c000b8e7:	bf 99 00 00 00       	mov    edi,0x99
c000b8ec:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b8f4:	29 c3                	sub    ebx,eax
c000b8f6:	31 d2                	xor    edx,edx
c000b8f8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8fb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8fe:	83 c1 02             	add    ecx,0x2
c000b901:	bb 05 00 00 00       	mov    ebx,0x5
c000b906:	89 c8                	mov    eax,ecx
c000b908:	f7 f7                	div    edi
c000b90a:	89 c7                	mov    edi,eax
c000b90c:	31 d2                	xor    edx,edx
c000b90e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b914:	83 c0 02             	add    eax,0x2
c000b917:	f7 f3                	div    ebx
c000b919:	89 eb                	mov    ebx,ebp
c000b91b:	29 c3                	sub    ebx,eax
c000b91d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b923:	19 c0                	sbb    eax,eax
c000b925:	31 d2                	xor    edx,edx
c000b927:	83 e0 0c             	and    eax,0xc
c000b92a:	88 1e                	mov    BYTE PTR [esi],bl
c000b92c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b930:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b938:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b93c:	83 f9 01             	cmp    ecx,0x1
c000b93f:	0f 96 c2             	setbe  dl
c000b942:	01 d0                	add    eax,edx
c000b944:	41                   	inc    ecx
c000b945:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b949:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b94c:	83 c4 1c             	add    esp,0x1c
c000b94f:	89 f0                	mov    eax,esi
c000b951:	5b                   	pop    ebx
c000b952:	5e                   	pop    esi
c000b953:	5f                   	pop    edi
c000b954:	5d                   	pop    ebp
c000b955:	c2 04 00             	ret    0x4

c000b958 <Clock::timeInDatetimeLocal()>:
c000b958:	53                   	push   ebx
c000b959:	83 ec 14             	sub    esp,0x14
c000b95c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b960:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b964:	e8 7d fc ff ff       	call   c000b5e6 <Clock::timeInSecondsLocal()>
c000b969:	83 c4 0c             	add    esp,0xc
c000b96c:	52                   	push   edx
c000b96d:	50                   	push   eax
c000b96e:	53                   	push   ebx
c000b96f:	e8 a0 fe ff ff       	call   c000b814 <secondsToDatetime(unsigned long long)>
c000b974:	83 c4 14             	add    esp,0x14
c000b977:	89 d8                	mov    eax,ebx
c000b979:	5b                   	pop    ebx
c000b97a:	c2 04 00             	ret    0x4
c000b97d:	90                   	nop

c000b97e <Device::hibernate()>:
c000b97e:	c3                   	ret    
c000b97f:	90                   	nop

c000b980 <Device::wake()>:
c000b980:	c3                   	ret    
c000b981:	90                   	nop

c000b982 <Device::detect()>:
c000b982:	c3                   	ret    
c000b983:	90                   	nop

c000b984 <Device::disableLegacy()>:
c000b984:	c3                   	ret    
c000b985:	90                   	nop

c000b986 <Device::powerSaving(PowerSavingLevel)>:
c000b986:	c3                   	ret    
c000b987:	90                   	nop

c000b988 <DriverlessDevice::close(int, int, void*)>:
c000b988:	31 c0                	xor    eax,eax
c000b98a:	c3                   	ret    
c000b98b:	90                   	nop

c000b98c <DriverlessDevice::detect()>:
c000b98c:	c3                   	ret    
c000b98d:	90                   	nop

c000b98e <DriverlessDevice::open(int, int, void*)>:
c000b98e:	83 ec 18             	sub    esp,0x18
c000b991:	68 90 fc 01 c0       	push   0xc001fc90
c000b996:	e8 7c 4a 00 00       	call   c0010417 <KePanic(char const*)>
c000b99b:	83 c8 ff             	or     eax,0xffffffff
c000b99e:	83 c4 1c             	add    esp,0x1c
c000b9a1:	c3                   	ret    

c000b9a2 <Device::~Device()>:
c000b9a2:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c000b9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9ab:	89 10                	mov    DWORD PTR [eax],edx
c000b9ad:	90                   	nop
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::~Device()>:
c000b9b0:	83 ec 0c             	sub    esp,0xc
c000b9b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9b7:	e8 e6 ff ff ff       	call   c000b9a2 <Device::~Device()>
c000b9bc:	83 c4 04             	add    esp,0x4
c000b9bf:	83 ec 08             	sub    esp,0x8
c000b9c2:	68 58 01 00 00       	push   0x158
c000b9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cb:	e8 9d eb ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000b9d0:	83 c4 10             	add    esp,0x10
c000b9d3:	83 c4 0c             	add    esp,0xc
c000b9d6:	c3                   	ret    
c000b9d7:	90                   	nop

c000b9d8 <Device::findAndLoadDriver()>:
c000b9d8:	c7 44 24 04 ae fc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fcae
c000b9e0:	e9 7e ec ff ff       	jmp    c000a663 <Dbg::kprintf(char const*, ...)>
c000b9e5:	90                   	nop

c000b9e6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b9e6:	57                   	push   edi
c000b9e7:	b9 09 00 00 00       	mov    ecx,0x9
c000b9ec:	56                   	push   esi
c000b9ed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b9f1:	81 c7 18 01 00 00    	add    edi,0x118
c000b9f7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b9fb:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c000ba02:	fc                   	cld    
c000ba03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ba05:	5e                   	pop    esi
c000ba06:	5f                   	pop    edi
c000ba07:	c3                   	ret    

c000ba08 <Device::preOpenACPI(void*, char*, char*)>:
c000ba08:	57                   	push   edi
c000ba09:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ba0e:	56                   	push   esi
c000ba0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba1b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ba25:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ba2b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ba31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba33:	b9 0e 00 00 00       	mov    ecx,0xe
c000ba38:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ba3e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba44:	5e                   	pop    esi
c000ba45:	5f                   	pop    edi
c000ba46:	c3                   	ret    
c000ba47:	90                   	nop

c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ba48:	53                   	push   ebx
c000ba49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba59:	0f b6 c0             	movzx  eax,al
c000ba5c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba68:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba6c:	5b                   	pop    ebx
c000ba6d:	e9 a4 05 00 00       	jmp    c000c016 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba72 <Device::getParent()>:
c000ba72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba76:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba7c:	c3                   	ret    
c000ba7d:	90                   	nop

c000ba7e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba7e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba8f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba97:	e9 e3 06 00 00       	jmp    c000c17f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba9c <Device::addChild(Device*)>:
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 08             	sub    esp,0x8
c000baa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000baa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000baae:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bab4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bab6:	85 d2                	test   edx,edx
c000bab8:	74 04                	je     c000babe <Device::addChild(Device*)+0x22>
c000baba:	89 d3                	mov    ebx,edx
c000babc:	eb f6                	jmp    c000bab4 <Device::addChild(Device*)+0x18>
c000babe:	83 ec 0c             	sub    esp,0xc
c000bac1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bac4:	6a 08                	push   0x8
c000bac6:	e8 a8 bd ff ff       	call   c0007873 <malloc>
c000bacb:	89 03                	mov    DWORD PTR [ebx],eax
c000bacd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bada:	83 c4 18             	add    esp,0x18
c000badd:	5b                   	pop    ebx
c000bade:	c3                   	ret    
c000badf:	90                   	nop

c000bae0 <Device::removeAllChildren()>:
c000bae0:	56                   	push   esi
c000bae1:	53                   	push   ebx
c000bae2:	52                   	push   edx
c000bae3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bae7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000baed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baf0:	74 17                	je     c000bb09 <Device::removeAllChildren()+0x29>
c000baf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000baf5:	85 c0                	test   eax,eax
c000baf7:	74 0c                	je     c000bb05 <Device::removeAllChildren()+0x25>
c000baf9:	83 ec 0c             	sub    esp,0xc
c000bafc:	8b 10                	mov    edx,DWORD PTR [eax]
c000bafe:	50                   	push   eax
c000baff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bb02:	83 c4 10             	add    esp,0x10
c000bb05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb07:	eb e4                	jmp    c000baed <Device::removeAllChildren()+0xd>
c000bb09:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb15:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb22:	58                   	pop    eax
c000bb23:	5b                   	pop    ebx
c000bb24:	5e                   	pop    esi
c000bb25:	c3                   	ret    

c000bb26 <Device::hibernateAll()>:
c000bb26:	53                   	push   ebx
c000bb27:	83 ec 14             	sub    esp,0x14
c000bb2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb30:	53                   	push   ebx
c000bb31:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb3a:	83 c4 10             	add    esp,0x10
c000bb3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb40:	74 0f                	je     c000bb51 <Device::hibernateAll()+0x2b>
c000bb42:	83 ec 0c             	sub    esp,0xc
c000bb45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb48:	e8 d9 ff ff ff       	call   c000bb26 <Device::hibernateAll()>
c000bb4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb4f:	eb e9                	jmp    c000bb3a <Device::hibernateAll()+0x14>
c000bb51:	83 c4 08             	add    esp,0x8
c000bb54:	5b                   	pop    ebx
c000bb55:	c3                   	ret    

c000bb56 <Device::wakeAll()>:
c000bb56:	53                   	push   ebx
c000bb57:	83 ec 14             	sub    esp,0x14
c000bb5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb60:	53                   	push   ebx
c000bb61:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb64:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb6a:	83 c4 10             	add    esp,0x10
c000bb6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb70:	74 0f                	je     c000bb81 <Device::wakeAll()+0x2b>
c000bb72:	83 ec 0c             	sub    esp,0xc
c000bb75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb78:	e8 d9 ff ff ff       	call   c000bb56 <Device::wakeAll()>
c000bb7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb7f:	eb e9                	jmp    c000bb6a <Device::wakeAll()+0x14>
c000bb81:	83 c4 08             	add    esp,0x8
c000bb84:	5b                   	pop    ebx
c000bb85:	c3                   	ret    

c000bb86 <Device::detectAll()>:
c000bb86:	53                   	push   ebx
c000bb87:	83 ec 14             	sub    esp,0x14
c000bb8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb90:	53                   	push   ebx
c000bb91:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb9a:	83 c4 10             	add    esp,0x10
c000bb9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bba0:	74 0f                	je     c000bbb1 <Device::detectAll()+0x2b>
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bba8:	e8 d9 ff ff ff       	call   c000bb86 <Device::detectAll()>
c000bbad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbaf:	eb e9                	jmp    c000bb9a <Device::detectAll()+0x14>
c000bbb1:	83 c4 08             	add    esp,0x8
c000bbb4:	5b                   	pop    ebx
c000bbb5:	c3                   	ret    

c000bbb6 <Device::disableLegacyAll()>:
c000bbb6:	c3                   	ret    
c000bbb7:	90                   	nop

c000bbb8 <Device::loadDriversForAll()>:
c000bbb8:	c3                   	ret    
c000bbb9:	90                   	nop

c000bbba <Device::closeAll()>:
c000bbba:	53                   	push   ebx
c000bbbb:	83 ec 08             	sub    esp,0x8
c000bbbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbc4:	6a 00                	push   0x0
c000bbc6:	6a 00                	push   0x0
c000bbc8:	6a 00                	push   0x0
c000bbca:	53                   	push   ebx
c000bbcb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bbce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbd4:	83 c4 10             	add    esp,0x10
c000bbd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbda:	74 0f                	je     c000bbeb <Device::closeAll()+0x31>
c000bbdc:	83 ec 0c             	sub    esp,0xc
c000bbdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbe2:	e8 d3 ff ff ff       	call   c000bbba <Device::closeAll()>
c000bbe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbe9:	eb e9                	jmp    c000bbd4 <Device::closeAll()+0x1a>
c000bbeb:	83 c4 08             	add    esp,0x8
c000bbee:	5b                   	pop    ebx
c000bbef:	c3                   	ret    

c000bbf0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bbf0:	56                   	push   esi
c000bbf1:	53                   	push   ebx
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbf9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bbfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbff:	56                   	push   esi
c000bc00:	53                   	push   ebx
c000bc01:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bc04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc0a:	83 c4 10             	add    esp,0x10
c000bc0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc10:	74 0f                	je     c000bc21 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bc12:	52                   	push   edx
c000bc13:	52                   	push   edx
c000bc14:	56                   	push   esi
c000bc15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc18:	e8 d3 ff ff ff       	call   c000bbf0 <Device::powerSavingAll(PowerSavingLevel)>
c000bc1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc1f:	eb e9                	jmp    c000bc0a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bc21:	58                   	pop    eax
c000bc22:	5b                   	pop    ebx
c000bc23:	5e                   	pop    esi
c000bc24:	c3                   	ret    
c000bc25:	90                   	nop

c000bc26 <Device::setName(char const*)>:
c000bc26:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bc2e:	e9 bd 49 ff ff       	jmp    c00005f0 <strcpy>
c000bc33:	90                   	nop

c000bc34 <Device::Device(char const*)>:
c000bc34:	83 ec 1c             	sub    esp,0x1c
c000bc37:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c000bc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc40:	89 10                	mov    DWORD PTR [eax],edx
c000bc42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc46:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc54:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc62:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc70:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc7a:	83 ec 08             	sub    esp,0x8
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc85:	e8 9c ff ff ff       	call   c000bc26 <Device::setName(char const*)>
c000bc8a:	83 c4 10             	add    esp,0x10
c000bc8d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc95:	83 ec 0c             	sub    esp,0xc
c000bc98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc9c:	e8 d2 bb ff ff       	call   c0007873 <malloc>
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bcaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bcb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bcb5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bcbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bcc5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bcd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bcdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bceb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bcf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcf6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bd0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd12:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bd1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd20:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bd2a:	90                   	nop
c000bd2b:	83 c4 1c             	add    esp,0x1c
c000bd2e:	c3                   	ret    
c000bd2f:	90                   	nop

c000bd30 <Device::getName()>:
c000bd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd34:	05 d0 00 00 00       	add    eax,0xd0
c000bd39:	c3                   	ret    

c000bd3a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bd3a:	83 ec 0c             	sub    esp,0xc
c000bd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd41:	83 ec 08             	sub    esp,0x8
c000bd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd48:	50                   	push   eax
c000bd49:	e8 e6 fe ff ff       	call   c000bc34 <Device::Device(char const*)>
c000bd4e:	83 c4 10             	add    esp,0x10
c000bd51:	ba 1c fd 01 c0       	mov    edx,0xc001fd1c
c000bd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5a:	89 10                	mov    DWORD PTR [eax],edx
c000bd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd60:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd6a:	90                   	nop
c000bd6b:	83 c4 0c             	add    esp,0xc
c000bd6e:	c3                   	ret    
c000bd6f:	90                   	nop

c000bd70 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd70:	57                   	push   edi
c000bd71:	56                   	push   esi
c000bd72:	53                   	push   ebx
c000bd73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd7f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd85:	75 0c                	jne    c000bd93 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd87:	52                   	push   edx
c000bd88:	52                   	push   edx
c000bd89:	53                   	push   ebx
c000bd8a:	56                   	push   esi
c000bd8b:	e8 02 26 01 00       	call   c001e392 <LinkedList<Device>::addElement(Device*)>
c000bd90:	83 c4 10             	add    esp,0x10
c000bd93:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd9c:	74 12                	je     c000bdb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd9e:	50                   	push   eax
c000bd9f:	57                   	push   edi
c000bda0:	56                   	push   esi
c000bda1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bda4:	e8 c7 ff ff ff       	call   c000bd70 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bda9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bdab:	83 c4 10             	add    esp,0x10
c000bdae:	eb e9                	jmp    c000bd99 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bdb0:	5b                   	pop    ebx
c000bdb1:	5e                   	pop    esi
c000bdb2:	5f                   	pop    edi
c000bdb3:	c3                   	ret    

c000bdb4 <getDevicesOfType(DeviceType)>:
c000bdb4:	53                   	push   ebx
c000bdb5:	83 ec 14             	sub    esp,0x14
c000bdb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdbc:	53                   	push   ebx
c000bdbd:	e8 ac 26 01 00       	call   c001e46e <LinkedList<Device>::LinkedList()>
c000bdc2:	83 c4 0c             	add    esp,0xc
c000bdc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdc9:	53                   	push   ebx
c000bdca:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bdd0:	e8 9b ff ff ff       	call   c000bd70 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bdd5:	83 c4 18             	add    esp,0x18
c000bdd8:	89 d8                	mov    eax,ebx
c000bdda:	5b                   	pop    ebx
c000bddb:	c2 04 00             	ret    0x4
c000bdde:	66 90                	xchg   ax,ax

c000bde0 <HardDiskController::HardDiskController(char const*)>:
c000bde0:	83 ec 0c             	sub    esp,0xc
c000bde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde7:	83 ec 08             	sub    esp,0x8
c000bdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdee:	50                   	push   eax
c000bdef:	e8 40 fe ff ff       	call   c000bc34 <Device::Device(char const*)>
c000bdf4:	83 c4 10             	add    esp,0x10
c000bdf7:	ba 48 fd 01 c0       	mov    edx,0xc001fd48
c000bdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be00:	89 10                	mov    DWORD PTR [eax],edx
c000be02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be06:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000be10:	90                   	nop
c000be11:	83 c4 0c             	add    esp,0xc
c000be14:	c3                   	ret    
c000be15:	90                   	nop
c000be16:	66 90                	xchg   ax,ax

c000be18 <HardDiskController::~HardDiskController()>:
c000be18:	83 ec 0c             	sub    esp,0xc
c000be1b:	ba 48 fd 01 c0       	mov    edx,0xc001fd48
c000be20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be24:	89 10                	mov    DWORD PTR [eax],edx
c000be26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2a:	83 ec 0c             	sub    esp,0xc
c000be2d:	50                   	push   eax
c000be2e:	e8 6f fb ff ff       	call   c000b9a2 <Device::~Device()>
c000be33:	83 c4 10             	add    esp,0x10
c000be36:	90                   	nop
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	c3                   	ret    
c000be3b:	90                   	nop

c000be3c <HardDiskController::~HardDiskController()>:
c000be3c:	83 ec 0c             	sub    esp,0xc
c000be3f:	83 ec 0c             	sub    esp,0xc
c000be42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be46:	e8 cd ff ff ff       	call   c000be18 <HardDiskController::~HardDiskController()>
c000be4b:	83 c4 10             	add    esp,0x10
c000be4e:	83 ec 08             	sub    esp,0x8
c000be51:	68 58 01 00 00       	push   0x158
c000be56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be5a:	e8 0e e7 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000be5f:	83 c4 10             	add    esp,0x10
c000be62:	83 c4 0c             	add    esp,0xc
c000be65:	c3                   	ret    

c000be66 <PhysicalDisk::eject()>:
c000be66:	83 c8 ff             	or     eax,0xffffffff
c000be69:	c3                   	ret    

c000be6a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be6a:	83 ec 0c             	sub    esp,0xc
c000be6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be71:	83 ec 08             	sub    esp,0x8
c000be74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be78:	50                   	push   eax
c000be79:	e8 b6 fd ff ff       	call   c000bc34 <Device::Device(char const*)>
c000be7e:	83 c4 10             	add    esp,0x10
c000be81:	ba 74 fd 01 c0       	mov    edx,0xc001fd74
c000be86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be8a:	89 10                	mov    DWORD PTR [eax],edx
c000be8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be90:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be9b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000beb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000beb8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000becc:	90                   	nop
c000becd:	83 c4 0c             	add    esp,0xc
c000bed0:	c3                   	ret    
c000bed1:	90                   	nop

c000bed2 <PhysicalDisk::startCache()>:
c000bed2:	56                   	push   esi
c000bed3:	53                   	push   ebx
c000bed4:	83 ec 10             	sub    esp,0x10
c000bed7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bedb:	6a 44                	push   0x44
c000bedd:	e8 91 b9 ff ff       	call   c0007873 <malloc>
c000bee2:	89 c6                	mov    esi,eax
c000bee4:	58                   	pop    eax
c000bee5:	5a                   	pop    edx
c000bee6:	53                   	push   ebx
c000bee7:	56                   	push   esi
c000bee8:	e8 9f 16 00 00       	call   c000d58c <VCache::VCache(PhysicalDisk*)>
c000beed:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bef3:	83 c4 14             	add    esp,0x14
c000bef6:	5b                   	pop    ebx
c000bef7:	5e                   	pop    esi
c000bef8:	c3                   	ret    
c000bef9:	90                   	nop

c000befa <PhysicalDisk::~PhysicalDisk()>:
c000befa:	83 ec 0c             	sub    esp,0xc
c000befd:	ba 74 fd 01 c0       	mov    edx,0xc001fd74
c000bf02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf06:	89 10                	mov    DWORD PTR [eax],edx
c000bf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf0c:	83 ec 0c             	sub    esp,0xc
c000bf0f:	50                   	push   eax
c000bf10:	e8 8d fa ff ff       	call   c000b9a2 <Device::~Device()>
c000bf15:	83 c4 10             	add    esp,0x10
c000bf18:	90                   	nop
c000bf19:	83 c4 0c             	add    esp,0xc
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <PhysicalDisk::~PhysicalDisk()>:
c000bf1e:	83 ec 0c             	sub    esp,0xc
c000bf21:	83 ec 0c             	sub    esp,0xc
c000bf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf28:	e8 cd ff ff ff       	call   c000befa <PhysicalDisk::~PhysicalDisk()>
c000bf2d:	83 c4 10             	add    esp,0x10
c000bf30:	83 ec 08             	sub    esp,0x8
c000bf33:	68 6c 01 00 00       	push   0x16c
c000bf38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3c:	e8 2c e6 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000bf41:	83 c4 10             	add    esp,0x10
c000bf44:	83 c4 0c             	add    esp,0xc
c000bf47:	c3                   	ret    

c000bf48 <int_handler>:
c000bf48:	55                   	push   ebp
c000bf49:	57                   	push   edi
c000bf4a:	56                   	push   esi
c000bf4b:	53                   	push   ebx
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf56:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf5a:	74 0b                	je     c000bf67 <int_handler+0x1f>
c000bf5c:	fa                   	cli    
c000bf5d:	f4                   	hlt    
c000bf5e:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf65:	75 f5                	jne    c000bf5c <int_handler+0x14>
c000bf67:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf6a:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf6d:	83 f8 17             	cmp    eax,0x17
c000bf70:	76 3d                	jbe    c000bfaf <int_handler+0x67>
c000bf72:	c1 e6 04             	shl    esi,0x4
c000bf75:	31 db                	xor    ebx,ebx
c000bf77:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf7d:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf83:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf87:	85 c0                	test   eax,eax
c000bf89:	74 12                	je     c000bf9d <int_handler+0x55>
c000bf8b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf8e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf92:	74 29                	je     c000bfbd <int_handler+0x75>
c000bf94:	51                   	push   ecx
c000bf95:	51                   	push   ecx
c000bf96:	52                   	push   edx
c000bf97:	57                   	push   edi
c000bf98:	ff d0                	call   eax
c000bf9a:	83 c4 10             	add    esp,0x10
c000bf9d:	43                   	inc    ebx
c000bf9e:	83 fb 04             	cmp    ebx,0x4
c000bfa1:	75 e0                	jne    c000bf83 <int_handler+0x3b>
c000bfa3:	83 c4 0c             	add    esp,0xc
c000bfa6:	31 c0                	xor    eax,eax
c000bfa8:	31 d2                	xor    edx,edx
c000bfaa:	5b                   	pop    ebx
c000bfab:	5e                   	pop    esi
c000bfac:	5f                   	pop    edi
c000bfad:	5d                   	pop    ebp
c000bfae:	c3                   	ret    
c000bfaf:	83 ec 0c             	sub    esp,0xc
c000bfb2:	50                   	push   eax
c000bfb3:	e8 1e ad 00 00       	call   c0016cd6 <HalEndOfInterrupt(int)>
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	eb b5                	jmp    c000bf72 <int_handler+0x2a>
c000bfbd:	53                   	push   ebx
c000bfbe:	53                   	push   ebx
c000bfbf:	52                   	push   edx
c000bfc0:	57                   	push   edi
c000bfc1:	ff d0                	call   eax
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	83 c4 0c             	add    esp,0xc
c000bfc9:	5b                   	pop    ebx
c000bfca:	5e                   	pop    esi
c000bfcb:	5f                   	pop    edi
c000bfcc:	5d                   	pop    ebp
c000bfcd:	c3                   	ret    

c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bfce:	56                   	push   esi
c000bfcf:	31 c0                	xor    eax,eax
c000bfd1:	53                   	push   ebx
c000bfd2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bfd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bfda:	89 ca                	mov    edx,ecx
c000bfdc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfe0:	c1 e2 04             	shl    edx,0x4
c000bfe3:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bfeb:	74 15                	je     c000c002 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bfed:	40                   	inc    eax
c000bfee:	83 f8 04             	cmp    eax,0x4
c000bff1:	75 f0                	jne    c000bfe3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bff3:	c7 44 24 0c a4 fd 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fda4
c000bffb:	5b                   	pop    ebx
c000bffc:	5e                   	pop    esi
c000bffd:	e9 15 44 00 00       	jmp    c0010417 <KePanic(char const*)>
c000c002:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c005:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000c00c:	5b                   	pop    ebx
c000c00d:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000c014:	5e                   	pop    esi
c000c015:	c3                   	ret    

c000c016 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c016:	57                   	push   edi
c000c017:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c01d:	56                   	push   esi
c000c01e:	53                   	push   ebx
c000c01f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c023:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c027:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c02e:	74 5b                	je     c000c08b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c030:	89 c7                	mov    edi,eax
c000c032:	84 c0                	test   al,al
c000c034:	74 24                	je     c000c05a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c036:	83 fe 0f             	cmp    esi,0xf
c000c039:	0f 8f d6 00 00 00    	jg     c000c115 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xff>
c000c03f:	8a 86 e0 17 02 c0    	mov    al,BYTE PTR [esi-0x3ffde820]
c000c045:	25 ff 00 00 00       	and    eax,0xff
c000c04a:	89 c6                	mov    esi,eax
c000c04c:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000c054:	66 d1 ef             	shr    di,1
c000c057:	83 e7 01             	and    edi,0x1
c000c05a:	50                   	push   eax
c000c05b:	31 db                	xor    ebx,ebx
c000c05d:	50                   	push   eax
c000c05e:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c063:	50                   	push   eax
c000c064:	68 b1 fd 01 c0       	push   0xc001fdb1
c000c069:	e8 f5 e5 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000c06e:	8b 15 60 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b60
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	85 d2                	test   edx,edx
c000c079:	7f 4f                	jg     c000c0ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb4>
c000c07b:	83 ec 0c             	sub    esp,0xc
c000c07e:	68 c8 fd 01 c0       	push   0xc001fdc8
c000c083:	e8 8f 43 00 00       	call   c0010417 <KePanic(char const*)>
c000c088:	83 c4 10             	add    esp,0x10
c000c08b:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c08e:	31 d2                	xor    edx,edx
c000c090:	89 c8                	mov    eax,ecx
c000c092:	c1 e0 04             	shl    eax,0x4
c000c095:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c09c:	85 db                	test   ebx,ebx
c000c09e:	0f 84 88 00 00 00    	je     c000c12c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x116>
c000c0a4:	42                   	inc    edx
c000c0a5:	83 fa 04             	cmp    edx,0x4
c000c0a8:	75 eb                	jne    c000c095 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c0aa:	83 ec 0c             	sub    esp,0xc
c000c0ad:	68 1c fe 01 c0       	push   0xc001fe1c
c000c0b2:	e8 60 43 00 00       	call   c0010417 <KePanic(char const*)>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	83 c8 ff             	or     eax,0xffffffff
c000c0bd:	5b                   	pop    ebx
c000c0be:	5e                   	pop    esi
c000c0bf:	5f                   	pop    edi
c000c0c0:	c3                   	ret    
c000c0c1:	43                   	inc    ebx
c000c0c2:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c0c8:	7e b1                	jle    c000c07b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c0ca:	50                   	push   eax
c000c0cb:	50                   	push   eax
c000c0cc:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0d3:	56                   	push   esi
c000c0d4:	50                   	push   eax
c000c0d5:	e8 d2 11 01 00       	call   c001d2ac <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	84 c0                	test   al,al
c000c0df:	74 e0                	je     c000c0c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xab>
c000c0e1:	81 e7 ff 00 00 00    	and    edi,0xff
c000c0e7:	50                   	push   eax
c000c0e8:	57                   	push   edi
c000c0e9:	8d 46 20             	lea    eax,[esi+0x20]
c000c0ec:	6a 00                	push   0x0
c000c0ee:	25 ff 00 00 00       	and    eax,0xff
c000c0f3:	50                   	push   eax
c000c0f4:	89 f0                	mov    eax,esi
c000c0f6:	6a 00                	push   0x0
c000c0f8:	25 ff 00 00 00       	and    eax,0xff
c000c0fd:	6a 00                	push   0x0
c000c0ff:	50                   	push   eax
c000c100:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c107:	50                   	push   eax
c000c108:	e8 19 13 01 00       	call   c001d426 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	e9 76 ff ff ff       	jmp    c000c08b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c115:	83 ec 0c             	sub    esp,0xc
c000c118:	31 ff                	xor    edi,edi
c000c11a:	68 e4 fd 01 c0       	push   0xc001fde4
c000c11f:	e8 f3 42 00 00       	call   c0010417 <KePanic(char const*)>
c000c124:	83 c4 10             	add    esp,0x10
c000c127:	e9 2e ff ff ff       	jmp    c000c05a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c12c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c12f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c133:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c13a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c13e:	5b                   	pop    ebx
c000c13f:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c146:	89 f0                	mov    eax,esi
c000c148:	5e                   	pop    esi
c000c149:	5f                   	pop    edi
c000c14a:	c3                   	ret    

c000c14b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c14b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c14f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c153:	c1 e0 04             	shl    eax,0x4
c000c156:	8d 50 10             	lea    edx,[eax+0x10]
c000c159:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c15f:	74 08                	je     c000c169 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c161:	83 c0 04             	add    eax,0x4
c000c164:	39 d0                	cmp    eax,edx
c000c166:	75 f1                	jne    c000c159 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c168:	c3                   	ret    
c000c169:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c173:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c17d:	eb e2                	jmp    c000c161 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c17f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c17f:	53                   	push   ebx
c000c180:	83 ec 08             	sub    esp,0x8
c000c183:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c187:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c18c:	74 0e                	je     c000c19c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c18e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c193:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c19a:	75 37                	jne    c000c1d3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a0:	83 c0 20             	add    eax,0x20
c000c1a3:	c1 e0 04             	shl    eax,0x4
c000c1a6:	8d 50 10             	lea    edx,[eax+0x10]
c000c1a9:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c1af:	74 0c                	je     c000c1bd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c1b1:	83 c0 04             	add    eax,0x4
c000c1b4:	39 d0                	cmp    eax,edx
c000c1b6:	75 f1                	jne    c000c1a9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c1b8:	83 c4 08             	add    esp,0x8
c000c1bb:	5b                   	pop    ebx
c000c1bc:	c3                   	ret    
c000c1bd:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1c7:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1d1:	eb de                	jmp    c000c1b1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c1d3:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c1d8:	7f 12                	jg     c000c1ec <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c1da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1de:	31 c0                	xor    eax,eax
c000c1e0:	8a 81 e0 17 02 c0    	mov    al,BYTE PTR [ecx-0x3ffde820]
c000c1e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ea:	eb b0                	jmp    c000c19c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1ec:	83 ec 0c             	sub    esp,0xc
c000c1ef:	68 d5 fd 01 c0       	push   0xc001fdd5
c000c1f4:	e8 1e 42 00 00       	call   c0010417 <KePanic(char const*)>
c000c1f9:	83 c4 10             	add    esp,0x10
c000c1fc:	eb 9e                	jmp    c000c19c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1fe <setupINTS()>:
c000c1fe:	31 c0                	xor    eax,eax
c000c200:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c20a:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c214:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c21e:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c228:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c232:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c23c:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c246:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c250:	83 c0 10             	add    eax,0x10
c000c253:	3d 00 10 00 00       	cmp    eax,0x1000
c000c258:	75 a6                	jne    c000c200 <setupINTS()+0x2>
c000c25a:	c3                   	ret    

c000c25b <convertLegacyIRQNumber(int)>:
c000c25b:	83 ec 0c             	sub    esp,0xc
c000c25e:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c268:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c26f:	74 0f                	je     c000c280 <convertLegacyIRQNumber(int)+0x25>
c000c271:	83 f8 0f             	cmp    eax,0xf
c000c274:	7f 0e                	jg     c000c284 <convertLegacyIRQNumber(int)+0x29>
c000c276:	31 c9                	xor    ecx,ecx
c000c278:	8a 88 e0 17 02 c0    	mov    cl,BYTE PTR [eax-0x3ffde820]
c000c27e:	89 c8                	mov    eax,ecx
c000c280:	83 c4 0c             	add    esp,0xc
c000c283:	c3                   	ret    
c000c284:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c288:	83 ec 0c             	sub    esp,0xc
c000c28b:	68 e4 fd 01 c0       	push   0xc001fde4
c000c290:	e8 82 41 00 00       	call   c0010417 <KePanic(char const*)>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c29c:	83 c4 0c             	add    esp,0xc
c000c29f:	c3                   	ret    

c000c2a0 <startGUI(void*)>:
c000c2a0:	55                   	push   ebp
c000c2a1:	89 e5                	mov    ebp,esp
c000c2a3:	53                   	push   ebx
c000c2a4:	83 ec 04             	sub    esp,0x4
c000c2a7:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2ac:	48                   	dec    eax
c000c2ad:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2b2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2b7:	85 c0                	test   eax,eax
c000c2b9:	75 01                	jne    c000c2bc <startGUI(void*)+0x1c>
c000c2bb:	fb                   	sti    
c000c2bc:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2c2:	83 ec 08             	sub    esp,0x8
c000c2c5:	6a 01                	push   0x1
c000c2c7:	68 41 fe 01 c0       	push   0xc001fe41
c000c2cc:	e8 27 7e 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000c2d1:	83 c4 10             	add    esp,0x10
c000c2d4:	83 ec 08             	sub    esp,0x8
c000c2d7:	53                   	push   ebx
c000c2d8:	50                   	push   eax
c000c2d9:	e8 4f 80 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000c2de:	83 c4 10             	add    esp,0x10
c000c2e1:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2e7:	83 ec 08             	sub    esp,0x8
c000c2ea:	6a 01                	push   0x1
c000c2ec:	68 5b fe 01 c0       	push   0xc001fe5b
c000c2f1:	e8 02 7e 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000c2f6:	83 c4 10             	add    esp,0x10
c000c2f9:	83 ec 08             	sub    esp,0x8
c000c2fc:	53                   	push   ebx
c000c2fd:	50                   	push   eax
c000c2fe:	e8 2a 80 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	90                   	nop
c000c307:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c30a:	c9                   	leave  
c000c30b:	c3                   	ret    

c000c30c <startGUIVESA(void*)>:
c000c30c:	55                   	push   ebp
c000c30d:	89 e5                	mov    ebp,esp
c000c30f:	53                   	push   ebx
c000c310:	83 ec 04             	sub    esp,0x4
c000c313:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c318:	48                   	dec    eax
c000c319:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c31e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c323:	85 c0                	test   eax,eax
c000c325:	75 01                	jne    c000c328 <startGUIVESA(void*)+0x1c>
c000c327:	fb                   	sti    
c000c328:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c32e:	83 ec 08             	sub    esp,0x8
c000c331:	6a 01                	push   0x1
c000c333:	68 79 fe 01 c0       	push   0xc001fe79
c000c338:	e8 bb 7d 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000c33d:	83 c4 10             	add    esp,0x10
c000c340:	83 ec 08             	sub    esp,0x8
c000c343:	53                   	push   ebx
c000c344:	50                   	push   eax
c000c345:	e8 e3 7f 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c353:	83 ec 08             	sub    esp,0x8
c000c356:	6a 01                	push   0x1
c000c358:	68 5b fe 01 c0       	push   0xc001fe5b
c000c35d:	e8 96 7d 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000c362:	83 c4 10             	add    esp,0x10
c000c365:	83 ec 08             	sub    esp,0x8
c000c368:	53                   	push   ebx
c000c369:	50                   	push   eax
c000c36a:	e8 be 7f 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	90                   	nop
c000c373:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c376:	c9                   	leave  
c000c377:	c3                   	ret    

c000c378 <sendKeyToTerminal(unsigned char)>:
c000c378:	55                   	push   ebp
c000c379:	89 e5                	mov    ebp,esp
c000c37b:	83 ec 28             	sub    esp,0x28
c000c37e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c381:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c384:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c38a:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c38d:	25 ff 00 00 00       	and    eax,0xff
c000c392:	83 ec 08             	sub    esp,0x8
c000c395:	50                   	push   eax
c000c396:	52                   	push   edx
c000c397:	e8 8e c7 ff ff       	call   c0008b2a <VgaText::receiveKey(unsigned char)>
c000c39c:	83 c4 10             	add    esp,0x10
c000c39f:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c3a3:	74 10                	je     c000c3b5 <sendKeyToTerminal(unsigned char)+0x3d>
c000c3a5:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c3a9:	74 0a                	je     c000c3b5 <sendKeyToTerminal(unsigned char)+0x3d>
c000c3ab:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c3af:	0f 85 8f 00 00 00    	jne    c000c444 <sendKeyToTerminal(unsigned char)+0xcc>
c000c3b5:	fa                   	cli    
c000c3b6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3bb:	40                   	inc    eax
c000c3bc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3c1:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3c6:	40                   	inc    eax
c000c3c7:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3cc:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c3d1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3d4:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c3de:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c3e2:	74 1f                	je     c000c403 <sendKeyToTerminal(unsigned char)+0x8b>
c000c3e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c3e7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c3ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c3ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3f3:	83 ec 0c             	sub    esp,0xc
c000c3f6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3f9:	e8 42 8c 00 00       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c000c3fe:	83 c4 10             	add    esp,0x10
c000c401:	eb db                	jmp    c000c3de <sendKeyToTerminal(unsigned char)+0x66>
c000c403:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c408:	48                   	dec    eax
c000c409:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c40e:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c413:	85 c0                	test   eax,eax
c000c415:	75 18                	jne    c000c42f <sendKeyToTerminal(unsigned char)+0xb7>
c000c417:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c41c:	85 c0                	test   eax,eax
c000c41e:	74 0f                	je     c000c42f <sendKeyToTerminal(unsigned char)+0xb7>
c000c420:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c42a:	e8 31 87 00 00       	call   c0014b60 <schedule()>
c000c42f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c434:	48                   	dec    eax
c000c435:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c43a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c43f:	85 c0                	test   eax,eax
c000c441:	75 01                	jne    c000c444 <sendKeyToTerminal(unsigned char)+0xcc>
c000c443:	fb                   	sti    
c000c444:	90                   	nop
c000c445:	c9                   	leave  
c000c446:	c3                   	ret    

c000c447 <sendKeyboardToken(KeyboardToken)>:
c000c447:	55                   	push   ebp
c000c448:	89 e5                	mov    ebp,esp
c000c44a:	83 ec 18             	sub    esp,0x18
c000c44d:	e8 15 40 00 00       	call   c0010467 <Krnl::userIOReceived()>
c000c452:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c458:	25 ff ff 00 00       	and    eax,0xffff
c000c45d:	83 f2 01             	xor    edx,0x1
c000c460:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c466:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c46b:	85 c0                	test   eax,eax
c000c46d:	74 24                	je     c000c493 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c46f:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c475:	83 ec 04             	sub    esp,0x4
c000c478:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c47d:	83 ec 08             	sub    esp,0x8
c000c480:	89 e2                	mov    edx,esp
c000c482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c485:	89 02                	mov    DWORD PTR [edx],eax
c000c487:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c48a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c48e:	ff d1                	call   ecx
c000c490:	83 c4 10             	add    esp,0x10
c000c493:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c497:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c49a:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c49f:	38 c2                	cmp    dl,al
c000c4a1:	74 1e                	je     c000c4c1 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c4a3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c4a6:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c4ab:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c4b0:	25 ff 00 00 00       	and    eax,0xff
c000c4b5:	83 ec 0c             	sub    esp,0xc
c000c4b8:	50                   	push   eax
c000c4b9:	e8 c0 bd ff ff       	call   c000827e <setTerminalScrollLock(bool)>
c000c4be:	83 c4 10             	add    esp,0x10
c000c4c1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c4c4:	84 c0                	test   al,al
c000c4c6:	0f 84 ae 00 00 00    	je     c000c57a <sendKeyboardToken(KeyboardToken)+0x133>
c000c4cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4cf:	66 3d 18 03          	cmp    ax,0x318
c000c4d3:	75 06                	jne    c000c4db <sendKeyboardToken(KeyboardToken)+0x94>
c000c4d5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4de:	66 3d 19 03          	cmp    ax,0x319
c000c4e2:	75 06                	jne    c000c4ea <sendKeyboardToken(KeyboardToken)+0xa3>
c000c4e4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ed:	66 3d 1a 03          	cmp    ax,0x31a
c000c4f1:	75 06                	jne    c000c4f9 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4f3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fc:	66 3d 1b 03          	cmp    ax,0x31b
c000c500:	75 06                	jne    c000c508 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c502:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50b:	66 3d 1c 03          	cmp    ax,0x31c
c000c50f:	75 06                	jne    c000c517 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c511:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51a:	66 3d 1d 03          	cmp    ax,0x31d
c000c51e:	75 06                	jne    c000c526 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c520:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c529:	66 3d 1e 03          	cmp    ax,0x31e
c000c52d:	75 06                	jne    c000c535 <sendKeyboardToken(KeyboardToken)+0xee>
c000c52f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c538:	66 3d 1f 03          	cmp    ax,0x31f
c000c53c:	75 06                	jne    c000c544 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c53e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c547:	66 3d 20 03          	cmp    ax,0x320
c000c54b:	75 06                	jne    c000c553 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c54d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c556:	66 3d 21 03          	cmp    ax,0x321
c000c55a:	75 06                	jne    c000c562 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c55c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c565:	66 3d 22 03          	cmp    ax,0x322
c000c569:	0f 85 c9 00 00 00    	jne    c000c638 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c56f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c575:	e9 be 00 00 00       	jmp    c000c638 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c57a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57d:	66 3d 18 03          	cmp    ax,0x318
c000c581:	75 0a                	jne    c000c58d <sendKeyboardToken(KeyboardToken)+0x146>
c000c583:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c589:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c590:	66 3d 19 03          	cmp    ax,0x319
c000c594:	75 0a                	jne    c000c5a0 <sendKeyboardToken(KeyboardToken)+0x159>
c000c596:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c59c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a3:	66 3d 1a 03          	cmp    ax,0x31a
c000c5a7:	75 0a                	jne    c000c5b3 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c5a9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c5af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b6:	66 3d 1b 03          	cmp    ax,0x31b
c000c5ba:	75 0a                	jne    c000c5c6 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c5bc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c5c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c9:	66 3d 1c 03          	cmp    ax,0x31c
c000c5cd:	75 0a                	jne    c000c5d9 <sendKeyboardToken(KeyboardToken)+0x192>
c000c5cf:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c5d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5dc:	66 3d 1d 03          	cmp    ax,0x31d
c000c5e0:	75 0a                	jne    c000c5ec <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c5e2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c5e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ef:	66 3d 1e 03          	cmp    ax,0x31e
c000c5f3:	75 0a                	jne    c000c5ff <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5f5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c602:	66 3d 1f 03          	cmp    ax,0x31f
c000c606:	75 0a                	jne    c000c612 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c608:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c60e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c615:	66 3d 20 03          	cmp    ax,0x320
c000c619:	75 0a                	jne    c000c625 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c61b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c621:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c628:	66 3d 21 03          	cmp    ax,0x321
c000c62c:	75 0a                	jne    c000c638 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c62e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c634:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63b:	66 3d 00 02          	cmp    ax,0x200
c000c63f:	75 2c                	jne    c000c66d <sendKeyboardToken(KeyboardToken)+0x226>
c000c641:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c646:	83 f0 01             	xor    eax,0x1
c000c649:	84 c0                	test   al,al
c000c64b:	74 20                	je     c000c66d <sendKeyboardToken(KeyboardToken)+0x226>
c000c64d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c652:	6a 01                	push   0x1
c000c654:	6a 00                	push   0x0
c000c656:	68 a0 c2 00 c0       	push   0xc000c2a0
c000c65b:	50                   	push   eax
c000c65c:	e8 b3 82 00 00       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c000c661:	83 c4 10             	add    esp,0x10
c000c664:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c66b:	eb 33                	jmp    c000c6a0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c66d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c670:	66 3d 01 02          	cmp    ax,0x201
c000c674:	75 2a                	jne    c000c6a0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c676:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c67b:	83 f0 01             	xor    eax,0x1
c000c67e:	84 c0                	test   al,al
c000c680:	74 1e                	je     c000c6a0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c682:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c687:	6a 01                	push   0x1
c000c689:	6a 00                	push   0x0
c000c68b:	68 0c c3 00 c0       	push   0xc000c30c
c000c690:	50                   	push   eax
c000c691:	e8 7e 82 00 00       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c6a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a3:	66 3d 25 03          	cmp    ax,0x325
c000c6a7:	75 06                	jne    c000c6af <sendKeyboardToken(KeyboardToken)+0x268>
c000c6a9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c6af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b2:	66 3d 24 03          	cmp    ax,0x324
c000c6b6:	75 06                	jne    c000c6be <sendKeyboardToken(KeyboardToken)+0x277>
c000c6b8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c1:	66 3d 23 03          	cmp    ax,0x323
c000c6c5:	75 06                	jne    c000c6cd <sendKeyboardToken(KeyboardToken)+0x286>
c000c6c7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d0:	66 3d 26 03          	cmp    ax,0x326
c000c6d4:	75 06                	jne    c000c6dc <sendKeyboardToken(KeyboardToken)+0x295>
c000c6d6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6df:	66 3d 27 03          	cmp    ax,0x327
c000c6e3:	75 06                	jne    c000c6eb <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c6e5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ee:	66 3d 22 03          	cmp    ax,0x322
c000c6f2:	75 06                	jne    c000c6fa <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6f4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6fa:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6fe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c701:	83 f0 01             	xor    eax,0x1
c000c704:	84 c0                	test   al,al
c000c706:	74 7b                	je     c000c783 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c708:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c70d:	84 c0                	test   al,al
c000c70f:	74 43                	je     c000c754 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c711:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c715:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c719:	74 2d                	je     c000c748 <sendKeyboardToken(KeyboardToken)+0x301>
c000c71b:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c721:	89 d0                	mov    eax,edx
c000c723:	c1 e0 02             	shl    eax,0x2
c000c726:	01 d0                	add    eax,edx
c000c728:	01 c0                	add    eax,eax
c000c72a:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c72f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c732:	25 ff ff 00 00       	and    eax,0xffff
c000c737:	8d 50 d0             	lea    edx,[eax-0x30]
c000c73a:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c73f:	01 d0                	add    eax,edx
c000c741:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c746:	eb 71                	jmp    c000c7b9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c748:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c752:	eb 65                	jmp    c000c7b9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c754:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c759:	85 c0                	test   eax,eax
c000c75b:	74 1a                	je     c000c777 <sendKeyboardToken(KeyboardToken)+0x330>
c000c75d:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c762:	25 ff 00 00 00       	and    eax,0xff
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 08 fc ff ff       	call   c000c378 <sendKeyToTerminal(unsigned char)>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c777:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c781:	eb 36                	jmp    c000c7b9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c786:	66 3d 01 01          	cmp    ax,0x101
c000c78a:	75 2d                	jne    c000c7b9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c78c:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c791:	85 c0                	test   eax,eax
c000c793:	74 1a                	je     c000c7af <sendKeyboardToken(KeyboardToken)+0x368>
c000c795:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c79a:	25 ff 00 00 00       	and    eax,0xff
c000c79f:	83 ec 0c             	sub    esp,0xc
c000c7a2:	50                   	push   eax
c000c7a3:	e8 d0 fb ff ff       	call   c000c378 <sendKeyToTerminal(unsigned char)>
c000c7a8:	83 c4 10             	add    esp,0x10
c000c7ab:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c7af:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c7b9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7bc:	83 f0 01             	xor    eax,0x1
c000c7bf:	84 c0                	test   al,al
c000c7c1:	74 4e                	je     c000c811 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7c3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7c6:	83 f0 01             	xor    eax,0x1
c000c7c9:	84 c0                	test   al,al
c000c7cb:	74 44                	je     c000c811 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7cd:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7d2:	83 f0 01             	xor    eax,0x1
c000c7d5:	84 c0                	test   al,al
c000c7d7:	74 38                	je     c000c811 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7dc:	66 83 f8 1f          	cmp    ax,0x1f
c000c7e0:	76 09                	jbe    c000c7eb <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e5:	66 83 f8 7e          	cmp    ax,0x7e
c000c7e9:	76 12                	jbe    c000c7fd <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ee:	66 83 f8 0a          	cmp    ax,0xa
c000c7f2:	74 09                	je     c000c7fd <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f7:	66 83 f8 08          	cmp    ax,0x8
c000c7fb:	75 14                	jne    c000c811 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c800:	25 ff 00 00 00       	and    eax,0xff
c000c805:	83 ec 0c             	sub    esp,0xc
c000c808:	50                   	push   eax
c000c809:	e8 6a fb ff ff       	call   c000c378 <sendKeyToTerminal(unsigned char)>
c000c80e:	83 c4 10             	add    esp,0x10
c000c811:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c814:	83 f0 01             	xor    eax,0x1
c000c817:	84 c0                	test   al,al
c000c819:	74 51                	je     c000c86c <sendKeyboardToken(KeyboardToken)+0x425>
c000c81b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c81e:	83 f0 01             	xor    eax,0x1
c000c821:	84 c0                	test   al,al
c000c823:	74 47                	je     c000c86c <sendKeyboardToken(KeyboardToken)+0x425>
c000c825:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c82a:	84 c0                	test   al,al
c000c82c:	74 3e                	je     c000c86c <sendKeyboardToken(KeyboardToken)+0x425>
c000c82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c831:	66 83 f8 3f          	cmp    ax,0x3f
c000c835:	76 35                	jbe    c000c86c <sendKeyboardToken(KeyboardToken)+0x425>
c000c837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83a:	66 83 f8 7f          	cmp    ax,0x7f
c000c83e:	77 2c                	ja     c000c86c <sendKeyboardToken(KeyboardToken)+0x425>
c000c840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c843:	88 c2                	mov    dl,al
c000c845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c848:	66 83 f8 5f          	cmp    ax,0x5f
c000c84c:	76 04                	jbe    c000c852 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c84e:	b0 20                	mov    al,0x20
c000c850:	eb 02                	jmp    c000c854 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c852:	b0 00                	mov    al,0x0
c000c854:	29 c2                	sub    edx,eax
c000c856:	88 d0                	mov    al,dl
c000c858:	83 e8 40             	sub    eax,0x40
c000c85b:	25 ff 00 00 00       	and    eax,0xff
c000c860:	83 ec 0c             	sub    esp,0xc
c000c863:	50                   	push   eax
c000c864:	e8 0f fb ff ff       	call   c000c378 <sendKeyToTerminal(unsigned char)>
c000c869:	83 c4 10             	add    esp,0x10
c000c86c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c86f:	66 3d 00 03          	cmp    ax,0x300
c000c873:	75 0f                	jne    c000c884 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c875:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c878:	83 f0 01             	xor    eax,0x1
c000c87b:	84 c0                	test   al,al
c000c87d:	74 05                	je     c000c884 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c87f:	e8 fb b9 ff ff       	call   c000827f <doTerminalCycle()>
c000c884:	90                   	nop
c000c885:	c9                   	leave  
c000c886:	c3                   	ret    

c000c887 <clearInternalKeybuffer(VgaText*)>:
c000c887:	55                   	push   ebp
c000c888:	89 e5                	mov    ebp,esp
c000c88a:	83 ec 08             	sub    esp,0x8
c000c88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c890:	05 02 01 00 00       	add    eax,0x102
c000c895:	83 ec 0c             	sub    esp,0xc
c000c898:	50                   	push   eax
c000c899:	e8 92 3c ff ff       	call   c0000530 <strlen>
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8a4:	81 c2 02 01 00 00    	add    edx,0x102
c000c8aa:	83 ec 04             	sub    esp,0x4
c000c8ad:	50                   	push   eax
c000c8ae:	6a 00                	push   0x0
c000c8b0:	52                   	push   edx
c000c8b1:	e8 0a 3c ff ff       	call   c00004c0 <memset>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	90                   	nop
c000c8ba:	c9                   	leave  
c000c8bb:	c3                   	ret    

c000c8bc <readKeyboard(VgaText*, char*, unsigned long)>:
c000c8bc:	55                   	push   ebp
c000c8bd:	89 e5                	mov    ebp,esp
c000c8bf:	83 ec 18             	sub    esp,0x18
c000c8c2:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c8c7:	85 c0                	test   eax,eax
c000c8c9:	74 2a                	je     c000c8f5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c8cb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c8d1:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c8d7:	83 ec 04             	sub    esp,0x4
c000c8da:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c8df:	83 ec 08             	sub    esp,0x8
c000c8e2:	89 e2                	mov    edx,esp
c000c8e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c8e7:	89 02                	mov    DWORD PTR [edx],eax
c000c8e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c8ec:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c8f0:	ff d1                	call   ecx
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	fb                   	sti    
c000c8f6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c901:	0f 84 f5 00 00 00    	je     c000c9fc <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c910:	84 c0                	test   al,al
c000c912:	75 28                	jne    c000c93c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c914:	fa                   	cli    
c000c915:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c91a:	40                   	inc    eax
c000c91b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c920:	e8 3b 82 00 00       	call   c0014b60 <schedule()>
c000c925:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c92a:	48                   	dec    eax
c000c92b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c930:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c935:	85 c0                	test   eax,eax
c000c937:	75 ce                	jne    c000c907 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c939:	fb                   	sti    
c000c93a:	eb cb                	jmp    c000c907 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c93c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c93f:	8d 50 01             	lea    edx,[eax+0x1]
c000c942:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c945:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c948:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c94e:	88 10                	mov    BYTE PTR [eax],dl
c000c950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c953:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c959:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c95c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c960:	75 1e                	jne    c000c980 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c962:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c967:	8b 00                	mov    eax,DWORD PTR [eax]
c000c969:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c96c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c972:	83 ec 08             	sub    esp,0x8
c000c975:	6a 02                	push   0x2
c000c977:	50                   	push   eax
c000c978:	e8 0a 3f 00 00       	call   c0010887 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c984:	75 1e                	jne    c000c9a4 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c986:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c98b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c98d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c990:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c996:	83 ec 08             	sub    esp,0x8
c000c999:	6a 09                	push   0x9
c000c99b:	50                   	push   eax
c000c99c:	e8 e6 3e 00 00       	call   c0010887 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c9a1:	83 c4 10             	add    esp,0x10
c000c9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a7:	05 02 01 00 00       	add    eax,0x102
c000c9ac:	83 ec 0c             	sub    esp,0xc
c000c9af:	50                   	push   eax
c000c9b0:	e8 7b 3b ff ff       	call   c0000530 <strlen>
c000c9b5:	83 c4 10             	add    esp,0x10
c000c9b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c9bb:	81 c2 02 01 00 00    	add    edx,0x102
c000c9c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c9c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c9c7:	81 c2 02 01 00 00    	add    edx,0x102
c000c9cd:	83 ec 04             	sub    esp,0x4
c000c9d0:	50                   	push   eax
c000c9d1:	51                   	push   ecx
c000c9d2:	52                   	push   edx
c000c9d3:	e8 f8 39 ff ff       	call   c00003d0 <memmove>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c9de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c9e1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c9e5:	74 10                	je     c000c9f7 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c9e7:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c9eb:	74 0a                	je     c000c9f7 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c9ed:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c9f1:	0f 85 06 ff ff ff    	jne    c000c8fd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c9f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9fa:	eb 03                	jmp    c000c9ff <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000c9fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9ff:	c9                   	leave  
c000ca00:	c3                   	ret    
c000ca01:	90                   	nop

c000ca02 <Keyboard::Keyboard(char const*)>:
c000ca02:	83 ec 0c             	sub    esp,0xc
c000ca05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca09:	83 ec 08             	sub    esp,0x8
c000ca0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca10:	50                   	push   eax
c000ca11:	e8 1e f2 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	ba 9c fe 01 c0       	mov    edx,0xc001fe9c
c000ca1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca22:	89 10                	mov    DWORD PTR [eax],edx
c000ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca28:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ca32:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000ca39:	90                   	nop
c000ca3a:	83 c4 0c             	add    esp,0xc
c000ca3d:	c3                   	ret    

c000ca3e <Keyboard::~Keyboard()>:
c000ca3e:	83 ec 0c             	sub    esp,0xc
c000ca41:	ba 9c fe 01 c0       	mov    edx,0xc001fe9c
c000ca46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4a:	89 10                	mov    DWORD PTR [eax],edx
c000ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca50:	83 ec 0c             	sub    esp,0xc
c000ca53:	50                   	push   eax
c000ca54:	e8 49 ef ff ff       	call   c000b9a2 <Device::~Device()>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	90                   	nop
c000ca5d:	83 c4 0c             	add    esp,0xc
c000ca60:	c3                   	ret    
c000ca61:	90                   	nop

c000ca62 <Keyboard::~Keyboard()>:
c000ca62:	83 ec 0c             	sub    esp,0xc
c000ca65:	83 ec 0c             	sub    esp,0xc
c000ca68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca6c:	e8 cd ff ff ff       	call   c000ca3e <Keyboard::~Keyboard()>
c000ca71:	83 c4 10             	add    esp,0x10
c000ca74:	83 ec 08             	sub    esp,0x8
c000ca77:	68 5c 01 00 00       	push   0x15c
c000ca7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca80:	e8 e8 da ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	83 c4 0c             	add    esp,0xc
c000ca8b:	c3                   	ret    

c000ca8c <LogicalDisk::close(int, int, void*)>:
c000ca8c:	83 c8 ff             	or     eax,0xffffffff
c000ca8f:	c3                   	ret    

c000ca90 <LogicalDisk::~LogicalDisk()>:
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	ba 14 ff 01 c0       	mov    edx,0xc001ff14
c000ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca9c:	89 10                	mov    DWORD PTR [eax],edx
c000ca9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	50                   	push   eax
c000caa6:	e8 f7 ee ff ff       	call   c000b9a2 <Device::~Device()>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	90                   	nop
c000caaf:	83 c4 0c             	add    esp,0xc
c000cab2:	c3                   	ret    
c000cab3:	90                   	nop

c000cab4 <LogicalDisk::~LogicalDisk()>:
c000cab4:	83 ec 0c             	sub    esp,0xc
c000cab7:	83 ec 0c             	sub    esp,0xc
c000caba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabe:	e8 cd ff ff ff       	call   c000ca90 <LogicalDisk::~LogicalDisk()>
c000cac3:	83 c4 10             	add    esp,0x10
c000cac6:	83 ec 08             	sub    esp,0x8
c000cac9:	68 78 01 00 00       	push   0x178
c000cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad2:	e8 96 da ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000cad7:	83 c4 10             	add    esp,0x10
c000cada:	83 c4 0c             	add    esp,0xc
c000cadd:	c3                   	ret    

c000cade <LogicalDisk::open(int, int, void*)>:
c000cade:	83 ec 18             	sub    esp,0x18
c000cae1:	68 c8 fe 01 c0       	push   0xc001fec8
c000cae6:	e8 2c 39 00 00       	call   c0010417 <KePanic(char const*)>
c000caeb:	83 c8 ff             	or     eax,0xffffffff
c000caee:	83 c4 1c             	add    esp,0x1c
c000caf1:	c3                   	ret    

c000caf2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000caf2:	53                   	push   ebx
c000caf3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000caf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cafb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caff:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cb05:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cb0b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cb11:	77 10                	ja     c000cb23 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cb13:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cb19:	89 d3                	mov    ebx,edx
c000cb1b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cb21:	72 05                	jb     c000cb28 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cb23:	83 c8 ff             	or     eax,0xffffffff
c000cb26:	89 c2                	mov    edx,eax
c000cb28:	5b                   	pop    ebx
c000cb29:	c3                   	ret    

c000cb2a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cb2a:	56                   	push   esi
c000cb2b:	83 c8 ff             	or     eax,0xffffffff
c000cb2e:	53                   	push   ebx
c000cb2f:	89 c2                	mov    edx,eax
c000cb31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cb35:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cb39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb43:	77 27                	ja     c000cb6c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb45:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cb4b:	89 d8                	mov    eax,ebx
c000cb4d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cb53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cb58:	89 c2                	mov    edx,eax
c000cb5a:	73 10                	jae    c000cb6c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb5c:	89 c8                	mov    eax,ecx
c000cb5e:	89 da                	mov    edx,ebx
c000cb60:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb66:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb6c:	5b                   	pop    ebx
c000cb6d:	5e                   	pop    esi
c000cb6e:	c3                   	ret    
c000cb6f:	90                   	nop

c000cb70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb70:	83 ec 1c             	sub    esp,0x1c
c000cb73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb87:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb96:	83 ec 08             	sub    esp,0x8
c000cb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9d:	50                   	push   eax
c000cb9e:	e8 91 f0 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	ba 14 ff 01 c0       	mov    edx,0xc001ff14
c000cbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbaf:	89 10                	mov    DWORD PTR [eax],edx
c000cbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbcb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cbe0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbe8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbec:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cbf2:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cbf8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbfc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cbff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc03:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cc09:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cc0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc17:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc21:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cc2b:	90                   	nop
c000cc2c:	83 c4 1c             	add    esp,0x1c
c000cc2f:	c3                   	ret    

c000cc30 <LogicalDisk::assignDriveLetter()>:
c000cc30:	55                   	push   ebp
c000cc31:	57                   	push   edi
c000cc32:	56                   	push   esi
c000cc33:	53                   	push   ebx
c000cc34:	83 ec 14             	sub    esp,0x14
c000cc37:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cc3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc41:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cc45:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cc4b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cc51:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc55:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cc5b:	3c 01                	cmp    al,0x1
c000cc5d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cc61:	19 c0                	sbb    eax,eax
c000cc63:	83 e0 02             	and    eax,0x2
c000cc66:	83 c0 41             	add    eax,0x41
c000cc69:	0f be e8             	movsx  ebp,al
c000cc6c:	3c 43                	cmp    al,0x43
c000cc6e:	75 10                	jne    c000cc80 <LogicalDisk::assignDriveLetter()+0x50>
c000cc70:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc77:	75 5d                	jne    c000ccd6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc79:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc7e:	75 56                	jne    c000ccd6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc80:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc83:	ba 01 00 00 00       	mov    edx,0x1
c000cc88:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc8c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc90:	d3 e2                	shl    edx,cl
c000cc92:	89 d7                	mov    edi,edx
c000cc94:	89 d6                	mov    esi,edx
c000cc96:	c1 ff 1f             	sar    edi,0x1f
c000cc99:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cca1:	21 f9                	and    ecx,edi
c000cca3:	09 d1                	or     ecx,edx
c000cca5:	75 2f                	jne    c000ccd6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cca7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccab:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ccaf:	09 f2                	or     edx,esi
c000ccb1:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000ccb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccbb:	09 fa                	or     edx,edi
c000ccbd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ccc1:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000ccc7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cccd:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000ccd4:	eb 08                	jmp    c000ccde <LogicalDisk::assignDriveLetter()+0xae>
c000ccd6:	40                   	inc    eax
c000ccd7:	45                   	inc    ebp
c000ccd8:	3c 5b                	cmp    al,0x5b
c000ccda:	75 90                	jne    c000cc6c <LogicalDisk::assignDriveLetter()+0x3c>
c000ccdc:	31 c0                	xor    eax,eax
c000ccde:	83 c4 14             	add    esp,0x14
c000cce1:	5b                   	pop    ebx
c000cce2:	5e                   	pop    esi
c000cce3:	5f                   	pop    edi
c000cce4:	5d                   	pop    ebp
c000cce5:	c3                   	ret    

c000cce6 <LogicalDisk::mount()>:
c000cce6:	56                   	push   esi
c000cce7:	53                   	push   ebx
c000cce8:	53                   	push   ebx
c000cce9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cced:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000ccf3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000ccfd:	85 db                	test   ebx,ebx
c000ccff:	74 27                	je     c000cd28 <LogicalDisk::mount()+0x42>
c000cd01:	51                   	push   ecx
c000cd02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cd09:	83 e8 41             	sub    eax,0x41
c000cd0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cd0e:	50                   	push   eax
c000cd0f:	56                   	push   esi
c000cd10:	53                   	push   ebx
c000cd11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd14:	83 c4 10             	add    esp,0x10
c000cd17:	84 c0                	test   al,al
c000cd19:	74 08                	je     c000cd23 <LogicalDisk::mount()+0x3d>
c000cd1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cd21:	eb 07                	jmp    c000cd2a <LogicalDisk::mount()+0x44>
c000cd23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cd26:	eb d5                	jmp    c000ccfd <LogicalDisk::mount()+0x17>
c000cd28:	31 c0                	xor    eax,eax
c000cd2a:	5a                   	pop    edx
c000cd2b:	5b                   	pop    ebx
c000cd2c:	5e                   	pop    esi
c000cd2d:	c3                   	ret    

c000cd2e <LogicalDisk::unmount()>:
c000cd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cd3c:	c3                   	ret    
c000cd3d:	90                   	nop

c000cd3e <LogicalDisk::eject()>:
c000cd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cd48:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cd51:	90                   	nop

c000cd52 <LogicalDisk::unassignDriveLetter()>:
c000cd52:	57                   	push   edi
c000cd53:	56                   	push   esi
c000cd54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd5f:	84 c9                	test   cl,cl
c000cd61:	75 0f                	jne    c000cd72 <LogicalDisk::unassignDriveLetter()+0x20>
c000cd63:	c7 44 24 0c ec fe 01 c0 	mov    DWORD PTR [esp+0xc],0xc001feec
c000cd6b:	5e                   	pop    esi
c000cd6c:	5f                   	pop    edi
c000cd6d:	e9 a5 36 00 00       	jmp    c0010417 <KePanic(char const*)>
c000cd72:	83 e9 41             	sub    ecx,0x41
c000cd75:	b8 01 00 00 00       	mov    eax,0x1
c000cd7a:	d3 e0                	shl    eax,cl
c000cd7c:	89 c7                	mov    edi,eax
c000cd7e:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd85:	c1 ff 1f             	sar    edi,0x1f
c000cd88:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd93:	89 fe                	mov    esi,edi
c000cd95:	f7 d6                	not    esi
c000cd97:	f7 d0                	not    eax
c000cd99:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd9f:	5e                   	pop    esi
c000cda0:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cda6:	5f                   	pop    edi
c000cda7:	c3                   	ret    

c000cda8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cda8:	57                   	push   edi
c000cda9:	56                   	push   esi
c000cdaa:	53                   	push   ebx
c000cdab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdbb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdc1:	77 41                	ja     c000ce04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cdc3:	99                   	cdq    
c000cdc4:	01 c8                	add    eax,ecx
c000cdc6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdcc:	11 da                	adc    edx,ebx
c000cdce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdd4:	19 d7                	sbb    edi,edx
c000cdd6:	72 33                	jb     c000ce0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cdd8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdde:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cde4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cde8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdfc:	5b                   	pop    ebx
c000cdfd:	5e                   	pop    esi
c000cdfe:	5f                   	pop    edi
c000cdff:	e9 be 0a 00 00       	jmp    c000d8c2 <VCache::read(unsigned long long, int, void*)>
c000ce04:	b8 05 00 00 00       	mov    eax,0x5
c000ce09:	eb 05                	jmp    c000ce10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ce0b:	b8 07 00 00 00       	mov    eax,0x7
c000ce10:	5b                   	pop    ebx
c000ce11:	5e                   	pop    esi
c000ce12:	5f                   	pop    edi
c000ce13:	c3                   	ret    

c000ce14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ce14:	57                   	push   edi
c000ce15:	56                   	push   esi
c000ce16:	53                   	push   ebx
c000ce17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ce27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce2d:	77 41                	ja     c000ce70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ce2f:	99                   	cdq    
c000ce30:	01 c8                	add    eax,ecx
c000ce32:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ce38:	11 da                	adc    edx,ebx
c000ce3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ce40:	19 d7                	sbb    edi,edx
c000ce42:	72 33                	jb     c000ce77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ce44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ce4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ce50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce68:	5b                   	pop    ebx
c000ce69:	5e                   	pop    esi
c000ce6a:	5f                   	pop    edi
c000ce6b:	e9 64 09 00 00       	jmp    c000d7d4 <VCache::write(unsigned long long, int, void*)>
c000ce70:	b8 05 00 00 00       	mov    eax,0x5
c000ce75:	eb 05                	jmp    c000ce7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce77:	b8 07 00 00 00       	mov    eax,0x7
c000ce7c:	5b                   	pop    ebx
c000ce7d:	5e                   	pop    esi
c000ce7e:	5f                   	pop    edi
c000ce7f:	c3                   	ret    

c000ce80 <Mouse::Mouse(char const*)>:
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce87:	83 ec 08             	sub    esp,0x8
c000ce8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8e:	50                   	push   eax
c000ce8f:	e8 a0 ed ff ff       	call   c000bc34 <Device::Device(char const*)>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c000ce9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea0:	89 10                	mov    DWORD PTR [eax],edx
c000cea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ceb0:	90                   	nop
c000ceb1:	83 c4 0c             	add    esp,0xc
c000ceb4:	c3                   	ret    
c000ceb5:	90                   	nop
c000ceb6:	66 90                	xchg   ax,ax

c000ceb8 <Mouse::~Mouse()>:
c000ceb8:	83 ec 0c             	sub    esp,0xc
c000cebb:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c000cec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec4:	89 10                	mov    DWORD PTR [eax],edx
c000cec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceca:	83 ec 0c             	sub    esp,0xc
c000cecd:	50                   	push   eax
c000cece:	e8 cf ea ff ff       	call   c000b9a2 <Device::~Device()>
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	90                   	nop
c000ced7:	83 c4 0c             	add    esp,0xc
c000ceda:	c3                   	ret    
c000cedb:	90                   	nop

c000cedc <Mouse::~Mouse()>:
c000cedc:	83 ec 0c             	sub    esp,0xc
c000cedf:	83 ec 0c             	sub    esp,0xc
c000cee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee6:	e8 cd ff ff ff       	call   c000ceb8 <Mouse::~Mouse()>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	83 ec 08             	sub    esp,0x8
c000cef1:	68 58 01 00 00       	push   0x158
c000cef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefa:	e8 6e d6 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000ceff:	83 c4 10             	add    esp,0x10
c000cf02:	83 c4 0c             	add    esp,0xc
c000cf05:	c3                   	ret    

c000cf06 <NIC::getMAC()>:
c000cf06:	31 c0                	xor    eax,eax
c000cf08:	31 d2                	xor    edx,edx
c000cf0a:	c3                   	ret    
c000cf0b:	90                   	nop

c000cf0c <NIC::write(int, unsigned char*, int*)>:
c000cf0c:	b8 01 00 00 00       	mov    eax,0x1
c000cf11:	c3                   	ret    

c000cf12 <NIC::NIC(char const*)>:
c000cf12:	83 ec 0c             	sub    esp,0xc
c000cf15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf19:	83 ec 08             	sub    esp,0x8
c000cf1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf20:	50                   	push   eax
c000cf21:	e8 0e ed ff ff       	call   c000bc34 <Device::Device(char const*)>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	ba 6c ff 01 c0       	mov    edx,0xc001ff6c
c000cf2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf32:	89 10                	mov    DWORD PTR [eax],edx
c000cf34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cf42:	90                   	nop
c000cf43:	83 c4 0c             	add    esp,0xc
c000cf46:	c3                   	ret    
c000cf47:	90                   	nop

c000cf48 <NIC::~NIC()>:
c000cf48:	83 ec 0c             	sub    esp,0xc
c000cf4b:	ba 6c ff 01 c0       	mov    edx,0xc001ff6c
c000cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf54:	89 10                	mov    DWORD PTR [eax],edx
c000cf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	50                   	push   eax
c000cf5e:	e8 3f ea ff ff       	call   c000b9a2 <Device::~Device()>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	90                   	nop
c000cf67:	83 c4 0c             	add    esp,0xc
c000cf6a:	c3                   	ret    
c000cf6b:	90                   	nop

c000cf6c <NIC::~NIC()>:
c000cf6c:	83 ec 0c             	sub    esp,0xc
c000cf6f:	83 ec 0c             	sub    esp,0xc
c000cf72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf76:	e8 cd ff ff ff       	call   c000cf48 <NIC::~NIC()>
c000cf7b:	83 c4 10             	add    esp,0x10
c000cf7e:	83 ec 08             	sub    esp,0x8
c000cf81:	68 58 01 00 00       	push   0x158
c000cf86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf8a:	e8 de d5 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	83 c4 0c             	add    esp,0xc
c000cf95:	c3                   	ret    

c000cf96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf96:	55                   	push   ebp
c000cf97:	57                   	push   edi
c000cf98:	56                   	push   esi
c000cf99:	53                   	push   ebx
c000cf9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cfa0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cfa7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cfae:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cfb5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cfbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cfc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfcb:	e8 60 ed ff ff       	call   c000bd30 <Device::getName()>
c000cfd0:	5a                   	pop    edx
c000cfd1:	59                   	pop    ecx
c000cfd2:	50                   	push   eax
c000cfd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cfd7:	55                   	push   ebp
c000cfd8:	e8 13 36 ff ff       	call   c00005f0 <strcpy>
c000cfdd:	5b                   	pop    ebx
c000cfde:	58                   	pop    eax
c000cfdf:	68 98 ff 01 c0       	push   0xc001ff98
c000cfe4:	55                   	push   ebp
c000cfe5:	e8 d6 37 ff ff       	call   c00007c0 <strcat>
c000cfea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cff1:	e8 7d a8 ff ff       	call   c0007873 <malloc>
c000cff6:	83 c4 0c             	add    esp,0xc
c000cff9:	89 c3                	mov    ebx,eax
c000cffb:	57                   	push   edi
c000cffc:	56                   	push   esi
c000cffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d001:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d005:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d00c:	55                   	push   ebp
c000d00d:	50                   	push   eax
c000d00e:	e8 5d fb ff ff       	call   c000cb70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d013:	83 c4 14             	add    esp,0x14
c000d016:	53                   	push   ebx
c000d017:	e8 14 fc ff ff       	call   c000cc30 <LogicalDisk::assignDriveLetter()>
c000d01c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d01f:	e8 c2 fc ff ff       	call   c000cce6 <LogicalDisk::mount()>
c000d024:	58                   	pop    eax
c000d025:	5a                   	pop    edx
c000d026:	53                   	push   ebx
c000d027:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d02e:	e8 69 ea ff ff       	call   c000ba9c <Device::addChild(Device*)>
c000d033:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d039:	5b                   	pop    ebx
c000d03a:	5e                   	pop    esi
c000d03b:	5f                   	pop    edi
c000d03c:	5d                   	pop    ebp
c000d03d:	c3                   	ret    

c000d03e <createPartitionsForDisk(PhysicalDisk*)>:
c000d03e:	55                   	push   ebp
c000d03f:	57                   	push   edi
c000d040:	56                   	push   esi
c000d041:	53                   	push   ebx
c000d042:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d048:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d04f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d055:	3d 00 02 00 00       	cmp    eax,0x200
c000d05a:	74 27                	je     c000d083 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d05c:	83 ec 10             	sub    esp,0x10
c000d05f:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d065:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d06b:	99                   	cdq    
c000d06c:	52                   	push   edx
c000d06d:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d071:	50                   	push   eax
c000d072:	89 fd                	mov    ebp,edi
c000d074:	c1 e6 0a             	shl    esi,0xa
c000d077:	55                   	push   ebp
c000d078:	56                   	push   esi
c000d079:	e8 62 0e 01 00       	call   c001dee0 <__udivdi3>
c000d07e:	e9 b1 00 00 00       	jmp    c000d134 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d083:	83 ec 0c             	sub    esp,0xc
c000d086:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d088:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d08c:	56                   	push   esi
c000d08d:	6a 01                	push   0x1
c000d08f:	6a 00                	push   0x0
c000d091:	6a 00                	push   0x0
c000d093:	53                   	push   ebx
c000d094:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d097:	83 c4 20             	add    esp,0x20
c000d09a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d0a2:	75 0a                	jne    c000d0ae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d0a4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d0ac:	74 2c                	je     c000d0da <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d0ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0b4:	83 ec 10             	sub    esp,0x10
c000d0b7:	89 f7                	mov    edi,esi
c000d0b9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0bf:	c1 ff 1f             	sar    edi,0x1f
c000d0c2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0c8:	57                   	push   edi
c000d0c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0cd:	c1 e0 0a             	shl    eax,0xa
c000d0d0:	56                   	push   esi
c000d0d1:	52                   	push   edx
c000d0d2:	50                   	push   eax
c000d0d3:	e8 08 0e 01 00       	call   c001dee0 <__udivdi3>
c000d0d8:	eb 5a                	jmp    c000d134 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d0da:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d0e1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d0e8:	83 e0 7f             	and    eax,0x7f
c000d0eb:	83 e1 7f             	and    ecx,0x7f
c000d0ee:	01 c1                	add    ecx,eax
c000d0f0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0f7:	83 e0 7f             	and    eax,0x7f
c000d0fa:	01 c1                	add    ecx,eax
c000d0fc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d103:	83 e0 7f             	and    eax,0x7f
c000d106:	00 c1                	add    cl,al
c000d108:	74 41                	je     c000d14b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d10a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d110:	83 ec 10             	sub    esp,0x10
c000d113:	89 f7                	mov    edi,esi
c000d115:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d11b:	c1 ff 1f             	sar    edi,0x1f
c000d11e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d124:	57                   	push   edi
c000d125:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d129:	c1 e0 0a             	shl    eax,0xa
c000d12c:	56                   	push   esi
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	e8 ac 0d 01 00       	call   c001dee0 <__udivdi3>
c000d134:	83 c4 14             	add    esp,0x14
c000d137:	52                   	push   edx
c000d138:	50                   	push   eax
c000d139:	6a 00                	push   0x0
c000d13b:	6a 00                	push   0x0
c000d13d:	53                   	push   ebx
c000d13e:	e8 53 fe ff ff       	call   c000cf96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d143:	83 c4 20             	add    esp,0x20
c000d146:	e9 79 01 00 00       	jmp    c000d2c4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d14b:	89 f0                	mov    eax,esi
c000d14d:	31 f6                	xor    esi,esi
c000d14f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d156:	75 02                	jne    c000d15a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d158:	89 f1                	mov    ecx,esi
c000d15a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d161:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d168:	c1 e2 08             	shl    edx,0x8
c000d16b:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d173:	c1 e7 10             	shl    edi,0x10
c000d176:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d17e:	09 fa                	or     edx,edi
c000d180:	83 c0 10             	add    eax,0x10
c000d183:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c000d18a:	09 fa                	or     edx,edi
c000d18c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d193:	c1 e7 18             	shl    edi,0x18
c000d196:	09 fa                	or     edx,edi
c000d198:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d19c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d1a3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d1aa:	c1 e7 10             	shl    edi,0x10
c000d1ad:	c1 e2 08             	shl    edx,0x8
c000d1b0:	09 fa                	or     edx,edi
c000d1b2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d1b9:	09 fa                	or     edx,edi
c000d1bb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d1c2:	c1 e7 18             	shl    edi,0x18
c000d1c5:	09 fa                	or     edx,edi
c000d1c7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d1cb:	46                   	inc    esi
c000d1cc:	83 fe 04             	cmp    esi,0x4
c000d1cf:	0f 85 7a ff ff ff    	jne    c000d14f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d9:	83 f0 01             	xor    eax,0x1
c000d1dc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d1e0:	75 57                	jne    c000d239 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1e6:	83 f0 01             	xor    eax,0x1
c000d1e9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d1ed:	75 4a                	jne    c000d239 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1f5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1f9:	89 f7                	mov    edi,esi
c000d1fb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d203:	c1 ff 1f             	sar    edi,0x1f
c000d206:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d20e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d214:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d21a:	57                   	push   edi
c000d21b:	56                   	push   esi
c000d21c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d220:	c1 e0 0a             	shl    eax,0xa
c000d223:	52                   	push   edx
c000d224:	50                   	push   eax
c000d225:	e8 b6 0c 01 00       	call   c001dee0 <__udivdi3>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d231:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d235:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d239:	84 c9                	test   cl,cl
c000d23b:	74 53                	je     c000d290 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d23d:	0f b6 c9             	movzx  ecx,cl
c000d240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d244:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d24c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d250:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d254:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d258:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d25c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d260:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d268:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d26c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d270:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d274:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d278:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d27c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d280:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d284:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d288:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d28c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d290:	31 ed                	xor    ebp,ebp
c000d292:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d296:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d29a:	89 f8                	mov    eax,edi
c000d29c:	09 f0                	or     eax,esi
c000d29e:	74 1e                	je     c000d2be <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d2a0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d2a4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d2a8:	89 d1                	mov    ecx,edx
c000d2aa:	09 c1                	or     ecx,eax
c000d2ac:	74 10                	je     c000d2be <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d2ae:	83 ec 0c             	sub    esp,0xc
c000d2b1:	57                   	push   edi
c000d2b2:	56                   	push   esi
c000d2b3:	52                   	push   edx
c000d2b4:	50                   	push   eax
c000d2b5:	53                   	push   ebx
c000d2b6:	e8 db fc ff ff       	call   c000cf96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d2bb:	83 c4 20             	add    esp,0x20
c000d2be:	45                   	inc    ebp
c000d2bf:	83 fd 04             	cmp    ebp,0x4
c000d2c2:	75 ce                	jne    c000d292 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d2c4:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d2ca:	5b                   	pop    ebx
c000d2cb:	5e                   	pop    esi
c000d2cc:	5f                   	pop    edi
c000d2cd:	5d                   	pop    ebp
c000d2ce:	c3                   	ret    
c000d2cf:	90                   	nop

c000d2d0 <Serial::Serial(char const*)>:
c000d2d0:	83 ec 0c             	sub    esp,0xc
c000d2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d7:	83 ec 08             	sub    esp,0x8
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	50                   	push   eax
c000d2df:	e8 50 e9 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000d2e4:	83 c4 10             	add    esp,0x10
c000d2e7:	ba ac ff 01 c0       	mov    edx,0xc001ffac
c000d2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f0:	89 10                	mov    DWORD PTR [eax],edx
c000d2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d300:	90                   	nop
c000d301:	83 c4 0c             	add    esp,0xc
c000d304:	c3                   	ret    
c000d305:	90                   	nop
c000d306:	66 90                	xchg   ax,ax

c000d308 <Serial::~Serial()>:
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	ba ac ff 01 c0       	mov    edx,0xc001ffac
c000d310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d314:	89 10                	mov    DWORD PTR [eax],edx
c000d316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31a:	83 ec 0c             	sub    esp,0xc
c000d31d:	50                   	push   eax
c000d31e:	e8 7f e6 ff ff       	call   c000b9a2 <Device::~Device()>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <Serial::~Serial()>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	83 ec 0c             	sub    esp,0xc
c000d332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d336:	e8 cd ff ff ff       	call   c000d308 <Serial::~Serial()>
c000d33b:	83 c4 10             	add    esp,0x10
c000d33e:	83 ec 08             	sub    esp,0x8
c000d341:	68 58 01 00 00       	push   0x158
c000d346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34a:	e8 1e d2 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	83 c4 0c             	add    esp,0xc
c000d355:	c3                   	ret    
c000d356:	66 90                	xchg   ax,ax

c000d358 <Timer::Timer(char const*)>:
c000d358:	83 ec 0c             	sub    esp,0xc
c000d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	50                   	push   eax
c000d367:	e8 c8 e8 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000d36c:	83 c4 10             	add    esp,0x10
c000d36f:	ba f0 ff 01 c0       	mov    edx,0xc001fff0
c000d374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d378:	89 10                	mov    DWORD PTR [eax],edx
c000d37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d388:	90                   	nop
c000d389:	83 c4 0c             	add    esp,0xc
c000d38c:	c3                   	ret    
c000d38d:	90                   	nop
c000d38e:	66 90                	xchg   ax,ax

c000d390 <Timer::~Timer()>:
c000d390:	83 ec 0c             	sub    esp,0xc
c000d393:	ba f0 ff 01 c0       	mov    edx,0xc001fff0
c000d398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39c:	89 10                	mov    DWORD PTR [eax],edx
c000d39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a2:	83 ec 0c             	sub    esp,0xc
c000d3a5:	50                   	push   eax
c000d3a6:	e8 f7 e5 ff ff       	call   c000b9a2 <Device::~Device()>
c000d3ab:	83 c4 10             	add    esp,0x10
c000d3ae:	90                   	nop
c000d3af:	83 c4 0c             	add    esp,0xc
c000d3b2:	c3                   	ret    
c000d3b3:	90                   	nop

c000d3b4 <Timer::~Timer()>:
c000d3b4:	83 ec 0c             	sub    esp,0xc
c000d3b7:	83 ec 0c             	sub    esp,0xc
c000d3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3be:	e8 cd ff ff ff       	call   c000d390 <Timer::~Timer()>
c000d3c3:	83 c4 10             	add    esp,0x10
c000d3c6:	83 ec 08             	sub    esp,0x8
c000d3c9:	68 5c 01 00 00       	push   0x15c
c000d3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3d2:	e8 96 d1 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000d3d7:	83 c4 10             	add    esp,0x10
c000d3da:	83 c4 0c             	add    esp,0xc
c000d3dd:	c3                   	ret    

c000d3de <Timer::read()>:
c000d3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d3e8:	c3                   	ret    

c000d3e9 <setupTimer(int)>:
c000d3e9:	53                   	push   ebx
c000d3ea:	83 ec 14             	sub    esp,0x14
c000d3ed:	68 5c 01 00 00       	push   0x15c
c000d3f2:	e8 7c a4 ff ff       	call   c0007873 <malloc>
c000d3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3fa:	89 c3                	mov    ebx,eax
c000d3fc:	e8 4b 03 01 00       	call   c001d74c <PIT::PIT()>
c000d401:	58                   	pop    eax
c000d402:	5a                   	pop    edx
c000d403:	53                   	push   ebx
c000d404:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d40a:	e8 8d e6 ff ff       	call   c000ba9c <Device::addChild(Device*)>
c000d40f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d411:	6a 00                	push   0x0
c000d413:	6a 00                	push   0x0
c000d415:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d419:	53                   	push   ebx
c000d41a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d41d:	83 c4 28             	add    esp,0x28
c000d420:	89 d8                	mov    eax,ebx
c000d422:	5b                   	pop    ebx
c000d423:	c3                   	ret    

c000d424 <timerHandler(unsigned int)>:
c000d424:	56                   	push   esi
c000d425:	53                   	push   ebx
c000d426:	51                   	push   ecx
c000d427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d42b:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d431:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d438:	0f 84 4a 01 00 00    	je     c000d588 <timerHandler(unsigned int)+0x164>
c000d43e:	fa                   	cli    
c000d43f:	83 ec 0c             	sub    esp,0xc
c000d442:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d448:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d44e:	68 78 71 02 c0       	push   0xc0027178
c000d453:	e8 58 10 01 00       	call   c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d458:	83 c4 10             	add    esp,0x10
c000d45b:	84 c0                	test   al,al
c000d45d:	0f 85 a1 00 00 00    	jne    c000d504 <timerHandler(unsigned int)+0xe0>
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	68 78 71 02 c0       	push   0xc0027178
c000d46b:	e8 5c 10 01 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d470:	83 c4 10             	add    esp,0x10
c000d473:	89 c6                	mov    esi,eax
c000d475:	8d 76 00             	lea    esi,[esi+0x0]
c000d478:	83 ec 0c             	sub    esp,0xc
c000d47b:	68 78 71 02 c0       	push   0xc0027178
c000d480:	e8 47 10 01 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d485:	89 c3                	mov    ebx,eax
c000d487:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d48e:	e8 41 10 01 00       	call   c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d499:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d49f:	77 23                	ja     c000d4c4 <timerHandler(unsigned int)+0xa0>
c000d4a1:	83 ec 0c             	sub    esp,0xc
c000d4a4:	53                   	push   ebx
c000d4a5:	e8 96 7b 00 00       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c000d4aa:	83 c4 10             	add    esp,0x10
c000d4ad:	39 de                	cmp    esi,ebx
c000d4af:	75 27                	jne    c000d4d8 <timerHandler(unsigned int)+0xb4>
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	68 78 71 02 c0       	push   0xc0027178
c000d4b9:	e8 0e 10 01 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4be:	89 c6                	mov    esi,eax
c000d4c0:	eb 12                	jmp    c000d4d4 <timerHandler(unsigned int)+0xb0>
c000d4c2:	66 90                	xchg   ax,ax
c000d4c4:	52                   	push   edx
c000d4c5:	52                   	push   edx
c000d4c6:	53                   	push   ebx
c000d4c7:	68 78 71 02 c0       	push   0xc0027178
c000d4cc:	e8 bb 10 01 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4d4:	83 c4 10             	add    esp,0x10
c000d4d7:	90                   	nop
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	68 78 71 02 c0       	push   0xc0027178
c000d4e0:	e8 cb 0f 01 00       	call   c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d4e5:	83 c4 10             	add    esp,0x10
c000d4e8:	84 c0                	test   al,al
c000d4ea:	75 18                	jne    c000d504 <timerHandler(unsigned int)+0xe0>
c000d4ec:	83 ec 0c             	sub    esp,0xc
c000d4ef:	68 78 71 02 c0       	push   0xc0027178
c000d4f4:	e8 d3 0f 01 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4f9:	83 c4 10             	add    esp,0x10
c000d4fc:	39 f0                	cmp    eax,esi
c000d4fe:	0f 85 74 ff ff ff    	jne    c000d478 <timerHandler(unsigned int)+0x54>
c000d504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d509:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d50d:	74 41                	je     c000d550 <timerHandler(unsigned int)+0x12c>
c000d50f:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d516:	74 38                	je     c000d550 <timerHandler(unsigned int)+0x12c>
c000d518:	fa                   	cli    
c000d519:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d51f:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d524:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d52a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d52d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d533:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d536:	72 08                	jb     c000d540 <timerHandler(unsigned int)+0x11c>
c000d538:	e8 23 76 00 00       	call   c0014b60 <schedule()>
c000d53d:	8d 76 00             	lea    esi,[esi+0x0]
c000d540:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d545:	48                   	dec    eax
c000d546:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d54b:	75 03                	jne    c000d550 <timerHandler(unsigned int)+0x12c>
c000d54d:	fb                   	sti    
c000d54e:	66 90                	xchg   ax,ax
c000d550:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d555:	48                   	dec    eax
c000d556:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d55b:	75 1b                	jne    c000d578 <timerHandler(unsigned int)+0x154>
c000d55d:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d564:	74 12                	je     c000d578 <timerHandler(unsigned int)+0x154>
c000d566:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d570:	e8 eb 75 00 00       	call   c0014b60 <schedule()>
c000d575:	8d 76 00             	lea    esi,[esi+0x0]
c000d578:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d57d:	48                   	dec    eax
c000d57e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d583:	75 03                	jne    c000d588 <timerHandler(unsigned int)+0x164>
c000d585:	fb                   	sti    
c000d586:	66 90                	xchg   ax,ax
c000d588:	58                   	pop    eax
c000d589:	5b                   	pop    ebx
c000d58a:	5e                   	pop    esi
c000d58b:	c3                   	ret    

c000d58c <VCache::VCache(PhysicalDisk*)>:
c000d58c:	53                   	push   ebx
c000d58d:	83 ec 18             	sub    esp,0x18
c000d590:	ba 20 00 02 c0       	mov    edx,0xc0020020
c000d595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d599:	89 10                	mov    DWORD PTR [eax],edx
c000d59b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d5bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d5c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d5ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d5d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d5e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d606:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d60e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d616:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d61d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d625:	83 ec 0c             	sub    esp,0xc
c000d628:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d62c:	e8 42 a2 ff ff       	call   c0007873 <malloc>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 c3                	mov    ebx,eax
c000d636:	83 ec 0c             	sub    esp,0xc
c000d639:	53                   	push   ebx
c000d63a:	e8 c1 72 00 00       	call   c0014900 <Mutex::Mutex()>
c000d63f:	83 c4 10             	add    esp,0x10
c000d642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d646:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d651:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d658:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d65f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d663:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d670:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d674:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d67a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d680:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d684:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d687:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d68e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d692:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d696:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d69c:	05 00 02 00 00       	add    eax,0x200
c000d6a1:	c1 e0 03             	shl    eax,0x3
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	50                   	push   eax
c000d6a8:	e8 c6 a1 ff ff       	call   c0007873 <malloc>
c000d6ad:	83 c4 10             	add    esp,0x10
c000d6b0:	89 c2                	mov    edx,eax
c000d6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6bd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d6cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d6d6:	89 d0                	mov    eax,edx
c000d6d8:	c1 e0 02             	shl    eax,0x2
c000d6db:	01 d0                	add    eax,edx
c000d6dd:	c1 e0 04             	shl    eax,0x4
c000d6e0:	83 ec 0c             	sub    esp,0xc
c000d6e3:	50                   	push   eax
c000d6e4:	e8 8a a1 ff ff       	call   c0007873 <malloc>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	89 c2                	mov    edx,eax
c000d6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6f5:	90                   	nop
c000d6f6:	83 c4 18             	add    esp,0x18
c000d6f9:	5b                   	pop    ebx
c000d6fa:	c3                   	ret    
c000d6fb:	90                   	nop

c000d6fc <VCache::invalidateReadBuffer()>:
c000d6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d700:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d706:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d70a:	c3                   	ret    
c000d70b:	90                   	nop

c000d70c <VCache::writeWriteBuffer()>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 08             	sub    esp,0x8
c000d710:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d714:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d718:	74 1e                	je     c000d738 <VCache::writeWriteBuffer()+0x2c>
c000d71a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d71d:	83 ec 0c             	sub    esp,0xc
c000d720:	8b 10                	mov    edx,DWORD PTR [eax]
c000d722:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d725:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d728:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d72b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d72e:	50                   	push   eax
c000d72f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d732:	83 c4 20             	add    esp,0x20
c000d735:	8d 76 00             	lea    esi,[esi+0x0]
c000d738:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d73f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d746:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d74a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d751:	83 c4 08             	add    esp,0x8
c000d754:	5b                   	pop    ebx
c000d755:	c3                   	ret    
c000d756:	66 90                	xchg   ax,ax

c000d758 <VCache::~VCache()>:
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	ba 20 00 02 c0       	mov    edx,0xc0020020
c000d760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d764:	89 10                	mov    DWORD PTR [eax],edx
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d76d:	84 c0                	test   al,al
c000d76f:	74 0f                	je     c000d780 <VCache::~VCache()+0x28>
c000d771:	83 ec 0c             	sub    esp,0xc
c000d774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d778:	e8 8f ff ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d77d:	83 c4 10             	add    esp,0x10
c000d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d784:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d787:	83 ec 0c             	sub    esp,0xc
c000d78a:	50                   	push   eax
c000d78b:	e8 f3 a0 ff ff       	call   c0007883 <free>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d797:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d79a:	83 ec 0c             	sub    esp,0xc
c000d79d:	50                   	push   eax
c000d79e:	e8 e0 a0 ff ff       	call   c0007883 <free>
c000d7a3:	83 c4 10             	add    esp,0x10
c000d7a6:	90                   	nop
c000d7a7:	83 c4 0c             	add    esp,0xc
c000d7aa:	c3                   	ret    
c000d7ab:	90                   	nop

c000d7ac <VCache::~VCache()>:
c000d7ac:	83 ec 0c             	sub    esp,0xc
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b6:	e8 9d ff ff ff       	call   c000d758 <VCache::~VCache()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	83 ec 08             	sub    esp,0x8
c000d7c1:	6a 44                	push   0x44
c000d7c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c7:	e8 a1 cd ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000d7cc:	83 c4 10             	add    esp,0x10
c000d7cf:	83 c4 0c             	add    esp,0xc
c000d7d2:	c3                   	ret    
c000d7d3:	90                   	nop

c000d7d4 <VCache::write(unsigned long long, int, void*)>:
c000d7d4:	55                   	push   ebp
c000d7d5:	57                   	push   edi
c000d7d6:	56                   	push   esi
c000d7d7:	53                   	push   ebx
c000d7d8:	83 ec 1c             	sub    esp,0x1c
c000d7db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d7df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d7eb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d7ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7f3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d7f7:	74 07                	je     c000d800 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d7f9:	53                   	push   ebx
c000d7fa:	e8 fd fe ff ff       	call   c000d6fc <VCache::invalidateReadBuffer()>
c000d7ff:	58                   	pop    eax
c000d800:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d804:	74 62                	je     c000d868 <VCache::write(unsigned long long, int, void*)+0x94>
c000d806:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d809:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d80d:	99                   	cdq    
c000d80e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d812:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d815:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d818:	31 c1                	xor    ecx,eax
c000d81a:	89 d0                	mov    eax,edx
c000d81c:	89 ca                	mov    edx,ecx
c000d81e:	31 e8                	xor    eax,ebp
c000d820:	09 c2                	or     edx,eax
c000d822:	75 38                	jne    c000d85c <VCache::write(unsigned long long, int, void*)+0x88>
c000d824:	83 ff 01             	cmp    edi,0x1
c000d827:	75 33                	jne    c000d85c <VCache::write(unsigned long long, int, void*)+0x88>
c000d829:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d82c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d830:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d833:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d839:	0f af c8             	imul   ecx,eax
c000d83c:	01 cf                	add    edi,ecx
c000d83e:	89 c1                	mov    ecx,eax
c000d840:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d842:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d845:	40                   	inc    eax
c000d846:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d849:	83 f8 50             	cmp    eax,0x50
c000d84c:	75 6a                	jne    c000d8b8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d84e:	83 ec 0c             	sub    esp,0xc
c000d851:	53                   	push   ebx
c000d852:	e8 b5 fe ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	eb 5c                	jmp    c000d8b8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d85c:	83 ec 0c             	sub    esp,0xc
c000d85f:	53                   	push   ebx
c000d860:	e8 a7 fe ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d865:	83 c4 10             	add    esp,0x10
c000d868:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d86b:	83 ff 4f             	cmp    edi,0x4f
c000d86e:	7f 20                	jg     c000d890 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d870:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d874:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d877:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d87a:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d87d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d881:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d884:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d88a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d88c:	eb 2a                	jmp    c000d8b8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d88e:	66 90                	xchg   ax,ax
c000d890:	8b 10                	mov    edx,DWORD PTR [eax]
c000d892:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d896:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d89a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d89e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8a2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d8a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8aa:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d8ad:	83 c4 1c             	add    esp,0x1c
c000d8b0:	5b                   	pop    ebx
c000d8b1:	5e                   	pop    esi
c000d8b2:	5f                   	pop    edi
c000d8b3:	5d                   	pop    ebp
c000d8b4:	ff e0                	jmp    eax
c000d8b6:	66 90                	xchg   ax,ax
c000d8b8:	83 c4 1c             	add    esp,0x1c
c000d8bb:	31 c0                	xor    eax,eax
c000d8bd:	5b                   	pop    ebx
c000d8be:	5e                   	pop    esi
c000d8bf:	5f                   	pop    edi
c000d8c0:	5d                   	pop    ebp
c000d8c1:	c3                   	ret    

c000d8c2 <VCache::read(unsigned long long, int, void*)>:
c000d8c2:	55                   	push   ebp
c000d8c3:	57                   	push   edi
c000d8c4:	56                   	push   esi
c000d8c5:	53                   	push   ebx
c000d8c6:	83 ec 1c             	sub    esp,0x1c
c000d8c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d8cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d8d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d8d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d8d9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d8dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8e1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d8e5:	74 0d                	je     c000d8f4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d8e7:	83 ec 0c             	sub    esp,0xc
c000d8ea:	57                   	push   edi
c000d8eb:	e8 1c fe ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	90                   	nop
c000d8f4:	83 fd 01             	cmp    ebp,0x1
c000d8f7:	0f 85 93 00 00 00    	jne    c000d990 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d900:	89 04 24             	mov    DWORD PTR [esp],eax
c000d903:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d90a:	0f 85 80 00 00 00    	jne    c000d990 <VCache::read(unsigned long long, int, void*)+0xce>
c000d910:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d913:	89 e9                	mov    ecx,ebp
c000d915:	f7 d9                	neg    ecx
c000d917:	89 c8                	mov    eax,ecx
c000d919:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d91d:	c1 f8 1f             	sar    eax,0x1f
c000d920:	21 d9                	and    ecx,ebx
c000d922:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d926:	89 c8                	mov    eax,ecx
c000d928:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d92c:	21 f1                	and    ecx,esi
c000d92e:	89 ca                	mov    edx,ecx
c000d930:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d934:	74 2e                	je     c000d964 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d936:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d939:	75 29                	jne    c000d964 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d93b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d93e:	75 24                	jne    c000d964 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d940:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d943:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d949:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d94c:	8d 70 ff             	lea    esi,[eax-0x1]
c000d94f:	21 f3                	and    ebx,esi
c000d951:	0f af d9             	imul   ebx,ecx
c000d954:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d957:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d95b:	89 de                	mov    esi,ebx
c000d95d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d95f:	31 c0                	xor    eax,eax
c000d961:	eb 61                	jmp    c000d9c4 <VCache::read(unsigned long long, int, void*)+0x102>
c000d963:	90                   	nop
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d96b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d96e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d975:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d977:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d97a:	55                   	push   ebp
c000d97b:	52                   	push   edx
c000d97c:	50                   	push   eax
c000d97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d981:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d984:	83 c4 20             	add    esp,0x20
c000d987:	85 c0                	test   eax,eax
c000d989:	75 39                	jne    c000d9c4 <VCache::read(unsigned long long, int, void*)+0x102>
c000d98b:	eb b3                	jmp    c000d940 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d98d:	8d 76 00             	lea    esi,[esi+0x0]
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	57                   	push   edi
c000d994:	e8 63 fd ff ff       	call   c000d6fc <VCache::invalidateReadBuffer()>
c000d999:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d99c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9a2:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d9a6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d9aa:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d9ae:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d9b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d9b6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d9b9:	83 c4 2c             	add    esp,0x2c
c000d9bc:	5b                   	pop    ebx
c000d9bd:	5e                   	pop    esi
c000d9be:	5f                   	pop    edi
c000d9bf:	5d                   	pop    ebp
c000d9c0:	ff e0                	jmp    eax
c000d9c2:	66 90                	xchg   ax,ax
c000d9c4:	83 c4 1c             	add    esp,0x1c
c000d9c7:	5b                   	pop    ebx
c000d9c8:	5e                   	pop    esi
c000d9c9:	5f                   	pop    edi
c000d9ca:	5d                   	pop    ebp
c000d9cb:	c3                   	ret    

c000d9cc <Video::putrect(int, int, int, int, unsigned int)>:
c000d9cc:	55                   	push   ebp
c000d9cd:	57                   	push   edi
c000d9ce:	56                   	push   esi
c000d9cf:	53                   	push   ebx
c000d9d0:	83 ec 1c             	sub    esp,0x1c
c000d9d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d9db:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d9df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d9e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9eb:	01 df                	add    edi,ebx
c000d9ed:	39 fb                	cmp    ebx,edi
c000d9ef:	7d 1f                	jge    c000da10 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9f5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9f9:	7d 12                	jge    c000da0d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d9fb:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da01:	53                   	push   ebx
c000da02:	55                   	push   ebp
c000da03:	45                   	inc    ebp
c000da04:	56                   	push   esi
c000da05:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da08:	83 c4 10             	add    esp,0x10
c000da0b:	eb e8                	jmp    c000d9f5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000da0d:	43                   	inc    ebx
c000da0e:	eb dd                	jmp    c000d9ed <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000da10:	83 c4 1c             	add    esp,0x1c
c000da13:	5b                   	pop    ebx
c000da14:	5e                   	pop    esi
c000da15:	5f                   	pop    edi
c000da16:	5d                   	pop    ebp
c000da17:	c3                   	ret    

c000da18 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000da18:	55                   	push   ebp
c000da19:	57                   	push   edi
c000da1a:	31 ff                	xor    edi,edi
c000da1c:	56                   	push   esi
c000da1d:	53                   	push   ebx
c000da1e:	83 ec 1c             	sub    esp,0x1c
c000da21:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000da25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000da29:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000da30:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000da35:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000da39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da41:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000da44:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da48:	01 f9                	add    ecx,edi
c000da4a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000da4e:	7d 2f                	jge    c000da7f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da50:	31 f6                	xor    esi,esi
c000da52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da56:	01 f2                	add    edx,esi
c000da58:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da5c:	7d 1a                	jge    c000da78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da61:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da64:	46                   	inc    esi
c000da65:	51                   	push   ecx
c000da66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da6a:	52                   	push   edx
c000da6b:	55                   	push   ebp
c000da6c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da76:	eb da                	jmp    c000da52 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da78:	47                   	inc    edi
c000da79:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da7d:	eb c5                	jmp    c000da44 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da7f:	83 c4 1c             	add    esp,0x1c
c000da82:	5b                   	pop    ebx
c000da83:	5e                   	pop    esi
c000da84:	5f                   	pop    edi
c000da85:	5d                   	pop    ebp
c000da86:	c3                   	ret    
c000da87:	90                   	nop

c000da88 <Video::blit(unsigned int*, int, int, int, int)>:
c000da88:	55                   	push   ebp
c000da89:	57                   	push   edi
c000da8a:	56                   	push   esi
c000da8b:	53                   	push   ebx
c000da8c:	83 ec 1c             	sub    esp,0x1c
c000da8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da97:	85 c0                	test   eax,eax
c000da99:	79 02                	jns    c000da9d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da9b:	31 c0                	xor    eax,eax
c000da9d:	c1 e0 02             	shl    eax,0x2
c000daa0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000daa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000daa8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000daac:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000dab0:	39 d8                	cmp    eax,ebx
c000dab2:	7e 49                	jle    c000dafd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dab4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000daba:	7c 41                	jl     c000dafd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dabc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dac0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dac4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dac8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dacc:	39 f9                	cmp    ecx,edi
c000dace:	7e 22                	jle    c000daf2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dad0:	83 c5 04             	add    ebp,0x4
c000dad3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dad9:	7c 14                	jl     c000daef <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dadb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dadd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000dae0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dae4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dae8:	56                   	push   esi
c000dae9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000daec:	83 c4 10             	add    esp,0x10
c000daef:	47                   	inc    edi
c000daf0:	eb d2                	jmp    c000dac4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000daf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf6:	43                   	inc    ebx
c000daf7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dafb:	eb ab                	jmp    c000daa8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000dafd:	83 c4 1c             	add    esp,0x1c
c000db00:	5b                   	pop    ebx
c000db01:	5e                   	pop    esi
c000db02:	5f                   	pop    edi
c000db03:	5d                   	pop    ebp
c000db04:	c3                   	ret    
c000db05:	90                   	nop

c000db06 <Video::clearScreen(unsigned int)>:
c000db06:	57                   	push   edi
c000db07:	56                   	push   esi
c000db08:	53                   	push   ebx
c000db09:	31 db                	xor    ebx,ebx
c000db0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db0f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000db15:	7e 1f                	jle    c000db36 <Video::clearScreen(unsigned int)+0x30>
c000db17:	31 ff                	xor    edi,edi
c000db19:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000db1f:	7e 12                	jle    c000db33 <Video::clearScreen(unsigned int)+0x2d>
c000db21:	8b 06                	mov    eax,DWORD PTR [esi]
c000db23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db27:	53                   	push   ebx
c000db28:	57                   	push   edi
c000db29:	47                   	inc    edi
c000db2a:	56                   	push   esi
c000db2b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db2e:	83 c4 10             	add    esp,0x10
c000db31:	eb e6                	jmp    c000db19 <Video::clearScreen(unsigned int)+0x13>
c000db33:	43                   	inc    ebx
c000db34:	eb d9                	jmp    c000db0f <Video::clearScreen(unsigned int)+0x9>
c000db36:	5b                   	pop    ebx
c000db37:	5e                   	pop    esi
c000db38:	5f                   	pop    edi
c000db39:	c3                   	ret    

c000db3a <Video::putpixel(int, int, unsigned int)>:
c000db3a:	c7 44 24 04 28 00 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020028
c000db42:	e9 d0 28 00 00       	jmp    c0010417 <KePanic(char const*)>
c000db47:	90                   	nop

c000db48 <Video::readPixelApprox(int, int)>:
c000db48:	83 ec 18             	sub    esp,0x18
c000db4b:	68 49 00 02 c0       	push   0xc0020049
c000db50:	e8 c2 28 00 00       	call   c0010417 <KePanic(char const*)>
c000db55:	31 c0                	xor    eax,eax
c000db57:	83 c4 1c             	add    esp,0x1c
c000db5a:	c3                   	ret    
c000db5b:	90                   	nop

c000db5c <Video::Video(char const*)>:
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db63:	83 ec 08             	sub    esp,0x8
c000db66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6a:	50                   	push   eax
c000db6b:	e8 c4 e0 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000db70:	83 c4 10             	add    esp,0x10
c000db73:	ba c4 00 02 c0       	mov    edx,0xc00200c4
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db8c:	90                   	nop
c000db8d:	83 c4 0c             	add    esp,0xc
c000db90:	c3                   	ret    
c000db91:	90                   	nop

c000db92 <Video::~Video()>:
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	ba c4 00 02 c0       	mov    edx,0xc00200c4
c000db9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9e:	89 10                	mov    DWORD PTR [eax],edx
c000dba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba4:	83 ec 0c             	sub    esp,0xc
c000dba7:	50                   	push   eax
c000dba8:	e8 f5 dd ff ff       	call   c000b9a2 <Device::~Device()>
c000dbad:	83 c4 10             	add    esp,0x10
c000dbb0:	90                   	nop
c000dbb1:	83 c4 0c             	add    esp,0xc
c000dbb4:	c3                   	ret    
c000dbb5:	90                   	nop

c000dbb6 <Video::~Video()>:
c000dbb6:	83 ec 0c             	sub    esp,0xc
c000dbb9:	83 ec 0c             	sub    esp,0xc
c000dbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc0:	e8 cd ff ff ff       	call   c000db92 <Video::~Video()>
c000dbc5:	83 c4 10             	add    esp,0x10
c000dbc8:	83 ec 08             	sub    esp,0x8
c000dbcb:	68 64 01 00 00       	push   0x164
c000dbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd4:	e8 94 c9 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	83 c4 0c             	add    esp,0xc
c000dbdf:	c3                   	ret    

c000dbe0 <Video::isMonochrome()>:
c000dbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbe4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dbea:	c3                   	ret    
c000dbeb:	90                   	nop

c000dbec <Video::getWidth()>:
c000dbec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbf0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbf6:	c3                   	ret    
c000dbf7:	90                   	nop

c000dbf8 <Video::getHeight()>:
c000dbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbfc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc02:	c3                   	ret    
c000dc03:	90                   	nop

c000dc04 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dc04:	55                   	push   ebp
c000dc05:	57                   	push   edi
c000dc06:	56                   	push   esi
c000dc07:	53                   	push   ebx
c000dc08:	83 ec 2c             	sub    esp,0x2c
c000dc0b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dc0f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc13:	83 f8 01             	cmp    eax,0x1
c000dc16:	19 c9                	sbb    ecx,ecx
c000dc18:	31 db                	xor    ebx,ebx
c000dc1a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dc1e:	89 cd                	mov    ebp,ecx
c000dc20:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dc28:	f7 d5                	not    ebp
c000dc2a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dc30:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dc34:	01 d8                	add    eax,ebx
c000dc36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc3a:	56                   	push   esi
c000dc3b:	e8 b8 ff ff ff       	call   c000dbf8 <Video::getHeight()>
c000dc40:	59                   	pop    ecx
c000dc41:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dc45:	7e 70                	jle    c000dcb7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dc47:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc4b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dc4f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc56:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc5a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc65:	89 f8                	mov    eax,edi
c000dc67:	83 c0 20             	add    eax,0x20
c000dc6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc6e:	56                   	push   esi
c000dc6f:	e8 78 ff ff ff       	call   c000dbec <Video::getWidth()>
c000dc74:	5a                   	pop    edx
c000dc75:	39 c7                	cmp    edi,eax
c000dc77:	7d 34                	jge    c000dcad <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc79:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc7e:	74 05                	je     c000dc85 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc80:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc82:	55                   	push   ebp
c000dc83:	eb 0d                	jmp    c000dc92 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc85:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc8a:	74 12                	je     c000dc9e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc8c:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc96:	57                   	push   edi
c000dc97:	56                   	push   esi
c000dc98:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc9b:	83 c4 10             	add    esp,0x10
c000dc9e:	47                   	inc    edi
c000dc9f:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dca3:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dca7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dcab:	75 c1                	jne    c000dc6e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dcad:	43                   	inc    ebx
c000dcae:	83 fb 20             	cmp    ebx,0x20
c000dcb1:	0f 85 79 ff ff ff    	jne    c000dc30 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dcb7:	83 c4 2c             	add    esp,0x2c
c000dcba:	5b                   	pop    ebx
c000dcbb:	5e                   	pop    esi
c000dcbc:	5f                   	pop    edi
c000dcbd:	5d                   	pop    ebp
c000dcbe:	c3                   	ret    
c000dcbf:	90                   	nop

c000dcc0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dcc0:	55                   	push   ebp
c000dcc1:	57                   	push   edi
c000dcc2:	56                   	push   esi
c000dcc3:	53                   	push   ebx
c000dcc4:	83 ec 28             	sub    esp,0x28
c000dcc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dccb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dccf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dcd3:	c1 e6 08             	shl    esi,0x8
c000dcd6:	01 c6                	add    esi,eax
c000dcd8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dcdc:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dce0:	c1 e0 08             	shl    eax,0x8
c000dce3:	01 d0                	add    eax,edx
c000dce5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dce9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dced:	0f af c6             	imul   eax,esi
c000dcf0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dcf7:	50                   	push   eax
c000dcf8:	e8 76 9b ff ff       	call   c0007873 <malloc>
c000dcfd:	83 c4 10             	add    esp,0x10
c000dd00:	89 c7                	mov    edi,eax
c000dd02:	85 c0                	test   eax,eax
c000dd04:	75 10                	jne    c000dd16 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dd06:	83 ec 0c             	sub    esp,0xc
c000dd09:	68 74 00 02 c0       	push   0xc0020074
c000dd0e:	e8 04 27 00 00       	call   c0010417 <KePanic(char const*)>
c000dd13:	83 c4 10             	add    esp,0x10
c000dd16:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dd19:	ba 12 00 00 00       	mov    edx,0x12
c000dd1e:	84 c0                	test   al,al
c000dd20:	74 11                	je     c000dd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dd22:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dd26:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dd2a:	c1 fa 03             	sar    edx,0x3
c000dd2d:	0f af d1             	imul   edx,ecx
c000dd30:	83 c2 12             	add    edx,0x12
c000dd33:	85 f6                	test   esi,esi
c000dd35:	74 06                	je     c000dd3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dd37:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dd3b:	75 12                	jne    c000dd4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dd3d:	83 ec 0c             	sub    esp,0xc
c000dd40:	68 84 00 02 c0       	push   0xc0020084
c000dd45:	e8 19 c9 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000dd4a:	e9 b8 00 00 00       	jmp    c000de07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dd4f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd53:	80 f9 02             	cmp    cl,0x2
c000dd56:	0f 85 96 00 00 00    	jne    c000ddf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd5c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd61:	75 0e                	jne    c000dd71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd63:	84 c0                	test   al,al
c000dd65:	75 0a                	jne    c000dd71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd67:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd6a:	83 e8 18             	sub    eax,0x18
c000dd6d:	a8 f7                	test   al,0xf7
c000dd6f:	74 0a                	je     c000dd7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd71:	83 ec 0c             	sub    esp,0xc
c000dd74:	68 99 00 02 c0       	push   0xc0020099
c000dd79:	eb 7f                	jmp    c000ddfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd8b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd8f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd97:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd9b:	75 0c                	jne    c000dda9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd9d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dda2:	c1 e0 18             	shl    eax,0x18
c000dda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dda9:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ddae:	c1 e1 10             	shl    ecx,0x10
c000ddb1:	45                   	inc    ebp
c000ddb2:	89 c8                	mov    eax,ecx
c000ddb4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ddb9:	c1 e1 08             	shl    ecx,0x8
c000ddbc:	09 c1                	or     ecx,eax
c000ddbe:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ddc2:	09 c1                	or     ecx,eax
c000ddc4:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ddc8:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ddcc:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ddd0:	c1 f8 03             	sar    eax,0x3
c000ddd3:	01 c2                	add    edx,eax
c000ddd5:	89 e8                	mov    eax,ebp
c000ddd7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dddb:	39 c6                	cmp    esi,eax
c000dddd:	7f b0                	jg     c000dd8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dddf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dde3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dde7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ddea:	7e 22                	jle    c000de0e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ddec:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ddf0:	eb 99                	jmp    c000dd8b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000ddf2:	50                   	push   eax
c000ddf3:	50                   	push   eax
c000ddf4:	51                   	push   ecx
c000ddf5:	68 a7 00 02 c0       	push   0xc00200a7
c000ddfa:	e8 64 c8 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000ddff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000de02:	e8 7c 9a ff ff       	call   c0007883 <free>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	31 ff                	xor    edi,edi
c000de0c:	eb 0f                	jmp    c000de1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000de0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de12:	89 30                	mov    DWORD PTR [eax],esi
c000de14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de18:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de1b:	89 30                	mov    DWORD PTR [eax],esi
c000de1d:	83 c4 1c             	add    esp,0x1c
c000de20:	89 f8                	mov    eax,edi
c000de22:	5b                   	pop    ebx
c000de23:	5e                   	pop    esi
c000de24:	5f                   	pop    edi
c000de25:	5d                   	pop    ebp
c000de26:	c3                   	ret    
c000de27:	90                   	nop

c000de28 <Video::putTGA(int, int, unsigned char*, int)>:
c000de28:	55                   	push   ebp
c000de29:	57                   	push   edi
c000de2a:	56                   	push   esi
c000de2b:	53                   	push   ebx
c000de2c:	83 ec 28             	sub    esp,0x28
c000de2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000de33:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000de37:	50                   	push   eax
c000de38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000de3c:	50                   	push   eax
c000de3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de45:	56                   	push   esi
c000de46:	e8 75 fe ff ff       	call   c000dcc0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000de4b:	83 c4 20             	add    esp,0x20
c000de4e:	85 c0                	test   eax,eax
c000de50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de54:	74 35                	je     c000de8b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de56:	89 c7                	mov    edi,eax
c000de58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de60:	39 d8                	cmp    eax,ebx
c000de62:	7e 27                	jle    c000de8b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de70:	39 e8                	cmp    eax,ebp
c000de72:	7e 14                	jle    c000de88 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de74:	83 c7 04             	add    edi,0x4
c000de77:	8b 06                	mov    eax,DWORD PTR [esi]
c000de79:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de7c:	53                   	push   ebx
c000de7d:	55                   	push   ebp
c000de7e:	45                   	inc    ebp
c000de7f:	56                   	push   esi
c000de80:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de83:	83 c4 10             	add    esp,0x10
c000de86:	eb e0                	jmp    c000de68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de88:	43                   	inc    ebx
c000de89:	eb cd                	jmp    c000de58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de8b:	83 c4 1c             	add    esp,0x1c
c000de8e:	5b                   	pop    ebx
c000de8f:	5e                   	pop    esi
c000de90:	5f                   	pop    edi
c000de91:	5d                   	pop    ebp
c000de92:	c3                   	ret    
c000de93:	90                   	nop

c000de94 <ACPI::close(int, int, void*)>:
c000de94:	83 ec 1c             	sub    esp,0x1c
c000de97:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de9f:	74 0b                	je     c000deac <ACPI::close(int, int, void*)+0x18>
c000dea1:	b8 00 00 00 00       	mov    eax,0x0
c000dea6:	e9 9d 00 00 00       	jmp    c000df48 <ACPI::close(int, int, void*)+0xb4>
c000deab:	90                   	nop
c000deac:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000deb1:	75 29                	jne    c000dedc <ACPI::close(int, int, void*)+0x48>
c000deb3:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000deb8:	85 c0                	test   eax,eax
c000deba:	74 08                	je     c000dec4 <ACPI::close(int, int, void*)+0x30>
c000debc:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000dec1:	ff d0                	call   eax
c000dec3:	90                   	nop
c000dec4:	83 ec 0c             	sub    esp,0xc
c000dec7:	68 08 01 02 c0       	push   0xc0020108
c000decc:	e8 46 25 00 00       	call   c0010417 <KePanic(char const*)>
c000ded1:	83 c4 10             	add    esp,0x10
c000ded4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ded9:	eb 6d                	jmp    c000df48 <ACPI::close(int, int, void*)+0xb4>
c000dedb:	90                   	nop
c000dedc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dee1:	75 5d                	jne    c000df40 <ACPI::close(int, int, void*)+0xac>
c000dee3:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dee8:	85 c0                	test   eax,eax
c000deea:	74 08                	je     c000def4 <ACPI::close(int, int, void*)+0x60>
c000deec:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000def1:	ff d0                	call   eax
c000def3:	90                   	nop
c000def4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000def9:	8d 76 00             	lea    esi,[esi+0x0]
c000defc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df00:	25 ff 00 00 00       	and    eax,0xff
c000df05:	83 e0 02             	and    eax,0x2
c000df08:	74 1e                	je     c000df28 <ACPI::close(int, int, void*)+0x94>
c000df0a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000df11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df15:	89 c2                	mov    edx,eax
c000df17:	ec                   	in     al,dx
c000df18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000df1c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000df20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000df24:	eb d6                	jmp    c000defc <ACPI::close(int, int, void*)+0x68>
c000df26:	66 90                	xchg   ax,ax
c000df28:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000df2f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000df34:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000df38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df3c:	ee                   	out    dx,al
c000df3d:	8d 76 00             	lea    esi,[esi+0x0]
c000df40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df45:	8d 76 00             	lea    esi,[esi+0x0]
c000df48:	83 c4 1c             	add    esp,0x1c
c000df4b:	c3                   	ret    

c000df4c <findRSDP()>:
c000df4c:	83 ec 1c             	sub    esp,0x1c
c000df4f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df54:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df5a:	83 e0 04             	and    eax,0x4
c000df5d:	84 c0                	test   al,al
c000df5f:	75 07                	jne    c000df68 <findRSDP()+0x1c>
c000df61:	b8 00 00 00 00       	mov    eax,0x0
c000df66:	eb 70                	jmp    c000dfd8 <findRSDP()+0x8c>
c000df68:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df6d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df72:	7f 1c                	jg     c000df90 <findRSDP()+0x44>
c000df74:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df79:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df7f:	83 e2 fb             	and    edx,0xfffffffb
c000df82:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df88:	b8 00 00 00 00       	mov    eax,0x0
c000df8d:	eb 49                	jmp    c000dfd8 <findRSDP()+0x8c>
c000df8f:	90                   	nop
c000df90:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df98:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dfa0:	77 2e                	ja     c000dfd0 <findRSDP()+0x84>
c000dfa2:	83 ec 04             	sub    esp,0x4
c000dfa5:	6a 08                	push   0x8
c000dfa7:	68 a3 01 02 c0       	push   0xc00201a3
c000dfac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfb0:	e8 cb 23 ff ff       	call   c0000380 <memcmp>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	85 c0                	test   eax,eax
c000dfba:	0f 94 c0             	sete   al
c000dfbd:	84 c0                	test   al,al
c000dfbf:	74 07                	je     c000dfc8 <findRSDP()+0x7c>
c000dfc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfc5:	eb 11                	jmp    c000dfd8 <findRSDP()+0x8c>
c000dfc7:	90                   	nop
c000dfc8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dfcd:	eb c9                	jmp    c000df98 <findRSDP()+0x4c>
c000dfcf:	90                   	nop
c000dfd0:	b8 00 00 00 00       	mov    eax,0x0
c000dfd5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd8:	83 c4 1c             	add    esp,0x1c
c000dfdb:	c3                   	ret    

c000dfdc <loadACPITables(unsigned char*)>:
c000dfdc:	57                   	push   edi
c000dfdd:	56                   	push   esi
c000dfde:	53                   	push   ebx
c000dfdf:	83 ec 60             	sub    esp,0x60
c000dfe2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000dfe7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfed:	83 e0 04             	and    eax,0x4
c000dff0:	84 c0                	test   al,al
c000dff2:	0f 84 3c 02 00 00    	je     c000e234 <loadACPITables(unsigned char*)+0x258>
c000dff8:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000dffd:	84 c0                	test   al,al
c000dfff:	74 77                	je     c000e078 <loadACPITables(unsigned char*)+0x9c>
c000e001:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e005:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e009:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e00d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e010:	83 e8 24             	sub    eax,0x24
c000e013:	c1 e8 03             	shr    eax,0x3
c000e016:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e01a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e022:	66 90                	xchg   ax,ax
c000e024:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e028:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e02c:	0f 8d b6 00 00 00    	jge    c000e0e8 <loadACPITables(unsigned char*)+0x10c>
c000e032:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e036:	83 c0 24             	add    eax,0x24
c000e039:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e03d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e041:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e045:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e049:	c1 e0 03             	shl    eax,0x3
c000e04c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e050:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e054:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e057:	8b 00                	mov    eax,DWORD PTR [eax]
c000e059:	89 c1                	mov    ecx,eax
c000e05b:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e060:	8d 50 01             	lea    edx,[eax+0x1]
c000e063:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e069:	89 ca                	mov    edx,ecx
c000e06b:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e072:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e076:	eb ac                	jmp    c000e024 <loadACPITables(unsigned char*)+0x48>
c000e078:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e07c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e087:	83 e8 24             	sub    eax,0x24
c000e08a:	c1 e8 02             	shr    eax,0x2
c000e08d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e091:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e099:	8d 76 00             	lea    esi,[esi+0x0]
c000e09c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e0a0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e0a4:	7d 42                	jge    c000e0e8 <loadACPITables(unsigned char*)+0x10c>
c000e0a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e0aa:	83 c0 24             	add    eax,0x24
c000e0ad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e0b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e0b9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e0bd:	c1 e0 02             	shl    eax,0x2
c000e0c0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e0c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e0ca:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0cf:	8d 50 01             	lea    edx,[eax+0x1]
c000e0d2:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e0d8:	89 ca                	mov    edx,ecx
c000e0da:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e0e1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e0e5:	eb b5                	jmp    c000e09c <loadACPITables(unsigned char*)+0xc0>
c000e0e7:	90                   	nop
c000e0e8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0f0:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0f5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0f9:	0f 8d 39 01 00 00    	jge    c000e238 <loadACPITables(unsigned char*)+0x25c>
c000e0ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e103:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e10a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e10e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e11a:	25 ff 0f 00 00       	and    eax,0xfff
c000e11f:	89 c6                	mov    esi,eax
c000e121:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e127:	83 ec 0c             	sub    esp,0xc
c000e12a:	6a 01                	push   0x1
c000e12c:	e8 41 b2 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e138:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e13e:	83 ec 0c             	sub    esp,0xc
c000e141:	6a 01                	push   0x1
c000e143:	6a 01                	push   0x1
c000e145:	50                   	push   eax
c000e146:	52                   	push   edx
c000e147:	53                   	push   ebx
c000e148:	e8 f3 bb ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e14d:	83 c4 20             	add    esp,0x20
c000e150:	09 f0                	or     eax,esi
c000e152:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e156:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e15a:	c1 e0 03             	shl    eax,0x3
c000e15d:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e162:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e16a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e16e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e176:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e17a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e17e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e182:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e186:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e18a:	89 c6                	mov    esi,eax
c000e18c:	89 d7                	mov    edi,edx
c000e18e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e190:	89 c8                	mov    eax,ecx
c000e192:	89 fa                	mov    edx,edi
c000e194:	89 f3                	mov    ebx,esi
c000e196:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e19a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e19e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1b1:	05 00 10 00 00       	add    eax,0x1000
c000e1b6:	c1 e8 0c             	shr    eax,0xc
c000e1b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1c9:	25 ff 0f 00 00       	and    eax,0xfff
c000e1ce:	89 c6                	mov    esi,eax
c000e1d0:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e1d6:	83 ec 0c             	sub    esp,0xc
c000e1d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1dd:	e8 90 b1 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c000e1e2:	83 c4 10             	add    esp,0x10
c000e1e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e1e9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1ef:	83 ec 0c             	sub    esp,0xc
c000e1f2:	6a 01                	push   0x1
c000e1f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1f8:	50                   	push   eax
c000e1f9:	52                   	push   edx
c000e1fa:	53                   	push   ebx
c000e1fb:	e8 40 bb ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e200:	83 c4 20             	add    esp,0x20
c000e203:	09 f0                	or     eax,esi
c000e205:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	50                   	push   eax
c000e211:	e8 5b b4 ff ff       	call   c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c000e216:	83 c4 10             	add    esp,0x10
c000e219:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e21d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e221:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e228:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e22c:	e9 bf fe ff ff       	jmp    c000e0f0 <loadACPITables(unsigned char*)+0x114>
c000e231:	8d 76 00             	lea    esi,[esi+0x0]
c000e234:	90                   	nop
c000e235:	8d 76 00             	lea    esi,[esi+0x0]
c000e238:	83 c4 60             	add    esp,0x60
c000e23b:	5b                   	pop    ebx
c000e23c:	5e                   	pop    esi
c000e23d:	5f                   	pop    edi
c000e23e:	c3                   	ret    
c000e23f:	90                   	nop

c000e240 <findRSDT(unsigned char*)>:
c000e240:	57                   	push   edi
c000e241:	56                   	push   esi
c000e242:	53                   	push   ebx
c000e243:	83 ec 50             	sub    esp,0x50
c000e246:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e24b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e251:	83 e0 04             	and    eax,0x4
c000e254:	84 c0                	test   al,al
c000e256:	75 0c                	jne    c000e264 <findRSDT(unsigned char*)+0x24>
c000e258:	b8 00 00 00 00       	mov    eax,0x0
c000e25d:	e9 26 01 00 00       	jmp    c000e388 <findRSDT(unsigned char*)+0x148>
c000e262:	66 90                	xchg   ax,ax
c000e264:	89 e0                	mov    eax,esp
c000e266:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e26a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e26e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e272:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e27a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e27e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e282:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e286:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e28a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e28e:	89 c6                	mov    esi,eax
c000e290:	89 d7                	mov    edi,edx
c000e292:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e294:	89 c8                	mov    eax,ecx
c000e296:	89 fa                	mov    edx,edi
c000e298:	89 f3                	mov    ebx,esi
c000e29a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e29e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e2a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e2a6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e2aa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e2ae:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e2b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e2ce:	25 ff 0f 00 00       	and    eax,0xfff
c000e2d3:	89 c6                	mov    esi,eax
c000e2d5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2db:	83 ec 0c             	sub    esp,0xc
c000e2de:	6a 02                	push   0x2
c000e2e0:	e8 8d b0 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c000e2e5:	83 c4 10             	add    esp,0x10
c000e2e8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e2ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2f2:	83 ec 0c             	sub    esp,0xc
c000e2f5:	6a 01                	push   0x1
c000e2f7:	6a 02                	push   0x2
c000e2f9:	50                   	push   eax
c000e2fa:	52                   	push   edx
c000e2fb:	53                   	push   ebx
c000e2fc:	e8 3f ba ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	09 f0                	or     eax,esi
c000e306:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e30a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e30e:	25 ff 0f 00 00       	and    eax,0xfff
c000e313:	89 c6                	mov    esi,eax
c000e315:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e31b:	83 ec 0c             	sub    esp,0xc
c000e31e:	6a 02                	push   0x2
c000e320:	e8 4d b0 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c000e325:	83 c4 10             	add    esp,0x10
c000e328:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e32c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e332:	83 ec 0c             	sub    esp,0xc
c000e335:	6a 01                	push   0x1
c000e337:	6a 02                	push   0x2
c000e339:	50                   	push   eax
c000e33a:	52                   	push   edx
c000e33b:	53                   	push   ebx
c000e33c:	e8 ff b9 ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e341:	83 c4 20             	add    esp,0x20
c000e344:	09 f0                	or     eax,esi
c000e346:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e34a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e34f:	75 13                	jne    c000e364 <findRSDT(unsigned char*)+0x124>
c000e351:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e358:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e35c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e360:	eb 22                	jmp    c000e384 <findRSDT(unsigned char*)+0x144>
c000e362:	66 90                	xchg   ax,ax
c000e364:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e369:	75 11                	jne    c000e37c <findRSDT(unsigned char*)+0x13c>
c000e36b:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e372:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e376:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e37a:	eb 08                	jmp    c000e384 <findRSDT(unsigned char*)+0x144>
c000e37c:	b8 00 00 00 00       	mov    eax,0x0
c000e381:	eb 05                	jmp    c000e388 <findRSDT(unsigned char*)+0x148>
c000e383:	90                   	nop
c000e384:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e388:	83 c4 50             	add    esp,0x50
c000e38b:	5b                   	pop    ebx
c000e38c:	5e                   	pop    esi
c000e38d:	5f                   	pop    edi
c000e38e:	c3                   	ret    
c000e38f:	90                   	nop

c000e390 <findDataTable(unsigned char*, char*)>:
c000e390:	83 ec 1c             	sub    esp,0x1c
c000e393:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e398:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e39e:	83 e0 04             	and    eax,0x4
c000e3a1:	84 c0                	test   al,al
c000e3a3:	75 07                	jne    c000e3ac <findDataTable(unsigned char*, char*)+0x1c>
c000e3a5:	b8 00 00 00 00       	mov    eax,0x0
c000e3aa:	eb 58                	jmp    c000e404 <findDataTable(unsigned char*, char*)+0x74>
c000e3ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3b4:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e3b9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e3bd:	7d 3d                	jge    c000e3fc <findDataTable(unsigned char*, char*)+0x6c>
c000e3bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c3:	c1 e0 03             	shl    eax,0x3
c000e3c6:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e3cb:	83 ec 04             	sub    esp,0x4
c000e3ce:	6a 04                	push   0x4
c000e3d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3d4:	50                   	push   eax
c000e3d5:	e8 a6 1f ff ff       	call   c0000380 <memcmp>
c000e3da:	83 c4 10             	add    esp,0x10
c000e3dd:	85 c0                	test   eax,eax
c000e3df:	0f 94 c0             	sete   al
c000e3e2:	84 c0                	test   al,al
c000e3e4:	74 0e                	je     c000e3f4 <findDataTable(unsigned char*, char*)+0x64>
c000e3e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ea:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e3f1:	eb 11                	jmp    c000e404 <findDataTable(unsigned char*, char*)+0x74>
c000e3f3:	90                   	nop
c000e3f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3f8:	eb ba                	jmp    c000e3b4 <findDataTable(unsigned char*, char*)+0x24>
c000e3fa:	66 90                	xchg   ax,ax
c000e3fc:	b8 00 00 00 00       	mov    eax,0x0
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	83 c4 1c             	add    esp,0x1c
c000e407:	c3                   	ret    

c000e408 <scanMADT()>:
c000e408:	53                   	push   ebx
c000e409:	83 ec 38             	sub    esp,0x38
c000e40c:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e411:	25 00 04 00 00       	and    eax,0x400
c000e416:	74 14                	je     c000e42c <scanMADT()+0x24>
c000e418:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e41d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e423:	83 e2 fb             	and    edx,0xfffffffb
c000e426:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e42c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e431:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e437:	83 e0 04             	and    eax,0x4
c000e43a:	84 c0                	test   al,al
c000e43c:	0f 84 8a 04 00 00    	je     c000e8cc <scanMADT()+0x4c4>
c000e442:	e8 05 fb ff ff       	call   c000df4c <findRSDP()>
c000e447:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e44c:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e451:	85 c0                	test   eax,eax
c000e453:	75 1b                	jne    c000e470 <scanMADT()+0x68>
c000e455:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e45a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e460:	83 e2 fb             	and    edx,0xfffffffb
c000e463:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e469:	e9 66 04 00 00       	jmp    c000e8d4 <scanMADT()+0x4cc>
c000e46e:	66 90                	xchg   ax,ax
c000e470:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e475:	83 ec 0c             	sub    esp,0xc
c000e478:	50                   	push   eax
c000e479:	e8 c2 fd ff ff       	call   c000e240 <findRSDT(unsigned char*)>
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e486:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e48b:	85 c0                	test   eax,eax
c000e48d:	75 19                	jne    c000e4a8 <scanMADT()+0xa0>
c000e48f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e494:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e49a:	83 e2 fb             	and    edx,0xfffffffb
c000e49d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4a3:	e9 2c 04 00 00       	jmp    c000e8d4 <scanMADT()+0x4cc>
c000e4a8:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e4ad:	83 ec 0c             	sub    esp,0xc
c000e4b0:	50                   	push   eax
c000e4b1:	e8 26 fb ff ff       	call   c000dfdc <loadACPITables(unsigned char*)>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e4be:	83 ec 08             	sub    esp,0x8
c000e4c1:	68 ac 01 02 c0       	push   0xc00201ac
c000e4c6:	50                   	push   eax
c000e4c7:	e8 c4 fe ff ff       	call   c000e390 <findDataTable(unsigned char*, char*)>
c000e4cc:	83 c4 10             	add    esp,0x10
c000e4cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4d3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e4d8:	75 1a                	jne    c000e4f4 <scanMADT()+0xec>
c000e4da:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e4df:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e4e5:	83 e2 fe             	and    edx,0xfffffffe
c000e4e8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4ee:	e9 e1 03 00 00       	jmp    c000e8d4 <scanMADT()+0x4cc>
c000e4f3:	90                   	nop
c000e4f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e503:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e507:	0f 87 c7 03 00 00    	ja     c000e8d4 <scanMADT()+0x4cc>
c000e50d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e515:	0f 87 b9 03 00 00    	ja     c000e8d4 <scanMADT()+0x4cc>
c000e51b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e51f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e523:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e527:	8d 50 01             	lea    edx,[eax+0x1]
c000e52a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e52e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e532:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e536:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e53a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e53e:	8d 50 01             	lea    edx,[eax+0x1]
c000e541:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e549:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e54d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e551:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e556:	0f 86 74 03 00 00    	jbe    c000e8d0 <scanMADT()+0x4c8>
c000e55c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e561:	75 5d                	jne    c000e5c0 <scanMADT()+0x1b8>
c000e563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e567:	8d 50 01             	lea    edx,[eax+0x1]
c000e56a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e56e:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e574:	81 e2 ff 00 00 00    	and    edx,0xff
c000e57a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e57e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e582:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e588:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e58c:	8d 42 01             	lea    eax,[edx+0x1]
c000e58f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e593:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e598:	8d 48 01             	lea    ecx,[eax+0x1]
c000e59b:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e5a1:	25 ff 00 00 00       	and    eax,0xff
c000e5a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e5aa:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e5ae:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e5b4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5b9:	e9 f6 02 00 00       	jmp    c000e8b4 <scanMADT()+0x4ac>
c000e5be:	66 90                	xchg   ax,ax
c000e5c0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e5c5:	0f 85 29 01 00 00    	jne    c000e6f4 <scanMADT()+0x2ec>
c000e5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5cf:	8d 50 01             	lea    edx,[eax+0x1]
c000e5d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5d6:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e5dc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e5e6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e5ea:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e5f0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5fc:	01 d0                	add    eax,edx
c000e5fe:	83 c0 2c             	add    eax,0x2c
c000e601:	8a 00                	mov    al,BYTE PTR [eax]
c000e603:	31 d2                	xor    edx,edx
c000e605:	88 c2                	mov    dl,al
c000e607:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e60e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e612:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e616:	25 ff 00 00 00       	and    eax,0xff
c000e61b:	c1 e0 08             	shl    eax,0x8
c000e61e:	89 d1                	mov    ecx,edx
c000e620:	09 c1                	or     ecx,eax
c000e622:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e626:	8d 50 02             	lea    edx,[eax+0x2]
c000e629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e62d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e631:	25 ff 00 00 00       	and    eax,0xff
c000e636:	c1 e0 10             	shl    eax,0x10
c000e639:	09 c1                	or     ecx,eax
c000e63b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e63f:	8d 50 03             	lea    edx,[eax+0x3]
c000e642:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e646:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e64a:	25 ff 00 00 00       	and    eax,0xff
c000e64f:	c1 e0 18             	shl    eax,0x18
c000e652:	09 c1                	or     ecx,eax
c000e654:	89 ca                	mov    edx,ecx
c000e656:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e65b:	25 ff 00 00 00       	and    eax,0xff
c000e660:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e667:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e66c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e670:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e674:	01 d0                	add    eax,edx
c000e676:	83 c0 2c             	add    eax,0x2c
c000e679:	8a 00                	mov    al,BYTE PTR [eax]
c000e67b:	31 d2                	xor    edx,edx
c000e67d:	88 c2                	mov    dl,al
c000e67f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e683:	8d 48 01             	lea    ecx,[eax+0x1]
c000e686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e68a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e68e:	25 ff 00 00 00       	and    eax,0xff
c000e693:	c1 e0 08             	shl    eax,0x8
c000e696:	89 d1                	mov    ecx,edx
c000e698:	09 c1                	or     ecx,eax
c000e69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69e:	8d 50 02             	lea    edx,[eax+0x2]
c000e6a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e6a9:	25 ff 00 00 00       	and    eax,0xff
c000e6ae:	c1 e0 10             	shl    eax,0x10
c000e6b1:	09 c1                	or     ecx,eax
c000e6b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b7:	8d 50 03             	lea    edx,[eax+0x3]
c000e6ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e6c2:	25 ff 00 00 00       	and    eax,0xff
c000e6c7:	c1 e0 18             	shl    eax,0x18
c000e6ca:	09 c1                	or     ecx,eax
c000e6cc:	89 ca                	mov    edx,ecx
c000e6ce:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e6d3:	25 ff 00 00 00       	and    eax,0xff
c000e6d8:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e6df:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e6e4:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e6e9:	40                   	inc    eax
c000e6ea:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e6ef:	e9 c0 01 00 00       	jmp    c000e8b4 <scanMADT()+0x4ac>
c000e6f4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6f9:	0f 85 fd 00 00 00    	jne    c000e7fc <scanMADT()+0x3f4>
c000e6ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e703:	8d 50 01             	lea    edx,[eax+0x1]
c000e706:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e70a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e70e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e712:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e716:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e71a:	8d 50 01             	lea    edx,[eax+0x1]
c000e71d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e721:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e725:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e729:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e72d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e731:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e735:	01 d0                	add    eax,edx
c000e737:	83 c0 2c             	add    eax,0x2c
c000e73a:	8a 00                	mov    al,BYTE PTR [eax]
c000e73c:	31 d2                	xor    edx,edx
c000e73e:	88 c2                	mov    dl,al
c000e740:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e744:	8d 48 01             	lea    ecx,[eax+0x1]
c000e747:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e74b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e74f:	25 ff 00 00 00       	and    eax,0xff
c000e754:	c1 e0 08             	shl    eax,0x8
c000e757:	89 d1                	mov    ecx,edx
c000e759:	09 c1                	or     ecx,eax
c000e75b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e75f:	8d 50 02             	lea    edx,[eax+0x2]
c000e762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e766:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e76a:	25 ff 00 00 00       	and    eax,0xff
c000e76f:	c1 e0 10             	shl    eax,0x10
c000e772:	09 c1                	or     ecx,eax
c000e774:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e778:	8d 50 03             	lea    edx,[eax+0x3]
c000e77b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e77f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e783:	25 ff 00 00 00       	and    eax,0xff
c000e788:	c1 e0 18             	shl    eax,0x18
c000e78b:	09 c8                	or     eax,ecx
c000e78d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e791:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e796:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e79e:	01 d0                	add    eax,edx
c000e7a0:	83 c0 2c             	add    eax,0x2c
c000e7a3:	8a 00                	mov    al,BYTE PTR [eax]
c000e7a5:	25 ff 00 00 00       	and    eax,0xff
c000e7aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e7b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7b5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e7b9:	81 e2 ff 00 00 00    	and    edx,0xff
c000e7bf:	c1 e2 08             	shl    edx,0x8
c000e7c2:	09 d0                	or     eax,edx
c000e7c4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e7c9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e7ce:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7d2:	25 ff 00 00 00       	and    eax,0xff
c000e7d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7db:	88 90 e0 17 02 c0    	mov    BYTE PTR [eax-0x3ffde820],dl
c000e7e1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7e5:	31 d2                	xor    edx,edx
c000e7e7:	88 c2                	mov    dl,al
c000e7e9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e7ee:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e7f6:	e9 b9 00 00 00       	jmp    c000e8b4 <scanMADT()+0x4ac>
c000e7fb:	90                   	nop
c000e7fc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e801:	0f 85 a1 00 00 00    	jne    c000e8a8 <scanMADT()+0x4a0>
c000e807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e80b:	8d 50 01             	lea    edx,[eax+0x1]
c000e80e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e812:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e816:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e81a:	25 ff 00 00 00       	and    eax,0xff
c000e81f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e823:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e827:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e82b:	01 d0                	add    eax,edx
c000e82d:	83 c0 2c             	add    eax,0x2c
c000e830:	8a 00                	mov    al,BYTE PTR [eax]
c000e832:	31 d2                	xor    edx,edx
c000e834:	88 c2                	mov    dl,al
c000e836:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e83a:	8d 48 01             	lea    ecx,[eax+0x1]
c000e83d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e841:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e845:	25 ff 00 00 00       	and    eax,0xff
c000e84a:	c1 e0 08             	shl    eax,0x8
c000e84d:	09 d0                	or     eax,edx
c000e84f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e853:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e858:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e85c:	8d 50 01             	lea    edx,[eax+0x1]
c000e85f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e863:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e867:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e86b:	25 ff 00 00 00       	and    eax,0xff
c000e870:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e878:	c1 e0 08             	shl    eax,0x8
c000e87b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e87f:	89 c1                	mov    ecx,eax
c000e881:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e885:	c1 e0 18             	shl    eax,0x18
c000e888:	89 c3                	mov    ebx,eax
c000e88a:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e88f:	8d 50 01             	lea    edx,[eax+0x1]
c000e892:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e898:	09 d9                	or     ecx,ebx
c000e89a:	89 ca                	mov    edx,ecx
c000e89c:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e8a3:	eb 0f                	jmp    c000e8b4 <scanMADT()+0x4ac>
c000e8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8a8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e8ad:	75 05                	jne    c000e8b4 <scanMADT()+0x4ac>
c000e8af:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e8b4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e8b8:	31 d2                	xor    edx,edx
c000e8ba:	88 c2                	mov    dl,al
c000e8bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e8c0:	01 d0                	add    eax,edx
c000e8c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8c6:	e9 31 fc ff ff       	jmp    c000e4fc <scanMADT()+0xf4>
c000e8cb:	90                   	nop
c000e8cc:	90                   	nop
c000e8cd:	eb 05                	jmp    c000e8d4 <scanMADT()+0x4cc>
c000e8cf:	90                   	nop
c000e8d0:	90                   	nop
c000e8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8d4:	83 c4 38             	add    esp,0x38
c000e8d7:	5b                   	pop    ebx
c000e8d8:	c3                   	ret    
c000e8d9:	90                   	nop
c000e8da:	66 90                	xchg   ax,ax

c000e8dc <ACPI::ACPI()>:
c000e8dc:	83 ec 0c             	sub    esp,0xc
c000e8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e3:	83 ec 08             	sub    esp,0x8
c000e8e6:	68 b1 01 02 c0       	push   0xc00201b1
c000e8eb:	50                   	push   eax
c000e8ec:	e8 43 d3 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	ba e8 02 02 c0       	mov    edx,0xc00202e8
c000e8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fd:	89 10                	mov    DWORD PTR [eax],edx
c000e8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e903:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e926:	e8 dd fa ff ff       	call   c000e408 <scanMADT()>
c000e92b:	90                   	nop
c000e92c:	83 c4 0c             	add    esp,0xc
c000e92f:	c3                   	ret    

c000e930 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e930:	83 ec 2c             	sub    esp,0x2c
c000e933:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e937:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e93b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e93f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e943:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e948:	88 d0                	mov    al,dl
c000e94a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e94e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e953:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e95b:	90                   	nop
c000e95c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e960:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e966:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e96a:	0f 8d 9c 00 00 00    	jge    c000ea0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e970:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e974:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e978:	83 c2 2a             	add    edx,0x2a
c000e97b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e97f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e984:	75 7a                	jne    c000ea00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e986:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e98a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e98e:	83 c2 2a             	add    edx,0x2a
c000e991:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e995:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e999:	75 65                	jne    c000ea00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e99b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e9a0:	74 3a                	je     c000e9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e9a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9aa:	83 c2 2a             	add    edx,0x2a
c000e9ad:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9b8:	39 c2                	cmp    edx,eax
c000e9ba:	74 10                	je     c000e9cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	68 2c 01 02 c0       	push   0xc002012c
c000e9c4:	e8 4e 1a 00 00       	call   c0010417 <KePanic(char const*)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	83 ec 0c             	sub    esp,0xc
c000e9cf:	68 b6 01 02 c0       	push   0xc00201b6
c000e9d4:	e8 3e 1a 00 00       	call   c0010417 <KePanic(char const*)>
c000e9d9:	83 c4 10             	add    esp,0x10
c000e9dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e9e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9e8:	83 c2 2a             	add    edx,0x2a
c000e9eb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e9ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9f1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9f4:	89 01                	mov    DWORD PTR [ecx],eax
c000e9f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9f9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ea04:	e9 53 ff ff ff       	jmp    c000e95c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ea09:	8d 76 00             	lea    esi,[esi+0x0]
c000ea0c:	90                   	nop
c000ea0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea11:	83 c4 2c             	add    esp,0x2c
c000ea14:	c2 04 00             	ret    0x4
c000ea17:	90                   	nop

c000ea18 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ea18:	83 ec 1c             	sub    esp,0x1c
c000ea1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea1f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ea23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ea27:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ea2c:	88 c8                	mov    al,cl
c000ea2e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea32:	88 d0                	mov    al,dl
c000ea34:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ea38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea3c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea46:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea49:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ea4d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea55:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea5f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea66:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea6f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea75:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea79:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea80:	83 c2 2a             	add    edx,0x2a
c000ea83:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea8b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea95:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea9c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eaa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaa4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eaaa:	8d 50 01             	lea    edx,[eax+0x1]
c000eaad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eab1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eabb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eac1:	3d 00 02 00 00       	cmp    eax,0x200
c000eac6:	75 10                	jne    c000ead8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000eac8:	83 ec 0c             	sub    esp,0xc
c000eacb:	68 c5 01 02 c0       	push   0xc00201c5
c000ead0:	e8 42 19 00 00       	call   c0010417 <KePanic(char const*)>
c000ead5:	83 c4 10             	add    esp,0x10
c000ead8:	90                   	nop
c000ead9:	83 c4 1c             	add    esp,0x1c
c000eadc:	c3                   	ret    
c000eadd:	90                   	nop
c000eade:	66 90                	xchg   ax,ax

c000eae0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eae0:	b8 00 00 00 00       	mov    eax,0x0
c000eae5:	c3                   	ret    
c000eae6:	66 90                	xchg   ax,ax

c000eae8 <ACPI::detectPCI()>:
c000eae8:	53                   	push   ebx
c000eae9:	83 ec 28             	sub    esp,0x28
c000eaec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eaf1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eaf6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000eafb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb01:	83 e0 04             	and    eax,0x4
c000eb04:	84 c0                	test   al,al
c000eb06:	74 2c                	je     c000eb34 <ACPI::detectPCI()+0x4c>
c000eb08:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eb0d:	83 ec 08             	sub    esp,0x8
c000eb10:	68 e2 01 02 c0       	push   0xc00201e2
c000eb15:	50                   	push   eax
c000eb16:	e8 75 f8 ff ff       	call   c000e390 <findDataTable(unsigned char*, char*)>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb22:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb27:	74 0b                	je     c000eb34 <ACPI::detectPCI()+0x4c>
c000eb29:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb2e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb33:	90                   	nop
c000eb34:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eb3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb40:	8a 00                	mov    al,BYTE PTR [eax]
c000eb42:	3c 01                	cmp    al,0x1
c000eb44:	75 0e                	jne    c000eb54 <ACPI::detectPCI()+0x6c>
c000eb46:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb4b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb50:	eb 2a                	jmp    c000eb7c <ACPI::detectPCI()+0x94>
c000eb52:	66 90                	xchg   ax,ax
c000eb54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb58:	8a 00                	mov    al,BYTE PTR [eax]
c000eb5a:	3c 02                	cmp    al,0x2
c000eb5c:	75 1e                	jne    c000eb7c <ACPI::detectPCI()+0x94>
c000eb5e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb63:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb68:	74 12                	je     c000eb7c <ACPI::detectPCI()+0x94>
c000eb6a:	83 ec 0c             	sub    esp,0xc
c000eb6d:	68 5c 01 02 c0       	push   0xc002015c
c000eb72:	e8 a0 18 00 00       	call   c0010417 <KePanic(char const*)>
c000eb77:	83 c4 10             	add    esp,0x10
c000eb7a:	66 90                	xchg   ax,ax
c000eb7c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb80:	83 f0 01             	xor    eax,0x1
c000eb83:	84 c0                	test   al,al
c000eb85:	74 41                	je     c000ebc8 <ACPI::detectPCI()+0xe0>
c000eb87:	e8 a4 15 ff ff       	call   c0000130 <manualPCIProbe>
c000eb8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb90:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb95:	75 0d                	jne    c000eba4 <ACPI::detectPCI()+0xbc>
c000eb97:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb9c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eba1:	eb 25                	jmp    c000ebc8 <ACPI::detectPCI()+0xe0>
c000eba3:	90                   	nop
c000eba4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eba9:	75 1d                	jne    c000ebc8 <ACPI::detectPCI()+0xe0>
c000ebab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ebb0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebb5:	74 11                	je     c000ebc8 <ACPI::detectPCI()+0xe0>
c000ebb7:	83 ec 0c             	sub    esp,0xc
c000ebba:	68 5c 01 02 c0       	push   0xc002015c
c000ebbf:	e8 53 18 00 00       	call   c0010417 <KePanic(char const*)>
c000ebc4:	83 c4 10             	add    esp,0x10
c000ebc7:	90                   	nop
c000ebc8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ebcd:	0f 84 85 00 00 00    	je     c000ec58 <ACPI::detectPCI()+0x170>
c000ebd3:	83 ec 0c             	sub    esp,0xc
c000ebd6:	68 e7 01 02 c0       	push   0xc00201e7
c000ebdb:	e8 bf 11 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ebeb:	83 ec 0c             	sub    esp,0xc
c000ebee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ebf2:	e8 7c 8c ff ff       	call   c0007873 <malloc>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	89 c3                	mov    ebx,eax
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	53                   	push   ebx
c000ec00:	e8 cd ad 00 00       	call   c00199d2 <PCI::PCI()>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ec0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec10:	83 ec 08             	sub    esp,0x8
c000ec13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec17:	50                   	push   eax
c000ec18:	e8 7f ce ff ff       	call   c000ba9c <Device::addChild(Device*)>
c000ec1d:	83 c4 10             	add    esp,0x10
c000ec20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec24:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec26:	83 c0 08             	add    eax,0x8
c000ec29:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec2b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ec30:	74 0a                	je     c000ec3c <ACPI::detectPCI()+0x154>
c000ec32:	ba 01 00 00 00       	mov    edx,0x1
c000ec37:	eb 0b                	jmp    c000ec44 <ACPI::detectPCI()+0x15c>
c000ec39:	8d 76 00             	lea    esi,[esi+0x0]
c000ec3c:	ba 02 00 00 00       	mov    edx,0x2
c000ec41:	8d 76 00             	lea    esi,[esi+0x0]
c000ec44:	6a 00                	push   0x0
c000ec46:	6a 00                	push   0x0
c000ec48:	52                   	push   edx
c000ec49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec4d:	ff d0                	call   eax
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	e9 91 00 00 00       	jmp    c000ece8 <ACPI::detectPCI()+0x200>
c000ec57:	90                   	nop
c000ec58:	83 ec 0c             	sub    esp,0xc
c000ec5b:	68 ff 01 02 c0       	push   0xc00201ff
c000ec60:	e8 3a 11 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec6f:	83 ec 0c             	sub    esp,0xc
c000ec72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec76:	e8 f8 8b ff ff       	call   c0007873 <malloc>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	89 c3                	mov    ebx,eax
c000ec80:	83 ec 0c             	sub    esp,0xc
c000ec83:	53                   	push   ebx
c000ec84:	e8 af b8 00 00       	call   c001a538 <IDE::IDE()>
c000ec89:	83 c4 10             	add    esp,0x10
c000ec8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec9b:	50                   	push   eax
c000ec9c:	e8 fb cd ff ff       	call   c000ba9c <Device::addChild(Device*)>
c000eca1:	83 c4 10             	add    esp,0x10
c000eca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eca8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ecbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eccc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecd2:	83 c0 08             	add    eax,0x8
c000ecd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecd7:	6a 00                	push   0x0
c000ecd9:	6a 00                	push   0x0
c000ecdb:	6a 00                	push   0x0
c000ecdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ece1:	ff d0                	call   eax
c000ece3:	83 c4 10             	add    esp,0x10
c000ece6:	66 90                	xchg   ax,ax
c000ece8:	90                   	nop
c000ece9:	83 c4 28             	add    esp,0x28
c000ecec:	5b                   	pop    ebx
c000eced:	c3                   	ret    
c000ecee:	66 90                	xchg   ax,ax

c000ecf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ecf0:	83 ec 1c             	sub    esp,0x1c
c000ecf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecfa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecfe:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ed04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ed08:	25 ff 00 00 00       	and    eax,0xff
c000ed0d:	83 ec 08             	sub    esp,0x8
c000ed10:	50                   	push   eax
c000ed11:	52                   	push   edx
c000ed12:	e8 49 82 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ed1e:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ed24:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ed28:	25 ff 00 00 00       	and    eax,0xff
c000ed2d:	83 ec 04             	sub    esp,0x4
c000ed30:	6a 01                	push   0x1
c000ed32:	50                   	push   eax
c000ed33:	52                   	push   edx
c000ed34:	e8 3d 83 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	90                   	nop
c000ed3d:	83 c4 1c             	add    esp,0x1c
c000ed40:	c3                   	ret    
c000ed41:	90                   	nop
c000ed42:	66 90                	xchg   ax,ax

c000ed44 <ACPI::sleep()>:
c000ed44:	83 ec 0c             	sub    esp,0xc
c000ed47:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed4c:	85 c0                	test   eax,eax
c000ed4e:	74 08                	je     c000ed58 <ACPI::sleep()+0x14>
c000ed50:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed55:	ff d0                	call   eax
c000ed57:	90                   	nop
c000ed58:	90                   	nop
c000ed59:	83 c4 0c             	add    esp,0xc
c000ed5c:	c3                   	ret    
c000ed5d:	90                   	nop
c000ed5e:	66 90                	xchg   ax,ax

c000ed60 <ACPI::open(int, int, void*)>:
c000ed60:	57                   	push   edi
c000ed61:	56                   	push   esi
c000ed62:	53                   	push   ebx
c000ed63:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed69:	83 ec 0c             	sub    esp,0xc
c000ed6c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed73:	e8 70 fd ff ff       	call   c000eae8 <ACPI::detectPCI()>
c000ed78:	83 c4 10             	add    esp,0x10
c000ed7b:	83 ec 0c             	sub    esp,0xc
c000ed7e:	68 84 01 02 c0       	push   0xc0020184
c000ed83:	e8 17 10 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	83 ec 0c             	sub    esp,0xc
c000ed8e:	68 14 02 02 c0       	push   0xc0020214
c000ed93:	e8 df 48 00 00       	call   c0013677 <Thr::loadKernelSymbolTable(char const*)>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eda3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000edb8:	e8 b6 8a ff ff       	call   c0007873 <malloc>
c000edbd:	83 c4 10             	add    esp,0x10
c000edc0:	89 c3                	mov    ebx,eax
c000edc2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000edc7:	83 ec 04             	sub    esp,0x4
c000edca:	50                   	push   eax
c000edcb:	68 32 02 02 c0       	push   0xc0020232
c000edd0:	53                   	push   ebx
c000edd1:	e8 02 be ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c000edd6:	83 c4 10             	add    esp,0x10
c000edd9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ede0:	83 ec 08             	sub    esp,0x8
c000ede3:	6a 01                	push   0x1
c000ede5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edec:	e8 a7 be ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c000edf1:	83 c4 10             	add    esp,0x10
c000edf4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edfb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ee03:	75 17                	jne    c000ee1c <ACPI::open(int, int, void*)+0xbc>
c000ee05:	83 ec 0c             	sub    esp,0xc
c000ee08:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee0f:	e8 e2 be ff ff       	call   c000acf6 <File::close()>
c000ee14:	83 c4 10             	add    esp,0x10
c000ee17:	eb 0b                	jmp    c000ee24 <ACPI::open(int, int, void*)+0xc4>
c000ee19:	8d 76 00             	lea    esi,[esi+0x0]
c000ee1c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ee24:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ee2c:	74 1e                	je     c000ee4c <ACPI::open(int, int, void*)+0xec>
c000ee2e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ee35:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee37:	83 c0 08             	add    eax,0x8
c000ee3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee3c:	83 ec 0c             	sub    esp,0xc
c000ee3f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee46:	ff d0                	call   eax
c000ee48:	83 c4 10             	add    esp,0x10
c000ee4b:	90                   	nop
c000ee4c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee53:	83 f0 01             	xor    eax,0x1
c000ee56:	84 c0                	test   al,al
c000ee58:	74 42                	je     c000ee9c <ACPI::open(int, int, void*)+0x13c>
c000ee5a:	83 ec 0c             	sub    esp,0xc
c000ee5d:	68 50 02 02 c0       	push   0xc0020250
c000ee62:	e8 38 0f 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000ee67:	83 c4 10             	add    esp,0x10
c000ee6a:	83 ec 04             	sub    esp,0x4
c000ee6d:	6a 0c                	push   0xc
c000ee6f:	68 6b 02 02 c0       	push   0xc002026b
c000ee74:	68 7c 02 02 c0       	push   0xc002027c
c000ee79:	e8 ab 3b 00 00       	call   c0012a29 <Reg::readIntWithDefault(char*, char*, int)>
c000ee7e:	83 c4 10             	add    esp,0x10
c000ee81:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee88:	83 ec 0c             	sub    esp,0xc
c000ee8b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee92:	e8 ef a6 ff ff       	call   c0009586 <Virt::setupPageSwapping(int)>
c000ee97:	83 c4 10             	add    esp,0x10
c000ee9a:	66 90                	xchg   ax,ax
c000ee9c:	83 ec 0c             	sub    esp,0xc
c000ee9f:	68 d5 f2 01 c0       	push   0xc001f2d5
c000eea4:	e8 f6 0e 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000eea9:	83 c4 10             	add    esp,0x10
c000eeac:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eeb3:	83 ec 08             	sub    esp,0x8
c000eeb6:	6a 13                	push   0x13
c000eeb8:	50                   	push   eax
c000eeb9:	e8 f6 ce ff ff       	call   c000bdb4 <getDevicesOfType(DeviceType)>
c000eebe:	83 c4 0c             	add    esp,0xc
c000eec1:	8d 76 00             	lea    esi,[esi+0x0]
c000eec4:	83 ec 0c             	sub    esp,0xc
c000eec7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eece:	50                   	push   eax
c000eecf:	e8 e8 f7 00 00       	call   c001e6bc <LinkedList<Device>::isEmpty()>
c000eed4:	83 c4 10             	add    esp,0x10
c000eed7:	83 f0 01             	xor    eax,0x1
c000eeda:	84 c0                	test   al,al
c000eedc:	0f 84 46 01 00 00    	je     c000f028 <ACPI::open(int, int, void*)+0x2c8>
c000eee2:	83 ec 0c             	sub    esp,0xc
c000eee5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeec:	50                   	push   eax
c000eeed:	e8 e6 f7 00 00       	call   c001e6d8 <LinkedList<Device>::getFirstElement()>
c000eef2:	83 c4 10             	add    esp,0x10
c000eef5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eefc:	83 ec 0c             	sub    esp,0xc
c000eeff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef06:	50                   	push   eax
c000ef07:	e8 d4 f7 00 00       	call   c001e6e0 <LinkedList<Device>::removeFirst()>
c000ef0c:	83 c4 10             	add    esp,0x10
c000ef0f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ef16:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ef1d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ef24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef28:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ef2e:	ba 09 00 00 00       	mov    edx,0x9
c000ef33:	fc                   	cld    
c000ef34:	89 c7                	mov    edi,eax
c000ef36:	89 de                	mov    esi,ebx
c000ef38:	89 d1                	mov    ecx,edx
c000ef3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef3c:	83 ec 08             	sub    esp,0x8
c000ef3f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ef43:	50                   	push   eax
c000ef44:	83 ec 24             	sub    esp,0x24
c000ef47:	89 e0                	mov    eax,esp
c000ef49:	89 c3                	mov    ebx,eax
c000ef4b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ef4f:	ba 09 00 00 00       	mov    edx,0x9
c000ef54:	89 df                	mov    edi,ebx
c000ef56:	89 c6                	mov    esi,eax
c000ef58:	89 d1                	mov    ecx,edx
c000ef5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef5c:	e8 53 af 00 00       	call   c0019eb4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef61:	83 c4 30             	add    esp,0x30
c000ef64:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef6b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef73:	0f 84 4b ff ff ff    	je     c000eec4 <ACPI::open(int, int, void*)+0x164>
c000ef79:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef84:	83 ec 0c             	sub    esp,0xc
c000ef87:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef8e:	e8 e0 88 ff ff       	call   c0007873 <malloc>
c000ef93:	83 c4 10             	add    esp,0x10
c000ef96:	89 c3                	mov    ebx,eax
c000ef98:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef9d:	83 ec 04             	sub    esp,0x4
c000efa0:	50                   	push   eax
c000efa1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efa8:	53                   	push   ebx
c000efa9:	e8 2a bc ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c000efae:	83 c4 10             	add    esp,0x10
c000efb1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efc2:	e8 3f bf ff ff       	call   c000af06 <File::exists()>
c000efc7:	83 c4 10             	add    esp,0x10
c000efca:	84 c0                	test   al,al
c000efcc:	74 2a                	je     c000eff8 <ACPI::open(int, int, void*)+0x298>
c000efce:	83 ec 08             	sub    esp,0x8
c000efd1:	6a 01                	push   0x1
c000efd3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efda:	e8 19 51 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000efdf:	83 c4 10             	add    esp,0x10
c000efe2:	83 ec 08             	sub    esp,0x8
c000efe5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efec:	50                   	push   eax
c000efed:	e8 3b 53 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000eff2:	83 c4 10             	add    esp,0x10
c000eff5:	8d 76 00             	lea    esi,[esi+0x0]
c000eff8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f000:	0f 84 be fe ff ff    	je     c000eec4 <ACPI::open(int, int, void*)+0x164>
c000f006:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f00d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00f:	83 c0 08             	add    eax,0x8
c000f012:	8b 00                	mov    eax,DWORD PTR [eax]
c000f014:	83 ec 0c             	sub    esp,0xc
c000f017:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f01e:	ff d0                	call   eax
c000f020:	83 c4 10             	add    esp,0x10
c000f023:	e9 9c fe ff ff       	jmp    c000eec4 <ACPI::open(int, int, void*)+0x164>
c000f028:	83 ec 0c             	sub    esp,0xc
c000f02b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f032:	50                   	push   eax
c000f033:	e8 80 f6 00 00       	call   c001e6b8 <LinkedList<Device>::~LinkedList()>
c000f038:	83 c4 10             	add    esp,0x10
c000f03b:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000f041:	83 ec 08             	sub    esp,0x8
c000f044:	6a 01                	push   0x1
c000f046:	68 83 02 02 c0       	push   0xc0020283
c000f04b:	e8 a8 50 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	83 ec 08             	sub    esp,0x8
c000f056:	53                   	push   ebx
c000f057:	50                   	push   eax
c000f058:	e8 d0 52 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f065:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f06b:	83 e0 04             	and    eax,0x4
c000f06e:	84 c0                	test   al,al
c000f070:	0f 84 16 01 00 00    	je     c000f18c <ACPI::open(int, int, void*)+0x42c>
c000f076:	83 ec 0c             	sub    esp,0xc
c000f079:	68 a0 02 02 c0       	push   0xc00202a0
c000f07e:	e8 1c 0d 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f091:	83 ec 0c             	sub    esp,0xc
c000f094:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f09b:	e8 d3 87 ff ff       	call   c0007873 <malloc>
c000f0a0:	83 c4 10             	add    esp,0x10
c000f0a3:	89 c3                	mov    ebx,eax
c000f0a5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f0aa:	83 ec 04             	sub    esp,0x4
c000f0ad:	50                   	push   eax
c000f0ae:	68 bd 02 02 c0       	push   0xc00202bd
c000f0b3:	53                   	push   ebx
c000f0b4:	e8 1f bb ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c000f0b9:	83 c4 10             	add    esp,0x10
c000f0bc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f0c3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0cb:	74 1b                	je     c000f0e8 <ACPI::open(int, int, void*)+0x388>
c000f0cd:	83 ec 0c             	sub    esp,0xc
c000f0d0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0d7:	e8 2a be ff ff       	call   c000af06 <File::exists()>
c000f0dc:	83 c4 10             	add    esp,0x10
c000f0df:	84 c0                	test   al,al
c000f0e1:	74 05                	je     c000f0e8 <ACPI::open(int, int, void*)+0x388>
c000f0e3:	b0 01                	mov    al,0x1
c000f0e5:	eb 05                	jmp    c000f0ec <ACPI::open(int, int, void*)+0x38c>
c000f0e7:	90                   	nop
c000f0e8:	b0 00                	mov    al,0x0
c000f0ea:	66 90                	xchg   ax,ax
c000f0ec:	84 c0                	test   al,al
c000f0ee:	74 28                	je     c000f118 <ACPI::open(int, int, void*)+0x3b8>
c000f0f0:	83 ec 08             	sub    esp,0x8
c000f0f3:	6a 01                	push   0x1
c000f0f5:	68 bd 02 02 c0       	push   0xc00202bd
c000f0fa:	e8 f9 4f 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c000f0ff:	83 c4 10             	add    esp,0x10
c000f102:	83 ec 08             	sub    esp,0x8
c000f105:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f10c:	50                   	push   eax
c000f10d:	e8 1b 52 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c000f112:	83 c4 10             	add    esp,0x10
c000f115:	8d 76 00             	lea    esi,[esi+0x0]
c000f118:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f120:	74 2a                	je     c000f14c <ACPI::open(int, int, void*)+0x3ec>
c000f122:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f12a:	74 20                	je     c000f14c <ACPI::open(int, int, void*)+0x3ec>
c000f12c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f133:	8b 00                	mov    eax,DWORD PTR [eax]
c000f135:	83 c0 08             	add    eax,0x8
c000f138:	8b 00                	mov    eax,DWORD PTR [eax]
c000f13a:	83 ec 0c             	sub    esp,0xc
c000f13d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f144:	ff d0                	call   eax
c000f146:	83 c4 10             	add    esp,0x10
c000f149:	8d 76 00             	lea    esi,[esi+0x0]
c000f14c:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f151:	83 ec 08             	sub    esp,0x8
c000f154:	68 da 02 02 c0       	push   0xc00202da
c000f159:	50                   	push   eax
c000f15a:	e8 31 f2 ff ff       	call   c000e390 <findDataTable(unsigned char*, char*)>
c000f15f:	83 c4 10             	add    esp,0x10
c000f162:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f169:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f171:	74 19                	je     c000f18c <ACPI::open(int, int, void*)+0x42c>
c000f173:	83 ec 08             	sub    esp,0x8
c000f176:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f17d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f184:	e8 67 fb ff ff       	call   c000ecf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f189:	83 c4 10             	add    esp,0x10
c000f18c:	b8 00 00 00 00       	mov    eax,0x0
c000f191:	81 c4 70 01 00 00    	add    esp,0x170
c000f197:	5b                   	pop    ebx
c000f198:	5e                   	pop    esi
c000f199:	5f                   	pop    edi
c000f19a:	c3                   	ret    
c000f19b:	90                   	nop

c000f19c <CPU::close(int, int, void*)>:
c000f19c:	31 c0                	xor    eax,eax
c000f19e:	c3                   	ret    
c000f19f:	90                   	nop

c000f1a0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f1a0:	60                   	pusha  
c000f1a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f1ad:	9c                   	pushf  
c000f1ae:	fa                   	cli    
c000f1af:	0f 09                	wbinvd 
c000f1b1:	0f 30                	wrmsr  
c000f1b3:	9d                   	popf   
c000f1b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f1b8:	89 02                	mov    DWORD PTR [edx],eax
c000f1ba:	61                   	popa   
c000f1bb:	c3                   	ret    

c000f1bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f1bc:	60                   	pusha  
c000f1bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1c1:	9c                   	pushf  
c000f1c2:	fa                   	cli    
c000f1c3:	0f 09                	wbinvd 
c000f1c5:	31 c0                	xor    eax,eax
c000f1c7:	31 d2                	xor    edx,edx
c000f1c9:	0f 32                	rdmsr  
c000f1cb:	9d                   	popf   
c000f1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1d0:	89 02                	mov    DWORD PTR [edx],eax
c000f1d2:	61                   	popa   
c000f1d3:	c3                   	ret    

c000f1d4 <CPU::AMD_K6_writeback(int, int, int)>:
c000f1d4:	56                   	push   esi
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 10             	sub    esp,0x10
c000f1d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1dd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f1e2:	75 5d                	jne    c000f241 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1e4:	83 f8 08             	cmp    eax,0x8
c000f1e7:	75 09                	jne    c000f1f2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f1e9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f1ee:	7e 13                	jle    c000f203 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1f0:	eb 30                	jmp    c000f222 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1f2:	83 f8 06             	cmp    eax,0x6
c000f1f5:	7c 4a                	jl     c000f241 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1f7:	83 f8 07             	cmp    eax,0x7
c000f1fa:	7e 07                	jle    c000f203 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1fc:	83 f8 09             	cmp    eax,0x9
c000f1ff:	74 21                	je     c000f222 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f201:	eb 3e                	jmp    c000f241 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f203:	89 e6                	mov    esi,esp
c000f205:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f20b:	c1 eb 15             	shr    ebx,0x15
c000f20e:	56                   	push   esi
c000f20f:	68 82 00 00 c0       	push   0xc0000082
c000f214:	e8 a3 ff ff ff       	call   c000f1bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f219:	56                   	push   esi
c000f21a:	83 e3 7e             	and    ebx,0x7e
c000f21d:	6a 00                	push   0x0
c000f21f:	53                   	push   ebx
c000f220:	eb 12                	jmp    c000f234 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f222:	89 e3                	mov    ebx,esp
c000f224:	53                   	push   ebx
c000f225:	68 82 00 00 c0       	push   0xc0000082
c000f22a:	e8 8d ff ff ff       	call   c000f1bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f22f:	53                   	push   ebx
c000f230:	6a 00                	push   0x0
c000f232:	6a 00                	push   0x0
c000f234:	68 82 00 00 c0       	push   0xc0000082
c000f239:	e8 62 ff ff ff       	call   c000f1a0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f23e:	83 c4 18             	add    esp,0x18
c000f241:	83 c4 10             	add    esp,0x10
c000f244:	5b                   	pop    ebx
c000f245:	5e                   	pop    esi
c000f246:	c3                   	ret    
c000f247:	90                   	nop

c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f248:	55                   	push   ebp
c000f249:	57                   	push   edi
c000f24a:	56                   	push   esi
c000f24b:	53                   	push   ebx
c000f24c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f250:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f254:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f258:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f25c:	39 05 f0 17 02 c0    	cmp    DWORD PTR ds:0xc00217f0,eax
c000f262:	75 23                	jne    c000f287 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f264:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f269:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f26d:	89 06                	mov    DWORD PTR [esi],eax
c000f26f:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f274:	89 07                	mov    DWORD PTR [edi],eax
c000f276:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f27b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f27e:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f283:	89 02                	mov    DWORD PTR [edx],eax
c000f285:	eb 3f                	jmp    c000f2c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f287:	31 c9                	xor    ecx,ecx
c000f289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f28d:	0f a2                	cpuid  
c000f28f:	89 06                	mov    DWORD PTR [esi],eax
c000f291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f295:	89 1f                	mov    DWORD PTR [edi],ebx
c000f297:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f29a:	89 10                	mov    DWORD PTR [eax],edx
c000f29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f2a0:	a3 f0 17 02 c0       	mov    ds:0xc00217f0,eax
c000f2a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000f2a7:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f2ac:	8b 07                	mov    eax,DWORD PTR [edi]
c000f2ae:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f2b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f2b6:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f2bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f2bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c1:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f2c6:	5b                   	pop    ebx
c000f2c7:	5e                   	pop    esi
c000f2c8:	5f                   	pop    edi
c000f2c9:	5d                   	pop    ebp
c000f2ca:	c3                   	ret    
c000f2cb:	90                   	nop

c000f2cc <CPU::cpuidCheckEDX(unsigned int)>:
c000f2cc:	83 ec 10             	sub    esp,0x10
c000f2cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d3:	50                   	push   eax
c000f2d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d8:	50                   	push   eax
c000f2d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2dd:	50                   	push   eax
c000f2de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e2:	50                   	push   eax
c000f2e3:	6a 01                	push   0x1
c000f2e5:	e8 5e ff ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ee:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2f2:	0f 95 c0             	setne  al
c000f2f5:	83 c4 24             	add    esp,0x24
c000f2f8:	c3                   	ret    
c000f2f9:	90                   	nop

c000f2fa <CPU::cpuidCheckECX(unsigned int)>:
c000f2fa:	83 ec 10             	sub    esp,0x10
c000f2fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f301:	50                   	push   eax
c000f302:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f306:	50                   	push   eax
c000f307:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f30b:	50                   	push   eax
c000f30c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f310:	50                   	push   eax
c000f311:	6a 01                	push   0x1
c000f313:	e8 30 ff ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f318:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f31c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f320:	0f 95 c0             	setne  al
c000f323:	83 c4 24             	add    esp,0x24
c000f326:	c3                   	ret    
c000f327:	90                   	nop

c000f328 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f328:	83 ec 10             	sub    esp,0x10
c000f32b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f32f:	50                   	push   eax
c000f330:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f334:	50                   	push   eax
c000f335:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f339:	50                   	push   eax
c000f33a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f33e:	50                   	push   eax
c000f33f:	6a 07                	push   0x7
c000f341:	e8 02 ff ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f346:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f34a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f34e:	0f 95 c0             	setne  al
c000f351:	83 c4 24             	add    esp,0x24
c000f354:	c3                   	ret    
c000f355:	90                   	nop

c000f356 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f356:	83 ec 10             	sub    esp,0x10
c000f359:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f35d:	50                   	push   eax
c000f35e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f362:	50                   	push   eax
c000f363:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f367:	50                   	push   eax
c000f368:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f36c:	50                   	push   eax
c000f36d:	6a 07                	push   0x7
c000f36f:	e8 d4 fe ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f374:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f378:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f37c:	0f 95 c0             	setne  al
c000f37f:	83 c4 24             	add    esp,0x24
c000f382:	c3                   	ret    
c000f383:	90                   	nop

c000f384 <CPU::CPU()>:
c000f384:	83 ec 0c             	sub    esp,0xc
c000f387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f38b:	83 ec 08             	sub    esp,0x8
c000f38e:	68 fd 03 02 c0       	push   0xc00203fd
c000f393:	50                   	push   eax
c000f394:	e8 9b c8 ff ff       	call   c000bc34 <Device::Device(char const*)>
c000f399:	83 c4 10             	add    esp,0x10
c000f39c:	ba 84 04 02 c0       	mov    edx,0xc0020484
c000f3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a5:	89 10                	mov    DWORD PTR [eax],edx
c000f3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ab:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b9:	05 78 01 00 00       	add    eax,0x178
c000f3be:	83 ec 0c             	sub    esp,0xc
c000f3c1:	50                   	push   eax
c000f3c2:	e8 6f 7d ff ff       	call   c0007136 <GDT::GDT()>
c000f3c7:	83 c4 10             	add    esp,0x10
c000f3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ce:	05 7c 09 00 00       	add    eax,0x97c
c000f3d3:	83 ec 0c             	sub    esp,0xc
c000f3d6:	50                   	push   eax
c000f3d7:	e8 94 7f ff ff       	call   c0007370 <IDT::IDT()>
c000f3dc:	83 c4 10             	add    esp,0x10
c000f3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e3:	05 7c 11 00 00       	add    eax,0x117c
c000f3e8:	83 ec 0c             	sub    esp,0xc
c000f3eb:	50                   	push   eax
c000f3ec:	e8 bf 98 ff ff       	call   c0008cb0 <TSS::TSS()>
c000f3f1:	83 c4 10             	add    esp,0x10
c000f3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f403:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f40d:	90                   	nop
c000f40e:	83 c4 0c             	add    esp,0xc
c000f411:	c3                   	ret    

c000f412 <CPU::displayFeatures()>:
c000f412:	c3                   	ret    
c000f413:	90                   	nop

c000f414 <CPU::detectFeatures()>:
c000f414:	55                   	push   ebp
c000f415:	57                   	push   edi
c000f416:	56                   	push   esi
c000f417:	53                   	push   ebx
c000f418:	83 ec 30             	sub    esp,0x30
c000f41b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f41f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f429:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f430:	6a 0d                	push   0xd
c000f432:	6a 00                	push   0x0
c000f434:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f43a:	55                   	push   ebp
c000f43b:	e8 80 10 ff ff       	call   c00004c0 <memset>
c000f440:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f445:	83 c4 10             	add    esp,0x10
c000f448:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f44f:	0f 84 d5 05 00 00    	je     c000fa2a <CPU::detectFeatures()+0x616>
c000f455:	83 ec 0c             	sub    esp,0xc
c000f458:	89 ef                	mov    edi,ebp
c000f45a:	6a 10                	push   0x10
c000f45c:	e8 6b fe ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f461:	83 e0 01             	and    eax,0x1
c000f464:	8d 14 00             	lea    edx,[eax+eax*1]
c000f467:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f46d:	83 e0 fd             	and    eax,0xfffffffd
c000f470:	09 d0                	or     eax,edx
c000f472:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f478:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f47f:	e8 48 fe ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f484:	83 e0 01             	and    eax,0x1
c000f487:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f48e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f494:	83 e0 fb             	and    eax,0xfffffffb
c000f497:	09 d0                	or     eax,edx
c000f499:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f49f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4a6:	e8 21 fe ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f4ab:	83 e0 01             	and    eax,0x1
c000f4ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f4b5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4bb:	83 e0 f7             	and    eax,0xfffffff7
c000f4be:	09 d0                	or     eax,edx
c000f4c0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4c6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f4cd:	e8 fa fd ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f4d2:	83 e0 01             	and    eax,0x1
c000f4d5:	c1 e0 04             	shl    eax,0x4
c000f4d8:	88 c2                	mov    dl,al
c000f4da:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4e0:	83 e0 ef             	and    eax,0xffffffef
c000f4e3:	09 d0                	or     eax,edx
c000f4e5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4eb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4f2:	e8 d5 fd ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f4f7:	83 e0 01             	and    eax,0x1
c000f4fa:	c1 e0 05             	shl    eax,0x5
c000f4fd:	88 c2                	mov    dl,al
c000f4ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f505:	83 e0 df             	and    eax,0xffffffdf
c000f508:	09 d0                	or     eax,edx
c000f50a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f510:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f517:	e8 b0 fd ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f51c:	83 e0 01             	and    eax,0x1
c000f51f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f522:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f528:	83 e0 fd             	and    eax,0xfffffffd
c000f52b:	09 d0                	or     eax,edx
c000f52d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f533:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f53a:	e8 8d fd ff ff       	call   c000f2cc <CPU::cpuidCheckEDX(unsigned int)>
c000f53f:	83 e0 01             	and    eax,0x1
c000f542:	c1 e0 06             	shl    eax,0x6
c000f545:	88 c2                	mov    dl,al
c000f547:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f54d:	83 e0 bf             	and    eax,0xffffffbf
c000f550:	09 d0                	or     eax,edx
c000f552:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f558:	58                   	pop    eax
c000f559:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f55d:	50                   	push   eax
c000f55e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f562:	50                   	push   eax
c000f563:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f567:	56                   	push   esi
c000f568:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f56c:	50                   	push   eax
c000f56d:	6a 00                	push   0x0
c000f56f:	e8 d4 fc ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f574:	b8 04 00 00 00       	mov    eax,0x4
c000f579:	89 c1                	mov    ecx,eax
c000f57b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f57d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f583:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f587:	89 c1                	mov    ecx,eax
c000f589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f58b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f591:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f595:	89 c1                	mov    ecx,eax
c000f597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f599:	83 c4 18             	add    esp,0x18
c000f59c:	68 0c 03 02 c0       	push   0xc002030c
c000f5a1:	55                   	push   ebp
c000f5a2:	e8 39 11 ff ff       	call   c00006e0 <strcmp>
c000f5a7:	83 c4 10             	add    esp,0x10
c000f5aa:	85 c0                	test   eax,eax
c000f5ac:	75 0f                	jne    c000f5bd <CPU::detectFeatures()+0x1a9>
c000f5ae:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f5b8:	e9 22 02 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f5bd:	50                   	push   eax
c000f5be:	50                   	push   eax
c000f5bf:	68 19 03 02 c0       	push   0xc0020319
c000f5c4:	55                   	push   ebp
c000f5c5:	e8 16 11 ff ff       	call   c00006e0 <strcmp>
c000f5ca:	83 c4 10             	add    esp,0x10
c000f5cd:	85 c0                	test   eax,eax
c000f5cf:	74 dd                	je     c000f5ae <CPU::detectFeatures()+0x19a>
c000f5d1:	50                   	push   eax
c000f5d2:	50                   	push   eax
c000f5d3:	68 26 03 02 c0       	push   0xc0020326
c000f5d8:	55                   	push   ebp
c000f5d9:	e8 02 11 ff ff       	call   c00006e0 <strcmp>
c000f5de:	83 c4 10             	add    esp,0x10
c000f5e1:	85 c0                	test   eax,eax
c000f5e3:	74 2a                	je     c000f60f <CPU::detectFeatures()+0x1fb>
c000f5e5:	50                   	push   eax
c000f5e6:	50                   	push   eax
c000f5e7:	68 33 03 02 c0       	push   0xc0020333
c000f5ec:	55                   	push   ebp
c000f5ed:	e8 ee 10 ff ff       	call   c00006e0 <strcmp>
c000f5f2:	83 c4 10             	add    esp,0x10
c000f5f5:	85 c0                	test   eax,eax
c000f5f7:	74 16                	je     c000f60f <CPU::detectFeatures()+0x1fb>
c000f5f9:	50                   	push   eax
c000f5fa:	50                   	push   eax
c000f5fb:	68 40 03 02 c0       	push   0xc0020340
c000f600:	55                   	push   ebp
c000f601:	e8 da 10 ff ff       	call   c00006e0 <strcmp>
c000f606:	83 c4 10             	add    esp,0x10
c000f609:	85 c0                	test   eax,eax
c000f60b:	74 48                	je     c000f655 <CPU::detectFeatures()+0x241>
c000f60d:	eb 0f                	jmp    c000f61e <CPU::detectFeatures()+0x20a>
c000f60f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f619:	e9 c1 01 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f61e:	50                   	push   eax
c000f61f:	50                   	push   eax
c000f620:	68 4d 03 02 c0       	push   0xc002034d
c000f625:	55                   	push   ebp
c000f626:	e8 b5 10 ff ff       	call   c00006e0 <strcmp>
c000f62b:	83 c4 10             	add    esp,0x10
c000f62e:	85 c0                	test   eax,eax
c000f630:	74 23                	je     c000f655 <CPU::detectFeatures()+0x241>
c000f632:	57                   	push   edi
c000f633:	57                   	push   edi
c000f634:	68 5a 03 02 c0       	push   0xc002035a
c000f639:	55                   	push   ebp
c000f63a:	e8 a1 10 ff ff       	call   c00006e0 <strcmp>
c000f63f:	83 c4 10             	add    esp,0x10
c000f642:	85 c0                	test   eax,eax
c000f644:	75 1e                	jne    c000f664 <CPU::detectFeatures()+0x250>
c000f646:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f650:	e9 8a 01 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f655:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f65f:	e9 7b 01 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f664:	56                   	push   esi
c000f665:	56                   	push   esi
c000f666:	68 67 03 02 c0       	push   0xc0020367
c000f66b:	55                   	push   ebp
c000f66c:	e8 6f 10 ff ff       	call   c00006e0 <strcmp>
c000f671:	83 c4 10             	add    esp,0x10
c000f674:	85 c0                	test   eax,eax
c000f676:	75 0f                	jne    c000f687 <CPU::detectFeatures()+0x273>
c000f678:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f682:	e9 58 01 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f687:	51                   	push   ecx
c000f688:	51                   	push   ecx
c000f689:	68 26 03 02 c0       	push   0xc0020326
c000f68e:	55                   	push   ebp
c000f68f:	e8 4c 10 ff ff       	call   c00006e0 <strcmp>
c000f694:	83 c4 10             	add    esp,0x10
c000f697:	85 c0                	test   eax,eax
c000f699:	75 0f                	jne    c000f6aa <CPU::detectFeatures()+0x296>
c000f69b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f6a5:	e9 35 01 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f6aa:	52                   	push   edx
c000f6ab:	52                   	push   edx
c000f6ac:	68 74 03 02 c0       	push   0xc0020374
c000f6b1:	55                   	push   ebp
c000f6b2:	e8 29 10 ff ff       	call   c00006e0 <strcmp>
c000f6b7:	83 c4 10             	add    esp,0x10
c000f6ba:	85 c0                	test   eax,eax
c000f6bc:	75 0f                	jne    c000f6cd <CPU::detectFeatures()+0x2b9>
c000f6be:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f6c8:	e9 12 01 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f6cd:	50                   	push   eax
c000f6ce:	50                   	push   eax
c000f6cf:	68 81 03 02 c0       	push   0xc0020381
c000f6d4:	55                   	push   ebp
c000f6d5:	e8 06 10 ff ff       	call   c00006e0 <strcmp>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	85 c0                	test   eax,eax
c000f6df:	75 0f                	jne    c000f6f0 <CPU::detectFeatures()+0x2dc>
c000f6e1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f6eb:	e9 ef 00 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f6f0:	50                   	push   eax
c000f6f1:	50                   	push   eax
c000f6f2:	68 8e 03 02 c0       	push   0xc002038e
c000f6f7:	55                   	push   ebp
c000f6f8:	e8 e3 0f ff ff       	call   c00006e0 <strcmp>
c000f6fd:	83 c4 10             	add    esp,0x10
c000f700:	85 c0                	test   eax,eax
c000f702:	75 0f                	jne    c000f713 <CPU::detectFeatures()+0x2ff>
c000f704:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f70e:	e9 cc 00 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f713:	50                   	push   eax
c000f714:	50                   	push   eax
c000f715:	68 9b 03 02 c0       	push   0xc002039b
c000f71a:	55                   	push   ebp
c000f71b:	e8 c0 0f ff ff       	call   c00006e0 <strcmp>
c000f720:	83 c4 10             	add    esp,0x10
c000f723:	85 c0                	test   eax,eax
c000f725:	75 0f                	jne    c000f736 <CPU::detectFeatures()+0x322>
c000f727:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f731:	e9 a9 00 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f736:	50                   	push   eax
c000f737:	50                   	push   eax
c000f738:	68 a8 03 02 c0       	push   0xc00203a8
c000f73d:	55                   	push   ebp
c000f73e:	e8 9d 0f ff ff       	call   c00006e0 <strcmp>
c000f743:	83 c4 10             	add    esp,0x10
c000f746:	85 c0                	test   eax,eax
c000f748:	75 0f                	jne    c000f759 <CPU::detectFeatures()+0x345>
c000f74a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f754:	e9 86 00 00 00       	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f759:	50                   	push   eax
c000f75a:	50                   	push   eax
c000f75b:	68 b5 03 02 c0       	push   0xc00203b5
c000f760:	55                   	push   ebp
c000f761:	e8 7a 0f ff ff       	call   c00006e0 <strcmp>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	85 c0                	test   eax,eax
c000f76b:	75 0c                	jne    c000f779 <CPU::detectFeatures()+0x365>
c000f76d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f777:	eb 66                	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f779:	50                   	push   eax
c000f77a:	50                   	push   eax
c000f77b:	68 c2 03 02 c0       	push   0xc00203c2
c000f780:	55                   	push   ebp
c000f781:	e8 5a 0f ff ff       	call   c00006e0 <strcmp>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	85 c0                	test   eax,eax
c000f78b:	75 0c                	jne    c000f799 <CPU::detectFeatures()+0x385>
c000f78d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f797:	eb 46                	jmp    c000f7df <CPU::detectFeatures()+0x3cb>
c000f799:	57                   	push   edi
c000f79a:	57                   	push   edi
c000f79b:	68 cf 03 02 c0       	push   0xc00203cf
c000f7a0:	55                   	push   ebp
c000f7a1:	e8 3a 0f ff ff       	call   c00006e0 <strcmp>
c000f7a6:	83 c4 10             	add    esp,0x10
c000f7a9:	85 c0                	test   eax,eax
c000f7ab:	74 e0                	je     c000f78d <CPU::detectFeatures()+0x379>
c000f7ad:	56                   	push   esi
c000f7ae:	56                   	push   esi
c000f7af:	68 dc 03 02 c0       	push   0xc00203dc
c000f7b4:	55                   	push   ebp
c000f7b5:	e8 26 0f ff ff       	call   c00006e0 <strcmp>
c000f7ba:	83 c4 10             	add    esp,0x10
c000f7bd:	85 c0                	test   eax,eax
c000f7bf:	74 cc                	je     c000f78d <CPU::detectFeatures()+0x379>
c000f7c1:	51                   	push   ecx
c000f7c2:	51                   	push   ecx
c000f7c3:	68 e9 03 02 c0       	push   0xc00203e9
c000f7c8:	55                   	push   ebp
c000f7c9:	e8 12 0f ff ff       	call   c00006e0 <strcmp>
c000f7ce:	83 c4 10             	add    esp,0x10
c000f7d1:	85 c0                	test   eax,eax
c000f7d3:	74 b8                	je     c000f78d <CPU::detectFeatures()+0x379>
c000f7d5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f7df:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f7e4:	0f 86 be 00 00 00    	jbe    c000f8a8 <CPU::detectFeatures()+0x494>
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	68 80 00 00 00       	push   0x80
c000f7f2:	e8 31 fb ff ff       	call   c000f328 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7f7:	83 e0 01             	and    eax,0x1
c000f7fa:	c1 e0 06             	shl    eax,0x6
c000f7fd:	88 c2                	mov    dl,al
c000f7ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f805:	83 e0 bf             	and    eax,0xffffffbf
c000f808:	09 d0                	or     eax,edx
c000f80a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f810:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f817:	e8 0c fb ff ff       	call   c000f328 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f81c:	83 e0 01             	and    eax,0x1
c000f81f:	c1 e0 04             	shl    eax,0x4
c000f822:	88 c2                	mov    dl,al
c000f824:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f82a:	83 e0 ef             	and    eax,0xffffffef
c000f82d:	09 d0                	or     eax,edx
c000f82f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f835:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f83c:	e8 e7 fa ff ff       	call   c000f328 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f841:	c1 e0 07             	shl    eax,0x7
c000f844:	88 c2                	mov    dl,al
c000f846:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f84c:	83 e0 7f             	and    eax,0x7f
c000f84f:	09 d0                	or     eax,edx
c000f851:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f857:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f85e:	e8 f3 fa ff ff       	call   c000f356 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f863:	83 e0 01             	and    eax,0x1
c000f866:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f86d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f873:	83 e0 f7             	and    eax,0xfffffff7
c000f876:	09 d0                	or     eax,edx
c000f878:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f87e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f885:	e8 cc fa ff ff       	call   c000f356 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	83 e0 01             	and    eax,0x1
c000f890:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f897:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f89d:	83 e0 fb             	and    eax,0xfffffffb
c000f8a0:	09 d0                	or     eax,edx
c000f8a2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8a8:	83 ec 0c             	sub    esp,0xc
c000f8ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8af:	50                   	push   eax
c000f8b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8b4:	50                   	push   eax
c000f8b5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f8b9:	56                   	push   esi
c000f8ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8be:	50                   	push   eax
c000f8bf:	6a 01                	push   0x1
c000f8c1:	e8 82 f9 ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8ca:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f8d0:	88 ca                	mov    dl,cl
c000f8d2:	83 e0 f0             	and    eax,0xfffffff0
c000f8d5:	83 e2 0f             	and    edx,0xf
c000f8d8:	09 d0                	or     eax,edx
c000f8da:	88 ca                	mov    dl,cl
c000f8dc:	c0 ea 04             	shr    dl,0x4
c000f8df:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f8e5:	0f b6 c2             	movzx  eax,dl
c000f8e8:	c1 e0 06             	shl    eax,0x6
c000f8eb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f8ef:	89 c7                	mov    edi,eax
c000f8f1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8f7:	66 25 3f c0          	and    ax,0xc03f
c000f8fb:	83 c4 20             	add    esp,0x20
c000f8fe:	09 f8                	or     eax,edi
c000f900:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f907:	89 c8                	mov    eax,ecx
c000f909:	c1 e8 08             	shr    eax,0x8
c000f90c:	83 e0 0f             	and    eax,0xf
c000f90f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f916:	89 c7                	mov    edi,eax
c000f918:	83 e5 3f             	and    ebp,0x3f
c000f91b:	c1 e7 06             	shl    edi,0x6
c000f91e:	09 ef                	or     edi,ebp
c000f920:	89 fa                	mov    edx,edi
c000f922:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f929:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f92f:	88 c2                	mov    dl,al
c000f931:	c0 ea 02             	shr    dl,0x2
c000f934:	83 e5 c0             	and    ebp,0xffffffc0
c000f937:	89 d7                	mov    edi,edx
c000f939:	09 ef                	or     edi,ebp
c000f93b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f941:	89 fa                	mov    edx,edi
c000f943:	89 cf                	mov    edi,ecx
c000f945:	c1 ef 0c             	shr    edi,0xc
c000f948:	83 e5 cf             	and    ebp,0xffffffcf
c000f94b:	83 e7 03             	and    edi,0x3
c000f94e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f954:	c1 e7 04             	shl    edi,0x4
c000f957:	09 ef                	or     edi,ebp
c000f959:	3c 06                	cmp    al,0x6
c000f95b:	89 fa                	mov    edx,edi
c000f95d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f963:	74 04                	je     c000f969 <CPU::detectFeatures()+0x555>
c000f965:	3c 0f                	cmp    al,0xf
c000f967:	75 5c                	jne    c000f9c5 <CPU::detectFeatures()+0x5b1>
c000f969:	89 cf                	mov    edi,ecx
c000f96b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f96f:	c1 ef 10             	shr    edi,0x10
c000f972:	c1 e7 04             	shl    edi,0x4
c000f975:	09 fa                	or     edx,edi
c000f977:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f97d:	0f b6 d2             	movzx  edx,dl
c000f980:	c1 e2 06             	shl    edx,0x6
c000f983:	66 81 e7 3f c0       	and    di,0xc03f
c000f988:	09 fa                	or     edx,edi
c000f98a:	3c 0f                	cmp    al,0xf
c000f98c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f993:	75 30                	jne    c000f9c5 <CPU::detectFeatures()+0x5b1>
c000f995:	c1 e9 14             	shr    ecx,0x14
c000f998:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f99e:	83 c1 0f             	add    ecx,0xf
c000f9a1:	83 e0 3f             	and    eax,0x3f
c000f9a4:	88 ca                	mov    dl,cl
c000f9a6:	c1 e2 06             	shl    edx,0x6
c000f9a9:	c0 e9 02             	shr    cl,0x2
c000f9ac:	09 d0                	or     eax,edx
c000f9ae:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f9b4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f9ba:	83 e0 c0             	and    eax,0xffffffc0
c000f9bd:	09 c1                	or     ecx,eax
c000f9bf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f9c5:	83 ec 0c             	sub    esp,0xc
c000f9c8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f9cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9d3:	50                   	push   eax
c000f9d4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f9d8:	55                   	push   ebp
c000f9d9:	56                   	push   esi
c000f9da:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f9de:	57                   	push   edi
c000f9df:	68 00 00 00 80       	push   0x80000000
c000f9e4:	e8 5f f8 ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9e9:	83 c4 20             	add    esp,0x20
c000f9ec:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9f4:	76 22                	jbe    c000fa18 <CPU::detectFeatures()+0x604>
c000f9f6:	83 ec 0c             	sub    esp,0xc
c000f9f9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9fd:	50                   	push   eax
c000f9fe:	55                   	push   ebp
c000f9ff:	56                   	push   esi
c000fa00:	57                   	push   edi
c000fa01:	68 01 00 00 80       	push   0x80000001
c000fa06:	e8 3d f8 ff ff       	call   c000f248 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa0b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fa15:	83 c4 20             	add    esp,0x20
c000fa18:	52                   	push   edx
c000fa19:	52                   	push   edx
c000fa1a:	68 f5 03 02 c0       	push   0xc00203f5
c000fa1f:	53                   	push   ebx
c000fa20:	e8 01 c2 ff ff       	call   c000bc26 <Device::setName(char const*)>
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	eb 67                	jmp    c000fa91 <CPU::detectFeatures()+0x67d>
c000fa2a:	50                   	push   eax
c000fa2b:	50                   	push   eax
c000fa2c:	68 5a 03 02 c0       	push   0xc002035a
c000fa31:	55                   	push   ebp
c000fa32:	e8 b9 0b ff ff       	call   c00005f0 <strcpy>
c000fa37:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa41:	e8 7d 07 ff ff       	call   c00001c3 <is486>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa51:	74 1d                	je     c000fa70 <CPU::detectFeatures()+0x65c>
c000fa53:	83 c8 07             	or     eax,0x7
c000fa56:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa5c:	0f 20 c0             	mov    eax,cr0
c000fa5f:	83 e0 14             	and    eax,0x14
c000fa62:	83 f8 04             	cmp    eax,0x4
c000fa65:	75 0e                	jne    c000fa75 <CPU::detectFeatures()+0x661>
c000fa67:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa6e:	eb 21                	jmp    c000fa91 <CPU::detectFeatures()+0x67d>
c000fa70:	83 e0 f8             	and    eax,0xfffffff8
c000fa73:	eb e1                	jmp    c000fa56 <CPU::detectFeatures()+0x642>
c000fa75:	e8 24 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa7a:	83 e0 01             	and    eax,0x1
c000fa7d:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa80:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa86:	83 e0 fd             	and    eax,0xfffffffd
c000fa89:	09 d0                	or     eax,edx
c000fa8b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa91:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa98:	74 0e                	je     c000faa8 <CPU::detectFeatures()+0x694>
c000fa9a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa9f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000faa6:	eb 20                	jmp    c000fac8 <CPU::detectFeatures()+0x6b4>
c000faa8:	e8 f1 06 ff ff       	call   c000019e <hasLegacyFPU>
c000faad:	83 e0 01             	and    eax,0x1
c000fab0:	8d 14 00             	lea    edx,[eax+eax*1]
c000fab3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fab9:	83 e0 fd             	and    eax,0xfffffffd
c000fabc:	09 d0                	or     eax,edx
c000fabe:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fac4:	a8 02                	test   al,0x2
c000fac6:	75 d2                	jne    c000fa9a <CPU::detectFeatures()+0x686>
c000fac8:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000facf:	83 c4 2c             	add    esp,0x2c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	90                   	nop

c000fad8 <CPU::setupSMEP()>:
c000fad8:	0f 20 e0             	mov    eax,cr4
c000fadb:	0d 00 00 10 00       	or     eax,0x100000
c000fae0:	0f 22 e0             	mov    cr4,eax
c000fae3:	c3                   	ret    

c000fae4 <CPU::setupUMIP()>:
c000fae4:	0f 20 e0             	mov    eax,cr4
c000fae7:	80 cc 08             	or     ah,0x8
c000faea:	0f 22 e0             	mov    cr4,eax
c000faed:	c3                   	ret    

c000faee <CPU::setupTSC()>:
c000faee:	0f 20 e0             	mov    eax,cr4
c000faf1:	83 c8 04             	or     eax,0x4
c000faf4:	0f 22 e0             	mov    cr4,eax
c000faf7:	c3                   	ret    

c000faf8 <CPU::setupLargePages()>:
c000faf8:	0f 20 e0             	mov    eax,cr4
c000fafb:	83 c8 10             	or     eax,0x10
c000fafe:	0f 22 e0             	mov    cr4,eax
c000fb01:	c3                   	ret    

c000fb02 <CPU::setupPAT()>:
c000fb02:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fb07:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fb0e:	74 2c                	je     c000fb3c <CPU::setupPAT()+0x3a>
c000fb10:	53                   	push   ebx
c000fb11:	83 ec 10             	sub    esp,0x10
c000fb14:	68 77 02 00 00       	push   0x277
c000fb19:	50                   	push   eax
c000fb1a:	e8 8d 73 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c000fb1f:	83 e2 f8             	and    edx,0xfffffff8
c000fb22:	83 ca 01             	or     edx,0x1
c000fb25:	52                   	push   edx
c000fb26:	50                   	push   eax
c000fb27:	68 77 02 00 00       	push   0x277
c000fb2c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fb32:	e8 a1 73 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fb37:	83 c4 28             	add    esp,0x28
c000fb3a:	5b                   	pop    ebx
c000fb3b:	c3                   	ret    
c000fb3c:	c3                   	ret    
c000fb3d:	90                   	nop

c000fb3e <CPU::setupMTRR()>:
c000fb3e:	c3                   	ret    
c000fb3f:	90                   	nop

c000fb40 <CPU::setupGlobalPages()>:
c000fb40:	0f 20 e0             	mov    eax,cr4
c000fb43:	0c 80                	or     al,0x80
c000fb45:	0f 22 e0             	mov    cr4,eax
c000fb48:	c3                   	ret    
c000fb49:	90                   	nop

c000fb4a <CPU::allowUsermodeDataAccess()>:
c000fb4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb4e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb55:	74 03                	je     c000fb5a <CPU::allowUsermodeDataAccess()+0x10>
c000fb57:	0f 01 cb             	stac   
c000fb5a:	c3                   	ret    
c000fb5b:	90                   	nop

c000fb5c <CPU::prohibitUsermodeDataAccess()>:
c000fb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb60:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb67:	74 03                	je     c000fb6c <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb69:	0f 01 ca             	clac   
c000fb6c:	c3                   	ret    
c000fb6d:	90                   	nop

c000fb6e <CPU::setupSMAP()>:
c000fb6e:	0f 20 e0             	mov    eax,cr4
c000fb71:	0d 00 00 20 00       	or     eax,0x200000
c000fb76:	0f 22 e0             	mov    cr4,eax
c000fb79:	eb e1                	jmp    c000fb5c <CPU::prohibitUsermodeDataAccess()>
c000fb7b:	90                   	nop

c000fb7c <CPU::setupFeatures()>:
c000fb7c:	53                   	push   ebx
c000fb7d:	83 ec 08             	sub    esp,0x8
c000fb80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb84:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb8b:	74 18                	je     c000fba5 <CPU::setupFeatures()+0x29>
c000fb8d:	83 ec 0c             	sub    esp,0xc
c000fb90:	68 01 04 02 c0       	push   0xc0020401
c000fb95:	e8 c9 aa ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000fb9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb9d:	e8 42 ff ff ff       	call   c000fae4 <CPU::setupUMIP()>
c000fba2:	83 c4 10             	add    esp,0x10
c000fba5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fbac:	74 18                	je     c000fbc6 <CPU::setupFeatures()+0x4a>
c000fbae:	83 ec 0c             	sub    esp,0xc
c000fbb1:	68 0b 04 02 c0       	push   0xc002040b
c000fbb6:	e8 a8 aa ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000fbbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbbe:	e8 2b ff ff ff       	call   c000faee <CPU::setupTSC()>
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fbcd:	74 18                	je     c000fbe7 <CPU::setupFeatures()+0x6b>
c000fbcf:	83 ec 0c             	sub    esp,0xc
c000fbd2:	68 14 04 02 c0       	push   0xc0020414
c000fbd7:	e8 87 aa ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000fbdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbdf:	e8 14 ff ff ff       	call   c000faf8 <CPU::setupLargePages()>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fbee:	74 18                	je     c000fc08 <CPU::setupFeatures()+0x8c>
c000fbf0:	83 ec 0c             	sub    esp,0xc
c000fbf3:	68 1d 04 02 c0       	push   0xc002041d
c000fbf8:	e8 66 aa ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000fbfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc00:	e8 3b ff ff ff       	call   c000fb40 <CPU::setupGlobalPages()>
c000fc05:	83 c4 10             	add    esp,0x10
c000fc08:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fc0f:	74 18                	je     c000fc29 <CPU::setupFeatures()+0xad>
c000fc11:	83 ec 0c             	sub    esp,0xc
c000fc14:	68 2f 04 02 c0       	push   0xc002042f
c000fc19:	e8 45 aa ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c000fc1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc21:	e8 dc fe ff ff       	call   c000fb02 <CPU::setupPAT()>
c000fc26:	83 c4 10             	add    esp,0x10
c000fc29:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fc30:	74 11                	je     c000fc43 <CPU::setupFeatures()+0xc7>
c000fc32:	c7 44 24 10 38 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020438
c000fc3a:	83 c4 08             	add    esp,0x8
c000fc3d:	5b                   	pop    ebx
c000fc3e:	e9 20 aa ff ff       	jmp    c000a663 <Dbg::kprintf(char const*, ...)>
c000fc43:	83 c4 08             	add    esp,0x8
c000fc46:	5b                   	pop    ebx
c000fc47:	c3                   	ret    

c000fc48 <CPU::open(int, int, void*)>:
c000fc48:	57                   	push   edi
c000fc49:	56                   	push   esi
c000fc4a:	53                   	push   ebx
c000fc4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc53:	83 ec 0c             	sub    esp,0xc
c000fc56:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc5c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc62:	50                   	push   eax
c000fc63:	e8 30 75 ff ff       	call   c0007198 <GDT::setup()>
c000fc68:	83 c4 0c             	add    esp,0xc
c000fc6b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc71:	6a 00                	push   0x0
c000fc73:	68 ef be ad de       	push   0xdeadbeef
c000fc78:	57                   	push   edi
c000fc79:	e8 76 90 ff ff       	call   c0008cf4 <TSS::setup(unsigned long, unsigned long)>
c000fc7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc81:	e8 4e 90 ff ff       	call   c0008cd4 <TSS::flush()>
c000fc86:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc8f:	e8 52 77 ff ff       	call   c00073e6 <IDT::setup()>
c000fc94:	b8 00 04 00 00       	mov    eax,0x400
c000fc99:	0f 23 f8             	mov    db7,eax
c000fc9c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fca6:	e8 bf 7e ff ff       	call   c0007b6a <Phys::allocatePage()>
c000fcab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fcb1:	89 30                	mov    DWORD PTR [eax],esi
c000fcb3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fcb9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fcbc:	58                   	pop    eax
c000fcbd:	5a                   	pop    edx
c000fcbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fcc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fcc8:	e8 55 a0 ff ff       	call   c0009d22 <VAS::setCPUSpecific(unsigned long)>
c000fccd:	c7 04 24 42 04 02 c0 	mov    DWORD PTR [esp],0xc0020442
c000fcd4:	e8 c6 00 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000fcd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcdc:	e8 33 f7 ff ff       	call   c000f414 <CPU::detectFeatures()>
c000fce1:	c7 04 24 65 04 02 c0 	mov    DWORD PTR [esp],0xc0020465
c000fce8:	e8 b2 00 00 00       	call   c000fd9f <KeSetBootMessage(char const*)>
c000fced:	e8 01 6e 00 00       	call   c0016af3 <HalInitialise()>
c000fcf2:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fcf7:	83 e0 10             	and    eax,0x10
c000fcfa:	83 f8 01             	cmp    eax,0x1
c000fcfd:	19 c0                	sbb    eax,eax
c000fcff:	83 e0 46             	and    eax,0x46
c000fd02:	83 c0 1e             	add    eax,0x1e
c000fd05:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd08:	e8 dc d6 ff ff       	call   c000d3e9 <setupTimer(int)>
c000fd0d:	83 c4 10             	add    esp,0x10
c000fd10:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fd16:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fd1d:	74 0c                	je     c000fd2b <CPU::open(int, int, void*)+0xe3>
c000fd1f:	83 ec 0c             	sub    esp,0xc
c000fd22:	53                   	push   ebx
c000fd23:	e8 54 fe ff ff       	call   c000fb7c <CPU::setupFeatures()>
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	5b                   	pop    ebx
c000fd2c:	31 c0                	xor    eax,eax
c000fd2e:	5e                   	pop    esi
c000fd2f:	5f                   	pop    edi
c000fd30:	c3                   	ret    

c000fd31 <KeDisplaySplashScreen()>:
c000fd31:	55                   	push   ebp
c000fd32:	bd 05 00 00 00       	mov    ebp,0x5
c000fd37:	57                   	push   edi
c000fd38:	bf 00 18 02 c0       	mov    edi,0xc0021800
c000fd3d:	56                   	push   esi
c000fd3e:	be 0a 00 00 00       	mov    esi,0xa
c000fd43:	53                   	push   ebx
c000fd44:	31 db                	xor    ebx,ebx
c000fd46:	83 ec 0c             	sub    esp,0xc
c000fd49:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fd4c:	84 c0                	test   al,al
c000fd4e:	74 47                	je     c000fd97 <KeDisplaySplashScreen()+0x66>
c000fd50:	80 bb 36 18 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde7ca],0xdb
c000fd57:	75 13                	jne    c000fd6c <KeDisplaySplashScreen()+0x3b>
c000fd59:	0f b6 93 35 18 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde7cb]
c000fd60:	83 e2 fe             	and    edx,0xfffffffe
c000fd63:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd69:	75 01                	jne    c000fd6c <KeDisplaySplashScreen()+0x3b>
c000fd6b:	46                   	inc    esi
c000fd6c:	3c 0d                	cmp    al,0xd
c000fd6e:	74 24                	je     c000fd94 <KeDisplaySplashScreen()+0x63>
c000fd70:	3c 0a                	cmp    al,0xa
c000fd72:	75 0a                	jne    c000fd7e <KeDisplaySplashScreen()+0x4d>
c000fd74:	45                   	inc    ebp
c000fd75:	be 0a 00 00 00       	mov    esi,0xa
c000fd7a:	31 db                	xor    ebx,ebx
c000fd7c:	eb 16                	jmp    c000fd94 <KeDisplaySplashScreen()+0x63>
c000fd7e:	83 ec 0c             	sub    esp,0xc
c000fd81:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd84:	43                   	inc    ebx
c000fd85:	55                   	push   ebp
c000fd86:	52                   	push   edx
c000fd87:	6a 00                	push   0x0
c000fd89:	6a 0e                	push   0xe
c000fd8b:	50                   	push   eax
c000fd8c:	e8 c3 79 00 00       	call   c0017754 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd91:	83 c4 20             	add    esp,0x20
c000fd94:	47                   	inc    edi
c000fd95:	eb b2                	jmp    c000fd49 <KeDisplaySplashScreen()+0x18>
c000fd97:	83 c4 0c             	add    esp,0xc
c000fd9a:	5b                   	pop    ebx
c000fd9b:	5e                   	pop    esi
c000fd9c:	5f                   	pop    edi
c000fd9d:	5d                   	pop    ebp
c000fd9e:	c3                   	ret    

c000fd9f <KeSetBootMessage(char const*)>:
c000fd9f:	57                   	push   edi
c000fda0:	56                   	push   esi
c000fda1:	53                   	push   ebx
c000fda2:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fda8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fdaf:	68 9e 00 00 00       	push   0x9e
c000fdb4:	6a 00                	push   0x0
c000fdb6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fdba:	56                   	push   esi
c000fdbb:	e8 00 07 ff ff       	call   c00004c0 <memset>
c000fdc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdc3:	e8 68 07 ff ff       	call   c0000530 <strlen>
c000fdc8:	ba 50 00 00 00       	mov    edx,0x50
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	29 c2                	sub    edx,eax
c000fdd2:	31 c9                	xor    ecx,ecx
c000fdd4:	83 e2 fe             	and    edx,0xfffffffe
c000fdd7:	01 f2                	add    edx,esi
c000fdd9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fdde:	84 c0                	test   al,al
c000fde0:	74 0a                	je     c000fdec <KeSetBootMessage(char const*)+0x4d>
c000fde2:	80 cc 0f             	or     ah,0xf
c000fde5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fde9:	41                   	inc    ecx
c000fdea:	eb ed                	jmp    c000fdd9 <KeSetBootMessage(char const*)+0x3a>
c000fdec:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fdf1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fdf6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdf8:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fdfe:	5b                   	pop    ebx
c000fdff:	5e                   	pop    esi
c000fe00:	5f                   	pop    edi
c000fe01:	c3                   	ret    

c000fe02 <EnvVarContainer::getEnv(char const*)>:
c000fe02:	57                   	push   edi
c000fe03:	56                   	push   esi
c000fe04:	53                   	push   ebx
c000fe05:	31 db                	xor    ebx,ebx
c000fe07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe0b:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fe0d:	7e 2b                	jle    c000fe3a <EnvVarContainer::getEnv(char const*)+0x38>
c000fe0f:	50                   	push   eax
c000fe10:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fe17:	50                   	push   eax
c000fe18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fe1b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fe1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fe22:	e8 b9 08 ff ff       	call   c00006e0 <strcmp>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	85 c0                	test   eax,eax
c000fe2c:	75 09                	jne    c000fe37 <EnvVarContainer::getEnv(char const*)+0x35>
c000fe2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fe31:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fe35:	eb 05                	jmp    c000fe3c <EnvVarContainer::getEnv(char const*)+0x3a>
c000fe37:	43                   	inc    ebx
c000fe38:	eb d1                	jmp    c000fe0b <EnvVarContainer::getEnv(char const*)+0x9>
c000fe3a:	31 c0                	xor    eax,eax
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	5f                   	pop    edi
c000fe3f:	c3                   	ret    

c000fe40 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fe40:	55                   	push   ebp
c000fe41:	57                   	push   edi
c000fe42:	56                   	push   esi
c000fe43:	53                   	push   ebx
c000fe44:	83 ec 28             	sub    esp,0x28
c000fe47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fe4b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fe4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fe53:	56                   	push   esi
c000fe54:	e8 d7 06 ff ff       	call   c0000530 <strlen>
c000fe59:	40                   	inc    eax
c000fe5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe5d:	e8 11 7a ff ff       	call   c0007873 <malloc>
c000fe62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe69:	e8 c2 06 ff ff       	call   c0000530 <strlen>
c000fe6e:	40                   	inc    eax
c000fe6f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe72:	e8 fc 79 ff ff       	call   c0007873 <malloc>
c000fe77:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe7e:	e8 ad 06 ff ff       	call   c0000530 <strlen>
c000fe83:	83 c4 0c             	add    esp,0xc
c000fe86:	40                   	inc    eax
c000fe87:	50                   	push   eax
c000fe88:	6a 00                	push   0x0
c000fe8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe8e:	e8 2d 06 ff ff       	call   c00004c0 <memset>
c000fe93:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe96:	e8 95 06 ff ff       	call   c0000530 <strlen>
c000fe9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe9f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fea2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fea4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fea7:	e8 84 06 ff ff       	call   c0000530 <strlen>
c000feac:	83 c4 0c             	add    esp,0xc
c000feaf:	40                   	inc    eax
c000feb0:	89 de                	mov    esi,ebx
c000feb2:	50                   	push   eax
c000feb3:	6a 00                	push   0x0
c000feb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb9:	e8 02 06 ff ff       	call   c00004c0 <memset>
c000febe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fec1:	e8 6a 06 ff ff       	call   c0000530 <strlen>
c000fec6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000feca:	8d 48 01             	lea    ecx,[eax+0x1]
c000fecd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fecf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fed2:	40                   	inc    eax
c000fed3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fed6:	c1 e0 03             	shl    eax,0x3
c000fed9:	5a                   	pop    edx
c000feda:	59                   	pop    ecx
c000fedb:	50                   	push   eax
c000fedc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fedf:	e8 7b 79 ff ff       	call   c000785f <realloc>
c000fee4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fee7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000feea:	8d 74 24 18          	lea    esi,[esp+0x18]
c000feee:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fef2:	b9 08 00 00 00       	mov    ecx,0x8
c000fef7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fef9:	83 c4 2c             	add    esp,0x2c
c000fefc:	5b                   	pop    ebx
c000fefd:	5e                   	pop    esi
c000fefe:	5f                   	pop    edi
c000feff:	5d                   	pop    ebp
c000ff00:	c3                   	ret    
c000ff01:	90                   	nop

c000ff02 <EnvVarContainer::deleteEnv(char const*)>:
c000ff02:	c3                   	ret    
c000ff03:	90                   	nop

c000ff04 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ff04:	55                   	push   ebp
c000ff05:	57                   	push   edi
c000ff06:	56                   	push   esi
c000ff07:	53                   	push   ebx
c000ff08:	81 ec 38 01 00 00    	sub    esp,0x138
c000ff0e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ff15:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ff1c:	68 14 01 00 00       	push   0x114
c000ff21:	e8 4d 79 ff ff       	call   c0007873 <malloc>
c000ff26:	83 c4 0c             	add    esp,0xc
c000ff29:	89 c3                	mov    ebx,eax
c000ff2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ff2e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ff35:	50                   	push   eax
c000ff36:	e8 9d ac ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c000ff3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff3e:	e8 c3 af ff ff       	call   c000af06 <File::exists()>
c000ff43:	83 c4 10             	add    esp,0x10
c000ff46:	84 c0                	test   al,al
c000ff48:	75 31                	jne    c000ff7b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ff4a:	50                   	push   eax
c000ff4b:	50                   	push   eax
c000ff4c:	6a 12                	push   0x12
c000ff4e:	53                   	push   ebx
c000ff4f:	e8 44 ad ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c000ff54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff56:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ff59:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff5c:	e8 cf 05 ff ff       	call   c0000530 <strlen>
c000ff61:	5a                   	pop    edx
c000ff62:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff66:	31 d2                	xor    edx,edx
c000ff68:	51                   	push   ecx
c000ff69:	56                   	push   esi
c000ff6a:	52                   	push   edx
c000ff6b:	50                   	push   eax
c000ff6c:	53                   	push   ebx
c000ff6d:	ff d7                	call   edi
c000ff6f:	83 c4 14             	add    esp,0x14
c000ff72:	53                   	push   ebx
c000ff73:	e8 7e ad ff ff       	call   c000acf6 <File::close()>
c000ff78:	83 c4 10             	add    esp,0x10
c000ff7b:	56                   	push   esi
c000ff7c:	31 f6                	xor    esi,esi
c000ff7e:	68 00 01 00 00       	push   0x100
c000ff83:	6a 00                	push   0x0
c000ff85:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff89:	50                   	push   eax
c000ff8a:	e8 31 05 ff ff       	call   c00004c0 <memset>
c000ff8f:	5f                   	pop    edi
c000ff90:	58                   	pop    eax
c000ff91:	6a 01                	push   0x1
c000ff93:	53                   	push   ebx
c000ff94:	e8 ff ac ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ffa9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ffad:	51                   	push   ecx
c000ffae:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ffb2:	52                   	push   edx
c000ffb3:	6a 00                	push   0x0
c000ffb5:	6a 01                	push   0x1
c000ffb7:	53                   	push   ebx
c000ffb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ffbb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ffbf:	83 c4 20             	add    esp,0x20
c000ffc2:	3c 0d                	cmp    al,0xd
c000ffc4:	0f 84 09 01 00 00    	je     c00100d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ffcf:	0f 84 ef 00 00 00    	je     c00100c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ffd5:	3c 0a                	cmp    al,0xa
c000ffd7:	74 13                	je     c000ffec <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ffd9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffde:	74 0c                	je     c000ffec <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ffe0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ffe6:	0f 8e d8 00 00 00    	jle    c00100c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ffec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	8d 78 01             	lea    edi,[eax+0x1]
c000fff6:	57                   	push   edi
c000fff7:	e8 77 78 ff ff       	call   c0007873 <malloc>
c000fffc:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010000:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010004:	8d 56 04             	lea    edx,[esi+0x4]
c0010007:	89 14 24             	mov    DWORD PTR [esp],edx
c001000a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001000e:	e8 60 78 ff ff       	call   c0007873 <malloc>
c0010013:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010017:	83 c4 0c             	add    esp,0xc
c001001a:	57                   	push   edi
c001001b:	6a 00                	push   0x0
c001001d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010021:	e8 9a 04 ff ff       	call   c00004c0 <memset>
c0010026:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001002a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001002e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010034:	83 c4 0c             	add    esp,0xc
c0010037:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001003b:	52                   	push   edx
c001003c:	6a 00                	push   0x0
c001003e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010042:	e8 79 04 ff ff       	call   c00004c0 <memset>
c0010047:	8d 74 24 30          	lea    esi,[esp+0x30]
c001004b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001004f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010052:	e8 d9 04 ff ff       	call   c0000530 <strlen>
c0010057:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001005b:	89 c1                	mov    ecx,eax
c001005d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001005f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010062:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010065:	40                   	inc    eax
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001006c:	85 d2                	test   edx,edx
c001006e:	75 0c                	jne    c001007c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	6a 08                	push   0x8
c0010075:	e8 f9 77 ff ff       	call   c0007873 <malloc>
c001007a:	eb 0c                	jmp    c0010088 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001007c:	c1 e0 03             	shl    eax,0x3
c001007f:	51                   	push   ecx
c0010080:	51                   	push   ecx
c0010081:	50                   	push   eax
c0010082:	52                   	push   edx
c0010083:	e8 d7 77 ff ff       	call   c000785f <realloc>
c0010088:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001008b:	83 c4 10             	add    esp,0x10
c001008e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010091:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010094:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010098:	b9 08 00 00 00       	mov    ecx,0x8
c001009d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00100a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100a3:	50                   	push   eax
c00100a4:	31 f6                	xor    esi,esi
c00100a6:	68 00 01 00 00       	push   0x100
c00100ab:	6a 00                	push   0x0
c00100ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00100b1:	50                   	push   eax
c00100b2:	e8 09 04 ff ff       	call   c00004c0 <memset>
c00100b7:	83 c4 10             	add    esp,0x10
c00100ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00100c2:	eb 0f                	jmp    c00100d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00100c4:	3c 3d                	cmp    al,0x3d
c00100c6:	74 07                	je     c00100cf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00100c8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00100cc:	46                   	inc    esi
c00100cd:	eb 04                	jmp    c00100d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00100cf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00100d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00100d8:	0f 85 c6 fe ff ff    	jne    c000ffa4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00100de:	81 c4 2c 01 00 00    	add    esp,0x12c
c00100e4:	5b                   	pop    ebx
c00100e5:	5e                   	pop    esi
c00100e6:	5f                   	pop    edi
c00100e7:	5d                   	pop    ebp
c00100e8:	c3                   	ret    
c00100e9:	90                   	nop

c00100ea <EnvVarContainer::__loadSystem()>:
c00100ea:	83 ec 10             	sub    esp,0x10
c00100ed:	68 60 19 02 c0       	push   0xc0021960
c00100f2:	68 a8 04 02 c0       	push   0xc00204a8
c00100f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100fb:	e8 04 fe ff ff       	call   c000ff04 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010100:	83 c4 1c             	add    esp,0x1c
c0010103:	c3                   	ret    

c0010104 <EnvVarContainer::__loadUser()>:
c0010104:	c3                   	ret    
c0010105:	90                   	nop

c0010106 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010114:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010118:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001011b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010126:	90                   	nop
c0010127:	c3                   	ret    

c0010128 <EnvVarContainer::~EnvVarContainer()>:
c0010128:	83 ec 0c             	sub    esp,0xc
c001012b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010132:	85 c0                	test   eax,eax
c0010134:	74 1d                	je     c0010153 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013a:	8b 00                	mov    eax,DWORD PTR [eax]
c001013c:	85 c0                	test   eax,eax
c001013e:	74 13                	je     c0010153 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010147:	83 ec 0c             	sub    esp,0xc
c001014a:	50                   	push   eax
c001014b:	e8 33 77 ff ff       	call   c0007883 <free>
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	90                   	nop
c0010154:	83 c4 0c             	add    esp,0xc
c0010157:	c3                   	ret    

c0010158 <Krnl::getEnv(Process*, char const*)>:
c0010158:	53                   	push   ebx
c0010159:	83 ec 08             	sub    esp,0x8
c001015c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010160:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010164:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c001016a:	74 04                	je     c0010170 <Krnl::getEnv(Process*, char const*)+0x18>
c001016c:	85 c0                	test   eax,eax
c001016e:	75 0b                	jne    c001017b <Krnl::getEnv(Process*, char const*)+0x23>
c0010170:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010175:	85 c0                	test   eax,eax
c0010177:	75 19                	jne    c0010192 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010179:	eb 27                	jmp    c00101a2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001017b:	52                   	push   edx
c001017c:	52                   	push   edx
c001017d:	53                   	push   ebx
c001017e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010184:	e8 79 fc ff ff       	call   c000fe02 <EnvVarContainer::getEnv(char const*)>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	85 c0                	test   eax,eax
c001018e:	75 28                	jne    c00101b8 <Krnl::getEnv(Process*, char const*)+0x60>
c0010190:	eb de                	jmp    c0010170 <Krnl::getEnv(Process*, char const*)+0x18>
c0010192:	52                   	push   edx
c0010193:	52                   	push   edx
c0010194:	53                   	push   ebx
c0010195:	50                   	push   eax
c0010196:	e8 67 fc ff ff       	call   c000fe02 <EnvVarContainer::getEnv(char const*)>
c001019b:	83 c4 10             	add    esp,0x10
c001019e:	85 c0                	test   eax,eax
c00101a0:	75 16                	jne    c00101b8 <Krnl::getEnv(Process*, char const*)+0x60>
c00101a2:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c00101a7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00101ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101af:	83 c4 08             	add    esp,0x8
c00101b2:	5b                   	pop    ebx
c00101b3:	e9 4a fc ff ff       	jmp    c000fe02 <EnvVarContainer::getEnv(char const*)>
c00101b8:	83 c4 08             	add    esp,0x8
c00101bb:	5b                   	pop    ebx
c00101bc:	c3                   	ret    

c00101bd <Krnl::setEnvSystem(char const*, char const*)>:
c00101bd:	83 ec 10             	sub    esp,0x10
c00101c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101c8:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c00101ce:	e8 6d fc ff ff       	call   c000fe40 <EnvVarContainer::setEnv(char const*, char const*)>
c00101d3:	83 c4 1c             	add    esp,0x1c
c00101d6:	c3                   	ret    

c00101d7 <Krnl::setEnvUser(char const*, char const*)>:
c00101d7:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c00101dc:	85 c0                	test   eax,eax
c00101de:	74 15                	je     c00101f5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00101e0:	83 ec 10             	sub    esp,0x10
c00101e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101eb:	50                   	push   eax
c00101ec:	e8 4f fc ff ff       	call   c000fe40 <EnvVarContainer::setEnv(char const*, char const*)>
c00101f1:	83 c4 1c             	add    esp,0x1c
c00101f4:	c3                   	ret    
c00101f5:	c3                   	ret    

c00101f6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00101f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101fa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010200:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010204:	e9 37 fc ff ff       	jmp    c000fe40 <EnvVarContainer::setEnv(char const*, char const*)>

c0010209 <Krnl::deleteEnvSystem(char const*)>:
c0010209:	c3                   	ret    

c001020a <Krnl::deleteEnvUser(char const*)>:
c001020a:	c3                   	ret    

c001020b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001020b:	c3                   	ret    

c001020c <Krnl::newProcessEnv(Process*)>:
c001020c:	83 ec 28             	sub    esp,0x28
c001020f:	6a 0c                	push   0xc
c0010211:	e8 5d 76 ff ff       	call   c0007873 <malloc>
c0010216:	5a                   	pop    edx
c0010217:	59                   	pop    ecx
c0010218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001021c:	50                   	push   eax
c001021d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010221:	e8 e0 fe ff ff       	call   c0010106 <EnvVarContainer::EnvVarContainer(Process*)>
c0010226:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001022a:	83 c4 2c             	add    esp,0x2c
c001022d:	c3                   	ret    

c001022e <Krnl::copyProcessEnv(Process*, Process*)>:
c001022e:	57                   	push   edi
c001022f:	56                   	push   esi
c0010230:	53                   	push   ebx
c0010231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010235:	83 ec 0c             	sub    esp,0xc
c0010238:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001023e:	6a 0c                	push   0xc
c0010240:	e8 2e 76 ff ff       	call   c0007873 <malloc>
c0010245:	89 c3                	mov    ebx,eax
c0010247:	58                   	pop    eax
c0010248:	5a                   	pop    edx
c0010249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024d:	53                   	push   ebx
c001024e:	e8 b3 fe ff ff       	call   c0010106 <EnvVarContainer::EnvVarContainer(Process*)>
c0010253:	8b 07                	mov    eax,DWORD PTR [edi]
c0010255:	89 03                	mov    DWORD PTR [ebx],eax
c0010257:	c1 e0 03             	shl    eax,0x3
c001025a:	89 04 24             	mov    DWORD PTR [esp],eax
c001025d:	e8 11 76 ff ff       	call   c0007873 <malloc>
c0010262:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010265:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010267:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001026a:	c1 e1 03             	shl    ecx,0x3
c001026d:	89 c7                	mov    edi,eax
c001026f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	89 d8                	mov    eax,ebx
c0010276:	5b                   	pop    ebx
c0010277:	5e                   	pop    esi
c0010278:	5f                   	pop    edi
c0010279:	c3                   	ret    

c001027a <Krnl::loadSystemEnv()>:
c001027a:	53                   	push   ebx
c001027b:	83 ec 14             	sub    esp,0x14
c001027e:	6a 0c                	push   0xc
c0010280:	e8 ee 75 ff ff       	call   c0007873 <malloc>
c0010285:	89 c3                	mov    ebx,eax
c0010287:	58                   	pop    eax
c0010288:	5a                   	pop    edx
c0010289:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001028f:	53                   	push   ebx
c0010290:	e8 71 fe ff ff       	call   c0010106 <EnvVarContainer::EnvVarContainer(Process*)>
c0010295:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010298:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c001029e:	e8 47 fe ff ff       	call   c00100ea <EnvVarContainer::__loadSystem()>
c00102a3:	83 c4 18             	add    esp,0x18
c00102a6:	5b                   	pop    ebx
c00102a7:	c3                   	ret    

c00102a8 <Krnl::loadUserEnv()>:
c00102a8:	53                   	push   ebx
c00102a9:	83 ec 14             	sub    esp,0x14
c00102ac:	6a 0c                	push   0xc
c00102ae:	e8 c0 75 ff ff       	call   c0007873 <malloc>
c00102b3:	89 c3                	mov    ebx,eax
c00102b5:	58                   	pop    eax
c00102b6:	5a                   	pop    edx
c00102b7:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00102bd:	53                   	push   ebx
c00102be:	e8 43 fe ff ff       	call   c0010106 <EnvVarContainer::EnvVarContainer(Process*)>
c00102c3:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c00102c9:	83 c4 18             	add    esp,0x18
c00102cc:	5b                   	pop    ebx
c00102cd:	c3                   	ret    

c00102ce <Krnl::flushEnv()>:
c00102ce:	c3                   	ret    

c00102cf <Krnl::getProcessTotalEnvCount(Process*)>:
c00102cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d3:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c00102d9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102df:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c00102e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00102e6:	03 01                	add    eax,DWORD PTR [ecx]
c00102e8:	85 d2                	test   edx,edx
c00102ea:	74 02                	je     c00102ee <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00102ec:	03 02                	add    eax,DWORD PTR [edx]
c00102ee:	c3                   	ret    

c00102ef <Krnl::getProcessEnvPair(Process*, int)>:
c00102ef:	57                   	push   edi
c00102f0:	56                   	push   esi
c00102f1:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c00102f7:	53                   	push   ebx
c00102f8:	85 f6                	test   esi,esi
c00102fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010302:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010306:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001030c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001030e:	75 16                	jne    c0010326 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010310:	39 c2                	cmp    edx,eax
c0010312:	7c 16                	jl     c001032a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010314:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c001031a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001031c:	01 c6                	add    esi,eax
c001031e:	39 d6                	cmp    esi,edx
c0010320:	7e 3c                	jle    c001035e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010322:	29 c2                	sub    edx,eax
c0010324:	eb 04                	jmp    c001032a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010326:	39 c2                	cmp    edx,eax
c0010328:	7d 05                	jge    c001032f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001032a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001032d:	eb 20                	jmp    c001034f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001032f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010331:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010334:	39 d1                	cmp    ecx,edx
c0010336:	7e 04                	jle    c001033c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010338:	29 c2                	sub    edx,eax
c001033a:	eb 10                	jmp    c001034c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001033c:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c0010342:	03 0e                	add    ecx,DWORD PTR [esi]
c0010344:	39 d1                	cmp    ecx,edx
c0010346:	7e 16                	jle    c001035e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010348:	29 c2                	sub    edx,eax
c001034a:	29 fa                	sub    edx,edi
c001034c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001034f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010352:	8b 02                	mov    eax,DWORD PTR [edx]
c0010354:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010357:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001035a:	89 03                	mov    DWORD PTR [ebx],eax
c001035c:	eb 1d                	jmp    c001037b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	68 ca 04 02 c0       	push   0xc00204ca
c0010366:	e8 ac 00 00 00       	call   c0010417 <KePanic(char const*)>
c001036b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010371:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	89 d8                	mov    eax,ebx
c001037d:	5b                   	pop    ebx
c001037e:	5e                   	pop    esi
c001037f:	5f                   	pop    edi
c0010380:	c2 04 00             	ret    0x4

c0010383 <CPU::current()>:
c0010383:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010388:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001038e:	c3                   	ret    

c001038f <operator new(unsigned long)>:
c001038f:	e9 df 74 ff ff       	jmp    c0007873 <malloc>

c0010394 <operator delete(void*)>:
c0010394:	e9 fa 74 ff ff       	jmp    c0007893 <rfree>

c0010399 <disableIRQs()>:
c0010399:	fa                   	cli    
c001039a:	c3                   	ret    

c001039b <enableIRQs()>:
c001039b:	fb                   	sti    
c001039c:	c3                   	ret    

c001039d <lockScheduler()>:
c001039d:	fa                   	cli    
c001039e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00103a4:	c3                   	ret    

c00103a5 <unlockScheduler()>:
c00103a5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103aa:	48                   	dec    eax
c00103ab:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103b0:	75 01                	jne    c00103b3 <unlockScheduler()+0xe>
c00103b2:	fb                   	sti    
c00103b3:	c3                   	ret    

c00103b4 <lockStuff()>:
c00103b4:	fa                   	cli    
c00103b5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00103bb:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00103c1:	c3                   	ret    

c00103c2 <unlockStuff()>:
c00103c2:	83 ec 0c             	sub    esp,0xc
c00103c5:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00103ca:	48                   	dec    eax
c00103cb:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00103d0:	75 18                	jne    c00103ea <unlockStuff()+0x28>
c00103d2:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c00103d9:	74 0f                	je     c00103ea <unlockStuff()+0x28>
c00103db:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00103e5:	e8 76 47 00 00       	call   c0014b60 <schedule()>
c00103ea:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103ef:	48                   	dec    eax
c00103f0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103f5:	75 01                	jne    c00103f8 <unlockStuff()+0x36>
c00103f7:	fb                   	sti    
c00103f8:	83 c4 0c             	add    esp,0xc
c00103fb:	c3                   	ret    

c00103fc <Virt::getAKernelVAS()>:
c00103fc:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c0010401:	c3                   	ret    

c0010402 <__not_memcpy>:
c0010402:	57                   	push   edi
c0010403:	56                   	push   esi
c0010404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010408:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001040c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010410:	89 c7                	mov    edi,eax
c0010412:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	c3                   	ret    

c0010417 <KePanic(char const*)>:
c0010417:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c001041e:	e9 bc 65 00 00       	jmp    c00169df <HalPanic(char const*)>

c0010423 <Krnl::powerThread(void*)>:
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001042b:	48                   	dec    eax
c001042c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010431:	75 01                	jne    c0010434 <Krnl::powerThread(void*)+0x11>
c0010433:	fb                   	sti    
c0010434:	83 ec 0c             	sub    esp,0xc
c0010437:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c001043e:	6a 0a                	push   0xa
c0010440:	e8 37 4a 00 00       	call   c0014e7c <sleep(unsigned int)>
c0010445:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	eb e3                	jmp    c0010434 <Krnl::powerThread(void*)+0x11>

c0010451 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010451:	57                   	push   edi
c0010452:	b9 09 00 00 00       	mov    ecx,0x9
c0010457:	bf 60 69 02 c0       	mov    edi,0xc0026960
c001045c:	56                   	push   esi
c001045d:	fc                   	cld    
c001045e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010462:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010464:	5e                   	pop    esi
c0010465:	5f                   	pop    edi
c0010466:	c3                   	ret    

c0010467 <Krnl::userIOReceived()>:
c0010467:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010471:	c3                   	ret    

c0010472 <Krnl::handlePowerButton()>:
c0010472:	83 ec 0c             	sub    esp,0xc
c0010475:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c001047a:	83 f8 02             	cmp    eax,0x2
c001047d:	75 10                	jne    c001048f <Krnl::handlePowerButton()+0x1d>
c001047f:	83 ec 0c             	sub    esp,0xc
c0010482:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010488:	e8 83 6a ff ff       	call   c0006f10 <Computer::shutdown()>
c001048d:	eb 11                	jmp    c00104a0 <Krnl::handlePowerButton()+0x2e>
c001048f:	48                   	dec    eax
c0010490:	75 11                	jne    c00104a3 <Krnl::handlePowerButton()+0x31>
c0010492:	83 ec 0c             	sub    esp,0xc
c0010495:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001049b:	e8 a0 6a ff ff       	call   c0006f40 <Computer::sleep()>
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	83 c4 0c             	add    esp,0xc
c00104a6:	c3                   	ret    

c00104a7 <Krnl::handleSleepButton()>:
c00104a7:	83 ec 0c             	sub    esp,0xc
c00104aa:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c00104af:	83 f8 02             	cmp    eax,0x2
c00104b2:	75 10                	jne    c00104c4 <Krnl::handleSleepButton()+0x1d>
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00104bd:	e8 4e 6a ff ff       	call   c0006f10 <Computer::shutdown()>
c00104c2:	eb 11                	jmp    c00104d5 <Krnl::handleSleepButton()+0x2e>
c00104c4:	48                   	dec    eax
c00104c5:	75 11                	jne    c00104d8 <Krnl::handleSleepButton()+0x31>
c00104c7:	83 ec 0c             	sub    esp,0xc
c00104ca:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00104d0:	e8 6b 6a ff ff       	call   c0006f40 <Computer::sleep()>
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	83 c4 0c             	add    esp,0xc
c00104db:	c3                   	ret    

c00104dc <Krnl::setupPowerManager()>:
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c00104e9:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00104f0:	68 f0 00 00 00       	push   0xf0
c00104f5:	6a 00                	push   0x0
c00104f7:	68 23 04 01 c0       	push   0xc0010423
c00104fc:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010502:	e8 0d 44 00 00       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c0010507:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c0010511:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c001051b:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c0010525:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c001052f:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c0010539:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c0010543:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c001054d:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c0010557:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010561:	83 c4 1c             	add    esp,0x1c
c0010564:	c3                   	ret    

c0010565 <KeRand()>:
c0010565:	69 05 88 69 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0026988,0x2875
c001056f:	69 0d 8c 69 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002698c,0xa2e7b175
c0010579:	01 c1                	add    ecx,eax
c001057b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010580:	f7 25 88 69 02 c0    	mul    DWORD PTR ds:0xc0026988
c0010586:	01 ca                	add    edx,ecx
c0010588:	05 ef 04 b5 00       	add    eax,0xb504ef
c001058d:	83 d2 00             	adc    edx,0x0
c0010590:	53                   	push   ebx
c0010591:	0f b7 da             	movzx  ebx,dx
c0010594:	89 da                	mov    edx,ebx
c0010596:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001059b:	89 1d 8c 69 02 c0    	mov    DWORD PTR ds:0xc002698c,ebx
c00105a1:	5b                   	pop    ebx
c00105a2:	0f ac d0 0e          	shrd   eax,edx,0xe
c00105a6:	c3                   	ret    

c00105a7 <KeSeedRand(unsigned int)>:
c00105a7:	53                   	push   ebx
c00105a8:	83 ec 08             	sub    esp,0x8
c00105ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105af:	e8 1f 67 00 00       	call   c0016cd3 <HalGetRand()>
c00105b4:	31 d8                	xor    eax,ebx
c00105b6:	c7 05 8c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002698c,0x0
c00105c0:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c00105c5:	e8 9b ff ff ff       	call   c0010565 <KeRand()>
c00105ca:	83 c4 08             	add    esp,0x8
c00105cd:	5b                   	pop    ebx
c00105ce:	eb 95                	jmp    c0010565 <KeRand()>

c00105d0 <KeInitRand()>:
c00105d0:	83 ec 0c             	sub    esp,0xc
c00105d3:	e8 00 65 00 00       	call   c0016ad8 <HalQueryPerformanceCounter()>
c00105d8:	0f 20 da             	mov    edx,cr3
c00105db:	0f 22 da             	mov    cr3,edx
c00105de:	0f 20 da             	mov    edx,cr3
c00105e1:	0f 22 da             	mov    cr3,edx
c00105e4:	0f 20 da             	mov    edx,cr3
c00105e7:	0f 22 da             	mov    cr3,edx
c00105ea:	0f 20 da             	mov    edx,cr3
c00105ed:	0f 22 da             	mov    cr3,edx
c00105f0:	83 ec 0c             	sub    esp,0xc
c00105f3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00105f8:	50                   	push   eax
c00105f9:	e8 a9 ff ff ff       	call   c00105a7 <KeSeedRand(unsigned int)>
c00105fe:	83 c4 1c             	add    esp,0x1c
c0010601:	c3                   	ret    
c0010602:	66 90                	xchg   ax,ax

c0010604 <KeResolveCompatibilitySymbol(char*)>:
c0010604:	83 ec 0c             	sub    esp,0xc
c0010607:	83 ec 08             	sub    esp,0x8
c001060a:	68 e4 04 02 c0       	push   0xc00204e4
c001060f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010613:	e8 c8 00 ff ff       	call   c00006e0 <strcmp>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	85 c0                	test   eax,eax
c001061d:	0f 94 c0             	sete   al
c0010620:	84 c0                	test   al,al
c0010622:	74 0c                	je     c0010630 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010624:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c0010629:	e9 62 01 00 00       	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001062e:	66 90                	xchg   ax,ax
c0010630:	83 ec 08             	sub    esp,0x8
c0010633:	68 ed 04 02 c0       	push   0xc00204ed
c0010638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063c:	e8 9f 00 ff ff       	call   c00006e0 <strcmp>
c0010641:	83 c4 10             	add    esp,0x10
c0010644:	85 c0                	test   eax,eax
c0010646:	0f 94 c0             	sete   al
c0010649:	84 c0                	test   al,al
c001064b:	74 0b                	je     c0010658 <KeResolveCompatibilitySymbol(char*)+0x54>
c001064d:	b8 e0 de 01 c0       	mov    eax,0xc001dee0
c0010652:	e9 39 01 00 00       	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010657:	90                   	nop
c0010658:	83 ec 08             	sub    esp,0x8
c001065b:	68 f7 04 02 c0       	push   0xc00204f7
c0010660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010664:	e8 77 00 ff ff       	call   c00006e0 <strcmp>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	85 c0                	test   eax,eax
c001066e:	0f 94 c0             	sete   al
c0010671:	84 c0                	test   al,al
c0010673:	74 0b                	je     c0010680 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010675:	b8 14 dc 01 c0       	mov    eax,0xc001dc14
c001067a:	e9 11 01 00 00       	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001067f:	90                   	nop
c0010680:	83 ec 08             	sub    esp,0x8
c0010683:	68 00 05 02 c0       	push   0xc0020500
c0010688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068c:	e8 4f 00 ff ff       	call   c00006e0 <strcmp>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	85 c0                	test   eax,eax
c0010696:	0f 94 c0             	sete   al
c0010699:	84 c0                	test   al,al
c001069b:	74 0b                	je     c00106a8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001069d:	b8 17 04 01 c0       	mov    eax,0xc0010417
c00106a2:	e9 e9 00 00 00       	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106a7:	90                   	nop
c00106a8:	83 ec 08             	sub    esp,0x8
c00106ab:	68 13 05 02 c0       	push   0xc0020513
c00106b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b4:	e8 27 00 ff ff       	call   c00006e0 <strcmp>
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	85 c0                	test   eax,eax
c00106be:	0f 94 c0             	sete   al
c00106c1:	84 c0                	test   al,al
c00106c3:	74 0b                	je     c00106d0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00106c5:	b8 9f fd 00 c0       	mov    eax,0xc000fd9f
c00106ca:	e9 c1 00 00 00       	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106cf:	90                   	nop
c00106d0:	83 ec 08             	sub    esp,0x8
c00106d3:	68 30 05 02 c0       	push   0xc0020530
c00106d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106dc:	e8 ff ff fe ff       	call   c00006e0 <strcmp>
c00106e1:	83 c4 10             	add    esp,0x10
c00106e4:	85 c0                	test   eax,eax
c00106e6:	0f 94 c0             	sete   al
c00106e9:	84 c0                	test   al,al
c00106eb:	74 0b                	je     c00106f8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00106ed:	b8 e0 df 01 c0       	mov    eax,0xc001dfe0
c00106f2:	e9 99 00 00 00       	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106f7:	90                   	nop
c00106f8:	83 ec 08             	sub    esp,0x8
c00106fb:	68 3a 05 02 c0       	push   0xc002053a
c0010700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010704:	e8 d7 ff fe ff       	call   c00006e0 <strcmp>
c0010709:	83 c4 10             	add    esp,0x10
c001070c:	85 c0                	test   eax,eax
c001070e:	0f 94 c0             	sete   al
c0010711:	84 c0                	test   al,al
c0010713:	74 07                	je     c001071c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010715:	b8 60 dd 01 c0       	mov    eax,0xc001dd60
c001071a:	eb 74                	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001071c:	83 ec 08             	sub    esp,0x8
c001071f:	68 43 05 02 c0       	push   0xc0020543
c0010724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010728:	e8 b3 ff fe ff       	call   c00006e0 <strcmp>
c001072d:	83 c4 10             	add    esp,0x10
c0010730:	85 c0                	test   eax,eax
c0010732:	0f 94 c0             	sete   al
c0010735:	84 c0                	test   al,al
c0010737:	74 07                	je     c0010740 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010739:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001073e:	eb 50                	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010740:	83 ec 08             	sub    esp,0x8
c0010743:	68 5b 05 02 c0       	push   0xc002055b
c0010748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001074c:	e8 8f ff fe ff       	call   c00006e0 <strcmp>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	85 c0                	test   eax,eax
c0010756:	0f 94 c0             	sete   al
c0010759:	84 c0                	test   al,al
c001075b:	74 07                	je     c0010764 <KeResolveCompatibilitySymbol(char*)+0x160>
c001075d:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010762:	eb 2c                	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010764:	83 ec 08             	sub    esp,0x8
c0010767:	68 68 05 02 c0       	push   0xc0020568
c001076c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010770:	e8 6b ff fe ff       	call   c00006e0 <strcmp>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	85 c0                	test   eax,eax
c001077a:	0f 94 c0             	sete   al
c001077d:	84 c0                	test   al,al
c001077f:	74 07                	je     c0010788 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010781:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c0010786:	eb 08                	jmp    c0010790 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010788:	b8 00 00 00 00       	mov    eax,0x0
c001078d:	8d 76 00             	lea    esi,[esi+0x0]
c0010790:	83 c4 0c             	add    esp,0xc
c0010793:	c3                   	ret    

c0010794 <KiSigKill(int)>:
c0010794:	83 ec 0c             	sub    esp,0xc
c0010797:	6a 00                	push   0x0
c0010799:	6a 00                	push   0x0
c001079b:	6a ff                	push   0xffffffff
c001079d:	6a 01                	push   0x1
c001079f:	e8 ae 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00107a4:	83 c4 1c             	add    esp,0x1c
c00107a7:	c3                   	ret    

c00107a8 <KiDefaultSignalHandlerIgnore(int)>:
c00107a8:	c3                   	ret    

c00107a9 <KiDefaultSignalHandlerPause(int)>:
c00107a9:	57                   	push   edi
c00107aa:	b9 07 00 00 00       	mov    ecx,0x7
c00107af:	56                   	push   esi
c00107b0:	be b1 05 02 c0       	mov    esi,0xc00205b1
c00107b5:	83 ec 24             	sub    esp,0x24
c00107b8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00107bc:	fc                   	cld    
c00107bd:	8d 44 24 04          	lea    eax,[esp+0x4]
c00107c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00107c3:	50                   	push   eax
c00107c4:	6a 00                	push   0x0
c00107c6:	6a 00                	push   0x0
c00107c8:	6a 27                	push   0x27
c00107ca:	e8 83 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00107cf:	83 c4 34             	add    esp,0x34
c00107d2:	5e                   	pop    esi
c00107d3:	5f                   	pop    edi
c00107d4:	c3                   	ret    

c00107d5 <KiDefaultSignalHandlerResume(int)>:
c00107d5:	57                   	push   edi
c00107d6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00107db:	56                   	push   esi
c00107dc:	be cd 05 02 c0       	mov    esi,0xc00205cd
c00107e1:	83 ec 24             	sub    esp,0x24
c00107e4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00107e8:	fc                   	cld    
c00107e9:	8d 44 24 03          	lea    eax,[esp+0x3]
c00107ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107ef:	50                   	push   eax
c00107f0:	6a 00                	push   0x0
c00107f2:	6a 00                	push   0x0
c00107f4:	6a 27                	push   0x27
c00107f6:	e8 57 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00107fb:	83 c4 34             	add    esp,0x34
c00107fe:	5e                   	pop    esi
c00107ff:	5f                   	pop    edi
c0010800:	c3                   	ret    

c0010801 <KeDeinitSignals(SigHandlerBlock*)>:
c0010801:	e9 7d 70 ff ff       	jmp    c0007883 <free>

c0010806 <KeInitSignals()>:
c0010806:	53                   	push   ebx
c0010807:	83 ec 14             	sub    esp,0x14
c001080a:	68 c8 00 00 00       	push   0xc8
c001080f:	e8 5f 70 ff ff       	call   c0007873 <malloc>
c0010814:	83 c4 0c             	add    esp,0xc
c0010817:	89 c3                	mov    ebx,eax
c0010819:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010823:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001082d:	6a 20                	push   0x20
c001082f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010835:	6a 00                	push   0x0
c0010837:	50                   	push   eax
c0010838:	e8 83 fc fe ff       	call   c00004c0 <memset>
c001083d:	83 c4 0c             	add    esp,0xc
c0010840:	6a 44                	push   0x44
c0010842:	6a 00                	push   0x0
c0010844:	53                   	push   ebx
c0010845:	e8 76 fc fe ff       	call   c00004c0 <memset>
c001084a:	83 c4 18             	add    esp,0x18
c001084d:	89 d8                	mov    eax,ebx
c001084f:	5b                   	pop    ebx
c0010850:	c3                   	ret    

c0010851 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010851:	53                   	push   ebx
c0010852:	b8 01 00 00 00       	mov    eax,0x1
c0010857:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001085b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085f:	83 f9 10             	cmp    ecx,0x10
c0010862:	7f 21                	jg     c0010885 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010864:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086b:	89 03                	mov    DWORD PTR [ebx],eax
c001086d:	b8 01 00 00 00       	mov    eax,0x1
c0010872:	d3 e0                	shl    eax,cl
c0010874:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010878:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001087b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010883:	31 c0                	xor    eax,eax
c0010885:	5b                   	pop    ebx
c0010886:	c3                   	ret    

c0010887 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010887:	55                   	push   ebp
c0010888:	57                   	push   edi
c0010889:	bf 08 00 00 00       	mov    edi,0x8
c001088e:	56                   	push   esi
c001088f:	53                   	push   ebx
c0010890:	83 ec 18             	sub    esp,0x18
c0010893:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010897:	68 ea 05 02 c0       	push   0xc00205ea
c001089c:	e8 c2 9d ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00108a1:	83 c4 10             	add    esp,0x10
c00108a4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108ab:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00108b1:	31 c9                	xor    ecx,ecx
c00108b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00108b7:	99                   	cdq    
c00108b8:	f7 ff                	idiv   edi
c00108ba:	8d 42 24             	lea    eax,[edx+0x24]
c00108bd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00108c1:	85 f6                	test   esi,esi
c00108c3:	75 1a                	jne    c00108df <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00108c5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00108c9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00108cd:	50                   	push   eax
c00108ce:	50                   	push   eax
c00108cf:	52                   	push   edx
c00108d0:	68 fb 05 02 c0       	push   0xc00205fb
c00108d5:	e8 89 9d ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	eb 1b                	jmp    c00108fa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00108df:	41                   	inc    ecx
c00108e0:	83 f9 08             	cmp    ecx,0x8
c00108e3:	75 ce                	jne    c00108b3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00108e5:	83 ec 0c             	sub    esp,0xc
c00108e8:	be 01 00 00 00       	mov    esi,0x1
c00108ed:	68 1c 06 02 c0       	push   0xc002061c
c00108f2:	e8 6c 9d ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	83 c4 0c             	add    esp,0xc
c00108fd:	89 f0                	mov    eax,esi
c00108ff:	5b                   	pop    ebx
c0010900:	5e                   	pop    esi
c0010901:	5f                   	pop    edi
c0010902:	5d                   	pop    ebp
c0010903:	c3                   	ret    

c0010904 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010904:	55                   	push   ebp
c0010905:	57                   	push   edi
c0010906:	56                   	push   esi
c0010907:	53                   	push   ebx
c0010908:	51                   	push   ecx
c0010909:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001090d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010914:	0f 84 af 00 00 00    	je     c00109c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001091a:	31 c9                	xor    ecx,ecx
c001091c:	bf 08 00 00 00       	mov    edi,0x8
c0010921:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010927:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001092a:	99                   	cdq    
c001092b:	f7 ff                	idiv   edi
c001092d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010934:	85 ed                	test   ebp,ebp
c0010936:	0f 84 9e 00 00 00    	je     c00109da <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001093c:	89 e9                	mov    ecx,ebp
c001093e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010944:	bf 01 00 00 00       	mov    edi,0x1
c0010949:	89 04 24             	mov    DWORD PTR [esp],eax
c001094c:	d3 e7                	shl    edi,cl
c001094e:	31 c9                	xor    ecx,ecx
c0010950:	b8 01 00 00 00       	mov    eax,0x1
c0010955:	d3 e0                	shl    eax,cl
c0010957:	85 04 24             	test   DWORD PTR [esp],eax
c001095a:	74 06                	je     c0010962 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c001095c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010960:	75 67                	jne    c00109c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010962:	41                   	inc    ecx
c0010963:	83 f9 11             	cmp    ecx,0x11
c0010966:	75 e8                	jne    c0010950 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001096b:	46                   	inc    esi
c001096c:	09 f8                	or     eax,edi
c001096e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010974:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001097f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010985:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001098c:	31 c0                	xor    eax,eax
c001098e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010996:	74 09                	je     c00109a1 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010998:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001099f:	eb 06                	jmp    c00109a7 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c00109a1:	40                   	inc    eax
c00109a2:	83 f8 08             	cmp    eax,0x8
c00109a5:	75 e7                	jne    c001098e <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c00109a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00109ab:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00109ae:	83 fd 09             	cmp    ebp,0x9
c00109b1:	89 2a                	mov    DWORD PTR [edx],ebp
c00109b3:	75 07                	jne    c00109bc <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c00109b5:	b8 94 07 01 c0       	mov    eax,0xc0010794
c00109ba:	eb 31                	jmp    c00109ed <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109bc:	83 f8 01             	cmp    eax,0x1
c00109bf:	75 0c                	jne    c00109cd <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c00109c1:	f7 d7                	not    edi
c00109c3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00109c9:	31 c0                	xor    eax,eax
c00109cb:	eb 20                	jmp    c00109ed <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109cd:	85 c0                	test   eax,eax
c00109cf:	75 1c                	jne    c00109ed <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109d1:	8b 04 ad c0 19 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffde640]
c00109d8:	eb 13                	jmp    c00109ed <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109da:	46                   	inc    esi
c00109db:	41                   	inc    ecx
c00109dc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00109e2:	83 f9 08             	cmp    ecx,0x8
c00109e5:	0f 85 36 ff ff ff    	jne    c0010921 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00109eb:	eb dc                	jmp    c00109c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c00109ed:	5a                   	pop    edx
c00109ee:	5b                   	pop    ebx
c00109ef:	5e                   	pop    esi
c00109f0:	5f                   	pop    edi
c00109f1:	5d                   	pop    ebp
c00109f2:	c3                   	ret    

c00109f3 <KiCheckSignalZ>:
c00109f3:	83 ec 10             	sub    esp,0x10
c00109f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00109fa:	50                   	push   eax
c00109fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a03:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010a09:	e8 f6 fe ff ff       	call   c0010904 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010a0e:	5a                   	pop    edx
c0010a0f:	31 d2                	xor    edx,edx
c0010a11:	59                   	pop    ecx
c0010a12:	85 c0                	test   eax,eax
c0010a14:	74 19                	je     c0010a2f <KiCheckSignalZ+0x3c>
c0010a16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a1c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010a1f:	89 02                	mov    DWORD PTR [edx],eax
c0010a21:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010a28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a2c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010a2f:	89 d0                	mov    eax,edx
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	c3                   	ret    

c0010a35 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010a35:	56                   	push   esi
c0010a36:	53                   	push   ebx
c0010a37:	bb 01 00 00 00       	mov    ebx,0x1
c0010a3c:	52                   	push   edx
c0010a3d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a45:	d3 e3                	shl    ebx,cl
c0010a47:	83 f9 10             	cmp    ecx,0x10
c0010a4a:	7f 08                	jg     c0010a54 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010a4c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010a52:	75 10                	jne    c0010a64 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010a54:	83 ec 0c             	sub    esp,0xc
c0010a57:	68 2d 06 02 c0       	push   0xc002062d
c0010a5c:	e8 b6 f9 ff ff       	call   c0010417 <KePanic(char const*)>
c0010a61:	83 c4 10             	add    esp,0x10
c0010a64:	f7 d3                	not    ebx
c0010a66:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010a6c:	58                   	pop    eax
c0010a6d:	5b                   	pop    ebx
c0010a6e:	5e                   	pop    esi
c0010a6f:	c3                   	ret    

c0010a70 <KiFinishSignalZ>:
c0010a70:	53                   	push   ebx
c0010a71:	83 ec 10             	sub    esp,0x10
c0010a74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a78:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a83:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010a89:	e8 a7 ff ff ff       	call   c0010a35 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010a8e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010a94:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010a9b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010aa2:	83 c4 18             	add    esp,0x18
c0010aa5:	5b                   	pop    ebx
c0010aa6:	c3                   	ret    

c0010aa7 <SysSeekDir(regs*)>:
c0010aa7:	31 c0                	xor    eax,eax
c0010aa9:	31 d2                	xor    edx,edx
c0010aab:	c3                   	ret    

c0010aac <SysTellDir(regs*)>:
c0010aac:	31 c0                	xor    eax,eax
c0010aae:	31 d2                	xor    edx,edx
c0010ab0:	c3                   	ret    

c0010ab1 <SysVerify(regs*)>:
c0010ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab5:	31 d2                	xor    edx,edx
c0010ab7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010aba:	c3                   	ret    

c0010abb <SysGetArgc(regs*)>:
c0010abb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ac0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ac3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ac9:	89 c2                	mov    edx,eax
c0010acb:	c1 fa 1f             	sar    edx,0x1f
c0010ace:	c3                   	ret    

c0010acf <SysTTYName(regs*)>:
c0010acf:	b8 01 00 00 00       	mov    eax,0x1
c0010ad4:	31 d2                	xor    edx,edx
c0010ad6:	c3                   	ret    

c0010ad7 <SysFormatDisk(regs*)>:
c0010ad7:	56                   	push   esi
c0010ad8:	53                   	push   ebx
c0010ad9:	50                   	push   eax
c0010ada:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ade:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c0010ae4:	eb 2a                	jmp    c0010b10 <SysFormatDisk(regs*)+0x39>
c0010ae6:	83 ec 0c             	sub    esp,0xc
c0010ae9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010aec:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010aef:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010af1:	51                   	push   ecx
c0010af2:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010af5:	51                   	push   ecx
c0010af6:	50                   	push   eax
c0010af7:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010afe:	50                   	push   eax
c0010aff:	53                   	push   ebx
c0010b00:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010b03:	83 c4 20             	add    esp,0x20
c0010b06:	89 c1                	mov    ecx,eax
c0010b08:	83 f8 08             	cmp    eax,0x8
c0010b0b:	75 12                	jne    c0010b1f <SysFormatDisk(regs*)+0x48>
c0010b0d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010b10:	85 db                	test   ebx,ebx
c0010b12:	75 d2                	jne    c0010ae6 <SysFormatDisk(regs*)+0xf>
c0010b14:	b8 03 00 00 00       	mov    eax,0x3
c0010b19:	31 d2                	xor    edx,edx
c0010b1b:	59                   	pop    ecx
c0010b1c:	5b                   	pop    ebx
c0010b1d:	5e                   	pop    esi
c0010b1e:	c3                   	ret    
c0010b1f:	85 c0                	test   eax,eax
c0010b21:	74 13                	je     c0010b36 <SysFormatDisk(regs*)+0x5f>
c0010b23:	31 d2                	xor    edx,edx
c0010b25:	b8 01 00 00 00       	mov    eax,0x1
c0010b2a:	83 f9 09             	cmp    ecx,0x9
c0010b2d:	74 ec                	je     c0010b1b <SysFormatDisk(regs*)+0x44>
c0010b2f:	b8 02 00 00 00       	mov    eax,0x2
c0010b34:	eb e3                	jmp    c0010b19 <SysFormatDisk(regs*)+0x42>
c0010b36:	31 c0                	xor    eax,eax
c0010b38:	eb df                	jmp    c0010b19 <SysFormatDisk(regs*)+0x42>

c0010b3a <SysSetDiskVolumeLabel(regs*)>:
c0010b3a:	56                   	push   esi
c0010b3b:	53                   	push   ebx
c0010b3c:	53                   	push   ebx
c0010b3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b41:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b44:	83 f8 19             	cmp    eax,0x19
c0010b47:	77 31                	ja     c0010b7a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b49:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010b50:	85 c9                	test   ecx,ecx
c0010b52:	74 26                	je     c0010b7a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b54:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010b57:	85 db                	test   ebx,ebx
c0010b59:	74 1f                	je     c0010b7a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b5b:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010b61:	85 d2                	test   edx,edx
c0010b63:	74 15                	je     c0010b7a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b65:	8b 32                	mov    esi,DWORD PTR [edx]
c0010b67:	53                   	push   ebx
c0010b68:	50                   	push   eax
c0010b69:	51                   	push   ecx
c0010b6a:	52                   	push   edx
c0010b6b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	89 c2                	mov    edx,eax
c0010b73:	c1 fa 1f             	sar    edx,0x1f
c0010b76:	59                   	pop    ecx
c0010b77:	5b                   	pop    ebx
c0010b78:	5e                   	pop    esi
c0010b79:	c3                   	ret    
c0010b7a:	59                   	pop    ecx
c0010b7b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b80:	5b                   	pop    ebx
c0010b81:	83 ca ff             	or     edx,0xffffffff
c0010b84:	5e                   	pop    esi
c0010b85:	c3                   	ret    

c0010b86 <SysGetDiskVolumeLabel(regs*)>:
c0010b86:	57                   	push   edi
c0010b87:	56                   	push   esi
c0010b88:	53                   	push   ebx
c0010b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010b90:	83 fa 19             	cmp    edx,0x19
c0010b93:	77 3c                	ja     c0010bd1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b95:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010b9c:	85 c9                	test   ecx,ecx
c0010b9e:	74 31                	je     c0010bd1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ba0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010ba3:	85 db                	test   ebx,ebx
c0010ba5:	74 2a                	je     c0010bd1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ba7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010baa:	85 f6                	test   esi,esi
c0010bac:	74 23                	je     c0010bd1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010bae:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 19                	je     c0010bd1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	8b 38                	mov    edi,DWORD PTR [eax]
c0010bbd:	56                   	push   esi
c0010bbe:	53                   	push   ebx
c0010bbf:	52                   	push   edx
c0010bc0:	51                   	push   ecx
c0010bc1:	50                   	push   eax
c0010bc2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010bc5:	83 c4 20             	add    esp,0x20
c0010bc8:	89 c2                	mov    edx,eax
c0010bca:	c1 fa 1f             	sar    edx,0x1f
c0010bcd:	5b                   	pop    ebx
c0010bce:	5e                   	pop    esi
c0010bcf:	5f                   	pop    edi
c0010bd0:	c3                   	ret    
c0010bd1:	5b                   	pop    ebx
c0010bd2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010bd7:	5e                   	pop    esi
c0010bd8:	83 ca ff             	or     edx,0xffffffff
c0010bdb:	5f                   	pop    edi
c0010bdc:	c3                   	ret    

c0010bdd <SysShutdown(regs*)>:
c0010bdd:	57                   	push   edi
c0010bde:	56                   	push   esi
c0010bdf:	56                   	push   esi
c0010be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010be7:	85 c0                	test   eax,eax
c0010be9:	74 18                	je     c0010c03 <SysShutdown(regs*)+0x26>
c0010beb:	83 f8 01             	cmp    eax,0x1
c0010bee:	74 51                	je     c0010c41 <SysShutdown(regs*)+0x64>
c0010bf0:	83 ce ff             	or     esi,0xffffffff
c0010bf3:	83 cf ff             	or     edi,0xffffffff
c0010bf6:	83 f8 02             	cmp    eax,0x2
c0010bf9:	74 2a                	je     c0010c25 <SysShutdown(regs*)+0x48>
c0010bfb:	59                   	pop    ecx
c0010bfc:	89 f0                	mov    eax,esi
c0010bfe:	5e                   	pop    esi
c0010bff:	89 fa                	mov    edx,edi
c0010c01:	5f                   	pop    edi
c0010c02:	c3                   	ret    
c0010c03:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010c08:	83 ce ff             	or     esi,0xffffffff
c0010c0b:	83 cf ff             	or     edi,0xffffffff
c0010c0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c10:	6a 00                	push   0x0
c0010c12:	6a 00                	push   0x0
c0010c14:	6a 00                	push   0x0
c0010c16:	50                   	push   eax
c0010c17:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	89 f0                	mov    eax,esi
c0010c1f:	89 fa                	mov    edx,edi
c0010c21:	59                   	pop    ecx
c0010c22:	5e                   	pop    esi
c0010c23:	5f                   	pop    edi
c0010c24:	c3                   	ret    
c0010c25:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010c2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c2c:	6a 00                	push   0x0
c0010c2e:	6a 00                	push   0x0
c0010c30:	6a 01                	push   0x1
c0010c32:	50                   	push   eax
c0010c33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010c36:	83 c4 10             	add    esp,0x10
c0010c39:	89 f0                	mov    eax,esi
c0010c3b:	89 fa                	mov    edx,edi
c0010c3d:	59                   	pop    ecx
c0010c3e:	5e                   	pop    esi
c0010c3f:	5f                   	pop    edi
c0010c40:	c3                   	ret    
c0010c41:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010c46:	85 c0                	test   eax,eax
c0010c48:	74 02                	je     c0010c4c <SysShutdown(regs*)+0x6f>
c0010c4a:	ff d0                	call   eax
c0010c4c:	31 f6                	xor    esi,esi
c0010c4e:	59                   	pop    ecx
c0010c4f:	31 ff                	xor    edi,edi
c0010c51:	89 f0                	mov    eax,esi
c0010c53:	5e                   	pop    esi
c0010c54:	89 fa                	mov    edx,edi
c0010c56:	5f                   	pop    edi
c0010c57:	c3                   	ret    

c0010c58 <SysRealpath(regs*)>:
c0010c58:	53                   	push   ebx
c0010c59:	83 ec 08             	sub    esp,0x8
c0010c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c60:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010c63:	85 c9                	test   ecx,ecx
c0010c65:	74 35                	je     c0010c9c <SysRealpath(regs*)+0x44>
c0010c67:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010c6a:	31 d2                	xor    edx,edx
c0010c6c:	b8 01 00 00 00       	mov    eax,0x1
c0010c71:	85 db                	test   ebx,ebx
c0010c73:	75 05                	jne    c0010c7a <SysRealpath(regs*)+0x22>
c0010c75:	83 c4 08             	add    esp,0x8
c0010c78:	5b                   	pop    ebx
c0010c79:	c3                   	ret    
c0010c7a:	50                   	push   eax
c0010c7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c83:	05 0c 01 00 00       	add    eax,0x10c
c0010c88:	50                   	push   eax
c0010c89:	51                   	push   ecx
c0010c8a:	53                   	push   ebx
c0010c8b:	e8 9e 9d ff ff       	call   c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	31 c0                	xor    eax,eax
c0010c95:	31 d2                	xor    edx,edx
c0010c97:	83 c4 08             	add    esp,0x8
c0010c9a:	5b                   	pop    ebx
c0010c9b:	c3                   	ret    
c0010c9c:	b8 01 00 00 00       	mov    eax,0x1
c0010ca1:	31 d2                	xor    edx,edx
c0010ca3:	eb f2                	jmp    c0010c97 <SysRealpath(regs*)+0x3f>

c0010ca5 <SysReadDir(regs*)>:
c0010ca5:	53                   	push   ebx
c0010ca6:	83 ec 18             	sub    esp,0x18
c0010ca9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010cad:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010cb0:	83 f8 02             	cmp    eax,0x2
c0010cb3:	76 4f                	jbe    c0010d04 <SysReadDir(regs*)+0x5f>
c0010cb5:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010cbc:	77 52                	ja     c0010d10 <SysReadDir(regs*)+0x6b>
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	50                   	push   eax
c0010cc2:	e8 50 85 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0010cc7:	83 c4 10             	add    esp,0x10
c0010cca:	85 c0                	test   eax,eax
c0010ccc:	74 42                	je     c0010d10 <SysReadDir(regs*)+0x6b>
c0010cce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010cd6:	83 ec 0c             	sub    esp,0xc
c0010cd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cdb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010cdf:	51                   	push   ecx
c0010ce0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ce3:	51                   	push   ecx
c0010ce4:	6a 00                	push   0x0
c0010ce6:	68 10 01 00 00       	push   0x110
c0010ceb:	50                   	push   eax
c0010cec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010cef:	83 c4 20             	add    esp,0x20
c0010cf2:	89 c1                	mov    ecx,eax
c0010cf4:	85 c0                	test   eax,eax
c0010cf6:	74 23                	je     c0010d1b <SysReadDir(regs*)+0x76>
c0010cf8:	31 d2                	xor    edx,edx
c0010cfa:	b8 02 00 00 00       	mov    eax,0x2
c0010cff:	83 f9 07             	cmp    ecx,0x7
c0010d02:	75 12                	jne    c0010d16 <SysReadDir(regs*)+0x71>
c0010d04:	b8 01 00 00 00       	mov    eax,0x1
c0010d09:	31 d2                	xor    edx,edx
c0010d0b:	83 c4 18             	add    esp,0x18
c0010d0e:	5b                   	pop    ebx
c0010d0f:	c3                   	ret    
c0010d10:	83 c8 ff             	or     eax,0xffffffff
c0010d13:	83 ca ff             	or     edx,0xffffffff
c0010d16:	83 c4 18             	add    esp,0x18
c0010d19:	5b                   	pop    ebx
c0010d1a:	c3                   	ret    
c0010d1b:	31 c0                	xor    eax,eax
c0010d1d:	31 d2                	xor    edx,edx
c0010d1f:	eb ea                	jmp    c0010d0b <SysReadDir(regs*)+0x66>

c0010d21 <SysIsATTY(regs*)>:
c0010d21:	83 ec 0c             	sub    esp,0xc
c0010d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d2b:	83 f8 02             	cmp    eax,0x2
c0010d2e:	76 07                	jbe    c0010d37 <SysIsATTY(regs*)+0x16>
c0010d30:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d35:	75 28                	jne    c0010d5f <SysIsATTY(regs*)+0x3e>
c0010d37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010d45:	85 c0                	test   eax,eax
c0010d47:	74 26                	je     c0010d6f <SysIsATTY(regs*)+0x4e>
c0010d49:	83 ec 0c             	sub    esp,0xc
c0010d4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d4e:	50                   	push   eax
c0010d4f:	ff 12                	call   DWORD PTR [edx]
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	25 ff 00 00 00       	and    eax,0xff
c0010d59:	31 d2                	xor    edx,edx
c0010d5b:	83 c4 0c             	add    esp,0xc
c0010d5e:	c3                   	ret    
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	50                   	push   eax
c0010d63:	e8 af 84 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0010d68:	83 c4 10             	add    esp,0x10
c0010d6b:	85 c0                	test   eax,eax
c0010d6d:	75 da                	jne    c0010d49 <SysIsATTY(regs*)+0x28>
c0010d6f:	83 c8 ff             	or     eax,0xffffffff
c0010d72:	83 ca ff             	or     edx,0xffffffff
c0010d75:	83 c4 0c             	add    esp,0xc
c0010d78:	c3                   	ret    

c0010d79 <SysSeek(regs*)>:
c0010d79:	56                   	push   esi
c0010d7a:	53                   	push   ebx
c0010d7b:	53                   	push   ebx
c0010d7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d80:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010d83:	8d 71 fd             	lea    esi,[ecx-0x3]
c0010d86:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0010d8c:	77 33                	ja     c0010dc1 <SysSeek(regs*)+0x48>
c0010d8e:	83 ec 0c             	sub    esp,0xc
c0010d91:	51                   	push   ecx
c0010d92:	e8 80 84 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0010d97:	83 c4 0c             	add    esp,0xc
c0010d9a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010d9d:	31 db                	xor    ebx,ebx
c0010d9f:	53                   	push   ebx
c0010da0:	51                   	push   ecx
c0010da1:	50                   	push   eax
c0010da2:	e8 af 9f ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	85 c0                	test   eax,eax
c0010dac:	0f 95 c0             	setne  al
c0010daf:	25 ff 00 00 00       	and    eax,0xff
c0010db4:	31 d2                	xor    edx,edx
c0010db6:	59                   	pop    ecx
c0010db7:	f7 d8                	neg    eax
c0010db9:	83 d2 00             	adc    edx,0x0
c0010dbc:	5b                   	pop    ebx
c0010dbd:	f7 da                	neg    edx
c0010dbf:	5e                   	pop    esi
c0010dc0:	c3                   	ret    
c0010dc1:	59                   	pop    ecx
c0010dc2:	83 c8 ff             	or     eax,0xffffffff
c0010dc5:	5b                   	pop    ebx
c0010dc6:	83 ca ff             	or     edx,0xffffffff
c0010dc9:	5e                   	pop    esi
c0010dca:	c3                   	ret    

c0010dcb <SysTell(regs*)>:
c0010dcb:	53                   	push   ebx
c0010dcc:	83 ec 08             	sub    esp,0x8
c0010dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dd6:	83 f8 02             	cmp    eax,0x2
c0010dd9:	76 50                	jbe    c0010e2b <SysTell(regs*)+0x60>
c0010ddb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010de0:	76 19                	jbe    c0010dfb <SysTell(regs*)+0x30>
c0010de2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010de5:	31 d2                	xor    edx,edx
c0010de7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ded:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010df4:	83 c4 08             	add    esp,0x8
c0010df7:	31 c0                	xor    eax,eax
c0010df9:	5b                   	pop    ebx
c0010dfa:	c3                   	ret    
c0010dfb:	83 ec 0c             	sub    esp,0xc
c0010dfe:	50                   	push   eax
c0010dff:	e8 13 84 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0010e04:	5a                   	pop    edx
c0010e05:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010e08:	59                   	pop    ecx
c0010e09:	53                   	push   ebx
c0010e0a:	50                   	push   eax
c0010e0b:	e8 9c 9f ff ff       	call   c000adac <File::tell(unsigned long long*)>
c0010e10:	83 c4 10             	add    esp,0x10
c0010e13:	85 c0                	test   eax,eax
c0010e15:	0f 95 c0             	setne  al
c0010e18:	25 ff 00 00 00       	and    eax,0xff
c0010e1d:	31 d2                	xor    edx,edx
c0010e1f:	f7 d8                	neg    eax
c0010e21:	83 d2 00             	adc    edx,0x0
c0010e24:	83 c4 08             	add    esp,0x8
c0010e27:	f7 da                	neg    edx
c0010e29:	5b                   	pop    ebx
c0010e2a:	c3                   	ret    
c0010e2b:	83 c4 08             	add    esp,0x8
c0010e2e:	83 c8 ff             	or     eax,0xffffffff
c0010e31:	83 ca ff             	or     edx,0xffffffff
c0010e34:	5b                   	pop    ebx
c0010e35:	c3                   	ret    

c0010e36 <SysSize(regs*)>:
c0010e36:	53                   	push   ebx
c0010e37:	83 ec 18             	sub    esp,0x18
c0010e3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010e3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e41:	83 f8 02             	cmp    eax,0x2
c0010e44:	76 56                	jbe    c0010e9c <SysSize(regs*)+0x66>
c0010e46:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e4b:	76 19                	jbe    c0010e66 <SysSize(regs*)+0x30>
c0010e4d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010e50:	31 d2                	xor    edx,edx
c0010e52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e5f:	83 c4 18             	add    esp,0x18
c0010e62:	31 c0                	xor    eax,eax
c0010e64:	5b                   	pop    ebx
c0010e65:	c3                   	ret    
c0010e66:	83 ec 0c             	sub    esp,0xc
c0010e69:	50                   	push   eax
c0010e6a:	e8 a8 83 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0010e6f:	83 c4 0c             	add    esp,0xc
c0010e72:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010e76:	52                   	push   edx
c0010e77:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010e7a:	52                   	push   edx
c0010e7b:	50                   	push   eax
c0010e7c:	e8 c3 a0 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c0010e81:	83 c4 10             	add    esp,0x10
c0010e84:	85 c0                	test   eax,eax
c0010e86:	0f 95 c0             	setne  al
c0010e89:	25 ff 00 00 00       	and    eax,0xff
c0010e8e:	31 d2                	xor    edx,edx
c0010e90:	f7 d8                	neg    eax
c0010e92:	83 d2 00             	adc    edx,0x0
c0010e95:	83 c4 18             	add    esp,0x18
c0010e98:	f7 da                	neg    edx
c0010e9a:	5b                   	pop    ebx
c0010e9b:	c3                   	ret    
c0010e9c:	83 c4 18             	add    esp,0x18
c0010e9f:	83 c8 ff             	or     eax,0xffffffff
c0010ea2:	83 ca ff             	or     edx,0xffffffff
c0010ea5:	5b                   	pop    ebx
c0010ea6:	c3                   	ret    

c0010ea7 <SysSizeFromFilename(regs*)>:
c0010ea7:	57                   	push   edi
c0010ea8:	56                   	push   esi
c0010ea9:	53                   	push   ebx
c0010eaa:	83 ec 20             	sub    esp,0x20
c0010ead:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010eb1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010eb4:	83 fb 02             	cmp    ebx,0x2
c0010eb7:	0f 86 8c 00 00 00    	jbe    c0010f49 <SysSizeFromFilename(regs*)+0xa2>
c0010ebd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010ec3:	76 1b                	jbe    c0010ee0 <SysSizeFromFilename(regs*)+0x39>
c0010ec5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010ec8:	31 d2                	xor    edx,edx
c0010eca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ed0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ed7:	83 c4 20             	add    esp,0x20
c0010eda:	31 c0                	xor    eax,eax
c0010edc:	5b                   	pop    ebx
c0010edd:	5e                   	pop    esi
c0010ede:	5f                   	pop    edi
c0010edf:	c3                   	ret    
c0010ee0:	83 ec 0c             	sub    esp,0xc
c0010ee3:	68 14 01 00 00       	push   0x114
c0010ee8:	e8 86 69 ff ff       	call   c0007873 <malloc>
c0010eed:	89 c7                	mov    edi,eax
c0010eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef4:	83 c4 0c             	add    esp,0xc
c0010ef7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010efa:	50                   	push   eax
c0010efb:	53                   	push   ebx
c0010efc:	57                   	push   edi
c0010efd:	e8 d6 9c ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0010f02:	83 c4 0c             	add    esp,0xc
c0010f05:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010f09:	50                   	push   eax
c0010f0a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010f0d:	52                   	push   edx
c0010f0e:	57                   	push   edi
c0010f0f:	e8 30 a0 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	85 ff                	test   edi,edi
c0010f19:	74 14                	je     c0010f2f <SysSizeFromFilename(regs*)+0x88>
c0010f1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f1f:	83 ec 0c             	sub    esp,0xc
c0010f22:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f24:	57                   	push   edi
c0010f25:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f2f:	85 c0                	test   eax,eax
c0010f31:	0f 95 c0             	setne  al
c0010f34:	25 ff 00 00 00       	and    eax,0xff
c0010f39:	31 d2                	xor    edx,edx
c0010f3b:	f7 d8                	neg    eax
c0010f3d:	83 d2 00             	adc    edx,0x0
c0010f40:	83 c4 20             	add    esp,0x20
c0010f43:	f7 da                	neg    edx
c0010f45:	5b                   	pop    ebx
c0010f46:	5e                   	pop    esi
c0010f47:	5f                   	pop    edi
c0010f48:	c3                   	ret    
c0010f49:	83 c4 20             	add    esp,0x20
c0010f4c:	83 c8 ff             	or     eax,0xffffffff
c0010f4f:	83 ca ff             	or     edx,0xffffffff
c0010f52:	5b                   	pop    ebx
c0010f53:	5e                   	pop    esi
c0010f54:	5f                   	pop    edi
c0010f55:	c3                   	ret    

c0010f56 <SysClose(regs*)>:
c0010f56:	53                   	push   ebx
c0010f57:	83 ec 08             	sub    esp,0x8
c0010f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f61:	83 f8 02             	cmp    eax,0x2
c0010f64:	76 41                	jbe    c0010fa7 <SysClose(regs*)+0x51>
c0010f66:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010f6c:	83 fa 01             	cmp    edx,0x1
c0010f6f:	76 2d                	jbe    c0010f9e <SysClose(regs*)+0x48>
c0010f71:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010f76:	77 2f                	ja     c0010fa7 <SysClose(regs*)+0x51>
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	50                   	push   eax
c0010f7c:	e8 96 82 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0010f81:	89 c3                	mov    ebx,eax
c0010f83:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f86:	e8 6b 9d ff ff       	call   c000acf6 <File::close()>
c0010f8b:	83 c4 10             	add    esp,0x10
c0010f8e:	85 db                	test   ebx,ebx
c0010f90:	74 0c                	je     c0010f9e <SysClose(regs*)+0x48>
c0010f92:	83 ec 0c             	sub    esp,0xc
c0010f95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f97:	53                   	push   ebx
c0010f98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f9b:	83 c4 10             	add    esp,0x10
c0010f9e:	83 c4 08             	add    esp,0x8
c0010fa1:	31 c0                	xor    eax,eax
c0010fa3:	31 d2                	xor    edx,edx
c0010fa5:	5b                   	pop    ebx
c0010fa6:	c3                   	ret    
c0010fa7:	83 c4 08             	add    esp,0x8
c0010faa:	83 c8 ff             	or     eax,0xffffffff
c0010fad:	83 ca ff             	or     edx,0xffffffff
c0010fb0:	5b                   	pop    ebx
c0010fb1:	c3                   	ret    

c0010fb2 <SysOpenDir(regs*)>:
c0010fb2:	56                   	push   esi
c0010fb3:	53                   	push   ebx
c0010fb4:	50                   	push   eax
c0010fb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fb9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fbc:	85 c0                	test   eax,eax
c0010fbe:	74 5b                	je     c001101b <SysOpenDir(regs*)+0x69>
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	68 14 01 00 00       	push   0x114
c0010fc8:	e8 a6 68 ff ff       	call   c0007873 <malloc>
c0010fcd:	89 c6                	mov    esi,eax
c0010fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd4:	83 c4 0c             	add    esp,0xc
c0010fd7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fda:	50                   	push   eax
c0010fdb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fde:	50                   	push   eax
c0010fdf:	56                   	push   esi
c0010fe0:	e8 1d a1 ff ff       	call   c000b102 <Directory::Directory(char const*, Process*)>
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	85 f6                	test   esi,esi
c0010fea:	74 2f                	je     c001101b <SysOpenDir(regs*)+0x69>
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	56                   	push   esi
c0010ff0:	e8 cd a1 ff ff       	call   c000b1c2 <Directory::open()>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	85 c0                	test   eax,eax
c0010ffa:	75 1f                	jne    c001101b <SysOpenDir(regs*)+0x69>
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	56                   	push   esi
c0011000:	e8 1d 7f ff ff       	call   c0008f22 <UnixFile::getFileDescriptor()>
c0011005:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011008:	83 c4 10             	add    esp,0x10
c001100b:	89 02                	mov    DWORD PTR [edx],eax
c001100d:	c1 f8 1f             	sar    eax,0x1f
c0011010:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011013:	31 c0                	xor    eax,eax
c0011015:	59                   	pop    ecx
c0011016:	31 d2                	xor    edx,edx
c0011018:	5b                   	pop    ebx
c0011019:	5e                   	pop    esi
c001101a:	c3                   	ret    
c001101b:	59                   	pop    ecx
c001101c:	83 c8 ff             	or     eax,0xffffffff
c001101f:	5b                   	pop    ebx
c0011020:	83 ca ff             	or     edx,0xffffffff
c0011023:	5e                   	pop    esi
c0011024:	c3                   	ret    

c0011025 <SysMakeDir(regs*)>:
c0011025:	56                   	push   esi
c0011026:	53                   	push   ebx
c0011027:	83 ec 10             	sub    esp,0x10
c001102a:	68 14 01 00 00       	push   0x114
c001102f:	e8 3f 68 ff ff       	call   c0007873 <malloc>
c0011034:	89 c3                	mov    ebx,eax
c0011036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001103b:	83 c4 0c             	add    esp,0xc
c001103e:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0011041:	56                   	push   esi
c0011042:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011046:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011049:	50                   	push   eax
c001104a:	53                   	push   ebx
c001104b:	e8 b2 a0 ff ff       	call   c000b102 <Directory::Directory(char const*, Process*)>
c0011050:	83 c4 10             	add    esp,0x10
c0011053:	85 db                	test   ebx,ebx
c0011055:	74 2a                	je     c0011081 <SysMakeDir(regs*)+0x5c>
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	53                   	push   ebx
c001105b:	e8 42 a3 ff ff       	call   c000b3a2 <Directory::create()>
c0011060:	89 c6                	mov    esi,eax
c0011062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011067:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001106a:	83 c4 10             	add    esp,0x10
c001106d:	31 c0                	xor    eax,eax
c001106f:	85 f6                	test   esi,esi
c0011071:	0f 95 c0             	setne  al
c0011074:	59                   	pop    ecx
c0011075:	31 d2                	xor    edx,edx
c0011077:	f7 d8                	neg    eax
c0011079:	83 d2 00             	adc    edx,0x0
c001107c:	5b                   	pop    ebx
c001107d:	f7 da                	neg    edx
c001107f:	5e                   	pop    esi
c0011080:	c3                   	ret    
c0011081:	59                   	pop    ecx
c0011082:	83 c8 ff             	or     eax,0xffffffff
c0011085:	5b                   	pop    ebx
c0011086:	83 ca ff             	or     edx,0xffffffff
c0011089:	5e                   	pop    esi
c001108a:	c3                   	ret    

c001108b <SysCloseDir(regs*)>:
c001108b:	53                   	push   ebx
c001108c:	83 ca ff             	or     edx,0xffffffff
c001108f:	83 ec 08             	sub    esp,0x8
c0011092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011096:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011099:	83 c8 ff             	or     eax,0xffffffff
c001109c:	8d 59 fd             	lea    ebx,[ecx-0x3]
c001109f:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00110a5:	77 2a                	ja     c00110d1 <SysCloseDir(regs*)+0x46>
c00110a7:	83 ec 0c             	sub    esp,0xc
c00110aa:	51                   	push   ecx
c00110ab:	e8 67 81 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c00110b0:	89 c3                	mov    ebx,eax
c00110b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00110b5:	e8 64 a1 ff ff       	call   c000b21e <Directory::close()>
c00110ba:	83 c4 10             	add    esp,0x10
c00110bd:	85 db                	test   ebx,ebx
c00110bf:	74 0c                	je     c00110cd <SysCloseDir(regs*)+0x42>
c00110c1:	83 ec 0c             	sub    esp,0xc
c00110c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110c6:	53                   	push   ebx
c00110c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	31 c0                	xor    eax,eax
c00110cf:	31 d2                	xor    edx,edx
c00110d1:	83 c4 08             	add    esp,0x8
c00110d4:	5b                   	pop    ebx
c00110d5:	c3                   	ret    

c00110d6 <SysWait(regs*)>:
c00110d6:	83 ec 10             	sub    esp,0x10
c00110d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110dd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00110e0:	52                   	push   edx
c00110e1:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00110e4:	51                   	push   ecx
c00110e5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00110e8:	50                   	push   eax
c00110e9:	e8 9a 3c 00 00       	call   c0014d88 <waitTask(int, int*, int)>
c00110ee:	89 c2                	mov    edx,eax
c00110f0:	83 c4 1c             	add    esp,0x1c
c00110f3:	c1 fa 1f             	sar    edx,0x1f
c00110f6:	c3                   	ret    

c00110f7 <SysNotImpl(regs*)>:
c00110f7:	83 ec 18             	sub    esp,0x18
c00110fa:	68 3e 06 02 c0       	push   0xc002063e
c00110ff:	e8 13 f3 ff ff       	call   c0010417 <KePanic(char const*)>
c0011104:	83 c8 ff             	or     eax,0xffffffff
c0011107:	83 ca ff             	or     edx,0xffffffff
c001110a:	83 c4 1c             	add    esp,0x1c
c001110d:	c3                   	ret    

c001110e <SysPanic(regs*)>:
c001110e:	83 ec 18             	sub    esp,0x18
c0011111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011115:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011118:	50                   	push   eax
c0011119:	e8 f9 f2 ff ff       	call   c0010417 <KePanic(char const*)>
c001111e:	b8 01 00 00 00       	mov    eax,0x1
c0011123:	31 d2                	xor    edx,edx
c0011125:	83 c4 1c             	add    esp,0x1c
c0011128:	c3                   	ret    

c0011129 <SysRmdir(regs*)>:
c0011129:	56                   	push   esi
c001112a:	53                   	push   ebx
c001112b:	83 ec 20             	sub    esp,0x20
c001112e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011132:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011135:	68 14 01 00 00       	push   0x114
c001113a:	e8 34 67 ff ff       	call   c0007873 <malloc>
c001113f:	83 c4 0c             	add    esp,0xc
c0011142:	89 c3                	mov    ebx,eax
c0011144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011149:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001114c:	50                   	push   eax
c001114d:	56                   	push   esi
c001114e:	53                   	push   ebx
c001114f:	e8 84 9a ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0011154:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011157:	e8 b4 9c ff ff       	call   c000ae10 <File::unlink()>
c001115c:	83 c4 10             	add    esp,0x10
c001115f:	85 db                	test   ebx,ebx
c0011161:	74 14                	je     c0011177 <SysRmdir(regs*)+0x4e>
c0011163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011167:	83 ec 0c             	sub    esp,0xc
c001116a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001116c:	53                   	push   ebx
c001116d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011177:	85 c0                	test   eax,eax
c0011179:	0f 95 c0             	setne  al
c001117c:	25 ff 00 00 00       	and    eax,0xff
c0011181:	31 d2                	xor    edx,edx
c0011183:	f7 d8                	neg    eax
c0011185:	83 d2 00             	adc    edx,0x0
c0011188:	83 c4 14             	add    esp,0x14
c001118b:	f7 da                	neg    edx
c001118d:	5b                   	pop    ebx
c001118e:	5e                   	pop    esi
c001118f:	c3                   	ret    

c0011190 <SysUnlink(regs*)>:
c0011190:	56                   	push   esi
c0011191:	53                   	push   ebx
c0011192:	83 ec 20             	sub    esp,0x20
c0011195:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011199:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001119c:	68 14 01 00 00       	push   0x114
c00111a1:	e8 cd 66 ff ff       	call   c0007873 <malloc>
c00111a6:	83 c4 0c             	add    esp,0xc
c00111a9:	89 c3                	mov    ebx,eax
c00111ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111b3:	50                   	push   eax
c00111b4:	56                   	push   esi
c00111b5:	53                   	push   ebx
c00111b6:	e8 1d 9a ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c00111bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111be:	e8 4d 9c ff ff       	call   c000ae10 <File::unlink()>
c00111c3:	83 c4 10             	add    esp,0x10
c00111c6:	85 db                	test   ebx,ebx
c00111c8:	74 14                	je     c00111de <SysUnlink(regs*)+0x4e>
c00111ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111d3:	53                   	push   ebx
c00111d4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111de:	85 c0                	test   eax,eax
c00111e0:	0f 95 c0             	setne  al
c00111e3:	25 ff 00 00 00       	and    eax,0xff
c00111e8:	31 d2                	xor    edx,edx
c00111ea:	f7 d8                	neg    eax
c00111ec:	83 d2 00             	adc    edx,0x0
c00111ef:	83 c4 14             	add    esp,0x14
c00111f2:	f7 da                	neg    edx
c00111f4:	5b                   	pop    ebx
c00111f5:	5e                   	pop    esi
c00111f6:	c3                   	ret    

c00111f7 <SysGetArgv(regs*)>:
c00111f7:	83 ec 0c             	sub    esp,0xc
c00111fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111fe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011201:	85 c0                	test   eax,eax
c0011203:	78 2b                	js     c0011230 <SysGetArgv(regs*)+0x39>
c0011205:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001120b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001120e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011214:	7d 1a                	jge    c0011230 <SysGetArgv(regs*)+0x39>
c0011216:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001121d:	85 c0                	test   eax,eax
c001121f:	74 17                	je     c0011238 <SysGetArgv(regs*)+0x41>
c0011221:	51                   	push   ecx
c0011222:	51                   	push   ecx
c0011223:	50                   	push   eax
c0011224:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011227:	50                   	push   eax
c0011228:	e8 c3 f3 fe ff       	call   c00005f0 <strcpy>
c001122d:	83 c4 10             	add    esp,0x10
c0011230:	31 c0                	xor    eax,eax
c0011232:	31 d2                	xor    edx,edx
c0011234:	83 c4 0c             	add    esp,0xc
c0011237:	c3                   	ret    
c0011238:	b8 01 00 00 00       	mov    eax,0x1
c001123d:	31 d2                	xor    edx,edx
c001123f:	83 c4 0c             	add    esp,0xc
c0011242:	c3                   	ret    

c0011243 <SysUSleep(regs*)>:
c0011243:	83 ec 1c             	sub    esp,0x1c
c0011246:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001124a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001124d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011250:	6a 00                	push   0x0
c0011252:	6a 64                	push   0x64
c0011254:	52                   	push   edx
c0011255:	50                   	push   eax
c0011256:	e8 85 cc 00 00       	call   c001dee0 <__udivdi3>
c001125b:	83 c4 14             	add    esp,0x14
c001125e:	50                   	push   eax
c001125f:	e8 04 3c 00 00       	call   c0014e68 <milliTenthSleep(unsigned int)>
c0011264:	31 c0                	xor    eax,eax
c0011266:	31 d2                	xor    edx,edx
c0011268:	83 c4 1c             	add    esp,0x1c
c001126b:	c3                   	ret    

c001126c <SysSpawn(regs*)>:
c001126c:	56                   	push   esi
c001126d:	53                   	push   ebx
c001126e:	53                   	push   ebx
c001126f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011273:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011276:	85 f6                	test   esi,esi
c0011278:	75 08                	jne    c0011282 <SysSpawn(regs*)+0x16>
c001127a:	59                   	pop    ecx
c001127b:	31 c0                	xor    eax,eax
c001127d:	5b                   	pop    ebx
c001127e:	31 d2                	xor    edx,edx
c0011280:	5e                   	pop    esi
c0011281:	c3                   	ret    
c0011282:	83 ec 0c             	sub    esp,0xc
c0011285:	68 24 07 00 00       	push   0x724
c001128a:	e8 e4 65 ff ff       	call   c0007873 <malloc>
c001128f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011292:	89 c6                	mov    esi,eax
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	31 c0                	xor    eax,eax
c0011299:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001129c:	85 c9                	test   ecx,ecx
c001129e:	75 08                	jne    c00112a8 <SysSpawn(regs*)+0x3c>
c00112a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112a8:	52                   	push   edx
c00112a9:	50                   	push   eax
c00112aa:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00112ad:	53                   	push   ebx
c00112ae:	56                   	push   esi
c00112af:	e8 2c 32 00 00       	call   c00144e0 <Process::Process(char const*, Process*, char**)>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00112be:	75 ba                	jne    c001127a <SysSpawn(regs*)+0xe>
c00112c0:	83 ec 0c             	sub    esp,0xc
c00112c3:	56                   	push   esi
c00112c4:	e8 53 37 00 00       	call   c0014a1c <Process::createUserThread()>
c00112c9:	83 c4 10             	add    esp,0x10
c00112cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00112ce:	89 c2                	mov    edx,eax
c00112d0:	c1 fa 1f             	sar    edx,0x1f
c00112d3:	59                   	pop    ecx
c00112d4:	5b                   	pop    ebx
c00112d5:	5e                   	pop    esi
c00112d6:	c3                   	ret    

c00112d7 <SysGetEnv(regs*)>:
c00112d7:	57                   	push   edi
c00112d8:	56                   	push   esi
c00112d9:	53                   	push   ebx
c00112da:	83 ec 1c             	sub    esp,0x1c
c00112dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112e6:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00112e9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00112ec:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00112ef:	51                   	push   ecx
c00112f0:	e8 da ef ff ff       	call   c00102cf <Krnl::getProcessTotalEnvCount(Process*)>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	39 c7                	cmp    edi,eax
c00112fa:	7c 12                	jl     c001130e <SysGetEnv(regs*)+0x37>
c00112fc:	31 c0                	xor    eax,eax
c00112fe:	31 d2                	xor    edx,edx
c0011300:	85 f6                	test   esi,esi
c0011302:	74 03                	je     c0011307 <SysGetEnv(regs*)+0x30>
c0011304:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	5b                   	pop    ebx
c001130b:	5e                   	pop    esi
c001130c:	5f                   	pop    edi
c001130d:	c3                   	ret    
c001130e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011312:	51                   	push   ecx
c0011313:	57                   	push   edi
c0011314:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001131a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001131d:	57                   	push   edi
c001131e:	50                   	push   eax
c001131f:	e8 cb ef ff ff       	call   c00102ef <Krnl::getProcessEnvPair(Process*, int)>
c0011324:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001132b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001132f:	83 c4 0c             	add    esp,0xc
c0011332:	85 d2                	test   edx,edx
c0011334:	75 23                	jne    c0011359 <SysGetEnv(regs*)+0x82>
c0011336:	83 ec 0c             	sub    esp,0xc
c0011339:	50                   	push   eax
c001133a:	e8 f1 f1 fe ff       	call   c0000530 <strlen>
c001133f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011342:	89 c3                	mov    ebx,eax
c0011344:	e8 e7 f1 fe ff       	call   c0000530 <strlen>
c0011349:	83 c4 10             	add    esp,0x10
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	31 d2                	xor    edx,edx
c0011351:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011355:	5b                   	pop    ebx
c0011356:	5e                   	pop    esi
c0011357:	5f                   	pop    edi
c0011358:	c3                   	ret    
c0011359:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001135c:	52                   	push   edx
c001135d:	52                   	push   edx
c001135e:	50                   	push   eax
c001135f:	56                   	push   esi
c0011360:	e8 8b f2 fe ff       	call   c00005f0 <strcpy>
c0011365:	59                   	pop    ecx
c0011366:	5b                   	pop    ebx
c0011367:	68 58 06 02 c0       	push   0xc0020658
c001136c:	56                   	push   esi
c001136d:	e8 4e f4 fe ff       	call   c00007c0 <strcat>
c0011372:	58                   	pop    eax
c0011373:	5a                   	pop    edx
c0011374:	57                   	push   edi
c0011375:	56                   	push   esi
c0011376:	e8 45 f4 fe ff       	call   c00007c0 <strcat>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	31 c0                	xor    eax,eax
c0011380:	83 c4 10             	add    esp,0x10
c0011383:	31 d2                	xor    edx,edx
c0011385:	5b                   	pop    ebx
c0011386:	5e                   	pop    esi
c0011387:	5f                   	pop    edi
c0011388:	c3                   	ret    

c0011389 <SysSetFatAttrib(regs*)>:
c0011389:	57                   	push   edi
c001138a:	56                   	push   esi
c001138b:	53                   	push   ebx
c001138c:	83 ec 1c             	sub    esp,0x1c
c001138f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011393:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011396:	68 14 01 00 00       	push   0x114
c001139b:	e8 d3 64 ff ff       	call   c0007873 <malloc>
c00113a0:	83 c4 0c             	add    esp,0xc
c00113a3:	89 c3                	mov    ebx,eax
c00113a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113ad:	50                   	push   eax
c00113ae:	57                   	push   edi
c00113af:	53                   	push   ebx
c00113b0:	e8 23 98 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c00113b5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00113b8:	83 c4 0c             	add    esp,0xc
c00113bb:	0f b6 d4             	movzx  edx,ah
c00113be:	52                   	push   edx
c00113bf:	25 ff 00 00 00       	and    eax,0xff
c00113c4:	50                   	push   eax
c00113c5:	53                   	push   ebx
c00113c6:	e8 df 9a ff ff       	call   c000aeaa <File::chfatattr(unsigned char, unsigned char)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	85 db                	test   ebx,ebx
c00113d0:	74 14                	je     c00113e6 <SysSetFatAttrib(regs*)+0x5d>
c00113d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113d6:	83 ec 0c             	sub    esp,0xc
c00113d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113db:	53                   	push   ebx
c00113dc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113e6:	85 c0                	test   eax,eax
c00113e8:	0f 95 c0             	setne  al
c00113eb:	25 ff 00 00 00       	and    eax,0xff
c00113f0:	31 d2                	xor    edx,edx
c00113f2:	f7 d8                	neg    eax
c00113f4:	83 d2 00             	adc    edx,0x0
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	f7 da                	neg    edx
c00113fc:	5b                   	pop    ebx
c00113fd:	5e                   	pop    esi
c00113fe:	5f                   	pop    edi
c00113ff:	c3                   	ret    

c0011400 <SysPipe(regs*)>:
c0011400:	57                   	push   edi
c0011401:	56                   	push   esi
c0011402:	53                   	push   ebx
c0011403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011407:	83 ec 0c             	sub    esp,0xc
c001140a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001140d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011410:	6a 20                	push   0x20
c0011412:	e8 5c 64 ff ff       	call   c0007873 <malloc>
c0011417:	89 c3                	mov    ebx,eax
c0011419:	58                   	pop    eax
c001141a:	5a                   	pop    edx
c001141b:	68 00 50 00 00       	push   0x5000
c0011420:	53                   	push   ebx
c0011421:	e8 7e 6d ff ff       	call   c00081a4 <Pipe::Pipe(int)>
c0011426:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011429:	e8 f4 7a ff ff       	call   c0008f22 <UnixFile::getFileDescriptor()>
c001142e:	89 07                	mov    DWORD PTR [edi],eax
c0011430:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011433:	e8 ea 7a ff ff       	call   c0008f22 <UnixFile::getFileDescriptor()>
c0011438:	83 c4 10             	add    esp,0x10
c001143b:	89 06                	mov    DWORD PTR [esi],eax
c001143d:	31 d2                	xor    edx,edx
c001143f:	5b                   	pop    ebx
c0011440:	31 c0                	xor    eax,eax
c0011442:	5e                   	pop    esi
c0011443:	5f                   	pop    edi
c0011444:	c3                   	ret    

c0011445 <SysGetUnixTime(regs*)>:
c0011445:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001144a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011450:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011454:	e9 8d a1 ff ff       	jmp    c000b5e6 <Clock::timeInSecondsLocal()>

c0011459 <string_ends_with(char const*, char const*)>:
c0011459:	57                   	push   edi
c001145a:	56                   	push   esi
c001145b:	53                   	push   ebx
c001145c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011460:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011464:	83 ec 0c             	sub    esp,0xc
c0011467:	53                   	push   ebx
c0011468:	e8 c3 f0 fe ff       	call   c0000530 <strlen>
c001146d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011470:	89 c6                	mov    esi,eax
c0011472:	e8 b9 f0 fe ff       	call   c0000530 <strlen>
c0011477:	83 c4 10             	add    esp,0x10
c001147a:	31 d2                	xor    edx,edx
c001147c:	39 c6                	cmp    esi,eax
c001147e:	7d 06                	jge    c0011486 <string_ends_with(char const*, char const*)+0x2d>
c0011480:	5b                   	pop    ebx
c0011481:	89 d0                	mov    eax,edx
c0011483:	5e                   	pop    esi
c0011484:	5f                   	pop    edi
c0011485:	c3                   	ret    
c0011486:	52                   	push   edx
c0011487:	29 c6                	sub    esi,eax
c0011489:	52                   	push   edx
c001148a:	01 f3                	add    ebx,esi
c001148c:	57                   	push   edi
c001148d:	53                   	push   ebx
c001148e:	e8 4d f2 fe ff       	call   c00006e0 <strcmp>
c0011493:	83 c4 10             	add    esp,0x10
c0011496:	31 d2                	xor    edx,edx
c0011498:	85 c0                	test   eax,eax
c001149a:	5b                   	pop    ebx
c001149b:	0f 94 c2             	sete   dl
c001149e:	5e                   	pop    esi
c001149f:	89 d0                	mov    eax,edx
c00114a1:	5f                   	pop    edi
c00114a2:	c3                   	ret    

c00114a3 <SysOpen(regs*)>:
c00114a3:	56                   	push   esi
c00114a4:	53                   	push   ebx
c00114a5:	81 ec 04 01 00 00    	sub    esp,0x104
c00114ab:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00114b2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00114b5:	85 f6                	test   esi,esi
c00114b7:	0f 84 b8 01 00 00    	je     c0011675 <SysOpen(regs*)+0x1d2>
c00114bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114c0:	85 c0                	test   eax,eax
c00114c2:	0f 84 ad 01 00 00    	je     c0011675 <SysOpen(regs*)+0x1d2>
c00114c8:	51                   	push   ecx
c00114c9:	68 5a 06 02 c0       	push   0xc002065a
c00114ce:	50                   	push   eax
c00114cf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00114d3:	56                   	push   esi
c00114d4:	e8 55 95 ff ff       	call   c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)>
c00114d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00114dc:	e8 4f f0 fe ff       	call   c0000530 <strlen>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	48                   	dec    eax
c00114e5:	74 25                	je     c001150c <SysOpen(regs*)+0x69>
c00114e7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00114ea:	80 fa 2e             	cmp    dl,0x2e
c00114ed:	74 19                	je     c0011508 <SysOpen(regs*)+0x65>
c00114ef:	80 fa 3a             	cmp    dl,0x3a
c00114f2:	74 14                	je     c0011508 <SysOpen(regs*)+0x65>
c00114f4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00114f8:	48                   	dec    eax
c00114f9:	74 11                	je     c001150c <SysOpen(regs*)+0x69>
c00114fb:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00114fe:	80 fa 3a             	cmp    dl,0x3a
c0011501:	74 05                	je     c0011508 <SysOpen(regs*)+0x65>
c0011503:	80 fa 2e             	cmp    dl,0x2e
c0011506:	75 ec                	jne    c00114f4 <SysOpen(regs*)+0x51>
c0011508:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001150c:	50                   	push   eax
c001150d:	50                   	push   eax
c001150e:	68 5e 06 02 c0       	push   0xc002065e
c0011513:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011516:	52                   	push   edx
c0011517:	e8 3d ff ff ff       	call   c0011459 <string_ends_with(char const*, char const*)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	85 c0                	test   eax,eax
c0011521:	74 1d                	je     c0011540 <SysOpen(regs*)+0x9d>
c0011523:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011526:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001152c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011533:	81 c4 04 01 00 00    	add    esp,0x104
c0011539:	31 c0                	xor    eax,eax
c001153b:	31 d2                	xor    edx,edx
c001153d:	5b                   	pop    ebx
c001153e:	5e                   	pop    esi
c001153f:	c3                   	ret    
c0011540:	50                   	push   eax
c0011541:	50                   	push   eax
c0011542:	68 63 06 02 c0       	push   0xc0020663
c0011547:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001154a:	50                   	push   eax
c001154b:	e8 09 ff ff ff       	call   c0011459 <string_ends_with(char const*, char const*)>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	85 c0                	test   eax,eax
c0011555:	75 cc                	jne    c0011523 <SysOpen(regs*)+0x80>
c0011557:	50                   	push   eax
c0011558:	50                   	push   eax
c0011559:	68 5f 06 02 c0       	push   0xc002065f
c001155e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011561:	50                   	push   eax
c0011562:	e8 79 f1 fe ff       	call   c00006e0 <strcmp>
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	85 c0                	test   eax,eax
c001156c:	74 b5                	je     c0011523 <SysOpen(regs*)+0x80>
c001156e:	50                   	push   eax
c001156f:	50                   	push   eax
c0011570:	68 5e 06 02 c0       	push   0xc002065e
c0011575:	56                   	push   esi
c0011576:	e8 de fe ff ff       	call   c0011459 <string_ends_with(char const*, char const*)>
c001157b:	83 c4 10             	add    esp,0x10
c001157e:	85 c0                	test   eax,eax
c0011580:	75 a1                	jne    c0011523 <SysOpen(regs*)+0x80>
c0011582:	52                   	push   edx
c0011583:	52                   	push   edx
c0011584:	68 68 06 02 c0       	push   0xc0020668
c0011589:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001158c:	51                   	push   ecx
c001158d:	e8 c7 fe ff ff       	call   c0011459 <string_ends_with(char const*, char const*)>
c0011592:	83 c4 10             	add    esp,0x10
c0011595:	85 c0                	test   eax,eax
c0011597:	0f 85 e7 00 00 00    	jne    c0011684 <SysOpen(regs*)+0x1e1>
c001159d:	50                   	push   eax
c001159e:	50                   	push   eax
c001159f:	68 6d 06 02 c0       	push   0xc002066d
c00115a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00115a7:	50                   	push   eax
c00115a8:	e8 ac fe ff ff       	call   c0011459 <string_ends_with(char const*, char const*)>
c00115ad:	83 c4 10             	add    esp,0x10
c00115b0:	85 c0                	test   eax,eax
c00115b2:	0f 85 cc 00 00 00    	jne    c0011684 <SysOpen(regs*)+0x1e1>
c00115b8:	50                   	push   eax
c00115b9:	50                   	push   eax
c00115ba:	68 69 06 02 c0       	push   0xc0020669
c00115bf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00115c2:	50                   	push   eax
c00115c3:	e8 18 f1 fe ff       	call   c00006e0 <strcmp>
c00115c8:	83 c4 10             	add    esp,0x10
c00115cb:	85 c0                	test   eax,eax
c00115cd:	0f 84 b1 00 00 00    	je     c0011684 <SysOpen(regs*)+0x1e1>
c00115d3:	50                   	push   eax
c00115d4:	50                   	push   eax
c00115d5:	68 68 06 02 c0       	push   0xc0020668
c00115da:	56                   	push   esi
c00115db:	e8 79 fe ff ff       	call   c0011459 <string_ends_with(char const*, char const*)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	85 c0                	test   eax,eax
c00115e5:	0f 85 99 00 00 00    	jne    c0011684 <SysOpen(regs*)+0x1e1>
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	68 14 01 00 00       	push   0x114
c00115f3:	e8 7b 62 ff ff       	call   c0007873 <malloc>
c00115f8:	89 c6                	mov    esi,eax
c00115fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115ff:	83 c4 0c             	add    esp,0xc
c0011602:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011605:	51                   	push   ecx
c0011606:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011609:	50                   	push   eax
c001160a:	56                   	push   esi
c001160b:	e8 c8 95 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 f6                	test   esi,esi
c0011615:	74 5e                	je     c0011675 <SysOpen(regs*)+0x1d2>
c0011617:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001161a:	89 d0                	mov    eax,edx
c001161c:	25 ff 00 00 00       	and    eax,0xff
c0011621:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011624:	89 d0                	mov    eax,edx
c0011626:	83 e0 01             	and    eax,0x1
c0011629:	f6 c2 02             	test   dl,0x2
c001162c:	74 03                	je     c0011631 <SysOpen(regs*)+0x18e>
c001162e:	83 c8 02             	or     eax,0x2
c0011631:	f6 c2 04             	test   dl,0x4
c0011634:	74 03                	je     c0011639 <SysOpen(regs*)+0x196>
c0011636:	83 c8 04             	or     eax,0x4
c0011639:	f6 c2 08             	test   dl,0x8
c001163c:	74 03                	je     c0011641 <SysOpen(regs*)+0x19e>
c001163e:	83 c8 0a             	or     eax,0xa
c0011641:	83 e2 10             	and    edx,0x10
c0011644:	74 03                	je     c0011649 <SysOpen(regs*)+0x1a6>
c0011646:	83 c8 12             	or     eax,0x12
c0011649:	52                   	push   edx
c001164a:	52                   	push   edx
c001164b:	50                   	push   eax
c001164c:	56                   	push   esi
c001164d:	e8 46 96 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	85 c0                	test   eax,eax
c0011657:	75 1c                	jne    c0011675 <SysOpen(regs*)+0x1d2>
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	56                   	push   esi
c001165d:	e8 c0 78 ff ff       	call   c0008f22 <UnixFile::getFileDescriptor()>
c0011662:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	89 02                	mov    DWORD PTR [edx],eax
c001166a:	c1 f8 1f             	sar    eax,0x1f
c001166d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011670:	e9 be fe ff ff       	jmp    c0011533 <SysOpen(regs*)+0x90>
c0011675:	81 c4 04 01 00 00    	add    esp,0x104
c001167b:	83 c8 ff             	or     eax,0xffffffff
c001167e:	83 ca ff             	or     edx,0xffffffff
c0011681:	5b                   	pop    ebx
c0011682:	5e                   	pop    esi
c0011683:	c3                   	ret    
c0011684:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011687:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001168d:	e9 9a fe ff ff       	jmp    c001152c <SysOpen(regs*)+0x89>

c0011692 <KeSystemCall(regs*, void*)>:
c0011692:	53                   	push   ebx
c0011693:	83 ec 08             	sub    esp,0x8
c0011696:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001169a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001169d:	83 f8 3b             	cmp    eax,0x3b
c00116a0:	77 16                	ja     c00116b8 <KeSystemCall(regs*, void*)+0x26>
c00116a2:	8b 14 85 20 1a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde5e0]
c00116a9:	85 d2                	test   edx,edx
c00116ab:	74 0b                	je     c00116b8 <KeSystemCall(regs*, void*)+0x26>
c00116ad:	83 ec 0c             	sub    esp,0xc
c00116b0:	53                   	push   ebx
c00116b1:	ff d2                	call   edx
c00116b3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00116b6:	eb 0d                	jmp    c00116c5 <KeSystemCall(regs*, void*)+0x33>
c00116b8:	52                   	push   edx
c00116b9:	52                   	push   edx
c00116ba:	50                   	push   eax
c00116bb:	68 72 06 02 c0       	push   0xc0020672
c00116c0:	e8 9e 8f ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00116cd:	83 c4 08             	add    esp,0x8
c00116d0:	31 d2                	xor    edx,edx
c00116d2:	5b                   	pop    ebx
c00116d3:	c3                   	ret    

c00116d4 <KeSwitchEndian16(unsigned short)>:
c00116d4:	83 ec 04             	sub    esp,0x4
c00116d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116db:	66 89 04 24          	mov    WORD PTR [esp],ax
c00116df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116e2:	25 ff ff 00 00       	and    eax,0xffff
c00116e7:	c1 f8 08             	sar    eax,0x8
c00116ea:	89 c2                	mov    edx,eax
c00116ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116ef:	25 ff ff 00 00       	and    eax,0xffff
c00116f4:	c1 e0 08             	shl    eax,0x8
c00116f7:	09 d0                	or     eax,edx
c00116f9:	83 c4 04             	add    esp,0x4
c00116fc:	c3                   	ret    
c00116fd:	8d 76 00             	lea    esi,[esi+0x0]

c0011700 <KeSwitchEndian32(unsigned int)>:
c0011700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011704:	c1 e8 18             	shr    eax,0x18
c0011707:	89 c2                	mov    edx,eax
c0011709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170d:	c1 e0 08             	shl    eax,0x8
c0011710:	25 00 00 ff 00       	and    eax,0xff0000
c0011715:	09 c2                	or     edx,eax
c0011717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001171b:	c1 e8 08             	shr    eax,0x8
c001171e:	25 00 ff 00 00       	and    eax,0xff00
c0011723:	09 c2                	or     edx,eax
c0011725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011729:	c1 e0 18             	shl    eax,0x18
c001172c:	09 d0                	or     eax,edx
c001172e:	c3                   	ret    
c001172f:	90                   	nop

c0011730 <EthernetCRC32(unsigned char*, int)>:
c0011730:	83 ec 10             	sub    esp,0x10
c0011733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011738:	75 0a                	jne    c0011744 <EthernetCRC32(unsigned char*, int)+0x14>
c001173a:	b8 00 00 00 00       	mov    eax,0x0
c001173f:	e9 8c 00 00 00       	jmp    c00117d0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011744:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011749:	7f 09                	jg     c0011754 <EthernetCRC32(unsigned char*, int)+0x24>
c001174b:	b8 00 00 00 00       	mov    eax,0x0
c0011750:	eb 7e                	jmp    c00117d0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011752:	66 90                	xchg   ax,ax
c0011754:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001175c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011768:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001176c:	7d 5a                	jge    c00117c8 <EthernetCRC32(unsigned char*, int)+0x98>
c001176e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011772:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011776:	01 d0                	add    eax,edx
c0011778:	8a 00                	mov    al,BYTE PTR [eax]
c001177a:	25 ff 00 00 00       	and    eax,0xff
c001177f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011783:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001178b:	90                   	nop
c001178c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011791:	7f 2d                	jg     c00117c0 <EthernetCRC32(unsigned char*, int)+0x90>
c0011793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011797:	83 e0 01             	and    eax,0x1
c001179a:	74 10                	je     c00117ac <EthernetCRC32(unsigned char*, int)+0x7c>
c001179c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a0:	d1 e8                	shr    eax,1
c00117a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00117a7:	eb 0b                	jmp    c00117b4 <EthernetCRC32(unsigned char*, int)+0x84>
c00117a9:	8d 76 00             	lea    esi,[esi+0x0]
c00117ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b0:	d1 e8                	shr    eax,1
c00117b2:	66 90                	xchg   ax,ax
c00117b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00117bc:	eb ce                	jmp    c001178c <EthernetCRC32(unsigned char*, int)+0x5c>
c00117be:	66 90                	xchg   ax,ax
c00117c0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00117c4:	eb 9e                	jmp    c0011764 <EthernetCRC32(unsigned char*, int)+0x34>
c00117c6:	66 90                	xchg   ax,ax
c00117c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117cc:	f7 d0                	not    eax
c00117ce:	66 90                	xchg   ax,ax
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	c3                   	ret    

c00117d4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00117d4:	83 ec 2c             	sub    esp,0x2c
c00117d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117db:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117ef:	66 3d 06 08          	cmp    ax,0x806
c00117f3:	75 13                	jne    c0011808 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c00117f5:	83 ec 0c             	sub    esp,0xc
c00117f8:	68 86 06 02 c0       	push   0xc0020686
c00117fd:	e8 61 8e ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	eb 21                	jmp    c0011828 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c0011807:	90                   	nop
c0011808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001180c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180f:	66 3d 00 08          	cmp    ax,0x800
c0011813:	75 13                	jne    c0011828 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c0011815:	83 ec 0c             	sub    esp,0xc
c0011818:	68 9c 06 02 c0       	push   0xc002069c
c001181d:	e8 41 8e ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0011822:	83 c4 10             	add    esp,0x10
c0011825:	8d 76 00             	lea    esi,[esi+0x0]
c0011828:	90                   	nop
c0011829:	83 c4 2c             	add    esp,0x2c
c001182c:	c3                   	ret    

c001182d <CmOpen(char const*)>:
c001182d:	57                   	push   edi
c001182e:	56                   	push   esi
c001182f:	53                   	push   ebx
c0011830:	83 ec 1c             	sub    esp,0x1c
c0011833:	6a 30                	push   0x30
c0011835:	e8 39 60 ff ff       	call   c0007873 <malloc>
c001183a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011841:	89 c3                	mov    ebx,eax
c0011843:	e8 2b 60 ff ff       	call   c0007873 <malloc>
c0011848:	83 c4 0c             	add    esp,0xc
c001184b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0011851:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011855:	89 c6                	mov    esi,eax
c0011857:	50                   	push   eax
c0011858:	e8 7b 93 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c001185d:	83 c4 0c             	add    esp,0xc
c0011860:	89 33                	mov    DWORD PTR [ebx],esi
c0011862:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011866:	50                   	push   eax
c0011867:	8d 44 24 10          	lea    eax,[esp+0x10]
c001186b:	50                   	push   eax
c001186c:	56                   	push   esi
c001186d:	e8 d2 96 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c0011872:	5a                   	pop    edx
c0011873:	59                   	pop    ecx
c0011874:	6a 01                	push   0x1
c0011876:	ff 33                	push   DWORD PTR [ebx]
c0011878:	e8 1b 94 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c001187d:	5e                   	pop    esi
c001187e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011882:	e8 ec 5f ff ff       	call   c0007873 <malloc>
c0011887:	5a                   	pop    edx
c0011888:	89 c7                	mov    edi,eax
c001188a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001188c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011890:	8b 10                	mov    edx,DWORD PTR [eax]
c0011892:	56                   	push   esi
c0011893:	57                   	push   edi
c0011894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011898:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001189c:	50                   	push   eax
c001189d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00118a0:	83 c4 14             	add    esp,0x14
c00118a3:	ff 33                	push   DWORD PTR [ebx]
c00118a5:	e8 4c 94 ff ff       	call   c000acf6 <File::close()>
c00118aa:	59                   	pop    ecx
c00118ab:	58                   	pop    eax
c00118ac:	6a 13                	push   0x13
c00118ae:	ff 33                	push   DWORD PTR [ebx]
c00118b0:	e8 e3 93 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c00118b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00118b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00118bc:	57                   	push   edi
c00118bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118c5:	50                   	push   eax
c00118c6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00118c9:	83 c4 14             	add    esp,0x14
c00118cc:	57                   	push   edi
c00118cd:	e8 b1 5f ff ff       	call   c0007883 <free>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00118d8:	75 10                	jne    c00118ea <CmOpen(char const*)+0xbd>
c00118da:	83 ec 0c             	sub    esp,0xc
c00118dd:	68 b1 06 02 c0       	push   0xc00206b1
c00118e2:	e8 30 eb ff ff       	call   c0010417 <KePanic(char const*)>
c00118e7:	83 c4 10             	add    esp,0x10
c00118ea:	50                   	push   eax
c00118eb:	8d 7b 05             	lea    edi,[ebx+0x5]
c00118ee:	6a 00                	push   0x0
c00118f0:	6a 00                	push   0x0
c00118f2:	ff 33                	push   DWORD PTR [ebx]
c00118f4:	e8 5d 94 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c00118f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00118fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011900:	57                   	push   edi
c0011901:	6a 00                	push   0x0
c0011903:	6a 2b                	push   0x2b
c0011905:	50                   	push   eax
c0011906:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011909:	83 c4 1c             	add    esp,0x1c
c001190c:	6a 00                	push   0x0
c001190e:	6a 00                	push   0x0
c0011910:	ff 33                	push   DWORD PTR [ebx]
c0011912:	e8 3f 94 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0011917:	83 c4 0c             	add    esp,0xc
c001191a:	6a 08                	push   0x8
c001191c:	68 c2 06 02 c0       	push   0xc00206c2
c0011921:	57                   	push   edi
c0011922:	e8 59 ea fe ff       	call   c0000380 <memcmp>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	85 c0                	test   eax,eax
c001192c:	74 10                	je     c001193e <CmOpen(char const*)+0x111>
c001192e:	83 ec 0c             	sub    esp,0xc
c0011931:	68 cb 06 02 c0       	push   0xc00206cb
c0011936:	e8 dc ea ff ff       	call   c0010417 <KePanic(char const*)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	89 d8                	mov    eax,ebx
c0011947:	5b                   	pop    ebx
c0011948:	5e                   	pop    esi
c0011949:	5f                   	pop    edi
c001194a:	c3                   	ret    

c001194b <CmClose(Reghive_Tag*)>:
c001194b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001194f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011953:	74 0b                	je     c0011960 <CmClose(Reghive_Tag*)+0x15>
c0011955:	8b 00                	mov    eax,DWORD PTR [eax]
c0011957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001195b:	e9 96 93 ff ff       	jmp    c000acf6 <File::close()>
c0011960:	c3                   	ret    

c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011961:	53                   	push   ebx
c0011962:	83 ec 18             	sub    esp,0x18
c0011965:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011969:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001196d:	74 29                	je     c0011998 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001196f:	50                   	push   eax
c0011970:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011975:	99                   	cdq    
c0011976:	52                   	push   edx
c0011977:	50                   	push   eax
c0011978:	ff 33                	push   DWORD PTR [ebx]
c001197a:	e8 d7 93 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c001197f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011981:	5a                   	pop    edx
c0011982:	8b 10                	mov    edx,DWORD PTR [eax]
c0011984:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011988:	51                   	push   ecx
c0011989:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001198d:	6a 00                	push   0x0
c001198f:	6a 2b                	push   0x2b
c0011991:	50                   	push   eax
c0011992:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011995:	83 c4 20             	add    esp,0x20
c0011998:	83 c4 18             	add    esp,0x18
c001199b:	5b                   	pop    ebx
c001199c:	c3                   	ret    

c001199d <CmGetString(Reghive_Tag*, int, char*)>:
c001199d:	55                   	push   ebp
c001199e:	57                   	push   edi
c001199f:	56                   	push   esi
c00119a0:	53                   	push   ebx
c00119a1:	31 db                	xor    ebx,ebx
c00119a3:	83 ec 70             	sub    esp,0x70
c00119a6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00119aa:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00119b1:	50                   	push   eax
c00119b2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00119b9:	55                   	push   ebp
c00119ba:	e8 a2 ff ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00119c7:	c1 e0 08             	shl    eax,0x8
c00119ca:	89 c2                	mov    edx,eax
c00119cc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00119d1:	09 d0                	or     eax,edx
c00119d3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00119d8:	c1 e0 08             	shl    eax,0x8
c00119db:	09 d0                	or     eax,edx
c00119dd:	74 25                	je     c0011a04 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00119df:	6b fb 0d             	imul   edi,ebx,0xd
c00119e2:	52                   	push   edx
c00119e3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00119e7:	52                   	push   edx
c00119e8:	50                   	push   eax
c00119e9:	55                   	push   ebp
c00119ea:	e8 72 ff ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119ef:	8d 74 24 49          	lea    esi,[esp+0x49]
c00119f3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00119fa:	b9 27 00 00 00       	mov    ecx,0x27
c00119ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	83 c3 03             	add    ebx,0x3
c0011a07:	83 fb 15             	cmp    ebx,0x15
c0011a0a:	75 b6                	jne    c00119c2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011a0c:	83 c4 6c             	add    esp,0x6c
c0011a0f:	5b                   	pop    ebx
c0011a10:	5e                   	pop    esi
c0011a11:	5f                   	pop    edi
c0011a12:	5d                   	pop    ebp
c0011a13:	c3                   	ret    

c0011a14 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011a14:	83 ec 40             	sub    esp,0x40
c0011a17:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011a1b:	50                   	push   eax
c0011a1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a24:	e8 38 ff ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	83 c8 ff             	or     eax,0xffffffff
c0011a2f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011a34:	75 19                	jne    c0011a4f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011a36:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a3b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011a40:	c1 e0 08             	shl    eax,0x8
c0011a43:	09 c2                	or     edx,eax
c0011a45:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011a4a:	c1 e0 10             	shl    eax,0x10
c0011a4d:	09 d0                	or     eax,edx
c0011a4f:	83 c4 3c             	add    esp,0x3c
c0011a52:	c3                   	ret    

c0011a53 <CmGetNext(Reghive_Tag*, int)>:
c0011a53:	83 ec 40             	sub    esp,0x40
c0011a56:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011a5a:	50                   	push   eax
c0011a5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a63:	e8 f9 fe ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011a68:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a6d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011a72:	c1 e0 08             	shl    eax,0x8
c0011a75:	09 c2                	or     edx,eax
c0011a77:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011a7c:	c1 e0 10             	shl    eax,0x10
c0011a7f:	83 c4 4c             	add    esp,0x4c
c0011a82:	09 d0                	or     eax,edx
c0011a84:	c3                   	ret    

c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011a85:	53                   	push   ebx
c0011a86:	83 ec 18             	sub    esp,0x18
c0011a89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a8d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a91:	74 29                	je     c0011abc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011a93:	50                   	push   eax
c0011a94:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011a99:	99                   	cdq    
c0011a9a:	52                   	push   edx
c0011a9b:	50                   	push   eax
c0011a9c:	ff 33                	push   DWORD PTR [ebx]
c0011a9e:	e8 b3 92 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0011aa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aa5:	5a                   	pop    edx
c0011aa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011aa8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011aac:	51                   	push   ecx
c0011aad:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ab1:	6a 00                	push   0x0
c0011ab3:	6a 2b                	push   0x2b
c0011ab5:	50                   	push   eax
c0011ab6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ab9:	83 c4 20             	add    esp,0x20
c0011abc:	83 c4 18             	add    esp,0x18
c0011abf:	5b                   	pop    ebx
c0011ac0:	c3                   	ret    

c0011ac1 <CmFreeExtent(Reghive_Tag*, int)>:
c0011ac1:	53                   	push   ebx
c0011ac2:	83 ec 3c             	sub    esp,0x3c
c0011ac5:	6a 2b                	push   0x2b
c0011ac7:	6a 00                	push   0x0
c0011ac9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011acd:	53                   	push   ebx
c0011ace:	e8 ed e9 fe ff       	call   c00004c0 <memset>
c0011ad3:	83 c4 0c             	add    esp,0xc
c0011ad6:	53                   	push   ebx
c0011ad7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011adb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011adf:	e8 a1 ff ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011ae4:	83 c4 48             	add    esp,0x48
c0011ae7:	5b                   	pop    ebx
c0011ae8:	c3                   	ret    

c0011ae9 <CmUpdateHeader(Reghive_Tag*)>:
c0011ae9:	83 ec 0c             	sub    esp,0xc
c0011aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011af4:	74 10                	je     c0011b06 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011af6:	52                   	push   edx
c0011af7:	8d 50 05             	lea    edx,[eax+0x5]
c0011afa:	52                   	push   edx
c0011afb:	6a 00                	push   0x0
c0011afd:	50                   	push   eax
c0011afe:	e8 82 ff ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	83 c4 0c             	add    esp,0xc
c0011b09:	c3                   	ret    

c0011b0a <CmExpand(Reghive_Tag*, int)>:
c0011b0a:	57                   	push   edi
c0011b0b:	56                   	push   esi
c0011b0c:	83 ce ff             	or     esi,0xffffffff
c0011b0f:	53                   	push   ebx
c0011b10:	83 ec 30             	sub    esp,0x30
c0011b13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011b17:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011b1b:	74 5f                	je     c0011b7c <CmExpand(Reghive_Tag*, int)+0x72>
c0011b1d:	50                   	push   eax
c0011b1e:	31 d2                	xor    edx,edx
c0011b20:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011b24:	52                   	push   edx
c0011b25:	31 f6                	xor    esi,esi
c0011b27:	50                   	push   eax
c0011b28:	ff 33                	push   DWORD PTR [ebx]
c0011b2a:	e8 27 92 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0011b2f:	83 c4 0c             	add    esp,0xc
c0011b32:	6a 2b                	push   0x2b
c0011b34:	6a 00                	push   0x0
c0011b36:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011b3a:	57                   	push   edi
c0011b3b:	e8 80 e9 fe ff       	call   c00004c0 <memset>
c0011b40:	83 c4 10             	add    esp,0x10
c0011b43:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011b47:	7d 1b                	jge    c0011b64 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011b49:	83 ec 0c             	sub    esp,0xc
c0011b4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b4e:	46                   	inc    esi
c0011b4f:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011b53:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b55:	51                   	push   ecx
c0011b56:	57                   	push   edi
c0011b57:	6a 00                	push   0x0
c0011b59:	6a 2b                	push   0x2b
c0011b5b:	50                   	push   eax
c0011b5c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011b5f:	83 c4 20             	add    esp,0x20
c0011b62:	eb df                	jmp    c0011b43 <CmExpand(Reghive_Tag*, int)+0x39>
c0011b64:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b68:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011b6b:	83 ec 0c             	sub    esp,0xc
c0011b6e:	01 f2                	add    edx,esi
c0011b70:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011b73:	53                   	push   ebx
c0011b74:	e8 70 ff ff ff       	call   c0011ae9 <CmUpdateHeader(Reghive_Tag*)>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	83 c4 30             	add    esp,0x30
c0011b7f:	89 f0                	mov    eax,esi
c0011b81:	5b                   	pop    ebx
c0011b82:	5e                   	pop    esi
c0011b83:	5f                   	pop    edi
c0011b84:	c3                   	ret    

c0011b85 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011b85:	55                   	push   ebp
c0011b86:	57                   	push   edi
c0011b87:	56                   	push   esi
c0011b88:	53                   	push   ebx
c0011b89:	83 cb ff             	or     ebx,0xffffffff
c0011b8c:	83 ec 1c             	sub    esp,0x1c
c0011b8f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011b93:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011b97:	74 68                	je     c0011c01 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b99:	51                   	push   ecx
c0011b9a:	be 2b 00 00 00       	mov    esi,0x2b
c0011b9f:	6a 00                	push   0x0
c0011ba1:	31 ff                	xor    edi,edi
c0011ba3:	6a 00                	push   0x0
c0011ba5:	31 db                	xor    ebx,ebx
c0011ba7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011baa:	e8 a7 91 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011bb5:	76 3b                	jbe    c0011bf2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011bb7:	83 ec 0c             	sub    esp,0xc
c0011bba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011bbd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bc3:	51                   	push   ecx
c0011bc4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011bc8:	51                   	push   ecx
c0011bc9:	6a 00                	push   0x0
c0011bcb:	6a 01                	push   0x1
c0011bcd:	50                   	push   eax
c0011bce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bd1:	83 c4 20             	add    esp,0x20
c0011bd4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bd9:	74 26                	je     c0011c01 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011bdb:	52                   	push   edx
c0011bdc:	43                   	inc    ebx
c0011bdd:	57                   	push   edi
c0011bde:	56                   	push   esi
c0011bdf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011be2:	e8 6f 91 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0011be7:	83 c6 2b             	add    esi,0x2b
c0011bea:	83 d7 00             	adc    edi,0x0
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	eb c0                	jmp    c0011bb2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011bf2:	50                   	push   eax
c0011bf3:	50                   	push   eax
c0011bf4:	6a 40                	push   0x40
c0011bf6:	55                   	push   ebp
c0011bf7:	e8 0e ff ff ff       	call   c0011b0a <CmExpand(Reghive_Tag*, int)>
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	89 c3                	mov    ebx,eax
c0011c01:	83 c4 1c             	add    esp,0x1c
c0011c04:	89 d8                	mov    eax,ebx
c0011c06:	5b                   	pop    ebx
c0011c07:	5e                   	pop    esi
c0011c08:	5f                   	pop    edi
c0011c09:	5d                   	pop    ebp
c0011c0a:	c3                   	ret    

c0011c0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011c0b:	55                   	push   ebp
c0011c0c:	57                   	push   edi
c0011c0d:	56                   	push   esi
c0011c0e:	53                   	push   ebx
c0011c0f:	81 ec 88 00 00 00    	sub    esp,0x88
c0011c15:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011c1c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c23:	e8 5d ff ff ff       	call   c0011b85 <CmFindUnusedExtent(Reghive_Tag*)>
c0011c28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c2c:	83 c4 0c             	add    esp,0xc
c0011c2f:	6a 2b                	push   0x2b
c0011c31:	6a 00                	push   0x0
c0011c33:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011c37:	55                   	push   ebp
c0011c38:	e8 83 e8 fe ff       	call   c00004c0 <memset>
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	85 db                	test   ebx,ebx
c0011c42:	74 12                	je     c0011c56 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011c44:	51                   	push   ecx
c0011c45:	55                   	push   ebp
c0011c46:	53                   	push   ebx
c0011c47:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c4e:	e8 0e fd ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011c53:	83 c4 10             	add    esp,0x10
c0011c56:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011c5a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c61:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011c66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c68:	85 db                	test   ebx,ebx
c0011c6a:	74 49                	je     c0011cb5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011c6c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011c71:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011c76:	c1 e0 08             	shl    eax,0x8
c0011c79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c7d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011c83:	09 c8                	or     eax,ecx
c0011c85:	74 11                	je     c0011c98 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011c87:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011c8b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011c8f:	c1 e8 10             	shr    eax,0x10
c0011c92:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011c96:	eb 0f                	jmp    c0011ca7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011c98:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c9d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011ca2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011ca7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011cab:	c1 ea 08             	shr    edx,0x8
c0011cae:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011cb3:	eb 0f                	jmp    c0011cc4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011cb5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011cba:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011cbf:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011cc4:	52                   	push   edx
c0011cc5:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011cc9:	50                   	push   eax
c0011cca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cce:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011cd5:	e8 ab fd ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011cda:	83 c4 10             	add    esp,0x10
c0011cdd:	85 db                	test   ebx,ebx
c0011cdf:	74 12                	je     c0011cf3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011ce1:	50                   	push   eax
c0011ce2:	55                   	push   ebp
c0011ce3:	53                   	push   ebx
c0011ce4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011ceb:	e8 95 fd ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cf7:	83 c4 7c             	add    esp,0x7c
c0011cfa:	5b                   	pop    ebx
c0011cfb:	5e                   	pop    esi
c0011cfc:	5f                   	pop    edi
c0011cfd:	5d                   	pop    ebp
c0011cfe:	c3                   	ret    

c0011cff <CmSetString(Reghive_Tag*, int, char const*)>:
c0011cff:	55                   	push   ebp
c0011d00:	57                   	push   edi
c0011d01:	56                   	push   esi
c0011d02:	53                   	push   ebx
c0011d03:	bb 27 00 00 00       	mov    ebx,0x27
c0011d08:	81 ec 88 00 00 00    	sub    esp,0x88
c0011d0e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011d15:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011d1c:	e8 0f e8 fe ff       	call   c0000530 <strlen>
c0011d21:	8d 48 26             	lea    ecx,[eax+0x26]
c0011d24:	89 c8                	mov    eax,ecx
c0011d26:	99                   	cdq    
c0011d27:	f7 fb                	idiv   ebx
c0011d29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011d36:	7e 10                	jle    c0011d48 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011d38:	83 ec 0c             	sub    esp,0xc
c0011d3b:	68 dc 06 02 c0       	push   0xc00206dc
c0011d40:	e8 d2 e6 ff ff       	call   c0010417 <KePanic(char const*)>
c0011d45:	83 c4 10             	add    esp,0x10
c0011d48:	50                   	push   eax
c0011d49:	31 ff                	xor    edi,edi
c0011d4b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011d4f:	53                   	push   ebx
c0011d50:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d57:	56                   	push   esi
c0011d58:	e8 04 fc ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011d64:	89 d0                	mov    eax,edx
c0011d66:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011d6a:	c1 e0 08             	shl    eax,0x8
c0011d6d:	09 c2                	or     edx,eax
c0011d6f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011d73:	c1 e2 08             	shl    edx,0x8
c0011d76:	09 c2                	or     edx,eax
c0011d78:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011d7c:	7e 76                	jle    c0011df4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011d7e:	85 d2                	test   edx,edx
c0011d80:	75 25                	jne    c0011da7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011d82:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011d86:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011d8b:	50                   	push   eax
c0011d8c:	6a 00                	push   0x0
c0011d8e:	6a 00                	push   0x0
c0011d90:	56                   	push   esi
c0011d91:	e8 75 fe ff ff       	call   c0011c0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011d96:	89 c2                	mov    edx,eax
c0011d98:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011d9b:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011d9e:	83 c4 10             	add    esp,0x10
c0011da1:	c1 f8 10             	sar    eax,0x10
c0011da4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011da7:	55                   	push   ebp
c0011da8:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011dac:	55                   	push   ebp
c0011dad:	52                   	push   edx
c0011dae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011db2:	56                   	push   esi
c0011db3:	e8 a9 fb ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011db8:	83 c4 0c             	add    esp,0xc
c0011dbb:	6a 27                	push   0x27
c0011dbd:	6a 00                	push   0x0
c0011dbf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011dc3:	51                   	push   ecx
c0011dc4:	e8 f7 e6 fe ff       	call   c00004c0 <memset>
c0011dc9:	6b c7 27             	imul   eax,edi,0x27
c0011dcc:	83 c4 0c             	add    esp,0xc
c0011dcf:	6a 27                	push   0x27
c0011dd1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011dd8:	50                   	push   eax
c0011dd9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011ddd:	51                   	push   ecx
c0011dde:	e8 3d e8 fe ff       	call   c0000620 <strncpy>
c0011de3:	83 c4 0c             	add    esp,0xc
c0011de6:	55                   	push   ebp
c0011de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011deb:	52                   	push   edx
c0011dec:	56                   	push   esi
c0011ded:	e8 93 fc ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011df2:	eb 19                	jmp    c0011e0d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011df4:	85 d2                	test   edx,edx
c0011df6:	74 18                	je     c0011e10 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011df8:	51                   	push   ecx
c0011df9:	51                   	push   ecx
c0011dfa:	52                   	push   edx
c0011dfb:	56                   	push   esi
c0011dfc:	e8 c0 fc ff ff       	call   c0011ac1 <CmFreeExtent(Reghive_Tag*, int)>
c0011e01:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011e05:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011e09:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	47                   	inc    edi
c0011e11:	83 c3 03             	add    ebx,0x3
c0011e14:	83 ff 07             	cmp    edi,0x7
c0011e17:	0f 85 43 ff ff ff    	jne    c0011d60 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011e1d:	50                   	push   eax
c0011e1e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011e22:	50                   	push   eax
c0011e23:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011e2a:	56                   	push   esi
c0011e2b:	e8 55 fc ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011e30:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011e36:	5b                   	pop    ebx
c0011e37:	5e                   	pop    esi
c0011e38:	5f                   	pop    edi
c0011e39:	5d                   	pop    ebp
c0011e3a:	c3                   	ret    

c0011e3b <CmGetMatch(char*, char*, bool, bool*)>:
c0011e3b:	56                   	push   esi
c0011e3c:	53                   	push   ebx
c0011e3d:	50                   	push   eax
c0011e3e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011e42:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011e47:	74 25                	je     c0011e6e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011e49:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e4c:	31 db                	xor    ebx,ebx
c0011e4e:	50                   	push   eax
c0011e4f:	50                   	push   eax
c0011e50:	8d 04 9d 20 1b 02 c0 	lea    eax,[ebx*4-0x3ffde4e0]
c0011e57:	50                   	push   eax
c0011e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e5c:	e8 7f e8 fe ff       	call   c00006e0 <strcmp>
c0011e61:	83 c4 10             	add    esp,0x10
c0011e64:	85 c0                	test   eax,eax
c0011e66:	74 2e                	je     c0011e96 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011e68:	43                   	inc    ebx
c0011e69:	83 fb 3f             	cmp    ebx,0x3f
c0011e6c:	75 e0                	jne    c0011e4e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011e6e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e71:	31 db                	xor    ebx,ebx
c0011e73:	51                   	push   ecx
c0011e74:	8d 04 9d 20 1b 02 c0 	lea    eax,[ebx*4-0x3ffde4e0]
c0011e7b:	51                   	push   ecx
c0011e7c:	50                   	push   eax
c0011e7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e81:	e8 5a e8 fe ff       	call   c00006e0 <strcmp>
c0011e86:	83 c4 10             	add    esp,0x10
c0011e89:	85 c0                	test   eax,eax
c0011e8b:	74 09                	je     c0011e96 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011e8d:	43                   	inc    ebx
c0011e8e:	83 fb 3f             	cmp    ebx,0x3f
c0011e91:	75 e0                	jne    c0011e73 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011e93:	83 cb ff             	or     ebx,0xffffffff
c0011e96:	5a                   	pop    edx
c0011e97:	89 d8                	mov    eax,ebx
c0011e99:	5b                   	pop    ebx
c0011e9a:	5e                   	pop    esi
c0011e9b:	c3                   	ret    

c0011e9c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011e9c:	55                   	push   ebp
c0011e9d:	31 c0                	xor    eax,eax
c0011e9f:	57                   	push   edi
c0011ea0:	56                   	push   esi
c0011ea1:	53                   	push   ebx
c0011ea2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ea6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011eaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011eae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011eb2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011eb4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011eb7:	83 fd 1f             	cmp    ebp,0x1f
c0011eba:	7f 0b                	jg     c0011ec7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011ebc:	0f b6 c2             	movzx  eax,dl
c0011ebf:	d3 e0                	shl    eax,cl
c0011ec1:	09 07                	or     DWORD PTR [edi],eax
c0011ec3:	b0 01                	mov    al,0x1
c0011ec5:	01 33                	add    DWORD PTR [ebx],esi
c0011ec7:	5b                   	pop    ebx
c0011ec8:	5e                   	pop    esi
c0011ec9:	5f                   	pop    edi
c0011eca:	5d                   	pop    ebp
c0011ecb:	c3                   	ret    

c0011ecc <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011ecc:	57                   	push   edi
c0011ecd:	56                   	push   esi
c0011ece:	53                   	push   ebx
c0011ecf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011ed3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ed7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011edb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011edf:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011ee1:	7c 17                	jl     c0011efa <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011ee3:	b8 01 00 00 00       	mov    eax,0x1
c0011ee8:	8b 17                	mov    edx,DWORD PTR [edi]
c0011eea:	d3 e0                	shl    eax,cl
c0011eec:	48                   	dec    eax
c0011eed:	21 d0                	and    eax,edx
c0011eef:	d3 ea                	shr    edx,cl
c0011ef1:	89 17                	mov    DWORD PTR [edi],edx
c0011ef3:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011ef5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011ef8:	eb 05                	jmp    c0011eff <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011efa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011efd:	31 c0                	xor    eax,eax
c0011eff:	5b                   	pop    ebx
c0011f00:	5e                   	pop    esi
c0011f01:	5f                   	pop    edi
c0011f02:	c3                   	ret    

c0011f03 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011f03:	83 ec 40             	sub    esp,0x40
c0011f06:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f0a:	50                   	push   eax
c0011f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f13:	e8 49 fa ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f18:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011f1c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011f20:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011f24:	89 10                	mov    DWORD PTR [eax],edx
c0011f26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011f29:	83 c4 4c             	add    esp,0x4c
c0011f2c:	c3                   	ret    

c0011f2d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011f2d:	55                   	push   ebp
c0011f2e:	57                   	push   edi
c0011f2f:	56                   	push   esi
c0011f30:	53                   	push   ebx
c0011f31:	83 ec 40             	sub    esp,0x40
c0011f34:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011f38:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011f3c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011f40:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011f44:	53                   	push   ebx
c0011f45:	56                   	push   esi
c0011f46:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f4a:	e8 12 fa ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f4f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011f53:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011f57:	83 c4 0c             	add    esp,0xc
c0011f5a:	53                   	push   ebx
c0011f5b:	56                   	push   esi
c0011f5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f60:	e8 20 fb ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f65:	83 c4 4c             	add    esp,0x4c
c0011f68:	5b                   	pop    ebx
c0011f69:	5e                   	pop    esi
c0011f6a:	5f                   	pop    edi
c0011f6b:	5d                   	pop    ebp
c0011f6c:	c3                   	ret    

c0011f6d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011f6d:	55                   	push   ebp
c0011f6e:	57                   	push   edi
c0011f6f:	56                   	push   esi
c0011f70:	31 f6                	xor    esi,esi
c0011f72:	53                   	push   ebx
c0011f73:	31 db                	xor    ebx,ebx
c0011f75:	83 ec 40             	sub    esp,0x40
c0011f78:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f80:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011f88:	6a 12                	push   0x12
c0011f8a:	68 ee 00 00 00       	push   0xee
c0011f8f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f93:	e8 28 e5 fe ff       	call   c00004c0 <memset>
c0011f98:	83 c4 10             	add    esp,0x10
c0011f9b:	6a 08                	push   0x8
c0011f9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011fa1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011fa5:	50                   	push   eax
c0011fa6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011faa:	57                   	push   edi
c0011fab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011faf:	55                   	push   ebp
c0011fb0:	e8 e7 fe ff ff       	call   c0011e9c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011fbc:	50                   	push   eax
c0011fbd:	6a 06                	push   0x6
c0011fbf:	57                   	push   edi
c0011fc0:	55                   	push   ebp
c0011fc1:	e8 06 ff ff ff       	call   c0011ecc <CmGetShift(unsigned int*, int*, int, bool*)>
c0011fc6:	83 c4 10             	add    esp,0x10
c0011fc9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011fce:	74 07                	je     c0011fd7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011fd0:	46                   	inc    esi
c0011fd1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011fd5:	eb e1                	jmp    c0011fb8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011fd7:	43                   	inc    ebx
c0011fd8:	83 fb 12             	cmp    ebx,0x12
c0011fdb:	75 be                	jne    c0011f9b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011fdd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011fe1:	31 db                	xor    ebx,ebx
c0011fe3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fe6:	50                   	push   eax
c0011fe7:	50                   	push   eax
c0011fe8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011fed:	43                   	inc    ebx
c0011fee:	8d 04 85 20 1b 02 c0 	lea    eax,[eax*4-0x3ffde4e0]
c0011ff5:	50                   	push   eax
c0011ff6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011ffa:	e8 c1 e7 fe ff       	call   c00007c0 <strcat>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	83 fb 18             	cmp    ebx,0x18
c0012005:	75 df                	jne    c0011fe6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012007:	83 c4 3c             	add    esp,0x3c
c001200a:	31 c0                	xor    eax,eax
c001200c:	5b                   	pop    ebx
c001200d:	5e                   	pop    esi
c001200e:	5f                   	pop    edi
c001200f:	5d                   	pop    ebp
c0012010:	c3                   	ret    

c0012011 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012011:	83 ec 40             	sub    esp,0x40
c0012014:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012018:	50                   	push   eax
c0012019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001201d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012021:	e8 3b f9 ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012026:	58                   	pop    eax
c0012027:	5a                   	pop    edx
c0012028:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001202c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012030:	50                   	push   eax
c0012031:	e8 37 ff ff ff       	call   c0011f6d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012036:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001203b:	83 c4 4c             	add    esp,0x4c
c001203e:	c3                   	ret    

c001203f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001203f:	55                   	push   ebp
c0012040:	57                   	push   edi
c0012041:	56                   	push   esi
c0012042:	53                   	push   ebx
c0012043:	31 db                	xor    ebx,ebx
c0012045:	83 ec 70             	sub    esp,0x70
c0012048:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001204f:	6a 30                	push   0x30
c0012051:	6a 00                	push   0x0
c0012053:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012057:	56                   	push   esi
c0012058:	e8 63 e4 fe ff       	call   c00004c0 <memset>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	57                   	push   edi
c0012064:	e8 c7 e4 fe ff       	call   c0000530 <strlen>
c0012069:	83 c4 10             	add    esp,0x10
c001206c:	39 d8                	cmp    eax,ebx
c001206e:	76 16                	jbe    c0012086 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012070:	83 ec 0c             	sub    esp,0xc
c0012073:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012077:	50                   	push   eax
c0012078:	e8 33 e8 fe ff       	call   c00008b0 <toupper>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012083:	43                   	inc    ebx
c0012084:	eb da                	jmp    c0012060 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012086:	52                   	push   edx
c0012087:	31 f6                	xor    esi,esi
c0012089:	6a 18                	push   0x18
c001208b:	31 ff                	xor    edi,edi
c001208d:	6a 3f                	push   0x3f
c001208f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012093:	50                   	push   eax
c0012094:	e8 27 e4 fe ff       	call   c00004c0 <memset>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00120a0:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00120a4:	84 c0                	test   al,al
c00120a6:	0f 84 b0 00 00 00    	je     c001215c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00120ac:	8d 6e 01             	lea    ebp,[esi+0x1]
c00120af:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00120b3:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00120b8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00120bc:	8a 54 2c 30          	mov    dl,BYTE PTR [esp+ebp*1+0x30]
c00120c0:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00120c5:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c00120c9:	83 ec 0c             	sub    esp,0xc
c00120cc:	53                   	push   ebx
c00120cd:	e8 5e e4 fe ff       	call   c0000530 <strlen>
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	85 c0                	test   eax,eax
c00120d7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120db:	74 0b                	je     c00120e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00120dd:	50                   	push   eax
c00120de:	6a 01                	push   0x1
c00120e0:	53                   	push   ebx
c00120e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00120e5:	50                   	push   eax
c00120e6:	eb 0a                	jmp    c00120f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00120e8:	50                   	push   eax
c00120e9:	6a 00                	push   0x0
c00120eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00120ef:	50                   	push   eax
c00120f0:	6a 00                	push   0x0
c00120f2:	e8 44 fd ff ff       	call   c0011e3b <CmGetMatch(char*, char*, bool, bool*)>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	83 f8 ff             	cmp    eax,0xffffffff
c00120fd:	75 1a                	jne    c0012119 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00120ff:	83 ec 0c             	sub    esp,0xc
c0012102:	68 f1 06 02 c0       	push   0xc00206f1
c0012107:	e8 0b e3 ff ff       	call   c0010417 <KePanic(char const*)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	b8 02 00 00 00       	mov    eax,0x2
c0012114:	e9 bc 00 00 00       	jmp    c00121d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012119:	83 ff 18             	cmp    edi,0x18
c001211c:	75 1a                	jne    c0012138 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001211e:	83 ec 0c             	sub    esp,0xc
c0012121:	68 06 07 02 c0       	push   0xc0020706
c0012126:	e8 ec e2 ff ff       	call   c0010417 <KePanic(char const*)>
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	b8 01 00 00 00       	mov    eax,0x1
c0012133:	e9 9d 00 00 00       	jmp    c00121d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012138:	47                   	inc    edi
c0012139:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001213e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012142:	74 02                	je     c0012146 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012144:	89 ee                	mov    esi,ebp
c0012146:	83 ec 0c             	sub    esp,0xc
c0012149:	53                   	push   ebx
c001214a:	e8 e1 e3 fe ff       	call   c0000530 <strlen>
c001214f:	83 c4 10             	add    esp,0x10
c0012152:	85 c0                	test   eax,eax
c0012154:	74 06                	je     c001215c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012156:	46                   	inc    esi
c0012157:	e9 40 ff ff ff       	jmp    c001209c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001215c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012164:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001216c:	50                   	push   eax
c001216d:	31 f6                	xor    esi,esi
c001216f:	6a 12                	push   0x12
c0012171:	31 ff                	xor    edi,edi
c0012173:	68 ee 00 00 00       	push   0xee
c0012178:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001217f:	e8 3c e3 fe ff       	call   c00004c0 <memset>
c0012184:	83 c4 10             	add    esp,0x10
c0012187:	83 fe 17             	cmp    esi,0x17
c001218a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001218e:	7e 26                	jle    c00121b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012190:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012194:	50                   	push   eax
c0012195:	6a 08                	push   0x8
c0012197:	55                   	push   ebp
c0012198:	53                   	push   ebx
c0012199:	e8 2e fd ff ff       	call   c0011ecc <CmGetShift(unsigned int*, int*, int, bool*)>
c001219e:	83 c4 10             	add    esp,0x10
c00121a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121a6:	74 26                	je     c00121ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00121a8:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00121af:	4e                   	dec    esi
c00121b0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00121b3:	47                   	inc    edi
c00121b4:	eb 1c                	jmp    c00121d2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00121b6:	6a 06                	push   0x6
c00121b8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00121bd:	50                   	push   eax
c00121be:	55                   	push   ebp
c00121bf:	53                   	push   ebx
c00121c0:	e8 d7 fc ff ff       	call   c0011e9c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	84 c0                	test   al,al
c00121ca:	75 06                	jne    c00121d2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00121cc:	eb c2                	jmp    c0012190 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00121ce:	31 c0                	xor    eax,eax
c00121d0:	eb 03                	jmp    c00121d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00121d2:	46                   	inc    esi
c00121d3:	eb b2                	jmp    c0012187 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00121d5:	83 c4 6c             	add    esp,0x6c
c00121d8:	5b                   	pop    ebx
c00121d9:	5e                   	pop    esi
c00121da:	5f                   	pop    edi
c00121db:	5d                   	pop    ebp
c00121dc:	c3                   	ret    

c00121dd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00121dd:	53                   	push   ebx
c00121de:	83 ec 3c             	sub    esp,0x3c
c00121e1:	6a 2b                	push   0x2b
c00121e3:	6a 00                	push   0x0
c00121e5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00121e9:	53                   	push   ebx
c00121ea:	e8 d1 e2 fe ff       	call   c00004c0 <memset>
c00121ef:	58                   	pop    eax
c00121f0:	5a                   	pop    edx
c00121f1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00121f5:	50                   	push   eax
c00121f6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00121fa:	e8 40 fe ff ff       	call   c001203f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00121ff:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012204:	83 c4 0c             	add    esp,0xc
c0012207:	6a 15                	push   0x15
c0012209:	6a 00                	push   0x0
c001220b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001220f:	50                   	push   eax
c0012210:	e8 ab e2 fe ff       	call   c00004c0 <memset>
c0012215:	53                   	push   ebx
c0012216:	6a 00                	push   0x0
c0012218:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001221c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012220:	e8 e6 f9 ff ff       	call   c0011c0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012225:	83 c4 58             	add    esp,0x58
c0012228:	5b                   	pop    ebx
c0012229:	c3                   	ret    

c001222a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001222a:	56                   	push   esi
c001222b:	53                   	push   ebx
c001222c:	83 ec 48             	sub    esp,0x48
c001222f:	6a 12                	push   0x12
c0012231:	68 ff 00 00 00       	push   0xff
c0012236:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001223a:	56                   	push   esi
c001223b:	e8 80 e2 fe ff       	call   c00004c0 <memset>
c0012240:	5a                   	pop    edx
c0012241:	59                   	pop    ecx
c0012242:	56                   	push   esi
c0012243:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012247:	e8 f3 fd ff ff       	call   c001203f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001224c:	83 c4 10             	add    esp,0x10
c001224f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012253:	85 db                	test   ebx,ebx
c0012255:	74 42                	je     c0012299 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012257:	50                   	push   eax
c0012258:	8d 44 24 19          	lea    eax,[esp+0x19]
c001225c:	50                   	push   eax
c001225d:	53                   	push   ebx
c001225e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012262:	e8 fa f6 ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012267:	83 c4 0c             	add    esp,0xc
c001226a:	6a 12                	push   0x12
c001226c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012270:	50                   	push   eax
c0012271:	56                   	push   esi
c0012272:	e8 09 e1 fe ff       	call   c0000380 <memcmp>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	85 c0                	test   eax,eax
c001227c:	74 1e                	je     c001229c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001227e:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012283:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012288:	c1 e3 08             	shl    ebx,0x8
c001228b:	09 d8                	or     eax,ebx
c001228d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012292:	c1 e3 10             	shl    ebx,0x10
c0012295:	09 c3                	or     ebx,eax
c0012297:	eb ba                	jmp    c0012253 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012299:	83 cb ff             	or     ebx,0xffffffff
c001229c:	83 c4 44             	add    esp,0x44
c001229f:	89 d8                	mov    eax,ebx
c00122a1:	5b                   	pop    ebx
c00122a2:	5e                   	pop    esi
c00122a3:	c3                   	ret    

c00122a4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00122a4:	57                   	push   edi
c00122a5:	56                   	push   esi
c00122a6:	53                   	push   ebx
c00122a7:	83 ec 34             	sub    esp,0x34
c00122aa:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00122ae:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00122b2:	6a 2b                	push   0x2b
c00122b4:	6a 00                	push   0x0
c00122b6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00122ba:	53                   	push   ebx
c00122bb:	e8 00 e2 fe ff       	call   c00004c0 <memset>
c00122c0:	58                   	pop    eax
c00122c1:	5a                   	pop    edx
c00122c2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00122c6:	50                   	push   eax
c00122c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00122cb:	e8 6f fd ff ff       	call   c001203f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00122d0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00122d4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00122d8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00122dc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00122e0:	53                   	push   ebx
c00122e1:	6a 00                	push   0x0
c00122e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00122e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00122eb:	e8 1b f9 ff ff       	call   c0011c0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122f0:	83 c4 50             	add    esp,0x50
c00122f3:	5b                   	pop    ebx
c00122f4:	5e                   	pop    esi
c00122f5:	5f                   	pop    edi
c00122f6:	c3                   	ret    

c00122f7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00122f7:	55                   	push   ebp
c00122f8:	57                   	push   edi
c00122f9:	56                   	push   esi
c00122fa:	53                   	push   ebx
c00122fb:	83 ec 40             	sub    esp,0x40
c00122fe:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012302:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012306:	6a 2b                	push   0x2b
c0012308:	6a 00                	push   0x0
c001230a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001230e:	56                   	push   esi
c001230f:	e8 ac e1 fe ff       	call   c00004c0 <memset>
c0012314:	5f                   	pop    edi
c0012315:	89 ef                	mov    edi,ebp
c0012317:	58                   	pop    eax
c0012318:	8d 44 24 11          	lea    eax,[esp+0x11]
c001231c:	50                   	push   eax
c001231d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012321:	e8 19 fd ff ff       	call   c001203f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012326:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001232b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012330:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012335:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001233a:	83 c4 10             	add    esp,0x10
c001233d:	85 ed                	test   ebp,ebp
c001233f:	74 14                	je     c0012355 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012341:	51                   	push   ecx
c0012342:	51                   	push   ecx
c0012343:	57                   	push   edi
c0012344:	53                   	push   ebx
c0012345:	e8 09 f7 ff ff       	call   c0011a53 <CmGetNext(Reghive_Tag*, int)>
c001234a:	83 c4 10             	add    esp,0x10
c001234d:	85 c0                	test   eax,eax
c001234f:	74 04                	je     c0012355 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012351:	89 c7                	mov    edi,eax
c0012353:	eb e8                	jmp    c001233d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012355:	56                   	push   esi
c0012356:	6a 00                	push   0x0
c0012358:	57                   	push   edi
c0012359:	53                   	push   ebx
c001235a:	e8 ac f8 ff ff       	call   c0011c0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001235f:	83 c4 0c             	add    esp,0xc
c0012362:	89 c7                	mov    edi,eax
c0012364:	56                   	push   esi
c0012365:	50                   	push   eax
c0012366:	53                   	push   ebx
c0012367:	e8 f5 f5 ff ff       	call   c0011961 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001236c:	58                   	pop    eax
c001236d:	5a                   	pop    edx
c001236e:	6a 6c                	push   0x6c
c0012370:	6a 00                	push   0x0
c0012372:	6a 00                	push   0x0
c0012374:	68 17 07 02 c0       	push   0xc0020717
c0012379:	57                   	push   edi
c001237a:	53                   	push   ebx
c001237b:	e8 24 ff ff ff       	call   c00122a4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012380:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012384:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012388:	c1 e8 10             	shr    eax,0x10
c001238b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001238f:	83 c4 1c             	add    esp,0x1c
c0012392:	56                   	push   esi
c0012393:	57                   	push   edi
c0012394:	53                   	push   ebx
c0012395:	e8 eb f6 ff ff       	call   c0011a85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001239a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001239f:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00123a4:	c1 e0 08             	shl    eax,0x8
c00123a7:	09 c2                	or     edx,eax
c00123a9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00123ae:	c1 e0 10             	shl    eax,0x10
c00123b1:	83 c4 4c             	add    esp,0x4c
c00123b4:	09 d0                	or     eax,edx
c00123b6:	5b                   	pop    ebx
c00123b7:	5e                   	pop    esi
c00123b8:	5f                   	pop    edi
c00123b9:	5d                   	pop    ebp
c00123ba:	c3                   	ret    

c00123bb <zStrtok(char*, char const*)>:
c00123bb:	57                   	push   edi
c00123bc:	56                   	push   esi
c00123bd:	53                   	push   ebx
c00123be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c6:	85 ff                	test   edi,edi
c00123c8:	74 2b                	je     c00123f5 <zStrtok(char*, char const*)+0x3a>
c00123ca:	85 c0                	test   eax,eax
c00123cc:	75 09                	jne    c00123d7 <zStrtok(char*, char const*)+0x1c>
c00123ce:	a1 90 69 02 c0       	mov    eax,ds:0xc0026990
c00123d3:	85 c0                	test   eax,eax
c00123d5:	74 49                	je     c0012420 <zStrtok(char*, char const*)+0x65>
c00123d7:	31 c9                	xor    ecx,ecx
c00123d9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00123dd:	74 03                	je     c00123e2 <zStrtok(char*, char const*)+0x27>
c00123df:	41                   	inc    ecx
c00123e0:	eb f7                	jmp    c00123d9 <zStrtok(char*, char const*)+0x1e>
c00123e2:	31 d2                	xor    edx,edx
c00123e4:	39 ca                	cmp    edx,ecx
c00123e6:	74 11                	je     c00123f9 <zStrtok(char*, char const*)+0x3e>
c00123e8:	8a 1f                	mov    bl,BYTE PTR [edi]
c00123ea:	8d 34 10             	lea    esi,[eax+edx*1]
c00123ed:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c00123f0:	74 13                	je     c0012405 <zStrtok(char*, char const*)+0x4a>
c00123f2:	42                   	inc    edx
c00123f3:	eb ef                	jmp    c00123e4 <zStrtok(char*, char const*)+0x29>
c00123f5:	31 c0                	xor    eax,eax
c00123f7:	eb 27                	jmp    c0012420 <zStrtok(char*, char const*)+0x65>
c00123f9:	c7 05 90 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026990,0x0
c0012403:	eb 1b                	jmp    c0012420 <zStrtok(char*, char const*)+0x65>
c0012405:	3a 18                	cmp    bl,BYTE PTR [eax]
c0012407:	75 0a                	jne    c0012413 <zStrtok(char*, char const*)+0x58>
c0012409:	40                   	inc    eax
c001240a:	a3 90 69 02 c0       	mov    ds:0xc0026990,eax
c001240f:	89 f8                	mov    eax,edi
c0012411:	eb 0d                	jmp    c0012420 <zStrtok(char*, char const*)+0x65>
c0012413:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012417:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001241a:	89 15 90 69 02 c0    	mov    DWORD PTR ds:0xc0026990,edx
c0012420:	5b                   	pop    ebx
c0012421:	5e                   	pop    esi
c0012422:	5f                   	pop    edi
c0012423:	c3                   	ret    

c0012424 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012424:	57                   	push   edi
c0012425:	56                   	push   esi
c0012426:	53                   	push   ebx
c0012427:	81 ec 08 01 00 00    	sub    esp,0x108
c001242d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012434:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001243b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001243f:	53                   	push   ebx
c0012440:	e8 ab e1 fe ff       	call   c00005f0 <strcpy>
c0012445:	59                   	pop    ecx
c0012446:	5e                   	pop    esi
c0012447:	68 7b 0a 02 c0       	push   0xc0020a7b
c001244c:	53                   	push   ebx
c001244d:	e8 69 ff ff ff       	call   c00123bb <zStrtok(char*, char const*)>
c0012452:	bb 01 00 00 00       	mov    ebx,0x1
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	85 c0                	test   eax,eax
c001245c:	74 3b                	je     c0012499 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001245e:	52                   	push   edx
c001245f:	50                   	push   eax
c0012460:	6a 01                	push   0x1
c0012462:	57                   	push   edi
c0012463:	e8 c2 fd ff ff       	call   c001222a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012468:	59                   	pop    ecx
c0012469:	89 c3                	mov    ebx,eax
c001246b:	5e                   	pop    esi
c001246c:	68 7b 0a 02 c0       	push   0xc0020a7b
c0012471:	6a 00                	push   0x0
c0012473:	e8 43 ff ff ff       	call   c00123bb <zStrtok(char*, char const*)>
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	89 c6                	mov    esi,eax
c001247d:	85 c0                	test   eax,eax
c001247f:	74 18                	je     c0012499 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012481:	52                   	push   edx
c0012482:	52                   	push   edx
c0012483:	53                   	push   ebx
c0012484:	57                   	push   edi
c0012485:	e8 8a f5 ff ff       	call   c0011a14 <CmEnterDirectory(Reghive_Tag*, int)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	89 c3                	mov    ebx,eax
c001248f:	83 f8 ff             	cmp    eax,0xffffffff
c0012492:	74 05                	je     c0012499 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012494:	50                   	push   eax
c0012495:	56                   	push   esi
c0012496:	53                   	push   ebx
c0012497:	eb c9                	jmp    c0012462 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012499:	81 c4 00 01 00 00    	add    esp,0x100
c001249f:	89 d8                	mov    eax,ebx
c00124a1:	5b                   	pop    ebx
c00124a2:	5e                   	pop    esi
c00124a3:	5f                   	pop    edi
c00124a4:	c3                   	ret    

c00124a5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00124a5:	55                   	push   ebp
c00124a6:	57                   	push   edi
c00124a7:	56                   	push   esi
c00124a8:	53                   	push   ebx
c00124a9:	83 ec 5c             	sub    esp,0x5c
c00124ac:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00124b0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00124b4:	85 db                	test   ebx,ebx
c00124b6:	0f 8e 84 00 00 00    	jle    c0012540 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00124bc:	57                   	push   edi
c00124bd:	31 ed                	xor    ebp,ebp
c00124bf:	6a 32                	push   0x32
c00124c1:	6a 00                	push   0x0
c00124c3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00124c7:	57                   	push   edi
c00124c8:	e8 f3 df fe ff       	call   c00004c0 <memset>
c00124cd:	83 c4 0c             	add    esp,0xc
c00124d0:	57                   	push   edi
c00124d1:	53                   	push   ebx
c00124d2:	56                   	push   esi
c00124d3:	e8 39 fb ff ff       	call   c0012011 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00124d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00124e3:	7d 13                	jge    c00124f8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00124e5:	83 ec 0c             	sub    esp,0xc
c00124e8:	45                   	inc    ebp
c00124e9:	68 e8 0d 02 c0       	push   0xc0020de8
c00124ee:	e8 70 81 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	eb e7                	jmp    c00124df <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00124f8:	51                   	push   ecx
c00124f9:	57                   	push   edi
c00124fa:	53                   	push   ebx
c00124fb:	68 1d 07 02 c0       	push   0xc002071d
c0012500:	e8 5e 81 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001250d:	75 1e                	jne    c001252d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001250f:	52                   	push   edx
c0012510:	52                   	push   edx
c0012511:	53                   	push   ebx
c0012512:	56                   	push   esi
c0012513:	e8 fc f4 ff ff       	call   c0011a14 <CmEnterDirectory(Reghive_Tag*, int)>
c0012518:	83 c4 0c             	add    esp,0xc
c001251b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001251f:	8d 51 04             	lea    edx,[ecx+0x4]
c0012522:	52                   	push   edx
c0012523:	50                   	push   eax
c0012524:	56                   	push   esi
c0012525:	e8 7b ff ff ff       	call   c00124a5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001252a:	83 c4 10             	add    esp,0x10
c001252d:	50                   	push   eax
c001252e:	50                   	push   eax
c001252f:	53                   	push   ebx
c0012530:	56                   	push   esi
c0012531:	e8 1d f5 ff ff       	call   c0011a53 <CmGetNext(Reghive_Tag*, int)>
c0012536:	83 c4 10             	add    esp,0x10
c0012539:	89 c3                	mov    ebx,eax
c001253b:	e9 74 ff ff ff       	jmp    c00124b4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012540:	83 c4 5c             	add    esp,0x5c
c0012543:	5b                   	pop    ebx
c0012544:	5e                   	pop    esi
c0012545:	5f                   	pop    edi
c0012546:	5d                   	pop    ebp
c0012547:	c3                   	ret    

c0012548 <CmSplitFinalSlashInPlace(char*)>:
c0012548:	53                   	push   ebx
c0012549:	83 ec 14             	sub    esp,0x14
c001254c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012550:	53                   	push   ebx
c0012551:	e8 da df fe ff       	call   c0000530 <strlen>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	48                   	dec    eax
c001255a:	85 c0                	test   eax,eax
c001255c:	74 15                	je     c0012573 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001255e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012561:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012565:	75 09                	jne    c0012570 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012567:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001256a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001256e:	eb 05                	jmp    c0012575 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012570:	48                   	dec    eax
c0012571:	eb e7                	jmp    c001255a <CmSplitFinalSlashInPlace(char*)+0x12>
c0012573:	31 c0                	xor    eax,eax
c0012575:	83 c4 08             	add    esp,0x8
c0012578:	5b                   	pop    ebx
c0012579:	c3                   	ret    

c001257a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001257a:	55                   	push   ebp
c001257b:	57                   	push   edi
c001257c:	56                   	push   esi
c001257d:	53                   	push   ebx
c001257e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012584:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001258b:	8d 46 01             	lea    eax,[esi+0x1]
c001258e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012594:	80 fb 40             	cmp    bl,0x40
c0012597:	75 19                	jne    c00125b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0012599:	8a 06                	mov    al,BYTE PTR [esi]
c001259b:	84 c0                	test   al,al
c001259d:	74 07                	je     c00125a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c001259f:	3c 3a                	cmp    al,0x3a
c00125a1:	74 03                	je     c00125a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c00125a3:	46                   	inc    esi
c00125a4:	eb f3                	jmp    c0012599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c00125a6:	84 c0                	test   al,al
c00125a8:	0f 84 1f 01 00 00    	je     c00126cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00125ae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125b1:	46                   	inc    esi
c00125b2:	50                   	push   eax
c00125b3:	6a 40                	push   0x40
c00125b5:	6a 00                	push   0x0
c00125b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125bb:	50                   	push   eax
c00125bc:	e8 ff de fe ff       	call   c00004c0 <memset>
c00125c1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00125c8:	31 d2                	xor    edx,edx
c00125ca:	83 c4 10             	add    esp,0x10
c00125cd:	8a 07                	mov    al,BYTE PTR [edi]
c00125cf:	84 c0                	test   al,al
c00125d1:	0f 84 f6 00 00 00    	je     c00126cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00125d7:	81 fa c7 00 00 00    	cmp    edx,0xc7
c00125dd:	0f 8f ea 00 00 00    	jg     c00126cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00125e3:	3c 0a                	cmp    al,0xa
c00125e5:	0f 85 d3 00 00 00    	jne    c00126be <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c00125eb:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c00125f0:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c00125f4:	f6 c1 df             	test   cl,0xdf
c00125f7:	0f 94 c2             	sete   dl
c00125fa:	80 f9 23             	cmp    cl,0x23
c00125fd:	0f 94 c0             	sete   al
c0012600:	08 c2                	or     dl,al
c0012602:	75 47                	jne    c001264b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0012604:	8d 41 f7             	lea    eax,[ecx-0x9]
c0012607:	3c 01                	cmp    al,0x1
c0012609:	76 40                	jbe    c001264b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c001260b:	80 f9 5b             	cmp    cl,0x5b
c001260e:	75 3f                	jne    c001264f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0012610:	80 fb 40             	cmp    bl,0x40
c0012613:	75 36                	jne    c001264b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c001261c:	55                   	push   ebp
c001261d:	e8 0e df fe ff       	call   c0000530 <strlen>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	83 f8 3f             	cmp    eax,0x3f
c0012628:	0f 87 9f 00 00 00    	ja     c00126cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001262e:	50                   	push   eax
c001262f:	50                   	push   eax
c0012630:	55                   	push   ebp
c0012631:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012635:	55                   	push   ebp
c0012636:	e8 b5 df fe ff       	call   c00005f0 <strcpy>
c001263b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001263e:	e8 ed de fe ff       	call   c0000530 <strlen>
c0012643:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	31 c9                	xor    ecx,ecx
c001264d:	eb 76                	jmp    c00126c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c001264f:	80 fb 40             	cmp    bl,0x40
c0012652:	74 06                	je     c001265a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0012654:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0012658:	eb 19                	jmp    c0012673 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c001265a:	51                   	push   ecx
c001265b:	51                   	push   ecx
c001265c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012660:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012664:	50                   	push   eax
c0012665:	e8 76 e0 fe ff       	call   c00006e0 <strcmp>
c001266a:	83 c4 10             	add    esp,0x10
c001266d:	85 c0                	test   eax,eax
c001266f:	75 da                	jne    c001264b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0012671:	eb e1                	jmp    c0012654 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0012673:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012676:	84 c0                	test   al,al
c0012678:	0f 94 c1             	sete   cl
c001267b:	3c 3d                	cmp    al,0x3d
c001267d:	0f 94 c2             	sete   dl
c0012680:	08 d1                	or     cl,dl
c0012682:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012686:	75 03                	jne    c001268b <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0012688:	45                   	inc    ebp
c0012689:	eb e8                	jmp    c0012673 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c001268b:	84 c0                	test   al,al
c001268d:	74 3e                	je     c00126cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001268f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0012693:	52                   	push   edx
c0012694:	52                   	push   edx
c0012695:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012699:	50                   	push   eax
c001269a:	56                   	push   esi
c001269b:	e8 40 e0 fe ff       	call   c00006e0 <strcmp>
c00126a0:	83 c4 10             	add    esp,0x10
c00126a3:	85 c0                	test   eax,eax
c00126a5:	75 a4                	jne    c001264b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00126a7:	50                   	push   eax
c00126a8:	8d 55 01             	lea    edx,[ebp+0x1]
c00126ab:	50                   	push   eax
c00126ac:	52                   	push   edx
c00126ad:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00126b4:	e8 37 df fe ff       	call   c00005f0 <strcpy>
c00126b9:	83 c4 10             	add    esp,0x10
c00126bc:	eb 14                	jmp    c00126d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c00126be:	8d 4a 01             	lea    ecx,[edx+0x1]
c00126c1:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c00126c5:	47                   	inc    edi
c00126c6:	89 ca                	mov    edx,ecx
c00126c8:	e9 00 ff ff ff       	jmp    c00125cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c00126cd:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00126d2:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00126d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00126dc:	5b                   	pop    ebx
c00126dd:	5e                   	pop    esi
c00126de:	5f                   	pop    edi
c00126df:	5d                   	pop    ebp
c00126e0:	c3                   	ret    

c00126e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00126e1:	57                   	push   edi
c00126e2:	56                   	push   esi
c00126e3:	53                   	push   ebx
c00126e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00126ea:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00126f1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00126f8:	53                   	push   ebx
c00126f9:	e8 32 de fe ff       	call   c0000530 <strlen>
c00126fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0012701:	89 c7                	mov    edi,eax
c0012703:	e8 28 de fe ff       	call   c0000530 <strlen>
c0012708:	83 c4 10             	add    esp,0x10
c001270b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001270f:	3d ff 00 00 00       	cmp    eax,0xff
c0012714:	0f 87 d3 00 00 00    	ja     c00127ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001271a:	57                   	push   edi
c001271b:	57                   	push   edi
c001271c:	56                   	push   esi
c001271d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012721:	56                   	push   esi
c0012722:	e8 c9 de fe ff       	call   c00005f0 <strcpy>
c0012727:	58                   	pop    eax
c0012728:	5a                   	pop    edx
c0012729:	68 7b 0a 02 c0       	push   0xc0020a7b
c001272e:	56                   	push   esi
c001272f:	e8 8c e0 fe ff       	call   c00007c0 <strcat>
c0012734:	59                   	pop    ecx
c0012735:	5f                   	pop    edi
c0012736:	53                   	push   ebx
c0012737:	56                   	push   esi
c0012738:	e8 83 e0 fe ff       	call   c00007c0 <strcat>
c001273d:	58                   	pop    eax
c001273e:	5a                   	pop    edx
c001273f:	68 27 07 02 c0       	push   0xc0020727
c0012744:	56                   	push   esi
c0012745:	e8 76 e0 fe ff       	call   c00007c0 <strcat>
c001274a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012751:	e8 1d 51 ff ff       	call   c0007873 <malloc>
c0012756:	83 c4 0c             	add    esp,0xc
c0012759:	89 c3                	mov    ebx,eax
c001275b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0012761:	56                   	push   esi
c0012762:	50                   	push   eax
c0012763:	e8 70 84 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	85 db                	test   ebx,ebx
c001276d:	74 7e                	je     c00127ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001276f:	51                   	push   ecx
c0012770:	51                   	push   ecx
c0012771:	6a 01                	push   0x1
c0012773:	53                   	push   ebx
c0012774:	e8 1f 85 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	85 c0                	test   eax,eax
c001277e:	74 08                	je     c0012788 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012780:	83 ec 0c             	sub    esp,0xc
c0012783:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012785:	53                   	push   ebx
c0012786:	eb 5f                	jmp    c00127e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012788:	52                   	push   edx
c0012789:	8d 44 24 17          	lea    eax,[esp+0x17]
c001278d:	50                   	push   eax
c001278e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012792:	50                   	push   eax
c0012793:	53                   	push   ebx
c0012794:	e8 ab 87 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c0012799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001279d:	83 c4 10             	add    esp,0x10
c00127a0:	89 c1                	mov    ecx,eax
c00127a2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00127a6:	74 31                	je     c00127d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00127a8:	83 ec 0c             	sub    esp,0xc
c00127ab:	50                   	push   eax
c00127ac:	e8 c2 50 ff ff       	call   c0007873 <malloc>
c00127b1:	89 c6                	mov    esi,eax
c00127b3:	58                   	pop    eax
c00127b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127b6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00127ba:	52                   	push   edx
c00127bb:	56                   	push   esi
c00127bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127c4:	53                   	push   ebx
c00127c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127c8:	83 c4 20             	add    esp,0x20
c00127cb:	85 c0                	test   eax,eax
c00127cd:	75 0a                	jne    c00127d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00127cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127d3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00127d7:	74 18                	je     c00127f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00127d9:	83 ec 0c             	sub    esp,0xc
c00127dc:	53                   	push   ebx
c00127dd:	e8 14 85 ff ff       	call   c000acf6 <File::close()>
c00127e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127ea:	83 c4 10             	add    esp,0x10
c00127ed:	31 c0                	xor    eax,eax
c00127ef:	eb 3b                	jmp    c001282c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00127f1:	83 ec 0c             	sub    esp,0xc
c00127f4:	53                   	push   ebx
c00127f5:	e8 fc 84 ff ff       	call   c000acf6 <File::close()>
c00127fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012802:	83 c4 0c             	add    esp,0xc
c0012805:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001280c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012813:	56                   	push   esi
c0012814:	e8 61 fd ff ff       	call   c001257a <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012819:	89 34 24             	mov    DWORD PTR [esp],esi
c001281c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012820:	e8 5e 50 ff ff       	call   c0007883 <free>
c0012825:	83 c4 10             	add    esp,0x10
c0012828:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001282c:	81 c4 20 01 00 00    	add    esp,0x120
c0012832:	5b                   	pop    ebx
c0012833:	5e                   	pop    esi
c0012834:	5f                   	pop    edi
c0012835:	c3                   	ret    

c0012836 <Reg::getLine(char*, char*, char*)>:
c0012836:	57                   	push   edi
c0012837:	56                   	push   esi
c0012838:	53                   	push   ebx
c0012839:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001283d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012841:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012845:	57                   	push   edi
c0012846:	56                   	push   esi
c0012847:	53                   	push   ebx
c0012848:	68 2c 07 02 c0       	push   0xc002072c
c001284d:	e8 8f fe ff ff       	call   c00126e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012852:	83 c4 10             	add    esp,0x10
c0012855:	84 c0                	test   al,al
c0012857:	75 10                	jne    c0012869 <Reg::getLine(char*, char*, char*)+0x33>
c0012859:	57                   	push   edi
c001285a:	56                   	push   esi
c001285b:	53                   	push   ebx
c001285c:	68 51 07 02 c0       	push   0xc0020751
c0012861:	e8 7b fe ff ff       	call   c00126e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	5b                   	pop    ebx
c001286a:	5e                   	pop    esi
c001286b:	5f                   	pop    edi
c001286c:	c3                   	ret    

c001286d <Reg::readInt(char*, char*, int*)>:
c001286d:	55                   	push   ebp
c001286e:	57                   	push   edi
c001286f:	56                   	push   esi
c0012870:	53                   	push   ebx
c0012871:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012877:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001287b:	57                   	push   edi
c001287c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012883:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001288a:	e8 a7 ff ff ff       	call   c0012836 <Reg::getLine(char*, char*, char*)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	84 c0                	test   al,al
c0012894:	0f 84 b2 00 00 00    	je     c001294c <Reg::readInt(char*, char*, int*)+0xdf>
c001289a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001289e:	80 fa 2b             	cmp    dl,0x2b
c00128a1:	74 0c                	je     c00128af <Reg::readInt(char*, char*, int*)+0x42>
c00128a3:	80 fa 2d             	cmp    dl,0x2d
c00128a6:	75 0e                	jne    c00128b6 <Reg::readInt(char*, char*, int*)+0x49>
c00128a8:	ba 01 00 00 00       	mov    edx,0x1
c00128ad:	eb 0b                	jmp    c00128ba <Reg::readInt(char*, char*, int*)+0x4d>
c00128af:	ba 01 00 00 00       	mov    edx,0x1
c00128b4:	eb 02                	jmp    c00128b8 <Reg::readInt(char*, char*, int*)+0x4b>
c00128b6:	31 d2                	xor    edx,edx
c00128b8:	31 c0                	xor    eax,eax
c00128ba:	be 0a 00 00 00       	mov    esi,0xa
c00128bf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00128c4:	75 20                	jne    c00128e6 <Reg::readInt(char*, char*, int*)+0x79>
c00128c6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00128ca:	80 f9 78             	cmp    cl,0x78
c00128cd:	75 0a                	jne    c00128d9 <Reg::readInt(char*, char*, int*)+0x6c>
c00128cf:	83 c2 02             	add    edx,0x2
c00128d2:	be 10 00 00 00       	mov    esi,0x10
c00128d7:	eb 0d                	jmp    c00128e6 <Reg::readInt(char*, char*, int*)+0x79>
c00128d9:	80 f9 62             	cmp    cl,0x62
c00128dc:	75 08                	jne    c00128e6 <Reg::readInt(char*, char*, int*)+0x79>
c00128de:	83 c2 02             	add    edx,0x2
c00128e1:	be 02 00 00 00       	mov    esi,0x2
c00128e6:	01 d7                	add    edi,edx
c00128e8:	31 d2                	xor    edx,edx
c00128ea:	8a 1f                	mov    bl,BYTE PTR [edi]
c00128ec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00128f0:	84 db                	test   bl,bl
c00128f2:	0f 94 c3             	sete   bl
c00128f5:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c00128fa:	0f 94 c1             	sete   cl
c00128fd:	08 cb                	or     bl,cl
c00128ff:	75 3a                	jne    c001293b <Reg::readInt(char*, char*, int*)+0xce>
c0012901:	0f af d6             	imul   edx,esi
c0012904:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0012909:	83 fe 10             	cmp    esi,0x10
c001290c:	75 26                	jne    c0012934 <Reg::readInt(char*, char*, int*)+0xc7>
c001290e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012912:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012915:	89 e9                	mov    ecx,ebp
c0012917:	80 f9 05             	cmp    cl,0x5
c001291a:	77 06                	ja     c0012922 <Reg::readInt(char*, char*, int*)+0xb5>
c001291c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0012920:	eb 16                	jmp    c0012938 <Reg::readInt(char*, char*, int*)+0xcb>
c0012922:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012926:	83 e9 61             	sub    ecx,0x61
c0012929:	80 f9 05             	cmp    cl,0x5
c001292c:	77 06                	ja     c0012934 <Reg::readInt(char*, char*, int*)+0xc7>
c001292e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0012932:	eb 04                	jmp    c0012938 <Reg::readInt(char*, char*, int*)+0xcb>
c0012934:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0012938:	47                   	inc    edi
c0012939:	eb af                	jmp    c00128ea <Reg::readInt(char*, char*, int*)+0x7d>
c001293b:	84 c0                	test   al,al
c001293d:	74 02                	je     c0012941 <Reg::readInt(char*, char*, int*)+0xd4>
c001293f:	f7 da                	neg    edx
c0012941:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012948:	89 10                	mov    DWORD PTR [eax],edx
c001294a:	88 d8                	mov    al,bl
c001294c:	81 c4 ec 00 00 00    	add    esp,0xec
c0012952:	5b                   	pop    ebx
c0012953:	5e                   	pop    esi
c0012954:	5f                   	pop    edi
c0012955:	5d                   	pop    ebp
c0012956:	c3                   	ret    

c0012957 <Reg::readString(char*, char*, char*, int)>:
c0012957:	57                   	push   edi
c0012958:	56                   	push   esi
c0012959:	53                   	push   ebx
c001295a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012960:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012964:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001296b:	57                   	push   edi
c001296c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012973:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001297a:	e8 b7 fe ff ff       	call   c0012836 <Reg::getLine(char*, char*, char*)>
c001297f:	83 c4 10             	add    esp,0x10
c0012982:	89 c6                	mov    esi,eax
c0012984:	84 c0                	test   al,al
c0012986:	74 44                	je     c00129cc <Reg::readString(char*, char*, char*, int)+0x75>
c0012988:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001298f:	31 c0                	xor    eax,eax
c0012991:	4a                   	dec    edx
c0012992:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012995:	84 c9                	test   cl,cl
c0012997:	74 0f                	je     c00129a8 <Reg::readString(char*, char*, char*, int)+0x51>
c0012999:	39 c2                	cmp    edx,eax
c001299b:	7e 0b                	jle    c00129a8 <Reg::readString(char*, char*, char*, int)+0x51>
c001299d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00129a0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00129a5:	40                   	inc    eax
c00129a6:	eb ea                	jmp    c0012992 <Reg::readString(char*, char*, char*, int)+0x3b>
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	53                   	push   ebx
c00129ac:	e8 7f db fe ff       	call   c0000530 <strlen>
c00129b1:	83 c4 10             	add    esp,0x10
c00129b4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00129b9:	75 11                	jne    c00129cc <Reg::readString(char*, char*, char*, int)+0x75>
c00129bb:	83 ec 0c             	sub    esp,0xc
c00129be:	53                   	push   ebx
c00129bf:	e8 6c db fe ff       	call   c0000530 <strlen>
c00129c4:	83 c4 10             	add    esp,0x10
c00129c7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00129cc:	81 c4 d0 00 00 00    	add    esp,0xd0
c00129d2:	89 f0                	mov    eax,esi
c00129d4:	5b                   	pop    ebx
c00129d5:	5e                   	pop    esi
c00129d6:	5f                   	pop    edi
c00129d7:	c3                   	ret    

c00129d8 <Reg::readBool(char*, char*, bool*)>:
c00129d8:	83 ec 20             	sub    esp,0x20
c00129db:	8d 44 24 10          	lea    eax,[esp+0x10]
c00129df:	50                   	push   eax
c00129e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129e8:	e8 80 fe ff ff       	call   c001286d <Reg::readInt(char*, char*, int*)>
c00129ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00129f1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00129f6:	0f 95 02             	setne  BYTE PTR [edx]
c00129f9:	83 c4 2c             	add    esp,0x2c
c00129fc:	c3                   	ret    

c00129fd <Reg::readBoolWithDefault(char*, char*, bool)>:
c00129fd:	53                   	push   ebx
c00129fe:	83 ec 1c             	sub    esp,0x1c
c0012a01:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012a05:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012a09:	50                   	push   eax
c0012a0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a12:	e8 c1 ff ff ff       	call   c00129d8 <Reg::readBool(char*, char*, bool*)>
c0012a17:	83 c4 10             	add    esp,0x10
c0012a1a:	84 c0                	test   al,al
c0012a1c:	74 04                	je     c0012a22 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012a1e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012a22:	83 c4 18             	add    esp,0x18
c0012a25:	88 d8                	mov    al,bl
c0012a27:	5b                   	pop    ebx
c0012a28:	c3                   	ret    

c0012a29 <Reg::readIntWithDefault(char*, char*, int)>:
c0012a29:	53                   	push   ebx
c0012a2a:	83 ec 1c             	sub    esp,0x1c
c0012a2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012a31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012a35:	50                   	push   eax
c0012a36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a3e:	e8 2a fe ff ff       	call   c001286d <Reg::readInt(char*, char*, int*)>
c0012a43:	83 c4 10             	add    esp,0x10
c0012a46:	84 c0                	test   al,al
c0012a48:	74 04                	je     c0012a4e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012a4a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a4e:	83 c4 18             	add    esp,0x18
c0012a51:	89 d8                	mov    eax,ebx
c0012a53:	5b                   	pop    ebx
c0012a54:	c3                   	ret    

c0012a55 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012a55:	57                   	push   edi
c0012a56:	56                   	push   esi
c0012a57:	56                   	push   esi
c0012a58:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012a5c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012a60:	56                   	push   esi
c0012a61:	57                   	push   edi
c0012a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a6a:	e8 e8 fe ff ff       	call   c0012957 <Reg::readString(char*, char*, char*, int)>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	84 c0                	test   al,al
c0012a74:	75 1a                	jne    c0012a90 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012a76:	51                   	push   ecx
c0012a77:	56                   	push   esi
c0012a78:	6a 00                	push   0x0
c0012a7a:	57                   	push   edi
c0012a7b:	e8 40 da fe ff       	call   c00004c0 <memset>
c0012a80:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012a83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012a90:	5a                   	pop    edx
c0012a91:	89 f8                	mov    eax,edi
c0012a93:	5e                   	pop    esi
c0012a94:	5f                   	pop    edi
c0012a95:	c3                   	ret    

c0012a96 <SysEject(regs*)>:
c0012a96:	83 ec 0c             	sub    esp,0xc
c0012a99:	83 ca ff             	or     edx,0xffffffff
c0012a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012aa3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012aa8:	83 e9 41             	sub    ecx,0x41
c0012aab:	83 f9 19             	cmp    ecx,0x19
c0012aae:	77 18                	ja     c0012ac8 <SysEject(regs*)+0x32>
c0012ab0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012ab7:	85 c9                	test   ecx,ecx
c0012ab9:	74 0d                	je     c0012ac8 <SysEject(regs*)+0x32>
c0012abb:	83 ec 0c             	sub    esp,0xc
c0012abe:	51                   	push   ecx
c0012abf:	e8 7a a2 ff ff       	call   c000cd3e <LogicalDisk::eject()>
c0012ac4:	83 c4 10             	add    esp,0x10
c0012ac7:	99                   	cdq    
c0012ac8:	83 c4 0c             	add    esp,0xc
c0012acb:	c3                   	ret    

c0012acc <SysExit(regs*)>:
c0012acc:	83 ec 18             	sub    esp,0x18
c0012acf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ad3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ad6:	e8 d9 29 00 00       	call   c00154b4 <terminateTask(int)>
c0012adb:	83 c8 ff             	or     eax,0xffffffff
c0012ade:	89 c2                	mov    edx,eax
c0012ae0:	83 c4 1c             	add    esp,0x1c
c0012ae3:	c3                   	ret    

c0012ae4 <SysGetCwd(regs*)>:
c0012ae4:	83 ec 10             	sub    esp,0x10
c0012ae7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012aeb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012aee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012af1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012af6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012af9:	e8 dc 7e ff ff       	call   c000a9da <Fs::getcwd(Process*, char*, int)>
c0012afe:	83 c4 1c             	add    esp,0x1c
c0012b01:	99                   	cdq    
c0012b02:	c3                   	ret    

c0012b03 <SysGetPID(regs*)>:
c0012b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b0d:	99                   	cdq    
c0012b0e:	c3                   	ret    

c0012b0f <SysGetRAMData(regs*)>:
c0012b0f:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c0012b19:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0012b1f:	99                   	cdq    
c0012b20:	f7 f9                	idiv   ecx
c0012b22:	c1 e0 18             	shl    eax,0x18
c0012b25:	09 c8                	or     eax,ecx
c0012b27:	99                   	cdq    
c0012b28:	c3                   	ret    

c0012b29 <SysGetVGAPtr(regs*)>:
c0012b29:	55                   	push   ebp
c0012b2a:	57                   	push   edi
c0012b2b:	56                   	push   esi
c0012b2c:	53                   	push   ebx
c0012b2d:	83 ec 18             	sub    esp,0x18
c0012b30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b34:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012b37:	e8 5c 24 00 00       	call   c0014f98 <Thr::processFromPID(int)>
c0012b3c:	83 c4 10             	add    esp,0x10
c0012b3f:	89 c1                	mov    ecx,eax
c0012b41:	b8 01 00 00 00       	mov    eax,0x1
c0012b46:	85 c9                	test   ecx,ecx
c0012b48:	74 57                	je     c0012ba1 <SysGetVGAPtr(regs*)+0x78>
c0012b4a:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012b50:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012b54:	74 0c                	je     c0012b62 <SysGetVGAPtr(regs*)+0x39>
c0012b56:	83 ec 0c             	sub    esp,0xc
c0012b59:	55                   	push   ebp
c0012b5a:	e8 78 59 ff ff       	call   c00084d7 <setActiveTerminal(VgaText*)>
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012b65:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012b68:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012b6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b72:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012b75:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012b7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b7e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012b81:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012b87:	50                   	push   eax
c0012b88:	50                   	push   eax
c0012b89:	68 6c 07 02 c0       	push   0xc002076c
c0012b8e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b91:	05 a8 0f 00 00       	add    eax,0xfa8
c0012b96:	50                   	push   eax
c0012b97:	e8 54 da fe ff       	call   c00005f0 <strcpy>
c0012b9c:	83 c4 10             	add    esp,0x10
c0012b9f:	31 c0                	xor    eax,eax
c0012ba1:	83 c4 0c             	add    esp,0xc
c0012ba4:	31 d2                	xor    edx,edx
c0012ba6:	5b                   	pop    ebx
c0012ba7:	5e                   	pop    esi
c0012ba8:	5f                   	pop    edi
c0012ba9:	5d                   	pop    ebp
c0012baa:	c3                   	ret    
c0012bab:	90                   	nop

c0012bac <SysKill(regs*)>:
c0012bac:	53                   	push   ebx
c0012bad:	83 ec 08             	sub    esp,0x8
c0012bb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bb4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0012bb8:	75 16                	jne    c0012bd0 <SysKill(regs*)+0x24>
c0012bba:	83 ec 0c             	sub    esp,0xc
c0012bbd:	68 76 07 02 c0       	push   0xc0020776
c0012bc2:	e8 50 d8 ff ff       	call   c0010417 <KePanic(char const*)>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	e9 89 00 00 00       	jmp    c0012c58 <SysKill(regs*)+0xac>
c0012bcf:	90                   	nop
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	68 84 71 02 c0       	push   0xc0027184
c0012bd8:	e8 ef b8 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0012be0:	83 c4 10             	add    esp,0x10
c0012be3:	85 c0                	test   eax,eax
c0012be5:	74 19                	je     c0012c00 <SysKill(regs*)+0x54>
c0012be7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012bea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012bed:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012bef:	74 33                	je     c0012c24 <SysKill(regs*)+0x78>
c0012bf1:	52                   	push   edx
c0012bf2:	52                   	push   edx
c0012bf3:	50                   	push   eax
c0012bf4:	68 84 71 02 c0       	push   0xc0027184
c0012bf9:	e8 ea bb 00 00       	call   c001e7e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012bfe:	eb e0                	jmp    c0012be0 <SysKill(regs*)+0x34>
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	68 78 71 02 c0       	push   0xc0027178
c0012c08:	e8 bf b8 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	85 c0                	test   eax,eax
c0012c15:	74 41                	je     c0012c58 <SysKill(regs*)+0xac>
c0012c17:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012c1a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012c1d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012c1f:	75 27                	jne    c0012c48 <SysKill(regs*)+0x9c>
c0012c21:	8d 76 00             	lea    esi,[esi+0x0]
c0012c24:	51                   	push   ecx
c0012c25:	51                   	push   ecx
c0012c26:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012c29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c31:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012c37:	e8 4b dc ff ff       	call   c0010887 <KeRaiseSignal(SigHandlerBlock*, int)>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	31 c0                	xor    eax,eax
c0012c41:	31 d2                	xor    edx,edx
c0012c43:	eb 1b                	jmp    c0012c60 <SysKill(regs*)+0xb4>
c0012c45:	8d 76 00             	lea    esi,[esi+0x0]
c0012c48:	52                   	push   edx
c0012c49:	52                   	push   edx
c0012c4a:	50                   	push   eax
c0012c4b:	68 78 71 02 c0       	push   0xc0027178
c0012c50:	e8 93 bb 00 00       	call   c001e7e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012c55:	eb b9                	jmp    c0012c10 <SysKill(regs*)+0x64>
c0012c57:	90                   	nop
c0012c58:	83 c8 ff             	or     eax,0xffffffff
c0012c5b:	89 c2                	mov    edx,eax
c0012c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c60:	83 c4 08             	add    esp,0x8
c0012c63:	5b                   	pop    ebx
c0012c64:	c3                   	ret    

c0012c65 <SysLoadDLL(regs*)>:
c0012c65:	56                   	push   esi
c0012c66:	31 d2                	xor    edx,edx
c0012c68:	53                   	push   ebx
c0012c69:	b8 01 00 00 00       	mov    eax,0x1
c0012c6e:	51                   	push   ecx
c0012c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c73:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012c77:	0f 84 8c 00 00 00    	je     c0012d09 <SysLoadDLL(regs*)+0xa4>
c0012c7d:	83 ec 0c             	sub    esp,0xc
c0012c80:	68 14 01 00 00       	push   0x114
c0012c85:	e8 e9 4b ff ff       	call   c0007873 <malloc>
c0012c8a:	89 c3                	mov    ebx,eax
c0012c8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c91:	83 c4 0c             	add    esp,0xc
c0012c94:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012c97:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012c9a:	53                   	push   ebx
c0012c9b:	e8 38 7f ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0012ca0:	83 c4 10             	add    esp,0x10
c0012ca3:	31 d2                	xor    edx,edx
c0012ca5:	b8 02 00 00 00       	mov    eax,0x2
c0012caa:	85 db                	test   ebx,ebx
c0012cac:	74 5b                	je     c0012d09 <SysLoadDLL(regs*)+0xa4>
c0012cae:	83 ec 0c             	sub    esp,0xc
c0012cb1:	53                   	push   ebx
c0012cb2:	e8 4f 82 ff ff       	call   c000af06 <File::exists()>
c0012cb7:	83 c4 10             	add    esp,0x10
c0012cba:	84 c0                	test   al,al
c0012cbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cbe:	75 11                	jne    c0012cd1 <SysLoadDLL(regs*)+0x6c>
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	53                   	push   ebx
c0012cc4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	b8 03 00 00 00       	mov    eax,0x3
c0012ccf:	eb 36                	jmp    c0012d07 <SysLoadDLL(regs*)+0xa2>
c0012cd1:	83 ec 0c             	sub    esp,0xc
c0012cd4:	53                   	push   ebx
c0012cd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cd8:	58                   	pop    eax
c0012cd9:	5a                   	pop    edx
c0012cda:	6a 00                	push   0x0
c0012cdc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012cdf:	e8 14 14 00 00       	call   c00140f8 <Thr::loadDLL(char const*, bool)>
c0012ce4:	83 c4 10             	add    esp,0x10
c0012ce7:	89 c1                	mov    ecx,eax
c0012ce9:	31 d2                	xor    edx,edx
c0012ceb:	b8 04 00 00 00       	mov    eax,0x4
c0012cf0:	85 c9                	test   ecx,ecx
c0012cf2:	74 15                	je     c0012d09 <SysLoadDLL(regs*)+0xa4>
c0012cf4:	53                   	push   ebx
c0012cf5:	53                   	push   ebx
c0012cf6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012cfc:	51                   	push   ecx
c0012cfd:	e8 2b 16 00 00       	call   c001432d <Thr::executeDLL(unsigned long, void*)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	31 c0                	xor    eax,eax
c0012d07:	31 d2                	xor    edx,edx
c0012d09:	59                   	pop    ecx
c0012d0a:	5b                   	pop    ebx
c0012d0b:	5e                   	pop    esi
c0012d0c:	c3                   	ret    

c0012d0d <SysRead(regs*)>:
c0012d0d:	57                   	push   edi
c0012d0e:	56                   	push   esi
c0012d0f:	53                   	push   ebx
c0012d10:	83 ec 10             	sub    esp,0x10
c0012d13:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d17:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012d1a:	83 f8 02             	cmp    eax,0x2
c0012d1d:	77 10                	ja     c0012d2f <SysRead(regs*)+0x22>
c0012d1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d27:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012d2d:	eb 0e                	jmp    c0012d3d <SysRead(regs*)+0x30>
c0012d2f:	83 ec 0c             	sub    esp,0xc
c0012d32:	50                   	push   eax
c0012d33:	e8 df 64 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c0012d38:	83 c4 10             	add    esp,0x10
c0012d3b:	89 c1                	mov    ecx,eax
c0012d3d:	83 c8 ff             	or     eax,0xffffffff
c0012d40:	85 c9                	test   ecx,ecx
c0012d42:	89 c2                	mov    edx,eax
c0012d44:	74 28                	je     c0012d6e <SysRead(regs*)+0x61>
c0012d46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d53:	31 ff                	xor    edi,edi
c0012d55:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012d59:	52                   	push   edx
c0012d5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d5d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012d60:	57                   	push   edi
c0012d61:	56                   	push   esi
c0012d62:	51                   	push   ecx
c0012d63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012d6a:	83 c4 20             	add    esp,0x20
c0012d6d:	99                   	cdq    
c0012d6e:	83 c4 10             	add    esp,0x10
c0012d71:	5b                   	pop    ebx
c0012d72:	5e                   	pop    esi
c0012d73:	5f                   	pop    edi
c0012d74:	c3                   	ret    

c0012d75 <SysRegisterSignal(regs*)>:
c0012d75:	83 ec 18             	sub    esp,0x18
c0012d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d7c:	6a 00                	push   0x0
c0012d7e:	6a 00                	push   0x0
c0012d80:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012d83:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012d86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d8e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012d94:	e8 b8 da ff ff       	call   c0010851 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012d99:	83 c4 2c             	add    esp,0x2c
c0012d9c:	99                   	cdq    
c0012d9d:	c3                   	ret    

c0012d9e <SysRegistryGetTypeFromPath(regs*)>:
c0012d9e:	57                   	push   edi
c0012d9f:	56                   	push   esi
c0012da0:	53                   	push   ebx
c0012da1:	81 ec 38 01 00 00    	sub    esp,0x138
c0012da7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0012dae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012db1:	68 97 07 02 c0       	push   0xc0020797
c0012db6:	e8 a8 78 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012dbb:	5a                   	pop    edx
c0012dbc:	59                   	pop    ecx
c0012dbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012dc0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012dc3:	e8 5c f6 ff ff       	call   c0012424 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012dc8:	5f                   	pop    edi
c0012dc9:	89 c6                	mov    esi,eax
c0012dcb:	5a                   	pop    edx
c0012dcc:	50                   	push   eax
c0012dcd:	68 b7 07 02 c0       	push   0xc00207b7
c0012dd2:	e8 8c 78 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012dd7:	83 c4 10             	add    esp,0x10
c0012dda:	85 f6                	test   esi,esi
c0012ddc:	74 28                	je     c0012e06 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0012dde:	50                   	push   eax
c0012ddf:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012de3:	57                   	push   edi
c0012de4:	56                   	push   esi
c0012de5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012de8:	e8 24 f2 ff ff       	call   c0012011 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012ded:	83 c4 0c             	add    esp,0xc
c0012df0:	57                   	push   edi
c0012df1:	89 c3                	mov    ebx,eax
c0012df3:	50                   	push   eax
c0012df4:	68 bf 07 02 c0       	push   0xc00207bf
c0012df9:	e8 65 78 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012dfe:	89 d8                	mov    eax,ebx
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	99                   	cdq    
c0012e04:	eb 05                	jmp    c0012e0b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0012e06:	83 c8 ff             	or     eax,0xffffffff
c0012e09:	89 c2                	mov    edx,eax
c0012e0b:	81 c4 30 01 00 00    	add    esp,0x130
c0012e11:	5b                   	pop    ebx
c0012e12:	5e                   	pop    esi
c0012e13:	5f                   	pop    edi
c0012e14:	c3                   	ret    

c0012e15 <SysRegistryReadExtent(regs*)>:
c0012e15:	83 ec 1c             	sub    esp,0x1c
c0012e18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012e1c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012e1f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0012e22:	85 c0                	test   eax,eax
c0012e24:	79 1f                	jns    c0012e45 <SysRegistryReadExtent(regs*)+0x30>
c0012e26:	52                   	push   edx
c0012e27:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0012e2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012e30:	52                   	push   edx
c0012e31:	50                   	push   eax
c0012e32:	51                   	push   ecx
c0012e33:	e8 cb f0 ff ff       	call   c0011f03 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0012e38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	eb 14                	jmp    c0012e59 <SysRegistryReadExtent(regs*)+0x44>
c0012e45:	83 ec 04             	sub    esp,0x4
c0012e48:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0012e4b:	50                   	push   eax
c0012e4c:	51                   	push   ecx
c0012e4d:	e8 4b eb ff ff       	call   c001199d <CmGetString(Reghive_Tag*, int, char*)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	31 c0                	xor    eax,eax
c0012e57:	31 d2                	xor    edx,edx
c0012e59:	83 c4 1c             	add    esp,0x1c
c0012e5c:	c3                   	ret    

c0012e5d <SysRegistryPathToExtentLookup(regs*)>:
c0012e5d:	53                   	push   ebx
c0012e5e:	83 ec 10             	sub    esp,0x10
c0012e61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e65:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e68:	68 d5 07 02 c0       	push   0xc00207d5
c0012e6d:	e8 f1 77 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012e72:	58                   	pop    eax
c0012e73:	5a                   	pop    edx
c0012e74:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e77:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e7a:	e8 a5 f5 ff ff       	call   c0012424 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012e7f:	83 c4 18             	add    esp,0x18
c0012e82:	99                   	cdq    
c0012e83:	5b                   	pop    ebx
c0012e84:	c3                   	ret    

c0012e85 <SysRegistryEnterDirectory(regs*)>:
c0012e85:	53                   	push   ebx
c0012e86:	83 ec 10             	sub    esp,0x10
c0012e89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e8d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e90:	68 f8 07 02 c0       	push   0xc00207f8
c0012e95:	e8 c9 77 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012e9a:	58                   	pop    eax
c0012e9b:	5a                   	pop    edx
c0012e9c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e9f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012ea2:	e8 6d eb ff ff       	call   c0011a14 <CmEnterDirectory(Reghive_Tag*, int)>
c0012ea7:	83 c4 18             	add    esp,0x18
c0012eaa:	99                   	cdq    
c0012eab:	5b                   	pop    ebx
c0012eac:	c3                   	ret    

c0012ead <SysRegistryGetNext(regs*)>:
c0012ead:	53                   	push   ebx
c0012eae:	83 ec 10             	sub    esp,0x10
c0012eb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012eb5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012eb8:	68 16 08 02 c0       	push   0xc0020816
c0012ebd:	e8 a1 77 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0012ec2:	58                   	pop    eax
c0012ec3:	5a                   	pop    edx
c0012ec4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012ec7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012eca:	e8 84 eb ff ff       	call   c0011a53 <CmGetNext(Reghive_Tag*, int)>
c0012ecf:	83 c4 18             	add    esp,0x18
c0012ed2:	99                   	cdq    
c0012ed3:	5b                   	pop    ebx
c0012ed4:	c3                   	ret    

c0012ed5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0012ed5:	57                   	push   edi
c0012ed6:	56                   	push   esi
c0012ed7:	53                   	push   ebx
c0012ed8:	81 ec 34 01 00 00    	sub    esp,0x134
c0012ede:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012ee5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012ee9:	57                   	push   edi
c0012eea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012eed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012ef0:	e8 1c f1 ff ff       	call   c0012011 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012ef5:	89 c3                	mov    ebx,eax
c0012ef7:	58                   	pop    eax
c0012ef8:	5a                   	pop    edx
c0012ef9:	57                   	push   edi
c0012efa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0012efd:	e8 ee d6 fe ff       	call   c00005f0 <strcpy>
c0012f02:	81 c4 40 01 00 00    	add    esp,0x140
c0012f08:	89 d8                	mov    eax,ebx
c0012f0a:	5b                   	pop    ebx
c0012f0b:	5e                   	pop    esi
c0012f0c:	99                   	cdq    
c0012f0d:	5f                   	pop    edi
c0012f0e:	c3                   	ret    

c0012f0f <SysRegistryOpen(regs*)>:
c0012f0f:	83 ec 18             	sub    esp,0x18
c0012f12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f16:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012f19:	e8 0f e9 ff ff       	call   c001182d <CmOpen(char const*)>
c0012f1e:	83 c4 1c             	add    esp,0x1c
c0012f21:	99                   	cdq    
c0012f22:	c3                   	ret    

c0012f23 <SysRegistryClose(regs*)>:
c0012f23:	83 ec 18             	sub    esp,0x18
c0012f26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f2d:	e8 19 ea ff ff       	call   c001194b <CmClose(Reghive_Tag*)>
c0012f32:	31 c0                	xor    eax,eax
c0012f34:	31 d2                	xor    edx,edx
c0012f36:	83 c4 1c             	add    esp,0x1c
c0012f39:	c3                   	ret    

c0012f3a <SysSbrk(regs*)>:
c0012f3a:	56                   	push   esi
c0012f3b:	53                   	push   ebx
c0012f3c:	50                   	push   eax
c0012f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f49:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012f4c:	85 db                	test   ebx,ebx
c0012f4e:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012f54:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012f57:	74 02                	je     c0012f5b <SysSbrk(regs*)+0x21>
c0012f59:	79 06                	jns    c0012f61 <SysSbrk(regs*)+0x27>
c0012f5b:	89 f0                	mov    eax,esi
c0012f5d:	31 d2                	xor    edx,edx
c0012f5f:	eb 2a                	jmp    c0012f8b <SysSbrk(regs*)+0x51>
c0012f61:	83 c8 ff             	or     eax,0xffffffff
c0012f64:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012f6a:	89 c2                	mov    edx,eax
c0012f6c:	77 1d                	ja     c0012f8b <SysSbrk(regs*)+0x51>
c0012f6e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012f74:	50                   	push   eax
c0012f75:	c1 ea 0c             	shr    edx,0xc
c0012f78:	68 07 0c 00 00       	push   0xc07
c0012f7d:	52                   	push   edx
c0012f7e:	51                   	push   ecx
c0012f7f:	e8 c4 6b ff ff       	call   c0009b48 <VAS::allocatePages(int, int)>
c0012f84:	89 f0                	mov    eax,esi
c0012f86:	31 d2                	xor    edx,edx
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	59                   	pop    ecx
c0012f8c:	5b                   	pop    ebx
c0012f8d:	5e                   	pop    esi
c0012f8e:	c3                   	ret    

c0012f8f <SysSetCwd(regs*)>:
c0012f8f:	83 ec 14             	sub    esp,0x14
c0012f92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f96:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f9e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fa1:	e8 ff 7f ff ff       	call   c000afa5 <Fs::setcwd(Process*, char*)>
c0012fa6:	83 c4 1c             	add    esp,0x1c
c0012fa9:	99                   	cdq    
c0012faa:	c3                   	ret    

c0012fab <SysSetTime(regs*)>:
c0012fab:	55                   	push   ebp
c0012fac:	31 c9                	xor    ecx,ecx
c0012fae:	57                   	push   edi
c0012faf:	bd 0c 00 00 00       	mov    ebp,0xc
c0012fb4:	56                   	push   esi
c0012fb5:	53                   	push   ebx
c0012fb6:	31 db                	xor    ebx,ebx
c0012fb8:	83 ec 10             	sub    esp,0x10
c0012fbb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012fbf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012fc2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012fc5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012fc8:	89 c2                	mov    edx,eax
c0012fca:	c1 e8 05             	shr    eax,0x5
c0012fcd:	83 e2 1f             	and    edx,0x1f
c0012fd0:	66 81 ef 6c 07       	sub    di,0x76c
c0012fd5:	42                   	inc    edx
c0012fd6:	c1 e7 10             	shl    edi,0x10
c0012fd9:	88 d1                	mov    cl,dl
c0012fdb:	31 d2                	xor    edx,edx
c0012fdd:	f7 f5                	div    ebp
c0012fdf:	88 d5                	mov    ch,dl
c0012fe1:	31 d2                	xor    edx,edx
c0012fe3:	0f b7 c1             	movzx  eax,cx
c0012fe6:	09 f8                	or     eax,edi
c0012fe8:	bf 3c 00 00 00       	mov    edi,0x3c
c0012fed:	89 c1                	mov    ecx,eax
c0012fef:	89 f0                	mov    eax,esi
c0012ff1:	f7 f7                	div    edi
c0012ff3:	c1 e2 10             	shl    edx,0x10
c0012ff6:	89 dd                	mov    ebp,ebx
c0012ff8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012ffe:	09 d5                	or     ebp,edx
c0013000:	31 d2                	xor    edx,edx
c0013002:	f7 f7                	div    edi
c0013004:	89 eb                	mov    ebx,ebp
c0013006:	bf 10 0e 00 00       	mov    edi,0xe10
c001300b:	88 d7                	mov    bh,dl
c001300d:	89 f0                	mov    eax,esi
c001300f:	31 d2                	xor    edx,edx
c0013011:	f7 f7                	div    edi
c0013013:	bf 18 00 00 00       	mov    edi,0x18
c0013018:	31 d2                	xor    edx,edx
c001301a:	f7 f7                	div    edi
c001301c:	88 d3                	mov    bl,dl
c001301e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0013023:	53                   	push   ebx
c0013024:	51                   	push   ecx
c0013025:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001302b:	e8 84 87 ff ff       	call   c000b7b4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013030:	83 c4 1c             	add    esp,0x1c
c0013033:	5b                   	pop    ebx
c0013034:	83 f0 01             	xor    eax,0x1
c0013037:	5e                   	pop    esi
c0013038:	31 d2                	xor    edx,edx
c001303a:	5f                   	pop    edi
c001303b:	0f b6 c0             	movzx  eax,al
c001303e:	5d                   	pop    ebp
c001303f:	c3                   	ret    

c0013040 <SysTimezone(regs*)>:
c0013040:	53                   	push   ebx
c0013041:	83 ec 08             	sub    esp,0x8
c0013044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013048:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001304c:	75 17                	jne    c0013065 <SysTimezone(regs*)+0x25>
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	68 2d 08 02 c0       	push   0xc002082d
c0013056:	e8 08 76 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001305b:	83 c8 ff             	or     eax,0xffffffff
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	89 c2                	mov    edx,eax
c0013063:	eb 20                	jmp    c0013085 <SysTimezone(regs*)+0x45>
c0013065:	83 ec 0c             	sub    esp,0xc
c0013068:	68 42 08 02 c0       	push   0xc0020842
c001306d:	e8 f1 75 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0013072:	58                   	pop    eax
c0013073:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013076:	e8 95 84 ff ff       	call   c000b510 <User::loadClockSettings(int)>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	b8 01 00 00 00       	mov    eax,0x1
c0013083:	31 d2                	xor    edx,edx
c0013085:	83 c4 08             	add    esp,0x8
c0013088:	5b                   	pop    ebx
c0013089:	c3                   	ret    

c001308a <SysWrite(regs*)>:
c001308a:	57                   	push   edi
c001308b:	56                   	push   esi
c001308c:	53                   	push   ebx
c001308d:	83 ec 10             	sub    esp,0x10
c0013090:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013094:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013097:	83 f8 02             	cmp    eax,0x2
c001309a:	77 10                	ja     c00130ac <SysWrite(regs*)+0x22>
c001309c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130a4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00130aa:	eb 0e                	jmp    c00130ba <SysWrite(regs*)+0x30>
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	50                   	push   eax
c00130b0:	e8 62 61 ff ff       	call   c0009217 <getFromFileDescriptor(int)>
c00130b5:	83 c4 10             	add    esp,0x10
c00130b8:	89 c1                	mov    ecx,eax
c00130ba:	83 c8 ff             	or     eax,0xffffffff
c00130bd:	85 c9                	test   ecx,ecx
c00130bf:	89 c2                	mov    edx,eax
c00130c1:	74 28                	je     c00130eb <SysWrite(regs*)+0x61>
c00130c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130cb:	83 ec 0c             	sub    esp,0xc
c00130ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130d0:	31 ff                	xor    edi,edi
c00130d2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00130d6:	52                   	push   edx
c00130d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130da:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00130dd:	57                   	push   edi
c00130de:	56                   	push   esi
c00130df:	51                   	push   ecx
c00130e0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00130e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00130e7:	83 c4 20             	add    esp,0x20
c00130ea:	99                   	cdq    
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	5b                   	pop    ebx
c00130ef:	5e                   	pop    esi
c00130f0:	5f                   	pop    edi
c00130f1:	c3                   	ret    

c00130f2 <SysWsbe(regs*)>:
c00130f2:	57                   	push   edi
c00130f3:	b9 0b 00 00 00       	mov    ecx,0xb
c00130f8:	56                   	push   esi
c00130f9:	be 81 08 02 c0       	mov    esi,0xc0020881
c00130fe:	53                   	push   ebx
c00130ff:	83 ec 30             	sub    esp,0x30
c0013102:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013106:	fc                   	cld    
c0013107:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013114:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013118:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001311e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013120:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013123:	57                   	push   edi
c0013124:	e8 07 d4 fe ff       	call   c0000530 <strlen>
c0013129:	5a                   	pop    edx
c001312a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001312e:	52                   	push   edx
c001312f:	31 d2                	xor    edx,edx
c0013131:	57                   	push   edi
c0013132:	52                   	push   edx
c0013133:	50                   	push   eax
c0013134:	56                   	push   esi
c0013135:	ff d3                	call   ebx
c0013137:	83 c4 14             	add    esp,0x14
c001313a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001313e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013141:	e8 6e 23 00 00       	call   c00154b4 <terminateTask(int)>
c0013146:	83 c4 40             	add    esp,0x40
c0013149:	5b                   	pop    ebx
c001314a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001314f:	5e                   	pop    esi
c0013150:	31 d2                	xor    edx,edx
c0013152:	5f                   	pop    edi
c0013153:	c3                   	ret    

c0013154 <SysYield(regs*)>:
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	fa                   	cli    
c0013158:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001315e:	e8 fd 19 00 00       	call   c0014b60 <schedule()>
c0013163:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013168:	48                   	dec    eax
c0013169:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001316e:	75 01                	jne    c0013171 <SysYield(regs*)+0x1d>
c0013170:	fb                   	sti    
c0013171:	31 c0                	xor    eax,eax
c0013173:	31 d2                	xor    edx,edx
c0013175:	83 c4 0c             	add    esp,0xc
c0013178:	c3                   	ret    

c0013179 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013179:	55                   	push   ebp
c001317a:	57                   	push   edi
c001317b:	56                   	push   esi
c001317c:	53                   	push   ebx
c001317d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013183:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001318e:	74 3b                	je     c00131cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013190:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013198:	74 31                	je     c00131cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001319a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00131a2:	75 27                	jne    c00131cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00131a4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00131ab:	05 00 10 00 00       	add    eax,0x1000
c00131b0:	89 c2                	mov    edx,eax
c00131b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00131b7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00131bd:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00131c4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00131cb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00131db:	6a 01                	push   0x1
c00131dd:	e8 90 61 ff ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	89 c3                	mov    ebx,eax
c00131e7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00131ed:	0f 86 25 01 00 00    	jbe    c0013318 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19f>
c00131f3:	c1 ee 0c             	shr    esi,0xc
c00131f6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00131fd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013201:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013209:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013214:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001321b:	29 ef                	sub    edi,ebp
c001321d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013221:	0f 83 f8 00 00 00    	jae    c001331f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a6>
c0013227:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001322d:	76 05                	jbe    c0013234 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xbb>
c001322f:	bf 00 10 00 00       	mov    edi,0x1000
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	31 d2                	xor    edx,edx
c0013239:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013240:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013242:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013246:	50                   	push   eax
c0013247:	8d 74 24 30          	lea    esi,[esp+0x30]
c001324b:	56                   	push   esi
c001324c:	52                   	push   edx
c001324d:	57                   	push   edi
c001324e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013255:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013258:	83 c4 20             	add    esp,0x20
c001325b:	85 c0                	test   eax,eax
c001325d:	75 06                	jne    c0013265 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xec>
c001325f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013263:	74 13                	je     c0013278 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xff>
c0013265:	83 ec 0c             	sub    esp,0xc
c0013268:	53                   	push   ebx
c0013269:	e8 03 64 ff ff       	call   c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c001326e:	83 c4 10             	add    esp,0x10
c0013271:	31 c0                	xor    eax,eax
c0013273:	e9 7c 01 00 00       	jmp    c00133f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27b>
c0013278:	fa                   	cli    
c0013279:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001327f:	e8 e6 48 ff ff       	call   c0007b6a <Phys::allocatePage()>
c0013284:	6a 07                	push   0x7
c0013286:	89 c7                	mov    edi,eax
c0013288:	53                   	push   ebx
c0013289:	50                   	push   eax
c001328a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001328f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013292:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013298:	e8 a5 67 ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001329d:	83 c4 0c             	add    esp,0xc
c00132a0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00132a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132ad:	6a 00                	push   0x0
c00132af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132bd:	e8 f2 65 ff ff       	call   c00098b4 <VAS::mapOtherVASIn(bool, VAS*)>
c00132c2:	58                   	pop    eax
c00132c3:	5a                   	pop    edx
c00132c4:	68 07 0c 00 00       	push   0xc07
c00132c9:	55                   	push   ebp
c00132ca:	57                   	push   edi
c00132cb:	89 df                	mov    edi,ebx
c00132cd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00132d4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132da:	6a 00                	push   0x0
c00132dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132e4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132ea:	e8 17 6b ff ff       	call   c0009e06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00132ef:	b9 00 10 00 00       	mov    ecx,0x1000
c00132f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00132f6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00132fb:	83 c4 20             	add    esp,0x20
c00132fe:	48                   	dec    eax
c00132ff:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013304:	85 c0                	test   eax,eax
c0013306:	75 01                	jne    c0013309 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x190>
c0013308:	fb                   	sti    
c0013309:	81 c5 00 10 00 00    	add    ebp,0x1000
c001330f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013313:	e9 f1 fe ff ff       	jmp    c0013209 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013318:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001331f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013326:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001332c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013332:	0f 86 ae 00 00 00    	jbe    c00133e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26d>
c0013338:	fa                   	cli    
c0013339:	51                   	push   ecx
c001333a:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013340:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013347:	31 ff                	xor    edi,edi
c0013349:	c1 ee 0c             	shr    esi,0xc
c001334c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013352:	6a 00                	push   0x0
c0013354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013359:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001335c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013362:	e8 4d 65 ff ff       	call   c00098b4 <VAS::mapOtherVASIn(bool, VAS*)>
c0013367:	83 c4 10             	add    esp,0x10
c001336a:	e8 fb 47 ff ff       	call   c0007b6a <Phys::allocatePage()>
c001336f:	6a 07                	push   0x7
c0013371:	53                   	push   ebx
c0013372:	47                   	inc    edi
c0013373:	50                   	push   eax
c0013374:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013378:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001337e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013381:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013387:	e8 b6 66 ff ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001338c:	58                   	pop    eax
c001338d:	5a                   	pop    edx
c001338e:	68 07 0c 00 00       	push   0xc07
c0013393:	55                   	push   ebp
c0013394:	81 c5 00 10 00 00    	add    ebp,0x1000
c001339a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001339e:	50                   	push   eax
c001339f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00133a6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00133ac:	6a 00                	push   0x0
c00133ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00133bc:	e8 45 6a ff ff       	call   c0009e06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00133c1:	83 c4 1c             	add    esp,0x1c
c00133c4:	68 00 10 00 00       	push   0x1000
c00133c9:	6a 00                	push   0x0
c00133cb:	53                   	push   ebx
c00133cc:	e8 ef d0 fe ff       	call   c00004c0 <memset>
c00133d1:	83 c4 10             	add    esp,0x10
c00133d4:	39 fe                	cmp    esi,edi
c00133d6:	77 92                	ja     c001336a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f1>
c00133d8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00133dd:	48                   	dec    eax
c00133de:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00133e3:	75 01                	jne    c00133e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26d>
c00133e5:	fb                   	sti    
c00133e6:	83 ec 0c             	sub    esp,0xc
c00133e9:	53                   	push   ebx
c00133ea:	e8 82 62 ff ff       	call   c0009671 <Virt::freeKernelVirtualPages(unsigned long)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	b0 01                	mov    al,0x1
c00133f4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00133fa:	5b                   	pop    ebx
c00133fb:	5e                   	pop    esi
c00133fc:	5f                   	pop    edi
c00133fd:	5d                   	pop    ebp
c00133fe:	c3                   	ret    

c00133ff <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00133ff:	55                   	push   ebp
c0013400:	57                   	push   edi
c0013401:	56                   	push   esi
c0013402:	53                   	push   ebx
c0013403:	83 ec 48             	sub    esp,0x48
c0013406:	68 14 01 00 00       	push   0x114
c001340b:	e8 63 44 ff ff       	call   c0007873 <malloc>
c0013410:	83 c4 0c             	add    esp,0xc
c0013413:	89 c6                	mov    esi,eax
c0013415:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013419:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001341d:	50                   	push   eax
c001341e:	e8 b5 77 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0013423:	58                   	pop    eax
c0013424:	5a                   	pop    edx
c0013425:	6a 01                	push   0x1
c0013427:	56                   	push   esi
c0013428:	e8 6b 78 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	85 c0                	test   eax,eax
c0013432:	0f 85 47 01 00 00    	jne    c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013438:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	6a 34                	push   0x34
c0013445:	e8 29 44 ff ff       	call   c0007873 <malloc>
c001344a:	89 c3                	mov    ebx,eax
c001344c:	58                   	pop    eax
c001344d:	8b 06                	mov    eax,DWORD PTR [esi]
c001344f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013453:	57                   	push   edi
c0013454:	53                   	push   ebx
c0013455:	6a 00                	push   0x0
c0013457:	6a 34                	push   0x34
c0013459:	56                   	push   esi
c001345a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001345d:	83 c4 20             	add    esp,0x20
c0013460:	85 c0                	test   eax,eax
c0013462:	0f 85 17 01 00 00    	jne    c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013468:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001346e:	0f 85 0b 01 00 00    	jne    c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013474:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013477:	85 c0                	test   eax,eax
c0013479:	0f 84 00 01 00 00    	je     c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001347f:	31 d2                	xor    edx,edx
c0013481:	55                   	push   ebp
c0013482:	52                   	push   edx
c0013483:	50                   	push   eax
c0013484:	56                   	push   esi
c0013485:	e8 cc 78 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	85 c0                	test   eax,eax
c001348f:	0f 85 ea 00 00 00    	jne    c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013495:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001349f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00134a3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00134a7:	0f af c2             	imul   eax,edx
c00134aa:	50                   	push   eax
c00134ab:	e8 c3 43 ff ff       	call   c0007873 <malloc>
c00134b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00134b4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00134b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00134b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134bd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00134c1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00134c5:	0f af c2             	imul   eax,edx
c00134c8:	99                   	cdq    
c00134c9:	52                   	push   edx
c00134ca:	50                   	push   eax
c00134cb:	56                   	push   esi
c00134cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00134cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00134d2:	83 c4 20             	add    esp,0x20
c00134d5:	85 c0                	test   eax,eax
c00134d7:	0f 84 a2 00 00 00    	je     c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00134dd:	31 d2                	xor    edx,edx
c00134df:	51                   	push   ecx
c00134e0:	52                   	push   edx
c00134e1:	50                   	push   eax
c00134e2:	56                   	push   esi
c00134e3:	e8 6e 78 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	85 c0                	test   eax,eax
c00134ed:	0f 85 8c 00 00 00    	jne    c001357f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00134f3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00134f7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00134fb:	0f af c2             	imul   eax,edx
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	31 ed                	xor    ebp,ebp
c0013503:	50                   	push   eax
c0013504:	e8 6a 43 ff ff       	call   c0007873 <malloc>
c0013509:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001350d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001350f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013516:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001351a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001351e:	0f af c2             	imul   eax,edx
c0013521:	99                   	cdq    
c0013522:	52                   	push   edx
c0013523:	50                   	push   eax
c0013524:	56                   	push   esi
c0013525:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013528:	83 c4 20             	add    esp,0x20
c001352b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013533:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0013537:	0f 86 80 00 00 00    	jbe    c00135bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001353d:	0f b7 fd             	movzx  edi,bp
c0013540:	c1 e7 05             	shl    edi,0x5
c0013543:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013547:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001354a:	75 6b                	jne    c00135b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001354c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001354f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013553:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001355a:	52                   	push   edx
c001355b:	31 d2                	xor    edx,edx
c001355d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013560:	52                   	push   edx
c0013561:	50                   	push   eax
c0013562:	56                   	push   esi
c0013563:	e8 ee 77 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013568:	83 c4 10             	add    esp,0x10
c001356b:	85 c0                	test   eax,eax
c001356d:	74 17                	je     c0013586 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001356f:	83 ec 0c             	sub    esp,0xc
c0013572:	68 ad 08 02 c0       	push   0xc00208ad
c0013577:	e8 e7 70 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	31 c0                	xor    eax,eax
c0013581:	e9 87 00 00 00       	jmp    c001360d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0013586:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013589:	83 ec 0c             	sub    esp,0xc
c001358c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001358f:	50                   	push   eax
c0013590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013594:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013598:	56                   	push   esi
c0013599:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001359d:	e8 d7 fb ff ff       	call   c0013179 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00135a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135a6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00135aa:	83 c4 20             	add    esp,0x20
c00135ad:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00135b1:	73 04                	jae    c00135b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00135b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135b7:	45                   	inc    ebp
c00135b8:	e9 76 ff ff ff       	jmp    c0013533 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00135bd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00135c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135c9:	83 ec 0c             	sub    esp,0xc
c00135cc:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00135d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00135d7:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00135dd:	05 00 10 00 00       	add    eax,0x1000
c00135e2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00135e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e9:	e8 95 42 ff ff       	call   c0007883 <free>
c00135ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135f1:	e8 8d 42 ff ff       	call   c0007883 <free>
c00135f6:	58                   	pop    eax
c00135f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135fb:	e8 83 42 ff ff       	call   c0007883 <free>
c0013600:	89 34 24             	mov    DWORD PTR [esp],esi
c0013603:	e8 ee 76 ff ff       	call   c000acf6 <File::close()>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	b0 01                	mov    al,0x1
c001360d:	83 c4 3c             	add    esp,0x3c
c0013610:	5b                   	pop    ebx
c0013611:	5e                   	pop    esi
c0013612:	5f                   	pop    edi
c0013613:	5d                   	pop    ebp
c0013614:	c3                   	ret    

c0013615 <Thr::runtimeReferenceHelper()>:
c0013615:	83 ec 18             	sub    esp,0x18
c0013618:	68 b5 08 02 c0       	push   0xc00208b5
c001361d:	e8 41 70 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0013622:	fa                   	cli    
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	eb fe                	jmp    c0013626 <Thr::runtimeReferenceHelper()+0x11>

c0013628 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013628:	57                   	push   edi
c0013629:	56                   	push   esi
c001362a:	53                   	push   ebx
c001362b:	31 db                	xor    ebx,ebx
c001362d:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c0013633:	7e 3c                	jle    c0013671 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013635:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c001363c:	31 ff                	xor    edi,edi
c001363e:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c0013645:	7e 27                	jle    c001366e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013647:	50                   	push   eax
c0013648:	50                   	push   eax
c0013649:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001364d:	8b 06                	mov    eax,DWORD PTR [esi]
c001364f:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c0013656:	50                   	push   eax
c0013657:	e8 84 d0 fe ff       	call   c00006e0 <strcmp>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	85 c0                	test   eax,eax
c0013661:	75 05                	jne    c0013668 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013663:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013666:	eb 0b                	jmp    c0013673 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013668:	83 c6 10             	add    esi,0x10
c001366b:	47                   	inc    edi
c001366c:	eb d0                	jmp    c001363e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001366e:	43                   	inc    ebx
c001366f:	eb bc                	jmp    c001362d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013671:	31 c0                	xor    eax,eax
c0013673:	5b                   	pop    ebx
c0013674:	5e                   	pop    esi
c0013675:	5f                   	pop    edi
c0013676:	c3                   	ret    

c0013677 <Thr::loadKernelSymbolTable(char const*)>:
c0013677:	55                   	push   ebp
c0013678:	57                   	push   edi
c0013679:	56                   	push   esi
c001367a:	53                   	push   ebx
c001367b:	83 ec 68             	sub    esp,0x68
c001367e:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c0013684:	68 14 01 00 00       	push   0x114
c0013689:	e8 e5 41 ff ff       	call   c0007873 <malloc>
c001368e:	83 c4 0c             	add    esp,0xc
c0013691:	89 c3                	mov    ebx,eax
c0013693:	56                   	push   esi
c0013694:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013698:	50                   	push   eax
c0013699:	e8 3a 75 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c001369e:	5e                   	pop    esi
c001369f:	5f                   	pop    edi
c00136a0:	6a 01                	push   0x1
c00136a2:	53                   	push   ebx
c00136a3:	e8 f0 75 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c00136a8:	83 c4 10             	add    esp,0x10
c00136ab:	85 c0                	test   eax,eax
c00136ad:	74 0a                	je     c00136b9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	68 d7 08 02 c0       	push   0xc00208d7
c00136b7:	eb 34                	jmp    c00136ed <Thr::loadKernelSymbolTable(char const*)+0x76>
c00136b9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00136c1:	83 ec 0c             	sub    esp,0xc
c00136c4:	6a 34                	push   0x34
c00136c6:	e8 a8 41 ff ff       	call   c0007873 <malloc>
c00136cb:	59                   	pop    ecx
c00136cc:	89 c7                	mov    edi,eax
c00136ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136d0:	8d 74 24 34          	lea    esi,[esp+0x34]
c00136d4:	56                   	push   esi
c00136d5:	57                   	push   edi
c00136d6:	6a 00                	push   0x0
c00136d8:	6a 34                	push   0x34
c00136da:	53                   	push   ebx
c00136db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136de:	83 c4 20             	add    esp,0x20
c00136e1:	85 c0                	test   eax,eax
c00136e3:	74 17                	je     c00136fc <Thr::loadKernelSymbolTable(char const*)+0x85>
c00136e5:	83 ec 0c             	sub    esp,0xc
c00136e8:	68 ee 08 02 c0       	push   0xc00208ee
c00136ed:	e8 25 cd ff ff       	call   c0010417 <KePanic(char const*)>
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	31 c0                	xor    eax,eax
c00136f7:	e9 31 02 00 00       	jmp    c001392d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00136fc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013702:	75 e1                	jne    c00136e5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013704:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013707:	85 c0                	test   eax,eax
c0013709:	74 da                	je     c00136e5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001370b:	52                   	push   edx
c001370c:	31 d2                	xor    edx,edx
c001370e:	52                   	push   edx
c001370f:	50                   	push   eax
c0013710:	53                   	push   ebx
c0013711:	e8 40 76 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013716:	83 c4 10             	add    esp,0x10
c0013719:	85 c0                	test   eax,eax
c001371b:	75 c8                	jne    c00136e5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001371d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013721:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013725:	0f af c2             	imul   eax,edx
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	31 ed                	xor    ebp,ebp
c001372d:	50                   	push   eax
c001372e:	e8 40 41 ff ff       	call   c0007873 <malloc>
c0013733:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013737:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013739:	89 34 24             	mov    DWORD PTR [esp],esi
c001373c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013740:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013744:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013748:	0f af c2             	imul   eax,edx
c001374b:	99                   	cdq    
c001374c:	52                   	push   edx
c001374d:	50                   	push   eax
c001374e:	53                   	push   ebx
c001374f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013752:	83 c4 20             	add    esp,0x20
c0013755:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001375d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013765:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001376d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013775:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013779:	0f 86 aa 00 00 00    	jbe    c0013829 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001377f:	0f b7 f5             	movzx  esi,bp
c0013782:	6b f6 28             	imul   esi,esi,0x28
c0013785:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013789:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001378c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013790:	50                   	push   eax
c0013791:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013795:	6b c0 28             	imul   eax,eax,0x28
c0013798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001379c:	8b 16                	mov    edx,DWORD PTR [esi]
c001379e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00137a2:	89 d0                	mov    eax,edx
c00137a4:	31 d2                	xor    edx,edx
c00137a6:	52                   	push   edx
c00137a7:	50                   	push   eax
c00137a8:	53                   	push   ebx
c00137a9:	e8 a8 75 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c00137ae:	83 c4 0c             	add    esp,0xc
c00137b1:	6a 20                	push   0x20
c00137b3:	6a 00                	push   0x0
c00137b5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00137b9:	52                   	push   edx
c00137ba:	e8 01 cd fe ff       	call   c00004c0 <memset>
c00137bf:	58                   	pop    eax
c00137c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137c2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00137c6:	51                   	push   ecx
c00137c7:	8d 54 24 40          	lea    edx,[esp+0x40]
c00137cb:	52                   	push   edx
c00137cc:	6a 00                	push   0x0
c00137ce:	6a 1f                	push   0x1f
c00137d0:	53                   	push   ebx
c00137d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137d4:	83 c4 18             	add    esp,0x18
c00137d7:	68 05 09 02 c0       	push   0xc0020905
c00137dc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00137e0:	52                   	push   edx
c00137e1:	e8 fa ce fe ff       	call   c00006e0 <strcmp>
c00137e6:	83 c4 10             	add    esp,0x10
c00137e9:	85 c0                	test   eax,eax
c00137eb:	75 0f                	jne    c00137fc <Thr::loadKernelSymbolTable(char const*)+0x185>
c00137ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00137f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00137f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137fc:	50                   	push   eax
c00137fd:	50                   	push   eax
c00137fe:	68 0d 09 02 c0       	push   0xc002090d
c0013803:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013807:	50                   	push   eax
c0013808:	e8 d3 ce fe ff       	call   c00006e0 <strcmp>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	85 c0                	test   eax,eax
c0013812:	75 0f                	jne    c0013823 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013814:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013817:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001381b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001381f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013823:	45                   	inc    ebp
c0013824:	e9 4c ff ff ff       	jmp    c0013775 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013829:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001382e:	75 10                	jne    c0013840 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	68 15 09 02 c0       	push   0xc0020915
c0013838:	e8 da cb ff ff       	call   c0010417 <KePanic(char const*)>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013845:	75 10                	jne    c0013857 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013847:	83 ec 0c             	sub    esp,0xc
c001384a:	68 15 09 02 c0       	push   0xc0020915
c001384f:	e8 c3 cb ff ff       	call   c0010417 <KePanic(char const*)>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	31 d2                	xor    edx,edx
c0013859:	50                   	push   eax
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	52                   	push   edx
c001385f:	50                   	push   eax
c0013860:	53                   	push   ebx
c0013861:	e8 f0 74 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013866:	5a                   	pop    edx
c0013867:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001386b:	e8 03 40 ff ff       	call   c0007873 <malloc>
c0013870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013874:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013878:	5e                   	pop    esi
c0013879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387b:	31 c9                	xor    ecx,ecx
c001387d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013881:	55                   	push   ebp
c0013882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013886:	51                   	push   ecx
c0013887:	52                   	push   edx
c0013888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001388c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013890:	53                   	push   ebx
c0013891:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013894:	83 c4 14             	add    esp,0x14
c0013897:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001389b:	e8 d3 3f ff ff       	call   c0007873 <malloc>
c00138a0:	89 c6                	mov    esi,eax
c00138a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00138a7:	56                   	push   esi
c00138a8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00138ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00138b0:	51                   	push   ecx
c00138b1:	52                   	push   edx
c00138b2:	53                   	push   ebx
c00138b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138ba:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c00138c0:	c1 e8 04             	shr    eax,0x4
c00138c3:	83 c4 1c             	add    esp,0x1c
c00138c6:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138d3:	52                   	push   edx
c00138d4:	50                   	push   eax
c00138d5:	53                   	push   ebx
c00138d6:	e8 7b 74 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c00138db:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00138dd:	31 d2                	xor    edx,edx
c00138df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00138e2:	56                   	push   esi
c00138e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138e7:	52                   	push   edx
c00138e8:	50                   	push   eax
c00138e9:	53                   	push   ebx
c00138ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00138ed:	83 c4 14             	add    esp,0x14
c00138f0:	53                   	push   ebx
c00138f1:	e8 00 74 ff ff       	call   c000acf6 <File::close()>
c00138f6:	5d                   	pop    ebp
c00138f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138fb:	e8 83 3f ff ff       	call   c0007883 <free>
c0013900:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013903:	e8 7b 3f ff ff       	call   c0007883 <free>
c0013908:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c001390d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013911:	8d 50 01             	lea    edx,[eax+0x1]
c0013914:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c001391b:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c0013922:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	b0 01                	mov    al,0x1
c001392d:	83 c4 5c             	add    esp,0x5c
c0013930:	5b                   	pop    ebx
c0013931:	5e                   	pop    esi
c0013932:	5f                   	pop    edi
c0013933:	5d                   	pop    ebp
c0013934:	c3                   	ret    

c0013935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013935:	55                   	push   ebp
c0013936:	57                   	push   edi
c0013937:	56                   	push   esi
c0013938:	53                   	push   ebx
c0013939:	81 ec 68 03 00 00    	sub    esp,0x368
c001393f:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c0013945:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001394c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0013950:	68 14 01 00 00       	push   0x114
c0013955:	e8 19 3f ff ff       	call   c0007873 <malloc>
c001395a:	83 c4 0c             	add    esp,0xc
c001395d:	53                   	push   ebx
c001395e:	89 c5                	mov    ebp,eax
c0013960:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013967:	50                   	push   eax
c0013968:	e8 6b 72 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c001396d:	5e                   	pop    esi
c001396e:	5f                   	pop    edi
c001396f:	6a 01                	push   0x1
c0013971:	55                   	push   ebp
c0013972:	e8 21 73 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	85 c0                	test   eax,eax
c001397c:	0f 85 b1 06 00 00    	jne    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013982:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001398a:	83 ec 0c             	sub    esp,0xc
c001398d:	6a 34                	push   0x34
c001398f:	e8 df 3e ff ff       	call   c0007873 <malloc>
c0013994:	5b                   	pop    ebx
c0013995:	89 c7                	mov    edi,eax
c0013997:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001399a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001399e:	53                   	push   ebx
c001399f:	57                   	push   edi
c00139a0:	6a 00                	push   0x0
c00139a2:	6a 34                	push   0x34
c00139a4:	55                   	push   ebp
c00139a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139a8:	83 c4 20             	add    esp,0x20
c00139ab:	85 c0                	test   eax,eax
c00139ad:	0f 85 80 06 00 00    	jne    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139b3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00139b9:	0f 85 74 06 00 00    	jne    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139bf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00139c2:	85 c0                	test   eax,eax
c00139c4:	0f 84 69 06 00 00    	je     c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139ca:	31 d2                	xor    edx,edx
c00139cc:	51                   	push   ecx
c00139cd:	52                   	push   edx
c00139ce:	50                   	push   eax
c00139cf:	55                   	push   ebp
c00139d0:	e8 81 73 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c00139d5:	83 c4 10             	add    esp,0x10
c00139d8:	85 c0                	test   eax,eax
c00139da:	0f 85 53 06 00 00    	jne    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139e0:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00139e3:	83 ec 0c             	sub    esp,0xc
c00139e6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00139ea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00139ee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139f2:	0f af c2             	imul   eax,edx
c00139f5:	50                   	push   eax
c00139f6:	e8 78 3e ff ff       	call   c0007873 <malloc>
c00139fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139ff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013a02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a09:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013a0d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013a11:	0f af c2             	imul   eax,edx
c0013a14:	99                   	cdq    
c0013a15:	52                   	push   edx
c0013a16:	50                   	push   eax
c0013a17:	55                   	push   ebp
c0013a18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a1b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013a1e:	83 c4 20             	add    esp,0x20
c0013a21:	85 c0                	test   eax,eax
c0013a23:	0f 84 0a 06 00 00    	je     c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013a29:	52                   	push   edx
c0013a2a:	31 d2                	xor    edx,edx
c0013a2c:	52                   	push   edx
c0013a2d:	50                   	push   eax
c0013a2e:	55                   	push   ebp
c0013a2f:	e8 22 73 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013a34:	83 c4 10             	add    esp,0x10
c0013a37:	85 c0                	test   eax,eax
c0013a39:	0f 85 f4 05 00 00    	jne    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013a3f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013a43:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013a47:	0f af c2             	imul   eax,edx
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	31 f6                	xor    esi,esi
c0013a4f:	50                   	push   eax
c0013a50:	e8 1e 3e ff ff       	call   c0007873 <malloc>
c0013a55:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a59:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a5f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a63:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013a67:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013a6b:	0f af c2             	imul   eax,edx
c0013a6e:	99                   	cdq    
c0013a6f:	52                   	push   edx
c0013a70:	50                   	push   eax
c0013a71:	55                   	push   ebp
c0013a72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a75:	83 c4 20             	add    esp,0x20
c0013a78:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013a7c:	0f 86 8a 00 00 00    	jbe    c0013b0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013a82:	0f b7 de             	movzx  ebx,si
c0013a85:	c1 e3 05             	shl    ebx,0x5
c0013a88:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013a8c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013a8f:	75 75                	jne    c0013b06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013a91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013a94:	31 d2                	xor    edx,edx
c0013a96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a9a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013a9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013aa1:	50                   	push   eax
c0013aa2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013aa5:	52                   	push   edx
c0013aa6:	50                   	push   eax
c0013aa7:	55                   	push   ebp
c0013aa8:	e8 a9 72 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	85 c0                	test   eax,eax
c0013ab2:	0f 85 7b 05 00 00    	jne    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013ab8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013abf:	83 ec 0c             	sub    esp,0xc
c0013ac2:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
c0013ac6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ac9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0013acd:	31 d2                	xor    edx,edx
c0013acf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ad3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ada:	50                   	push   eax
c0013adb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ae3:	52                   	push   edx
c0013ae4:	50                   	push   eax
c0013ae5:	55                   	push   ebp
c0013ae6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ae9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013aec:	83 c4 1c             	add    esp,0x1c
c0013aef:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013af2:	50                   	push   eax
c0013af3:	6a 00                	push   0x0
c0013af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013afd:	50                   	push   eax
c0013afe:	e8 bd c9 fe ff       	call   c00004c0 <memset>
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	46                   	inc    esi
c0013b07:	e9 6c ff ff ff       	jmp    c0013a78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013b0c:	53                   	push   ebx
c0013b0d:	31 db                	xor    ebx,ebx
c0013b0f:	68 00 01 00 00       	push   0x100
c0013b14:	6a 00                	push   0x0
c0013b16:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013b1a:	50                   	push   eax
c0013b1b:	e8 a0 c9 fe ff       	call   c00004c0 <memset>
c0013b20:	83 c4 0c             	add    esp,0xc
c0013b23:	68 00 01 00 00       	push   0x100
c0013b28:	6a 00                	push   0x0
c0013b2a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013b31:	50                   	push   eax
c0013b32:	e8 89 c9 fe ff       	call   c00004c0 <memset>
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013b42:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013b4a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013b52:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013b5a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013b62:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0013b66:	0f 86 30 01 00 00    	jbe    c0013c9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013b6c:	0f b7 f3             	movzx  esi,bx
c0013b6f:	6b f6 28             	imul   esi,esi,0x28
c0013b72:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013b76:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b7d:	52                   	push   edx
c0013b7e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013b82:	6b d2 28             	imul   edx,edx,0x28
c0013b85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b89:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b8b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013b8f:	31 d2                	xor    edx,edx
c0013b91:	52                   	push   edx
c0013b92:	50                   	push   eax
c0013b93:	55                   	push   ebp
c0013b94:	e8 bd 71 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013b99:	83 c4 0c             	add    esp,0xc
c0013b9c:	6a 20                	push   0x20
c0013b9e:	6a 00                	push   0x0
c0013ba0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013ba7:	51                   	push   ecx
c0013ba8:	e8 13 c9 fe ff       	call   c00004c0 <memset>
c0013bad:	59                   	pop    ecx
c0013bae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013bb1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013bb5:	52                   	push   edx
c0013bb6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013bbd:	51                   	push   ecx
c0013bbe:	6a 00                	push   0x0
c0013bc0:	6a 1f                	push   0x1f
c0013bc2:	55                   	push   ebp
c0013bc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bc6:	83 c4 1c             	add    esp,0x1c
c0013bc9:	6a 09                	push   0x9
c0013bcb:	68 2f 09 02 c0       	push   0xc002092f
c0013bd0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013bd7:	51                   	push   ecx
c0013bd8:	e8 a3 c7 fe ff       	call   c0000380 <memcmp>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	85 c0                	test   eax,eax
c0013be2:	75 21                	jne    c0013c05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013be8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bec:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013bf4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bf7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013bfe:	89 d0                	mov    eax,edx
c0013c00:	40                   	inc    eax
c0013c01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c05:	50                   	push   eax
c0013c06:	6a 09                	push   0x9
c0013c08:	68 39 09 02 c0       	push   0xc0020939
c0013c0d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c14:	50                   	push   eax
c0013c15:	e8 66 c7 fe ff       	call   c0000380 <memcmp>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	85 c0                	test   eax,eax
c0013c1f:	75 21                	jne    c0013c42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013c2d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013c31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c34:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0013c3b:	89 c8                	mov    eax,ecx
c0013c3d:	40                   	inc    eax
c0013c3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c42:	50                   	push   eax
c0013c43:	50                   	push   eax
c0013c44:	68 05 09 02 c0       	push   0xc0020905
c0013c49:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c50:	50                   	push   eax
c0013c51:	e8 8a ca fe ff       	call   c00006e0 <strcmp>
c0013c56:	83 c4 10             	add    esp,0x10
c0013c59:	85 c0                	test   eax,eax
c0013c5b:	75 0f                	jne    c0013c6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013c5d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c6c:	50                   	push   eax
c0013c6d:	50                   	push   eax
c0013c6e:	68 0d 09 02 c0       	push   0xc002090d
c0013c73:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c7a:	50                   	push   eax
c0013c7b:	e8 60 ca fe ff       	call   c00006e0 <strcmp>
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	85 c0                	test   eax,eax
c0013c85:	75 0f                	jne    c0013c96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013c87:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013c8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c92:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c96:	43                   	inc    ebx
c0013c97:	e9 c6 fe ff ff       	jmp    c0013b62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013c9c:	31 d2                	xor    edx,edx
c0013c9e:	50                   	push   eax
c0013c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca3:	52                   	push   edx
c0013ca4:	50                   	push   eax
c0013ca5:	55                   	push   ebp
c0013ca6:	e8 ab 70 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013cab:	58                   	pop    eax
c0013cac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cb0:	e8 be 3b ff ff       	call   c0007873 <malloc>
c0013cb5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013cb8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013cbc:	58                   	pop    eax
c0013cbd:	31 d2                	xor    edx,edx
c0013cbf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013cc3:	53                   	push   ebx
c0013cc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013cc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ccc:	52                   	push   edx
c0013ccd:	50                   	push   eax
c0013cce:	55                   	push   ebp
c0013ccf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cd2:	83 c4 14             	add    esp,0x14
c0013cd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cd9:	e8 95 3b ff ff       	call   c0007873 <malloc>
c0013cde:	31 d2                	xor    edx,edx
c0013ce0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013ce4:	83 c4 0c             	add    esp,0xc
c0013ce7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ceb:	52                   	push   edx
c0013cec:	50                   	push   eax
c0013ced:	55                   	push   ebp
c0013cee:	e8 63 70 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013cf3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013cfd:	31 d2                	xor    edx,edx
c0013cff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d03:	52                   	push   edx
c0013d04:	50                   	push   eax
c0013d05:	55                   	push   ebp
c0013d06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d09:	83 c4 20             	add    esp,0x20
c0013d0c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013d14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d18:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013d1c:	0f 84 15 03 00 00    	je     c0014037 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x702>
c0013d22:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013d29:	31 d2                	xor    edx,edx
c0013d2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d2f:	c1 e8 03             	shr    eax,0x3
c0013d32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d36:	51                   	push   ecx
c0013d37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d3b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013d3f:	52                   	push   edx
c0013d40:	50                   	push   eax
c0013d41:	55                   	push   ebp
c0013d42:	e8 0f 70 ff ff       	call   c000ad56 <File::seek(unsigned long long)>
c0013d47:	5b                   	pop    ebx
c0013d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013d53:	e8 1b 3b ff ff       	call   c0007873 <malloc>
c0013d58:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013d5b:	5e                   	pop    esi
c0013d5c:	89 c3                	mov    ebx,eax
c0013d5e:	31 d2                	xor    edx,edx
c0013d60:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013d64:	50                   	push   eax
c0013d65:	53                   	push   ebx
c0013d66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d6a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013d71:	52                   	push   edx
c0013d72:	50                   	push   eax
c0013d73:	55                   	push   ebp
c0013d74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d77:	83 c4 20             	add    esp,0x20
c0013d7a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013d82:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d86:	39 54 24 20          	cmp    DWORD PTR [esp+0x20],edx
c0013d8a:	0f 8d 8e 02 00 00    	jge    c001401e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e9>
c0013d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d94:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013d99:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0013d9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da4:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0013da8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013dac:	c1 e8 08             	shr    eax,0x8
c0013daf:	89 c6                	mov    esi,eax
c0013db1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013db5:	c1 e6 04             	shl    esi,0x4
c0013db8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013dbc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013dbf:	85 d2                	test   edx,edx
c0013dc1:	0f 85 bf 00 00 00    	jne    c0013e86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x551>
c0013dc7:	83 ec 0c             	sub    esp,0xc
c0013dca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013dce:	03 06                	add    eax,DWORD PTR [esi]
c0013dd0:	50                   	push   eax
c0013dd1:	e8 52 f8 ff ff       	call   c0013628 <Thr::getAddressOfKernelSymbol(char const*)>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	89 c2                	mov    edx,eax
c0013ddb:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013de0:	85 c0                	test   eax,eax
c0013de2:	0f 85 9e 00 00 00    	jne    c0013e86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x551>
c0013de8:	83 ec 0c             	sub    esp,0xc
c0013deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013def:	03 06                	add    eax,DWORD PTR [esi]
c0013df1:	50                   	push   eax
c0013df2:	e8 0d c8 ff ff       	call   c0010604 <KeResolveCompatibilitySymbol(char*)>
c0013df7:	83 c4 10             	add    esp,0x10
c0013dfa:	89 c2                	mov    edx,eax
c0013dfc:	85 c0                	test   eax,eax
c0013dfe:	0f 85 82 00 00 00    	jne    c0013e86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x551>
c0013e04:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013e08:	50                   	push   eax
c0013e09:	50                   	push   eax
c0013e0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0e:	03 06                	add    eax,DWORD PTR [esi]
c0013e10:	50                   	push   eax
c0013e11:	68 43 09 02 c0       	push   0xc0020943
c0013e16:	e8 48 68 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0013e1b:	58                   	pop    eax
c0013e1c:	5a                   	pop    edx
c0013e1d:	68 5d 09 02 c0       	push   0xc002095d
c0013e22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e29:	50                   	push   eax
c0013e2a:	e8 c1 c7 fe ff       	call   c00005f0 <strcpy>
c0013e2f:	59                   	pop    ecx
c0013e30:	58                   	pop    eax
c0013e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e35:	03 06                	add    eax,DWORD PTR [esi]
c0013e37:	50                   	push   eax
c0013e38:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e3f:	50                   	push   eax
c0013e40:	e8 7b c9 fe ff       	call   c00007c0 <strcat>
c0013e45:	58                   	pop    eax
c0013e46:	5a                   	pop    edx
c0013e47:	68 f3 09 02 c0       	push   0xc00209f3
c0013e4c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e53:	50                   	push   eax
c0013e54:	e8 67 c9 fe ff       	call   c00007c0 <strcat>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e61:	0f 84 73 01 00 00    	je     c0013fda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013e67:	83 ec 0c             	sub    esp,0xc
c0013e6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e71:	50                   	push   eax
c0013e72:	e8 a0 c5 ff ff       	call   c0010417 <KePanic(char const*)>
c0013e77:	83 c4 10             	add    esp,0x10
c0013e7a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013e7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013e82:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013e86:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0013e8b:	0f 85 90 00 00 00    	jne    c0013f21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ec>
c0013e91:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013e98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e9c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013ea0:	01 f0                	add    eax,esi
c0013ea2:	81 7c 24 0c 01 01 00 00 	cmp    DWORD PTR [esp+0xc],0x101
c0013eaa:	0f 94 c1             	sete   cl
c0013ead:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0013eb3:	81 7c 24 0c 01 04 00 00 	cmp    DWORD PTR [esp+0xc],0x401
c0013ebb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ec0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0013ec4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013ec9:	74 39                	je     c0013f04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cf>
c0013ecb:	8d 34 10             	lea    esi,[eax+edx*1]
c0013ece:	84 c9                	test   cl,cl
c0013ed0:	75 15                	jne    c0013ee7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b2>
c0013ed2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ed6:	66 83 f8 0c          	cmp    ax,0xc
c0013eda:	76 05                	jbe    c0013ee1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ac>
c0013edc:	b8 0c 00 00 00       	mov    eax,0xc
c0013ee1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013ee5:	76 2f                	jbe    c0013f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013ee7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013eec:	0f 84 e8 00 00 00    	je     c0013fda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013ef2:	83 ec 0c             	sub    esp,0xc
c0013ef5:	68 74 09 02 c0       	push   0xc0020974
c0013efa:	e8 18 c5 ff ff       	call   c0010417 <KePanic(char const*)>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	eb 12                	jmp    c0013f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013f04:	01 c6                	add    esi,eax
c0013f06:	84 c9                	test   cl,cl
c0013f08:	75 0c                	jne    c0013f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013f0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f0e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013f12:	77 02                	ja     c0013f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013f14:	01 d6                	add    esi,edx
c0013f16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013f1a:	89 30                	mov    DWORD PTR [eax],esi
c0013f1c:	e9 f4 00 00 00       	jmp    c0014015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0013f21:	80 7c 24 0c 02       	cmp    BYTE PTR [esp+0xc],0x2
c0013f26:	0f 85 80 00 00 00    	jne    c0013fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x677>
c0013f2c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013f33:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013f37:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013f3b:	81 7c 24 0c 01 01 00 00 	cmp    DWORD PTR [esp+0xc],0x101
c0013f43:	74 22                	je     c0013f67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0013f45:	81 7c 24 0c 01 04 00 00 	cmp    DWORD PTR [esp+0xc],0x401
c0013f4d:	74 18                	je     c0013f67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0013f4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f53:	66 83 f8 0e          	cmp    ax,0xe
c0013f57:	b9 0a 00 00 00       	mov    ecx,0xa
c0013f5c:	77 03                	ja     c0013f61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62c>
c0013f5e:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013f61:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013f65:	76 1f                	jbe    c0013f86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c0013f67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013f6b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013f70:	74 68                	je     c0013fda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	68 90 09 02 c0       	push   0xc0020990
c0013f7a:	e8 98 c4 ff ff       	call   c0010417 <KePanic(char const*)>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f86:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f88:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013f8d:	74 13                	je     c0013fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66d>
c0013f8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013f93:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013f9a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013f9e:	01 c8                	add    eax,ecx
c0013fa0:	eb 04                	jmp    c0013fa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x671>
c0013fa2:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013fa6:	01 c2                	add    edx,eax
c0013fa8:	89 16                	mov    DWORD PTR [esi],edx
c0013faa:	eb 69                	jmp    c0014015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0013fac:	56                   	push   esi
c0013fad:	56                   	push   esi
c0013fae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0013fb3:	50                   	push   eax
c0013fb4:	68 ac 09 02 c0       	push   0xc00209ac
c0013fb9:	e8 a5 66 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013fc6:	74 12                	je     c0013fda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	68 b7 09 02 c0       	push   0xc00209b7
c0013fd0:	e8 42 c4 ff ff       	call   c0010417 <KePanic(char const*)>
c0013fd5:	83 c4 10             	add    esp,0x10
c0013fd8:	eb 3b                	jmp    c0014015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0013fda:	83 ec 0c             	sub    esp,0xc
c0013fdd:	55                   	push   ebp
c0013fde:	e8 13 6d ff ff       	call   c000acf6 <File::close()>
c0013fe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fe6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013fe9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fef:	e8 8f 38 ff ff       	call   c0007883 <free>
c0013ff4:	59                   	pop    ecx
c0013ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ff9:	e8 85 38 ff ff       	call   c0007883 <free>
c0013ffe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014001:	e8 7d 38 ff ff       	call   c0007883 <free>
c0014006:	5b                   	pop    ebx
c0014007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400b:	e8 73 38 ff ff       	call   c0007883 <free>
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	eb 1e                	jmp    c0014033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0014015:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014019:	e9 64 fd ff ff       	jmp    c0013d82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44d>
c001401e:	83 ec 0c             	sub    esp,0xc
c0014021:	53                   	push   ebx
c0014022:	e8 5c 38 ff ff       	call   c0007883 <free>
c0014027:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001402b:	83 c4 10             	add    esp,0x10
c001402e:	e9 e1 fc ff ff       	jmp    c0013d14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0014033:	31 c0                	xor    eax,eax
c0014035:	eb 33                	jmp    c001406a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x735>
c0014037:	83 ec 0c             	sub    esp,0xc
c001403a:	55                   	push   ebp
c001403b:	e8 b6 6c ff ff       	call   c000acf6 <File::close()>
c0014040:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014043:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014046:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014049:	58                   	pop    eax
c001404a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001404e:	e8 30 38 ff ff       	call   c0007883 <free>
c0014053:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014056:	e8 28 38 ff ff       	call   c0007883 <free>
c001405b:	5a                   	pop    edx
c001405c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014060:	e8 1e 38 ff ff       	call   c0007883 <free>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	b0 01                	mov    al,0x1
c001406a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014070:	5b                   	pop    ebx
c0014071:	5e                   	pop    esi
c0014072:	5f                   	pop    edi
c0014073:	5d                   	pop    ebp
c0014074:	c3                   	ret    

c0014075 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014075:	56                   	push   esi
c0014076:	31 d2                	xor    edx,edx
c0014078:	53                   	push   ebx
c0014079:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c001407f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014083:	39 d3                	cmp    ebx,edx
c0014085:	7e 1b                	jle    c00140a2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014087:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c001408e:	39 c8                	cmp    eax,ecx
c0014090:	77 0d                	ja     c001409f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014092:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0014099:	01 c6                	add    esi,eax
c001409b:	39 ce                	cmp    esi,ecx
c001409d:	77 05                	ja     c00140a4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001409f:	42                   	inc    edx
c00140a0:	eb e1                	jmp    c0014083 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00140a2:	31 c0                	xor    eax,eax
c00140a4:	5b                   	pop    ebx
c00140a5:	5e                   	pop    esi
c00140a6:	c3                   	ret    

c00140a7 <Thr::getDriverNameFromAddress(unsigned long)>:
c00140a7:	53                   	push   ebx
c00140a8:	31 c0                	xor    eax,eax
c00140aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140ae:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c00140b4:	39 c3                	cmp    ebx,eax
c00140b6:	7e 22                	jle    c00140da <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00140b8:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c00140bf:	39 ca                	cmp    edx,ecx
c00140c1:	77 14                	ja     c00140d7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00140c3:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c00140ca:	39 ca                	cmp    edx,ecx
c00140cc:	76 09                	jbe    c00140d7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00140ce:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c00140d5:	eb 05                	jmp    c00140dc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00140d7:	40                   	inc    eax
c00140d8:	eb da                	jmp    c00140b4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00140da:	31 c0                	xor    eax,eax
c00140dc:	5b                   	pop    ebx
c00140dd:	c3                   	ret    

c00140de <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00140de:	53                   	push   ebx
c00140df:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00140e3:	53                   	push   ebx
c00140e4:	e8 8c ff ff ff       	call   c0014075 <Thr::getDriverBaseFromAddress(unsigned long)>
c00140e9:	5a                   	pop    edx
c00140ea:	31 d2                	xor    edx,edx
c00140ec:	85 c0                	test   eax,eax
c00140ee:	74 04                	je     c00140f4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00140f0:	89 da                	mov    edx,ebx
c00140f2:	29 c2                	sub    edx,eax
c00140f4:	89 d0                	mov    eax,edx
c00140f6:	5b                   	pop    ebx
c00140f7:	c3                   	ret    

c00140f8 <Thr::loadDLL(char const*, bool)>:
c00140f8:	55                   	push   ebp
c00140f9:	57                   	push   edi
c00140fa:	56                   	push   esi
c00140fb:	53                   	push   ebx
c00140fc:	81 ec 34 01 00 00    	sub    esp,0x134
c0014102:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014109:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014110:	56                   	push   esi
c0014111:	68 cf 09 02 c0       	push   0xc00209cf
c0014116:	e8 48 65 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001411b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014122:	e8 4c 37 ff ff       	call   c0007873 <malloc>
c0014127:	83 c4 0c             	add    esp,0xc
c001412a:	89 c3                	mov    ebx,eax
c001412c:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0014132:	56                   	push   esi
c0014133:	50                   	push   eax
c0014134:	e8 9f 6a ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0014139:	83 c4 10             	add    esp,0x10
c001413c:	85 db                	test   ebx,ebx
c001413e:	75 3c                	jne    c001417c <Thr::loadDLL(char const*, bool)+0x84>
c0014140:	89 e8                	mov    eax,ebp
c0014142:	84 c0                	test   al,al
c0014144:	0f 84 d6 01 00 00    	je     c0014320 <Thr::loadDLL(char const*, bool)+0x228>
c001414a:	57                   	push   edi
c001414b:	57                   	push   edi
c001414c:	68 e0 09 02 c0       	push   0xc00209e0
c0014151:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014155:	57                   	push   edi
c0014156:	e8 95 c4 fe ff       	call   c00005f0 <strcpy>
c001415b:	58                   	pop    eax
c001415c:	5a                   	pop    edx
c001415d:	56                   	push   esi
c001415e:	57                   	push   edi
c001415f:	e8 5c c6 fe ff       	call   c00007c0 <strcat>
c0014164:	59                   	pop    ecx
c0014165:	58                   	pop    eax
c0014166:	68 f3 09 02 c0       	push   0xc00209f3
c001416b:	57                   	push   edi
c001416c:	e8 4f c6 fe ff       	call   c00007c0 <strcat>
c0014171:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014174:	e8 9e c2 ff ff       	call   c0010417 <KePanic(char const*)>
c0014179:	83 c4 10             	add    esp,0x10
c001417c:	51                   	push   ecx
c001417d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014181:	50                   	push   eax
c0014182:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014186:	50                   	push   eax
c0014187:	53                   	push   ebx
c0014188:	e8 b7 6d ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	85 db                	test   ebx,ebx
c0014192:	74 0c                	je     c00141a0 <Thr::loadDLL(char const*, bool)+0xa8>
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014199:	53                   	push   ebx
c001419a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00141a5:	75 0a                	jne    c00141b1 <Thr::loadDLL(char const*, bool)+0xb9>
c00141a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141ab:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00141af:	75 3c                	jne    c00141ed <Thr::loadDLL(char const*, bool)+0xf5>
c00141b1:	89 e8                	mov    eax,ebp
c00141b3:	84 c0                	test   al,al
c00141b5:	0f 84 63 01 00 00    	je     c001431e <Thr::loadDLL(char const*, bool)+0x226>
c00141bb:	51                   	push   ecx
c00141bc:	51                   	push   ecx
c00141bd:	68 e0 09 02 c0       	push   0xc00209e0
c00141c2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00141c6:	53                   	push   ebx
c00141c7:	e8 24 c4 fe ff       	call   c00005f0 <strcpy>
c00141cc:	5f                   	pop    edi
c00141cd:	58                   	pop    eax
c00141ce:	56                   	push   esi
c00141cf:	53                   	push   ebx
c00141d0:	e8 eb c5 fe ff       	call   c00007c0 <strcat>
c00141d5:	58                   	pop    eax
c00141d6:	5a                   	pop    edx
c00141d7:	68 f3 09 02 c0       	push   0xc00209f3
c00141dc:	53                   	push   ebx
c00141dd:	e8 de c5 fe ff       	call   c00007c0 <strcat>
c00141e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141e5:	e8 2d c2 ff ff       	call   c0010417 <KePanic(char const*)>
c00141ea:	83 c4 10             	add    esp,0x10
c00141ed:	52                   	push   edx
c00141ee:	6a 03                	push   0x3
c00141f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00141f8:	05 ff 0f 00 00       	add    eax,0xfff
c00141fd:	83 d2 00             	adc    edx,0x0
c0014200:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014204:	50                   	push   eax
c0014205:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001420b:	e8 38 59 ff ff       	call   c0009b48 <VAS::allocatePages(int, int)>
c0014210:	59                   	pop    ecx
c0014211:	89 c3                	mov    ebx,eax
c0014213:	5f                   	pop    edi
c0014214:	50                   	push   eax
c0014215:	68 72 f5 01 c0       	push   0xc001f572
c001421a:	e8 44 64 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001421f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014222:	e8 09 c3 fe ff       	call   c0000530 <strlen>
c0014227:	40                   	inc    eax
c0014228:	8b 3d a0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a0
c001422e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014231:	e8 3d 36 ff ff       	call   c0007873 <malloc>
c0014236:	89 04 bd c0 6d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9240],eax
c001423d:	58                   	pop    eax
c001423e:	5a                   	pop    edx
c001423f:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014244:	56                   	push   esi
c0014245:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c001424c:	e8 9f c3 fe ff       	call   c00005f0 <strcpy>
c0014251:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014256:	8d 50 01             	lea    edx,[eax+0x1]
c0014259:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0014260:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0014266:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001426a:	83 c4 0c             	add    esp,0xc
c001426d:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0014274:	6a 01                	push   0x1
c0014276:	53                   	push   ebx
c0014277:	56                   	push   esi
c0014278:	e8 b8 f6 ff ff       	call   c0013935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001427d:	83 c4 10             	add    esp,0x10
c0014280:	89 c7                	mov    edi,eax
c0014282:	fe c8                	dec    al
c0014284:	74 2e                	je     c00142b4 <Thr::loadDLL(char const*, bool)+0x1bc>
c0014286:	89 e8                	mov    eax,ebp
c0014288:	84 c0                	test   al,al
c001428a:	74 12                	je     c001429e <Thr::loadDLL(char const*, bool)+0x1a6>
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	68 f5 09 02 c0       	push   0xc00209f5
c0014294:	e8 7e c1 ff ff       	call   c0010417 <KePanic(char const*)>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	eb 06                	jmp    c00142a4 <Thr::loadDLL(char const*, bool)+0x1ac>
c001429e:	89 f8                	mov    eax,edi
c00142a0:	84 c0                	test   al,al
c00142a2:	75 10                	jne    c00142b4 <Thr::loadDLL(char const*, bool)+0x1bc>
c00142a4:	83 ec 0c             	sub    esp,0xc
c00142a7:	68 14 0a 02 c0       	push   0xc0020a14
c00142ac:	e8 66 c1 ff ff       	call   c0010417 <KePanic(char const*)>
c00142b1:	83 c4 10             	add    esp,0x10
c00142b4:	31 f6                	xor    esi,esi
c00142b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142be:	05 ff 0f 00 00       	add    eax,0xfff
c00142c3:	83 d2 00             	adc    edx,0x0
c00142c6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00142ca:	c1 ea 0c             	shr    edx,0xc
c00142cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00142d5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00142d9:	ba 00 00 00 00       	mov    edx,0x0
c00142de:	89 d0                	mov    eax,edx
c00142e0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00142e4:	73 32                	jae    c0014318 <Thr::loadDLL(char const*, bool)+0x220>
c00142e6:	50                   	push   eax
c00142e7:	50                   	push   eax
c00142e8:	89 f0                	mov    eax,esi
c00142ea:	c1 e0 0c             	shl    eax,0xc
c00142ed:	01 d8                	add    eax,ebx
c00142ef:	50                   	push   eax
c00142f0:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00142f6:	e8 57 53 ff ff       	call   c0009652 <VAS::getPageTableEntry(unsigned long)>
c00142fb:	83 c4 10             	add    esp,0x10
c00142fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014300:	a8 60                	test   al,0x60
c0014302:	75 11                	jne    c0014315 <Thr::loadDLL(char const*, bool)+0x21d>
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	25 00 f0 ff ff       	and    eax,0xfffff000
c001430c:	50                   	push   eax
c001430d:	e8 f0 37 ff ff       	call   c0007b02 <Phys::freePage(unsigned long)>
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	46                   	inc    esi
c0014316:	eb 9e                	jmp    c00142b6 <Thr::loadDLL(char const*, bool)+0x1be>
c0014318:	89 f8                	mov    eax,edi
c001431a:	84 c0                	test   al,al
c001431c:	75 02                	jne    c0014320 <Thr::loadDLL(char const*, bool)+0x228>
c001431e:	31 db                	xor    ebx,ebx
c0014320:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014326:	89 d8                	mov    eax,ebx
c0014328:	5b                   	pop    ebx
c0014329:	5e                   	pop    esi
c001432a:	5f                   	pop    edi
c001432b:	5d                   	pop    ebp
c001432c:	c3                   	ret    

c001432d <Thr::executeDLL(unsigned long, void*)>:
c001432d:	56                   	push   esi
c001432e:	53                   	push   ebx
c001432f:	52                   	push   edx
c0014330:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014334:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014338:	85 db                	test   ebx,ebx
c001433a:	75 10                	jne    c001434c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	68 30 0a 02 c0       	push   0xc0020a30
c0014344:	e8 ce c0 ff ff       	call   c0010417 <KePanic(char const*)>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	50                   	push   eax
c001434d:	50                   	push   eax
c001434e:	53                   	push   ebx
c001434f:	68 5a 0a 02 c0       	push   0xc0020a5a
c0014354:	e8 0a 63 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0014359:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001435d:	83 c4 14             	add    esp,0x14
c0014360:	89 d8                	mov    eax,ebx
c0014362:	5b                   	pop    ebx
c0014363:	5e                   	pop    esi
c0014364:	ff e0                	jmp    eax
c0014366:	66 90                	xchg   ax,ax

c0014368 <userModeEntryPoint(void*)>:
c0014368:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001436d:	48                   	dec    eax
c001436e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014373:	75 03                	jne    c0014378 <userModeEntryPoint(void*)+0x10>
c0014375:	fb                   	sti    
c0014376:	66 90                	xchg   ax,ax
c0014378:	fb                   	sti    
c0014379:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014381:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014387:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001438b:	e9 af be fe ff       	jmp    c000023f <goToUsermode>

c0014390 <changeTSS>:
c0014390:	83 ec 14             	sub    esp,0x14
c0014393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014398:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001439b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00143a0:	c1 e2 15             	shl    edx,0x15
c00143a3:	29 d0                	sub    eax,edx
c00143a5:	50                   	push   eax
c00143a6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00143ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143b1:	05 7c 11 00 00       	add    eax,0x117c
c00143b6:	50                   	push   eax
c00143b7:	e8 04 49 ff ff       	call   c0008cc0 <TSS::setESP(unsigned long)>
c00143bc:	83 c4 1c             	add    esp,0x1c
c00143bf:	c3                   	ret    

c00143c0 <switchToThread(ThreadControlBlock*)>:
c00143c0:	57                   	push   edi
c00143c1:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c00143c7:	56                   	push   esi
c00143c8:	85 c9                	test   ecx,ecx
c00143ca:	53                   	push   ebx
c00143cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143cf:	0f 85 93 00 00 00    	jne    c0014468 <switchToThread(ThreadControlBlock*)+0xa8>
c00143d5:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00143d8:	80 fa ff             	cmp    dl,0xff
c00143db:	0f 84 83 00 00 00    	je     c0014464 <switchToThread(ThreadControlBlock*)+0xa4>
c00143e1:	81 e2 ff 00 00 00    	and    edx,0xff
c00143e7:	b8 00 04 00 00       	mov    eax,0x400
c00143ec:	29 d0                	sub    eax,edx
c00143ee:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00143f1:	d1 f8                	sar    eax,1
c00143f3:	01 d0                	add    eax,edx
c00143f5:	8d 76 00             	lea    esi,[esi+0x0]
c00143f8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00143fb:	e8 d8 26 00 00       	call   c0016ad8 <HalQueryPerformanceCounter()>
c0014400:	89 c6                	mov    esi,eax
c0014402:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c0014407:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c001440d:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c0014412:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c0014418:	89 d7                	mov    edi,edx
c001441a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014420:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0014426:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c001442c:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c0014432:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014435:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014438:	01 c6                	add    esi,eax
c001443a:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0014440:	11 d7                	adc    edi,edx
c0014442:	83 ec 0c             	sub    esp,0xc
c0014445:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014448:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001444b:	53                   	push   ebx
c001444c:	e8 26 be fe ff       	call   c0000277 <switchToThreadASM>
c0014451:	0f 20 c0             	mov    eax,cr0
c0014454:	83 c8 08             	or     eax,0x8
c0014457:	0f 22 c0             	mov    cr0,eax
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	5b                   	pop    ebx
c001445e:	5e                   	pop    esi
c001445f:	5f                   	pop    edi
c0014460:	c3                   	ret    
c0014461:	8d 76 00             	lea    esi,[esi+0x0]
c0014464:	31 c0                	xor    eax,eax
c0014466:	eb 90                	jmp    c00143f8 <switchToThread(ThreadControlBlock*)+0x38>
c0014468:	5b                   	pop    ebx
c0014469:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014473:	5e                   	pop    esi
c0014474:	5f                   	pop    edi
c0014475:	c3                   	ret    
c0014476:	66 90                	xchg   ax,ax

c0014478 <Process::addArgs(char**)>:
c0014478:	57                   	push   edi
c0014479:	56                   	push   esi
c001447a:	53                   	push   ebx
c001447b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001447f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014483:	85 ff                	test   edi,edi
c0014485:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001448f:	74 4b                	je     c00144dc <Process::addArgs(char**)+0x64>
c0014491:	8b 07                	mov    eax,DWORD PTR [edi]
c0014493:	85 c0                	test   eax,eax
c0014495:	74 45                	je     c00144dc <Process::addArgs(char**)+0x64>
c0014497:	31 db                	xor    ebx,ebx
c0014499:	8d 76 00             	lea    esi,[esi+0x0]
c001449c:	83 ec 0c             	sub    esp,0xc
c001449f:	50                   	push   eax
c00144a0:	e8 8b c0 fe ff       	call   c0000530 <strlen>
c00144a5:	40                   	inc    eax
c00144a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00144a9:	e8 c5 33 ff ff       	call   c0007873 <malloc>
c00144ae:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00144b5:	5a                   	pop    edx
c00144b6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00144b9:	59                   	pop    ecx
c00144ba:	43                   	inc    ebx
c00144bb:	52                   	push   edx
c00144bc:	50                   	push   eax
c00144bd:	e8 2e c1 fe ff       	call   c00005f0 <strcpy>
c00144c2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	41                   	inc    ecx
c00144cc:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00144d2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 c3                	jne    c001449c <Process::addArgs(char**)+0x24>
c00144d9:	8d 76 00             	lea    esi,[esi+0x0]
c00144dc:	5b                   	pop    ebx
c00144dd:	5e                   	pop    esi
c00144de:	5f                   	pop    edi
c00144df:	c3                   	ret    

c00144e0 <Process::Process(char const*, Process*, char**)>:
c00144e0:	56                   	push   esi
c00144e1:	53                   	push   ebx
c00144e2:	83 ec 14             	sub    esp,0x14
c00144e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e9:	05 0c 02 00 00       	add    eax,0x20c
c00144ee:	bb 07 00 00 00       	mov    ebx,0x7
c00144f3:	89 c6                	mov    esi,eax
c00144f5:	8d 76 00             	lea    esi,[esi+0x0]
c00144f8:	85 db                	test   ebx,ebx
c00144fa:	78 14                	js     c0014510 <Process::Process(char const*, Process*, char**)+0x30>
c00144fc:	83 ec 0c             	sub    esp,0xc
c00144ff:	56                   	push   esi
c0014500:	e8 ef a2 00 00       	call   c001e7f4 <ThreadControlBlock::ThreadControlBlock()>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	83 c6 5f             	add    esi,0x5f
c001450b:	4b                   	dec    ebx
c001450c:	eb ea                	jmp    c00144f8 <Process::Process(char const*, Process*, char**)+0x18>
c001450e:	66 90                	xchg   ax,ax
c0014510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014514:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001451b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014526:	83 ec 0c             	sub    esp,0xc
c0014529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001452d:	e8 da bc ff ff       	call   c001020c <Krnl::newProcessEnv(Process*)>
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	89 c2                	mov    edx,eax
c0014537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014545:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001454e:	a1 20 1c 02 c0       	mov    eax,ds:0xc0021c20
c0014553:	8d 50 01             	lea    edx,[eax+0x1]
c0014556:	89 15 20 1c 02 c0    	mov    DWORD PTR ds:0xc0021c20,edx
c001455c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014560:	89 02                	mov    DWORD PTR [edx],eax
c0014562:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014571:	e8 fd 32 ff ff       	call   c0007873 <malloc>
c0014576:	83 c4 10             	add    esp,0x10
c0014579:	89 c3                	mov    ebx,eax
c001457b:	83 ec 08             	sub    esp,0x8
c001457e:	6a 00                	push   0x0
c0014580:	53                   	push   ebx
c0014581:	e8 72 59 ff ff       	call   c0009ef8 <VAS::VAS(bool)>
c0014586:	83 c4 10             	add    esp,0x10
c0014589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014597:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00145a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00145a9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00145af:	e8 52 c2 ff ff       	call   c0010806 <KeInitSignals()>
c00145b4:	89 c2                	mov    edx,eax
c00145b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00145c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00145ca:	85 c0                	test   eax,eax
c00145cc:	74 42                	je     c0014610 <Process::Process(char const*, Process*, char**)+0x130>
c00145ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00145d8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00145de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00145e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00145f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00145f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fc:	05 0c 01 00 00       	add    eax,0x10c
c0014601:	83 ec 08             	sub    esp,0x8
c0014604:	52                   	push   edx
c0014605:	50                   	push   eax
c0014606:	e8 e5 bf fe ff       	call   c00005f0 <strcpy>
c001460b:	83 c4 10             	add    esp,0x10
c001460e:	eb 64                	jmp    c0014674 <Process::Process(char const*, Process*, char**)+0x194>
c0014610:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014618:	83 ec 0c             	sub    esp,0xc
c001461b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001461f:	e8 4f 32 ff ff       	call   c0007873 <malloc>
c0014624:	83 c4 10             	add    esp,0x10
c0014627:	89 c3                	mov    ebx,eax
c0014629:	83 ec 08             	sub    esp,0x8
c001462c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014630:	53                   	push   ebx
c0014631:	e8 a4 43 ff ff       	call   c00089da <VgaText::VgaText(char const*)>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014647:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001464d:	83 ec 0c             	sub    esp,0xc
c0014650:	50                   	push   eax
c0014651:	e8 2a 3c ff ff       	call   c0008280 <addToTerminalCycle(VgaText*)>
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465d:	05 0c 01 00 00       	add    eax,0x10c
c0014662:	83 ec 08             	sub    esp,0x8
c0014665:	68 79 0a 02 c0       	push   0xc0020a79
c001466a:	50                   	push   eax
c001466b:	e8 80 bf fe ff       	call   c00005f0 <strcpy>
c0014670:	83 c4 10             	add    esp,0x10
c0014673:	90                   	nop
c0014674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014678:	83 c0 0c             	add    eax,0xc
c001467b:	83 ec 08             	sub    esp,0x8
c001467e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014682:	50                   	push   eax
c0014683:	e8 68 bf fe ff       	call   c00005f0 <strcpy>
c0014688:	83 c4 10             	add    esp,0x10
c001468b:	83 ec 08             	sub    esp,0x8
c001468e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014692:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014696:	e8 dd fd ff ff       	call   c0014478 <Process::addArgs(char**)>
c001469b:	83 c4 10             	add    esp,0x10
c001469e:	83 ec 08             	sub    esp,0x8
c00146a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146a9:	e8 51 ed ff ff       	call   c00133ff <Thr::loadProgramIntoMemory(Process*, char const*)>
c00146ae:	83 c4 10             	add    esp,0x10
c00146b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00146b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00146b9:	83 f0 01             	xor    eax,0x1
c00146bc:	88 c2                	mov    dl,al
c00146be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00146c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00146cc:	25 ff 00 00 00       	and    eax,0xff
c00146d1:	83 ec 08             	sub    esp,0x8
c00146d4:	50                   	push   eax
c00146d5:	68 d0 0a 02 c0       	push   0xc0020ad0
c00146da:	e8 84 5f ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00146df:	83 c4 10             	add    esp,0x10
c00146e2:	90                   	nop
c00146e3:	83 c4 14             	add    esp,0x14
c00146e6:	5b                   	pop    ebx
c00146e7:	5e                   	pop    esi
c00146e8:	c3                   	ret    
c00146e9:	90                   	nop
c00146ea:	66 90                	xchg   ax,ax

c00146ec <Process::Process(bool, char const*, Process*, char**)>:
c00146ec:	56                   	push   esi
c00146ed:	53                   	push   ebx
c00146ee:	83 ec 24             	sub    esp,0x24
c00146f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146f5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00146f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146fd:	05 0c 02 00 00       	add    eax,0x20c
c0014702:	bb 07 00 00 00       	mov    ebx,0x7
c0014707:	89 c6                	mov    esi,eax
c0014709:	8d 76 00             	lea    esi,[esi+0x0]
c001470c:	85 db                	test   ebx,ebx
c001470e:	78 14                	js     c0014724 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	56                   	push   esi
c0014714:	e8 db a0 00 00       	call   c001e7f4 <ThreadControlBlock::ThreadControlBlock()>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	83 c6 5f             	add    esi,0x5f
c001471f:	4b                   	dec    ebx
c0014720:	eb ea                	jmp    c001470c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014722:	66 90                	xchg   ax,ax
c0014724:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014728:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001472f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014733:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001473a:	83 ec 0c             	sub    esp,0xc
c001473d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014741:	e8 c6 ba ff ff       	call   c001020c <Krnl::newProcessEnv(Process*)>
c0014746:	83 c4 10             	add    esp,0x10
c0014749:	89 c2                	mov    edx,eax
c001474b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001474f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014759:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014762:	a1 20 1c 02 c0       	mov    eax,ds:0xc0021c20
c0014767:	8d 50 01             	lea    edx,[eax+0x1]
c001476a:	89 15 20 1c 02 c0    	mov    DWORD PTR ds:0xc0021c20,edx
c0014770:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014774:	89 02                	mov    DWORD PTR [edx],eax
c0014776:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014785:	e8 e9 30 ff ff       	call   c0007873 <malloc>
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	89 c3                	mov    ebx,eax
c001478f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014793:	25 ff 00 00 00       	and    eax,0xff
c0014798:	83 ec 08             	sub    esp,0x8
c001479b:	50                   	push   eax
c001479c:	53                   	push   ebx
c001479d:	e8 56 57 ff ff       	call   c0009ef8 <VAS::VAS(bool)>
c00147a2:	83 c4 10             	add    esp,0x10
c00147a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147a9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00147af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147b3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00147bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00147c5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00147cb:	e8 36 c0 ff ff       	call   c0010806 <KeInitSignals()>
c00147d0:	89 c2                	mov    edx,eax
c00147d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147d6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00147dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00147e6:	85 c0                	test   eax,eax
c00147e8:	74 42                	je     c001482c <Process::Process(bool, char const*, Process*, char**)+0x140>
c00147ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00147f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00147fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014808:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001480e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014818:	05 0c 01 00 00       	add    eax,0x10c
c001481d:	83 ec 08             	sub    esp,0x8
c0014820:	52                   	push   edx
c0014821:	50                   	push   eax
c0014822:	e8 c9 bd fe ff       	call   c00005f0 <strcpy>
c0014827:	83 c4 10             	add    esp,0x10
c001482a:	eb 64                	jmp    c0014890 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001482c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014834:	83 ec 0c             	sub    esp,0xc
c0014837:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001483b:	e8 33 30 ff ff       	call   c0007873 <malloc>
c0014840:	83 c4 10             	add    esp,0x10
c0014843:	89 c3                	mov    ebx,eax
c0014845:	83 ec 08             	sub    esp,0x8
c0014848:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001484c:	53                   	push   ebx
c001484d:	e8 88 41 ff ff       	call   c00089da <VgaText::VgaText(char const*)>
c0014852:	83 c4 10             	add    esp,0x10
c0014855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014859:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001485f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014863:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014869:	83 ec 0c             	sub    esp,0xc
c001486c:	50                   	push   eax
c001486d:	e8 0e 3a ff ff       	call   c0008280 <addToTerminalCycle(VgaText*)>
c0014872:	83 c4 10             	add    esp,0x10
c0014875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014879:	05 0c 01 00 00       	add    eax,0x10c
c001487e:	83 ec 08             	sub    esp,0x8
c0014881:	68 79 0a 02 c0       	push   0xc0020a79
c0014886:	50                   	push   eax
c0014887:	e8 64 bd fe ff       	call   c00005f0 <strcpy>
c001488c:	83 c4 10             	add    esp,0x10
c001488f:	90                   	nop
c0014890:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014894:	83 c0 0c             	add    eax,0xc
c0014897:	83 ec 08             	sub    esp,0x8
c001489a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001489e:	50                   	push   eax
c001489f:	e8 4c bd fe ff       	call   c00005f0 <strcpy>
c00148a4:	83 c4 10             	add    esp,0x10
c00148a7:	83 ec 08             	sub    esp,0x8
c00148aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00148ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00148b2:	e8 c1 fb ff ff       	call   c0014478 <Process::addArgs(char**)>
c00148b7:	83 c4 10             	add    esp,0x10
c00148ba:	90                   	nop
c00148bb:	83 c4 24             	add    esp,0x24
c00148be:	5b                   	pop    ebx
c00148bf:	5e                   	pop    esi
c00148c0:	c3                   	ret    
c00148c1:	8d 76 00             	lea    esi,[esi+0x0]

c00148c4 <taskStartupFunction>:
c00148c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00148cc:	c3                   	ret    
c00148cd:	90                   	nop
c00148ce:	66 90                	xchg   ax,ax

c00148d0 <Semaphore::Semaphore(int)>:
c00148d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148d8:	89 10                	mov    DWORD PTR [eax],edx
c00148da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148de:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00148e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00148f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00148fb:	90                   	nop
c00148fc:	c3                   	ret    
c00148fd:	90                   	nop
c00148fe:	66 90                	xchg   ax,ax

c0014900 <Mutex::Mutex()>:
c0014900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014904:	6a 01                	push   0x1
c0014906:	50                   	push   eax
c0014907:	e8 c4 ff ff ff       	call   c00148d0 <Semaphore::Semaphore(int)>
c001490c:	83 c4 08             	add    esp,0x8
c001490f:	90                   	nop
c0014910:	c3                   	ret    
c0014911:	90                   	nop
c0014912:	66 90                	xchg   ax,ax

c0014914 <Process::createThread(void (*)(void*), void*, int)>:
c0014914:	57                   	push   edi
c0014915:	31 c9                	xor    ecx,ecx
c0014917:	56                   	push   esi
c0014918:	53                   	push   ebx
c0014919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001491d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014924:	89 f2                	mov    edx,esi
c0014926:	66 90                	xchg   ax,ax
c0014928:	31 c0                	xor    eax,eax
c001492a:	66 89 d0             	mov    ax,dx
c001492d:	83 e2 01             	and    edx,0x1
c0014930:	74 12                	je     c0014944 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014932:	d1 f8                	sar    eax,1
c0014934:	41                   	inc    ecx
c0014935:	89 c2                	mov    edx,eax
c0014937:	83 f9 10             	cmp    ecx,0x10
c001493a:	75 ec                	jne    c0014928 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001493c:	31 db                	xor    ebx,ebx
c001493e:	89 d8                	mov    eax,ebx
c0014940:	5b                   	pop    ebx
c0014941:	5e                   	pop    esi
c0014942:	5f                   	pop    edi
c0014943:	c3                   	ret    
c0014944:	b8 01 00 00 00       	mov    eax,0x1
c0014949:	d3 e0                	shl    eax,cl
c001494b:	09 c6                	or     esi,eax
c001494d:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014950:	c1 e0 05             	shl    eax,0x5
c0014953:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001495a:	29 c8                	sub    eax,ecx
c001495c:	01 d8                	add    eax,ebx
c001495e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014965:	75 0d                	jne    c0014974 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014967:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014971:	8d 76 00             	lea    esi,[esi+0x0]
c0014974:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014977:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001497d:	c1 e6 05             	shl    esi,0x5
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	29 ce                	sub    esi,ecx
c0014985:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014988:	8d 04 33             	lea    eax,[ebx+esi*1]
c001498b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014991:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014995:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001499b:	89 ca                	mov    edx,ecx
c001499d:	f7 da                	neg    edx
c001499f:	c1 e2 15             	shl    edx,0x15
c00149a2:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00149a8:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00149ae:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00149b4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00149ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00149be:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00149c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149c8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00149d2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00149d8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00149e2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00149ec:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00149f2:	68 00 01 00 00       	push   0x100
c00149f7:	e8 77 2e ff ff       	call   c0007873 <malloc>
c00149fc:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014a03:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014a06:	58                   	pop    eax
c0014a07:	5a                   	pop    edx
c0014a08:	53                   	push   ebx
c0014a09:	68 84 71 02 c0       	push   0xc0027184
c0014a0e:	e8 79 9b 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a13:	83 c4 10             	add    esp,0x10
c0014a16:	89 d8                	mov    eax,ebx
c0014a18:	5b                   	pop    ebx
c0014a19:	5e                   	pop    esi
c0014a1a:	5f                   	pop    edi
c0014a1b:	c3                   	ret    

c0014a1c <Process::createUserThread()>:
c0014a1c:	83 ec 0c             	sub    esp,0xc
c0014a1f:	68 80 00 00 00       	push   0x80
c0014a24:	6a 00                	push   0x0
c0014a26:	68 68 43 01 c0       	push   0xc0014368
c0014a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a2f:	50                   	push   eax
c0014a30:	e8 df fe ff ff       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c0014a35:	83 c4 1c             	add    esp,0x1c
c0014a38:	c3                   	ret    
c0014a39:	8d 76 00             	lea    esi,[esi+0x0]

c0014a3c <setupMultitasking(void (*)())>:
c0014a3c:	56                   	push   esi
c0014a3d:	53                   	push   ebx
c0014a3e:	50                   	push   eax
c0014a3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a43:	eb 13                	jmp    c0014a58 <setupMultitasking(void (*)())+0x1c>
c0014a45:	8d 76 00             	lea    esi,[esi+0x0]
c0014a48:	83 ec 0c             	sub    esp,0xc
c0014a4b:	68 84 71 02 c0       	push   0xc0027184
c0014a50:	e8 7f 9a 00 00       	call   c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	83 ec 0c             	sub    esp,0xc
c0014a5b:	68 84 71 02 c0       	push   0xc0027184
c0014a60:	e8 4b 9a 00 00       	call   c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014a65:	83 c4 10             	add    esp,0x10
c0014a68:	84 c0                	test   al,al
c0014a6a:	74 dc                	je     c0014a48 <setupMultitasking(void (*)())+0xc>
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	68 24 07 00 00       	push   0x724
c0014a74:	e8 fa 2d ff ff       	call   c0007873 <malloc>
c0014a79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a80:	6a 00                	push   0x0
c0014a82:	68 7d 0a 02 c0       	push   0xc0020a7d
c0014a87:	89 c3                	mov    ebx,eax
c0014a89:	6a 01                	push   0x1
c0014a8b:	50                   	push   eax
c0014a8c:	e8 5b fc ff ff       	call   c00146ec <Process::Process(bool, char const*, Process*, char**)>
c0014a91:	83 c4 14             	add    esp,0x14
c0014a94:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014a9a:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014aa0:	50                   	push   eax
c0014aa1:	e8 31 3a ff ff       	call   c00084d7 <setActiveTerminal(VgaText*)>
c0014aa6:	66 8b 93 04 05 00 00 	mov    dx,WORD PTR [ebx+0x504]
c0014aad:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014ab3:	83 ca 01             	or     edx,0x1
c0014ab6:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014ac0:	66 89 93 04 05 00 00 	mov    WORD PTR [ebx+0x504],dx
c0014ac7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014aca:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014ad4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014ada:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014ae0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014aea:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014af4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014afe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014b04:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014b0e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014b18:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014b1f:	e8 4f 2d ff ff       	call   c0007873 <malloc>
c0014b24:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014b2a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014b30:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014b36:	59                   	pop    ecx
c0014b37:	58                   	pop    eax
c0014b38:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014b3e:	68 79 0a 02 c0       	push   0xc0020a79
c0014b43:	50                   	push   eax
c0014b44:	e8 a7 ba fe ff       	call   c00005f0 <strcpy>
c0014b49:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014b50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b54:	83 c4 14             	add    esp,0x14
c0014b57:	5b                   	pop    ebx
c0014b58:	5e                   	pop    esi
c0014b59:	e9 0b b7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014b5e:	66 90                	xchg   ax,ax

c0014b60 <schedule()>:
c0014b60:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014b65:	85 c0                	test   eax,eax
c0014b67:	74 0b                	je     c0014b74 <schedule()+0x14>
c0014b69:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014b73:	c3                   	ret    
c0014b74:	53                   	push   ebx
c0014b75:	83 ec 14             	sub    esp,0x14
c0014b78:	68 84 71 02 c0       	push   0xc0027184
c0014b7d:	e8 2e 99 00 00       	call   c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	84 c0                	test   al,al
c0014b87:	75 3b                	jne    c0014bc4 <schedule()+0x64>
c0014b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014b91:	4a                   	dec    edx
c0014b92:	74 38                	je     c0014bcc <schedule()+0x6c>
c0014b94:	83 ec 0c             	sub    esp,0xc
c0014b97:	68 84 71 02 c0       	push   0xc0027184
c0014b9c:	e8 2b 99 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ba1:	89 c3                	mov    ebx,eax
c0014ba3:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014baa:	e8 25 99 00 00       	call   c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014baf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014bb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bb9:	e8 02 f8 ff ff       	call   c00143c0 <switchToThread(ThreadControlBlock*)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014bc4:	83 c4 08             	add    esp,0x8
c0014bc7:	5b                   	pop    ebx
c0014bc8:	c3                   	ret    
c0014bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bcc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014bd3:	51                   	push   ecx
c0014bd4:	51                   	push   ecx
c0014bd5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014bdb:	53                   	push   ebx
c0014bdc:	68 84 71 02 c0       	push   0xc0027184
c0014be1:	e8 a6 99 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	eb a9                	jmp    c0014b94 <schedule()+0x34>
c0014beb:	90                   	nop

c0014bec <Semaphore::tryAcquire()>:
c0014bec:	53                   	push   ebx
c0014bed:	83 ec 08             	sub    esp,0x8
c0014bf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014bf4:	fa                   	cli    
c0014bf5:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c0014bfb:	8d 42 01             	lea    eax,[edx+0x1]
c0014bfe:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c03:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014c08:	8d 58 01             	lea    ebx,[eax+0x1]
c0014c0b:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014c11:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014c14:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014c16:	7c 2c                	jl     c0014c44 <Semaphore::tryAcquire()+0x58>
c0014c18:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014c1d:	85 c0                	test   eax,eax
c0014c1f:	75 0b                	jne    c0014c2c <Semaphore::tryAcquire()+0x40>
c0014c21:	8b 1d 60 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027160
c0014c27:	85 db                	test   ebx,ebx
c0014c29:	75 59                	jne    c0014c84 <Semaphore::tryAcquire()+0x98>
c0014c2b:	90                   	nop
c0014c2c:	31 c0                	xor    eax,eax
c0014c2e:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014c34:	85 d2                	test   edx,edx
c0014c36:	75 04                	jne    c0014c3c <Semaphore::tryAcquire()+0x50>
c0014c38:	fb                   	sti    
c0014c39:	8d 76 00             	lea    esi,[esi+0x0]
c0014c3c:	83 c4 08             	add    esp,0x8
c0014c3f:	5b                   	pop    ebx
c0014c40:	c3                   	ret    
c0014c41:	8d 76 00             	lea    esi,[esi+0x0]
c0014c44:	43                   	inc    ebx
c0014c45:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014c4a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0014c4d:	85 c0                	test   eax,eax
c0014c4f:	75 23                	jne    c0014c74 <Semaphore::tryAcquire()+0x88>
c0014c51:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014c56:	85 c0                	test   eax,eax
c0014c58:	74 1a                	je     c0014c74 <Semaphore::tryAcquire()+0x88>
c0014c5a:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c64:	e8 f7 fe ff ff       	call   c0014b60 <schedule()>
c0014c69:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c6e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014c71:	8d 76 00             	lea    esi,[esi+0x0]
c0014c74:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014c7a:	b0 01                	mov    al,0x1
c0014c7c:	85 d2                	test   edx,edx
c0014c7e:	75 bc                	jne    c0014c3c <Semaphore::tryAcquire()+0x50>
c0014c80:	eb b6                	jmp    c0014c38 <Semaphore::tryAcquire()+0x4c>
c0014c82:	66 90                	xchg   ax,ax
c0014c84:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c8e:	e8 cd fe ff ff       	call   c0014b60 <schedule()>
c0014c93:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c98:	8d 50 ff             	lea    edx,[eax-0x1]
c0014c9b:	31 c0                	xor    eax,eax
c0014c9d:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014ca3:	85 d2                	test   edx,edx
c0014ca5:	75 95                	jne    c0014c3c <Semaphore::tryAcquire()+0x50>
c0014ca7:	eb 8f                	jmp    c0014c38 <Semaphore::tryAcquire()+0x4c>
c0014ca9:	90                   	nop
c0014caa:	66 90                	xchg   ax,ax

c0014cac <Semaphore::assertLocked(char const*)>:
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014cb3:	fa                   	cli    
c0014cb4:	8b 0d 68 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027168
c0014cba:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014cbf:	41                   	inc    ecx
c0014cc0:	89 0d 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,ecx
c0014cc6:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cc9:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014ccf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014cd1:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014cd4:	7c 2a                	jl     c0014d00 <Semaphore::assertLocked(char const*)+0x54>
c0014cd6:	66 90                	xchg   ax,ax
c0014cd8:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014cdd:	85 c0                	test   eax,eax
c0014cdf:	75 0b                	jne    c0014cec <Semaphore::assertLocked(char const*)+0x40>
c0014ce1:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014ce6:	85 c0                	test   eax,eax
c0014ce8:	75 2e                	jne    c0014d18 <Semaphore::assertLocked(char const*)+0x6c>
c0014cea:	66 90                	xchg   ax,ax
c0014cec:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014cf1:	48                   	dec    eax
c0014cf2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014cf7:	75 03                	jne    c0014cfc <Semaphore::assertLocked(char const*)+0x50>
c0014cf9:	fb                   	sti    
c0014cfa:	66 90                	xchg   ax,ax
c0014cfc:	83 c4 0c             	add    esp,0xc
c0014cff:	c3                   	ret    
c0014d00:	83 ec 0c             	sub    esp,0xc
c0014d03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d07:	52                   	push   edx
c0014d08:	e8 0a b7 ff ff       	call   c0010417 <KePanic(char const*)>
c0014d0d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d12:	83 c4 10             	add    esp,0x10
c0014d15:	48                   	dec    eax
c0014d16:	eb c0                	jmp    c0014cd8 <Semaphore::assertLocked(char const*)+0x2c>
c0014d18:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014d22:	e8 39 fe ff ff       	call   c0014b60 <schedule()>
c0014d27:	eb c3                	jmp    c0014cec <Semaphore::assertLocked(char const*)+0x40>
c0014d29:	8d 76 00             	lea    esi,[esi+0x0]

c0014d2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014d2c:	83 ec 0c             	sub    esp,0xc
c0014d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d38:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d3b:	e8 20 fe ff ff       	call   c0014b60 <schedule()>
c0014d40:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d45:	48                   	dec    eax
c0014d46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d4b:	75 03                	jne    c0014d50 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014d4d:	fb                   	sti    
c0014d4e:	66 90                	xchg   ax,ax
c0014d50:	83 c4 0c             	add    esp,0xc
c0014d53:	c3                   	ret    

c0014d54 <blockTask(TaskState)>:
c0014d54:	83 ec 0c             	sub    esp,0xc
c0014d57:	fa                   	cli    
c0014d58:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d61:	40                   	inc    eax
c0014d62:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d6f:	e8 ec fd ff ff       	call   c0014b60 <schedule()>
c0014d74:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d79:	48                   	dec    eax
c0014d7a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d7f:	75 03                	jne    c0014d84 <blockTask(TaskState)+0x30>
c0014d81:	fb                   	sti    
c0014d82:	66 90                	xchg   ax,ax
c0014d84:	83 c4 0c             	add    esp,0xc
c0014d87:	c3                   	ret    

c0014d88 <waitTask(int, int*, int)>:
c0014d88:	83 ec 18             	sub    esp,0x18
c0014d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014d97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014da0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0014da3:	6a 07                	push   0x7
c0014da5:	e8 aa ff ff ff       	call   c0014d54 <blockTask(TaskState)>
c0014daa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014daf:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	85 d2                	test   edx,edx
c0014db7:	74 0b                	je     c0014dc4 <waitTask(int, int*, int)+0x3c>
c0014db9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014dbc:	89 02                	mov    DWORD PTR [edx],eax
c0014dbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dc3:	90                   	nop
c0014dc4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014dc7:	83 c4 0c             	add    esp,0xc
c0014dca:	c3                   	ret    
c0014dcb:	90                   	nop

c0014dcc <milliTenthSleepUntil(unsigned int)>:
c0014dcc:	83 ec 0c             	sub    esp,0xc
c0014dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dd3:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014dd9:	76 05                	jbe    c0014de0 <milliTenthSleepUntil(unsigned int)+0x14>
c0014ddb:	90                   	nop
c0014ddc:	83 c4 0c             	add    esp,0xc
c0014ddf:	c3                   	ret    
c0014de0:	fa                   	cli    
c0014de1:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c0014de7:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c0014ded:	41                   	inc    ecx
c0014dee:	42                   	inc    edx
c0014def:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014df5:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014dfb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014e01:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014e04:	50                   	push   eax
c0014e05:	50                   	push   eax
c0014e06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e0b:	50                   	push   eax
c0014e0c:	68 78 71 02 c0       	push   0xc0027178
c0014e11:	e8 76 97 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014e16:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014e1d:	e8 32 ff ff ff       	call   c0014d54 <blockTask(TaskState)>
c0014e22:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	48                   	dec    eax
c0014e2b:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014e30:	85 c0                	test   eax,eax
c0014e32:	75 0c                	jne    c0014e40 <milliTenthSleepUntil(unsigned int)+0x74>
c0014e34:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014e39:	85 c0                	test   eax,eax
c0014e3b:	75 17                	jne    c0014e54 <milliTenthSleepUntil(unsigned int)+0x88>
c0014e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e40:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e45:	48                   	dec    eax
c0014e46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e4b:	75 8f                	jne    c0014ddc <milliTenthSleepUntil(unsigned int)+0x10>
c0014e4d:	fb                   	sti    
c0014e4e:	83 c4 0c             	add    esp,0xc
c0014e51:	c3                   	ret    
c0014e52:	66 90                	xchg   ax,ax
c0014e54:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014e5e:	e8 fd fc ff ff       	call   c0014b60 <schedule()>
c0014e63:	eb db                	jmp    c0014e40 <milliTenthSleepUntil(unsigned int)+0x74>
c0014e65:	8d 76 00             	lea    esi,[esi+0x0]

c0014e68 <milliTenthSleep(unsigned int)>:
c0014e68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e6c:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014e71:	01 c2                	add    edx,eax
c0014e73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014e77:	e9 50 ff ff ff       	jmp    c0014dcc <milliTenthSleepUntil(unsigned int)>

c0014e7c <sleep(unsigned int)>:
c0014e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e80:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e83:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e86:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e89:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e8c:	c1 e0 04             	shl    eax,0x4
c0014e8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e93:	eb d3                	jmp    c0014e68 <milliTenthSleep(unsigned int)>
c0014e95:	90                   	nop
c0014e96:	66 90                	xchg   ax,ax

c0014e98 <Semaphore::acquire()>:
c0014e98:	83 ec 0c             	sub    esp,0xc
c0014e9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e9f:	fa                   	cli    
c0014ea0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ea5:	40                   	inc    eax
c0014ea6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014eab:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014eb0:	8d 48 01             	lea    ecx,[eax+0x1]
c0014eb3:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014eb9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014ebc:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014ebe:	7d 2c                	jge    c0014eec <Semaphore::acquire()+0x54>
c0014ec0:	41                   	inc    ecx
c0014ec1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014ec4:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014ec9:	85 c0                	test   eax,eax
c0014ecb:	75 0b                	jne    c0014ed8 <Semaphore::acquire()+0x40>
c0014ecd:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014ed2:	85 c0                	test   eax,eax
c0014ed4:	75 62                	jne    c0014f38 <Semaphore::acquire()+0xa0>
c0014ed6:	66 90                	xchg   ax,ax
c0014ed8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014edd:	48                   	dec    eax
c0014ede:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ee3:	75 03                	jne    c0014ee8 <Semaphore::acquire()+0x50>
c0014ee5:	fb                   	sti    
c0014ee6:	66 90                	xchg   ax,ax
c0014ee8:	83 c4 0c             	add    esp,0xc
c0014eeb:	c3                   	ret    
c0014eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014ef8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014efb:	85 c9                	test   ecx,ecx
c0014efd:	74 4d                	je     c0014f4c <Semaphore::acquire()+0xb4>
c0014eff:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014f02:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014f08:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014f0b:	90                   	nop
c0014f0c:	83 ec 0c             	sub    esp,0xc
c0014f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f14:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014f17:	68 f8 0a 02 c0       	push   0xc0020af8
c0014f1c:	e8 42 57 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0014f21:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014f28:	e8 27 fe ff ff       	call   c0014d54 <blockTask(TaskState)>
c0014f2d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014f32:	83 c4 10             	add    esp,0x10
c0014f35:	48                   	dec    eax
c0014f36:	eb 8c                	jmp    c0014ec4 <Semaphore::acquire()+0x2c>
c0014f38:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014f42:	e8 19 fc ff ff       	call   c0014b60 <schedule()>
c0014f47:	eb 8f                	jmp    c0014ed8 <Semaphore::acquire()+0x40>
c0014f49:	8d 76 00             	lea    esi,[esi+0x0]
c0014f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f51:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014f54:	eb b6                	jmp    c0014f0c <Semaphore::acquire()+0x74>
c0014f56:	66 90                	xchg   ax,ax

c0014f58 <taskReturned>:
c0014f58:	83 ec 18             	sub    esp,0x18
c0014f5b:	68 18 0b 02 c0       	push   0xc0020b18
c0014f60:	e8 b2 b4 ff ff       	call   c0010417 <KePanic(char const*)>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	83 ec 0c             	sub    esp,0xc
c0014f6b:	6a 02                	push   0x2
c0014f6d:	e8 e2 fd ff ff       	call   c0014d54 <blockTask(TaskState)>
c0014f72:	fa                   	cli    
c0014f73:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f78:	40                   	inc    eax
c0014f79:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f7e:	e8 dd fb ff ff       	call   c0014b60 <schedule()>
c0014f83:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	48                   	dec    eax
c0014f8c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f91:	85 c0                	test   eax,eax
c0014f93:	75 d3                	jne    c0014f68 <taskReturned+0x10>
c0014f95:	fb                   	sti    
c0014f96:	eb d0                	jmp    c0014f68 <taskReturned+0x10>

c0014f98 <Thr::processFromPID(int)>:
c0014f98:	57                   	push   edi
c0014f99:	56                   	push   esi
c0014f9a:	53                   	push   ebx
c0014f9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f9f:	fa                   	cli    
c0014fa0:	8b 0d 68 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027168
c0014fa6:	83 ec 0c             	sub    esp,0xc
c0014fa9:	41                   	inc    ecx
c0014faa:	68 84 71 02 c0       	push   0xc0027184
c0014faf:	89 0d 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,ecx
c0014fb5:	e8 12 95 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	89 c7                	mov    edi,eax
c0014fbf:	eb 17                	jmp    c0014fd8 <Thr::processFromPID(int)+0x40>
c0014fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc4:	83 ec 0c             	sub    esp,0xc
c0014fc7:	68 84 71 02 c0       	push   0xc0027184
c0014fcc:	e8 fb 94 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fd1:	83 c4 10             	add    esp,0x10
c0014fd4:	39 f8                	cmp    eax,edi
c0014fd6:	74 4c                	je     c0015024 <Thr::processFromPID(int)+0x8c>
c0014fd8:	83 ec 0c             	sub    esp,0xc
c0014fdb:	68 84 71 02 c0       	push   0xc0027184
c0014fe0:	e8 e7 94 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fe5:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014fec:	89 c3                	mov    ebx,eax
c0014fee:	e8 e1 94 00 00       	call   c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ff3:	58                   	pop    eax
c0014ff4:	5a                   	pop    edx
c0014ff5:	53                   	push   ebx
c0014ff6:	68 84 71 02 c0       	push   0xc0027184
c0014ffb:	e8 8c 95 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015000:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	39 30                	cmp    DWORD PTR [eax],esi
c0015008:	75 ba                	jne    c0014fc4 <Thr::processFromPID(int)+0x2c>
c001500a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001500f:	48                   	dec    eax
c0015010:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015015:	74 09                	je     c0015020 <Thr::processFromPID(int)+0x88>
c0015017:	90                   	nop
c0015018:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001501b:	90                   	nop
c001501c:	5b                   	pop    ebx
c001501d:	5e                   	pop    esi
c001501e:	5f                   	pop    edi
c001501f:	c3                   	ret    
c0015020:	fb                   	sti    
c0015021:	eb f5                	jmp    c0015018 <Thr::processFromPID(int)+0x80>
c0015023:	90                   	nop
c0015024:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015029:	8d 50 ff             	lea    edx,[eax-0x1]
c001502c:	31 c0                	xor    eax,eax
c001502e:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015034:	85 d2                	test   edx,edx
c0015036:	75 e4                	jne    c001501c <Thr::processFromPID(int)+0x84>
c0015038:	fb                   	sti    
c0015039:	5b                   	pop    ebx
c001503a:	5e                   	pop    esi
c001503b:	5f                   	pop    edi
c001503c:	c3                   	ret    
c001503d:	8d 76 00             	lea    esi,[esi+0x0]

c0015040 <unblockTask(ThreadControlBlock*)>:
c0015040:	53                   	push   ebx
c0015041:	83 ec 08             	sub    esp,0x8
c0015044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015048:	fa                   	cli    
c0015049:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001504e:	40                   	inc    eax
c001504f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015054:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015057:	85 c0                	test   eax,eax
c0015059:	74 61                	je     c00150bc <unblockTask(ThreadControlBlock*)+0x7c>
c001505b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001505e:	48                   	dec    eax
c001505f:	74 33                	je     c0015094 <unblockTask(ThreadControlBlock*)+0x54>
c0015061:	83 ec 0c             	sub    esp,0xc
c0015064:	68 84 71 02 c0       	push   0xc0027184
c0015069:	e8 5e 94 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	85 c0                	test   eax,eax
c0015073:	75 17                	jne    c001508c <unblockTask(ThreadControlBlock*)+0x4c>
c0015075:	eb 59                	jmp    c00150d0 <unblockTask(ThreadControlBlock*)+0x90>
c0015077:	90                   	nop
c0015078:	51                   	push   ecx
c0015079:	51                   	push   ecx
c001507a:	50                   	push   eax
c001507b:	68 84 71 02 c0       	push   0xc0027184
c0015080:	e8 63 97 00 00       	call   c001e7e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015085:	83 c4 10             	add    esp,0x10
c0015088:	85 c0                	test   eax,eax
c001508a:	74 44                	je     c00150d0 <unblockTask(ThreadControlBlock*)+0x90>
c001508c:	39 c3                	cmp    ebx,eax
c001508e:	75 e8                	jne    c0015078 <unblockTask(ThreadControlBlock*)+0x38>
c0015090:	eb 12                	jmp    c00150a4 <unblockTask(ThreadControlBlock*)+0x64>
c0015092:	66 90                	xchg   ax,ax
c0015094:	83 ec 0c             	sub    esp,0xc
c0015097:	68 9b 0a 02 c0       	push   0xc0020a9b
c001509c:	e8 c2 55 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00150a9:	48                   	dec    eax
c00150aa:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00150af:	75 03                	jne    c00150b4 <unblockTask(ThreadControlBlock*)+0x74>
c00150b1:	fb                   	sti    
c00150b2:	66 90                	xchg   ax,ax
c00150b4:	83 c4 08             	add    esp,0x8
c00150b7:	5b                   	pop    ebx
c00150b8:	c3                   	ret    
c00150b9:	8d 76 00             	lea    esi,[esi+0x0]
c00150bc:	83 ec 0c             	sub    esp,0xc
c00150bf:	68 84 0a 02 c0       	push   0xc0020a84
c00150c4:	e8 9a 55 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	eb d6                	jmp    c00150a4 <unblockTask(ThreadControlBlock*)+0x64>
c00150ce:	66 90                	xchg   ax,ax
c00150d0:	50                   	push   eax
c00150d1:	50                   	push   eax
c00150d2:	53                   	push   ebx
c00150d3:	68 84 71 02 c0       	push   0xc0027184
c00150d8:	e8 af 94 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150dd:	83 c4 10             	add    esp,0x10
c00150e0:	eb c2                	jmp    c00150a4 <unblockTask(ThreadControlBlock*)+0x64>
c00150e2:	66 90                	xchg   ax,ax

c00150e4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00150e4:	55                   	push   ebp
c00150e5:	57                   	push   edi
c00150e6:	56                   	push   esi
c00150e7:	53                   	push   ebx
c00150e8:	83 ec 1c             	sub    esp,0x1c
c00150eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00150ef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00150f2:	8b 90 16 05 00 00    	mov    edx,DWORD PTR [eax+0x516]
c00150f8:	85 d2                	test   edx,edx
c00150fa:	7e 24                	jle    c0015120 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00150fc:	31 f6                	xor    esi,esi
c00150fe:	66 90                	xchg   ax,ax
c0015100:	83 ec 0c             	sub    esp,0xc
c0015103:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c001510a:	46                   	inc    esi
c001510b:	50                   	push   eax
c001510c:	e8 72 27 ff ff       	call   c0007883 <free>
c0015111:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015114:	83 c4 10             	add    esp,0x10
c0015117:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001511d:	7f e1                	jg     c0015100 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001511f:	90                   	nop
c0015120:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001512a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001512f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015132:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015135:	d3 c0                	rol    eax,cl
c0015137:	66 8b aa 04 05 00 00 	mov    bp,WORD PTR [edx+0x504]
c001513e:	21 c5                	and    ebp,eax
c0015140:	66 89 aa 04 05 00 00 	mov    WORD PTR [edx+0x504],bp
c0015147:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001514a:	89 f7                	mov    edi,esi
c001514c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015154:	0f 85 72 01 00 00    	jne    c00152cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001515a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015160:	85 ed                	test   ebp,ebp
c0015162:	74 1c                	je     c0015180 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0015164:	83 ec 0c             	sub    esp,0xc
c0015167:	55                   	push   ebp
c0015168:	e8 bb af ff ff       	call   c0010128 <EnvVarContainer::~EnvVarContainer()>
c001516d:	5e                   	pop    esi
c001516e:	5f                   	pop    edi
c001516f:	6a 0c                	push   0xc
c0015171:	55                   	push   ebp
c0015172:	e8 f6 53 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c0015177:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001517a:	83 c4 10             	add    esp,0x10
c001517d:	89 f7                	mov    edi,esi
c001517f:	90                   	nop
c0015180:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015186:	85 c0                	test   eax,eax
c0015188:	0f 84 b2 00 00 00    	je     c0015240 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c001518e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015191:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015195:	31 c9                	xor    ecx,ecx
c0015197:	eb 17                	jmp    c00151b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xcc>
c0015199:	8d 76 00             	lea    esi,[esi+0x0]
c001519c:	41                   	inc    ecx
c001519d:	83 f9 10             	cmp    ecx,0x10
c00151a0:	0f 84 9a 00 00 00    	je     c0015240 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00151a6:	66 90                	xchg   ax,ax
c00151a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00151ae:	66 90                	xchg   ax,ax
c00151b0:	31 d2                	xor    edx,edx
c00151b2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00151b9:	d3 fa                	sar    edx,cl
c00151bb:	83 e2 01             	and    edx,0x1
c00151be:	74 dc                	je     c001519c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00151c0:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00151c3:	c1 e2 05             	shl    edx,0x5
c00151c6:	29 ca                	sub    edx,ecx
c00151c8:	01 d0                	add    eax,edx
c00151ca:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00151d0:	83 fd 07             	cmp    ebp,0x7
c00151d3:	75 c7                	jne    c001519c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00151d5:	05 40 02 00 00       	add    eax,0x240
c00151da:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00151dd:	83 fd ff             	cmp    ebp,0xffffffff
c00151e0:	0f 8c ee 00 00 00    	jl     c00152d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00151e6:	0f 84 a8 01 00 00    	je     c0015394 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00151ec:	85 ed                	test   ebp,ebp
c00151ee:	0f 84 8c 01 00 00    	je     c0015380 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00151f4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00151f6:	75 a4                	jne    c001519c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00151f8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00151fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015202:	01 d0                	add    eax,edx
c0015204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015208:	83 ec 0c             	sub    esp,0xc
c001520b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015211:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015214:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001521a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015221:	50                   	push   eax
c0015222:	e8 19 fe ff ff       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001522e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015231:	41                   	inc    ecx
c0015232:	89 f7                	mov    edi,esi
c0015234:	83 f9 10             	cmp    ecx,0x10
c0015237:	0f 85 6b ff ff ff    	jne    c00151a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001523d:	8d 76 00             	lea    esi,[esi+0x0]
c0015240:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015246:	85 c0                	test   eax,eax
c0015248:	74 62                	je     c00152ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c001524a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015250:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015256:	74 54                	je     c00152ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0015258:	83 ec 0c             	sub    esp,0xc
c001525b:	68 84 71 02 c0       	push   0xc0027184
c0015260:	e8 67 92 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015265:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c001526c:	89 c7                	mov    edi,eax
c001526e:	e8 3d 92 00 00       	call   c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015273:	83 c4 10             	add    esp,0x10
c0015276:	84 c0                	test   al,al
c0015278:	0f 84 ca 00 00 00    	je     c0015348 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001527e:	66 90                	xchg   ax,ax
c0015280:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015283:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015289:	85 d2                	test   edx,edx
c001528b:	74 0f                	je     c001529c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001528d:	83 ec 0c             	sub    esp,0xc
c0015290:	8b 02                	mov    eax,DWORD PTR [edx]
c0015292:	52                   	push   edx
c0015293:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015296:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00152a6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00152a9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ac:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00152b2:	85 db                	test   ebx,ebx
c00152b4:	74 16                	je     c00152cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	53                   	push   ebx
c00152ba:	e8 1f 46 ff ff       	call   c00098de <VAS::~VAS()>
c00152bf:	58                   	pop    eax
c00152c0:	5a                   	pop    edx
c00152c1:	6a 14                	push   0x14
c00152c3:	53                   	push   ebx
c00152c4:	e8 a4 52 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	83 c4 1c             	add    esp,0x1c
c00152cf:	5b                   	pop    ebx
c00152d0:	5e                   	pop    esi
c00152d1:	5f                   	pop    edi
c00152d2:	5d                   	pop    ebp
c00152d3:	c3                   	ret    
c00152d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	68 4c 0b 02 c0       	push   0xc0020b4c
c00152e0:	e8 32 b1 ff ff       	call   c0010417 <KePanic(char const*)>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00152eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152ef:	89 f7                	mov    edi,esi
c00152f1:	e9 a6 fe ff ff       	jmp    c001519c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00152f6:	66 90                	xchg   ax,ax
c00152f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152fe:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015304:	75 1e                	jne    c0015324 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0015306:	83 ec 0c             	sub    esp,0xc
c0015309:	68 b4 0b 02 c0       	push   0xc0020bb4
c001530e:	e8 50 53 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0015313:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001531a:	e8 35 fa ff ff       	call   c0014d54 <blockTask(TaskState)>
c001531f:	83 c4 10             	add    esp,0x10
c0015322:	66 90                	xchg   ax,ax
c0015324:	51                   	push   ecx
c0015325:	51                   	push   ecx
c0015326:	56                   	push   esi
c0015327:	68 84 71 02 c0       	push   0xc0027184
c001532c:	e8 5b 92 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015331:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015338:	e8 8f 91 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001533d:	83 c4 10             	add    esp,0x10
c0015340:	39 f8                	cmp    eax,edi
c0015342:	0f 84 38 ff ff ff    	je     c0015280 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0015348:	83 ec 0c             	sub    esp,0xc
c001534b:	68 84 71 02 c0       	push   0xc0027184
c0015350:	e8 77 91 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015355:	89 c6                	mov    esi,eax
c0015357:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c001535e:	e8 71 91 00 00       	call   c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	39 f3                	cmp    ebx,esi
c0015368:	74 ba                	je     c0015324 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c001536a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001536d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015370:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015376:	75 ac                	jne    c0015324 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0015378:	e9 7b ff ff ff       	jmp    c00152f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c001537d:	8d 76 00             	lea    esi,[esi+0x0]
c0015380:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	68 80 0b 02 c0       	push   0xc0020b80
c001538c:	e9 4f ff ff ff       	jmp    c00152e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0015391:	8d 76 00             	lea    esi,[esi+0x0]
c0015394:	8b 36                	mov    esi,DWORD PTR [esi]
c0015396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001539a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001539d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00153a0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00153a6:	01 d7                	add    edi,edx
c00153a8:	89 f8                	mov    eax,edi
c00153aa:	e9 55 fe ff ff       	jmp    c0015204 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c00153af:	90                   	nop

c00153b0 <cleanerTaskFunction(void*)>:
c00153b0:	53                   	push   ebx
c00153b1:	83 ec 08             	sub    esp,0x8
c00153b4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153b9:	48                   	dec    eax
c00153ba:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153bf:	75 03                	jne    c00153c4 <cleanerTaskFunction(void*)+0x14>
c00153c1:	fb                   	sti    
c00153c2:	66 90                	xchg   ax,ax
c00153c4:	fa                   	cli    
c00153c5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153ca:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c00153d1:	8d 50 01             	lea    edx,[eax+0x1]
c00153d4:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00153da:	0f 84 c0 00 00 00    	je     c00154a0 <cleanerTaskFunction(void*)+0xf0>
c00153e0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153e5:	85 c0                	test   eax,eax
c00153e7:	75 03                	jne    c00153ec <cleanerTaskFunction(void*)+0x3c>
c00153e9:	fb                   	sti    
c00153ea:	66 90                	xchg   ax,ax
c00153ec:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c00153f3:	fa                   	cli    
c00153f4:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c00153fa:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c0015400:	42                   	inc    edx
c0015401:	41                   	inc    ecx
c0015402:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015408:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c001540e:	fa                   	cli    
c001540f:	8b 1d 68 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027168
c0015415:	43                   	inc    ebx
c0015416:	89 1d 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,ebx
c001541c:	eb 2a                	jmp    c0015448 <cleanerTaskFunction(void*)+0x98>
c001541e:	66 90                	xchg   ax,ax
c0015420:	83 ec 0c             	sub    esp,0xc
c0015423:	68 6c 71 02 c0       	push   0xc002716c
c0015428:	e8 9f 90 00 00       	call   c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001542d:	89 c3                	mov    ebx,eax
c001542f:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0015436:	e8 99 90 00 00       	call   c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001543b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001543e:	e8 a1 fc ff ff       	call   c00150e4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	66 90                	xchg   ax,ax
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	68 6c 71 02 c0       	push   0xc002716c
c0015450:	e8 5b 90 00 00       	call   c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	84 c0                	test   al,al
c001545a:	74 c4                	je     c0015420 <cleanerTaskFunction(void*)+0x70>
c001545c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015461:	48                   	dec    eax
c0015462:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015467:	75 03                	jne    c001546c <cleanerTaskFunction(void*)+0xbc>
c0015469:	fb                   	sti    
c001546a:	66 90                	xchg   ax,ax
c001546c:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015471:	48                   	dec    eax
c0015472:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015477:	0f 85 37 ff ff ff    	jne    c00153b4 <cleanerTaskFunction(void*)+0x4>
c001547d:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0015482:	85 c0                	test   eax,eax
c0015484:	0f 84 2a ff ff ff    	je     c00153b4 <cleanerTaskFunction(void*)+0x4>
c001548a:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015494:	e8 c7 f6 ff ff       	call   c0014b60 <schedule()>
c0015499:	e9 16 ff ff ff       	jmp    c00153b4 <cleanerTaskFunction(void*)+0x4>
c001549e:	66 90                	xchg   ax,ax
c00154a0:	83 ec 0c             	sub    esp,0xc
c00154a3:	6a 02                	push   0x2
c00154a5:	e8 82 f8 ff ff       	call   c0014d2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	e9 3a ff ff ff       	jmp    c00153ec <cleanerTaskFunction(void*)+0x3c>
c00154b2:	66 90                	xchg   ax,ax

c00154b4 <terminateTask(int)>:
c00154b4:	83 ec 14             	sub    esp,0x14
c00154b7:	fa                   	cli    
c00154b8:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c00154be:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c00154c4:	42                   	inc    edx
c00154c5:	41                   	inc    ecx
c00154c6:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00154cc:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00154d2:	fa                   	cli    
c00154d3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154dc:	40                   	inc    eax
c00154dd:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e7:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00154ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ef:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00154f2:	50                   	push   eax
c00154f3:	68 6c 71 02 c0       	push   0xc002716c
c00154f8:	e8 8f 90 00 00       	call   c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001550c:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c0015511:	85 c0                	test   eax,eax
c0015513:	74 5f                	je     c0015574 <terminateTask(int)+0xc0>
c0015515:	83 ec 0c             	sub    esp,0xc
c0015518:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c001551f:	50                   	push   eax
c0015520:	e8 1b fb ff ff       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001552d:	48                   	dec    eax
c001552e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015533:	75 03                	jne    c0015538 <terminateTask(int)+0x84>
c0015535:	fb                   	sti    
c0015536:	66 90                	xchg   ax,ax
c0015538:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001553d:	48                   	dec    eax
c001553e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015543:	75 0b                	jne    c0015550 <terminateTask(int)+0x9c>
c0015545:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c001554c:	75 3a                	jne    c0015588 <terminateTask(int)+0xd4>
c001554e:	66 90                	xchg   ax,ax
c0015550:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015555:	48                   	dec    eax
c0015556:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001555b:	75 03                	jne    c0015560 <terminateTask(int)+0xac>
c001555d:	fb                   	sti    
c001555e:	66 90                	xchg   ax,ax
c0015560:	fa                   	cli    
c0015561:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015566:	40                   	inc    eax
c0015567:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001556c:	e8 ef f5 ff ff       	call   c0014b60 <schedule()>
c0015571:	eb dd                	jmp    c0015550 <terminateTask(int)+0x9c>
c0015573:	90                   	nop
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	68 b2 0a 02 c0       	push   0xc0020ab2
c001557c:	e8 e2 50 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	eb a2                	jmp    c0015528 <terminateTask(int)+0x74>
c0015586:	66 90                	xchg   ax,ax
c0015588:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015592:	eb d8                	jmp    c001556c <terminateTask(int)+0xb8>

c0015594 <Thr::terminateFromIRQ(int)>:
c0015594:	83 ec 18             	sub    esp,0x18
c0015597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001559b:	50                   	push   eax
c001559c:	e8 13 ff ff ff       	call   c00154b4 <terminateTask(int)>
c00155a1:	90                   	nop
c00155a2:	66 90                	xchg   ax,ax

c00155a4 <Semaphore::release()>:
c00155a4:	83 ec 0c             	sub    esp,0xc
c00155a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155ab:	fa                   	cli    
c00155ac:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00155b1:	40                   	inc    eax
c00155b2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00155b7:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00155bc:	8d 48 01             	lea    ecx,[eax+0x1]
c00155bf:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00155c5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00155c8:	85 c9                	test   ecx,ecx
c00155ca:	74 40                	je     c001560c <Semaphore::release()+0x68>
c00155cc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00155cf:	83 ec 0c             	sub    esp,0xc
c00155d2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00155d5:	51                   	push   ecx
c00155d6:	e8 65 fa ff ff       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c00155db:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00155e0:	83 c4 10             	add    esp,0x10
c00155e3:	48                   	dec    eax
c00155e4:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00155e9:	85 c0                	test   eax,eax
c00155eb:	75 0b                	jne    c00155f8 <Semaphore::release()+0x54>
c00155ed:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00155f2:	85 c0                	test   eax,eax
c00155f4:	75 22                	jne    c0015618 <Semaphore::release()+0x74>
c00155f6:	66 90                	xchg   ax,ax
c00155f8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00155fd:	48                   	dec    eax
c00155fe:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015603:	75 03                	jne    c0015608 <Semaphore::release()+0x64>
c0015605:	fb                   	sti    
c0015606:	66 90                	xchg   ax,ax
c0015608:	83 c4 0c             	add    esp,0xc
c001560b:	c3                   	ret    
c001560c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001560f:	49                   	dec    ecx
c0015610:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015613:	eb cf                	jmp    c00155e4 <Semaphore::release()+0x40>
c0015615:	8d 76 00             	lea    esi,[esi+0x0]
c0015618:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015622:	e8 39 f5 ff ff       	call   c0014b60 <schedule()>
c0015627:	eb cf                	jmp    c00155f8 <Semaphore::release()+0x54>
c0015629:	8d 76 00             	lea    esi,[esi+0x0]

c001562c <__static_initialization_and_destruction_0(int, int)>:
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015634:	0f 85 8e 00 00 00    	jne    c00156c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001563a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015642:	0f 85 80 00 00 00    	jne    c00156c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015648:	83 ec 0c             	sub    esp,0xc
c001564b:	68 84 71 02 c0       	push   0xc0027184
c0015650:	e8 eb 91 00 00       	call   c001e840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	83 ec 04             	sub    esp,0x4
c001565b:	68 48 17 02 c0       	push   0xc0021748
c0015660:	68 84 71 02 c0       	push   0xc0027184
c0015665:	68 f0 e7 01 c0       	push   0xc001e7f0
c001566a:	e8 ae 4e ff ff       	call   c000a51d <__cxa_atexit>
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	83 ec 0c             	sub    esp,0xc
c0015675:	68 78 71 02 c0       	push   0xc0027178
c001567a:	e8 c1 91 00 00       	call   c001e840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	83 ec 04             	sub    esp,0x4
c0015685:	68 48 17 02 c0       	push   0xc0021748
c001568a:	68 78 71 02 c0       	push   0xc0027178
c001568f:	68 f0 e7 01 c0       	push   0xc001e7f0
c0015694:	e8 84 4e ff ff       	call   c000a51d <__cxa_atexit>
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	83 ec 0c             	sub    esp,0xc
c001569f:	68 6c 71 02 c0       	push   0xc002716c
c00156a4:	e8 97 91 00 00       	call   c001e840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00156a9:	83 c4 10             	add    esp,0x10
c00156ac:	83 ec 04             	sub    esp,0x4
c00156af:	68 48 17 02 c0       	push   0xc0021748
c00156b4:	68 6c 71 02 c0       	push   0xc002716c
c00156b9:	68 f0 e7 01 c0       	push   0xc001e7f0
c00156be:	e8 5a 4e ff ff       	call   c000a51d <__cxa_atexit>
c00156c3:	83 c4 10             	add    esp,0x10
c00156c6:	66 90                	xchg   ax,ax
c00156c8:	90                   	nop
c00156c9:	83 c4 0c             	add    esp,0xc
c00156cc:	c3                   	ret    
c00156cd:	8d 76 00             	lea    esi,[esi+0x0]

c00156d0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00156d0:	83 ec 0c             	sub    esp,0xc
c00156d3:	83 ec 08             	sub    esp,0x8
c00156d6:	68 ff ff 00 00       	push   0xffff
c00156db:	6a 01                	push   0x1
c00156dd:	e8 4a ff ff ff       	call   c001562c <__static_initialization_and_destruction_0(int, int)>
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	83 c4 0c             	add    esp,0xc
c00156e8:	c3                   	ret    

c00156e9 <Vm::inbv(unsigned short)>:
c00156e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156ed:	66 81 fa fe fe       	cmp    dx,0xfefe
c00156f2:	75 06                	jne    c00156fa <Vm::inbv(unsigned short)+0x11>
c00156f4:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c00156f9:	c3                   	ret    
c00156fa:	ec                   	in     al,dx
c00156fb:	c3                   	ret    

c00156fc <Vm::outbv(unsigned short, unsigned char)>:
c00156fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015700:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015704:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015709:	75 25                	jne    c0015730 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001570b:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015711:	8d 51 01             	lea    edx,[ecx+0x1]
c0015714:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c001571a:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c0015720:	83 fa 20             	cmp    edx,0x20
c0015723:	75 0c                	jne    c0015731 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015725:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001572f:	c3                   	ret    
c0015730:	ee                   	out    dx,al
c0015731:	c3                   	ret    

c0015732 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015732:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015737:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001573c:	c1 e0 04             	shl    eax,0x4
c001573f:	01 d0                	add    eax,edx
c0015741:	c3                   	ret    

c0015742 <Vm::getSegment(unsigned int)>:
c0015742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015746:	c1 e8 10             	shr    eax,0x10
c0015749:	c3                   	ret    

c001574a <Vm::getOffset(unsigned int)>:
c001574a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001574e:	c3                   	ret    

c001574f <Vm::mainloop2()>:
c001574f:	83 ec 18             	sub    esp,0x18
c0015752:	fa                   	cli    
c0015753:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015759:	6a 02                	push   0x2
c001575b:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c0015762:	e8 c5 f5 ff ff       	call   c0014d2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001576c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015770:	52                   	push   edx
c0015771:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015775:	52                   	push   edx
c0015776:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001577a:	52                   	push   edx
c001577b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001577f:	50                   	push   eax
c0015780:	e8 8a aa fe ff       	call   c000020f <goToVM86>
c0015785:	83 c4 2c             	add    esp,0x2c
c0015788:	c3                   	ret    

c0015789 <Vm::mainVm8086Loop(void*)>:
c0015789:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001578e:	48                   	dec    eax
c001578f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015794:	75 01                	jne    c0015797 <Vm::mainVm8086Loop(void*)+0xe>
c0015796:	fb                   	sti    
c0015797:	eb b6                	jmp    c001574f <Vm::mainloop2()>

c0015799 <Vm::mainloop3(unsigned long)>:
c0015799:	83 ec 18             	sub    esp,0x18
c001579c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157a0:	fa                   	cli    
c00157a1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00157a7:	6a 02                	push   0x2
c00157a9:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c00157b0:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c00157b5:	e8 72 f5 ff ff       	call   c0014d2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00157ba:	83 c4 1c             	add    esp,0x1c
c00157bd:	eb 90                	jmp    c001574f <Vm::mainloop2()>

c00157bf <Vm::initialise8086()>:
c00157bf:	83 ec 0c             	sub    esp,0xc
c00157c2:	68 80 00 00 00       	push   0x80
c00157c7:	6a 00                	push   0x0
c00157c9:	68 89 57 01 c0       	push   0xc0015789
c00157ce:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00157d4:	e8 3b f1 ff ff       	call   c0014914 <Process::createThread(void (*)(void*), void*, int)>
c00157d9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00157e0:	68 00 01 00 00       	push   0x100
c00157e5:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c00157ea:	6a 00                	push   0x0
c00157ec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00157f1:	6a 00                	push   0x0
c00157f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00157f9:	e8 42 45 ff ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00157fe:	83 c4 2c             	add    esp,0x2c
c0015801:	c3                   	ret    

c0015802 <Vm::finish8086()>:
c0015802:	53                   	push   ebx
c0015803:	83 ec 08             	sub    esp,0x8
c0015806:	fa                   	cli    
c0015807:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001580d:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015814:	75 15                	jne    c001582b <Vm::finish8086()+0x29>
c0015816:	e8 45 f3 ff ff       	call   c0014b60 <schedule()>
c001581b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015820:	48                   	dec    eax
c0015821:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015826:	75 de                	jne    c0015806 <Vm::finish8086()+0x4>
c0015828:	fb                   	sti    
c0015829:	eb db                	jmp    c0015806 <Vm::finish8086()+0x4>
c001582b:	83 ec 0c             	sub    esp,0xc
c001582e:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015834:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001583a:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c0015841:	e8 fa f7 ff ff       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c0015846:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001584b:	83 c4 10             	add    esp,0x10
c001584e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015851:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015857:	85 d2                	test   edx,edx
c0015859:	75 01                	jne    c001585c <Vm::finish8086()+0x5a>
c001585b:	fb                   	sti    
c001585c:	83 c4 08             	add    esp,0x8
c001585f:	89 d8                	mov    eax,ebx
c0015861:	5b                   	pop    ebx
c0015862:	c3                   	ret    

c0015863 <Vm::getOutput8086(unsigned char*)>:
c0015863:	57                   	push   edi
c0015864:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001586a:	56                   	push   esi
c001586b:	be e0 71 02 c0       	mov    esi,0xc00271e0
c0015870:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015874:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015876:	5e                   	pop    esi
c0015877:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c001587c:	5f                   	pop    edi
c001587d:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015887:	c3                   	ret    

c0015888 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015888:	55                   	push   ebp
c0015889:	57                   	push   edi
c001588a:	56                   	push   esi
c001588b:	53                   	push   ebx
c001588c:	83 ec 0c             	sub    esp,0xc
c001588f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015893:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015897:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001589b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001589f:	fa                   	cli    
c00158a0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00158a6:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c00158ad:	75 15                	jne    c00158c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00158af:	e8 ac f2 ff ff       	call   c0014b60 <schedule()>
c00158b4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00158b9:	48                   	dec    eax
c00158ba:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00158bf:	75 de                	jne    c001589f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00158c1:	fb                   	sti    
c00158c2:	eb db                	jmp    c001589f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00158c4:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00158c9:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00158d3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00158d7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00158db:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00158df:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00158e3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00158e7:	50                   	push   eax
c00158e8:	6a 20                	push   0x20
c00158ea:	6a 00                	push   0x0
c00158ec:	68 e0 71 02 c0       	push   0xc00271e0
c00158f1:	e8 ca ab fe ff       	call   c00004c0 <memset>
c00158f6:	5a                   	pop    edx
c00158f7:	59                   	pop    ecx
c00158f8:	0f b7 ff             	movzx  edi,di
c00158fb:	57                   	push   edi
c00158fc:	0f b7 f6             	movzx  esi,si
c00158ff:	56                   	push   esi
c0015900:	e8 2d fe ff ff       	call   c0015732 <Vm::realToLinear(unsigned short, unsigned short)>
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	89 c7                	mov    edi,eax
c001590a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001590e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015912:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015914:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015919:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015920:	48                   	dec    eax
c0015921:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015926:	75 01                	jne    c0015929 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015928:	fb                   	sti    
c0015929:	83 ec 0c             	sub    esp,0xc
c001592c:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015932:	e8 09 f7 ff ff       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c0015937:	83 c4 1c             	add    esp,0x1c
c001593a:	5b                   	pop    ebx
c001593b:	b0 01                	mov    al,0x1
c001593d:	5e                   	pop    esi
c001593e:	5f                   	pop    edi
c001593f:	5d                   	pop    ebp
c0015940:	c3                   	ret    

c0015941 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015941:	55                   	push   ebp
c0015942:	57                   	push   edi
c0015943:	56                   	push   esi
c0015944:	53                   	push   ebx
c0015945:	83 ec 2c             	sub    esp,0x2c
c0015948:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001594c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015954:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015958:	fa                   	cli    
c0015959:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015960:	89 f0                	mov    eax,esi
c0015962:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015968:	84 c0                	test   al,al
c001596a:	75 1d                	jne    c0015989 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001596c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015970:	e8 eb f1 ff ff       	call   c0014b60 <schedule()>
c0015975:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001597a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001597e:	48                   	dec    eax
c001597f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015984:	75 d2                	jne    c0015958 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015986:	fb                   	sti    
c0015987:	eb cf                	jmp    c0015958 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015989:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c001598e:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015998:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001599c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00159a0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00159a4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00159a8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00159ac:	50                   	push   eax
c00159ad:	6a 20                	push   0x20
c00159af:	6a 00                	push   0x0
c00159b1:	68 e0 71 02 c0       	push   0xc00271e0
c00159b6:	e8 05 ab fe ff       	call   c00004c0 <memset>
c00159bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00159c2:	e8 ac 1e ff ff       	call   c0007873 <malloc>
c00159c7:	83 c4 0c             	add    esp,0xc
c00159ca:	89 c3                	mov    ebx,eax
c00159cc:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00159d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159d6:	50                   	push   eax
c00159d7:	e8 fc 51 ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c00159dc:	83 c4 10             	add    esp,0x10
c00159df:	85 db                	test   ebx,ebx
c00159e1:	75 0a                	jne    c00159ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00159e3:	83 ec 0c             	sub    esp,0xc
c00159e6:	68 dc 0b 02 c0       	push   0xc0020bdc
c00159eb:	eb 3e                	jmp    c0015a2b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00159ed:	50                   	push   eax
c00159ee:	8d 44 24 17          	lea    eax,[esp+0x17]
c00159f2:	50                   	push   eax
c00159f3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00159f7:	50                   	push   eax
c00159f8:	53                   	push   ebx
c00159f9:	e8 46 55 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015a06:	74 0a                	je     c0015a12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	68 f0 0b 02 c0       	push   0xc0020bf0
c0015a10:	eb 19                	jmp    c0015a2b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015a12:	51                   	push   ecx
c0015a13:	51                   	push   ecx
c0015a14:	6a 01                	push   0x1
c0015a16:	53                   	push   ebx
c0015a17:	e8 7c 52 ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	85 c0                	test   eax,eax
c0015a21:	74 24                	je     c0015a47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0015a23:	83 ec 0c             	sub    esp,0xc
c0015a26:	68 09 0c 02 c0       	push   0xc0020c09
c0015a2b:	e8 e7 a9 ff ff       	call   c0010417 <KePanic(char const*)>
c0015a30:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015a35:	48                   	dec    eax
c0015a36:	83 c4 10             	add    esp,0x10
c0015a39:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015a3e:	85 c0                	test   eax,eax
c0015a40:	75 01                	jne    c0015a43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0015a42:	fb                   	sti    
c0015a43:	31 f6                	xor    esi,esi
c0015a45:	eb 58                	jmp    c0015a9f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015a47:	50                   	push   eax
c0015a48:	50                   	push   eax
c0015a49:	0f b7 ed             	movzx  ebp,bp
c0015a4c:	55                   	push   ebp
c0015a4d:	0f b7 ff             	movzx  edi,di
c0015a50:	57                   	push   edi
c0015a51:	e8 dc fc ff ff       	call   c0015732 <Vm::realToLinear(unsigned short, unsigned short)>
c0015a56:	5a                   	pop    edx
c0015a57:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015a59:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015a5d:	51                   	push   ecx
c0015a5e:	50                   	push   eax
c0015a5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015a63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015a67:	53                   	push   ebx
c0015a68:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a6b:	83 c4 14             	add    esp,0x14
c0015a6e:	53                   	push   ebx
c0015a6f:	e8 82 52 ff ff       	call   c000acf6 <File::close()>
c0015a74:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015a79:	83 c4 10             	add    esp,0x10
c0015a7c:	48                   	dec    eax
c0015a7d:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015a84:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015a89:	85 c0                	test   eax,eax
c0015a8b:	75 01                	jne    c0015a8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0015a8d:	fb                   	sti    
c0015a8e:	83 ec 0c             	sub    esp,0xc
c0015a91:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015a97:	e8 a4 f5 ff ff       	call   c0015040 <unblockTask(ThreadControlBlock*)>
c0015a9c:	83 c4 10             	add    esp,0x10
c0015a9f:	83 c4 2c             	add    esp,0x2c
c0015aa2:	89 f0                	mov    eax,esi
c0015aa4:	5b                   	pop    ebx
c0015aa5:	5e                   	pop    esi
c0015aa6:	5f                   	pop    edi
c0015aa7:	5d                   	pop    ebp
c0015aa8:	c3                   	ret    

c0015aa9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015aa9:	57                   	push   edi
c0015aaa:	56                   	push   esi
c0015aab:	53                   	push   ebx
c0015aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ab4:	83 e8 06             	sub    eax,0x6
c0015ab7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015abb:	0f b7 c0             	movzx  eax,ax
c0015abe:	50                   	push   eax
c0015abf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ac4:	50                   	push   eax
c0015ac5:	e8 68 fc ff ff       	call   c0015732 <Vm::realToLinear(unsigned short, unsigned short)>
c0015aca:	5a                   	pop    edx
c0015acb:	5e                   	pop    esi
c0015acc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015acf:	8d 56 fa             	lea    edx,[esi-0x6]
c0015ad2:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015ad8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015adb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0015ade:	83 c2 02             	add    edx,0x2
c0015ae1:	66 89 10             	mov    WORD PTR [eax],dx
c0015ae4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015ae7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015aeb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015aee:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015af2:	89 d6                	mov    esi,edx
c0015af4:	66 81 e6 ff fd       	and    si,0xfdff
c0015af9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015aff:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015b03:	74 07                	je     c0015b0c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015b05:	89 d6                	mov    esi,edx
c0015b07:	66 81 ce 00 02       	or     si,0x200
c0015b0c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b15:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015b19:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015b21:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015b24:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015b2c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015b2f:	5b                   	pop    ebx
c0015b30:	5e                   	pop    esi
c0015b31:	5f                   	pop    edi
c0015b32:	c3                   	ret    

c0015b33 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015b33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b38:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b3d:	c1 e0 04             	shl    eax,0x4
c0015b40:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015b43:	c3                   	ret    

c0015b44 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015b44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b4e:	c1 e0 04             	shl    eax,0x4
c0015b51:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015b55:	c3                   	ret    

c0015b56 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015b56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b60:	c1 e0 04             	shl    eax,0x4
c0015b63:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015b66:	c3                   	ret    

c0015b67 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015b67:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b6c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b71:	c1 e0 04             	shl    eax,0x4
c0015b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b78:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015b7b:	c3                   	ret    

c0015b7c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015b7c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b81:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b86:	c1 e0 04             	shl    eax,0x4
c0015b89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b8d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015b91:	c3                   	ret    

c0015b92 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015b92:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b97:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b9c:	c1 e0 04             	shl    eax,0x4
c0015b9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ba3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015ba6:	c3                   	ret    

c0015ba7 <Vm::faultHandler(regs*)>:
c0015ba7:	55                   	push   ebp
c0015ba8:	57                   	push   edi
c0015ba9:	56                   	push   esi
c0015baa:	53                   	push   ebx
c0015bab:	83 ec 1c             	sub    esp,0x1c
c0015bae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015bb2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015bb6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bb9:	52                   	push   edx
c0015bba:	0f b7 f8             	movzx  edi,ax
c0015bbd:	0f b7 c0             	movzx  eax,ax
c0015bc0:	50                   	push   eax
c0015bc1:	e8 6c fb ff ff       	call   c0015732 <Vm::realToLinear(unsigned short, unsigned short)>
c0015bc6:	5a                   	pop    edx
c0015bc7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0015bca:	59                   	pop    ecx
c0015bcb:	89 c1                	mov    ecx,eax
c0015bcd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015bd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bd4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015bd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015bdd:	0f b7 c5             	movzx  eax,bp
c0015be0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015be4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015be8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bec:	e8 41 fb ff ff       	call   c0015732 <Vm::realToLinear(unsigned short, unsigned short)>
c0015bf1:	5e                   	pop    esi
c0015bf2:	be 06 00 00 00       	mov    esi,0x6
c0015bf7:	5a                   	pop    edx
c0015bf8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015bfd:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0015c02:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015c05:	80 fa 9d             	cmp    dl,0x9d
c0015c08:	0f 84 2c 02 00 00    	je     c0015e3a <Vm::faultHandler(regs*)+0x293>
c0015c0e:	0f 87 91 00 00 00    	ja     c0015ca5 <Vm::faultHandler(regs*)+0xfe>
c0015c14:	80 fa 66             	cmp    dl,0x66
c0015c17:	0f 84 98 01 00 00    	je     c0015db5 <Vm::faultHandler(regs*)+0x20e>
c0015c1d:	77 47                	ja     c0015c66 <Vm::faultHandler(regs*)+0xbf>
c0015c1f:	80 fa 36             	cmp    dl,0x36
c0015c22:	0f 84 80 01 00 00    	je     c0015da8 <Vm::faultHandler(regs*)+0x201>
c0015c28:	77 1a                	ja     c0015c44 <Vm::faultHandler(regs*)+0x9d>
c0015c2a:	80 fa 26             	cmp    dl,0x26
c0015c2d:	0f 84 4e 01 00 00    	je     c0015d81 <Vm::faultHandler(regs*)+0x1da>
c0015c33:	80 fa 2e             	cmp    dl,0x2e
c0015c36:	0f 85 e2 05 00 00    	jne    c001621e <Vm::faultHandler(regs*)+0x677>
c0015c3c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c3f:	31 f6                	xor    esi,esi
c0015c41:	41                   	inc    ecx
c0015c42:	eb be                	jmp    c0015c02 <Vm::faultHandler(regs*)+0x5b>
c0015c44:	80 fa 64             	cmp    dl,0x64
c0015c47:	0f 84 41 01 00 00    	je     c0015d8e <Vm::faultHandler(regs*)+0x1e7>
c0015c4d:	0f 87 48 01 00 00    	ja     c0015d9b <Vm::faultHandler(regs*)+0x1f4>
c0015c53:	80 fa 3e             	cmp    dl,0x3e
c0015c56:	0f 85 c2 05 00 00    	jne    c001621e <Vm::faultHandler(regs*)+0x677>
c0015c5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c5f:	be 01 00 00 00       	mov    esi,0x1
c0015c64:	eb db                	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015c66:	80 fa 6d             	cmp    dl,0x6d
c0015c69:	0f 84 ec 02 00 00    	je     c0015f5b <Vm::faultHandler(regs*)+0x3b4>
c0015c6f:	77 17                	ja     c0015c88 <Vm::faultHandler(regs*)+0xe1>
c0015c71:	80 fa 67             	cmp    dl,0x67
c0015c74:	0f 84 48 01 00 00    	je     c0015dc2 <Vm::faultHandler(regs*)+0x21b>
c0015c7a:	80 fa 6c             	cmp    dl,0x6c
c0015c7d:	0f 84 69 02 00 00    	je     c0015eec <Vm::faultHandler(regs*)+0x345>
c0015c83:	e9 96 05 00 00       	jmp    c001621e <Vm::faultHandler(regs*)+0x677>
c0015c88:	80 fa 6f             	cmp    dl,0x6f
c0015c8b:	0f 84 f4 03 00 00    	je     c0016085 <Vm::faultHandler(regs*)+0x4de>
c0015c91:	0f 82 59 03 00 00    	jb     c0015ff0 <Vm::faultHandler(regs*)+0x449>
c0015c97:	80 fa 9c             	cmp    dl,0x9c
c0015c9a:	0f 84 2f 01 00 00    	je     c0015dcf <Vm::faultHandler(regs*)+0x228>
c0015ca0:	e9 79 05 00 00       	jmp    c001621e <Vm::faultHandler(regs*)+0x677>
c0015ca5:	80 fa ec             	cmp    dl,0xec
c0015ca8:	0f 84 14 05 00 00    	je     c00161c2 <Vm::faultHandler(regs*)+0x61b>
c0015cae:	77 7b                	ja     c0015d2b <Vm::faultHandler(regs*)+0x184>
c0015cb0:	80 fa e4             	cmp    dl,0xe4
c0015cb3:	0f 84 93 04 00 00    	je     c001614c <Vm::faultHandler(regs*)+0x5a5>
c0015cb9:	77 53                	ja     c0015d0e <Vm::faultHandler(regs*)+0x167>
c0015cbb:	80 fa cd             	cmp    dl,0xcd
c0015cbe:	0f 84 d9 01 00 00    	je     c0015e9d <Vm::faultHandler(regs*)+0x2f6>
c0015cc4:	80 fa cf             	cmp    dl,0xcf
c0015cc7:	0f 85 51 05 00 00    	jne    c001621e <Vm::faultHandler(regs*)+0x677>
c0015ccd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015cd0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0015cd3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015cd7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015cda:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015cde:	81 ca 00 02 02 00    	or     edx,0x20200
c0015ce4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015ce7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015ceb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015cf1:	66 c1 e8 09          	shr    ax,0x9
c0015cf5:	83 e0 01             	and    eax,0x1
c0015cf8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015cfb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015cfe:	83 c0 06             	add    eax,0x6
c0015d01:	25 ff ff 00 00       	and    eax,0xffff
c0015d06:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015d09:	e9 0c 05 00 00       	jmp    c001621a <Vm::faultHandler(regs*)+0x673>
c0015d0e:	80 fa e6             	cmp    dl,0xe6
c0015d11:	0f 84 7f 04 00 00    	je     c0016196 <Vm::faultHandler(regs*)+0x5ef>
c0015d17:	0f 82 4b 04 00 00    	jb     c0016168 <Vm::faultHandler(regs*)+0x5c1>
c0015d1d:	80 fa e7             	cmp    dl,0xe7
c0015d20:	0f 84 87 04 00 00    	je     c00161ad <Vm::faultHandler(regs*)+0x606>
c0015d26:	e9 f3 04 00 00       	jmp    c001621e <Vm::faultHandler(regs*)+0x677>
c0015d2b:	80 fa ef             	cmp    dl,0xef
c0015d2e:	0f 84 d1 04 00 00    	je     c0016205 <Vm::faultHandler(regs*)+0x65e>
c0015d34:	77 28                	ja     c0015d5e <Vm::faultHandler(regs*)+0x1b7>
c0015d36:	80 fa ed             	cmp    dl,0xed
c0015d39:	0f 84 9f 04 00 00    	je     c00161de <Vm::faultHandler(regs*)+0x637>
c0015d3f:	80 fa ee             	cmp    dl,0xee
c0015d42:	0f 85 d6 04 00 00    	jne    c001621e <Vm::faultHandler(regs*)+0x677>
c0015d48:	50                   	push   eax
c0015d49:	50                   	push   eax
c0015d4a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015d4e:	50                   	push   eax
c0015d4f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015d53:	50                   	push   eax
c0015d54:	e8 a3 f9 ff ff       	call   c00156fc <Vm::outbv(unsigned short, unsigned char)>
c0015d59:	e9 9f 04 00 00       	jmp    c00161fd <Vm::faultHandler(regs*)+0x656>
c0015d5e:	80 fa fa             	cmp    dl,0xfa
c0015d61:	0f 84 69 01 00 00    	je     c0015ed0 <Vm::faultHandler(regs*)+0x329>
c0015d67:	80 fa fb             	cmp    dl,0xfb
c0015d6a:	0f 84 6e 01 00 00    	je     c0015ede <Vm::faultHandler(regs*)+0x337>
c0015d70:	80 fa f3             	cmp    dl,0xf3
c0015d73:	0f 85 a5 04 00 00    	jne    c001621e <Vm::faultHandler(regs*)+0x677>
c0015d79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d7c:	e9 c0 fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015d81:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d84:	be 02 00 00 00       	mov    esi,0x2
c0015d89:	e9 b3 fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015d8e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d91:	be 03 00 00 00       	mov    esi,0x3
c0015d96:	e9 a6 fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015d9b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d9e:	be 04 00 00 00       	mov    esi,0x4
c0015da3:	e9 99 fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015da8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015dab:	be 05 00 00 00       	mov    esi,0x5
c0015db0:	e9 8c fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015db5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015db8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015dbd:	e9 7f fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015dc2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015dc5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015dca:	e9 72 fe ff ff       	jmp    c0015c41 <Vm::faultHandler(regs*)+0x9a>
c0015dcf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0015dd2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015dd6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015ddb:	74 30                	je     c0015e0d <Vm::faultHandler(regs*)+0x266>
c0015ddd:	83 e9 04             	sub    ecx,0x4
c0015de0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015de6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015dec:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015def:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015df2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015df8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015dfc:	0f 84 15 04 00 00    	je     c0016217 <Vm::faultHandler(regs*)+0x670>
c0015e02:	80 ce 02             	or     dh,0x2
c0015e05:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015e08:	e9 0a 04 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0015e0d:	83 e9 02             	sub    ecx,0x2
c0015e10:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015e16:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015e19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015e1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e23:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015e27:	74 05                	je     c0015e2e <Vm::faultHandler(regs*)+0x287>
c0015e29:	80 ce 02             	or     dh,0x2
c0015e2c:	eb 03                	jmp    c0015e31 <Vm::faultHandler(regs*)+0x28a>
c0015e2e:	80 e6 fd             	and    dh,0xfd
c0015e31:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015e35:	e9 dd 03 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0015e3a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015e3f:	74 2a                	je     c0015e6b <Vm::faultHandler(regs*)+0x2c4>
c0015e41:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e43:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015e49:	81 ca 00 02 02 00    	or     edx,0x20200
c0015e4f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015e52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e5a:	c1 e8 09             	shr    eax,0x9
c0015e5d:	83 e0 01             	and    eax,0x1
c0015e60:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015e63:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015e66:	83 c0 04             	add    eax,0x4
c0015e69:	eb 25                	jmp    c0015e90 <Vm::faultHandler(regs*)+0x2e9>
c0015e6b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015e6e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015e74:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015e77:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015e7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e80:	66 c1 e8 09          	shr    ax,0x9
c0015e84:	83 e0 01             	and    eax,0x1
c0015e87:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015e8a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015e8d:	83 c0 02             	add    eax,0x2
c0015e90:	25 ff ff 00 00       	and    eax,0xffff
c0015e95:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015e98:	e9 7a 03 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0015e9d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015ea1:	3c ee                	cmp    al,0xee
c0015ea3:	75 10                	jne    c0015eb5 <Vm::faultHandler(regs*)+0x30e>
c0015ea5:	83 ec 0c             	sub    esp,0xc
c0015ea8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015eab:	e8 e9 f8 ff ff       	call   c0015799 <Vm::mainloop3(unsigned long)>
c0015eb0:	e9 4b 03 00 00       	jmp    c0016200 <Vm::faultHandler(regs*)+0x659>
c0015eb5:	83 ec 0c             	sub    esp,0xc
c0015eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ec0:	51                   	push   ecx
c0015ec1:	50                   	push   eax
c0015ec2:	53                   	push   ebx
c0015ec3:	e8 e1 fb ff ff       	call   c0015aa9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015ec8:	83 c4 20             	add    esp,0x20
c0015ecb:	e9 4a 03 00 00       	jmp    c001621a <Vm::faultHandler(regs*)+0x673>
c0015ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015ed9:	e9 39 03 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0015ede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015ee7:	e9 2b 03 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0015eec:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015eef:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ef4:	74 2b                	je     c0015f21 <Vm::faultHandler(regs*)+0x37a>
c0015ef6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015efd:	76 22                	jbe    c0015f21 <Vm::faultHandler(regs*)+0x37a>
c0015eff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015f03:	50                   	push   eax
c0015f04:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015f08:	50                   	push   eax
c0015f09:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015f0d:	50                   	push   eax
c0015f0e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f12:	50                   	push   eax
c0015f13:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f17:	50                   	push   eax
c0015f18:	6a 6c                	push   0x6c
c0015f1a:	6a 6c                	push   0x6c
c0015f1c:	e9 b9 01 00 00       	jmp    c00160da <Vm::faultHandler(regs*)+0x533>
c0015f21:	83 ec 0c             	sub    esp,0xc
c0015f24:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015f28:	50                   	push   eax
c0015f29:	e8 bb f7 ff ff       	call   c00156e9 <Vm::inbv(unsigned short)>
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	0f b6 c0             	movzx  eax,al
c0015f34:	50                   	push   eax
c0015f35:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015f39:	0f b7 f6             	movzx  esi,si
c0015f3c:	50                   	push   eax
c0015f3d:	56                   	push   esi
c0015f3e:	e8 24 fc ff ff       	call   c0015b67 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f49:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015f4d:	74 03                	je     c0015f52 <Vm::faultHandler(regs*)+0x3ab>
c0015f4f:	48                   	dec    eax
c0015f50:	eb 01                	jmp    c0015f53 <Vm::faultHandler(regs*)+0x3ac>
c0015f52:	40                   	inc    eax
c0015f53:	0f b7 c0             	movzx  eax,ax
c0015f56:	e9 8d 00 00 00       	jmp    c0015fe8 <Vm::faultHandler(regs*)+0x441>
c0015f5b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015f5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f61:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f66:	74 29                	je     c0015f91 <Vm::faultHandler(regs*)+0x3ea>
c0015f68:	3d ff ff 00 00       	cmp    eax,0xffff
c0015f6d:	76 22                	jbe    c0015f91 <Vm::faultHandler(regs*)+0x3ea>
c0015f6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015f73:	50                   	push   eax
c0015f74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015f78:	50                   	push   eax
c0015f79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015f7d:	50                   	push   eax
c0015f7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f82:	50                   	push   eax
c0015f83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f87:	50                   	push   eax
c0015f88:	6a 6d                	push   0x6d
c0015f8a:	6a 6d                	push   0x6d
c0015f8c:	e9 49 01 00 00       	jmp    c00160da <Vm::faultHandler(regs*)+0x533>
c0015f91:	0f b7 c8             	movzx  ecx,ax
c0015f94:	0f b7 f6             	movzx  esi,si
c0015f97:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015f9a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015f9f:	74 20                	je     c0015fc1 <Vm::faultHandler(regs*)+0x41a>
c0015fa1:	ed                   	in     eax,dx
c0015fa2:	55                   	push   ebp
c0015fa3:	50                   	push   eax
c0015fa4:	51                   	push   ecx
c0015fa5:	56                   	push   esi
c0015fa6:	e8 e7 fb ff ff       	call   c0015b92 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015fab:	83 c4 10             	add    esp,0x10
c0015fae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015fb1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015fb5:	74 05                	je     c0015fbc <Vm::faultHandler(regs*)+0x415>
c0015fb7:	83 e8 04             	sub    eax,0x4
c0015fba:	eb 27                	jmp    c0015fe3 <Vm::faultHandler(regs*)+0x43c>
c0015fbc:	83 c0 04             	add    eax,0x4
c0015fbf:	eb 22                	jmp    c0015fe3 <Vm::faultHandler(regs*)+0x43c>
c0015fc1:	66 ed                	in     ax,dx
c0015fc3:	0f b7 c0             	movzx  eax,ax
c0015fc6:	57                   	push   edi
c0015fc7:	50                   	push   eax
c0015fc8:	51                   	push   ecx
c0015fc9:	56                   	push   esi
c0015fca:	e8 ad fb ff ff       	call   c0015b7c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015fcf:	83 c4 10             	add    esp,0x10
c0015fd2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015fd5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015fd9:	74 05                	je     c0015fe0 <Vm::faultHandler(regs*)+0x439>
c0015fdb:	83 e8 02             	sub    eax,0x2
c0015fde:	eb 03                	jmp    c0015fe3 <Vm::faultHandler(regs*)+0x43c>
c0015fe0:	83 c0 02             	add    eax,0x2
c0015fe3:	25 ff ff 00 00       	and    eax,0xffff
c0015fe8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015feb:	e9 27 02 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0015ff0:	8d 46 ff             	lea    eax,[esi-0x1]
c0015ff3:	3c 05                	cmp    al,0x5
c0015ff5:	77 24                	ja     c001601b <Vm::faultHandler(regs*)+0x474>
c0015ff7:	0f b6 c0             	movzx  eax,al
c0015ffa:	ff 24 85 7c 0c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf384]
c0016001:	0f b7 fd             	movzx  edi,bp
c0016004:	eb 15                	jmp    c001601b <Vm::faultHandler(regs*)+0x474>
c0016006:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001600a:	eb 0f                	jmp    c001601b <Vm::faultHandler(regs*)+0x474>
c001600c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016010:	eb 09                	jmp    c001601b <Vm::faultHandler(regs*)+0x474>
c0016012:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016016:	eb 03                	jmp    c001601b <Vm::faultHandler(regs*)+0x474>
c0016018:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001601b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001601e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016023:	74 29                	je     c001604e <Vm::faultHandler(regs*)+0x4a7>
c0016025:	3d ff ff 00 00       	cmp    eax,0xffff
c001602a:	76 22                	jbe    c001604e <Vm::faultHandler(regs*)+0x4a7>
c001602c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016030:	50                   	push   eax
c0016031:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016035:	50                   	push   eax
c0016036:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001603a:	50                   	push   eax
c001603b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001603f:	50                   	push   eax
c0016040:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016044:	50                   	push   eax
c0016045:	6a 6e                	push   0x6e
c0016047:	6a 6e                	push   0x6e
c0016049:	e9 8c 00 00 00       	jmp    c00160da <Vm::faultHandler(regs*)+0x533>
c001604e:	52                   	push   edx
c001604f:	52                   	push   edx
c0016050:	0f b7 c0             	movzx  eax,ax
c0016053:	50                   	push   eax
c0016054:	57                   	push   edi
c0016055:	e8 d9 fa ff ff       	call   c0015b33 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001605a:	59                   	pop    ecx
c001605b:	5e                   	pop    esi
c001605c:	0f b6 c0             	movzx  eax,al
c001605f:	50                   	push   eax
c0016060:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016064:	50                   	push   eax
c0016065:	e8 92 f6 ff ff       	call   c00156fc <Vm::outbv(unsigned short, unsigned char)>
c001606a:	83 c4 10             	add    esp,0x10
c001606d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016070:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016074:	74 03                	je     c0016079 <Vm::faultHandler(regs*)+0x4d2>
c0016076:	48                   	dec    eax
c0016077:	eb 01                	jmp    c001607a <Vm::faultHandler(regs*)+0x4d3>
c0016079:	40                   	inc    eax
c001607a:	0f b7 c0             	movzx  eax,ax
c001607d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016080:	e9 92 01 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0016085:	8d 46 ff             	lea    eax,[esi-0x1]
c0016088:	3c 05                	cmp    al,0x5
c001608a:	77 1f                	ja     c00160ab <Vm::faultHandler(regs*)+0x504>
c001608c:	0f b6 c0             	movzx  eax,al
c001608f:	ff 24 85 94 0c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf36c]
c0016096:	89 ef                	mov    edi,ebp
c0016098:	eb 11                	jmp    c00160ab <Vm::faultHandler(regs*)+0x504>
c001609a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001609d:	eb 0c                	jmp    c00160ab <Vm::faultHandler(regs*)+0x504>
c001609f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00160a2:	eb 07                	jmp    c00160ab <Vm::faultHandler(regs*)+0x504>
c00160a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00160a7:	eb 02                	jmp    c00160ab <Vm::faultHandler(regs*)+0x504>
c00160a9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00160ab:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00160ae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160b3:	74 37                	je     c00160ec <Vm::faultHandler(regs*)+0x545>
c00160b5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00160bb:	76 2f                	jbe    c00160ec <Vm::faultHandler(regs*)+0x545>
c00160bd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00160c1:	50                   	push   eax
c00160c2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00160c6:	50                   	push   eax
c00160c7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00160cb:	50                   	push   eax
c00160cc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00160d0:	50                   	push   eax
c00160d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00160d5:	50                   	push   eax
c00160d6:	6a 6f                	push   0x6f
c00160d8:	6a 6f                	push   0x6f
c00160da:	68 22 0c 02 c0       	push   0xc0020c22
c00160df:	e8 7f 45 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00160e4:	83 c4 20             	add    esp,0x20
c00160e7:	e9 86 01 00 00       	jmp    c0016272 <Vm::faultHandler(regs*)+0x6cb>
c00160ec:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00160ef:	0f b7 d7             	movzx  edx,di
c00160f2:	81 e1 00 04 00 00    	and    ecx,0x400
c00160f8:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00160fb:	0f b7 c6             	movzx  eax,si
c00160fe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016103:	74 1d                	je     c0016122 <Vm::faultHandler(regs*)+0x57b>
c0016105:	55                   	push   ebp
c0016106:	55                   	push   ebp
c0016107:	50                   	push   eax
c0016108:	52                   	push   edx
c0016109:	e8 48 fa ff ff       	call   c0015b56 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001610e:	83 c4 10             	add    esp,0x10
c0016111:	89 fa                	mov    edx,edi
c0016113:	ef                   	out    dx,eax
c0016114:	85 c9                	test   ecx,ecx
c0016116:	74 05                	je     c001611d <Vm::faultHandler(regs*)+0x576>
c0016118:	83 ee 04             	sub    esi,0x4
c001611b:	eb 21                	jmp    c001613e <Vm::faultHandler(regs*)+0x597>
c001611d:	83 c6 04             	add    esi,0x4
c0016120:	eb 1c                	jmp    c001613e <Vm::faultHandler(regs*)+0x597>
c0016122:	55                   	push   ebp
c0016123:	55                   	push   ebp
c0016124:	50                   	push   eax
c0016125:	52                   	push   edx
c0016126:	e8 19 fa ff ff       	call   c0015b44 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001612b:	83 c4 10             	add    esp,0x10
c001612e:	89 fa                	mov    edx,edi
c0016130:	66 ef                	out    dx,ax
c0016132:	85 c9                	test   ecx,ecx
c0016134:	74 05                	je     c001613b <Vm::faultHandler(regs*)+0x594>
c0016136:	83 ee 02             	sub    esi,0x2
c0016139:	eb 03                	jmp    c001613e <Vm::faultHandler(regs*)+0x597>
c001613b:	83 c6 02             	add    esi,0x2
c001613e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016144:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016147:	e9 cb 00 00 00       	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c001614c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016153:	83 ec 0c             	sub    esp,0xc
c0016156:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001615a:	50                   	push   eax
c001615b:	e8 89 f5 ff ff       	call   c00156e9 <Vm::inbv(unsigned short)>
c0016160:	0f b6 c0             	movzx  eax,al
c0016163:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016166:	eb 3f                	jmp    c00161a7 <Vm::faultHandler(regs*)+0x600>
c0016168:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001616d:	74 07                	je     c0016176 <Vm::faultHandler(regs*)+0x5cf>
c001616f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016173:	ed                   	in     eax,dx
c0016174:	eb 14                	jmp    c001618a <Vm::faultHandler(regs*)+0x5e3>
c0016176:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016179:	66 31 f6             	xor    si,si
c001617c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001617f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016183:	66 ed                	in     ax,dx
c0016185:	0f b7 c0             	movzx  eax,ax
c0016188:	09 f0                	or     eax,esi
c001618a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001618d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016191:	e9 84 00 00 00       	jmp    c001621a <Vm::faultHandler(regs*)+0x673>
c0016196:	52                   	push   edx
c0016197:	52                   	push   edx
c0016198:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001619c:	50                   	push   eax
c001619d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00161a1:	50                   	push   eax
c00161a2:	e8 55 f5 ff ff       	call   c00156fc <Vm::outbv(unsigned short, unsigned char)>
c00161a7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00161ab:	eb 53                	jmp    c0016200 <Vm::faultHandler(regs*)+0x659>
c00161ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00161b0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00161b4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00161b9:	74 03                	je     c00161be <Vm::faultHandler(regs*)+0x617>
c00161bb:	ef                   	out    dx,eax
c00161bc:	eb cf                	jmp    c001618d <Vm::faultHandler(regs*)+0x5e6>
c00161be:	66 ef                	out    dx,ax
c00161c0:	eb cb                	jmp    c001618d <Vm::faultHandler(regs*)+0x5e6>
c00161c2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00161c9:	83 ec 0c             	sub    esp,0xc
c00161cc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00161d0:	50                   	push   eax
c00161d1:	e8 13 f5 ff ff       	call   c00156e9 <Vm::inbv(unsigned short)>
c00161d6:	0f b6 c0             	movzx  eax,al
c00161d9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00161dc:	eb 1f                	jmp    c00161fd <Vm::faultHandler(regs*)+0x656>
c00161de:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00161e1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00161e6:	74 03                	je     c00161eb <Vm::faultHandler(regs*)+0x644>
c00161e8:	ed                   	in     eax,dx
c00161e9:	eb 0d                	jmp    c00161f8 <Vm::faultHandler(regs*)+0x651>
c00161eb:	66 ed                	in     ax,dx
c00161ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00161f0:	66 31 d2             	xor    dx,dx
c00161f3:	0f b7 c0             	movzx  eax,ax
c00161f6:	09 d0                	or     eax,edx
c00161f8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00161fb:	eb 1a                	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c00161fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016200:	83 c4 10             	add    esp,0x10
c0016203:	eb 15                	jmp    c001621a <Vm::faultHandler(regs*)+0x673>
c0016205:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016208:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001620b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016210:	74 03                	je     c0016215 <Vm::faultHandler(regs*)+0x66e>
c0016212:	ef                   	out    dx,eax
c0016213:	eb 02                	jmp    c0016217 <Vm::faultHandler(regs*)+0x670>
c0016215:	66 ef                	out    dx,ax
c0016217:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001621a:	b0 01                	mov    al,0x1
c001621c:	eb 56                	jmp    c0016274 <Vm::faultHandler(regs*)+0x6cd>
c001621e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016222:	50                   	push   eax
c0016223:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016227:	50                   	push   eax
c0016228:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001622c:	50                   	push   eax
c001622d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016231:	50                   	push   eax
c0016232:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016236:	50                   	push   eax
c0016237:	52                   	push   edx
c0016238:	52                   	push   edx
c0016239:	68 4f 0c 02 c0       	push   0xc0020c4f
c001623e:	e8 20 44 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016243:	83 c4 20             	add    esp,0x20
c0016246:	83 ec 0c             	sub    esp,0xc
c0016249:	6a 60                	push   0x60
c001624b:	e8 99 f4 ff ff       	call   c00156e9 <Vm::inbv(unsigned short)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	3c 1c                	cmp    al,0x1c
c0016255:	74 04                	je     c001625b <Vm::faultHandler(regs*)+0x6b4>
c0016257:	3c 5a                	cmp    al,0x5a
c0016259:	75 eb                	jne    c0016246 <Vm::faultHandler(regs*)+0x69f>
c001625b:	3c 1c                	cmp    al,0x1c
c001625d:	74 04                	je     c0016263 <Vm::faultHandler(regs*)+0x6bc>
c001625f:	3c 5a                	cmp    al,0x5a
c0016261:	75 0f                	jne    c0016272 <Vm::faultHandler(regs*)+0x6cb>
c0016263:	83 ec 0c             	sub    esp,0xc
c0016266:	6a 60                	push   0x60
c0016268:	e8 7c f4 ff ff       	call   c00156e9 <Vm::inbv(unsigned short)>
c001626d:	83 c4 10             	add    esp,0x10
c0016270:	eb e9                	jmp    c001625b <Vm::faultHandler(regs*)+0x6b4>
c0016272:	31 c0                	xor    eax,eax
c0016274:	83 c4 1c             	add    esp,0x1c
c0016277:	5b                   	pop    ebx
c0016278:	5e                   	pop    esi
c0016279:	5f                   	pop    edi
c001627a:	5d                   	pop    ebp
c001627b:	c3                   	ret    

c001627c <noCopro(unsigned long)>:
c001627c:	c3                   	ret    

c001627d <nmiHandler(regs*, void*)>:
c001627d:	83 ec 0c             	sub    esp,0xc
c0016280:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	50                   	push   eax
c0016289:	e8 08 0e ff ff       	call   c0007096 <Computer::handleNMI()>
c001628e:	83 c4 10             	add    esp,0x10
c0016291:	90                   	nop
c0016292:	83 c4 0c             	add    esp,0xc
c0016295:	c3                   	ret    

c0016296 <doubleFault(regs*, void*)>:
c0016296:	55                   	push   ebp
c0016297:	89 e5                	mov    ebp,esp
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	68 ac 0c 02 c0       	push   0xc0020cac
c00162a4:	e8 6e a1 ff ff       	call   c0010417 <KePanic(char const*)>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	90                   	nop
c00162ad:	c9                   	leave  
c00162ae:	c3                   	ret    

c00162af <displayDebugInfo(regs*)>:
c00162af:	83 ec 1c             	sub    esp,0x1c
c00162b2:	0f 20 c0             	mov    eax,cr0
c00162b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162b9:	0f 20 d0             	mov    eax,cr2
c00162bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162c0:	0f 20 d8             	mov    eax,cr3
c00162c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162c7:	0f 20 e0             	mov    eax,cr4
c00162ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00162cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00162d4:	83 ec 08             	sub    esp,0x8
c00162d7:	50                   	push   eax
c00162d8:	68 c8 0c 02 c0       	push   0xc0020cc8
c00162dd:	e8 81 43 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162e9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00162ec:	83 ec 08             	sub    esp,0x8
c00162ef:	50                   	push   eax
c00162f0:	68 b9 0c 02 c0       	push   0xc0020cb9
c00162f5:	e8 69 43 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00162fa:	83 c4 10             	add    esp,0x10
c00162fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016301:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016304:	83 ec 08             	sub    esp,0x8
c0016307:	50                   	push   eax
c0016308:	68 c4 0c 02 c0       	push   0xc0020cc4
c001630d:	e8 51 43 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016312:	83 c4 10             	add    esp,0x10
c0016315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016319:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001631c:	83 ec 08             	sub    esp,0x8
c001631f:	50                   	push   eax
c0016320:	68 d3 0c 02 c0       	push   0xc0020cd3
c0016325:	e8 39 43 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016331:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016334:	83 ec 08             	sub    esp,0x8
c0016337:	50                   	push   eax
c0016338:	68 de 0c 02 c0       	push   0xc0020cde
c001633d:	e8 21 43 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	83 ec 08             	sub    esp,0x8
c0016348:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001634c:	68 e9 0c 02 c0       	push   0xc0020ce9
c0016351:	e8 0d 43 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016356:	83 c4 10             	add    esp,0x10
c0016359:	83 ec 08             	sub    esp,0x8
c001635c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016360:	68 f4 0c 02 c0       	push   0xc0020cf4
c0016365:	e8 f9 42 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016372:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016378:	83 ec 0c             	sub    esp,0xc
c001637b:	50                   	push   eax
c001637c:	e8 56 21 ff ff       	call   c00084d7 <setActiveTerminal(VgaText*)>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016389:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001638f:	83 ec 08             	sub    esp,0x8
c0016392:	68 ff 0c 02 c0       	push   0xc0020cff
c0016397:	50                   	push   eax
c0016398:	e8 79 24 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163af:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00163b2:	83 ec 08             	sub    esp,0x8
c00163b5:	52                   	push   edx
c00163b6:	50                   	push   eax
c00163b7:	e8 14 24 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c00163bc:	83 c4 10             	add    esp,0x10
c00163bf:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163ca:	83 ec 08             	sub    esp,0x8
c00163cd:	68 0d 0d 02 c0       	push   0xc0020d0d
c00163d2:	50                   	push   eax
c00163d3:	e8 3e 24 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c00163d8:	83 c4 10             	add    esp,0x10
c00163db:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163e6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00163eb:	8b 12                	mov    edx,DWORD PTR [edx]
c00163ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00163f0:	83 c2 0c             	add    edx,0xc
c00163f3:	83 ec 08             	sub    esp,0x8
c00163f6:	52                   	push   edx
c00163f7:	50                   	push   eax
c00163f8:	e8 19 24 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016405:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001640b:	83 ec 08             	sub    esp,0x8
c001640e:	68 16 0d 02 c0       	push   0xc0020d16
c0016413:	50                   	push   eax
c0016414:	e8 fd 23 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016419:	83 c4 10             	add    esp,0x10
c001641c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016421:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016427:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001642b:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001642e:	83 ec 08             	sub    esp,0x8
c0016431:	52                   	push   edx
c0016432:	50                   	push   eax
c0016433:	e8 98 23 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016440:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016446:	83 ec 08             	sub    esp,0x8
c0016449:	68 1e 0d 02 c0       	push   0xc0020d1e
c001644e:	50                   	push   eax
c001644f:	e8 c2 23 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016454:	83 c4 10             	add    esp,0x10
c0016457:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001645c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016462:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016466:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016469:	83 ec 08             	sub    esp,0x8
c001646c:	52                   	push   edx
c001646d:	50                   	push   eax
c001646e:	e8 5d 23 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001647b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016481:	83 ec 08             	sub    esp,0x8
c0016484:	68 26 0d 02 c0       	push   0xc0020d26
c0016489:	50                   	push   eax
c001648a:	e8 87 23 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c001648f:	83 c4 10             	add    esp,0x10
c0016492:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016497:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001649d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164a1:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00164a4:	83 ec 08             	sub    esp,0x8
c00164a7:	52                   	push   edx
c00164a8:	50                   	push   eax
c00164a9:	e8 22 23 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c00164ae:	83 c4 10             	add    esp,0x10
c00164b1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164bc:	83 ec 08             	sub    esp,0x8
c00164bf:	68 2e 0d 02 c0       	push   0xc0020d2e
c00164c4:	50                   	push   eax
c00164c5:	e8 4c 23 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c00164ca:	83 c4 10             	add    esp,0x10
c00164cd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164dc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00164df:	83 ec 08             	sub    esp,0x8
c00164e2:	52                   	push   edx
c00164e3:	50                   	push   eax
c00164e4:	e8 e7 22 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164f7:	83 ec 08             	sub    esp,0x8
c00164fa:	68 36 0d 02 c0       	push   0xc0020d36
c00164ff:	50                   	push   eax
c0016500:	e8 11 23 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001650d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016513:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016517:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001651a:	83 ec 08             	sub    esp,0x8
c001651d:	52                   	push   edx
c001651e:	50                   	push   eax
c001651f:	e8 ac 22 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c0016524:	83 c4 10             	add    esp,0x10
c0016527:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001652c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016532:	83 ec 08             	sub    esp,0x8
c0016535:	68 3e 0d 02 c0       	push   0xc0020d3e
c001653a:	50                   	push   eax
c001653b:	e8 d6 22 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016540:	83 c4 10             	add    esp,0x10
c0016543:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016548:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001654e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016552:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016555:	83 ec 08             	sub    esp,0x8
c0016558:	52                   	push   edx
c0016559:	50                   	push   eax
c001655a:	e8 71 22 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016567:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001656d:	83 ec 08             	sub    esp,0x8
c0016570:	68 46 0d 02 c0       	push   0xc0020d46
c0016575:	50                   	push   eax
c0016576:	e8 9b 22 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c001657b:	83 c4 10             	add    esp,0x10
c001657e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016583:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016589:	83 ec 08             	sub    esp,0x8
c001658c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016590:	50                   	push   eax
c0016591:	e8 3a 22 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c0016596:	83 c4 10             	add    esp,0x10
c0016599:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001659e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165a4:	83 ec 08             	sub    esp,0x8
c00165a7:	68 4f 0d 02 c0       	push   0xc0020d4f
c00165ac:	50                   	push   eax
c00165ad:	e8 64 22 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c00165b2:	83 c4 10             	add    esp,0x10
c00165b5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165c0:	83 ec 08             	sub    esp,0x8
c00165c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165c7:	50                   	push   eax
c00165c8:	e8 03 22 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165db:	83 ec 08             	sub    esp,0x8
c00165de:	68 57 0d 02 c0       	push   0xc0020d57
c00165e3:	50                   	push   eax
c00165e4:	e8 2d 22 ff ff       	call   c0008816 <VgaText::puts(char const*)>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165f7:	83 ec 08             	sub    esp,0x8
c00165fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00165fe:	50                   	push   eax
c00165ff:	e8 cc 21 ff ff       	call   c00087d0 <VgaText::putx(unsigned int)>
c0016604:	83 c4 10             	add    esp,0x10
c0016607:	fa                   	cli    
c0016608:	f4                   	hlt    
c0016609:	eb fe                	jmp    c0016609 <displayDebugInfo(regs*)+0x35a>

c001660b <HalSystemIdle()>:
c001660b:	56                   	push   esi
c001660c:	53                   	push   ebx
c001660d:	83 ec 14             	sub    esp,0x14
c0016610:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016615:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001661b:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016621:	83 e0 04             	and    eax,0x4
c0016624:	84 c0                	test   al,al
c0016626:	0f 95 c0             	setne  al
c0016629:	84 c0                	test   al,al
c001662b:	74 4c                	je     c0016679 <HalSystemIdle()+0x6e>
c001662d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016632:	83 ec 08             	sub    esp,0x8
c0016635:	68 e1 00 00 00       	push   0xe1
c001663a:	50                   	push   eax
c001663b:	e8 6c 08 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0016640:	83 c4 10             	add    esp,0x10
c0016643:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016647:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001664b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016654:	83 e2 02             	and    edx,0x2
c0016657:	89 d3                	mov    ebx,edx
c0016659:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001665d:	83 e2 00             	and    edx,0x0
c0016660:	89 d6                	mov    esi,edx
c0016662:	56                   	push   esi
c0016663:	53                   	push   ebx
c0016664:	68 e1 00 00 00       	push   0xe1
c0016669:	50                   	push   eax
c001666a:	e8 69 08 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001666f:	83 c4 10             	add    esp,0x10
c0016672:	e8 1d 9b fe ff       	call   c0000194 <doTPAUSE>
c0016677:	eb 01                	jmp    c001667a <HalSystemIdle()+0x6f>
c0016679:	f4                   	hlt    
c001667a:	90                   	nop
c001667b:	83 c4 14             	add    esp,0x14
c001667e:	5b                   	pop    ebx
c001667f:	5e                   	pop    esi
c0016680:	c3                   	ret    

c0016681 <displayProgramFault(char const*)>:
c0016681:	83 ec 0c             	sub    esp,0xc
c0016684:	83 ec 0c             	sub    esp,0xc
c0016687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668b:	e8 d3 3f ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016690:	83 c4 10             	add    esp,0x10
c0016693:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016698:	8b 00                	mov    eax,DWORD PTR [eax]
c001669a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001669d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166a3:	85 c0                	test   eax,eax
c00166a5:	74 21                	je     c00166c8 <displayProgramFault(char const*)+0x47>
c00166a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00166ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00166ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166b7:	6a 04                	push   0x4
c00166b9:	6a 0f                	push   0xf
c00166bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166bf:	50                   	push   eax
c00166c0:	e8 c3 21 ff ff       	call   c0008888 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	90                   	nop
c00166c9:	83 c4 0c             	add    esp,0xc
c00166cc:	c3                   	ret    

c00166cd <gpFault(regs*, void*)>:
c00166cd:	83 ec 1c             	sub    esp,0x1c
c00166d0:	c7 05 10 72 02 c0 a7 5b 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc0015ba7
c00166da:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00166df:	85 c0                	test   eax,eax
c00166e1:	74 1c                	je     c00166ff <gpFault(regs*, void*)+0x32>
c00166e3:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00166e8:	83 ec 0c             	sub    esp,0xc
c00166eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166ef:	ff d0                	call   eax
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00166f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00166fd:	75 2e                	jne    c001672d <gpFault(regs*, void*)+0x60>
c00166ff:	83 ec 0c             	sub    esp,0xc
c0016702:	68 5f 0d 02 c0       	push   0xc0020d5f
c0016707:	e8 75 ff ff ff       	call   c0016681 <displayProgramFault(char const*)>
c001670c:	83 c4 10             	add    esp,0x10
c001670f:	83 ec 0c             	sub    esp,0xc
c0016712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016716:	e8 94 fb ff ff       	call   c00162af <displayDebugInfo(regs*)>
c001671b:	83 c4 10             	add    esp,0x10
c001671e:	83 ec 0c             	sub    esp,0xc
c0016721:	6a 00                	push   0x0
c0016723:	e8 6c ee ff ff       	call   c0015594 <Thr::terminateFromIRQ(int)>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	eb 01                	jmp    c001672e <gpFault(regs*, void*)+0x61>
c001672d:	90                   	nop
c001672e:	83 c4 1c             	add    esp,0x1c
c0016731:	c3                   	ret    

c0016732 <pgFault(regs*, void*)>:
c0016732:	83 ec 1c             	sub    esp,0x1c
c0016735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016739:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001673c:	0f 20 d0             	mov    eax,cr2
c001673f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016747:	83 ec 04             	sub    esp,0x4
c001674a:	52                   	push   edx
c001674b:	50                   	push   eax
c001674c:	68 3c 0e 02 c0       	push   0xc0020e3c
c0016751:	e8 0d 3f ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016756:	83 c4 10             	add    esp,0x10
c0016759:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001675e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016760:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016763:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016769:	0f 20 d2             	mov    edx,cr2
c001676c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016770:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016774:	83 ec 08             	sub    esp,0x8
c0016777:	52                   	push   edx
c0016778:	50                   	push   eax
c0016779:	e8 c0 3a ff ff       	call   c000a23e <VAS::tryLoadBackOffDisk(unsigned long)>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	84 c0                	test   al,al
c0016783:	75 2e                	jne    c00167b3 <pgFault(regs*, void*)+0x81>
c0016785:	83 ec 0c             	sub    esp,0xc
c0016788:	68 78 0d 02 c0       	push   0xc0020d78
c001678d:	e8 ef fe ff ff       	call   c0016681 <displayProgramFault(char const*)>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	83 ec 0c             	sub    esp,0xc
c0016798:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001679c:	e8 0e fb ff ff       	call   c00162af <displayDebugInfo(regs*)>
c00167a1:	83 c4 10             	add    esp,0x10
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	6a 00                	push   0x0
c00167a9:	e8 e6 ed ff ff       	call   c0015594 <Thr::terminateFromIRQ(int)>
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	eb 01                	jmp    c00167b4 <pgFault(regs*, void*)+0x82>
c00167b3:	90                   	nop
c00167b4:	83 c4 1c             	add    esp,0x1c
c00167b7:	c3                   	ret    

c00167b8 <otherISRHandler(regs*, void*)>:
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	83 ec 0c             	sub    esp,0xc
c00167be:	68 64 0e 02 c0       	push   0xc0020e64
c00167c3:	e8 b9 fe ff ff       	call   c0016681 <displayProgramFault(char const*)>
c00167c8:	83 c4 10             	add    esp,0x10
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d2:	e8 d8 fa ff ff       	call   c00162af <displayDebugInfo(regs*)>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	6a 00                	push   0x0
c00167df:	e8 b0 ed ff ff       	call   c0015594 <Thr::terminateFromIRQ(int)>
c00167e4:	83 c4 10             	add    esp,0x10
c00167e7:	90                   	nop
c00167e8:	83 c4 0c             	add    esp,0xc
c00167eb:	c3                   	ret    

c00167ec <opcodeFault(regs*, void*)>:
c00167ec:	55                   	push   ebp
c00167ed:	89 e5                	mov    ebp,esp
c00167ef:	83 ec 08             	sub    esp,0x8
c00167f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00167f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167f8:	83 ec 08             	sub    esp,0x8
c00167fb:	50                   	push   eax
c00167fc:	68 83 0d 02 c0       	push   0xc0020d83
c0016801:	e8 5d 3e ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016806:	83 c4 10             	add    esp,0x10
c0016809:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001680e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016814:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001681a:	84 c0                	test   al,al
c001681c:	74 21                	je     c001683f <opcodeFault(regs*, void*)+0x53>
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	68 8c 0e 02 c0       	push   0xc0020e8c
c0016826:	e8 38 3e ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016831:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016834:	8d 50 19             	lea    edx,[eax+0x19]
c0016837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001683a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001683d:	eb 2b                	jmp    c001686a <opcodeFault(regs*, void*)+0x7e>
c001683f:	83 ec 0c             	sub    esp,0xc
c0016842:	68 91 0d 02 c0       	push   0xc0020d91
c0016847:	e8 35 fe ff ff       	call   c0016681 <displayProgramFault(char const*)>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	83 ec 0c             	sub    esp,0xc
c0016852:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016855:	e8 55 fa ff ff       	call   c00162af <displayDebugInfo(regs*)>
c001685a:	83 c4 10             	add    esp,0x10
c001685d:	83 ec 0c             	sub    esp,0xc
c0016860:	6a 00                	push   0x0
c0016862:	e8 2d ed ff ff       	call   c0015594 <Thr::terminateFromIRQ(int)>
c0016867:	83 c4 10             	add    esp,0x10
c001686a:	c9                   	leave  
c001686b:	c3                   	ret    

c001686c <i386SaveCoprocessor(void*)>:
c001686c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016870:	83 c0 3f             	add    eax,0x3f
c0016873:	83 e0 c0             	and    eax,0xffffffc0
c0016876:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001687a:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c0016880 <i386LoadCoprocessor(void*)>:
c0016880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016884:	83 c0 3f             	add    eax,0x3f
c0016887:	83 e0 c0             	and    eax,0xffffffc0
c001688a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001688e:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c0016894 <x87EmulHandler(regs*, void*)>:
c0016894:	53                   	push   ebx
c0016895:	83 ec 08             	sub    esp,0x8
c0016898:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001689d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00168a1:	74 10                	je     c00168b3 <x87EmulHandler(regs*, void*)+0x1f>
c00168a3:	83 ec 0c             	sub    esp,0xc
c00168a6:	68 9e 0d 02 c0       	push   0xc0020d9e
c00168ab:	e8 67 9b ff ff       	call   c0010417 <KePanic(char const*)>
c00168b0:	83 c4 10             	add    esp,0x10
c00168b3:	0f 20 c0             	mov    eax,cr0
c00168b6:	a8 08                	test   al,0x8
c00168b8:	74 59                	je     c0016913 <x87EmulHandler(regs*, void*)+0x7f>
c00168ba:	0f 06                	clts   
c00168bc:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00168c1:	85 c0                	test   eax,eax
c00168c3:	74 0e                	je     c00168d3 <x87EmulHandler(regs*, void*)+0x3f>
c00168c5:	83 ec 0c             	sub    esp,0xc
c00168c8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00168cb:	e8 9c ff ff ff       	call   c001686c <i386SaveCoprocessor(void*)>
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00168d9:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00168dd:	75 12                	jne    c00168f1 <x87EmulHandler(regs*, void*)+0x5d>
c00168df:	83 ec 0c             	sub    esp,0xc
c00168e2:	68 40 02 00 00       	push   0x240
c00168e7:	e8 87 0f ff ff       	call   c0007873 <malloc>
c00168ec:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00168ef:	eb 10                	jmp    c0016901 <x87EmulHandler(regs*, void*)+0x6d>
c00168f1:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00168fc:	e8 7f ff ff ff       	call   c0016880 <i386LoadCoprocessor(void*)>
c0016901:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016906:	83 c4 10             	add    esp,0x10
c0016909:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c001690e:	83 c4 08             	add    esp,0x8
c0016911:	5b                   	pop    ebx
c0016912:	c3                   	ret    
c0016913:	83 ec 0c             	sub    esp,0xc
c0016916:	68 b2 0d 02 c0       	push   0xc0020db2
c001691b:	e8 43 3d ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0016920:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016928:	83 c4 18             	add    esp,0x18
c001692b:	5b                   	pop    ebx
c001692c:	e9 63 ec ff ff       	jmp    c0015594 <Thr::terminateFromIRQ(int)>

c0016931 <HalInitialiseCoprocessor()>:
c0016931:	83 ec 10             	sub    esp,0x10
c0016934:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c001693e:	6a 00                	push   0x0
c0016940:	68 94 68 01 c0       	push   0xc0016894
c0016945:	6a 07                	push   0x7
c0016947:	e8 82 56 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c001694c:	e8 7f 6e 00 00       	call   c001d7d0 <avxDetect>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	85 c0                	test   eax,eax
c0016956:	74 1c                	je     c0016974 <HalInitialiseCoprocessor()+0x43>
c0016958:	c7 05 0c 72 02 c0 fa d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d7fa
c0016962:	c7 05 08 72 02 c0 0b d8 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d80b
c001696c:	83 c4 0c             	add    esp,0xc
c001696f:	e9 a8 6e 00 00       	jmp    c001d81c <avxInit>
c0016974:	e8 e7 71 00 00       	call   c001db60 <absolutelyNoChanceInHell>
c0016979:	85 c0                	test   eax,eax
c001697b:	74 1c                	je     c0016999 <HalInitialiseCoprocessor()+0x68>
c001697d:	c7 05 0c 72 02 c0 78 db 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001db78
c0016987:	c7 05 08 72 02 c0 80 db 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001db80
c0016991:	83 c4 0c             	add    esp,0xc
c0016994:	e9 ef 71 00 00       	jmp    c001db88 <sseInit>
c0016999:	e8 08 72 00 00       	call   c001dba6 <x87Detect>
c001699e:	85 c0                	test   eax,eax
c00169a0:	74 1c                	je     c00169be <HalInitialiseCoprocessor()+0x8d>
c00169a2:	c7 05 0c 72 02 c0 c1 db 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001dbc1
c00169ac:	c7 05 08 72 02 c0 c8 db 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001dbc8
c00169b6:	83 c4 0c             	add    esp,0xc
c00169b9:	e9 11 72 00 00       	jmp    c001dbcf <x87Init>
c00169be:	c7 05 0c 72 02 c0 7c 62 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001627c
c00169c8:	c7 05 08 72 02 c0 7c 62 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001627c
c00169d2:	0f 20 c0             	mov    eax,cr0
c00169d5:	83 c8 04             	or     eax,0x4
c00169d8:	0f 22 c0             	mov    cr0,eax
c00169db:	83 c4 0c             	add    esp,0xc
c00169de:	c3                   	ret    

c00169df <HalPanic(char const*)>:
c00169df:	53                   	push   ebx
c00169e0:	83 ec 10             	sub    esp,0x10
c00169e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00169e7:	fa                   	cli    
c00169e8:	53                   	push   ebx
c00169e9:	68 c8 0d 02 c0       	push   0xc0020dc8
c00169ee:	e8 70 3c ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00169f3:	83 c4 0c             	add    esp,0xc
c00169f6:	6a 01                	push   0x1
c00169f8:	6a 0f                	push   0xf
c00169fa:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a00:	e8 2b 19 ff ff       	call   c0008330 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a05:	58                   	pop    eax
c0016a06:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a0c:	e8 11 1b ff ff       	call   c0008522 <VgaText::clearScreen()>
c0016a11:	5a                   	pop    edx
c0016a12:	59                   	pop    ecx
c0016a13:	68 24 f6 01 c0       	push   0xc001f624
c0016a18:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a1e:	e8 45 19 ff ff       	call   c0008368 <VgaText::setTitle(char*)>
c0016a23:	83 c4 0c             	add    esp,0xc
c0016a26:	6a 01                	push   0x1
c0016a28:	6a 0f                	push   0xf
c0016a2a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a30:	e8 fb 18 ff ff       	call   c0008330 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a35:	58                   	pop    eax
c0016a36:	5a                   	pop    edx
c0016a37:	68 e1 0d 02 c0       	push   0xc0020de1
c0016a3c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a42:	e8 cf 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016a47:	83 c4 0c             	add    esp,0xc
c0016a4a:	6a 0f                	push   0xf
c0016a4c:	6a 01                	push   0x1
c0016a4e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a54:	e8 d7 18 ff ff       	call   c0008330 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a59:	59                   	pop    ecx
c0016a5a:	58                   	pop    eax
c0016a5b:	68 ea 0d 02 c0       	push   0xc0020dea
c0016a60:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a66:	e8 ab 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016a6b:	83 c4 0c             	add    esp,0xc
c0016a6e:	6a 01                	push   0x1
c0016a70:	6a 0f                	push   0xf
c0016a72:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a78:	e8 b3 18 ff ff       	call   c0008330 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a7d:	58                   	pop    eax
c0016a7e:	5a                   	pop    edx
c0016a7f:	68 2e 0e 02 c0       	push   0xc0020e2e
c0016a84:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a8a:	e8 87 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016a8f:	59                   	pop    ecx
c0016a90:	58                   	pop    eax
c0016a91:	68 f7 0d 02 c0       	push   0xc0020df7
c0016a96:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a9c:	e8 75 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016aa1:	58                   	pop    eax
c0016aa2:	5a                   	pop    edx
c0016aa3:	68 31 0e 02 c0       	push   0xc0020e31
c0016aa8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016aae:	e8 63 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016ab3:	59                   	pop    ecx
c0016ab4:	58                   	pop    eax
c0016ab5:	53                   	push   ebx
c0016ab6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016abc:	e8 55 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016ac1:	58                   	pop    eax
c0016ac2:	5a                   	pop    edx
c0016ac3:	68 2e 0e 02 c0       	push   0xc0020e2e
c0016ac8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016ace:	e8 43 1d ff ff       	call   c0008816 <VgaText::puts(char const*)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	eb fe                	jmp    c0016ad6 <HalPanic(char const*)+0xf7>

c0016ad8 <HalQueryPerformanceCounter()>:
c0016ad8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016add:	31 d2                	xor    edx,edx
c0016adf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016ae5:	31 c0                	xor    eax,eax
c0016ae7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016aee:	74 02                	je     c0016af2 <HalQueryPerformanceCounter()+0x1a>
c0016af0:	0f 31                	rdtsc  
c0016af2:	c3                   	ret    

c0016af3 <HalInitialise()>:
c0016af3:	53                   	push   ebx
c0016af4:	83 ec 08             	sub    esp,0x8
c0016af7:	e8 02 57 ff ff       	call   c000c1fe <setupINTS()>
c0016afc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016b01:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c0016b08:	75 07                	jne    c0016b11 <HalInitialise()+0x1e>
c0016b0a:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016b11:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016b18:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c0016b1f:	e8 a8 02 00 00       	call   c0016dcc <picOpen()>
c0016b24:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016b2b:	74 0a                	je     c0016b37 <HalInitialise()+0x44>
c0016b2d:	e8 e2 01 00 00       	call   c0016d14 <picDisable()>
c0016b32:	e8 0f 66 00 00       	call   c001d146 <apicOpen()>
c0016b37:	50                   	push   eax
c0016b38:	bb 0f 00 00 00       	mov    ebx,0xf
c0016b3d:	6a 00                	push   0x0
c0016b3f:	68 b8 67 01 c0       	push   0xc00167b8
c0016b44:	6a 00                	push   0x0
c0016b46:	e8 83 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b4b:	83 c4 0c             	add    esp,0xc
c0016b4e:	6a 00                	push   0x0
c0016b50:	68 b8 67 01 c0       	push   0xc00167b8
c0016b55:	6a 01                	push   0x1
c0016b57:	e8 72 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b5c:	83 c4 0c             	add    esp,0xc
c0016b5f:	6a 00                	push   0x0
c0016b61:	68 7d 62 01 c0       	push   0xc001627d
c0016b66:	6a 02                	push   0x2
c0016b68:	e8 61 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b6d:	83 c4 0c             	add    esp,0xc
c0016b70:	6a 00                	push   0x0
c0016b72:	68 b8 67 01 c0       	push   0xc00167b8
c0016b77:	6a 03                	push   0x3
c0016b79:	e8 50 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b7e:	83 c4 0c             	add    esp,0xc
c0016b81:	6a 00                	push   0x0
c0016b83:	68 b8 67 01 c0       	push   0xc00167b8
c0016b88:	6a 04                	push   0x4
c0016b8a:	e8 3f 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b8f:	83 c4 0c             	add    esp,0xc
c0016b92:	6a 00                	push   0x0
c0016b94:	68 b8 67 01 c0       	push   0xc00167b8
c0016b99:	6a 05                	push   0x5
c0016b9b:	e8 2e 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ba0:	83 c4 0c             	add    esp,0xc
c0016ba3:	6a 00                	push   0x0
c0016ba5:	68 ec 67 01 c0       	push   0xc00167ec
c0016baa:	6a 06                	push   0x6
c0016bac:	e8 1d 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bb1:	83 c4 0c             	add    esp,0xc
c0016bb4:	6a 00                	push   0x0
c0016bb6:	68 96 62 01 c0       	push   0xc0016296
c0016bbb:	6a 08                	push   0x8
c0016bbd:	e8 0c 54 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bc2:	83 c4 0c             	add    esp,0xc
c0016bc5:	6a 00                	push   0x0
c0016bc7:	68 b8 67 01 c0       	push   0xc00167b8
c0016bcc:	6a 09                	push   0x9
c0016bce:	e8 fb 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bd3:	83 c4 0c             	add    esp,0xc
c0016bd6:	6a 00                	push   0x0
c0016bd8:	68 b8 67 01 c0       	push   0xc00167b8
c0016bdd:	6a 0a                	push   0xa
c0016bdf:	e8 ea 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016be4:	83 c4 0c             	add    esp,0xc
c0016be7:	6a 00                	push   0x0
c0016be9:	68 b8 67 01 c0       	push   0xc00167b8
c0016bee:	6a 0b                	push   0xb
c0016bf0:	e8 d9 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bf5:	83 c4 0c             	add    esp,0xc
c0016bf8:	6a 00                	push   0x0
c0016bfa:	68 cd 66 01 c0       	push   0xc00166cd
c0016bff:	6a 0d                	push   0xd
c0016c01:	e8 c8 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c06:	83 c4 0c             	add    esp,0xc
c0016c09:	6a 00                	push   0x0
c0016c0b:	68 32 67 01 c0       	push   0xc0016732
c0016c10:	6a 0e                	push   0xe
c0016c12:	e8 b7 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	50                   	push   eax
c0016c1b:	6a 00                	push   0x0
c0016c1d:	68 b8 67 01 c0       	push   0xc00167b8
c0016c22:	53                   	push   ebx
c0016c23:	43                   	inc    ebx
c0016c24:	e8 a5 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c29:	83 c4 10             	add    esp,0x10
c0016c2c:	83 fb 1e             	cmp    ebx,0x1e
c0016c2f:	75 e9                	jne    c0016c1a <HalInitialise()+0x127>
c0016c31:	50                   	push   eax
c0016c32:	6a 00                	push   0x0
c0016c34:	68 92 16 01 c0       	push   0xc0011692
c0016c39:	6a 60                	push   0x60
c0016c3b:	e8 8e 53 ff ff       	call   c000bfce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c40:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016c45:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016c4f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016c56:	e8 18 0c ff ff       	call   c0007873 <malloc>
c0016c5b:	89 c3                	mov    ebx,eax
c0016c5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c60:	e8 2d 09 00 00       	call   c0017592 <RTC::RTC()>
c0016c65:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0016c6f:	5a                   	pop    edx
c0016c70:	59                   	pop    ecx
c0016c71:	53                   	push   ebx
c0016c72:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c78:	e8 1f 4e ff ff       	call   c000ba9c <Device::addChild(Device*)>
c0016c7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c7f:	6a 00                	push   0x0
c0016c81:	6a 00                	push   0x0
c0016c83:	6a 00                	push   0x0
c0016c85:	53                   	push   ebx
c0016c86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c89:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016c8e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016c94:	83 c4 28             	add    esp,0x28
c0016c97:	5b                   	pop    ebx
c0016c98:	c3                   	ret    

c0016c99 <HalMakeBeep(int)>:
c0016c99:	53                   	push   ebx
c0016c9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016c9e:	85 db                	test   ebx,ebx
c0016ca0:	75 07                	jne    c0016ca9 <HalMakeBeep(int)+0x10>
c0016ca2:	e4 61                	in     al,0x61
c0016ca4:	83 e0 fc             	and    eax,0xfffffffc
c0016ca7:	eb 26                	jmp    c0016ccf <HalMakeBeep(int)+0x36>
c0016ca9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016cae:	99                   	cdq    
c0016caf:	f7 fb                	idiv   ebx
c0016cb1:	89 c1                	mov    ecx,eax
c0016cb3:	b0 b6                	mov    al,0xb6
c0016cb5:	e6 43                	out    0x43,al
c0016cb7:	88 c8                	mov    al,cl
c0016cb9:	e6 42                	out    0x42,al
c0016cbb:	89 c8                	mov    eax,ecx
c0016cbd:	c1 e8 08             	shr    eax,0x8
c0016cc0:	e6 42                	out    0x42,al
c0016cc2:	e4 61                	in     al,0x61
c0016cc4:	88 c2                	mov    dl,al
c0016cc6:	83 ca 03             	or     edx,0x3
c0016cc9:	38 c2                	cmp    dl,al
c0016ccb:	74 04                	je     c0016cd1 <HalMakeBeep(int)+0x38>
c0016ccd:	88 d0                	mov    al,dl
c0016ccf:	e6 61                	out    0x61,al
c0016cd1:	5b                   	pop    ebx
c0016cd2:	c3                   	ret    

c0016cd3 <HalGetRand()>:
c0016cd3:	31 c0                	xor    eax,eax
c0016cd5:	c3                   	ret    

c0016cd6 <HalEndOfInterrupt(int)>:
c0016cd6:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016cdd:	74 23                	je     c0016d02 <HalEndOfInterrupt(int)+0x2c>
c0016cdf:	83 ec 14             	sub    esp,0x14
c0016ce2:	6a 1b                	push   0x1b
c0016ce4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016cea:	e8 bd 01 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0016cef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016cf4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016cfe:	83 c4 1c             	add    esp,0x1c
c0016d01:	c3                   	ret    
c0016d02:	e9 55 02 00 00       	jmp    c0016f5c <picEOI(int)>

c0016d07 <HalRestart()>:
c0016d07:	c3                   	ret    

c0016d08 <HalShutdown()>:
c0016d08:	c3                   	ret    

c0016d09 <HalSleep()>:
c0016d09:	c3                   	ret    
c0016d0a:	66 90                	xchg   ax,ax

c0016d0c <picIoWait()>:
c0016d0c:	eb 00                	jmp    c0016d0e <picIoWait()+0x2>
c0016d0e:	eb 00                	jmp    c0016d10 <picIoWait()+0x4>
c0016d10:	90                   	nop
c0016d11:	c3                   	ret    
c0016d12:	66 90                	xchg   ax,ax

c0016d14 <picDisable()>:
c0016d14:	83 ec 10             	sub    esp,0x10
c0016d17:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016d1e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016d23:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016d27:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016d2c:	ee                   	out    dx,al
c0016d2d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016d34:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016d39:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016d3d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016d42:	ee                   	out    dx,al
c0016d43:	90                   	nop
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	c3                   	ret    

c0016d48 <picGetIRQReg(int)>:
c0016d48:	83 ec 10             	sub    esp,0x10
c0016d4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d4f:	25 ff 00 00 00       	and    eax,0xff
c0016d54:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016d5b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0016d5f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016d63:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016d68:	ee                   	out    dx,al
c0016d69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d6d:	25 ff 00 00 00       	and    eax,0xff
c0016d72:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016d79:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016d7d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016d81:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016d86:	ee                   	out    dx,al
c0016d87:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0016d8e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016d93:	89 c2                	mov    edx,eax
c0016d95:	ec                   	in     al,dx
c0016d96:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016d9a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016d9e:	25 ff 00 00 00       	and    eax,0xff
c0016da3:	c1 e0 08             	shl    eax,0x8
c0016da6:	89 c1                	mov    ecx,eax
c0016da8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016daf:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016db4:	89 c2                	mov    edx,eax
c0016db6:	ec                   	in     al,dx
c0016db7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016dbb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016dbf:	25 ff 00 00 00       	and    eax,0xff
c0016dc4:	09 c8                	or     eax,ecx
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	c3                   	ret    
c0016dca:	66 90                	xchg   ax,ax

c0016dcc <picOpen()>:
c0016dcc:	83 ec 50             	sub    esp,0x50
c0016dcf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016dd6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016ddb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016ddf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016de3:	ee                   	out    dx,al
c0016de4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016deb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016df0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016df4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016df8:	ee                   	out    dx,al
c0016df9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016e01:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016e09:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016e10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e14:	89 c2                	mov    edx,eax
c0016e16:	ec                   	in     al,dx
c0016e17:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016e1b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016e1f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016e23:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016e2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e2e:	89 c2                	mov    edx,eax
c0016e30:	ec                   	in     al,dx
c0016e31:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016e35:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016e39:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016e3d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016e44:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016e49:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016e4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e51:	ee                   	out    dx,al
c0016e52:	e8 b5 fe ff ff       	call   c0016d0c <picIoWait()>
c0016e57:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016e5e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016e63:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016e67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e6b:	ee                   	out    dx,al
c0016e6c:	e8 9b fe ff ff       	call   c0016d0c <picIoWait()>
c0016e71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e75:	25 ff 00 00 00       	and    eax,0xff
c0016e7a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016e81:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016e85:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016e89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e8d:	ee                   	out    dx,al
c0016e8e:	e8 79 fe ff ff       	call   c0016d0c <picIoWait()>
c0016e93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e97:	25 ff 00 00 00       	and    eax,0xff
c0016e9c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016ea3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016ea7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016eab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016eaf:	ee                   	out    dx,al
c0016eb0:	e8 57 fe ff ff       	call   c0016d0c <picIoWait()>
c0016eb5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016ebc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016ec1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016ec5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ec9:	ee                   	out    dx,al
c0016eca:	e8 3d fe ff ff       	call   c0016d0c <picIoWait()>
c0016ecf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016ed6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016edb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016edf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ee3:	ee                   	out    dx,al
c0016ee4:	e8 23 fe ff ff       	call   c0016d0c <picIoWait()>
c0016ee9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016ef0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016ef5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016efd:	ee                   	out    dx,al
c0016efe:	e8 09 fe ff ff       	call   c0016d0c <picIoWait()>
c0016f03:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016f0a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016f0f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016f13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016f17:	ee                   	out    dx,al
c0016f18:	e8 ef fd ff ff       	call   c0016d0c <picIoWait()>
c0016f1d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016f21:	25 ff 00 00 00       	and    eax,0xff
c0016f26:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016f2d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016f31:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016f35:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016f39:	ee                   	out    dx,al
c0016f3a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016f3e:	25 ff 00 00 00       	and    eax,0xff
c0016f43:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016f4a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016f4e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016f52:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016f56:	ee                   	out    dx,al
c0016f57:	90                   	nop
c0016f58:	83 c4 50             	add    esp,0x50
c0016f5b:	c3                   	ret    

c0016f5c <picEOI(int)>:
c0016f5c:	83 ec 10             	sub    esp,0x10
c0016f5f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016f64:	75 22                	jne    c0016f88 <picEOI(int)+0x2c>
c0016f66:	6a 0b                	push   0xb
c0016f68:	e8 db fd ff ff       	call   c0016d48 <picGetIRQReg(int)>
c0016f6d:	83 c4 04             	add    esp,0x4
c0016f70:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016f75:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016f7a:	25 ff ff 00 00       	and    eax,0xffff
c0016f7f:	25 80 00 00 00       	and    eax,0x80
c0016f84:	74 72                	je     c0016ff8 <picEOI(int)+0x9c>
c0016f86:	66 90                	xchg   ax,ax
c0016f88:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016f8d:	75 31                	jne    c0016fc0 <picEOI(int)+0x64>
c0016f8f:	6a 0b                	push   0xb
c0016f91:	e8 b2 fd ff ff       	call   c0016d48 <picGetIRQReg(int)>
c0016f96:	83 c4 04             	add    esp,0x4
c0016f99:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fa2:	66 85 c0             	test   ax,ax
c0016fa5:	78 19                	js     c0016fc0 <picEOI(int)+0x64>
c0016fa7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016fae:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016fb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016fb7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016fbc:	ee                   	out    dx,al
c0016fbd:	eb 3d                	jmp    c0016ffc <picEOI(int)+0xa0>
c0016fbf:	90                   	nop
c0016fc0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016fc5:	7e 19                	jle    c0016fe0 <picEOI(int)+0x84>
c0016fc7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016fce:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016fd3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016fd7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016fdc:	ee                   	out    dx,al
c0016fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016fe7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016fec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016ff0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016ff5:	ee                   	out    dx,al
c0016ff6:	eb 04                	jmp    c0016ffc <picEOI(int)+0xa0>
c0016ff8:	90                   	nop
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	c3                   	ret    

c0017000 <RTC::open(int, int, void*)>:
c0017000:	31 c0                	xor    eax,eax
c0017002:	c3                   	ret    
c0017003:	90                   	nop

c0017004 <RTC::close(int, int, void*)>:
c0017004:	31 c0                	xor    eax,eax
c0017006:	c3                   	ret    
c0017007:	90                   	nop

c0017008 <RTC::timeInSecondsUTC()>:
c0017008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001700c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017012:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017018:	c3                   	ret    
c0017019:	90                   	nop

c001701a <RTC::timeInDatetimeUTC()>:
c001701a:	53                   	push   ebx
c001701b:	83 ec 14             	sub    esp,0x14
c001701e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017022:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017026:	8b 10                	mov    edx,DWORD PTR [eax]
c0017028:	50                   	push   eax
c0017029:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001702c:	83 c4 0c             	add    esp,0xc
c001702f:	52                   	push   edx
c0017030:	50                   	push   eax
c0017031:	53                   	push   ebx
c0017032:	e8 dd 47 ff ff       	call   c000b814 <secondsToDatetime(unsigned long long)>
c0017037:	83 c4 14             	add    esp,0x14
c001703a:	89 d8                	mov    eax,ebx
c001703c:	5b                   	pop    ebx
c001703d:	c2 04 00             	ret    0x4

c0017040 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017040:	56                   	push   esi
c0017041:	53                   	push   ebx
c0017042:	83 ec 14             	sub    esp,0x14
c0017045:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017049:	8b 03                	mov    eax,DWORD PTR [ebx]
c001704b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001704e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017052:	52                   	push   edx
c0017053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001705b:	50                   	push   eax
c001705c:	e8 b3 47 ff ff       	call   c000b814 <secondsToDatetime(unsigned long long)>
c0017061:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017065:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017069:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001706d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017071:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017075:	83 c4 20             	add    esp,0x20
c0017078:	89 f0                	mov    eax,esi
c001707a:	5b                   	pop    ebx
c001707b:	5e                   	pop    esi
c001707c:	ff e0                	jmp    eax

c001707e <RTC::~RTC()>:
c001707e:	83 ec 0c             	sub    esp,0xc
c0017081:	ba cc 0e 02 c0       	mov    edx,0xc0020ecc
c0017086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708a:	89 10                	mov    DWORD PTR [eax],edx
c001708c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017090:	83 ec 0c             	sub    esp,0xc
c0017093:	50                   	push   eax
c0017094:	e8 ff 44 ff ff       	call   c000b598 <Clock::~Clock()>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	90                   	nop
c001709d:	83 c4 0c             	add    esp,0xc
c00170a0:	c3                   	ret    
c00170a1:	90                   	nop

c00170a2 <RTC::~RTC()>:
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170ac:	e8 cd ff ff ff       	call   c001707e <RTC::~RTC()>
c00170b1:	83 c4 10             	add    esp,0x10
c00170b4:	83 ec 08             	sub    esp,0x8
c00170b7:	68 60 01 00 00       	push   0x160
c00170bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170c0:	e8 a8 34 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c00170c5:	83 c4 10             	add    esp,0x10
c00170c8:	83 c4 0c             	add    esp,0xc
c00170cb:	c3                   	ret    

c00170cc <RTC::get_update_in_progress_flag()>:
c00170cc:	83 ec 14             	sub    esp,0x14
c00170cf:	6a 0a                	push   0xa
c00170d1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170d7:	e8 84 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00170dc:	83 c4 1c             	add    esp,0x1c
c00170df:	c0 e8 07             	shr    al,0x7
c00170e2:	c3                   	ret    
c00170e3:	90                   	nop

c00170e4 <RTC::completeRTCRefresh()>:
c00170e4:	55                   	push   ebp
c00170e5:	57                   	push   edi
c00170e6:	56                   	push   esi
c00170e7:	53                   	push   ebx
c00170e8:	83 ec 2c             	sub    esp,0x2c
c00170eb:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c00170f1:	83 ec 0c             	sub    esp,0xc
c00170f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170f8:	e8 cf ff ff ff       	call   c00170cc <RTC::get_update_in_progress_flag()>
c00170fd:	83 c4 10             	add    esp,0x10
c0017100:	84 c0                	test   al,al
c0017102:	74 0e                	je     c0017112 <RTC::completeRTCRefresh()+0x2e>
c0017104:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001710a:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0017110:	73 df                	jae    c00170f1 <RTC::completeRTCRefresh()+0xd>
c0017112:	55                   	push   ebp
c0017113:	55                   	push   ebp
c0017114:	6a 00                	push   0x0
c0017116:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001711c:	e8 3f fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017121:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017125:	58                   	pop    eax
c0017126:	5a                   	pop    edx
c0017127:	6a 02                	push   0x2
c0017129:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001712f:	e8 2c fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017134:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017138:	59                   	pop    ecx
c0017139:	5b                   	pop    ebx
c001713a:	6a 04                	push   0x4
c001713c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017142:	e8 19 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017147:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001714b:	5e                   	pop    esi
c001714c:	5f                   	pop    edi
c001714d:	6a 07                	push   0x7
c001714f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017155:	e8 06 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c001715a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001715e:	5d                   	pop    ebp
c001715f:	58                   	pop    eax
c0017160:	6a 08                	push   0x8
c0017162:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017168:	e8 f3 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c001716d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017171:	58                   	pop    eax
c0017172:	5a                   	pop    edx
c0017173:	6a 09                	push   0x9
c0017175:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001717b:	e8 e0 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	0f b6 e8             	movzx  ebp,al
c0017186:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017193:	e8 34 ff ff ff       	call   c00170cc <RTC::get_update_in_progress_flag()>
c0017198:	83 c4 10             	add    esp,0x10
c001719b:	84 c0                	test   al,al
c001719d:	74 0e                	je     c00171ad <RTC::completeRTCRefresh()+0xc9>
c001719f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00171a5:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c00171ab:	73 df                	jae    c001718c <RTC::completeRTCRefresh()+0xa8>
c00171ad:	50                   	push   eax
c00171ae:	50                   	push   eax
c00171af:	6a 00                	push   0x0
c00171b1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171b7:	e8 a4 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171bc:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00171c0:	58                   	pop    eax
c00171c1:	5a                   	pop    edx
c00171c2:	6a 02                	push   0x2
c00171c4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171ca:	e8 91 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171cf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00171d3:	59                   	pop    ecx
c00171d4:	5b                   	pop    ebx
c00171d5:	6a 04                	push   0x4
c00171d7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171dd:	e8 7e fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171e2:	5e                   	pop    esi
c00171e3:	88 c3                	mov    bl,al
c00171e5:	5f                   	pop    edi
c00171e6:	6a 07                	push   0x7
c00171e8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171ee:	e8 6d fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171f3:	89 c6                	mov    esi,eax
c00171f5:	58                   	pop    eax
c00171f6:	5a                   	pop    edx
c00171f7:	6a 08                	push   0x8
c00171f9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171ff:	e8 5c fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017204:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017208:	59                   	pop    ecx
c0017209:	5f                   	pop    edi
c001720a:	6a 09                	push   0x9
c001720c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017212:	e8 49 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017217:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001721b:	83 c4 10             	add    esp,0x10
c001721e:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0017222:	0f b6 f8             	movzx  edi,al
c0017225:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017229:	74 29                	je     c0017254 <RTC::completeRTCRefresh()+0x170>
c001722b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001722f:	89 fd                	mov    ebp,edi
c0017231:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017235:	89 f0                	mov    eax,esi
c0017237:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001723b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001723f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017243:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0017247:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001724b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001724f:	e9 32 ff ff ff       	jmp    c0017186 <RTC::completeRTCRefresh()+0xa2>
c0017254:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017258:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c001725c:	75 cd                	jne    c001722b <RTC::completeRTCRefresh()+0x147>
c001725e:	89 f2                	mov    edx,esi
c0017260:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0017264:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017268:	0f 94 c0             	sete   al
c001726b:	38 54 24 1e          	cmp    BYTE PTR [esp+0x1e],dl
c001726f:	0f 94 c2             	sete   dl
c0017272:	21 c2                	and    edx,eax
c0017274:	38 4c 24 1f          	cmp    BYTE PTR [esp+0x1f],cl
c0017278:	0f 94 c0             	sete   al
c001727b:	84 c2                	test   dl,al
c001727d:	74 ac                	je     c001722b <RTC::completeRTCRefresh()+0x147>
c001727f:	39 fd                	cmp    ebp,edi
c0017281:	75 a8                	jne    c001722b <RTC::completeRTCRefresh()+0x147>
c0017283:	55                   	push   ebp
c0017284:	55                   	push   ebp
c0017285:	6a 0b                	push   0xb
c0017287:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001728d:	e8 ce fc fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017292:	83 c4 10             	add    esp,0x10
c0017295:	89 c5                	mov    ebp,eax
c0017297:	a8 04                	test   al,0x4
c0017299:	75 7d                	jne    c0017318 <RTC::completeRTCRefresh()+0x234>
c001729b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001729f:	b1 0a                	mov    cl,0xa
c00172a1:	c0 e8 04             	shr    al,0x4
c00172a4:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c00172a8:	0f af c1             	imul   eax,ecx
c00172ab:	c1 ef 04             	shr    edi,0x4
c00172ae:	83 e2 0f             	and    edx,0xf
c00172b1:	01 d0                	add    eax,edx
c00172b3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00172b7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00172bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172bf:	c0 e8 04             	shr    al,0x4
c00172c2:	83 e2 0f             	and    edx,0xf
c00172c5:	0f af c1             	imul   eax,ecx
c00172c8:	01 d0                	add    eax,edx
c00172ca:	88 da                	mov    dl,bl
c00172cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00172d0:	88 d8                	mov    al,bl
c00172d2:	c0 e8 04             	shr    al,0x4
c00172d5:	83 e2 0f             	and    edx,0xf
c00172d8:	83 e0 07             	and    eax,0x7
c00172db:	83 e3 80             	and    ebx,0xffffff80
c00172de:	0f af c1             	imul   eax,ecx
c00172e1:	01 d0                	add    eax,edx
c00172e3:	89 f2                	mov    edx,esi
c00172e5:	09 c3                	or     ebx,eax
c00172e7:	89 f0                	mov    eax,esi
c00172e9:	c0 e8 04             	shr    al,0x4
c00172ec:	83 e2 0f             	and    edx,0xf
c00172ef:	0f af c1             	imul   eax,ecx
c00172f2:	6b ff 0a             	imul   edi,edi,0xa
c00172f5:	8d 34 02             	lea    esi,[edx+eax*1]
c00172f8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00172fc:	c0 e8 04             	shr    al,0x4
c00172ff:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017303:	0f af c1             	imul   eax,ecx
c0017306:	83 e2 0f             	and    edx,0xf
c0017309:	01 d0                	add    eax,edx
c001730b:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001730f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017313:	83 e0 0f             	and    eax,0xf
c0017316:	01 c7                	add    edi,eax
c0017318:	83 e5 02             	and    ebp,0x2
c001731b:	75 14                	jne    c0017331 <RTC::completeRTCRefresh()+0x24d>
c001731d:	84 db                	test   bl,bl
c001731f:	79 10                	jns    c0017331 <RTC::completeRTCRefresh()+0x24d>
c0017321:	83 e3 7f             	and    ebx,0x7f
c0017324:	b9 18 00 00 00       	mov    ecx,0x18
c0017329:	8d 43 0c             	lea    eax,[ebx+0xc]
c001732c:	99                   	cdq    
c001732d:	f7 f9                	idiv   ecx
c001732f:	88 d3                	mov    bl,dl
c0017331:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0017337:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001733d:	77 06                	ja     c0017345 <RTC::completeRTCRefresh()+0x261>
c001733f:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0017345:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001734a:	31 d2                	xor    edx,edx
c001734c:	31 c0                	xor    eax,eax
c001734e:	c1 e1 10             	shl    ecx,0x10
c0017351:	89 d7                	mov    edi,edx
c0017353:	c1 e5 10             	shl    ebp,0x10
c0017356:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001735c:	09 cf                	or     edi,ecx
c001735e:	89 fa                	mov    edx,edi
c0017360:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0017364:	88 da                	mov    dl,bl
c0017366:	89 f3                	mov    ebx,esi
c0017368:	88 d8                	mov    al,bl
c001736a:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c001736e:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0017372:	0f b7 c8             	movzx  ecx,ax
c0017375:	09 e9                	or     ecx,ebp
c0017377:	89 c8                	mov    eax,ecx
c0017379:	51                   	push   ecx
c001737a:	51                   	push   ecx
c001737b:	52                   	push   edx
c001737c:	50                   	push   eax
c001737d:	e8 05 43 ff ff       	call   c000b687 <datetimeToSeconds(datetime_t)>
c0017382:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0017386:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001738c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017392:	83 c4 3c             	add    esp,0x3c
c0017395:	5b                   	pop    ebx
c0017396:	5e                   	pop    esi
c0017397:	5f                   	pop    edi
c0017398:	5d                   	pop    ebp
c0017399:	c3                   	ret    

c001739a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001739a:	55                   	push   ebp
c001739b:	57                   	push   edi
c001739c:	56                   	push   esi
c001739d:	53                   	push   ebx
c001739e:	83 ec 30             	sub    esp,0x30
c00173a1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00173a5:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00173a9:	6a 00                	push   0x0
c00173ab:	6a 00                	push   0x0
c00173ad:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173b3:	e8 be fc fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173b8:	83 c4 0c             	add    esp,0xc
c00173bb:	6a 00                	push   0x0
c00173bd:	6a 02                	push   0x2
c00173bf:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173c5:	e8 ac fc fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173ca:	89 f8                	mov    eax,edi
c00173cc:	0f b6 c4             	movzx  eax,ah
c00173cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173d3:	89 f0                	mov    eax,esi
c00173d5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00173d9:	89 f0                	mov    eax,esi
c00173db:	0f b6 c4             	movzx  eax,ah
c00173de:	89 f9                	mov    ecx,edi
c00173e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173e4:	c1 e9 10             	shr    ecx,0x10
c00173e7:	89 f0                	mov    eax,esi
c00173e9:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00173ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00173f1:	c1 e8 10             	shr    eax,0x10
c00173f4:	b9 64 00 00 00       	mov    ecx,0x64
c00173f9:	31 d2                	xor    edx,edx
c00173fb:	66 f7 f1             	div    cx
c00173fe:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0017403:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0017408:	59                   	pop    ecx
c0017409:	5b                   	pop    ebx
c001740a:	89 fb                	mov    ebx,edi
c001740c:	6a 0b                	push   0xb
c001740e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017414:	e8 47 fb fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017419:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0017425:	75 74                	jne    c001749b <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0017427:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001742b:	b2 0a                	mov    dl,0xa
c001742d:	0f b6 c1             	movzx  eax,cl
c0017430:	f6 f2                	div    dl
c0017432:	88 c3                	mov    bl,al
c0017434:	88 e0                	mov    al,ah
c0017436:	c1 e3 04             	shl    ebx,0x4
c0017439:	09 c3                	or     ebx,eax
c001743b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017440:	f6 f2                	div    dl
c0017442:	88 c1                	mov    cl,al
c0017444:	88 e0                	mov    al,ah
c0017446:	c1 e1 04             	shl    ecx,0x4
c0017449:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001744d:	09 c1                	or     ecx,eax
c001744f:	89 f8                	mov    eax,edi
c0017451:	0f b6 c0             	movzx  eax,al
c0017454:	f6 f2                	div    dl
c0017456:	88 c3                	mov    bl,al
c0017458:	88 e0                	mov    al,ah
c001745a:	c1 e3 04             	shl    ebx,0x4
c001745d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017461:	09 c3                	or     ebx,eax
c0017463:	89 f0                	mov    eax,esi
c0017465:	0f b6 c0             	movzx  eax,al
c0017468:	f6 f2                	div    dl
c001746a:	88 c1                	mov    cl,al
c001746c:	88 e0                	mov    al,ah
c001746e:	c1 e1 04             	shl    ecx,0x4
c0017471:	09 c1                	or     ecx,eax
c0017473:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017478:	f6 f2                	div    dl
c001747a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001747e:	88 c1                	mov    cl,al
c0017480:	c1 e1 04             	shl    ecx,0x4
c0017483:	88 e0                	mov    al,ah
c0017485:	09 c1                	or     ecx,eax
c0017487:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001748c:	f6 f2                	div    dl
c001748e:	89 c5                	mov    ebp,eax
c0017490:	88 e0                	mov    al,ah
c0017492:	c1 e5 04             	shl    ebp,0x4
c0017495:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017499:	09 c5                	or     ebp,eax
c001749b:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00174a0:	75 17                	jne    c00174b9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00174a2:	80 fb 0b             	cmp    bl,0xb
c00174a5:	76 0c                	jbe    c00174b3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00174a7:	80 eb 0c             	sub    bl,0xc
c00174aa:	75 02                	jne    c00174ae <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00174ac:	b3 0c                	mov    bl,0xc
c00174ae:	83 cb 80             	or     ebx,0xffffff80
c00174b1:	eb 06                	jmp    c00174b9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00174b3:	84 db                	test   bl,bl
c00174b5:	75 02                	jne    c00174b9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00174b7:	b3 0c                	mov    bl,0xc
c00174b9:	50                   	push   eax
c00174ba:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00174bf:	50                   	push   eax
c00174c0:	6a 00                	push   0x0
c00174c2:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174c8:	e8 a9 fb fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174cd:	83 c4 0c             	add    esp,0xc
c00174d0:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00174d5:	50                   	push   eax
c00174d6:	6a 02                	push   0x2
c00174d8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174de:	e8 93 fb fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174e3:	83 c4 0c             	add    esp,0xc
c00174e6:	0f b6 db             	movzx  ebx,bl
c00174e9:	53                   	push   ebx
c00174ea:	6a 04                	push   0x4
c00174ec:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174f2:	e8 7f fb fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174f7:	83 c4 0c             	add    esp,0xc
c00174fa:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00174ff:	50                   	push   eax
c0017500:	6a 07                	push   0x7
c0017502:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017508:	e8 69 fb fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001750d:	83 c4 0c             	add    esp,0xc
c0017510:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0017515:	50                   	push   eax
c0017516:	6a 08                	push   0x8
c0017518:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001751e:	e8 53 fb fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017523:	83 c4 0c             	add    esp,0xc
c0017526:	89 e8                	mov    eax,ebp
c0017528:	0f b6 e8             	movzx  ebp,al
c001752b:	55                   	push   ebp
c001752c:	6a 09                	push   0x9
c001752e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017534:	e8 3d fb fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017539:	5a                   	pop    edx
c001753a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001753e:	e8 a1 fb ff ff       	call   c00170e4 <RTC::completeRTCRefresh()>
c0017543:	83 c4 3c             	add    esp,0x3c
c0017546:	5b                   	pop    ebx
c0017547:	b0 01                	mov    al,0x1
c0017549:	5e                   	pop    esi
c001754a:	5f                   	pop    edi
c001754b:	5d                   	pop    ebp
c001754c:	c3                   	ret    

c001754d <rtcIRQHandler(regs*, void*)>:
c001754d:	53                   	push   ebx
c001754e:	83 ec 10             	sub    esp,0x10
c0017551:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017555:	6a 0c                	push   0xc
c0017557:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001755d:	e8 fe f9 fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017562:	83 c4 10             	add    esp,0x10
c0017565:	84 c0                	test   al,al
c0017567:	79 24                	jns    c001758d <rtcIRQHandler(regs*, void*)+0x40>
c0017569:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017570:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017577:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c001757e:	75 0d                	jne    c001758d <rtcIRQHandler(regs*, void*)+0x40>
c0017580:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017584:	83 c4 08             	add    esp,0x8
c0017587:	5b                   	pop    ebx
c0017588:	e9 57 fb ff ff       	jmp    c00170e4 <RTC::completeRTCRefresh()>
c001758d:	83 c4 08             	add    esp,0x8
c0017590:	5b                   	pop    ebx
c0017591:	c3                   	ret    

c0017592 <RTC::RTC()>:
c0017592:	83 ec 1c             	sub    esp,0x1c
c0017595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017599:	83 ec 08             	sub    esp,0x8
c001759c:	68 af 0e 02 c0       	push   0xc0020eaf
c00175a1:	50                   	push   eax
c00175a2:	e8 bb 3f ff ff       	call   c000b562 <Clock::Clock(char const*)>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	ba cc 0e 02 c0       	mov    edx,0xc0020ecc
c00175af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b3:	89 10                	mov    DWORD PTR [eax],edx
c00175b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b9:	83 ec 0c             	sub    esp,0xc
c00175bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175c0:	6a 01                	push   0x1
c00175c2:	68 4d 75 01 c0       	push   0xc001754d
c00175c7:	6a 08                	push   0x8
c00175c9:	50                   	push   eax
c00175ca:	e8 79 44 ff ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00175cf:	83 c4 20             	add    esp,0x20
c00175d2:	89 c2                	mov    edx,eax
c00175d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175d8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00175de:	fa                   	cli    
c00175df:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00175e4:	40                   	inc    eax
c00175e5:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00175ea:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00175ef:	83 ec 08             	sub    esp,0x8
c00175f2:	6a 0b                	push   0xb
c00175f4:	50                   	push   eax
c00175f5:	e8 66 f9 fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017601:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017606:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001760a:	83 ca 10             	or     edx,0x10
c001760d:	81 e2 ff 00 00 00    	and    edx,0xff
c0017613:	83 ec 04             	sub    esp,0x4
c0017616:	52                   	push   edx
c0017617:	6a 0b                	push   0xb
c0017619:	50                   	push   eax
c001761a:	e8 57 fa fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001761f:	83 c4 10             	add    esp,0x10
c0017622:	83 ec 0c             	sub    esp,0xc
c0017625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017629:	e8 b6 fa ff ff       	call   c00170e4 <RTC::completeRTCRefresh()>
c001762e:	83 c4 10             	add    esp,0x10
c0017631:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017636:	48                   	dec    eax
c0017637:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001763c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017641:	85 c0                	test   eax,eax
c0017643:	75 01                	jne    c0017646 <RTC::RTC()+0xb4>
c0017645:	fb                   	sti    
c0017646:	90                   	nop
c0017647:	83 c4 1c             	add    esp,0x1c
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <HalConsoleScroll(int, int)>:
c001764c:	83 ec 10             	sub    esp,0x10
c001764f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017657:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001765f:	90                   	nop
c0017660:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017665:	0f 8f e1 00 00 00    	jg     c001774c <HalConsoleScroll(int, int)+0x100>
c001766b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017673:	90                   	nop
c0017674:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001767c:	0f 8f be 00 00 00    	jg     c0017740 <HalConsoleScroll(int, int)+0xf4>
c0017682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017686:	89 d0                	mov    eax,edx
c0017688:	c1 e0 02             	shl    eax,0x2
c001768b:	01 d0                	add    eax,edx
c001768d:	c1 e0 05             	shl    eax,0x5
c0017690:	89 c2                	mov    edx,eax
c0017692:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017696:	01 d0                	add    eax,edx
c0017698:	89 c2                	mov    edx,eax
c001769a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001769e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00176a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176a5:	89 d0                	mov    eax,edx
c00176a7:	c1 e0 02             	shl    eax,0x2
c00176aa:	01 d0                	add    eax,edx
c00176ac:	c1 e0 05             	shl    eax,0x5
c00176af:	89 c2                	mov    edx,eax
c00176b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176b5:	01 d0                	add    eax,edx
c00176b7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00176bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176c1:	01 c2                	add    edx,eax
c00176c3:	8a 01                	mov    al,BYTE PTR [ecx]
c00176c5:	88 02                	mov    BYTE PTR [edx],al
c00176c7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00176cc:	75 66                	jne    c0017734 <HalConsoleScroll(int, int)+0xe8>
c00176ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176d2:	83 e0 01             	and    eax,0x1
c00176d5:	74 39                	je     c0017710 <HalConsoleScroll(int, int)+0xc4>
c00176d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176db:	83 e0 0f             	and    eax,0xf
c00176de:	88 c2                	mov    dl,al
c00176e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176e4:	c1 e0 04             	shl    eax,0x4
c00176e7:	88 d1                	mov    cl,dl
c00176e9:	09 c1                	or     ecx,eax
c00176eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176ef:	89 d0                	mov    eax,edx
c00176f1:	c1 e0 02             	shl    eax,0x2
c00176f4:	01 d0                	add    eax,edx
c00176f6:	c1 e0 05             	shl    eax,0x5
c00176f9:	89 c2                	mov    edx,eax
c00176fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176ff:	01 d0                	add    eax,edx
c0017701:	89 c2                	mov    edx,eax
c0017703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017707:	01 d0                	add    eax,edx
c0017709:	88 ca                	mov    dl,cl
c001770b:	88 10                	mov    BYTE PTR [eax],dl
c001770d:	eb 25                	jmp    c0017734 <HalConsoleScroll(int, int)+0xe8>
c001770f:	90                   	nop
c0017710:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017714:	89 d0                	mov    eax,edx
c0017716:	c1 e0 02             	shl    eax,0x2
c0017719:	01 d0                	add    eax,edx
c001771b:	c1 e0 05             	shl    eax,0x5
c001771e:	89 c2                	mov    edx,eax
c0017720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017724:	01 d0                	add    eax,edx
c0017726:	89 c2                	mov    edx,eax
c0017728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001772c:	01 d0                	add    eax,edx
c001772e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017731:	8d 76 00             	lea    esi,[esi+0x0]
c0017734:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017738:	e9 37 ff ff ff       	jmp    c0017674 <HalConsoleScroll(int, int)+0x28>
c001773d:	8d 76 00             	lea    esi,[esi+0x0]
c0017740:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017744:	e9 17 ff ff ff       	jmp    c0017660 <HalConsoleScroll(int, int)+0x14>
c0017749:	8d 76 00             	lea    esi,[esi+0x0]
c001774c:	90                   	nop
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	c3                   	ret    
c0017751:	8d 76 00             	lea    esi,[esi+0x0]

c0017754 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017754:	83 ec 14             	sub    esp,0x14
c0017757:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001775b:	88 04 24             	mov    BYTE PTR [esp],al
c001775e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017761:	25 ff 00 00 00       	and    eax,0xff
c0017766:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001776a:	89 d1                	mov    ecx,edx
c001776c:	83 e1 0f             	and    ecx,0xf
c001776f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017773:	c1 e2 04             	shl    edx,0x4
c0017776:	81 e2 ff 00 00 00    	and    edx,0xff
c001777c:	09 ca                	or     edx,ecx
c001777e:	c1 e2 08             	shl    edx,0x8
c0017781:	09 d0                	or     eax,edx
c0017783:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017788:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017790:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017794:	89 d0                	mov    eax,edx
c0017796:	c1 e0 02             	shl    eax,0x2
c0017799:	01 d0                	add    eax,edx
c001779b:	c1 e0 04             	shl    eax,0x4
c001779e:	89 c2                	mov    edx,eax
c00177a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177a4:	01 d0                	add    eax,edx
c00177a6:	01 c0                	add    eax,eax
c00177a8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00177ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177b0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00177b5:	66 89 02             	mov    WORD PTR [edx],ax
c00177b8:	90                   	nop
c00177b9:	83 c4 14             	add    esp,0x14
c00177bc:	c3                   	ret    
c00177bd:	8d 76 00             	lea    esi,[esi+0x0]

c00177c0 <HalConsoleCursorUpdate(int, int)>:
c00177c0:	83 ec 20             	sub    esp,0x20
c00177c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c7:	89 c2                	mov    edx,eax
c00177c9:	89 d0                	mov    eax,edx
c00177cb:	c1 e0 02             	shl    eax,0x2
c00177ce:	01 d0                	add    eax,edx
c00177d0:	c1 e0 04             	shl    eax,0x4
c00177d3:	89 c2                	mov    edx,eax
c00177d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177d9:	01 d0                	add    eax,edx
c00177db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00177e0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00177e7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00177ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00177f4:	ee                   	out    dx,al
c00177f5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00177fa:	25 ff 00 00 00       	and    eax,0xff
c00177ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017806:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001780a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001780e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017812:	ee                   	out    dx,al
c0017813:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001781a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001781f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017823:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017827:	ee                   	out    dx,al
c0017828:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001782d:	66 c1 e8 08          	shr    ax,0x8
c0017831:	25 ff 00 00 00       	and    eax,0xff
c0017836:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001783d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017841:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017845:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017849:	ee                   	out    dx,al
c001784a:	90                   	nop
c001784b:	83 c4 20             	add    esp,0x20
c001784e:	c3                   	ret    
c001784f:	90                   	nop

c0017850 <FAT::getName()>:
c0017850:	b8 00 0f 02 c0       	mov    eax,0xc0020f00
c0017855:	c3                   	ret    
c0017856:	66 90                	xchg   ax,ax

c0017858 <FAT::tell(void*, unsigned long long*)>:
c0017858:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001785d:	75 09                	jne    c0017868 <FAT::tell(void*, unsigned long long*)+0x10>
c001785f:	b8 04 00 00 00       	mov    eax,0x4
c0017864:	c3                   	ret    
c0017865:	8d 76 00             	lea    esi,[esi+0x0]
c0017868:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001786d:	75 09                	jne    c0017878 <FAT::tell(void*, unsigned long long*)+0x20>
c001786f:	b8 04 00 00 00       	mov    eax,0x4
c0017874:	c3                   	ret    
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001787c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001787f:	ba 00 00 00 00       	mov    edx,0x0
c0017884:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017888:	89 01                	mov    DWORD PTR [ecx],eax
c001788a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001788d:	b8 00 00 00 00       	mov    eax,0x0
c0017892:	c3                   	ret    
c0017893:	90                   	nop

c0017894 <FAT::stat(void*, unsigned long long*)>:
c0017894:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017899:	75 09                	jne    c00178a4 <FAT::stat(void*, unsigned long long*)+0x10>
c001789b:	b8 04 00 00 00       	mov    eax,0x4
c00178a0:	c3                   	ret    
c00178a1:	8d 76 00             	lea    esi,[esi+0x0]
c00178a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00178a9:	75 09                	jne    c00178b4 <FAT::stat(void*, unsigned long long*)+0x20>
c00178ab:	b8 04 00 00 00       	mov    eax,0x4
c00178b0:	c3                   	ret    
c00178b1:	8d 76 00             	lea    esi,[esi+0x0]
c00178b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178bb:	ba 00 00 00 00       	mov    edx,0x0
c00178c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178c4:	89 01                	mov    DWORD PTR [ecx],eax
c00178c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00178c9:	b8 00 00 00 00       	mov    eax,0x0
c00178ce:	c3                   	ret    
c00178cf:	90                   	nop

c00178d0 <FAT::~FAT()>:
c00178d0:	83 ec 0c             	sub    esp,0xc
c00178d3:	ba 4c 0f 02 c0       	mov    edx,0xc0020f4c
c00178d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dc:	89 10                	mov    DWORD PTR [eax],edx
c00178de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	50                   	push   eax
c00178e6:	e8 bd 30 ff ff       	call   c000a9a8 <Filesystem::~Filesystem()>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	90                   	nop
c00178ef:	83 c4 0c             	add    esp,0xc
c00178f2:	c3                   	ret    
c00178f3:	90                   	nop

c00178f4 <FAT::~FAT()>:
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	83 ec 0c             	sub    esp,0xc
c00178fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178fe:	e8 cd ff ff ff       	call   c00178d0 <FAT::~FAT()>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	83 ec 08             	sub    esp,0x8
c0017909:	6a 08                	push   0x8
c001790b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001790f:	e8 59 2c ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c0017914:	83 c4 10             	add    esp,0x10
c0017917:	83 c4 0c             	add    esp,0xc
c001791a:	c3                   	ret    
c001791b:	90                   	nop

c001791c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001791c:	83 ec 1c             	sub    esp,0x1c
c001791f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017926:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001792b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001792f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017936:	83 f8 ff             	cmp    eax,0xffffffff
c0017939:	75 35                	jne    c0017970 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001793b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001793f:	88 c2                	mov    dl,al
c0017941:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017946:	01 d0                	add    eax,edx
c0017948:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001794c:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017952:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017956:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c001795d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017962:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017966:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c001796d:	eb 19                	jmp    c0017988 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001796f:	90                   	nop
c0017970:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017974:	88 c2                	mov    dl,al
c0017976:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001797a:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017981:	01 d0                	add    eax,edx
c0017983:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017987:	90                   	nop
c0017988:	83 ec 04             	sub    esp,0x4
c001798b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001798f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017993:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017997:	50                   	push   eax
c0017998:	e8 a4 d4 fe ff       	call   c0004e41 <f_getlabel>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00179a9:	75 09                	jne    c00179b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00179ab:	b8 00 00 00 00       	mov    eax,0x0
c00179b0:	eb 0a                	jmp    c00179bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00179b2:	66 90                	xchg   ax,ax
c00179b4:	b8 01 00 00 00       	mov    eax,0x1
c00179b9:	8d 76 00             	lea    esi,[esi+0x0]
c00179bc:	83 c4 1c             	add    esp,0x1c
c00179bf:	c3                   	ret    

c00179c0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00179c0:	57                   	push   edi
c00179c1:	83 ec 58             	sub    esp,0x58
c00179c4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00179cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00179d0:	b8 00 00 00 00       	mov    eax,0x0
c00179d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00179da:	fc                   	cld    
c00179db:	89 d7                	mov    edi,edx
c00179dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00179df:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00179e3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00179ea:	83 f8 ff             	cmp    eax,0xffffffff
c00179ed:	75 35                	jne    c0017a24 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00179ef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00179f3:	88 c2                	mov    dl,al
c00179f5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00179fa:	01 d0                	add    eax,edx
c00179fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a00:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017a06:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017a0a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017a11:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a16:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017a1a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017a21:	eb 19                	jmp    c0017a3c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017a23:	90                   	nop
c0017a24:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017a28:	88 c2                	mov    dl,al
c0017a2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017a2e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a35:	01 d0                	add    eax,edx
c0017a37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a3b:	90                   	nop
c0017a3c:	83 ec 08             	sub    esp,0x8
c0017a3f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017a43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a47:	50                   	push   eax
c0017a48:	e8 73 8d fe ff       	call   c00007c0 <strcat>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	83 ec 0c             	sub    esp,0xc
c0017a53:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a57:	50                   	push   eax
c0017a58:	e8 3b d5 fe ff       	call   c0004f98 <f_setlabel>
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a64:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017a69:	75 09                	jne    c0017a74 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017a6b:	b8 00 00 00 00       	mov    eax,0x0
c0017a70:	eb 0a                	jmp    c0017a7c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017a72:	66 90                	xchg   ax,ax
c0017a74:	b8 01 00 00 00       	mov    eax,0x1
c0017a79:	8d 76 00             	lea    esi,[esi+0x0]
c0017a7c:	83 c4 58             	add    esp,0x58
c0017a7f:	5f                   	pop    edi
c0017a80:	c3                   	ret    
c0017a81:	90                   	nop
c0017a82:	66 90                	xchg   ax,ax

c0017a84 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017a84:	83 ec 2c             	sub    esp,0x2c
c0017a87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017a8f:	83 ec 08             	sub    esp,0x8
c0017a92:	68 24 0f 02 c0       	push   0xc0020f24
c0017a97:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a9b:	e8 40 8c fe ff       	call   c00006e0 <strcmp>
c0017aa0:	83 c4 10             	add    esp,0x10
c0017aa3:	85 c0                	test   eax,eax
c0017aa5:	0f 94 c0             	sete   al
c0017aa8:	84 c0                	test   al,al
c0017aaa:	74 10                	je     c0017abc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017aac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017ab4:	e9 b3 00 00 00       	jmp    c0017b6c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0017abc:	83 ec 08             	sub    esp,0x8
c0017abf:	68 16 0f 02 c0       	push   0xc0020f16
c0017ac4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ac8:	e8 13 8c fe ff       	call   c00006e0 <strcmp>
c0017acd:	83 c4 10             	add    esp,0x10
c0017ad0:	85 c0                	test   eax,eax
c0017ad2:	0f 94 c0             	sete   al
c0017ad5:	84 c0                	test   al,al
c0017ad7:	74 0f                	je     c0017ae8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017ad9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017ae1:	e9 86 00 00 00       	jmp    c0017b6c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ae6:	66 90                	xchg   ax,ax
c0017ae8:	83 ec 08             	sub    esp,0x8
c0017aeb:	68 1c 0f 02 c0       	push   0xc0020f1c
c0017af0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017af4:	e8 e7 8b fe ff       	call   c00006e0 <strcmp>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	85 c0                	test   eax,eax
c0017afe:	0f 94 c0             	sete   al
c0017b01:	84 c0                	test   al,al
c0017b03:	74 0b                	je     c0017b10 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017b05:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017b0d:	eb 5d                	jmp    c0017b6c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017b0f:	90                   	nop
c0017b10:	83 ec 08             	sub    esp,0x8
c0017b13:	68 dc ec 01 c0       	push   0xc001ecdc
c0017b18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b1c:	e8 bf 8b fe ff       	call   c00006e0 <strcmp>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	85 c0                	test   eax,eax
c0017b26:	0f 94 c0             	sete   al
c0017b29:	84 c0                	test   al,al
c0017b2b:	74 0b                	je     c0017b38 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017b2d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017b35:	eb 35                	jmp    c0017b6c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017b37:	90                   	nop
c0017b38:	83 ec 08             	sub    esp,0x8
c0017b3b:	68 22 0f 02 c0       	push   0xc0020f22
c0017b40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b44:	e8 97 8b fe ff       	call   c00006e0 <strcmp>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	85 c0                	test   eax,eax
c0017b4e:	0f 94 c0             	sete   al
c0017b51:	84 c0                	test   al,al
c0017b53:	74 0b                	je     c0017b60 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017b55:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017b5d:	eb 0d                	jmp    c0017b6c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017b5f:	90                   	nop
c0017b60:	b8 08 00 00 00       	mov    eax,0x8
c0017b65:	e9 ea 00 00 00       	jmp    c0017c54 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017b6a:	66 90                	xchg   ax,ax
c0017b6c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017b73:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017b78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b7c:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017b83:	83 f8 ff             	cmp    eax,0xffffffff
c0017b86:	75 34                	jne    c0017bbc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0017b88:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017b8c:	88 c2                	mov    dl,al
c0017b8e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b93:	01 d0                	add    eax,edx
c0017b95:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017b99:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017b9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ba3:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017baa:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017baf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017bb3:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017bba:	eb 18                	jmp    c0017bd4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017bbc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017bc0:	88 c2                	mov    dl,al
c0017bc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017bc6:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017bcd:	01 d0                	add    eax,edx
c0017bcf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017bd3:	90                   	nop
c0017bd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bd8:	88 04 24             	mov    BYTE PTR [esp],al
c0017bdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017be3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017beb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017bf0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017bf8:	83 ec 0c             	sub    esp,0xc
c0017bfb:	68 00 20 00 00       	push   0x2000
c0017c00:	e8 6e fc fe ff       	call   c0007873 <malloc>
c0017c05:	83 c4 10             	add    esp,0x10
c0017c08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c0c:	68 00 20 00 00       	push   0x2000
c0017c11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c15:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c19:	50                   	push   eax
c0017c1a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017c1e:	50                   	push   eax
c0017c1f:	e8 64 d6 fe ff       	call   c0005288 <f_mkfs>
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017c30:	75 0a                	jne    c0017c3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017c32:	b8 00 00 00 00       	mov    eax,0x0
c0017c37:	eb 1b                	jmp    c0017c54 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017c39:	8d 76 00             	lea    esi,[esi+0x0]
c0017c3c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017c41:	75 09                	jne    c0017c4c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017c43:	b8 09 00 00 00       	mov    eax,0x9
c0017c48:	eb 0a                	jmp    c0017c54 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017c4a:	66 90                	xchg   ax,ax
c0017c4c:	b8 01 00 00 00       	mov    eax,0x1
c0017c51:	8d 76 00             	lea    esi,[esi+0x0]
c0017c54:	83 c4 2c             	add    esp,0x2c
c0017c57:	c3                   	ret    

c0017c58 <FAT::tryMount(LogicalDisk*, int)>:
c0017c58:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017c5e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c63:	83 f8 14             	cmp    eax,0x14
c0017c66:	75 18                	jne    c0017c80 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	68 28 0f 02 c0       	push   0xc0020f28
c0017c70:	e8 a2 87 ff ff       	call   c0010417 <KePanic(char const*)>
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	b0 00                	mov    al,0x0
c0017c7a:	e9 e9 01 00 00       	jmp    c0017e68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017c7f:	90                   	nop
c0017c80:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017c87:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017c8d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017c93:	3d 00 02 00 00       	cmp    eax,0x200
c0017c98:	74 0a                	je     c0017ca4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017c9a:	b0 00                	mov    al,0x0
c0017c9c:	e9 c7 01 00 00       	jmp    c0017e68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ca4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017cac:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017cb3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017cba:	83 f8 ff             	cmp    eax,0xffffffff
c0017cbd:	74 09                	je     c0017cc8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017cbf:	b0 01                	mov    al,0x1
c0017cc1:	e9 a2 01 00 00       	jmp    c0017e68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017cc6:	66 90                	xchg   ax,ax
c0017cc8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017cd2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017cda:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017ce1:	88 c2                	mov    dl,al
c0017ce3:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017ce8:	01 d0                	add    eax,edx
c0017cea:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017cf1:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017cf7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017cfe:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017d05:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017d0a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017d11:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017d18:	83 ec 0c             	sub    esp,0xc
c0017d1b:	68 34 02 00 00       	push   0x234
c0017d20:	e8 4e fb fe ff       	call   c0007873 <malloc>
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017d2f:	83 ec 04             	sub    esp,0x4
c0017d32:	6a 00                	push   0x0
c0017d34:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017d3b:	50                   	push   eax
c0017d3c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017d43:	e8 62 bd fe ff       	call   c0003aaa <f_mount>
c0017d48:	83 c4 10             	add    esp,0x10
c0017d4b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017d52:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0017d5a:	74 1c                	je     c0017d78 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017d5c:	83 ec 0c             	sub    esp,0xc
c0017d5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017d66:	e8 28 fb fe ff       	call   c0007893 <rfree>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	b0 00                	mov    al,0x0
c0017d70:	e9 f3 00 00 00       	jmp    c0017e68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017d75:	8d 76 00             	lea    esi,[esi+0x0]
c0017d78:	83 ec 04             	sub    esp,0x4
c0017d7b:	68 00 01 00 00       	push   0x100
c0017d80:	6a 00                	push   0x0
c0017d82:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017d89:	50                   	push   eax
c0017d8a:	e8 31 87 fe ff       	call   c00004c0 <memset>
c0017d8f:	83 c4 10             	add    esp,0x10
c0017d92:	83 ec 08             	sub    esp,0x8
c0017d95:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017d9c:	50                   	push   eax
c0017d9d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017da4:	50                   	push   eax
c0017da5:	e8 16 8a fe ff       	call   c00007c0 <strcat>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	83 ec 08             	sub    esp,0x8
c0017db0:	68 36 0f 02 c0       	push   0xc0020f36
c0017db5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017dbc:	50                   	push   eax
c0017dbd:	e8 fe 89 fe ff       	call   c00007c0 <strcat>
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	83 ec 04             	sub    esp,0x4
c0017dc8:	6a 01                	push   0x1
c0017dca:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017dd1:	50                   	push   eax
c0017dd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017dd6:	50                   	push   eax
c0017dd7:	e8 30 bd fe ff       	call   c0003b0c <f_open>
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017de6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017ded:	85 c0                	test   eax,eax
c0017def:	74 0b                	je     c0017dfc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017df1:	78 31                	js     c0017e24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017df3:	83 e8 04             	sub    eax,0x4
c0017df6:	83 f8 01             	cmp    eax,0x1
c0017df9:	77 29                	ja     c0017e24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017dfb:	90                   	nop
c0017dfc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017e0b:	50                   	push   eax
c0017e0c:	e8 ae c4 fe ff       	call   c00042bf <f_close>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	90                   	nop
c0017e15:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017e1d:	74 41                	je     c0017e60 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017e1f:	eb 33                	jmp    c0017e54 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017e21:	8d 76 00             	lea    esi,[esi+0x0]
c0017e24:	83 ec 0c             	sub    esp,0xc
c0017e27:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017e2e:	e8 60 fa fe ff       	call   c0007893 <rfree>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	83 ec 04             	sub    esp,0x4
c0017e39:	6a 00                	push   0x0
c0017e3b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017e42:	50                   	push   eax
c0017e43:	6a 00                	push   0x0
c0017e45:	e8 60 bc fe ff       	call   c0003aaa <f_mount>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	b0 00                	mov    al,0x0
c0017e4f:	eb 17                	jmp    c0017e68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017e51:	8d 76 00             	lea    esi,[esi+0x0]
c0017e54:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017e59:	40                   	inc    eax
c0017e5a:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017e5f:	90                   	nop
c0017e60:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017e67:	90                   	nop
c0017e68:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017e6e:	c3                   	ret    
c0017e6f:	90                   	nop

c0017e70 <FAT::allocateSwapfile(char const*, int)>:
c0017e70:	55                   	push   ebp
c0017e71:	57                   	push   edi
c0017e72:	56                   	push   esi
c0017e73:	53                   	push   ebx
c0017e74:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017e7a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017e85:	83 ec 0c             	sub    esp,0xc
c0017e88:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017e8f:	e8 df f9 fe ff       	call   c0007873 <malloc>
c0017e94:	83 c4 10             	add    esp,0x10
c0017e97:	89 c7                	mov    edi,eax
c0017e99:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017e9e:	83 ec 04             	sub    esp,0x4
c0017ea1:	50                   	push   eax
c0017ea2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017ea9:	57                   	push   edi
c0017eaa:	e8 29 2d ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0017eaf:	83 c4 10             	add    esp,0x10
c0017eb2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017eb9:	83 ec 04             	sub    esp,0x4
c0017ebc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017ec0:	50                   	push   eax
c0017ec1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017ec5:	50                   	push   eax
c0017ec6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017ecd:	e8 72 30 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017edc:	c1 e0 14             	shl    eax,0x14
c0017edf:	89 c7                	mov    edi,eax
c0017ee1:	89 c5                	mov    ebp,eax
c0017ee3:	c1 fd 1f             	sar    ebp,0x1f
c0017ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017eee:	89 f9                	mov    ecx,edi
c0017ef0:	31 c1                	xor    ecx,eax
c0017ef2:	89 cb                	mov    ebx,ecx
c0017ef4:	89 e9                	mov    ecx,ebp
c0017ef6:	31 d1                	xor    ecx,edx
c0017ef8:	89 ce                	mov    esi,ecx
c0017efa:	89 f0                	mov    eax,esi
c0017efc:	09 d8                	or     eax,ebx
c0017efe:	0f 84 9c 00 00 00    	je     c0017fa0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017f04:	83 ec 0c             	sub    esp,0xc
c0017f07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f0e:	e8 fd 2e ff ff       	call   c000ae10 <File::unlink()>
c0017f13:	83 c4 10             	add    esp,0x10
c0017f16:	83 ec 08             	sub    esp,0x8
c0017f19:	6a 12                	push   0x12
c0017f1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f22:	e8 71 2d ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017f31:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017f37:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017f3e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017f45:	c1 e0 14             	shl    eax,0x14
c0017f48:	83 ec 04             	sub    esp,0x4
c0017f4b:	6a 01                	push   0x1
c0017f4d:	50                   	push   eax
c0017f4e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017f55:	e8 ce d1 fe ff       	call   c0005128 <f_expand>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017f64:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f66:	83 c0 10             	add    eax,0x10
c0017f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f6b:	83 ec 0c             	sub    esp,0xc
c0017f6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f72:	52                   	push   edx
c0017f73:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017f77:	52                   	push   edx
c0017f78:	6a 00                	push   0x0
c0017f7a:	68 00 04 00 00       	push   0x400
c0017f7f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017f86:	ff d0                	call   eax
c0017f88:	83 c4 20             	add    esp,0x20
c0017f8b:	83 ec 0c             	sub    esp,0xc
c0017f8e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f95:	e8 5c 2d ff ff       	call   c000acf6 <File::close()>
c0017f9a:	83 c4 10             	add    esp,0x10
c0017f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017fa0:	83 ec 08             	sub    esp,0x8
c0017fa3:	6a 01                	push   0x1
c0017fa5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017fac:	e8 e7 2c ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0017fb1:	83 c4 10             	add    esp,0x10
c0017fb4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fbd:	83 c0 0c             	add    eax,0xc
c0017fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fc2:	83 ec 0c             	sub    esp,0xc
c0017fc5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017fc9:	52                   	push   edx
c0017fca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017fce:	52                   	push   edx
c0017fcf:	6a 00                	push   0x0
c0017fd1:	6a 04                	push   0x4
c0017fd3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017fda:	ff d0                	call   eax
c0017fdc:	83 c4 20             	add    esp,0x20
c0017fdf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017fe6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017fec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017ff3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017ffa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017ffd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018004:	83 ec 0c             	sub    esp,0xc
c0018007:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001800e:	e8 e3 2c ff ff       	call   c000acf6 <File::close()>
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001801d:	ba 00 00 00 00       	mov    edx,0x0
c0018022:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018028:	5b                   	pop    ebx
c0018029:	5e                   	pop    esi
c001802a:	5f                   	pop    edi
c001802b:	5d                   	pop    ebp
c001802c:	c3                   	ret    
c001802d:	90                   	nop
c001802e:	66 90                	xchg   ax,ax

c0018030 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018030:	57                   	push   edi
c0018031:	56                   	push   esi
c0018032:	53                   	push   ebx
c0018033:	81 ec 50 02 00 00    	sub    esp,0x250
c0018039:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018041:	74 0d                	je     c0018050 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018043:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001804b:	75 0f                	jne    c001805c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001804d:	8d 76 00             	lea    esi,[esi+0x0]
c0018050:	b8 04 00 00 00       	mov    eax,0x4
c0018055:	e9 36 01 00 00       	jmp    c0018190 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001805a:	66 90                	xchg   ax,ax
c001805c:	83 ec 08             	sub    esp,0x8
c001805f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018066:	50                   	push   eax
c0018067:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001806e:	e8 0f c5 fe ff       	call   c0004582 <f_readdir>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001807d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018084:	83 ec 0c             	sub    esp,0xc
c0018087:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001808e:	83 c0 16             	add    eax,0x16
c0018091:	50                   	push   eax
c0018092:	e8 99 84 fe ff       	call   c0000530 <strlen>
c0018097:	83 c4 10             	add    esp,0x10
c001809a:	ba 00 00 00 00       	mov    edx,0x0
c001809f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00180a7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00180ae:	25 ff 00 00 00       	and    eax,0xff
c00180b3:	83 e0 10             	and    eax,0x10
c00180b6:	74 08                	je     c00180c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00180b8:	b8 02 00 00 00       	mov    eax,0x2
c00180bd:	eb 09                	jmp    c00180c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00180bf:	90                   	nop
c00180c0:	b8 01 00 00 00       	mov    eax,0x1
c00180c5:	8d 76 00             	lea    esi,[esi+0x0]
c00180c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180cc:	83 ec 08             	sub    esp,0x8
c00180cf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00180d6:	83 c0 16             	add    eax,0x16
c00180d9:	50                   	push   eax
c00180da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00180de:	83 c0 10             	add    eax,0x10
c00180e1:	50                   	push   eax
c00180e2:	e8 09 85 fe ff       	call   c00005f0 <strcpy>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00180f1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00180f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180fc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018103:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001810a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018111:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018118:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001811f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018126:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001812d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018134:	89 c6                	mov    esi,eax
c0018136:	89 d7                	mov    edi,edx
c0018138:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001813a:	89 c8                	mov    eax,ecx
c001813c:	89 fa                	mov    edx,edi
c001813e:	89 f3                	mov    ebx,esi
c0018140:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018147:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001814e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018155:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001815c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018162:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018169:	84 c0                	test   al,al
c001816b:	75 07                	jne    c0018174 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001816d:	b8 07 00 00 00       	mov    eax,0x7
c0018172:	eb 1c                	jmp    c0018190 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018174:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001817b:	85 c0                	test   eax,eax
c001817d:	75 09                	jne    c0018188 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001817f:	b8 00 00 00 00       	mov    eax,0x0
c0018184:	eb 0a                	jmp    c0018190 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018186:	66 90                	xchg   ax,ax
c0018188:	b8 01 00 00 00       	mov    eax,0x1
c001818d:	8d 76 00             	lea    esi,[esi+0x0]
c0018190:	81 c4 50 02 00 00    	add    esp,0x250
c0018196:	5b                   	pop    ebx
c0018197:	5e                   	pop    esi
c0018198:	5f                   	pop    edi
c0018199:	c3                   	ret    
c001819a:	66 90                	xchg   ax,ax

c001819c <FAT::read(void*, unsigned long, void*, int*)>:
c001819c:	83 ec 1c             	sub    esp,0x1c
c001819f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00181a4:	74 0a                	je     c00181b0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00181a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00181ab:	75 0b                	jne    c00181b8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00181ad:	8d 76 00             	lea    esi,[esi+0x0]
c00181b0:	b8 04 00 00 00       	mov    eax,0x4
c00181b5:	eb 41                	jmp    c00181f8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00181b7:	90                   	nop
c00181b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181bc:	50                   	push   eax
c00181bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00181c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00181c9:	e8 09 bc fe ff       	call   c0003dd7 <f_read>
c00181ce:	83 c4 10             	add    esp,0x10
c00181d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181d9:	89 c2                	mov    edx,eax
c00181db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181df:	89 10                	mov    DWORD PTR [eax],edx
c00181e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181e5:	85 c0                	test   eax,eax
c00181e7:	75 07                	jne    c00181f0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00181e9:	b8 00 00 00 00       	mov    eax,0x0
c00181ee:	eb 08                	jmp    c00181f8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00181f0:	b8 01 00 00 00       	mov    eax,0x1
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	83 c4 1c             	add    esp,0x1c
c00181fb:	c3                   	ret    

c00181fc <FAT::write(void*, unsigned long, void*, int*)>:
c00181fc:	83 ec 1c             	sub    esp,0x1c
c00181ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018204:	74 0a                	je     c0018210 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018206:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001820b:	75 0b                	jne    c0018218 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001820d:	8d 76 00             	lea    esi,[esi+0x0]
c0018210:	b8 04 00 00 00       	mov    eax,0x4
c0018215:	eb 41                	jmp    c0018258 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018217:	90                   	nop
c0018218:	8d 44 24 08          	lea    eax,[esp+0x8]
c001821c:	50                   	push   eax
c001821d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018221:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018225:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018229:	e8 a8 bd fe ff       	call   c0003fd6 <f_write>
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018235:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018239:	89 c2                	mov    edx,eax
c001823b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001823f:	89 10                	mov    DWORD PTR [eax],edx
c0018241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018245:	85 c0                	test   eax,eax
c0018247:	75 07                	jne    c0018250 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018249:	b8 00 00 00 00       	mov    eax,0x0
c001824e:	eb 08                	jmp    c0018258 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018250:	b8 01 00 00 00       	mov    eax,0x1
c0018255:	8d 76 00             	lea    esi,[esi+0x0]
c0018258:	83 c4 1c             	add    esp,0x1c
c001825b:	c3                   	ret    

c001825c <FAT::close(void*)>:
c001825c:	83 ec 1c             	sub    esp,0x1c
c001825f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018264:	75 0a                	jne    c0018270 <FAT::close(void*)+0x14>
c0018266:	b8 04 00 00 00       	mov    eax,0x4
c001826b:	eb 3f                	jmp    c00182ac <FAT::close(void*)+0x50>
c001826d:	8d 76 00             	lea    esi,[esi+0x0]
c0018270:	83 ec 0c             	sub    esp,0xc
c0018273:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018277:	e8 43 c0 fe ff       	call   c00042bf <f_close>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018283:	83 ec 0c             	sub    esp,0xc
c0018286:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001828a:	e8 f4 f5 fe ff       	call   c0007883 <free>
c001828f:	83 c4 10             	add    esp,0x10
c0018292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018296:	85 c0                	test   eax,eax
c0018298:	75 0a                	jne    c00182a4 <FAT::close(void*)+0x48>
c001829a:	b8 00 00 00 00       	mov    eax,0x0
c001829f:	eb 0b                	jmp    c00182ac <FAT::close(void*)+0x50>
c00182a1:	8d 76 00             	lea    esi,[esi+0x0]
c00182a4:	b8 01 00 00 00       	mov    eax,0x1
c00182a9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ac:	83 c4 1c             	add    esp,0x1c
c00182af:	c3                   	ret    

c00182b0 <FAT::closeDir(void*)>:
c00182b0:	83 ec 1c             	sub    esp,0x1c
c00182b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00182b8:	75 0a                	jne    c00182c4 <FAT::closeDir(void*)+0x14>
c00182ba:	b8 04 00 00 00       	mov    eax,0x4
c00182bf:	eb 3f                	jmp    c0018300 <FAT::closeDir(void*)+0x50>
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	83 ec 0c             	sub    esp,0xc
c00182c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182cb:	e8 90 c2 fe ff       	call   c0004560 <f_closedir>
c00182d0:	83 c4 10             	add    esp,0x10
c00182d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182d7:	83 ec 0c             	sub    esp,0xc
c00182da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182de:	e8 a0 f5 fe ff       	call   c0007883 <free>
c00182e3:	83 c4 10             	add    esp,0x10
c00182e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182ea:	85 c0                	test   eax,eax
c00182ec:	75 0a                	jne    c00182f8 <FAT::closeDir(void*)+0x48>
c00182ee:	b8 00 00 00 00       	mov    eax,0x0
c00182f3:	eb 0b                	jmp    c0018300 <FAT::closeDir(void*)+0x50>
c00182f5:	8d 76 00             	lea    esi,[esi+0x0]
c00182f8:	b8 01 00 00 00       	mov    eax,0x1
c00182fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018300:	83 c4 1c             	add    esp,0x1c
c0018303:	c3                   	ret    

c0018304 <FAT::seek(void*, unsigned long long)>:
c0018304:	83 ec 2c             	sub    esp,0x2c
c0018307:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001830b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001830f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018313:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018317:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001831c:	75 0a                	jne    c0018328 <FAT::seek(void*, unsigned long long)+0x24>
c001831e:	b8 04 00 00 00       	mov    eax,0x4
c0018323:	eb 33                	jmp    c0018358 <FAT::seek(void*, unsigned long long)+0x54>
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001832c:	83 ec 08             	sub    esp,0x8
c001832f:	50                   	push   eax
c0018330:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018334:	e8 b5 bf fe ff       	call   c00042ee <f_lseek>
c0018339:	83 c4 10             	add    esp,0x10
c001833c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018344:	85 c0                	test   eax,eax
c0018346:	75 08                	jne    c0018350 <FAT::seek(void*, unsigned long long)+0x4c>
c0018348:	b8 00 00 00 00       	mov    eax,0x0
c001834d:	eb 09                	jmp    c0018358 <FAT::seek(void*, unsigned long long)+0x54>
c001834f:	90                   	nop
c0018350:	b8 01 00 00 00       	mov    eax,0x1
c0018355:	8d 76 00             	lea    esi,[esi+0x0]
c0018358:	83 c4 2c             	add    esp,0x2c
c001835b:	c3                   	ret    

c001835c <fatWrapperReadDisk>:
c001835c:	53                   	push   ebx
c001835d:	83 ec 18             	sub    esp,0x18
c0018360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018364:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018368:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001836c:	25 ff 00 00 00       	and    eax,0xff
c0018371:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018378:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001837c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018380:	ba 00 00 00 00       	mov    edx,0x0
c0018385:	83 ec 0c             	sub    esp,0xc
c0018388:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001838c:	53                   	push   ebx
c001838d:	52                   	push   edx
c001838e:	50                   	push   eax
c001838f:	51                   	push   ecx
c0018390:	e8 13 4a ff ff       	call   c000cda8 <LogicalDisk::read(unsigned long long, int, void*)>
c0018395:	83 c4 20             	add    esp,0x20
c0018398:	83 c4 18             	add    esp,0x18
c001839b:	5b                   	pop    ebx
c001839c:	c3                   	ret    
c001839d:	8d 76 00             	lea    esi,[esi+0x0]

c00183a0 <fatWrapperWriteDisk>:
c00183a0:	53                   	push   ebx
c00183a1:	83 ec 18             	sub    esp,0x18
c00183a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00183ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183b0:	25 ff 00 00 00       	and    eax,0xff
c00183b5:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00183bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00183c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183c4:	ba 00 00 00 00       	mov    edx,0x0
c00183c9:	83 ec 0c             	sub    esp,0xc
c00183cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00183d0:	53                   	push   ebx
c00183d1:	52                   	push   edx
c00183d2:	50                   	push   eax
c00183d3:	51                   	push   ecx
c00183d4:	e8 3b 4a ff ff       	call   c000ce14 <LogicalDisk::write(unsigned long long, int, void*)>
c00183d9:	83 c4 20             	add    esp,0x20
c00183dc:	83 c4 18             	add    esp,0x18
c00183df:	5b                   	pop    ebx
c00183e0:	c3                   	ret    
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]

c00183e4 <fatWrapperIoctl>:
c00183e4:	53                   	push   ebx
c00183e5:	83 ec 28             	sub    esp,0x28
c00183e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183f0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00183f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183f8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00183fd:	75 35                	jne    c0018434 <fatWrapperIoctl+0x50>
c00183ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018403:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018407:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001840b:	25 ff 00 00 00       	and    eax,0xff
c0018410:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018417:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001841d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018427:	66 89 02             	mov    WORD PTR [edx],ax
c001842a:	b8 00 00 00 00       	mov    eax,0x0
c001842f:	e9 c4 00 00 00       	jmp    c00184f8 <fatWrapperIoctl+0x114>
c0018434:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0018439:	75 75                	jne    c00184b0 <fatWrapperIoctl+0xcc>
c001843b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001843f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018443:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018447:	25 ff 00 00 00       	and    eax,0xff
c001844c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018453:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018459:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001845f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018465:	89 c8                	mov    eax,ecx
c0018467:	89 da                	mov    edx,ebx
c0018469:	0f a4 c2 0a          	shld   edx,eax,0xa
c001846d:	c1 e0 0a             	shl    eax,0xa
c0018470:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018474:	81 e1 ff 00 00 00    	and    ecx,0xff
c001847a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0018481:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018487:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001848d:	89 cb                	mov    ebx,ecx
c001848f:	c1 fb 1f             	sar    ebx,0x1f
c0018492:	53                   	push   ebx
c0018493:	51                   	push   ecx
c0018494:	52                   	push   edx
c0018495:	50                   	push   eax
c0018496:	e8 45 5a 00 00       	call   c001dee0 <__udivdi3>
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	89 c2                	mov    edx,eax
c00184a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184a4:	89 10                	mov    DWORD PTR [eax],edx
c00184a6:	b8 00 00 00 00       	mov    eax,0x0
c00184ab:	eb 4b                	jmp    c00184f8 <fatWrapperIoctl+0x114>
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00184b5:	75 09                	jne    c00184c0 <fatWrapperIoctl+0xdc>
c00184b7:	b8 00 00 00 00       	mov    eax,0x0
c00184bc:	eb 3a                	jmp    c00184f8 <fatWrapperIoctl+0x114>
c00184be:	66 90                	xchg   ax,ax
c00184c0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00184c5:	75 19                	jne    c00184e0 <fatWrapperIoctl+0xfc>
c00184c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00184d9:	b8 00 00 00 00       	mov    eax,0x0
c00184de:	eb 18                	jmp    c00184f8 <fatWrapperIoctl+0x114>
c00184e0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00184e5:	75 09                	jne    c00184f0 <fatWrapperIoctl+0x10c>
c00184e7:	b8 00 00 00 00       	mov    eax,0x0
c00184ec:	eb 0a                	jmp    c00184f8 <fatWrapperIoctl+0x114>
c00184ee:	66 90                	xchg   ax,ax
c00184f0:	b8 04 00 00 00       	mov    eax,0x4
c00184f5:	8d 76 00             	lea    esi,[esi+0x0]
c00184f8:	83 c4 28             	add    esp,0x28
c00184fb:	5b                   	pop    ebx
c00184fc:	c3                   	ret    
c00184fd:	90                   	nop
c00184fe:	66 90                	xchg   ax,ax

c0018500 <FAT::FAT()>:
c0018500:	83 ec 1c             	sub    esp,0x1c
c0018503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018507:	83 ec 0c             	sub    esp,0xc
c001850a:	50                   	push   eax
c001850b:	e8 74 24 ff ff       	call   c000a984 <Filesystem::Filesystem()>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	ba 4c 0f 02 c0       	mov    edx,0xc0020f4c
c0018518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001851c:	89 10                	mov    DWORD PTR [eax],edx
c001851e:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c0018528:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018530:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018535:	7f 15                	jg     c001854c <FAT::FAT()+0x4c>
c0018537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001853b:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c0018546:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001854a:	eb e4                	jmp    c0018530 <FAT::FAT()+0x30>
c001854c:	90                   	nop
c001854d:	83 c4 1c             	add    esp,0x1c
c0018550:	c3                   	ret    
c0018551:	90                   	nop
c0018552:	66 90                	xchg   ax,ax

c0018554 <FAT::fixFilepath(char*)>:
c0018554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018558:	8a 00                	mov    al,BYTE PTR [eax]
c001855a:	3c 40                	cmp    al,0x40
c001855c:	7e 2e                	jle    c001858c <FAT::fixFilepath(char*)+0x38>
c001855e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018562:	8a 00                	mov    al,BYTE PTR [eax]
c0018564:	83 e8 41             	sub    eax,0x41
c0018567:	88 c2                	mov    dl,al
c0018569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001856d:	88 10                	mov    BYTE PTR [eax],dl
c001856f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018573:	8a 00                	mov    al,BYTE PTR [eax]
c0018575:	0f be c0             	movsx  eax,al
c0018578:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001857f:	83 c0 30             	add    eax,0x30
c0018582:	88 c2                	mov    dl,al
c0018584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018588:	88 10                	mov    BYTE PTR [eax],dl
c001858a:	66 90                	xchg   ax,ax
c001858c:	90                   	nop
c001858d:	c3                   	ret    
c001858e:	66 90                	xchg   ax,ax

c0018590 <FAT::open(char const*, void**, FileOpenMode)>:
c0018590:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018596:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001859e:	74 0c                	je     c00185ac <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00185a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00185a8:	75 0e                	jne    c00185b8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00185aa:	66 90                	xchg   ax,ax
c00185ac:	b8 04 00 00 00       	mov    eax,0x4
c00185b1:	e9 0a 01 00 00       	jmp    c00186c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00185b6:	66 90                	xchg   ax,ax
c00185b8:	83 ec 08             	sub    esp,0x8
c00185bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185c6:	50                   	push   eax
c00185c7:	e8 24 80 fe ff       	call   c00005f0 <strcpy>
c00185cc:	83 c4 10             	add    esp,0x10
c00185cf:	83 ec 08             	sub    esp,0x8
c00185d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00185d6:	50                   	push   eax
c00185d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185de:	e8 71 ff ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c00185e3:	83 c4 10             	add    esp,0x10
c00185e6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00185ee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00185f5:	83 e0 01             	and    eax,0x1
c00185f8:	74 0a                	je     c0018604 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00185fa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0018602:	66 90                	xchg   ax,ax
c0018604:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001860b:	83 e0 04             	and    eax,0x4
c001860e:	74 10                	je     c0018620 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018610:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018618:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018620:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018627:	83 e0 02             	and    eax,0x2
c001862a:	74 08                	je     c0018634 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001862c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018634:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001863b:	83 e0 08             	and    eax,0x8
c001863e:	74 08                	je     c0018648 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018640:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0018648:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001864f:	83 e0 10             	and    eax,0x10
c0018652:	74 08                	je     c001865c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018654:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	68 28 02 00 00       	push   0x228
c0018664:	e8 0a f2 fe ff       	call   c0007873 <malloc>
c0018669:	83 c4 10             	add    esp,0x10
c001866c:	89 c2                	mov    edx,eax
c001866e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018675:	89 10                	mov    DWORD PTR [eax],edx
c0018677:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001867e:	31 d2                	xor    edx,edx
c0018680:	88 c2                	mov    dl,al
c0018682:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018689:	8b 00                	mov    eax,DWORD PTR [eax]
c001868b:	83 ec 04             	sub    esp,0x4
c001868e:	52                   	push   edx
c001868f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018693:	52                   	push   edx
c0018694:	50                   	push   eax
c0018695:	e8 72 b4 fe ff       	call   c0003b0c <f_open>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00186a4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00186ac:	74 0a                	je     c00186b8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00186ae:	b8 01 00 00 00       	mov    eax,0x1
c00186b3:	eb 0b                	jmp    c00186c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	b8 00 00 00 00       	mov    eax,0x0
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00186c6:	c3                   	ret    
c00186c7:	90                   	nop

c00186c8 <FAT::openDir(char const*, void**)>:
c00186c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00186ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00186d6:	74 0c                	je     c00186e4 <FAT::openDir(char const*, void**)+0x1c>
c00186d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00186e0:	75 0e                	jne    c00186f0 <FAT::openDir(char const*, void**)+0x28>
c00186e2:	66 90                	xchg   ax,ax
c00186e4:	b8 04 00 00 00       	mov    eax,0x4
c00186e9:	e9 82 00 00 00       	jmp    c0018770 <FAT::openDir(char const*, void**)+0xa8>
c00186ee:	66 90                	xchg   ax,ax
c00186f0:	83 ec 08             	sub    esp,0x8
c00186f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00186fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186fe:	50                   	push   eax
c00186ff:	e8 ec 7e fe ff       	call   c00005f0 <strcpy>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	83 ec 08             	sub    esp,0x8
c001870a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001870e:	50                   	push   eax
c001870f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018716:	e8 39 fe ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c001871b:	83 c4 10             	add    esp,0x10
c001871e:	83 ec 0c             	sub    esp,0xc
c0018721:	6a 30                	push   0x30
c0018723:	e8 4b f1 fe ff       	call   c0007873 <malloc>
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	89 c2                	mov    edx,eax
c001872d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018734:	89 10                	mov    DWORD PTR [eax],edx
c0018736:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001873d:	8b 00                	mov    eax,DWORD PTR [eax]
c001873f:	83 ec 08             	sub    esp,0x8
c0018742:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018746:	52                   	push   edx
c0018747:	50                   	push   eax
c0018748:	e8 48 bd fe ff       	call   c0004495 <f_opendir>
c001874d:	83 c4 10             	add    esp,0x10
c0018750:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018757:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001875f:	74 07                	je     c0018768 <FAT::openDir(char const*, void**)+0xa0>
c0018761:	b8 01 00 00 00       	mov    eax,0x1
c0018766:	eb 08                	jmp    c0018770 <FAT::openDir(char const*, void**)+0xa8>
c0018768:	b8 00 00 00 00       	mov    eax,0x0
c001876d:	8d 76 00             	lea    esi,[esi+0x0]
c0018770:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018776:	c3                   	ret    
c0018777:	90                   	nop

c0018778 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018778:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001877e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018786:	75 0c                	jne    c0018794 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018788:	b8 04 00 00 00       	mov    eax,0x4
c001878d:	e9 d6 00 00 00       	jmp    c0018868 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018792:	66 90                	xchg   ax,ax
c0018794:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001879c:	75 0a                	jne    c00187a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001879e:	b8 04 00 00 00       	mov    eax,0x4
c00187a3:	e9 c0 00 00 00       	jmp    c0018868 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00187a8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00187b0:	75 0a                	jne    c00187bc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00187b2:	b8 04 00 00 00       	mov    eax,0x4
c00187b7:	e9 ac 00 00 00       	jmp    c0018868 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00187bc:	83 ec 08             	sub    esp,0x8
c00187bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187c6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187cd:	50                   	push   eax
c00187ce:	e8 1d 7e fe ff       	call   c00005f0 <strcpy>
c00187d3:	83 c4 10             	add    esp,0x10
c00187d6:	83 ec 08             	sub    esp,0x8
c00187d9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00187e0:	50                   	push   eax
c00187e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187e8:	e8 67 fd ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	83 ec 08             	sub    esp,0x8
c00187f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187f7:	50                   	push   eax
c00187f8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187ff:	50                   	push   eax
c0018800:	e8 0f be fe ff       	call   c0004614 <f_stat>
c0018805:	83 c4 10             	add    esp,0x10
c0018808:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001880f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018816:	85 c0                	test   eax,eax
c0018818:	74 0a                	je     c0018824 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001881a:	83 f8 04             	cmp    eax,0x4
c001881d:	74 39                	je     c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001881f:	eb 3f                	jmp    c0018860 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018821:	8d 76 00             	lea    esi,[esi+0x0]
c0018824:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018828:	25 ff 00 00 00       	and    eax,0xff
c001882d:	83 e0 10             	and    eax,0x10
c0018830:	0f 95 c2             	setne  dl
c0018833:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001883a:	88 10                	mov    BYTE PTR [eax],dl
c001883c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018840:	ba 00 00 00 00       	mov    edx,0x0
c0018845:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001884c:	89 01                	mov    DWORD PTR [ecx],eax
c001884e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018851:	b8 00 00 00 00       	mov    eax,0x0
c0018856:	eb 10                	jmp    c0018868 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018858:	b8 02 00 00 00       	mov    eax,0x2
c001885d:	eb 09                	jmp    c0018868 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001885f:	90                   	nop
c0018860:	b8 01 00 00 00       	mov    eax,0x1
c0018865:	8d 76 00             	lea    esi,[esi+0x0]
c0018868:	81 c4 2c 02 00 00    	add    esp,0x22c
c001886e:	c3                   	ret    
c001886f:	90                   	nop

c0018870 <FAT::unlink(char const*)>:
c0018870:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018876:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001887e:	75 08                	jne    c0018888 <FAT::unlink(char const*)+0x18>
c0018880:	b8 04 00 00 00       	mov    eax,0x4
c0018885:	eb 61                	jmp    c00188e8 <FAT::unlink(char const*)+0x78>
c0018887:	90                   	nop
c0018888:	83 ec 08             	sub    esp,0x8
c001888b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018892:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018896:	50                   	push   eax
c0018897:	e8 54 7d fe ff       	call   c00005f0 <strcpy>
c001889c:	83 c4 10             	add    esp,0x10
c001889f:	83 ec 08             	sub    esp,0x8
c00188a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00188a6:	50                   	push   eax
c00188a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00188ae:	e8 a1 fc ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c00188b3:	83 c4 10             	add    esp,0x10
c00188b6:	83 ec 0c             	sub    esp,0xc
c00188b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188bd:	50                   	push   eax
c00188be:	e8 b6 bf fe ff       	call   c0004879 <f_unlink>
c00188c3:	83 c4 10             	add    esp,0x10
c00188c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00188cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00188d4:	85 c0                	test   eax,eax
c00188d6:	75 08                	jne    c00188e0 <FAT::unlink(char const*)+0x70>
c00188d8:	b8 00 00 00 00       	mov    eax,0x0
c00188dd:	eb 09                	jmp    c00188e8 <FAT::unlink(char const*)+0x78>
c00188df:	90                   	nop
c00188e0:	b8 01 00 00 00       	mov    eax,0x1
c00188e5:	8d 76 00             	lea    esi,[esi+0x0]
c00188e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00188ee:	c3                   	ret    
c00188ef:	90                   	nop

c00188f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00188f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00188f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00188fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018904:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018908:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001890c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018914:	75 0a                	jne    c0018920 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018916:	b8 04 00 00 00       	mov    eax,0x4
c001891b:	e9 54 01 00 00       	jmp    c0018a74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018920:	83 ec 08             	sub    esp,0x8
c0018923:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001892a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001892e:	50                   	push   eax
c001892f:	e8 bc 7c fe ff       	call   c00005f0 <strcpy>
c0018934:	83 c4 10             	add    esp,0x10
c0018937:	83 ec 08             	sub    esp,0x8
c001893a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001893e:	50                   	push   eax
c001893f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018946:	e8 09 fc ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c001894b:	83 c4 10             	add    esp,0x10
c001894e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018956:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001895e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018962:	25 ff 00 00 00       	and    eax,0xff
c0018967:	83 e0 01             	and    eax,0x1
c001896a:	74 08                	je     c0018974 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001896c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018974:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018978:	25 ff 00 00 00       	and    eax,0xff
c001897d:	83 e0 02             	and    eax,0x2
c0018980:	74 0a                	je     c001898c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0018982:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001898a:	66 90                	xchg   ax,ax
c001898c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018990:	25 ff 00 00 00       	and    eax,0xff
c0018995:	83 e0 04             	and    eax,0x4
c0018998:	74 0a                	je     c00189a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001899a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00189a2:	66 90                	xchg   ax,ax
c00189a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00189a8:	25 ff 00 00 00       	and    eax,0xff
c00189ad:	83 e0 08             	and    eax,0x8
c00189b0:	74 0a                	je     c00189bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00189b2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00189ba:	66 90                	xchg   ax,ax
c00189bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189c0:	25 ff 00 00 00       	and    eax,0xff
c00189c5:	83 e0 01             	and    eax,0x1
c00189c8:	74 0a                	je     c00189d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00189ca:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00189d2:	66 90                	xchg   ax,ax
c00189d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189d8:	25 ff 00 00 00       	and    eax,0xff
c00189dd:	83 e0 02             	and    eax,0x2
c00189e0:	74 0a                	je     c00189ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00189e2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00189ea:	66 90                	xchg   ax,ax
c00189ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189f0:	25 ff 00 00 00       	and    eax,0xff
c00189f5:	83 e0 04             	and    eax,0x4
c00189f8:	74 0a                	je     c0018a04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00189fa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0018a02:	66 90                	xchg   ax,ax
c0018a04:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a08:	25 ff 00 00 00       	and    eax,0xff
c0018a0d:	83 e0 08             	and    eax,0x8
c0018a10:	74 0a                	je     c0018a1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0018a12:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0018a1a:	66 90                	xchg   ax,ax
c0018a1c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018a23:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0018a2a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018a31:	31 d2                	xor    edx,edx
c0018a33:	88 c2                	mov    dl,al
c0018a35:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018a3c:	25 ff 00 00 00       	and    eax,0xff
c0018a41:	83 ec 04             	sub    esp,0x4
c0018a44:	52                   	push   edx
c0018a45:	50                   	push   eax
c0018a46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018a4a:	50                   	push   eax
c0018a4b:	e8 9a c2 fe ff       	call   c0004cea <f_chmod>
c0018a50:	83 c4 10             	add    esp,0x10
c0018a53:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018a5a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018a61:	85 c0                	test   eax,eax
c0018a63:	75 07                	jne    c0018a6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0018a65:	b8 00 00 00 00       	mov    eax,0x0
c0018a6a:	eb 08                	jmp    c0018a74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018a6c:	b8 01 00 00 00       	mov    eax,0x1
c0018a71:	8d 76 00             	lea    esi,[esi+0x0]
c0018a74:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018a7a:	c3                   	ret    
c0018a7b:	90                   	nop

c0018a7c <FAT::rename(char const*, char const*)>:
c0018a7c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018a82:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0018a8a:	74 0c                	je     c0018a98 <FAT::rename(char const*, char const*)+0x1c>
c0018a8c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018a94:	75 0e                	jne    c0018aa4 <FAT::rename(char const*, char const*)+0x28>
c0018a96:	66 90                	xchg   ax,ax
c0018a98:	b8 04 00 00 00       	mov    eax,0x4
c0018a9d:	e9 9e 00 00 00       	jmp    c0018b40 <FAT::rename(char const*, char const*)+0xc4>
c0018aa2:	66 90                	xchg   ax,ax
c0018aa4:	83 ec 08             	sub    esp,0x8
c0018aa7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018aae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018ab5:	50                   	push   eax
c0018ab6:	e8 35 7b fe ff       	call   c00005f0 <strcpy>
c0018abb:	83 c4 10             	add    esp,0x10
c0018abe:	83 ec 08             	sub    esp,0x8
c0018ac1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018ac8:	50                   	push   eax
c0018ac9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018ad0:	e8 7f fa ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c0018ad5:	83 c4 10             	add    esp,0x10
c0018ad8:	83 ec 08             	sub    esp,0x8
c0018adb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018ae2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ae6:	50                   	push   eax
c0018ae7:	e8 04 7b fe ff       	call   c00005f0 <strcpy>
c0018aec:	83 c4 10             	add    esp,0x10
c0018aef:	83 ec 08             	sub    esp,0x8
c0018af2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018af6:	50                   	push   eax
c0018af7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018afe:	e8 51 fa ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c0018b03:	83 c4 10             	add    esp,0x10
c0018b06:	83 ec 08             	sub    esp,0x8
c0018b09:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b0d:	50                   	push   eax
c0018b0e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018b15:	50                   	push   eax
c0018b16:	e8 19 c0 fe ff       	call   c0004b34 <f_rename>
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018b25:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018b2c:	85 c0                	test   eax,eax
c0018b2e:	75 08                	jne    c0018b38 <FAT::rename(char const*, char const*)+0xbc>
c0018b30:	b8 00 00 00 00       	mov    eax,0x0
c0018b35:	eb 09                	jmp    c0018b40 <FAT::rename(char const*, char const*)+0xc4>
c0018b37:	90                   	nop
c0018b38:	b8 01 00 00 00       	mov    eax,0x1
c0018b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b40:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018b46:	c3                   	ret    
c0018b47:	90                   	nop

c0018b48 <FAT::mkdir(char const*)>:
c0018b48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b56:	75 08                	jne    c0018b60 <FAT::mkdir(char const*)+0x18>
c0018b58:	b8 04 00 00 00       	mov    eax,0x4
c0018b5d:	eb 61                	jmp    c0018bc0 <FAT::mkdir(char const*)+0x78>
c0018b5f:	90                   	nop
c0018b60:	83 ec 08             	sub    esp,0x8
c0018b63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b6e:	50                   	push   eax
c0018b6f:	e8 7c 7a fe ff       	call   c00005f0 <strcpy>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	83 ec 08             	sub    esp,0x8
c0018b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b7e:	50                   	push   eax
c0018b7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b86:	e8 c9 f9 ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	83 ec 0c             	sub    esp,0xc
c0018b91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b95:	50                   	push   eax
c0018b96:	e8 fe bd fe ff       	call   c0004999 <f_mkdir>
c0018b9b:	83 c4 10             	add    esp,0x10
c0018b9e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018ba5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018bac:	85 c0                	test   eax,eax
c0018bae:	75 08                	jne    c0018bb8 <FAT::mkdir(char const*)+0x70>
c0018bb0:	b8 00 00 00 00       	mov    eax,0x0
c0018bb5:	eb 09                	jmp    c0018bc0 <FAT::mkdir(char const*)+0x78>
c0018bb7:	90                   	nop
c0018bb8:	b8 01 00 00 00       	mov    eax,0x1
c0018bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018bc6:	c3                   	ret    
c0018bc7:	90                   	nop

c0018bc8 <FAT::exists(char const*)>:
c0018bc8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018bce:	83 ec 08             	sub    esp,0x8
c0018bd1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018bd8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bdc:	50                   	push   eax
c0018bdd:	e8 0e 7a fe ff       	call   c00005f0 <strcpy>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	83 ec 08             	sub    esp,0x8
c0018be8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bec:	50                   	push   eax
c0018bed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018bf4:	e8 5b f9 ff ff       	call   c0018554 <FAT::fixFilepath(char*)>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	83 ec 08             	sub    esp,0x8
c0018bff:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018c06:	50                   	push   eax
c0018c07:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c0b:	50                   	push   eax
c0018c0c:	e8 03 ba fe ff       	call   c0004614 <f_stat>
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018c1b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018c22:	85 c0                	test   eax,eax
c0018c24:	75 06                	jne    c0018c2c <FAT::exists(char const*)+0x64>
c0018c26:	b0 01                	mov    al,0x1
c0018c28:	eb 06                	jmp    c0018c30 <FAT::exists(char const*)+0x68>
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	b0 00                	mov    al,0x0
c0018c2e:	66 90                	xchg   ax,ax
c0018c30:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018c36:	c3                   	ret    
c0018c37:	90                   	nop

c0018c38 <isoReadDiscSectorHelper>:
c0018c38:	83 ec 2c             	sub    esp,0x2c
c0018c3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018c3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c43:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018c48:	83 e8 41             	sub    eax,0x41
c0018c4b:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018c52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018c56:	ba 00 00 00 00       	mov    edx,0x0
c0018c5b:	83 ec 0c             	sub    esp,0xc
c0018c5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c62:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c66:	52                   	push   edx
c0018c67:	50                   	push   eax
c0018c68:	51                   	push   ecx
c0018c69:	e8 3a 41 ff ff       	call   c000cda8 <LogicalDisk::read(unsigned long long, int, void*)>
c0018c6e:	83 c4 20             	add    esp,0x20
c0018c71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c75:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018c7a:	74 0c                	je     c0018c88 <isoReadDiscSectorHelper+0x50>
c0018c7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c80:	c1 e0 0b             	shl    eax,0xb
c0018c83:	eb 0b                	jmp    c0018c90 <isoReadDiscSectorHelper+0x58>
c0018c85:	8d 76 00             	lea    esi,[esi+0x0]
c0018c88:	b8 00 00 00 00       	mov    eax,0x0
c0018c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c90:	83 c4 2c             	add    esp,0x2c
c0018c93:	c3                   	ret    

c0018c94 <iso_kprintf>:
c0018c94:	83 ec 0c             	sub    esp,0xc
c0018c97:	83 ec 08             	sub    esp,0x8
c0018c9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018c9e:	68 59 09 02 c0       	push   0xc0020959
c0018ca3:	e8 bb 19 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018ca8:	83 c4 10             	add    esp,0x10
c0018cab:	90                   	nop
c0018cac:	83 c4 0c             	add    esp,0xc
c0018caf:	c3                   	ret    

c0018cb0 <iso_kprintfd>:
c0018cb0:	83 ec 0c             	sub    esp,0xc
c0018cb3:	83 ec 08             	sub    esp,0x8
c0018cb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018cba:	68 7b f9 01 c0       	push   0xc001f97b
c0018cbf:	e8 9f 19 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018cc4:	83 c4 10             	add    esp,0x10
c0018cc7:	90                   	nop
c0018cc8:	83 c4 0c             	add    esp,0xc
c0018ccb:	c3                   	ret    

c0018ccc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018ccc:	b8 08 00 00 00       	mov    eax,0x8
c0018cd1:	c3                   	ret    

c0018cd2 <ISO9660::getName()>:
c0018cd2:	b8 ac 0f 02 c0       	mov    eax,0xc0020fac
c0018cd7:	c3                   	ret    

c0018cd8 <ISO9660::closeDir(void*)>:
c0018cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cde:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018ce1:	90                   	nop

c0018ce2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018ce2:	b8 01 00 00 00       	mov    eax,0x1
c0018ce7:	c3                   	ret    

c0018ce8 <ISO9660::unlink(char const*)>:
c0018ce8:	b8 01 00 00 00       	mov    eax,0x1
c0018ced:	c3                   	ret    

c0018cee <ISO9660::write(void*, unsigned long, void*, int*)>:
c0018cee:	b8 03 00 00 00       	mov    eax,0x3
c0018cf3:	c3                   	ret    

c0018cf4 <ISO9660::rename(char const*, char const*)>:
c0018cf4:	b8 01 00 00 00       	mov    eax,0x1
c0018cf9:	c3                   	ret    

c0018cfa <ISO9660::mkdir(char const*)>:
c0018cfa:	b8 01 00 00 00       	mov    eax,0x1
c0018cff:	c3                   	ret    

c0018d00 <ISO9660::~ISO9660()>:
c0018d00:	83 ec 0c             	sub    esp,0xc
c0018d03:	ba ec 10 02 c0       	mov    edx,0xc00210ec
c0018d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d0c:	89 10                	mov    DWORD PTR [eax],edx
c0018d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d12:	83 ec 0c             	sub    esp,0xc
c0018d15:	50                   	push   eax
c0018d16:	e8 8d 1c ff ff       	call   c000a9a8 <Filesystem::~Filesystem()>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	90                   	nop
c0018d1f:	83 c4 0c             	add    esp,0xc
c0018d22:	c3                   	ret    
c0018d23:	90                   	nop

c0018d24 <ISO9660::~ISO9660()>:
c0018d24:	83 ec 0c             	sub    esp,0xc
c0018d27:	83 ec 0c             	sub    esp,0xc
c0018d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d2e:	e8 cd ff ff ff       	call   c0018d00 <ISO9660::~ISO9660()>
c0018d33:	83 c4 10             	add    esp,0x10
c0018d36:	83 ec 08             	sub    esp,0x8
c0018d39:	6a 08                	push   0x8
c0018d3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d3f:	e8 29 18 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c0018d44:	83 c4 10             	add    esp,0x10
c0018d47:	83 c4 0c             	add    esp,0xc
c0018d4a:	c3                   	ret    
c0018d4b:	90                   	nop

c0018d4c <ISO9660::exists(char const*)>:
c0018d4c:	83 ec 18             	sub    esp,0x18
c0018d4f:	68 c7 0f 02 c0       	push   0xc0020fc7
c0018d54:	e8 be 76 ff ff       	call   c0010417 <KePanic(char const*)>
c0018d59:	31 c0                	xor    eax,eax
c0018d5b:	83 c4 1c             	add    esp,0x1c
c0018d5e:	c3                   	ret    
c0018d5f:	90                   	nop

c0018d60 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018d60:	56                   	push   esi
c0018d61:	53                   	push   ebx
c0018d62:	53                   	push   ebx
c0018d63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d67:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d6b:	85 db                	test   ebx,ebx
c0018d6d:	0f 84 c2 00 00 00    	je     c0018e35 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018d73:	85 f6                	test   esi,esi
c0018d75:	0f 84 ba 00 00 00    	je     c0018e35 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018d7b:	b8 03 00 00 00       	mov    eax,0x3
c0018d80:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018d85:	0f 85 af 00 00 00    	jne    c0018e3a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018d8b:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018d90:	38 03                	cmp    BYTE PTR [ebx],al
c0018d92:	74 1b                	je     c0018daf <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018d94:	84 c0                	test   al,al
c0018d96:	74 10                	je     c0018da8 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018d98:	83 ec 0c             	sub    esp,0xc
c0018d9b:	68 e5 0f 02 c0       	push   0xc0020fe5
c0018da0:	e8 72 76 ff ff       	call   c0010417 <KePanic(char const*)>
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	8a 03                	mov    al,BYTE PTR [ebx]
c0018daa:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018daf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018db2:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018db9:	85 c0                	test   eax,eax
c0018dbb:	74 09                	je     c0018dc6 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018dbd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018dc4:	74 48                	je     c0018e0e <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018dc6:	83 ec 0c             	sub    esp,0xc
c0018dc9:	68 f5 0f 02 c0       	push   0xc0020ff5
c0018dce:	e8 90 18 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018dd3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018dd6:	83 c4 10             	add    esp,0x10
c0018dd9:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018de0:	85 c0                	test   eax,eax
c0018de2:	74 17                	je     c0018dfb <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018dee:	68 15 10 02 c0       	push   0xc0021015
c0018df3:	e8 6b 18 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018df8:	83 c4 10             	add    esp,0x10
c0018dfb:	83 ec 0c             	sub    esp,0xc
c0018dfe:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018e05:	50                   	push   eax
c0018e06:	e8 31 da fe ff       	call   c000683c <init_percd>
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	51                   	push   ecx
c0018e0f:	83 c3 03             	add    ebx,0x3
c0018e12:	51                   	push   ecx
c0018e13:	6a 00                	push   0x0
c0018e15:	53                   	push   ebx
c0018e16:	e8 e9 d4 fe ff       	call   c0006304 <iso_open>
c0018e1b:	89 c2                	mov    edx,eax
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	b8 01 00 00 00       	mov    eax,0x1
c0018e25:	83 fa ff             	cmp    edx,0xffffffff
c0018e28:	74 10                	je     c0018e3a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018e2a:	83 c2 32             	add    edx,0x32
c0018e2d:	31 c0                	xor    eax,eax
c0018e2f:	01 d2                	add    edx,edx
c0018e31:	89 16                	mov    DWORD PTR [esi],edx
c0018e33:	eb 05                	jmp    c0018e3a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018e35:	b8 04 00 00 00       	mov    eax,0x4
c0018e3a:	5a                   	pop    edx
c0018e3b:	5b                   	pop    ebx
c0018e3c:	5e                   	pop    esi
c0018e3d:	c3                   	ret    

c0018e3e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018e3e:	53                   	push   ebx
c0018e3f:	83 ec 08             	sub    esp,0x8
c0018e42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e4a:	85 c0                	test   eax,eax
c0018e4c:	74 2d                	je     c0018e7b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018e4e:	85 db                	test   ebx,ebx
c0018e50:	74 29                	je     c0018e7b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018e52:	52                   	push   edx
c0018e53:	b9 02 00 00 00       	mov    ecx,0x2
c0018e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018e60:	99                   	cdq    
c0018e61:	f7 f9                	idiv   ecx
c0018e63:	83 e8 32             	sub    eax,0x32
c0018e66:	50                   	push   eax
c0018e67:	e8 40 d5 fe ff       	call   c00063ac <iso_read>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	89 03                	mov    DWORD PTR [ebx],eax
c0018e71:	09 d0                	or     eax,edx
c0018e73:	0f 94 c0             	sete   al
c0018e76:	0f b6 c0             	movzx  eax,al
c0018e79:	eb 05                	jmp    c0018e80 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018e7b:	b8 04 00 00 00       	mov    eax,0x4
c0018e80:	83 c4 08             	add    esp,0x8
c0018e83:	5b                   	pop    ebx
c0018e84:	c3                   	ret    
c0018e85:	90                   	nop

c0018e86 <ISO9660::seek(void*, unsigned long long)>:
c0018e86:	57                   	push   edi
c0018e87:	b8 04 00 00 00       	mov    eax,0x4
c0018e8c:	56                   	push   esi
c0018e8d:	51                   	push   ecx
c0018e8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e92:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018e96:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018e9a:	85 d2                	test   edx,edx
c0018e9c:	74 26                	je     c0018ec4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018e9e:	89 d0                	mov    eax,edx
c0018ea0:	6a 00                	push   0x0
c0018ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0018ea7:	57                   	push   edi
c0018ea8:	99                   	cdq    
c0018ea9:	f7 f9                	idiv   ecx
c0018eab:	56                   	push   esi
c0018eac:	83 e8 32             	sub    eax,0x32
c0018eaf:	50                   	push   eax
c0018eb0:	e8 0d d6 fe ff       	call   c00064c2 <iso_seek>
c0018eb5:	31 f0                	xor    eax,esi
c0018eb7:	31 fa                	xor    edx,edi
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	09 d0                	or     eax,edx
c0018ebe:	0f 95 c0             	setne  al
c0018ec1:	0f b6 c0             	movzx  eax,al
c0018ec4:	5a                   	pop    edx
c0018ec5:	5e                   	pop    esi
c0018ec6:	5f                   	pop    edi
c0018ec7:	c3                   	ret    

c0018ec8 <ISO9660::tell(void*, unsigned long long*)>:
c0018ec8:	53                   	push   ebx
c0018ec9:	83 ec 08             	sub    esp,0x8
c0018ecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ed0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ed4:	85 c0                	test   eax,eax
c0018ed6:	74 24                	je     c0018efc <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018ed8:	85 db                	test   ebx,ebx
c0018eda:	74 20                	je     c0018efc <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018edc:	b9 02 00 00 00       	mov    ecx,0x2
c0018ee1:	83 ec 0c             	sub    esp,0xc
c0018ee4:	99                   	cdq    
c0018ee5:	f7 f9                	idiv   ecx
c0018ee7:	83 e8 32             	sub    eax,0x32
c0018eea:	50                   	push   eax
c0018eeb:	e8 56 d6 fe ff       	call   c0006546 <iso_tell>
c0018ef0:	83 c4 10             	add    esp,0x10
c0018ef3:	89 03                	mov    DWORD PTR [ebx],eax
c0018ef5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018ef8:	31 c0                	xor    eax,eax
c0018efa:	eb 05                	jmp    c0018f01 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018efc:	b8 04 00 00 00       	mov    eax,0x4
c0018f01:	83 c4 08             	add    esp,0x8
c0018f04:	5b                   	pop    ebx
c0018f05:	c3                   	ret    

c0018f06 <ISO9660::stat(void*, unsigned long long*)>:
c0018f06:	53                   	push   ebx
c0018f07:	83 ec 14             	sub    esp,0x14
c0018f0a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018f0e:	68 39 10 02 c0       	push   0xc0021039
c0018f13:	e8 4b 17 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018f20:	74 2c                	je     c0018f4e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018f22:	85 db                	test   ebx,ebx
c0018f24:	74 28                	je     c0018f4e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018f26:	83 ec 0c             	sub    esp,0xc
c0018f29:	b9 02 00 00 00       	mov    ecx,0x2
c0018f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f32:	99                   	cdq    
c0018f33:	f7 f9                	idiv   ecx
c0018f35:	83 e8 32             	sub    eax,0x32
c0018f38:	50                   	push   eax
c0018f39:	e8 39 d6 fe ff       	call   c0006577 <iso_total>
c0018f3e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018f45:	89 03                	mov    DWORD PTR [ebx],eax
c0018f47:	83 c4 10             	add    esp,0x10
c0018f4a:	31 c0                	xor    eax,eax
c0018f4c:	eb 05                	jmp    c0018f53 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018f4e:	b8 04 00 00 00       	mov    eax,0x4
c0018f53:	83 c4 08             	add    esp,0x8
c0018f56:	5b                   	pop    ebx
c0018f57:	c3                   	ret    

c0018f58 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018f58:	55                   	push   ebp
c0018f59:	57                   	push   edi
c0018f5a:	56                   	push   esi
c0018f5b:	53                   	push   ebx
c0018f5c:	83 ec 18             	sub    esp,0x18
c0018f5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018f63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018f67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018f6b:	68 41 10 02 c0       	push   0xc0021041
c0018f70:	e8 ee 16 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	85 ff                	test   edi,edi
c0018f7a:	0f 94 c2             	sete   dl
c0018f7d:	85 f6                	test   esi,esi
c0018f7f:	0f 94 c0             	sete   al
c0018f82:	08 c2                	or     dl,al
c0018f84:	0f 85 d5 00 00 00    	jne    c001905f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018f8a:	85 db                	test   ebx,ebx
c0018f8c:	0f 84 cd 00 00 00    	je     c001905f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018f92:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018f95:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018f9b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018fa2:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018fa7:	38 03                	cmp    BYTE PTR [ebx],al
c0018fa9:	74 1b                	je     c0018fc6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018fab:	84 c0                	test   al,al
c0018fad:	74 10                	je     c0018fbf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018faf:	83 ec 0c             	sub    esp,0xc
c0018fb2:	68 e5 0f 02 c0       	push   0xc0020fe5
c0018fb7:	e8 5b 74 ff ff       	call   c0010417 <KePanic(char const*)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	8a 03                	mov    al,BYTE PTR [ebx]
c0018fc1:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018fc6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018fc9:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018fd0:	85 c0                	test   eax,eax
c0018fd2:	74 09                	je     c0018fdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018fd4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018fdb:	74 51                	je     c001902e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018fdd:	83 ec 0c             	sub    esp,0xc
c0018fe0:	68 49 10 02 c0       	push   0xc0021049
c0018fe5:	e8 79 16 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0018fea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018ff8:	74 21                	je     c001901b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018ffa:	83 ec 0c             	sub    esp,0xc
c0018ffd:	68 69 10 02 c0       	push   0xc0021069
c0019002:	e8 5c 16 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c0019007:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0019014:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001901b:	83 ec 0c             	sub    esp,0xc
c001901e:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0019025:	50                   	push   eax
c0019026:	e8 11 d8 fe ff       	call   c000683c <init_percd>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	52                   	push   edx
c001902f:	83 c3 03             	add    ebx,0x3
c0019032:	52                   	push   edx
c0019033:	6a 00                	push   0x0
c0019035:	53                   	push   ebx
c0019036:	e8 c9 d2 fe ff       	call   c0006304 <iso_open>
c001903b:	83 c4 10             	add    esp,0x10
c001903e:	89 c5                	mov    ebp,eax
c0019040:	83 f8 ff             	cmp    eax,0xffffffff
c0019043:	75 21                	jne    c0019066 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0019045:	50                   	push   eax
c0019046:	50                   	push   eax
c0019047:	6a 01                	push   0x1
c0019049:	53                   	push   ebx
c001904a:	e8 b5 d2 fe ff       	call   c0006304 <iso_open>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	ba 02 00 00 00       	mov    edx,0x2
c0019057:	40                   	inc    eax
c0019058:	74 2b                	je     c0019085 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001905a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001905d:	eb 24                	jmp    c0019083 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c001905f:	ba 04 00 00 00       	mov    edx,0x4
c0019064:	eb 1f                	jmp    c0019085 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019066:	83 ec 0c             	sub    esp,0xc
c0019069:	50                   	push   eax
c001906a:	e8 08 d5 fe ff       	call   c0006577 <iso_total>
c001906f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019076:	89 07                	mov    DWORD PTR [edi],eax
c0019078:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001907b:	e8 0e d3 fe ff       	call   c000638e <iso_close>
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	31 d2                	xor    edx,edx
c0019085:	83 c4 0c             	add    esp,0xc
c0019088:	89 d0                	mov    eax,edx
c001908a:	5b                   	pop    ebx
c001908b:	5e                   	pop    esi
c001908c:	5f                   	pop    edi
c001908d:	5d                   	pop    ebp
c001908e:	c3                   	ret    
c001908f:	90                   	nop

c0019090 <ISO9660::close(void*)>:
c0019090:	83 ec 0c             	sub    esp,0xc
c0019093:	b8 04 00 00 00       	mov    eax,0x4
c0019098:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001909c:	85 d2                	test   edx,edx
c001909e:	74 1b                	je     c00190bb <ISO9660::close(void*)+0x2b>
c00190a0:	89 d0                	mov    eax,edx
c00190a2:	b9 02 00 00 00       	mov    ecx,0x2
c00190a7:	99                   	cdq    
c00190a8:	83 ec 0c             	sub    esp,0xc
c00190ab:	f7 f9                	idiv   ecx
c00190ad:	83 e8 32             	sub    eax,0x32
c00190b0:	50                   	push   eax
c00190b1:	e8 d8 d2 fe ff       	call   c000638e <iso_close>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	31 c0                	xor    eax,eax
c00190bb:	83 c4 0c             	add    esp,0xc
c00190be:	c3                   	ret    
c00190bf:	90                   	nop

c00190c0 <ISO9660::openDir(char const*, void**)>:
c00190c0:	56                   	push   esi
c00190c1:	53                   	push   ebx
c00190c2:	50                   	push   eax
c00190c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00190c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00190cb:	85 db                	test   ebx,ebx
c00190cd:	0f 84 b5 00 00 00    	je     c0019188 <ISO9660::openDir(char const*, void**)+0xc8>
c00190d3:	85 f6                	test   esi,esi
c00190d5:	0f 84 ad 00 00 00    	je     c0019188 <ISO9660::openDir(char const*, void**)+0xc8>
c00190db:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c00190e0:	38 03                	cmp    BYTE PTR [ebx],al
c00190e2:	74 1b                	je     c00190ff <ISO9660::openDir(char const*, void**)+0x3f>
c00190e4:	84 c0                	test   al,al
c00190e6:	74 10                	je     c00190f8 <ISO9660::openDir(char const*, void**)+0x38>
c00190e8:	83 ec 0c             	sub    esp,0xc
c00190eb:	68 e5 0f 02 c0       	push   0xc0020fe5
c00190f0:	e8 22 73 ff ff       	call   c0010417 <KePanic(char const*)>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	8a 03                	mov    al,BYTE PTR [ebx]
c00190fa:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c00190ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019102:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0019109:	85 c0                	test   eax,eax
c001910b:	74 10                	je     c001911d <ISO9660::openDir(char const*, void**)+0x5d>
c001910d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019114:	74 1a                	je     c0019130 <ISO9660::openDir(char const*, void**)+0x70>
c0019116:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001911d:	83 ec 0c             	sub    esp,0xc
c0019120:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0019127:	50                   	push   eax
c0019128:	e8 0f d7 fe ff       	call   c000683c <init_percd>
c001912d:	83 c4 10             	add    esp,0x10
c0019130:	50                   	push   eax
c0019131:	83 c3 03             	add    ebx,0x3
c0019134:	50                   	push   eax
c0019135:	6a 01                	push   0x1
c0019137:	53                   	push   ebx
c0019138:	e8 c7 d1 fe ff       	call   c0006304 <iso_open>
c001913d:	83 c4 10             	add    esp,0x10
c0019140:	89 c3                	mov    ebx,eax
c0019142:	83 f8 ff             	cmp    eax,0xffffffff
c0019145:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001914a:	75 1c                	jne    c0019168 <ISO9660::openDir(char const*, void**)+0xa8>
c001914c:	53                   	push   ebx
c001914d:	53                   	push   ebx
c001914e:	68 8d 10 02 c0       	push   0xc002108d
c0019153:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019159:	e8 b8 f6 fe ff       	call   c0008816 <VgaText::puts(char const*)>
c001915e:	83 c4 10             	add    esp,0x10
c0019161:	b8 01 00 00 00       	mov    eax,0x1
c0019166:	eb 25                	jmp    c001918d <ISO9660::openDir(char const*, void**)+0xcd>
c0019168:	51                   	push   ecx
c0019169:	01 db                	add    ebx,ebx
c001916b:	51                   	push   ecx
c001916c:	83 c3 65             	add    ebx,0x65
c001916f:	68 a0 10 02 c0       	push   0xc00210a0
c0019174:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001917a:	e8 97 f6 fe ff       	call   c0008816 <VgaText::puts(char const*)>
c001917f:	89 1e                	mov    DWORD PTR [esi],ebx
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	31 c0                	xor    eax,eax
c0019186:	eb 05                	jmp    c001918d <ISO9660::openDir(char const*, void**)+0xcd>
c0019188:	b8 04 00 00 00       	mov    eax,0x4
c001918d:	5a                   	pop    edx
c001918e:	5b                   	pop    ebx
c001918f:	5e                   	pop    esi
c0019190:	c3                   	ret    
c0019191:	90                   	nop

c0019192 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019192:	55                   	push   ebp
c0019193:	57                   	push   edi
c0019194:	56                   	push   esi
c0019195:	53                   	push   ebx
c0019196:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001919c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00191a3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00191aa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00191b2:	0f 84 e7 00 00 00    	je     c001929f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00191b8:	85 db                	test   ebx,ebx
c00191ba:	0f 84 df 00 00 00    	je     c001929f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00191c0:	83 ec 0c             	sub    esp,0xc
c00191c3:	68 b3 10 02 c0       	push   0xc00210b3
c00191c8:	e8 96 14 ff ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c00191cd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00191d4:	b9 02 00 00 00       	mov    ecx,0x2
c00191d9:	99                   	cdq    
c00191da:	f7 f9                	idiv   ecx
c00191dc:	83 e8 32             	sub    eax,0x32
c00191df:	89 04 24             	mov    DWORD PTR [esp],eax
c00191e2:	e8 e1 d3 fe ff       	call   c00065c8 <iso_readdir>
c00191e7:	83 c4 10             	add    esp,0x10
c00191ea:	89 c6                	mov    esi,eax
c00191ec:	85 c0                	test   eax,eax
c00191ee:	75 37                	jne    c0019227 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00191f0:	56                   	push   esi
c00191f1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00191f6:	56                   	push   esi
c00191f7:	68 be 10 02 c0       	push   0xc00210be
c00191fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019202:	e8 0f f6 fe ff       	call   c0008816 <VgaText::puts(char const*)>
c0019207:	83 c4 0c             	add    esp,0xc
c001920a:	68 10 01 00 00       	push   0x110
c001920f:	6a 00                	push   0x0
c0019211:	57                   	push   edi
c0019212:	e8 a9 72 fe ff       	call   c00004c0 <memset>
c0019217:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	b8 01 00 00 00       	mov    eax,0x1
c0019225:	eb 7d                	jmp    c00192a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019227:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001922d:	83 ec 0c             	sub    esp,0xc
c0019230:	8d 68 08             	lea    ebp,[eax+0x8]
c0019233:	55                   	push   ebp
c0019234:	e8 f7 72 fe ff       	call   c0000530 <strlen>
c0019239:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019241:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019245:	83 c4 10             	add    esp,0x10
c0019248:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001924c:	75 0a                	jne    c0019258 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001924e:	b8 02 00 00 00       	mov    eax,0x2
c0019253:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019256:	74 05                	je     c001925d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019258:	b8 01 00 00 00       	mov    eax,0x1
c001925d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019261:	50                   	push   eax
c0019262:	50                   	push   eax
c0019263:	55                   	push   ebp
c0019264:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019268:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001926c:	50                   	push   eax
c001926d:	e8 7e 73 fe ff       	call   c00005f0 <strcpy>
c0019272:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019279:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001927b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019281:	5a                   	pop    edx
c0019282:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0019287:	59                   	pop    ecx
c0019288:	68 d1 10 02 c0       	push   0xc00210d1
c001928d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019293:	e8 7e f5 fe ff       	call   c0008816 <VgaText::puts(char const*)>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	31 c0                	xor    eax,eax
c001929d:	eb 05                	jmp    c00192a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001929f:	b8 04 00 00 00       	mov    eax,0x4
c00192a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00192aa:	5b                   	pop    ebx
c00192ab:	5e                   	pop    esi
c00192ac:	5f                   	pop    edi
c00192ad:	5d                   	pop    ebp
c00192ae:	c3                   	ret    

c00192af <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00192af:	57                   	push   edi
c00192b0:	56                   	push   esi
c00192b1:	53                   	push   ebx
c00192b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00192ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192be:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c00192c4:	75 08                	jne    c00192ce <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00192c6:	38 1d 24 1c 02 c0    	cmp    BYTE PTR ds:0xc0021c24,bl
c00192cc:	74 4a                	je     c0019318 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	31 d2                	xor    edx,edx
c00192d3:	0f be c3             	movsx  eax,bl
c00192d6:	68 40 73 02 c0       	push   0xc0027340
c00192db:	6a 01                	push   0x1
c00192dd:	52                   	push   edx
c00192de:	56                   	push   esi
c00192df:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c00192e6:	e8 bd 3a ff ff       	call   c000cda8 <LogicalDisk::read(unsigned long long, int, void*)>
c00192eb:	83 c4 20             	add    esp,0x20
c00192ee:	85 c0                	test   eax,eax
c00192f0:	75 0e                	jne    c0019300 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00192f2:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c00192f8:	88 1d 24 1c 02 c0    	mov    BYTE PTR ds:0xc0021c24,bl
c00192fe:	eb 18                	jmp    c0019318 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019300:	50                   	push   eax
c0019301:	68 00 08 00 00       	push   0x800
c0019306:	6a 00                	push   0x0
c0019308:	57                   	push   edi
c0019309:	e8 b2 71 fe ff       	call   c00004c0 <memset>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	b8 01 00 00 00       	mov    eax,0x1
c0019316:	eb 0e                	jmp    c0019326 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019318:	be 40 73 02 c0       	mov    esi,0xc0027340
c001931d:	b9 00 08 00 00       	mov    ecx,0x800
c0019322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019324:	31 c0                	xor    eax,eax
c0019326:	5b                   	pop    ebx
c0019327:	5e                   	pop    esi
c0019328:	5f                   	pop    edi
c0019329:	c3                   	ret    

c001932a <ISO9660::tryMount(LogicalDisk*, int)>:
c001932a:	53                   	push   ebx
c001932b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019331:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c001933b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019342:	8d 58 41             	lea    ebx,[eax+0x41]
c0019345:	0f be db             	movsx  ebx,bl
c0019348:	53                   	push   ebx
c0019349:	8d 44 24 08          	lea    eax,[esp+0x8]
c001934d:	50                   	push   eax
c001934e:	6a 10                	push   0x10
c0019350:	e8 5a ff ff ff       	call   c00192af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	31 d2                	xor    edx,edx
c001935a:	85 c0                	test   eax,eax
c001935c:	75 33                	jne    c0019391 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001935e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019363:	75 2c                	jne    c0019391 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019365:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001936a:	75 25                	jne    c0019391 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001936c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019371:	75 1e                	jne    c0019391 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019373:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019378:	75 17                	jne    c0019391 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001937a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001937f:	75 10                	jne    c0019391 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019381:	83 ec 0c             	sub    esp,0xc
c0019384:	53                   	push   ebx
c0019385:	e8 b2 d4 fe ff       	call   c000683c <init_percd>
c001938a:	83 c4 10             	add    esp,0x10
c001938d:	40                   	inc    eax
c001938e:	0f 95 c2             	setne  dl
c0019391:	81 c4 08 08 00 00    	add    esp,0x808
c0019397:	88 d0                	mov    al,dl
c0019399:	5b                   	pop    ebx
c001939a:	c3                   	ret    
c001939b:	90                   	nop

c001939c <ISO9660::ISO9660()>:
c001939c:	83 ec 0c             	sub    esp,0xc
c001939f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193a3:	83 ec 0c             	sub    esp,0xc
c00193a6:	50                   	push   eax
c00193a7:	e8 d8 15 ff ff       	call   c000a984 <Filesystem::Filesystem()>
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	ba ec 10 02 c0       	mov    edx,0xc00210ec
c00193b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193b8:	89 10                	mov    DWORD PTR [eax],edx
c00193ba:	e8 8f d5 fe ff       	call   c000694e <fs_iso9660_init>
c00193bf:	90                   	nop
c00193c0:	83 c4 0c             	add    esp,0xc
c00193c3:	c3                   	ret    

c00193c4 <SoundCard::beginPlayback()>:
c00193c4:	c7 44 24 04 4c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002114c
c00193cc:	e9 46 70 ff ff       	jmp    c0010417 <KePanic(char const*)>
c00193d1:	90                   	nop

c00193d2 <SoundCard::stopPlayback()>:
c00193d2:	c7 44 24 04 4c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002114c
c00193da:	e9 38 70 ff ff       	jmp    c0010417 <KePanic(char const*)>
c00193df:	90                   	nop

c00193e0 <SoundCard::SoundCard(char const*)>:
c00193e0:	83 ec 1c             	sub    esp,0x1c
c00193e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193e7:	83 ec 08             	sub    esp,0x8
c00193ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193ee:	50                   	push   eax
c00193ef:	e8 40 28 ff ff       	call   c000bc34 <Device::Device(char const*)>
c00193f4:	83 c4 10             	add    esp,0x10
c00193f7:	ba 98 11 02 c0       	mov    edx,0xc0021198
c00193fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019400:	89 10                	mov    DWORD PTR [eax],edx
c0019402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019406:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001940d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019411:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001941b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001941f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001942d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001943b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019445:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001944d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019452:	7f 19                	jg     c001946d <SoundCard::SoundCard(char const*)+0x8d>
c0019454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001945c:	83 c2 54             	add    edx,0x54
c001945f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019467:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001946b:	eb e0                	jmp    c001944d <SoundCard::SoundCard(char const*)+0x6d>
c001946d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019471:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019478:	90                   	nop
c0019479:	83 c4 1c             	add    esp,0x1c
c001947c:	c3                   	ret    
c001947d:	90                   	nop

c001947e <SoundCard::~SoundCard()>:
c001947e:	83 ec 0c             	sub    esp,0xc
c0019481:	ba 98 11 02 c0       	mov    edx,0xc0021198
c0019486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001948a:	89 10                	mov    DWORD PTR [eax],edx
c001948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019490:	83 ec 0c             	sub    esp,0xc
c0019493:	50                   	push   eax
c0019494:	e8 09 25 ff ff       	call   c000b9a2 <Device::~Device()>
c0019499:	83 c4 10             	add    esp,0x10
c001949c:	90                   	nop
c001949d:	83 c4 0c             	add    esp,0xc
c00194a0:	c3                   	ret    
c00194a1:	90                   	nop

c00194a2 <SoundCard::~SoundCard()>:
c00194a2:	83 ec 0c             	sub    esp,0xc
c00194a5:	83 ec 0c             	sub    esp,0xc
c00194a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194ac:	e8 cd ff ff ff       	call   c001947e <SoundCard::~SoundCard()>
c00194b1:	83 c4 10             	add    esp,0x10
c00194b4:	83 ec 08             	sub    esp,0x8
c00194b7:	68 e8 01 00 00       	push   0x1e8
c00194bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194c0:	e8 a8 10 ff ff       	call   c000a56d <operator delete(void*, unsigned long)>
c00194c5:	83 c4 10             	add    esp,0x10
c00194c8:	83 c4 0c             	add    esp,0xc
c00194cb:	c3                   	ret    

c00194cc <SoundCard::configureRates(int, int, int)>:
c00194cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00194d0:	31 c0                	xor    eax,eax
c00194d2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00194d9:	75 20                	jne    c00194fb <SoundCard::configureRates(int, int, int)+0x2f>
c00194db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194df:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00194e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194e9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00194ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194f3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00194f9:	b0 01                	mov    al,0x1
c00194fb:	c3                   	ret    

c00194fc <SoundCard::getSamples16(int, short*)>:
c00194fc:	55                   	push   ebp
c00194fd:	57                   	push   edi
c00194fe:	31 ff                	xor    edi,edi
c0019500:	56                   	push   esi
c0019501:	53                   	push   ebx
c0019502:	31 db                	xor    ebx,ebx
c0019504:	83 ec 10             	sub    esp,0x10
c0019507:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001950b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001950f:	8d 04 36             	lea    eax,[esi+esi*1]
c0019512:	50                   	push   eax
c0019513:	6a 00                	push   0x0
c0019515:	55                   	push   ebp
c0019516:	e8 a5 6f fe ff       	call   c00004c0 <memset>
c001951b:	83 c4 10             	add    esp,0x10
c001951e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019522:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019529:	85 c0                	test   eax,eax
c001952b:	74 1b                	je     c0019548 <SoundCard::getSamples16(int, short*)+0x4c>
c001952d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019531:	75 15                	jne    c0019548 <SoundCard::getSamples16(int, short*)+0x4c>
c0019533:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019537:	55                   	push   ebp
c0019538:	56                   	push   esi
c0019539:	50                   	push   eax
c001953a:	e8 ed 02 00 00       	call   c001982c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001953f:	83 c4 10             	add    esp,0x10
c0019542:	39 c7                	cmp    edi,eax
c0019544:	7d 02                	jge    c0019548 <SoundCard::getSamples16(int, short*)+0x4c>
c0019546:	89 c7                	mov    edi,eax
c0019548:	43                   	inc    ebx
c0019549:	83 fb 20             	cmp    ebx,0x20
c001954c:	75 d0                	jne    c001951e <SoundCard::getSamples16(int, short*)+0x22>
c001954e:	83 c4 0c             	add    esp,0xc
c0019551:	89 f8                	mov    eax,edi
c0019553:	5b                   	pop    ebx
c0019554:	5e                   	pop    esi
c0019555:	5f                   	pop    edi
c0019556:	5d                   	pop    ebp
c0019557:	c3                   	ret    

c0019558 <SoundCard::getSamples32(int, int*)>:
c0019558:	55                   	push   ebp
c0019559:	57                   	push   edi
c001955a:	31 ff                	xor    edi,edi
c001955c:	56                   	push   esi
c001955d:	31 f6                	xor    esi,esi
c001955f:	53                   	push   ebx
c0019560:	83 ec 10             	sub    esp,0x10
c0019563:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019567:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001956b:	c1 e0 02             	shl    eax,0x2
c001956e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019572:	50                   	push   eax
c0019573:	6a 00                	push   0x0
c0019575:	55                   	push   ebp
c0019576:	e8 45 6f fe ff       	call   c00004c0 <memset>
c001957b:	83 c4 10             	add    esp,0x10
c001957e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019585:	85 c0                	test   eax,eax
c0019587:	74 1b                	je     c00195a4 <SoundCard::getSamples32(int, int*)+0x4c>
c0019589:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001958d:	75 15                	jne    c00195a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001958f:	53                   	push   ebx
c0019590:	55                   	push   ebp
c0019591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019595:	50                   	push   eax
c0019596:	e8 59 03 00 00       	call   c00198f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001959b:	83 c4 10             	add    esp,0x10
c001959e:	39 c6                	cmp    esi,eax
c00195a0:	7d 02                	jge    c00195a4 <SoundCard::getSamples32(int, int*)+0x4c>
c00195a2:	89 c6                	mov    esi,eax
c00195a4:	47                   	inc    edi
c00195a5:	83 ff 20             	cmp    edi,0x20
c00195a8:	75 d4                	jne    c001957e <SoundCard::getSamples32(int, int*)+0x26>
c00195aa:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00195b0:	85 f6                	test   esi,esi
c00195b2:	75 0f                	jne    c00195c3 <SoundCard::getSamples32(int, int*)+0x6b>
c00195b4:	84 c0                	test   al,al
c00195b6:	74 1b                	je     c00195d3 <SoundCard::getSamples32(int, int*)+0x7b>
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195bd:	53                   	push   ebx
c00195be:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00195c1:	eb 0d                	jmp    c00195d0 <SoundCard::getSamples32(int, int*)+0x78>
c00195c3:	84 c0                	test   al,al
c00195c5:	75 0c                	jne    c00195d3 <SoundCard::getSamples32(int, int*)+0x7b>
c00195c7:	83 ec 0c             	sub    esp,0xc
c00195ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195cc:	53                   	push   ebx
c00195cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	83 c4 0c             	add    esp,0xc
c00195d6:	89 f0                	mov    eax,esi
c00195d8:	5b                   	pop    ebx
c00195d9:	5e                   	pop    esi
c00195da:	5f                   	pop    edi
c00195db:	5d                   	pop    ebp
c00195dc:	c3                   	ret    
c00195dd:	90                   	nop

c00195de <SoundCard::addChannel(SoundPort*)>:
c00195de:	83 ec 0c             	sub    esp,0xc
c00195e1:	31 c0                	xor    eax,eax
c00195e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195e7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00195ef:	74 1b                	je     c001960c <SoundCard::addChannel(SoundPort*)+0x2e>
c00195f1:	40                   	inc    eax
c00195f2:	83 f8 20             	cmp    eax,0x20
c00195f5:	75 f0                	jne    c00195e7 <SoundCard::addChannel(SoundPort*)+0x9>
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	68 71 11 02 c0       	push   0xc0021171
c00195ff:	e8 13 6e ff ff       	call   c0010417 <KePanic(char const*)>
c0019604:	83 c4 10             	add    esp,0x10
c0019607:	83 c8 ff             	or     eax,0xffffffff
c001960a:	eb 0b                	jmp    c0019617 <SoundCard::addChannel(SoundPort*)+0x39>
c001960c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019610:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019617:	83 c4 0c             	add    esp,0xc
c001961a:	c3                   	ret    
c001961b:	90                   	nop

c001961c <SoundCard::removeChannel(int)>:
c001961c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019624:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001962f:	c3                   	ret    

c0019630 <SoundPort::SoundPort(int, int, int, int)>:
c0019630:	83 ec 0c             	sub    esp,0xc
c0019633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019637:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001963e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019642:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001964a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001964e:	89 10                	mov    DWORD PTR [eax],edx
c0019650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019654:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019658:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001965b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001965f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019663:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019666:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001966b:	75 13                	jne    c0019680 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001966d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019671:	8b 00                	mov    eax,DWORD PTR [eax]
c0019673:	05 a0 0f 00 00       	add    eax,0xfa0
c0019678:	01 c0                	add    eax,eax
c001967a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001967e:	66 90                	xchg   ax,ax
c0019680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019684:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019688:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001968b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001968f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001969a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001969d:	c1 e0 02             	shl    eax,0x2
c00196a0:	83 ec 0c             	sub    esp,0xc
c00196a3:	50                   	push   eax
c00196a4:	e8 ca e1 fe ff       	call   c0007873 <malloc>
c00196a9:	83 c4 10             	add    esp,0x10
c00196ac:	89 c2                	mov    edx,eax
c00196ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00196b5:	90                   	nop
c00196b6:	83 c4 0c             	add    esp,0xc
c00196b9:	c3                   	ret    
c00196ba:	66 90                	xchg   ax,ax

c00196bc <SoundPort::~SoundPort()>:
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196c6:	85 c0                	test   eax,eax
c00196c8:	74 1e                	je     c00196e8 <SoundPort::~SoundPort()+0x2c>
c00196ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196d1:	83 ec 0c             	sub    esp,0xc
c00196d4:	50                   	push   eax
c00196d5:	e8 a9 e1 fe ff       	call   c0007883 <free>
c00196da:	83 c4 10             	add    esp,0x10
c00196dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196e1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00196e8:	90                   	nop
c00196e9:	83 c4 0c             	add    esp,0xc
c00196ec:	c3                   	ret    
c00196ed:	90                   	nop
c00196ee:	66 90                	xchg   ax,ax

c00196f0 <SoundPort::unpause()>:
c00196f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196f4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00196f8:	c3                   	ret    
c00196f9:	90                   	nop
c00196fa:	66 90                	xchg   ax,ax

c00196fc <SoundPort::pause()>:
c00196fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019700:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019704:	c3                   	ret    
c0019705:	90                   	nop
c0019706:	66 90                	xchg   ax,ax

c0019708 <SoundPort::getBufferUsed()>:
c0019708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001970c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001970f:	c3                   	ret    

c0019710 <SoundPort::getBufferSize()>:
c0019710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019714:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019717:	c3                   	ret    

c0019718 <SoundPort::buffer16(short*, int)>:
c0019718:	55                   	push   ebp
c0019719:	57                   	push   edi
c001971a:	56                   	push   esi
c001971b:	53                   	push   ebx
c001971c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019720:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019724:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019727:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001972a:	74 68                	je     c0019794 <SoundPort::buffer16(short*, int)+0x7c>
c001972c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019730:	85 c9                	test   ecx,ecx
c0019732:	7e 60                	jle    c0019794 <SoundPort::buffer16(short*, int)+0x7c>
c0019734:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019738:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001973b:	8d 70 01             	lea    esi,[eax+0x1]
c001973e:	c1 e1 0f             	shl    ecx,0xf
c0019741:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019744:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019747:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001974a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001974d:	74 4d                	je     c001979c <SoundPort::buffer16(short*, int)+0x84>
c001974f:	31 f6                	xor    esi,esi
c0019751:	eb 21                	jmp    c0019774 <SoundPort::buffer16(short*, int)+0x5c>
c0019753:	90                   	nop
c0019754:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019759:	c1 e3 0f             	shl    ebx,0xf
c001975c:	8d 79 01             	lea    edi,[ecx+0x1]
c001975f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019762:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019765:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019768:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001976b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001976e:	74 1c                	je     c001978c <SoundPort::buffer16(short*, int)+0x74>
c0019770:	89 c6                	mov    esi,eax
c0019772:	66 90                	xchg   ax,ax
c0019774:	8d 46 01             	lea    eax,[esi+0x1]
c0019777:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001977b:	75 d7                	jne    c0019754 <SoundPort::buffer16(short*, int)+0x3c>
c001977d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019781:	8d 76 00             	lea    esi,[esi+0x0]
c0019784:	5b                   	pop    ebx
c0019785:	5e                   	pop    esi
c0019786:	5f                   	pop    edi
c0019787:	5d                   	pop    ebp
c0019788:	c3                   	ret    
c0019789:	8d 76 00             	lea    esi,[esi+0x0]
c001978c:	5b                   	pop    ebx
c001978d:	8d 46 02             	lea    eax,[esi+0x2]
c0019790:	5e                   	pop    esi
c0019791:	5f                   	pop    edi
c0019792:	5d                   	pop    ebp
c0019793:	c3                   	ret    
c0019794:	5b                   	pop    ebx
c0019795:	31 c0                	xor    eax,eax
c0019797:	5e                   	pop    esi
c0019798:	5f                   	pop    edi
c0019799:	5d                   	pop    ebp
c001979a:	c3                   	ret    
c001979b:	90                   	nop
c001979c:	b8 01 00 00 00       	mov    eax,0x1
c00197a1:	eb e1                	jmp    c0019784 <SoundPort::buffer16(short*, int)+0x6c>
c00197a3:	90                   	nop

c00197a4 <SoundPort::buffer32(int*, int)>:
c00197a4:	55                   	push   ebp
c00197a5:	57                   	push   edi
c00197a6:	56                   	push   esi
c00197a7:	53                   	push   ebx
c00197a8:	51                   	push   ecx
c00197a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00197ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00197b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00197be:	74 5c                	je     c001981c <SoundPort::buffer32(int*, int)+0x78>
c00197c0:	85 c0                	test   eax,eax
c00197c2:	7e 58                	jle    c001981c <SoundPort::buffer32(int*, int)+0x78>
c00197c4:	8d 71 01             	lea    esi,[ecx+0x1]
c00197c7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00197ca:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00197cd:	8b 37                	mov    esi,DWORD PTR [edi]
c00197cf:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00197d2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197d5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00197d8:	74 4a                	je     c0019824 <SoundPort::buffer32(int*, int)+0x80>
c00197da:	31 f6                	xor    esi,esi
c00197dc:	eb 1e                	jmp    c00197fc <SoundPort::buffer32(int*, int)+0x58>
c00197de:	66 90                	xchg   ax,ax
c00197e0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00197e3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00197e6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00197e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00197ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00197f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00197f6:	74 18                	je     c0019810 <SoundPort::buffer32(int*, int)+0x6c>
c00197f8:	89 de                	mov    esi,ebx
c00197fa:	66 90                	xchg   ax,ax
c00197fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00197ff:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019802:	75 dc                	jne    c00197e0 <SoundPort::buffer32(int*, int)+0x3c>
c0019804:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019807:	90                   	nop
c0019808:	5a                   	pop    edx
c0019809:	5b                   	pop    ebx
c001980a:	5e                   	pop    esi
c001980b:	5f                   	pop    edi
c001980c:	5d                   	pop    ebp
c001980d:	c3                   	ret    
c001980e:	66 90                	xchg   ax,ax
c0019810:	5a                   	pop    edx
c0019811:	8d 46 02             	lea    eax,[esi+0x2]
c0019814:	5b                   	pop    ebx
c0019815:	5e                   	pop    esi
c0019816:	5f                   	pop    edi
c0019817:	5d                   	pop    ebp
c0019818:	c3                   	ret    
c0019819:	8d 76 00             	lea    esi,[esi+0x0]
c001981c:	5a                   	pop    edx
c001981d:	31 c0                	xor    eax,eax
c001981f:	5b                   	pop    ebx
c0019820:	5e                   	pop    esi
c0019821:	5f                   	pop    edi
c0019822:	5d                   	pop    ebp
c0019823:	c3                   	ret    
c0019824:	b8 01 00 00 00       	mov    eax,0x1
c0019829:	eb dd                	jmp    c0019808 <SoundPort::buffer32(int*, int)+0x64>
c001982b:	90                   	nop

c001982c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001982c:	57                   	push   edi
c001982d:	56                   	push   esi
c001982e:	53                   	push   ebx
c001982f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019833:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019837:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001983b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019841:	39 03                	cmp    DWORD PTR [ebx],eax
c0019843:	74 13                	je     c0019858 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x2c>
c0019845:	83 ec 0c             	sub    esp,0xc
c0019848:	68 c4 11 02 c0       	push   0xc00211c4
c001984d:	e8 c5 6b ff ff       	call   c0010417 <KePanic(char const*)>
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	8d 76 00             	lea    esi,[esi+0x0]
c0019858:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001985e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019861:	74 11                	je     c0019874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019863:	83 ec 0c             	sub    esp,0xc
c0019866:	68 03 12 02 c0       	push   0xc0021203
c001986b:	e8 a7 6b ff ff       	call   c0010417 <KePanic(char const*)>
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	90                   	nop
c0019874:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001987a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001987d:	74 11                	je     c0019890 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x64>
c001987f:	83 ec 0c             	sub    esp,0xc
c0019882:	68 03 12 02 c0       	push   0xc0021203
c0019887:	e8 8b 6b ff ff       	call   c0010417 <KePanic(char const*)>
c001988c:	83 c4 10             	add    esp,0x10
c001988f:	90                   	nop
c0019890:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019893:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019897:	7e 07                	jle    c00198a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x74>
c0019899:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	85 f6                	test   esi,esi
c00198a2:	7e 28                	jle    c00198cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00198a4:	31 d2                	xor    edx,edx
c00198a6:	66 90                	xchg   ax,ax
c00198a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00198ab:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00198ae:	89 c8                	mov    eax,ecx
c00198b0:	c1 f8 1f             	sar    eax,0x1f
c00198b3:	25 ff 7f 00 00       	and    eax,0x7fff
c00198b8:	01 c8                	add    eax,ecx
c00198ba:	66 8b 0c 57          	mov    cx,WORD PTR [edi+edx*2]
c00198be:	c1 f8 0f             	sar    eax,0xf
c00198c1:	01 c1                	add    ecx,eax
c00198c3:	66 89 0c 57          	mov    WORD PTR [edi+edx*2],cx
c00198c7:	42                   	inc    edx
c00198c8:	39 f2                	cmp    edx,esi
c00198ca:	75 dc                	jne    c00198a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c00198cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00198cf:	50                   	push   eax
c00198d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00198d3:	29 f0                	sub    eax,esi
c00198d5:	c1 e0 02             	shl    eax,0x2
c00198d8:	50                   	push   eax
c00198d9:	8d 04 b2             	lea    eax,[edx+esi*4]
c00198dc:	50                   	push   eax
c00198dd:	52                   	push   edx
c00198de:	e8 ed 6a fe ff       	call   c00003d0 <memmove>
c00198e3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00198e6:	83 c4 10             	add    esp,0x10
c00198e9:	29 f2                	sub    edx,esi
c00198eb:	89 f0                	mov    eax,esi
c00198ed:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00198f0:	5b                   	pop    ebx
c00198f1:	5e                   	pop    esi
c00198f2:	5f                   	pop    edi
c00198f3:	c3                   	ret    

c00198f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00198f4:	57                   	push   edi
c00198f5:	56                   	push   esi
c00198f6:	53                   	push   ebx
c00198f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00198fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019903:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019909:	39 06                	cmp    DWORD PTR [esi],eax
c001990b:	74 13                	je     c0019920 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001990d:	83 ec 0c             	sub    esp,0xc
c0019910:	68 e4 11 02 c0       	push   0xc00211e4
c0019915:	e8 fd 6a ff ff       	call   c0010417 <KePanic(char const*)>
c001991a:	83 c4 10             	add    esp,0x10
c001991d:	8d 76 00             	lea    esi,[esi+0x0]
c0019920:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019926:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019929:	74 11                	je     c001993c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001992b:	83 ec 0c             	sub    esp,0xc
c001992e:	68 1f 12 02 c0       	push   0xc002121f
c0019933:	e8 df 6a ff ff       	call   c0010417 <KePanic(char const*)>
c0019938:	83 c4 10             	add    esp,0x10
c001993b:	90                   	nop
c001993c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019942:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019945:	74 11                	je     c0019958 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019947:	83 ec 0c             	sub    esp,0xc
c001994a:	68 1f 12 02 c0       	push   0xc002121f
c001994f:	e8 c3 6a ff ff       	call   c0010417 <KePanic(char const*)>
c0019954:	83 c4 10             	add    esp,0x10
c0019957:	90                   	nop
c0019958:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001995b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001995f:	7e 07                	jle    c0019968 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019961:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	85 ff                	test   edi,edi
c001996a:	7e 1c                	jle    c0019988 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001996c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019973:	31 c0                	xor    eax,eax
c0019975:	8d 76 00             	lea    esi,[esi+0x0]
c0019978:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001997b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001997e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019981:	83 c0 04             	add    eax,0x4
c0019984:	39 c1                	cmp    ecx,eax
c0019986:	75 f0                	jne    c0019978 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019988:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001998b:	50                   	push   eax
c001998c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001998f:	29 f8                	sub    eax,edi
c0019991:	c1 e0 02             	shl    eax,0x2
c0019994:	50                   	push   eax
c0019995:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019998:	50                   	push   eax
c0019999:	52                   	push   edx
c001999a:	e8 31 6a fe ff       	call   c00003d0 <memmove>
c001999f:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00199a2:	83 c4 10             	add    esp,0x10
c00199a5:	29 fa                	sub    edx,edi
c00199a7:	89 f8                	mov    eax,edi
c00199a9:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00199ac:	5b                   	pop    ebx
c00199ad:	5e                   	pop    esi
c00199ae:	5f                   	pop    edi
c00199af:	c3                   	ret    

c00199b0 <PCI::open(int, int, void*)>:
c00199b0:	83 ec 18             	sub    esp,0x18
c00199b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00199bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00199c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00199c3:	50                   	push   eax
c00199c4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00199c7:	31 c0                	xor    eax,eax
c00199c9:	83 c4 1c             	add    esp,0x1c
c00199cc:	c3                   	ret    
c00199cd:	90                   	nop

c00199ce <PCI::close(int, int, void*)>:
c00199ce:	31 c0                	xor    eax,eax
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <PCI::PCI()>:
c00199d2:	83 ec 0c             	sub    esp,0xc
c00199d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d9:	83 ec 08             	sub    esp,0x8
c00199dc:	68 3b 12 02 c0       	push   0xc002123b
c00199e1:	50                   	push   eax
c00199e2:	e8 0d 1a ff ff       	call   c000b3f4 <Bus::Bus(char const*)>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	ba e4 12 02 c0       	mov    edx,0xc00212e4
c00199ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f3:	89 10                	mov    DWORD PTR [eax],edx
c00199f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a07:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019a16:	31 d2                	xor    edx,edx
c0019a18:	88 c2                	mov    dl,al
c0019a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a1e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019a2f:	31 d2                	xor    edx,edx
c0019a31:	88 c2                	mov    dl,al
c0019a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a37:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019a46:	8d 50 01             	lea    edx,[eax+0x1]
c0019a49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a4d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0019a53:	31 d2                	xor    edx,edx
c0019a55:	88 c2                	mov    dl,al
c0019a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a5b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0019a5f:	83 c9 c0             	or     ecx,0xffffffc0
c0019a62:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019a66:	90                   	nop
c0019a67:	83 c4 0c             	add    esp,0xc
c0019a6a:	c3                   	ret    
c0019a6b:	90                   	nop

c0019a6c <PCI::readBAR8(unsigned int, int)>:
c0019a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a74:	f6 c2 01             	test   dl,0x1
c0019a77:	74 07                	je     c0019a80 <PCI::readBAR8(unsigned int, int)+0x14>
c0019a79:	83 e2 fc             	and    edx,0xfffffffc
c0019a7c:	01 c2                	add    edx,eax
c0019a7e:	ec                   	in     al,dx
c0019a7f:	c3                   	ret    
c0019a80:	83 e2 f0             	and    edx,0xfffffff0
c0019a83:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019a86:	c3                   	ret    
c0019a87:	90                   	nop

c0019a88 <PCI::readBAR16(unsigned int, int)>:
c0019a88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a90:	f6 c2 01             	test   dl,0x1
c0019a93:	74 08                	je     c0019a9d <PCI::readBAR16(unsigned int, int)+0x15>
c0019a95:	83 e2 fc             	and    edx,0xfffffffc
c0019a98:	01 c2                	add    edx,eax
c0019a9a:	66 ed                	in     ax,dx
c0019a9c:	c3                   	ret    
c0019a9d:	83 e2 f0             	and    edx,0xfffffff0
c0019aa0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0019aa4:	c3                   	ret    
c0019aa5:	90                   	nop

c0019aa6 <PCI::readBAR32(unsigned int, int)>:
c0019aa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aae:	f6 c2 01             	test   dl,0x1
c0019ab1:	74 07                	je     c0019aba <PCI::readBAR32(unsigned int, int)+0x14>
c0019ab3:	83 e2 fc             	and    edx,0xfffffffc
c0019ab6:	01 c2                	add    edx,eax
c0019ab8:	ed                   	in     eax,dx
c0019ab9:	c3                   	ret    
c0019aba:	83 e2 f0             	and    edx,0xfffffff0
c0019abd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019ac0:	c3                   	ret    
c0019ac1:	90                   	nop

c0019ac2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019ac2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ac6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ace:	f6 c2 01             	test   dl,0x1
c0019ad1:	74 07                	je     c0019ada <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019ad3:	83 e2 fc             	and    edx,0xfffffffc
c0019ad6:	01 ca                	add    edx,ecx
c0019ad8:	ee                   	out    dx,al
c0019ad9:	c3                   	ret    
c0019ada:	83 e2 f0             	and    edx,0xfffffff0
c0019add:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019ae0:	c3                   	ret    
c0019ae1:	90                   	nop

c0019ae2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019ae2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019aee:	f6 c2 01             	test   dl,0x1
c0019af1:	74 08                	je     c0019afb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0019af3:	83 e2 fc             	and    edx,0xfffffffc
c0019af6:	01 ca                	add    edx,ecx
c0019af8:	66 ef                	out    dx,ax
c0019afa:	c3                   	ret    
c0019afb:	83 e2 f0             	and    edx,0xfffffff0
c0019afe:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019b02:	c3                   	ret    
c0019b03:	90                   	nop

c0019b04 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019b04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019b10:	f6 c2 01             	test   dl,0x1
c0019b13:	74 07                	je     c0019b1c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019b15:	83 e2 fc             	and    edx,0xfffffffc
c0019b18:	01 ca                	add    edx,ecx
c0019b1a:	ef                   	out    dx,eax
c0019b1b:	c3                   	ret    
c0019b1c:	83 e2 f0             	and    edx,0xfffffff0
c0019b1f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019b22:	c3                   	ret    
c0019b23:	90                   	nop

c0019b24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019b24:	55                   	push   ebp
c0019b25:	57                   	push   edi
c0019b26:	56                   	push   esi
c0019b27:	53                   	push   ebx
c0019b28:	83 ec 0c             	sub    esp,0xc
c0019b2b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019b2f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0019b33:	89 f0                	mov    eax,esi
c0019b35:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019b39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b3d:	3c 07                	cmp    al,0x7
c0019b3f:	76 10                	jbe    c0019b51 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019b41:	83 ec 0c             	sub    esp,0xc
c0019b44:	68 43 12 02 c0       	push   0xc0021243
c0019b49:	e8 c9 68 ff ff       	call   c0010417 <KePanic(char const*)>
c0019b4e:	83 c4 10             	add    esp,0x10
c0019b51:	80 fb 0f             	cmp    bl,0xf
c0019b54:	76 10                	jbe    c0019b66 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019b56:	83 ec 0c             	sub    esp,0xc
c0019b59:	68 73 12 02 c0       	push   0xc0021273
c0019b5e:	e8 b4 68 ff ff       	call   c0010417 <KePanic(char const*)>
c0019b63:	83 c4 10             	add    esp,0x10
c0019b66:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b69:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019b6e:	83 c8 f0             	or     eax,0xfffffff0
c0019b71:	ee                   	out    dx,al
c0019b72:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019b77:	89 e8                	mov    eax,ebp
c0019b79:	ee                   	out    dx,al
c0019b7a:	83 c4 0c             	add    esp,0xc
c0019b7d:	89 d8                	mov    eax,ebx
c0019b7f:	66 81 e7 fc 00       	and    di,0xfc
c0019b84:	c1 e0 08             	shl    eax,0x8
c0019b87:	5b                   	pop    ebx
c0019b88:	5e                   	pop    esi
c0019b89:	09 f8                	or     eax,edi
c0019b8b:	66 0d 00 c0          	or     ax,0xc000
c0019b8f:	5f                   	pop    edi
c0019b90:	5d                   	pop    ebp
c0019b91:	c3                   	ret    

c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019b92:	57                   	push   edi
c0019b93:	56                   	push   esi
c0019b94:	53                   	push   ebx
c0019b95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ba1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ba5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019bab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019baf:	83 ff 01             	cmp    edi,0x1
c0019bb2:	75 3e                	jne    c0019bf2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0019bb4:	89 de                	mov    esi,ebx
c0019bb6:	0f b6 c0             	movzx  eax,al
c0019bb9:	c1 e0 10             	shl    eax,0x10
c0019bbc:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019bc2:	0f b6 c9             	movzx  ecx,cl
c0019bc5:	c1 e1 08             	shl    ecx,0x8
c0019bc8:	09 f0                	or     eax,esi
c0019bca:	0f b6 d2             	movzx  edx,dl
c0019bcd:	c1 e2 0b             	shl    edx,0xb
c0019bd0:	09 c8                	or     eax,ecx
c0019bd2:	09 d0                	or     eax,edx
c0019bd4:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019bd9:	0d 00 00 00 80       	or     eax,0x80000000
c0019bde:	ef                   	out    dx,eax
c0019bdf:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019be4:	ed                   	in     eax,dx
c0019be5:	83 e3 02             	and    ebx,0x2
c0019be8:	0f b6 cb             	movzx  ecx,bl
c0019beb:	c1 e1 03             	shl    ecx,0x3
c0019bee:	d3 e8                	shr    eax,cl
c0019bf0:	eb 43                	jmp    c0019c35 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019bf2:	83 ff 02             	cmp    edi,0x2
c0019bf5:	75 2c                	jne    c0019c23 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0019bf7:	83 ec 0c             	sub    esp,0xc
c0019bfa:	0f b6 fb             	movzx  edi,bl
c0019bfd:	57                   	push   edi
c0019bfe:	0f b6 c9             	movzx  ecx,cl
c0019c01:	51                   	push   ecx
c0019c02:	0f b6 d2             	movzx  edx,dl
c0019c05:	52                   	push   edx
c0019c06:	0f b6 c0             	movzx  eax,al
c0019c09:	50                   	push   eax
c0019c0a:	56                   	push   esi
c0019c0b:	e8 14 ff ff ff       	call   c0019b24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c10:	89 c2                	mov    edx,eax
c0019c12:	ed                   	in     eax,dx
c0019c13:	83 e3 02             	and    ebx,0x2
c0019c16:	83 c4 20             	add    esp,0x20
c0019c19:	0f b6 cb             	movzx  ecx,bl
c0019c1c:	c1 e1 03             	shl    ecx,0x3
c0019c1f:	d3 e8                	shr    eax,cl
c0019c21:	eb 12                	jmp    c0019c35 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019c23:	83 ec 0c             	sub    esp,0xc
c0019c26:	68 a3 12 02 c0       	push   0xc00212a3
c0019c2b:	e8 e7 67 ff ff       	call   c0010417 <KePanic(char const*)>
c0019c30:	83 c4 10             	add    esp,0x10
c0019c33:	31 c0                	xor    eax,eax
c0019c35:	5b                   	pop    ebx
c0019c36:	5e                   	pop    esi
c0019c37:	5f                   	pop    edi
c0019c38:	c3                   	ret    
c0019c39:	90                   	nop

c0019c3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019c3a:	83 ec 18             	sub    esp,0x18
c0019c3d:	6a 00                	push   0x0
c0019c3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c44:	50                   	push   eax
c0019c45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c4a:	50                   	push   eax
c0019c4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c50:	50                   	push   eax
c0019c51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c55:	e8 38 ff ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c5a:	83 c4 2c             	add    esp,0x2c
c0019c5d:	c3                   	ret    

c0019c5e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019c5e:	83 ec 18             	sub    esp,0x18
c0019c61:	6a 0e                	push   0xe
c0019c63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c68:	50                   	push   eax
c0019c69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c6e:	50                   	push   eax
c0019c6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c74:	50                   	push   eax
c0019c75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c79:	e8 14 ff ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c7e:	83 c4 2c             	add    esp,0x2c
c0019c81:	0f b6 c0             	movzx  eax,al
c0019c84:	c3                   	ret    
c0019c85:	90                   	nop

c0019c86 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019c86:	55                   	push   ebp
c0019c87:	57                   	push   edi
c0019c88:	56                   	push   esi
c0019c89:	53                   	push   ebx
c0019c8a:	83 ec 18             	sub    esp,0x18
c0019c8d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019c92:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019c97:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019c9c:	6a 0a                	push   0xa
c0019c9e:	56                   	push   esi
c0019c9f:	55                   	push   ebp
c0019ca0:	57                   	push   edi
c0019ca1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ca5:	e8 e8 fe ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019caa:	83 c4 14             	add    esp,0x14
c0019cad:	6a 0a                	push   0xa
c0019caf:	89 c3                	mov    ebx,eax
c0019cb1:	56                   	push   esi
c0019cb2:	55                   	push   ebp
c0019cb3:	57                   	push   edi
c0019cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019cb8:	e8 d5 fe ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cbd:	83 c4 2c             	add    esp,0x2c
c0019cc0:	0f b6 db             	movzx  ebx,bl
c0019cc3:	25 00 ff 00 00       	and    eax,0xff00
c0019cc8:	09 d8                	or     eax,ebx
c0019cca:	5b                   	pop    ebx
c0019ccb:	5e                   	pop    esi
c0019ccc:	5f                   	pop    edi
c0019ccd:	5d                   	pop    ebp
c0019cce:	c3                   	ret    
c0019ccf:	90                   	nop

c0019cd0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019cd0:	83 ec 18             	sub    esp,0x18
c0019cd3:	6a 08                	push   0x8
c0019cd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cda:	50                   	push   eax
c0019cdb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ce0:	50                   	push   eax
c0019ce1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ce6:	50                   	push   eax
c0019ce7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ceb:	e8 a2 fe ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cf0:	83 c4 2c             	add    esp,0x2c
c0019cf3:	0f b6 c4             	movzx  eax,ah
c0019cf6:	c3                   	ret    
c0019cf7:	90                   	nop

c0019cf8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019cf8:	83 ec 18             	sub    esp,0x18
c0019cfb:	6a 08                	push   0x8
c0019cfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d02:	50                   	push   eax
c0019d03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d08:	50                   	push   eax
c0019d09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d0e:	50                   	push   eax
c0019d0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d13:	e8 7a fe ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d18:	83 c4 2c             	add    esp,0x2c
c0019d1b:	c3                   	ret    

c0019d1c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019d1c:	83 ec 18             	sub    esp,0x18
c0019d1f:	6a 3c                	push   0x3c
c0019d21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d26:	50                   	push   eax
c0019d27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d2c:	50                   	push   eax
c0019d2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d32:	50                   	push   eax
c0019d33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d37:	e8 56 fe ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d3c:	83 c4 2c             	add    esp,0x2c
c0019d3f:	c3                   	ret    

c0019d40 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019d40:	83 ec 18             	sub    esp,0x18
c0019d43:	6a 18                	push   0x18
c0019d45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d4a:	50                   	push   eax
c0019d4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d50:	50                   	push   eax
c0019d51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d56:	50                   	push   eax
c0019d57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d5b:	e8 32 fe ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d60:	83 c4 2c             	add    esp,0x2c
c0019d63:	0f b6 c4             	movzx  eax,ah
c0019d66:	c3                   	ret    
c0019d67:	90                   	nop

c0019d68 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019d68:	55                   	push   ebp
c0019d69:	57                   	push   edi
c0019d6a:	56                   	push   esi
c0019d6b:	53                   	push   ebx
c0019d6c:	83 ec 28             	sub    esp,0x28
c0019d6f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019d73:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0019d78:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019d7f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019d84:	8d 43 12             	lea    eax,[ebx+0x12]
c0019d87:	83 c3 10             	add    ebx,0x10
c0019d8a:	0f b6 c0             	movzx  eax,al
c0019d8d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019d92:	50                   	push   eax
c0019d93:	51                   	push   ecx
c0019d94:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019d98:	57                   	push   edi
c0019d99:	55                   	push   ebp
c0019d9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019d9e:	e8 ef fd ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019da3:	83 c4 14             	add    esp,0x14
c0019da6:	0f b6 db             	movzx  ebx,bl
c0019da9:	53                   	push   ebx
c0019daa:	89 c6                	mov    esi,eax
c0019dac:	c1 e6 10             	shl    esi,0x10
c0019daf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019db3:	51                   	push   ecx
c0019db4:	57                   	push   edi
c0019db5:	55                   	push   ebp
c0019db6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019dba:	e8 d3 fd ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019dbf:	83 c4 3c             	add    esp,0x3c
c0019dc2:	0f b7 c0             	movzx  eax,ax
c0019dc5:	5b                   	pop    ebx
c0019dc6:	09 f0                	or     eax,esi
c0019dc8:	5e                   	pop    esi
c0019dc9:	5f                   	pop    edi
c0019dca:	5d                   	pop    ebp
c0019dcb:	c3                   	ret    

c0019dcc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019dcc:	55                   	push   ebp
c0019dcd:	57                   	push   edi
c0019dce:	56                   	push   esi
c0019dcf:	53                   	push   ebx
c0019dd0:	83 ec 0c             	sub    esp,0xc
c0019dd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019dd7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019ddb:	89 f5                	mov    ebp,esi
c0019ddd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019de1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019de7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019deb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019def:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019df3:	83 f9 01             	cmp    ecx,0x1
c0019df6:	75 5d                	jne    c0019e55 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019df8:	0f b6 c8             	movzx  ecx,al
c0019dfb:	c1 e1 10             	shl    ecx,0x10
c0019dfe:	89 f0                	mov    eax,esi
c0019e00:	25 fc 00 00 00       	and    eax,0xfc
c0019e05:	09 c1                	or     ecx,eax
c0019e07:	89 e8                	mov    eax,ebp
c0019e09:	0f b6 c0             	movzx  eax,al
c0019e0c:	c1 e0 08             	shl    eax,0x8
c0019e0f:	0f b6 d2             	movzx  edx,dl
c0019e12:	c1 e2 0b             	shl    edx,0xb
c0019e15:	09 c1                	or     ecx,eax
c0019e17:	09 d1                	or     ecx,edx
c0019e19:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019e1e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019e24:	89 c8                	mov    eax,ecx
c0019e26:	ef                   	out    dx,eax
c0019e27:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019e2c:	ed                   	in     eax,dx
c0019e2d:	0f b7 db             	movzx  ebx,bx
c0019e30:	83 e6 02             	and    esi,0x2
c0019e33:	74 0a                	je     c0019e3f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019e35:	0f b7 d0             	movzx  edx,ax
c0019e38:	c1 e3 10             	shl    ebx,0x10
c0019e3b:	09 d3                	or     ebx,edx
c0019e3d:	eb 05                	jmp    c0019e44 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019e3f:	66 31 c0             	xor    ax,ax
c0019e42:	09 c3                	or     ebx,eax
c0019e44:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019e49:	89 c8                	mov    eax,ecx
c0019e4b:	ef                   	out    dx,eax
c0019e4c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019e51:	89 d8                	mov    eax,ebx
c0019e53:	eb 41                	jmp    c0019e96 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019e55:	83 f9 02             	cmp    ecx,0x2
c0019e58:	75 45                	jne    c0019e9f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019e5a:	83 ec 0c             	sub    esp,0xc
c0019e5d:	89 f1                	mov    ecx,esi
c0019e5f:	0f b6 f1             	movzx  esi,cl
c0019e62:	89 e9                	mov    ecx,ebp
c0019e64:	56                   	push   esi
c0019e65:	0f b6 c9             	movzx  ecx,cl
c0019e68:	51                   	push   ecx
c0019e69:	0f b6 d2             	movzx  edx,dl
c0019e6c:	52                   	push   edx
c0019e6d:	0f b6 c0             	movzx  eax,al
c0019e70:	50                   	push   eax
c0019e71:	57                   	push   edi
c0019e72:	e8 ad fc ff ff       	call   c0019b24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e77:	89 c2                	mov    edx,eax
c0019e79:	ed                   	in     eax,dx
c0019e7a:	83 c4 20             	add    esp,0x20
c0019e7d:	0f b7 db             	movzx  ebx,bx
c0019e80:	f6 c2 02             	test   dl,0x2
c0019e83:	74 0c                	je     c0019e91 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019e85:	0f b7 c8             	movzx  ecx,ax
c0019e88:	89 d8                	mov    eax,ebx
c0019e8a:	c1 e0 10             	shl    eax,0x10
c0019e8d:	09 c8                	or     eax,ecx
c0019e8f:	eb 05                	jmp    c0019e96 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019e91:	66 31 c0             	xor    ax,ax
c0019e94:	09 d8                	or     eax,ebx
c0019e96:	ef                   	out    dx,eax
c0019e97:	83 c4 0c             	add    esp,0xc
c0019e9a:	5b                   	pop    ebx
c0019e9b:	5e                   	pop    esi
c0019e9c:	5f                   	pop    edi
c0019e9d:	5d                   	pop    ebp
c0019e9e:	c3                   	ret    
c0019e9f:	c7 44 24 20 a3 12 02 c0 	mov    DWORD PTR [esp+0x20],0xc00212a3
c0019ea7:	83 c4 0c             	add    esp,0xc
c0019eaa:	5b                   	pop    ebx
c0019eab:	5e                   	pop    esi
c0019eac:	5f                   	pop    edi
c0019ead:	5d                   	pop    ebp
c0019eae:	e9 64 65 ff ff       	jmp    c0010417 <KePanic(char const*)>
c0019eb3:	90                   	nop

c0019eb4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019eb4:	55                   	push   ebp
c0019eb5:	57                   	push   edi
c0019eb6:	56                   	push   esi
c0019eb7:	53                   	push   ebx
c0019eb8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ebe:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019ec5:	0f 85 bd 00 00 00    	jne    c0019f88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019ecb:	83 ec 0c             	sub    esp,0xc
c0019ece:	68 14 01 00 00       	push   0x114
c0019ed3:	e8 9b d9 fe ff       	call   c0007873 <malloc>
c0019ed8:	83 c4 0c             	add    esp,0xc
c0019edb:	89 c3                	mov    ebx,eax
c0019edd:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019ee3:	68 a9 12 02 c0       	push   0xc00212a9
c0019ee8:	50                   	push   eax
c0019ee9:	e8 ea 0c ff ff       	call   c000abd8 <File::File(char const*, Process*)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	85 db                	test   ebx,ebx
c0019ef3:	0f 84 47 02 00 00    	je     c001a140 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019ef9:	56                   	push   esi
c0019efa:	56                   	push   esi
c0019efb:	6a 01                	push   0x1
c0019efd:	53                   	push   ebx
c0019efe:	e8 95 0d ff ff       	call   c000ac98 <File::open(FileOpenMode)>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	85 c0                	test   eax,eax
c0019f08:	0f 85 32 02 00 00    	jne    c001a140 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019f0e:	52                   	push   edx
c0019f0f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019f13:	50                   	push   eax
c0019f14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019f18:	50                   	push   eax
c0019f19:	53                   	push   ebx
c0019f1a:	e8 25 10 ff ff       	call   c000af44 <File::stat(unsigned long long*, bool*)>
c0019f1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f23:	40                   	inc    eax
c0019f24:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f27:	e8 47 d9 fe ff       	call   c0007873 <malloc>
c0019f2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f30:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019f35:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019f39:	59                   	pop    ecx
c0019f3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f3c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019f40:	51                   	push   ecx
c0019f41:	50                   	push   eax
c0019f42:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019f46:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019f4a:	53                   	push   ebx
c0019f4b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019f4e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019f52:	83 c4 20             	add    esp,0x20
c0019f55:	89 c8                	mov    eax,ecx
c0019f57:	99                   	cdq    
c0019f58:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019f5c:	0f 85 de 01 00 00    	jne    c001a140 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019f62:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019f66:	0f 85 d4 01 00 00    	jne    c001a140 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019f6c:	83 ec 0c             	sub    esp,0xc
c0019f6f:	53                   	push   ebx
c0019f70:	e8 81 0d ff ff       	call   c000acf6 <File::close()>
c0019f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f79:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019f80:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019f85:	83 c4 10             	add    esp,0x10
c0019f88:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019f8d:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019f93:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f96:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019f9e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019fa3:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019fab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019fb0:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019fb7:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019fbb:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019fc2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019fc6:	31 ff                	xor    edi,edi
c0019fc8:	31 f6                	xor    esi,esi
c0019fca:	31 db                	xor    ebx,ebx
c0019fcc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019fcf:	0f 8e 6b 01 00 00    	jle    c001a140 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019fd5:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019fd8:	d4 40                	aam    0x40
c0019fda:	d5 39                	aad    0x39
c0019fdc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fe0:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019fe4:	d4 40                	aam    0x40
c0019fe6:	d5 39                	aad    0x39
c0019fe8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019fec:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019ff0:	d4 40                	aam    0x40
c0019ff2:	d5 39                	aad    0x39
c0019ff4:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019ff8:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019ffc:	d4 40                	aam    0x40
c0019ffe:	d5 39                	aad    0x39
c001a000:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a004:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001a008:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a00c:	3c 56                	cmp    al,0x56
c001a00e:	74 45                	je     c001a055 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c001a010:	d4 40                	aam    0x40
c001a012:	d5 39                	aad    0x39
c001a014:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a017:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001a01b:	0f b6 c9             	movzx  ecx,cl
c001a01e:	c1 e1 04             	shl    ecx,0x4
c001a021:	d4 40                	aam    0x40
c001a023:	d5 39                	aad    0x39
c001a025:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a028:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001a02c:	0f b6 db             	movzx  ebx,bl
c001a02f:	09 cb                	or     ebx,ecx
c001a031:	c1 e3 04             	shl    ebx,0x4
c001a034:	d4 40                	aam    0x40
c001a036:	d5 39                	aad    0x39
c001a038:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a03b:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001a03f:	0f b6 c9             	movzx  ecx,cl
c001a042:	09 cb                	or     ebx,ecx
c001a044:	c1 e3 04             	shl    ebx,0x4
c001a047:	89 d9                	mov    ecx,ebx
c001a049:	d4 40                	aam    0x40
c001a04b:	d5 39                	aad    0x39
c001a04d:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a050:	0f b6 db             	movzx  ebx,bl
c001a053:	09 cb                	or     ebx,ecx
c001a055:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001a059:	80 f9 58             	cmp    cl,0x58
c001a05c:	74 47                	je     c001a0a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c001a05e:	88 c8                	mov    al,cl
c001a060:	d4 40                	aam    0x40
c001a062:	d5 39                	aad    0x39
c001a064:	83 e8 30             	sub    eax,0x30
c001a067:	0f b6 e8             	movzx  ebp,al
c001a06a:	c1 e5 04             	shl    ebp,0x4
c001a06d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001a071:	d4 40                	aam    0x40
c001a073:	d5 39                	aad    0x39
c001a075:	83 e8 30             	sub    eax,0x30
c001a078:	0f b6 f0             	movzx  esi,al
c001a07b:	09 ee                	or     esi,ebp
c001a07d:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001a081:	c1 e6 04             	shl    esi,0x4
c001a084:	d4 40                	aam    0x40
c001a086:	d5 39                	aad    0x39
c001a088:	83 e8 30             	sub    eax,0x30
c001a08b:	0f b6 e8             	movzx  ebp,al
c001a08e:	09 ee                	or     esi,ebp
c001a090:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001a094:	c1 e6 04             	shl    esi,0x4
c001a097:	89 f5                	mov    ebp,esi
c001a099:	d4 40                	aam    0x40
c001a09b:	d5 39                	aad    0x39
c001a09d:	83 e8 30             	sub    eax,0x30
c001a0a0:	0f b6 f0             	movzx  esi,al
c001a0a3:	09 ee                	or     esi,ebp
c001a0a5:	83 c7 10             	add    edi,0x10
c001a0a8:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001a0ac:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001a0af:	3c 0a                	cmp    al,0xa
c001a0b1:	74 09                	je     c001a0bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a0b3:	45                   	inc    ebp
c001a0b4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001a0b7:	75 16                	jne    c001a0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c001a0b9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001a0bc:	3c 0a                	cmp    al,0xa
c001a0be:	0f 94 c0             	sete   al
c001a0c1:	0f b6 c0             	movzx  eax,al
c001a0c4:	01 c7                	add    edi,eax
c001a0c6:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001a0cb:	75 0c                	jne    c001a0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c001a0cd:	eb 15                	jmp    c001a0e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c001a0cf:	47                   	inc    edi
c001a0d0:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a0d3:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a0d7:	eb d3                	jmp    c001a0ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c001a0d9:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001a0de:	0f 85 e8 fe ff ff    	jne    c0019fcc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a0e4:	80 f9 58             	cmp    cl,0x58
c001a0e7:	74 0b                	je     c001a0f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c001a0e9:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001a0ee:	0f 85 d8 fe ff ff    	jne    c0019fcc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a0f4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a0f8:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a0fc:	c1 e1 04             	shl    ecx,0x4
c001a0ff:	83 e8 30             	sub    eax,0x30
c001a102:	09 c8                	or     eax,ecx
c001a104:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001a108:	0f 85 be fe ff ff    	jne    c0019fcc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a10e:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001a112:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a116:	c1 e1 04             	shl    ecx,0x4
c001a119:	83 e8 30             	sub    eax,0x30
c001a11c:	09 c8                	or     eax,ecx
c001a11e:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001a122:	0f 85 a4 fe ff ff    	jne    c0019fcc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a128:	50                   	push   eax
c001a129:	50                   	push   eax
c001a12a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a12e:	50                   	push   eax
c001a12f:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001a136:	e8 b5 64 fe ff       	call   c00005f0 <strcpy>
c001a13b:	83 c4 10             	add    esp,0x10
c001a13e:	eb 15                	jmp    c001a155 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c001a140:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a147:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001a152:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a155:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a15c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a162:	5b                   	pop    ebx
c001a163:	5e                   	pop    esi
c001a164:	5f                   	pop    edi
c001a165:	5d                   	pop    ebp
c001a166:	c3                   	ret    
c001a167:	90                   	nop

c001a168 <PCI::checkBus(unsigned char)>:
c001a168:	56                   	push   esi
c001a169:	31 f6                	xor    esi,esi
c001a16b:	53                   	push   ebx
c001a16c:	51                   	push   ecx
c001a16d:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001a171:	52                   	push   edx
c001a172:	56                   	push   esi
c001a173:	46                   	inc    esi
c001a174:	0f b6 c3             	movzx  eax,bl
c001a177:	50                   	push   eax
c001a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a17c:	e8 f3 02 00 00       	call   c001a474 <PCI::checkDevice(unsigned char, unsigned char)>
c001a181:	83 c4 10             	add    esp,0x10
c001a184:	83 fe 20             	cmp    esi,0x20
c001a187:	75 e8                	jne    c001a171 <PCI::checkBus(unsigned char)+0x9>
c001a189:	58                   	pop    eax
c001a18a:	5b                   	pop    ebx
c001a18b:	5e                   	pop    esi
c001a18c:	c3                   	ret    
c001a18d:	90                   	nop

c001a18e <PCI::foundDevice(PCIDeviceInfo)>:
c001a18e:	55                   	push   ebp
c001a18f:	57                   	push   edi
c001a190:	56                   	push   esi
c001a191:	53                   	push   ebx
c001a192:	83 ec 1c             	sub    esp,0x1c
c001a195:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a199:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001a19f:	0f 84 52 01 00 00    	je     c001a2f7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a1a5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a1a9:	66 81 f9 06 04       	cmp    cx,0x406
c001a1ae:	75 2c                	jne    c001a1dc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001a1b0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a1b5:	50                   	push   eax
c001a1b6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a1bb:	50                   	push   eax
c001a1bc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a1c1:	50                   	push   eax
c001a1c2:	56                   	push   esi
c001a1c3:	e8 78 fb ff ff       	call   c0019d40 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a1c8:	0f b6 c0             	movzx  eax,al
c001a1cb:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a1cf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a1d3:	83 c4 2c             	add    esp,0x2c
c001a1d6:	5b                   	pop    ebx
c001a1d7:	5e                   	pop    esi
c001a1d8:	5f                   	pop    edi
c001a1d9:	5d                   	pop    ebp
c001a1da:	eb 8c                	jmp    c001a168 <PCI::checkBus(unsigned char)>
c001a1dc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a1e0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1ea:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a1ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a1f2:	88 d3                	mov    bl,dl
c001a1f4:	85 c0                	test   eax,eax
c001a1f6:	74 33                	je     c001a22b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a1f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a1fb:	85 d2                	test   edx,edx
c001a1fd:	74 28                	je     c001a227 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a1ff:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a205:	31 ef                	xor    edi,ebp
c001a207:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a20d:	75 18                	jne    c001a227 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a20f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a213:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a219:	75 0c                	jne    c001a227 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a21b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a221:	0f 84 d0 00 00 00    	je     c001a2f7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a227:	8b 00                	mov    eax,DWORD PTR [eax]
c001a229:	eb c9                	jmp    c001a1f4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a22b:	66 81 f9 01 06       	cmp    cx,0x601
c001a230:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a234:	75 19                	jne    c001a24f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a236:	83 ec 0c             	sub    esp,0xc
c001a239:	68 64 01 00 00       	push   0x164
c001a23e:	e8 30 d6 fe ff       	call   c0007873 <malloc>
c001a243:	89 c5                	mov    ebp,eax
c001a245:	89 04 24             	mov    DWORD PTR [esp],eax
c001a248:	e8 4b 0e 00 00       	call   c001b098 <SATABus::SATABus()>
c001a24d:	eb 1e                	jmp    c001a26d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a24f:	66 81 f9 01 01       	cmp    cx,0x101
c001a254:	75 60                	jne    c001a2b6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a256:	83 ec 0c             	sub    esp,0xc
c001a259:	68 70 02 00 00       	push   0x270
c001a25e:	e8 10 d6 fe ff       	call   c0007873 <malloc>
c001a263:	89 c5                	mov    ebp,eax
c001a265:	89 04 24             	mov    DWORD PTR [esp],eax
c001a268:	e8 cb 02 00 00       	call   c001a538 <IDE::IDE()>
c001a26d:	58                   	pop    eax
c001a26e:	5a                   	pop    edx
c001a26f:	55                   	push   ebp
c001a270:	56                   	push   esi
c001a271:	e8 26 18 ff ff       	call   c000ba9c <Device::addChild(Device*)>
c001a276:	83 ec 1c             	sub    esp,0x1c
c001a279:	b9 09 00 00 00       	mov    ecx,0x9
c001a27e:	fc                   	cld    
c001a27f:	89 e7                	mov    edi,esp
c001a281:	89 de                	mov    esi,ebx
c001a283:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a285:	55                   	push   ebp
c001a286:	e8 5b 17 ff ff       	call   c000b9e6 <Device::preOpenPCI(PCIDeviceInfo)>
c001a28b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a28e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a292:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a29a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a2a2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a2aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a2ad:	83 c4 4c             	add    esp,0x4c
c001a2b0:	5b                   	pop    ebx
c001a2b1:	5e                   	pop    esi
c001a2b2:	5f                   	pop    edi
c001a2b3:	5d                   	pop    ebp
c001a2b4:	ff e0                	jmp    eax
c001a2b6:	83 ec 0c             	sub    esp,0xc
c001a2b9:	68 58 01 00 00       	push   0x158
c001a2be:	e8 b0 d5 fe ff       	call   c0007873 <malloc>
c001a2c3:	89 c5                	mov    ebp,eax
c001a2c5:	58                   	pop    eax
c001a2c6:	5a                   	pop    edx
c001a2c7:	68 c2 12 02 c0       	push   0xc00212c2
c001a2cc:	55                   	push   ebp
c001a2cd:	e8 68 1a ff ff       	call   c000bd3a <DriverlessDevice::DriverlessDevice(char const*)>
c001a2d2:	59                   	pop    ecx
c001a2d3:	5f                   	pop    edi
c001a2d4:	55                   	push   ebp
c001a2d5:	56                   	push   esi
c001a2d6:	e8 c1 17 ff ff       	call   c000ba9c <Device::addChild(Device*)>
c001a2db:	b9 09 00 00 00       	mov    ecx,0x9
c001a2e0:	fc                   	cld    
c001a2e1:	89 df                	mov    edi,ebx
c001a2e3:	89 de                	mov    esi,ebx
c001a2e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a2e7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a2eb:	83 c4 2c             	add    esp,0x2c
c001a2ee:	5b                   	pop    ebx
c001a2ef:	5e                   	pop    esi
c001a2f0:	5f                   	pop    edi
c001a2f1:	5d                   	pop    ebp
c001a2f2:	e9 ef 16 ff ff       	jmp    c000b9e6 <Device::preOpenPCI(PCIDeviceInfo)>
c001a2f7:	83 c4 1c             	add    esp,0x1c
c001a2fa:	5b                   	pop    ebx
c001a2fb:	5e                   	pop    esi
c001a2fc:	5f                   	pop    edi
c001a2fd:	5d                   	pop    ebp
c001a2fe:	c3                   	ret    
c001a2ff:	90                   	nop

c001a300 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a300:	55                   	push   ebp
c001a301:	57                   	push   edi
c001a302:	56                   	push   esi
c001a303:	53                   	push   ebx
c001a304:	83 ec 68             	sub    esp,0x68
c001a307:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a30e:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a312:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a316:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a31d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a321:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a328:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a32c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a331:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a336:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001a33b:	6a 0c                	push   0xc
c001a33d:	57                   	push   edi
c001a33e:	53                   	push   ebx
c001a33f:	56                   	push   esi
c001a340:	55                   	push   ebp
c001a341:	e8 4c f8 ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a346:	83 c4 20             	add    esp,0x20
c001a349:	57                   	push   edi
c001a34a:	53                   	push   ebx
c001a34b:	56                   	push   esi
c001a34c:	55                   	push   ebp
c001a34d:	e8 34 f9 ff ff       	call   c0019c86 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a352:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a357:	57                   	push   edi
c001a358:	53                   	push   ebx
c001a359:	56                   	push   esi
c001a35a:	55                   	push   ebp
c001a35b:	e8 bc f9 ff ff       	call   c0019d1c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a360:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a364:	83 c4 14             	add    esp,0x14
c001a367:	6a 3c                	push   0x3c
c001a369:	57                   	push   edi
c001a36a:	53                   	push   ebx
c001a36b:	56                   	push   esi
c001a36c:	55                   	push   ebp
c001a36d:	e8 20 f8 ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a372:	0f b6 c4             	movzx  eax,ah
c001a375:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a379:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a37d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a381:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001a386:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a38c:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a392:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a396:	83 c4 20             	add    esp,0x20
c001a399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a39e:	74 30                	je     c001a3d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a3a0:	31 c0                	xor    eax,eax
c001a3a2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a3a6:	7e 28                	jle    c001a3d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a3a8:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a3b0:	39 cb                	cmp    ebx,ecx
c001a3b2:	75 19                	jne    c001a3cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a3b4:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a3bc:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a3c0:	75 0b                	jne    c001a3cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a3c2:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a3c9:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001a3cd:	40                   	inc    eax
c001a3ce:	eb d2                	jmp    c001a3a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a3d0:	31 d2                	xor    edx,edx
c001a3d2:	83 ec 0c             	sub    esp,0xc
c001a3d5:	57                   	push   edi
c001a3d6:	53                   	push   ebx
c001a3d7:	56                   	push   esi
c001a3d8:	52                   	push   edx
c001a3d9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001a3dd:	55                   	push   ebp
c001a3de:	e8 85 f9 ff ff       	call   c0019d68 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3e7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a3eb:	42                   	inc    edx
c001a3ec:	83 c4 20             	add    esp,0x20
c001a3ef:	83 fa 06             	cmp    edx,0x6
c001a3f2:	75 de                	jne    c001a3d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a3f4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a3f9:	83 ec 0c             	sub    esp,0xc
c001a3fc:	86 e0                	xchg   al,ah
c001a3fe:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a403:	6a 02                	push   0x2
c001a405:	57                   	push   edi
c001a406:	53                   	push   ebx
c001a407:	56                   	push   esi
c001a408:	55                   	push   ebp
c001a409:	e8 84 f7 ff ff       	call   c0019b92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a40e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a413:	83 c4 20             	add    esp,0x20
c001a416:	57                   	push   edi
c001a417:	53                   	push   ebx
c001a418:	56                   	push   esi
c001a419:	55                   	push   ebp
c001a41a:	e8 b1 f8 ff ff       	call   c0019cd0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a41f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a423:	57                   	push   edi
c001a424:	53                   	push   ebx
c001a425:	56                   	push   esi
c001a426:	55                   	push   ebp
c001a427:	e8 0e f8 ff ff       	call   c0019c3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a42c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a431:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a435:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a439:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a43d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a441:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a445:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a449:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a44d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a451:	b9 09 00 00 00       	mov    ecx,0x9
c001a456:	83 ec 0c             	sub    esp,0xc
c001a459:	fc                   	cld    
c001a45a:	89 e7                	mov    edi,esp
c001a45c:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a460:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a462:	55                   	push   ebp
c001a463:	e8 26 fd ff ff       	call   c001a18e <PCI::foundDevice(PCIDeviceInfo)>
c001a468:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a46e:	5b                   	pop    ebx
c001a46f:	5e                   	pop    esi
c001a470:	5f                   	pop    edi
c001a471:	5d                   	pop    ebp
c001a472:	c3                   	ret    
c001a473:	90                   	nop

c001a474 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a474:	55                   	push   ebp
c001a475:	57                   	push   edi
c001a476:	56                   	push   esi
c001a477:	53                   	push   ebx
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a480:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a484:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a489:	6a 00                	push   0x0
c001a48b:	56                   	push   esi
c001a48c:	57                   	push   edi
c001a48d:	55                   	push   ebp
c001a48e:	e8 a7 f7 ff ff       	call   c0019c3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a493:	6a 00                	push   0x0
c001a495:	56                   	push   esi
c001a496:	57                   	push   edi
c001a497:	55                   	push   ebp
c001a498:	e8 63 fe ff ff       	call   c001a300 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a49d:	83 c4 20             	add    esp,0x20
c001a4a0:	6a 00                	push   0x0
c001a4a2:	56                   	push   esi
c001a4a3:	57                   	push   edi
c001a4a4:	55                   	push   ebp
c001a4a5:	e8 b4 f7 ff ff       	call   c0019c5e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a4aa:	83 c4 10             	add    esp,0x10
c001a4ad:	84 c0                	test   al,al
c001a4af:	79 27                	jns    c001a4d8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a4b1:	bb 01 00 00 00       	mov    ebx,0x1
c001a4b6:	53                   	push   ebx
c001a4b7:	56                   	push   esi
c001a4b8:	57                   	push   edi
c001a4b9:	55                   	push   ebp
c001a4ba:	e8 7b f7 ff ff       	call   c0019c3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a4bf:	83 c4 10             	add    esp,0x10
c001a4c2:	66 40                	inc    ax
c001a4c4:	74 0c                	je     c001a4d2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a4c6:	53                   	push   ebx
c001a4c7:	56                   	push   esi
c001a4c8:	57                   	push   edi
c001a4c9:	55                   	push   ebp
c001a4ca:	e8 31 fe ff ff       	call   c001a300 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a4cf:	83 c4 10             	add    esp,0x10
c001a4d2:	43                   	inc    ebx
c001a4d3:	83 fb 08             	cmp    ebx,0x8
c001a4d6:	75 de                	jne    c001a4b6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a4d8:	83 c4 0c             	add    esp,0xc
c001a4db:	5b                   	pop    ebx
c001a4dc:	5e                   	pop    esi
c001a4dd:	5f                   	pop    edi
c001a4de:	5d                   	pop    ebp
c001a4df:	c3                   	ret    

c001a4e0 <PCI::detect()>:
c001a4e0:	56                   	push   esi
c001a4e1:	53                   	push   ebx
c001a4e2:	53                   	push   ebx
c001a4e3:	31 db                	xor    ebx,ebx
c001a4e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4e9:	6a 00                	push   0x0
c001a4eb:	6a 00                	push   0x0
c001a4ed:	6a 00                	push   0x0
c001a4ef:	56                   	push   esi
c001a4f0:	e8 69 f7 ff ff       	call   c0019c5e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	a8 80                	test   al,0x80
c001a4fa:	75 21                	jne    c001a51d <PCI::detect()+0x3d>
c001a4fc:	51                   	push   ecx
c001a4fd:	51                   	push   ecx
c001a4fe:	6a 00                	push   0x0
c001a500:	56                   	push   esi
c001a501:	e8 62 fc ff ff       	call   c001a168 <PCI::checkBus(unsigned char)>
c001a506:	83 c4 10             	add    esp,0x10
c001a509:	eb 24                	jmp    c001a52f <PCI::detect()+0x4f>
c001a50b:	52                   	push   edx
c001a50c:	52                   	push   edx
c001a50d:	53                   	push   ebx
c001a50e:	43                   	inc    ebx
c001a50f:	56                   	push   esi
c001a510:	e8 53 fc ff ff       	call   c001a168 <PCI::checkBus(unsigned char)>
c001a515:	83 c4 10             	add    esp,0x10
c001a518:	83 fb 08             	cmp    ebx,0x8
c001a51b:	74 12                	je     c001a52f <PCI::detect()+0x4f>
c001a51d:	53                   	push   ebx
c001a51e:	6a 00                	push   0x0
c001a520:	6a 00                	push   0x0
c001a522:	56                   	push   esi
c001a523:	e8 12 f7 ff ff       	call   c0019c3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a528:	83 c4 10             	add    esp,0x10
c001a52b:	66 40                	inc    ax
c001a52d:	74 dc                	je     c001a50b <PCI::detect()+0x2b>
c001a52f:	58                   	pop    eax
c001a530:	5b                   	pop    ebx
c001a531:	5e                   	pop    esi
c001a532:	c3                   	ret    
c001a533:	90                   	nop

c001a534 <IDE::close(int, int, void*)>:
c001a534:	83 c8 ff             	or     eax,0xffffffff
c001a537:	c3                   	ret    

c001a538 <IDE::IDE()>:
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53f:	83 ec 08             	sub    esp,0x8
c001a542:	68 08 13 02 c0       	push   0xc0021308
c001a547:	50                   	push   eax
c001a548:	e8 93 18 ff ff       	call   c000bde0 <HardDiskController::HardDiskController(char const*)>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	ba 98 13 02 c0       	mov    edx,0xc0021398
c001a555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a559:	89 10                	mov    DWORD PTR [eax],edx
c001a55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a566:	90                   	nop
c001a567:	83 c4 0c             	add    esp,0xc
c001a56a:	c3                   	ret    
c001a56b:	90                   	nop

c001a56c <IDE::prepareInterrupt(unsigned char)>:
c001a56c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a571:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a575:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a57d:	c3                   	ret    

c001a57e <selectDrive(unsigned char, unsigned char)>:
c001a57e:	c3                   	ret    
c001a57f:	90                   	nop

c001a580 <IDE::getBase(unsigned char)>:
c001a580:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a589:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a591:	c3                   	ret    

c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a592:	55                   	push   ebp
c001a593:	57                   	push   edi
c001a594:	56                   	push   esi
c001a595:	53                   	push   ebx
c001a596:	83 ec 1c             	sub    esp,0x1c
c001a599:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a59d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a5a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a5a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a5a9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a5ac:	80 f9 03             	cmp    cl,0x3
c001a5af:	77 51                	ja     c001a602 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a5b1:	0f b6 f2             	movzx  esi,dl
c001a5b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5b8:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a5bb:	0f b6 db             	movzx  ebx,bl
c001a5be:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a5c2:	83 ca 80             	or     edx,0xffffff80
c001a5c5:	0f b6 d2             	movzx  edx,dl
c001a5c8:	52                   	push   edx
c001a5c9:	6a 0c                	push   0xc
c001a5cb:	56                   	push   esi
c001a5cc:	57                   	push   edi
c001a5cd:	e8 c0 ff ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5d2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a5d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5db:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a5df:	ee                   	out    dx,al
c001a5e0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a5e5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a5e9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a5ed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a5f1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a5f9:	83 c4 2c             	add    esp,0x2c
c001a5fc:	5b                   	pop    ebx
c001a5fd:	5e                   	pop    esi
c001a5fe:	5f                   	pop    edi
c001a5ff:	5d                   	pop    ebp
c001a600:	eb 90                	jmp    c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a602:	80 fb 07             	cmp    bl,0x7
c001a605:	77 12                	ja     c001a619 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a607:	0f b6 d2             	movzx  edx,dl
c001a60a:	0f b6 db             	movzx  ebx,bl
c001a60d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a615:	89 da                	mov    edx,ebx
c001a617:	eb 2f                	jmp    c001a648 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a619:	80 fb 0d             	cmp    bl,0xd
c001a61c:	77 13                	ja     c001a631 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a61e:	0f b6 d2             	movzx  edx,dl
c001a621:	0f b6 db             	movzx  ebx,bl
c001a624:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a62b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a62f:	eb 17                	jmp    c001a648 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a631:	80 fb 15             	cmp    bl,0x15
c001a634:	77 13                	ja     c001a649 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a636:	0f b6 d2             	movzx  edx,dl
c001a639:	0f b6 db             	movzx  ebx,bl
c001a63c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a644:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a648:	ee                   	out    dx,al
c001a649:	83 c4 1c             	add    esp,0x1c
c001a64c:	5b                   	pop    ebx
c001a64d:	5e                   	pop    esi
c001a64e:	5f                   	pop    edi
c001a64f:	5d                   	pop    ebp
c001a650:	c3                   	ret    
c001a651:	90                   	nop

c001a652 <IDE::read(unsigned char, unsigned char)>:
c001a652:	55                   	push   ebp
c001a653:	57                   	push   edi
c001a654:	56                   	push   esi
c001a655:	53                   	push   ebx
c001a656:	83 ec 1c             	sub    esp,0x1c
c001a659:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a65d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a661:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a665:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a668:	3c 03                	cmp    al,0x3
c001a66a:	77 43                	ja     c001a6af <IDE::read(unsigned char, unsigned char)+0x5d>
c001a66c:	0f b6 f2             	movzx  esi,dl
c001a66f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a672:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a676:	83 c8 80             	or     eax,0xffffff80
c001a679:	0f b6 c0             	movzx  eax,al
c001a67c:	50                   	push   eax
c001a67d:	6a 0c                	push   0xc
c001a67f:	56                   	push   esi
c001a680:	57                   	push   edi
c001a681:	e8 0c ff ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a686:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a68b:	0f b6 c3             	movzx  eax,bl
c001a68e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a692:	ec                   	in     al,dx
c001a693:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a698:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a69c:	52                   	push   edx
c001a69d:	6a 0c                	push   0xc
c001a69f:	56                   	push   esi
c001a6a0:	57                   	push   edi
c001a6a1:	e8 ec fe ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a6:	83 c4 20             	add    esp,0x20
c001a6a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a6ad:	eb 49                	jmp    c001a6f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a6af:	80 fb 07             	cmp    bl,0x7
c001a6b2:	77 12                	ja     c001a6c6 <IDE::read(unsigned char, unsigned char)+0x74>
c001a6b4:	0f b6 d2             	movzx  edx,dl
c001a6b7:	0f b6 c3             	movzx  eax,bl
c001a6ba:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a6c2:	89 c2                	mov    edx,eax
c001a6c4:	eb 31                	jmp    c001a6f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a6c6:	80 fb 0d             	cmp    bl,0xd
c001a6c9:	77 13                	ja     c001a6de <IDE::read(unsigned char, unsigned char)+0x8c>
c001a6cb:	0f b6 d2             	movzx  edx,dl
c001a6ce:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a6d5:	0f b6 d3             	movzx  edx,bl
c001a6d8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a6dc:	eb 19                	jmp    c001a6f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a6de:	31 c0                	xor    eax,eax
c001a6e0:	80 fb 15             	cmp    bl,0x15
c001a6e3:	77 13                	ja     c001a6f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a6e5:	0f b6 d2             	movzx  edx,dl
c001a6e8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a6f0:	0f b6 d3             	movzx  edx,bl
c001a6f3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a6f7:	ec                   	in     al,dx
c001a6f8:	83 c4 1c             	add    esp,0x1c
c001a6fb:	5b                   	pop    ebx
c001a6fc:	5e                   	pop    esi
c001a6fd:	5f                   	pop    edi
c001a6fe:	5d                   	pop    ebp
c001a6ff:	c3                   	ret    

c001a700 <IDE::waitInterrupt(unsigned char)>:
c001a700:	57                   	push   edi
c001a701:	56                   	push   esi
c001a702:	31 f6                	xor    esi,esi
c001a704:	53                   	push   ebx
c001a705:	83 ec 10             	sub    esp,0x10
c001a708:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a70c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a710:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a714:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a719:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a720:	84 db                	test   bl,bl
c001a722:	75 33                	jne    c001a757 <IDE::waitInterrupt(unsigned char)+0x57>
c001a724:	52                   	push   edx
c001a725:	6a 0c                	push   0xc
c001a727:	50                   	push   eax
c001a728:	57                   	push   edi
c001a729:	e8 24 ff ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001a72e:	83 c4 10             	add    esp,0x10
c001a731:	a8 01                	test   al,0x1
c001a733:	75 2a                	jne    c001a75f <IDE::waitInterrupt(unsigned char)+0x5f>
c001a735:	f7 c6 04 00 00 00    	test   esi,0x4
c001a73b:	75 12                	jne    c001a74f <IDE::waitInterrupt(unsigned char)+0x4f>
c001a73d:	83 fe 32             	cmp    esi,0x32
c001a740:	7e 0d                	jle    c001a74f <IDE::waitInterrupt(unsigned char)+0x4f>
c001a742:	83 ec 0c             	sub    esp,0xc
c001a745:	6a 64                	push   0x64
c001a747:	e8 1c a7 ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001a74c:	83 c4 10             	add    esp,0x10
c001a74f:	83 fe 3c             	cmp    esi,0x3c
c001a752:	74 0b                	je     c001a75f <IDE::waitInterrupt(unsigned char)+0x5f>
c001a754:	46                   	inc    esi
c001a755:	eb bd                	jmp    c001a714 <IDE::waitInterrupt(unsigned char)+0x14>
c001a757:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a75f:	83 c4 10             	add    esp,0x10
c001a762:	88 d8                	mov    al,bl
c001a764:	5b                   	pop    ebx
c001a765:	5e                   	pop    esi
c001a766:	5f                   	pop    edi
c001a767:	c3                   	ret    

c001a768 <ideChannel0IRQHandler(regs*, void*)>:
c001a768:	83 ec 10             	sub    esp,0x10
c001a76b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a76f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a776:	6a 07                	push   0x7
c001a778:	6a 00                	push   0x0
c001a77a:	50                   	push   eax
c001a77b:	e8 d2 fe ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001a780:	83 c4 1c             	add    esp,0x1c
c001a783:	c3                   	ret    

c001a784 <ideChannel1IRQHandler(regs*, void*)>:
c001a784:	83 ec 10             	sub    esp,0x10
c001a787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a78b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a792:	6a 07                	push   0x7
c001a794:	6a 01                	push   0x1
c001a796:	50                   	push   eax
c001a797:	e8 b6 fe ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001a79c:	83 c4 1c             	add    esp,0x1c
c001a79f:	c3                   	ret    

c001a7a0 <IDE::enableIRQs(unsigned char, bool)>:
c001a7a0:	57                   	push   edi
c001a7a1:	56                   	push   esi
c001a7a2:	be 04 00 00 00       	mov    esi,0x4
c001a7a7:	53                   	push   ebx
c001a7a8:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a7ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a7b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7b6:	0f 94 c0             	sete   al
c001a7b9:	01 c0                	add    eax,eax
c001a7bb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a7c2:	0f b6 c0             	movzx  eax,al
c001a7c5:	50                   	push   eax
c001a7c6:	6a 0c                	push   0xc
c001a7c8:	57                   	push   edi
c001a7c9:	53                   	push   ebx
c001a7ca:	e8 c3 fd ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	50                   	push   eax
c001a7d3:	6a 0c                	push   0xc
c001a7d5:	57                   	push   edi
c001a7d6:	53                   	push   ebx
c001a7d7:	e8 76 fe ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001a7dc:	83 c4 10             	add    esp,0x10
c001a7df:	4e                   	dec    esi
c001a7e0:	75 f0                	jne    c001a7d2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a7e2:	5b                   	pop    ebx
c001a7e3:	5e                   	pop    esi
c001a7e4:	5f                   	pop    edi
c001a7e5:	c3                   	ret    

c001a7e6 <IDE::open(int, int, void*)>:
c001a7e6:	55                   	push   ebp
c001a7e7:	57                   	push   edi
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	83 ec 1c             	sub    esp,0x1c
c001a7ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7f1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a7fa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a803:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a80a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a811:	0f 85 b2 02 00 00    	jne    c001aac9 <IDE::open(int, int, void*)+0x2e3>
c001a817:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a81d:	88 04 24             	mov    BYTE PTR [esp],al
c001a820:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a823:	83 e0 7f             	and    eax,0x7f
c001a826:	83 f8 05             	cmp    eax,0x5
c001a829:	74 05                	je     c001a830 <IDE::open(int, int, void*)+0x4a>
c001a82b:	83 f8 0f             	cmp    eax,0xf
c001a82e:	75 32                	jne    c001a862 <IDE::open(int, int, void*)+0x7c>
c001a830:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a836:	83 e0 fc             	and    eax,0xfffffffc
c001a839:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a840:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a846:	83 e0 fc             	and    eax,0xfffffffc
c001a849:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a850:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a856:	83 e0 fc             	and    eax,0xfffffffc
c001a859:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a860:	eb 14                	jmp    c001a876 <IDE::open(int, int, void*)+0x90>
c001a862:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a86c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a876:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a87d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a884:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a888:	89 c6                	mov    esi,eax
c001a88a:	89 e8                	mov    eax,ebp
c001a88c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a891:	c1 e6 10             	shl    esi,0x10
c001a894:	89 fa                	mov    edx,edi
c001a896:	c1 e0 0b             	shl    eax,0xb
c001a899:	09 f0                	or     eax,esi
c001a89b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a8a2:	c1 e6 08             	shl    esi,0x8
c001a8a5:	09 c6                	or     esi,eax
c001a8a7:	89 f0                	mov    eax,esi
c001a8a9:	0d 08 00 00 80       	or     eax,0x80000008
c001a8ae:	ef                   	out    dx,eax
c001a8af:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a8b4:	89 ca                	mov    edx,ecx
c001a8b6:	ed                   	in     eax,dx
c001a8b7:	c1 e8 10             	shr    eax,0x10
c001a8ba:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8bf:	0f 84 f3 00 00 00    	je     c001a9b8 <IDE::open(int, int, void*)+0x1d2>
c001a8c5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a8cb:	89 fa                	mov    edx,edi
c001a8cd:	89 f0                	mov    eax,esi
c001a8cf:	ef                   	out    dx,eax
c001a8d0:	b0 fe                	mov    al,0xfe
c001a8d2:	89 ca                	mov    edx,ecx
c001a8d4:	ee                   	out    dx,al
c001a8d5:	89 f0                	mov    eax,esi
c001a8d7:	89 fa                	mov    edx,edi
c001a8d9:	ef                   	out    dx,eax
c001a8da:	89 ca                	mov    edx,ecx
c001a8dc:	ed                   	in     eax,dx
c001a8dd:	3c fe                	cmp    al,0xfe
c001a8df:	0f 85 a9 00 00 00    	jne    c001a98e <IDE::open(int, int, void*)+0x1a8>
c001a8e5:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a8eb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a8f2:	74 33                	je     c001a927 <IDE::open(int, int, void*)+0x141>
c001a8f4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a8fa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a8fe:	40                   	inc    eax
c001a8ff:	83 ec 0c             	sub    esp,0xc
c001a902:	0f b6 c0             	movzx  eax,al
c001a905:	50                   	push   eax
c001a906:	55                   	push   ebp
c001a907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a90b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a911:	51                   	push   ecx
c001a912:	e8 19 40 ff ff       	call   c000e930 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a917:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a91c:	83 c4 1c             	add    esp,0x1c
c001a91f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a925:	eb 0a                	jmp    c001a931 <IDE::open(int, int, void*)+0x14b>
c001a927:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a931:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a938:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a93f:	c1 e1 10             	shl    ecx,0x10
c001a942:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a947:	c1 e0 08             	shl    eax,0x8
c001a94a:	89 fa                	mov    edx,edi
c001a94c:	09 c1                	or     ecx,eax
c001a94e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a955:	c1 e0 0b             	shl    eax,0xb
c001a958:	09 c1                	or     ecx,eax
c001a95a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a960:	89 c8                	mov    eax,ecx
c001a962:	ef                   	out    dx,eax
c001a963:	be fc 0c 00 00       	mov    esi,0xcfc
c001a968:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a96e:	89 f2                	mov    edx,esi
c001a970:	ee                   	out    dx,al
c001a971:	89 c8                	mov    eax,ecx
c001a973:	89 fa                	mov    edx,edi
c001a975:	ef                   	out    dx,eax
c001a976:	89 f2                	mov    edx,esi
c001a978:	ed                   	in     eax,dx
c001a979:	0f b6 c0             	movzx  eax,al
c001a97c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a982:	74 44                	je     c001a9c8 <IDE::open(int, int, void*)+0x1e2>
c001a984:	83 ec 0c             	sub    esp,0xc
c001a987:	68 20 13 02 c0       	push   0xc0021320
c001a98c:	eb 32                	jmp    c001a9c0 <IDE::open(int, int, void*)+0x1da>
c001a98e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a997:	75 15                	jne    c001a9ae <IDE::open(int, int, void*)+0x1c8>
c001a999:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001a99d:	74 06                	je     c001a9a5 <IDE::open(int, int, void*)+0x1bf>
c001a99f:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001a9a3:	75 09                	jne    c001a9ae <IDE::open(int, int, void*)+0x1c8>
c001a9a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a9ac:	eb 1a                	jmp    c001a9c8 <IDE::open(int, int, void*)+0x1e2>
c001a9ae:	83 ec 0c             	sub    esp,0xc
c001a9b1:	68 28 13 02 c0       	push   0xc0021328
c001a9b6:	eb 08                	jmp    c001a9c0 <IDE::open(int, int, void*)+0x1da>
c001a9b8:	83 ec 0c             	sub    esp,0xc
c001a9bb:	68 59 13 02 c0       	push   0xc0021359
c001a9c0:	e8 52 5a ff ff       	call   c0010417 <KePanic(char const*)>
c001a9c5:	83 c4 10             	add    esp,0x10
c001a9c8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a9cf:	79 1a                	jns    c001a9eb <IDE::open(int, int, void*)+0x205>
c001a9d1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a9d7:	83 e0 fc             	and    eax,0xfffffffc
c001a9da:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a9e1:	83 c0 08             	add    eax,0x8
c001a9e4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a9eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a9f1:	89 c2                	mov    edx,eax
c001a9f3:	83 e2 0f             	and    edx,0xf
c001a9f6:	66 83 fa 08          	cmp    dx,0x8
c001a9fa:	75 0a                	jne    c001aa06 <IDE::open(int, int, void*)+0x220>
c001a9fc:	83 e8 02             	sub    eax,0x2
c001a9ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aa06:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001aa0c:	89 c2                	mov    edx,eax
c001aa0e:	83 e2 0f             	and    edx,0xf
c001aa11:	66 83 fa 08          	cmp    dx,0x8
c001aa15:	75 0a                	jne    c001aa21 <IDE::open(int, int, void*)+0x23b>
c001aa17:	83 e8 02             	sub    eax,0x2
c001aa1a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aa21:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001aa28:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001aa2f:	89 d0                	mov    eax,edx
c001aa31:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aa34:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aa38:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001aa3c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001aa3f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aa44:	0f b6 c9             	movzx  ecx,cl
c001aa47:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001aa4e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001aa51:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001aa55:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001aa59:	8d 50 02             	lea    edx,[eax+0x2]
c001aa5c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001aa61:	0f b6 d2             	movzx  edx,dl
c001aa64:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001aa6a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aa6d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aa71:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001aa75:	8d 48 03             	lea    ecx,[eax+0x3]
c001aa78:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aa7d:	0f b6 c9             	movzx  ecx,cl
c001aa80:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001aa86:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001aa89:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001aa8d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001aa91:	8d 50 04             	lea    edx,[eax+0x4]
c001aa94:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001aa9a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001aa9f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001aaa6:	66 85 f6             	test   si,si
c001aaa9:	74 5b                	je     c001ab06 <IDE::open(int, int, void*)+0x320>
c001aaab:	0f b6 d2             	movzx  edx,dl
c001aaae:	83 c0 05             	add    eax,0x5
c001aab1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aab4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aab8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001aabc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001aac2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aac7:	eb 3d                	jmp    c001ab06 <IDE::open(int, int, void*)+0x320>
c001aac9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001aacf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001aad6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aadd:	66 05 06 02          	add    ax,0x206
c001aae1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aae8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001aaef:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aaf6:	66 05 06 02          	add    ax,0x206
c001aafa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ab01:	e9 e5 fe ff ff       	jmp    c001a9eb <IDE::open(int, int, void*)+0x205>
c001ab06:	50                   	push   eax
c001ab07:	50                   	push   eax
c001ab08:	6a 00                	push   0x0
c001ab0a:	53                   	push   ebx
c001ab0b:	e8 5c fa ff ff       	call   c001a56c <IDE::prepareInterrupt(unsigned char)>
c001ab10:	5a                   	pop    edx
c001ab11:	59                   	pop    ecx
c001ab12:	6a 01                	push   0x1
c001ab14:	53                   	push   ebx
c001ab15:	e8 52 fa ff ff       	call   c001a56c <IDE::prepareInterrupt(unsigned char)>
c001ab1a:	83 c4 0c             	add    esp,0xc
c001ab1d:	6a 00                	push   0x0
c001ab1f:	6a 00                	push   0x0
c001ab21:	53                   	push   ebx
c001ab22:	e8 79 fc ff ff       	call   c001a7a0 <IDE::enableIRQs(unsigned char, bool)>
c001ab27:	83 c4 0c             	add    esp,0xc
c001ab2a:	6a 00                	push   0x0
c001ab2c:	6a 01                	push   0x1
c001ab2e:	53                   	push   ebx
c001ab2f:	e8 6c fc ff ff       	call   c001a7a0 <IDE::enableIRQs(unsigned char, bool)>
c001ab34:	83 c4 10             	add    esp,0x10
c001ab37:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ab3e:	74 34                	je     c001ab74 <IDE::open(int, int, void*)+0x38e>
c001ab40:	83 ec 0c             	sub    esp,0xc
c001ab43:	53                   	push   ebx
c001ab44:	6a 01                	push   0x1
c001ab46:	68 68 a7 01 c0       	push   0xc001a768
c001ab4b:	6a 0e                	push   0xe
c001ab4d:	53                   	push   ebx
c001ab4e:	e8 f5 0e ff ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab53:	83 c4 14             	add    esp,0x14
c001ab56:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ab5c:	53                   	push   ebx
c001ab5d:	6a 01                	push   0x1
c001ab5f:	68 84 a7 01 c0       	push   0xc001a784
c001ab64:	6a 0f                	push   0xf
c001ab66:	53                   	push   ebx
c001ab67:	e8 dc 0e ff ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab6c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ab72:	eb 38                	jmp    c001abac <IDE::open(int, int, void*)+0x3c6>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ab81:	53                   	push   ebx
c001ab82:	6a 00                	push   0x0
c001ab84:	68 68 a7 01 c0       	push   0xc001a768
c001ab89:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ab8f:	53                   	push   ebx
c001ab90:	e8 b3 0e ff ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab95:	83 c4 14             	add    esp,0x14
c001ab98:	53                   	push   ebx
c001ab99:	6a 00                	push   0x0
c001ab9b:	68 84 a7 01 c0       	push   0xc001a784
c001aba0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001aba6:	53                   	push   ebx
c001aba7:	e8 9c 0e ff ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001abac:	83 c4 20             	add    esp,0x20
c001abaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abb1:	83 ec 0c             	sub    esp,0xc
c001abb4:	53                   	push   ebx
c001abb5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001abb8:	83 c4 0c             	add    esp,0xc
c001abbb:	6a 07                	push   0x7
c001abbd:	6a 00                	push   0x0
c001abbf:	53                   	push   ebx
c001abc0:	e8 8d fa ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001abc5:	83 c4 0c             	add    esp,0xc
c001abc8:	6a 07                	push   0x7
c001abca:	6a 01                	push   0x1
c001abcc:	53                   	push   ebx
c001abcd:	e8 80 fa ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001abd2:	83 c4 0c             	add    esp,0xc
c001abd5:	6a 01                	push   0x1
c001abd7:	6a 00                	push   0x0
c001abd9:	53                   	push   ebx
c001abda:	e8 c1 fb ff ff       	call   c001a7a0 <IDE::enableIRQs(unsigned char, bool)>
c001abdf:	83 c4 0c             	add    esp,0xc
c001abe2:	6a 01                	push   0x1
c001abe4:	6a 01                	push   0x1
c001abe6:	53                   	push   ebx
c001abe7:	e8 b4 fb ff ff       	call   c001a7a0 <IDE::enableIRQs(unsigned char, bool)>
c001abec:	83 c4 2c             	add    esp,0x2c
c001abef:	31 c0                	xor    eax,eax
c001abf1:	5b                   	pop    ebx
c001abf2:	5e                   	pop    esi
c001abf3:	5f                   	pop    edi
c001abf4:	5d                   	pop    ebp
c001abf5:	c3                   	ret    

c001abf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001abf6:	55                   	push   ebp
c001abf7:	57                   	push   edi
c001abf8:	56                   	push   esi
c001abf9:	53                   	push   ebx
c001abfa:	83 ec 1c             	sub    esp,0x1c
c001abfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ac09:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ac0d:	8d 50 f8             	lea    edx,[eax-0x8]
c001ac10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ac14:	80 fa 03             	cmp    dl,0x3
c001ac17:	77 5d                	ja     c001ac76 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ac19:	0f b6 db             	movzx  ebx,bl
c001ac1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ac20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac24:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ac27:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ac2b:	83 ca 80             	or     edx,0xffffff80
c001ac2e:	0f b6 d2             	movzx  edx,dl
c001ac31:	52                   	push   edx
c001ac32:	6a 0c                	push   0xc
c001ac34:	53                   	push   ebx
c001ac35:	56                   	push   esi
c001ac36:	e8 57 f9 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac3f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ac44:	0f b6 c0             	movzx  eax,al
c001ac47:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ac4b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ac4f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ac51:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac56:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ac5a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ac5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac62:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac6a:	83 c4 2c             	add    esp,0x2c
c001ac6d:	5b                   	pop    ebx
c001ac6e:	5e                   	pop    esi
c001ac6f:	5f                   	pop    edi
c001ac70:	5d                   	pop    ebp
c001ac71:	e9 1c f9 ff ff       	jmp    c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac76:	3c 07                	cmp    al,0x7
c001ac78:	77 10                	ja     c001ac8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ac7a:	0f b6 db             	movzx  ebx,bl
c001ac7d:	0f b6 d0             	movzx  edx,al
c001ac80:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ac88:	eb 2d                	jmp    c001acb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ac8a:	3c 0d                	cmp    al,0xd
c001ac8c:	77 13                	ja     c001aca1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ac8e:	0f b6 db             	movzx  ebx,bl
c001ac91:	0f b6 c0             	movzx  eax,al
c001ac94:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ac9b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ac9f:	eb 16                	jmp    c001acb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001aca1:	3c 15                	cmp    al,0x15
c001aca3:	77 14                	ja     c001acb9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001aca5:	0f b6 db             	movzx  ebx,bl
c001aca8:	0f b6 c0             	movzx  eax,al
c001acab:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001acb3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001acb7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001acb9:	83 c4 1c             	add    esp,0x1c
c001acbc:	5b                   	pop    ebx
c001acbd:	5e                   	pop    esi
c001acbe:	5f                   	pop    edi
c001acbf:	5d                   	pop    ebp
c001acc0:	c3                   	ret    
c001acc1:	90                   	nop

c001acc2 <IDE::detect()>:
c001acc2:	55                   	push   ebp
c001acc3:	57                   	push   edi
c001acc4:	56                   	push   esi
c001acc5:	53                   	push   ebx
c001acc6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001accc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001acd3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001acda:	0f 85 99 02 00 00    	jne    c001af79 <IDE::detect()+0x2b7>
c001ace0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ace7:	31 f6                	xor    esi,esi
c001ace9:	31 ed                	xor    ebp,ebp
c001aceb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001acf3:	89 e8                	mov    eax,ebp
c001acf5:	c1 e0 06             	shl    eax,0x6
c001acf8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ad00:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ad04:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad08:	c1 e0 04             	shl    eax,0x4
c001ad0b:	83 c8 a0             	or     eax,0xffffffa0
c001ad0e:	0f b6 c0             	movzx  eax,al
c001ad11:	50                   	push   eax
c001ad12:	6a 06                	push   0x6
c001ad14:	56                   	push   esi
c001ad15:	53                   	push   ebx
c001ad16:	e8 77 f8 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad1b:	83 c4 0c             	add    esp,0xc
c001ad1e:	6a 0c                	push   0xc
c001ad20:	56                   	push   esi
c001ad21:	53                   	push   ebx
c001ad22:	e8 2b f9 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad27:	83 c4 0c             	add    esp,0xc
c001ad2a:	6a 0c                	push   0xc
c001ad2c:	56                   	push   esi
c001ad2d:	53                   	push   ebx
c001ad2e:	e8 1f f9 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad33:	83 c4 0c             	add    esp,0xc
c001ad36:	6a 0c                	push   0xc
c001ad38:	56                   	push   esi
c001ad39:	53                   	push   ebx
c001ad3a:	e8 13 f9 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad3f:	83 c4 0c             	add    esp,0xc
c001ad42:	6a 0c                	push   0xc
c001ad44:	56                   	push   esi
c001ad45:	53                   	push   ebx
c001ad46:	e8 07 f9 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad4b:	68 ec 00 00 00       	push   0xec
c001ad50:	6a 07                	push   0x7
c001ad52:	56                   	push   esi
c001ad53:	53                   	push   ebx
c001ad54:	e8 39 f8 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad59:	83 c4 1c             	add    esp,0x1c
c001ad5c:	6a 0c                	push   0xc
c001ad5e:	56                   	push   esi
c001ad5f:	53                   	push   ebx
c001ad60:	e8 ed f8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad65:	83 c4 0c             	add    esp,0xc
c001ad68:	6a 0c                	push   0xc
c001ad6a:	56                   	push   esi
c001ad6b:	53                   	push   ebx
c001ad6c:	e8 e1 f8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad71:	83 c4 0c             	add    esp,0xc
c001ad74:	6a 0c                	push   0xc
c001ad76:	56                   	push   esi
c001ad77:	53                   	push   ebx
c001ad78:	e8 d5 f8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad7d:	83 c4 0c             	add    esp,0xc
c001ad80:	6a 0c                	push   0xc
c001ad82:	56                   	push   esi
c001ad83:	53                   	push   ebx
c001ad84:	e8 c9 f8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad89:	83 c4 0c             	add    esp,0xc
c001ad8c:	6a 0c                	push   0xc
c001ad8e:	56                   	push   esi
c001ad8f:	53                   	push   ebx
c001ad90:	e8 bd f8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	84 c0                	test   al,al
c001ad9a:	0f 84 5f 01 00 00    	je     c001aeff <IDE::detect()+0x23d>
c001ada0:	31 ff                	xor    edi,edi
c001ada2:	50                   	push   eax
c001ada3:	6a 0c                	push   0xc
c001ada5:	56                   	push   esi
c001ada6:	53                   	push   ebx
c001ada7:	e8 a6 f8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	a8 01                	test   al,0x1
c001adb1:	0f 85 69 01 00 00    	jne    c001af20 <IDE::detect()+0x25e>
c001adb7:	84 c0                	test   al,al
c001adb9:	78 04                	js     c001adbf <IDE::detect()+0xfd>
c001adbb:	a8 08                	test   al,0x8
c001adbd:	75 23                	jne    c001ade2 <IDE::detect()+0x120>
c001adbf:	47                   	inc    edi
c001adc0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001adc6:	7e da                	jle    c001ada2 <IDE::detect()+0xe0>
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	6a 32                	push   0x32
c001adcd:	e8 96 a0 ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001add2:	83 c4 10             	add    esp,0x10
c001add5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001addb:	75 c5                	jne    c001ada2 <IDE::detect()+0xe0>
c001addd:	e9 3e 01 00 00       	jmp    c001af20 <IDE::detect()+0x25e>
c001ade2:	31 c9                	xor    ecx,ecx
c001ade4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ade8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001adec:	83 ec 0c             	sub    esp,0xc
c001adef:	68 80 00 00 00       	push   0x80
c001adf4:	57                   	push   edi
c001adf5:	6a 00                	push   0x0
c001adf7:	56                   	push   esi
c001adf8:	53                   	push   ebx
c001adf9:	e8 f8 fd ff ff       	call   c001abf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001adfe:	89 e8                	mov    eax,ebp
c001ae00:	c1 e0 06             	shl    eax,0x6
c001ae03:	01 d8                	add    eax,ebx
c001ae05:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ae0a:	89 d1                	mov    ecx,edx
c001ae0c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ae13:	89 f2                	mov    edx,esi
c001ae15:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ae1c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ae22:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ae26:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ae2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae30:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ae37:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ae3f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ae46:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ae4e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ae54:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ae5b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ae61:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ae65:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae69:	83 c4 20             	add    esp,0x20
c001ae6c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ae6f:	83 c7 02             	add    edi,0x2
c001ae72:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001ae78:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ae7b:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001ae81:	83 c0 02             	add    eax,0x2
c001ae84:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001ae88:	75 e2                	jne    c001ae6c <IDE::detect()+0x1aa>
c001ae8a:	89 e8                	mov    eax,ebp
c001ae8c:	c1 e0 06             	shl    eax,0x6
c001ae8f:	01 d8                	add    eax,ebx
c001ae91:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ae97:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ae9e:	66 c1 ea 09          	shr    dx,0x9
c001aea2:	83 e2 01             	and    edx,0x1
c001aea5:	84 c9                	test   cl,cl
c001aea7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001aead:	75 22                	jne    c001aed1 <IDE::detect()+0x20f>
c001aeaf:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001aeb6:	74 46                	je     c001aefe <IDE::detect()+0x23c>
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	68 7c 01 00 00       	push   0x17c
c001aec0:	e8 ae c9 fe ff       	call   c0007873 <malloc>
c001aec5:	89 c7                	mov    edi,eax
c001aec7:	89 04 24             	mov    DWORD PTR [esp],eax
c001aeca:	e8 13 05 00 00       	call   c001b3e2 <ATA::ATA()>
c001aecf:	eb 17                	jmp    c001aee8 <IDE::detect()+0x226>
c001aed1:	83 ec 0c             	sub    esp,0xc
c001aed4:	68 84 01 00 00       	push   0x184
c001aed9:	e8 95 c9 fe ff       	call   c0007873 <malloc>
c001aede:	89 c7                	mov    edi,eax
c001aee0:	89 04 24             	mov    DWORD PTR [esp],eax
c001aee3:	e8 44 0e 00 00       	call   c001bd2c <ATAPI::ATAPI()>
c001aee8:	5a                   	pop    edx
c001aee9:	59                   	pop    ecx
c001aeea:	57                   	push   edi
c001aeeb:	53                   	push   ebx
c001aeec:	e8 ab 0b ff ff       	call   c000ba9c <Device::addChild(Device*)>
c001aef1:	8b 07                	mov    eax,DWORD PTR [edi]
c001aef3:	53                   	push   ebx
c001aef4:	55                   	push   ebp
c001aef5:	6a 00                	push   0x0
c001aef7:	57                   	push   edi
c001aef8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aefb:	83 c4 20             	add    esp,0x20
c001aefe:	45                   	inc    ebp
c001aeff:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001af04:	74 0d                	je     c001af13 <IDE::detect()+0x251>
c001af06:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001af0e:	e9 e0 fd ff ff       	jmp    c001acf3 <IDE::detect()+0x31>
c001af13:	4e                   	dec    esi
c001af14:	74 63                	je     c001af79 <IDE::detect()+0x2b7>
c001af16:	be 01 00 00 00       	mov    esi,0x1
c001af1b:	e9 cb fd ff ff       	jmp    c001aceb <IDE::detect()+0x29>
c001af20:	50                   	push   eax
c001af21:	6a 04                	push   0x4
c001af23:	56                   	push   esi
c001af24:	53                   	push   ebx
c001af25:	e8 28 f7 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001af2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af2e:	83 c4 0c             	add    esp,0xc
c001af31:	6a 05                	push   0x5
c001af33:	56                   	push   esi
c001af34:	53                   	push   ebx
c001af35:	e8 18 f7 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001af3a:	83 c4 10             	add    esp,0x10
c001af3d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001af41:	80 fa 14             	cmp    dl,0x14
c001af44:	74 2d                	je     c001af73 <IDE::detect()+0x2b1>
c001af46:	80 fa 69             	cmp    dl,0x69
c001af49:	75 b4                	jne    c001aeff <IDE::detect()+0x23d>
c001af4b:	3c 96                	cmp    al,0x96
c001af4d:	75 b0                	jne    c001aeff <IDE::detect()+0x23d>
c001af4f:	68 a1 00 00 00       	push   0xa1
c001af54:	6a 07                	push   0x7
c001af56:	56                   	push   esi
c001af57:	53                   	push   ebx
c001af58:	e8 35 f6 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001af5d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001af64:	e8 ff 9e ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001af69:	83 c4 10             	add    esp,0x10
c001af6c:	b1 01                	mov    cl,0x1
c001af6e:	e9 71 fe ff ff       	jmp    c001ade4 <IDE::detect()+0x122>
c001af73:	3c eb                	cmp    al,0xeb
c001af75:	75 cf                	jne    c001af46 <IDE::detect()+0x284>
c001af77:	eb d6                	jmp    c001af4f <IDE::detect()+0x28d>
c001af79:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af7f:	5b                   	pop    ebx
c001af80:	5e                   	pop    esi
c001af81:	5f                   	pop    edi
c001af82:	5d                   	pop    ebp
c001af83:	c3                   	ret    

c001af84 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001af84:	55                   	push   ebp
c001af85:	57                   	push   edi
c001af86:	56                   	push   esi
c001af87:	53                   	push   ebx
c001af88:	83 ec 1c             	sub    esp,0x1c
c001af8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001af93:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001af97:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001af9b:	88 c3                	mov    bl,al
c001af9d:	84 c0                	test   al,al
c001af9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afa3:	0f 84 81 00 00 00    	je     c001b02a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	68 83 13 02 c0       	push   0xc0021383
c001afb1:	e8 ad f6 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afbd:	3c 01                	cmp    al,0x1
c001afbf:	74 63                	je     c001b024 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001afc1:	3c 02                	cmp    al,0x2
c001afc3:	75 53                	jne    c001b018 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001afc5:	01 f6                	add    esi,esi
c001afc7:	50                   	push   eax
c001afc8:	09 ee                	or     esi,ebp
c001afca:	6a 01                	push   0x1
c001afcc:	89 f0                	mov    eax,esi
c001afce:	0f b6 f0             	movzx  esi,al
c001afd1:	c1 e6 06             	shl    esi,0x6
c001afd4:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001afdc:	50                   	push   eax
c001afdd:	57                   	push   edi
c001afde:	e8 6f f6 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	a8 01                	test   al,0x1
c001afe8:	74 02                	je     c001afec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001afea:	b3 07                	mov    bl,0x7
c001afec:	a8 02                	test   al,0x2
c001afee:	74 02                	je     c001aff2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001aff0:	b3 03                	mov    bl,0x3
c001aff2:	a8 04                	test   al,0x4
c001aff4:	74 02                	je     c001aff8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001aff6:	b3 14                	mov    bl,0x14
c001aff8:	a8 08                	test   al,0x8
c001affa:	74 02                	je     c001affe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001affc:	b3 03                	mov    bl,0x3
c001affe:	a8 10                	test   al,0x10
c001b000:	74 02                	je     c001b004 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001b002:	b3 15                	mov    bl,0x15
c001b004:	a8 20                	test   al,0x20
c001b006:	74 02                	je     c001b00a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001b008:	b3 03                	mov    bl,0x3
c001b00a:	a8 40                	test   al,0x40
c001b00c:	74 02                	je     c001b010 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001b00e:	b3 16                	mov    bl,0x16
c001b010:	84 c0                	test   al,al
c001b012:	79 16                	jns    c001b02a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b014:	b3 0d                	mov    bl,0xd
c001b016:	eb 12                	jmp    c001b02a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b018:	3c 03                	cmp    al,0x3
c001b01a:	74 0c                	je     c001b028 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b01c:	3c 04                	cmp    al,0x4
c001b01e:	75 0a                	jne    c001b02a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b020:	b3 08                	mov    bl,0x8
c001b022:	eb 06                	jmp    c001b02a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b024:	b3 13                	mov    bl,0x13
c001b026:	eb 02                	jmp    c001b02a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b028:	b3 17                	mov    bl,0x17
c001b02a:	83 c4 1c             	add    esp,0x1c
c001b02d:	88 d8                	mov    al,bl
c001b02f:	5b                   	pop    ebx
c001b030:	5e                   	pop    esi
c001b031:	5f                   	pop    edi
c001b032:	5d                   	pop    ebp
c001b033:	c3                   	ret    

c001b034 <IDE::polling(unsigned char, unsigned int)>:
c001b034:	55                   	push   ebp
c001b035:	bd 04 00 00 00       	mov    ebp,0x4
c001b03a:	57                   	push   edi
c001b03b:	56                   	push   esi
c001b03c:	53                   	push   ebx
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b044:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b048:	52                   	push   edx
c001b049:	6a 0c                	push   0xc
c001b04b:	0f b6 f3             	movzx  esi,bl
c001b04e:	56                   	push   esi
c001b04f:	57                   	push   edi
c001b050:	e8 fd f5 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001b055:	83 c4 10             	add    esp,0x10
c001b058:	4d                   	dec    ebp
c001b059:	75 ed                	jne    c001b048 <IDE::polling(unsigned char, unsigned int)+0x14>
c001b05b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b060:	50                   	push   eax
c001b061:	6a 0c                	push   0xc
c001b063:	56                   	push   esi
c001b064:	57                   	push   edi
c001b065:	e8 e8 f5 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001b06a:	83 c4 10             	add    esp,0x10
c001b06d:	a8 01                	test   al,0x1
c001b06f:	75 17                	jne    c001b088 <IDE::polling(unsigned char, unsigned int)+0x54>
c001b071:	a8 20                	test   al,0x20
c001b073:	75 0f                	jne    c001b084 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b075:	4b                   	dec    ebx
c001b076:	74 10                	je     c001b088 <IDE::polling(unsigned char, unsigned int)+0x54>
c001b078:	84 c0                	test   al,al
c001b07a:	78 e4                	js     c001b060 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001b07c:	a8 08                	test   al,0x8
c001b07e:	74 e0                	je     c001b060 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001b080:	31 c0                	xor    eax,eax
c001b082:	eb 06                	jmp    c001b08a <IDE::polling(unsigned char, unsigned int)+0x56>
c001b084:	b0 01                	mov    al,0x1
c001b086:	eb 02                	jmp    c001b08a <IDE::polling(unsigned char, unsigned int)+0x56>
c001b088:	b0 02                	mov    al,0x2
c001b08a:	83 c4 0c             	add    esp,0xc
c001b08d:	5b                   	pop    ebx
c001b08e:	5e                   	pop    esi
c001b08f:	5f                   	pop    edi
c001b090:	5d                   	pop    ebp
c001b091:	c3                   	ret    

c001b092 <SATABus::close(int, int, void*)>:
c001b092:	31 c0                	xor    eax,eax
c001b094:	c3                   	ret    
c001b095:	90                   	nop

c001b096 <SATABus::detect()>:
c001b096:	c3                   	ret    
c001b097:	90                   	nop

c001b098 <SATABus::SATABus()>:
c001b098:	83 ec 0c             	sub    esp,0xc
c001b09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b09f:	83 ec 08             	sub    esp,0x8
c001b0a2:	68 bc 13 02 c0       	push   0xc00213bc
c001b0a7:	50                   	push   eax
c001b0a8:	e8 33 0d ff ff       	call   c000bde0 <HardDiskController::HardDiskController(char const*)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c001b0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b9:	89 10                	mov    DWORD PTR [eax],edx
c001b0bb:	83 ec 0c             	sub    esp,0xc
c001b0be:	6a 50                	push   0x50
c001b0c0:	e8 71 cb fe ff       	call   c0007c36 <Phys::allocateContiguousPages(int)>
c001b0c5:	83 c4 10             	add    esp,0x10
c001b0c8:	89 c2                	mov    edx,eax
c001b0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	6a 50                	push   0x50
c001b0d9:	e8 94 e2 fe ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c001b0de:	83 c4 10             	add    esp,0x10
c001b0e1:	89 c2                	mov    edx,eax
c001b0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0ed:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001b0f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0f6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b0fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b100:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b106:	83 ec 0c             	sub    esp,0xc
c001b109:	6a 03                	push   0x3
c001b10b:	6a 50                	push   0x50
c001b10d:	51                   	push   ecx
c001b10e:	52                   	push   edx
c001b10f:	50                   	push   eax
c001b110:	e8 2b ec fe ff       	call   c0009d40 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b115:	83 c4 20             	add    esp,0x20
c001b118:	90                   	nop
c001b119:	83 c4 0c             	add    esp,0xc
c001b11c:	c3                   	ret    
c001b11d:	90                   	nop

c001b11e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b11e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b122:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b125:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b128:	09 c2                	or     edx,eax
c001b12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b12e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b134:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b136:	31 c0                	xor    eax,eax
c001b138:	c1 e9 08             	shr    ecx,0x8
c001b13b:	83 e1 0f             	and    ecx,0xf
c001b13e:	39 c8                	cmp    eax,ecx
c001b140:	74 0a                	je     c001b14c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b142:	f6 c2 01             	test   dl,0x1
c001b145:	74 08                	je     c001b14f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b147:	d1 ea                	shr    edx,1
c001b149:	40                   	inc    eax
c001b14a:	eb f2                	jmp    c001b13e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b14c:	83 c8 ff             	or     eax,0xffffffff
c001b14f:	c3                   	ret    

c001b150 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b150:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b154:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b157:	89 c2                	mov    edx,eax
c001b159:	c1 ea 08             	shr    edx,0x8
c001b15c:	83 e2 0f             	and    edx,0xf
c001b15f:	fe ca                	dec    dl
c001b161:	75 31                	jne    c001b194 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b163:	83 e0 0f             	and    eax,0xf
c001b166:	3c 03                	cmp    al,0x3
c001b168:	75 2a                	jne    c001b194 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b16a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b16d:	b8 02 00 00 00       	mov    eax,0x2
c001b172:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b178:	74 1c                	je     c001b196 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b17a:	b8 04 00 00 00       	mov    eax,0x4
c001b17f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b185:	74 0f                	je     c001b196 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b187:	31 c0                	xor    eax,eax
c001b189:	83 fa 03             	cmp    edx,0x3
c001b18c:	0f 94 c0             	sete   al
c001b18f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b193:	c3                   	ret    
c001b194:	31 c0                	xor    eax,eax
c001b196:	c3                   	ret    
c001b197:	90                   	nop

c001b198 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b19c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b19f:	0f ba e2 0f          	bt     edx,0xf
c001b1a3:	72 f7                	jb     c001b19c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b1a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1a8:	83 ca 10             	or     edx,0x10
c001b1ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1b1:	83 ca 01             	or     edx,0x1
c001b1b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1b7:	c3                   	ret    

c001b1b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b1b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1bf:	83 e2 fe             	and    edx,0xfffffffe
c001b1c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1c8:	83 e2 ef             	and    edx,0xffffffef
c001b1cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1d1:	0f ba e2 0e          	bt     edx,0xe
c001b1d5:	72 f7                	jb     c001b1ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b1d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1da:	0f ba e2 0f          	bt     edx,0xf
c001b1de:	72 ee                	jb     c001b1ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b1e0:	c3                   	ret    
c001b1e1:	90                   	nop

c001b1e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b1e2:	55                   	push   ebp
c001b1e3:	57                   	push   edi
c001b1e4:	56                   	push   esi
c001b1e5:	53                   	push   ebx
c001b1e6:	83 ec 1c             	sub    esp,0x1c
c001b1e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b1ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1f1:	53                   	push   ebx
c001b1f2:	56                   	push   esi
c001b1f3:	e8 c0 ff ff ff       	call   c001b1b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b1f8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b1fc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b202:	c1 e5 0a             	shl    ebp,0xa
c001b205:	83 ec 0c             	sub    esp,0xc
c001b208:	01 e8                	add    eax,ebp
c001b20a:	89 03                	mov    DWORD PTR [ebx],eax
c001b20c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b20e:	68 00 04 00 00       	push   0x400
c001b213:	6a 00                	push   0x0
c001b215:	50                   	push   eax
c001b216:	e8 a5 52 fe ff       	call   c00004c0 <memset>
c001b21b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b221:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b225:	01 e8                	add    eax,ebp
c001b227:	83 c4 1c             	add    esp,0x1c
c001b22a:	c1 e2 08             	shl    edx,0x8
c001b22d:	89 03                	mov    DWORD PTR [ebx],eax
c001b22f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b236:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b23c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b242:	01 f8                	add    eax,edi
c001b244:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b247:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b24a:	68 00 01 00 00       	push   0x100
c001b24f:	6a 00                	push   0x0
c001b251:	50                   	push   eax
c001b252:	e8 69 52 fe ff       	call   c00004c0 <memset>
c001b257:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b25d:	01 fa                	add    edx,edi
c001b25f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b263:	c1 e7 0d             	shl    edi,0xd
c001b266:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b269:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b270:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b276:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b27c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b280:	31 ff                	xor    edi,edi
c001b282:	83 c4 10             	add    esp,0x10
c001b285:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b28b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b28f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b295:	83 c5 20             	add    ebp,0x20
c001b298:	01 f8                	add    eax,edi
c001b29a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b29d:	52                   	push   edx
c001b29e:	68 00 01 00 00       	push   0x100
c001b2a3:	6a 00                	push   0x0
c001b2a5:	50                   	push   eax
c001b2a6:	e8 15 52 fe ff       	call   c00004c0 <memset>
c001b2ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2af:	83 c4 10             	add    esp,0x10
c001b2b2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b2b8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b2bf:	01 f8                	add    eax,edi
c001b2c1:	81 c7 00 01 00 00    	add    edi,0x100
c001b2c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b2ca:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b2d0:	75 b3                	jne    c001b285 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b2d2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b2d9:	50                   	push   eax
c001b2da:	50                   	push   eax
c001b2db:	53                   	push   ebx
c001b2dc:	56                   	push   esi
c001b2dd:	e8 b6 fe ff ff       	call   c001b198 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b2e2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b2e9:	83 c4 2c             	add    esp,0x2c
c001b2ec:	5b                   	pop    ebx
c001b2ed:	5e                   	pop    esi
c001b2ee:	5f                   	pop    edi
c001b2ef:	5d                   	pop    ebp
c001b2f0:	c3                   	ret    
c001b2f1:	90                   	nop

c001b2f2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b2f2:	55                   	push   ebp
c001b2f3:	57                   	push   edi
c001b2f4:	56                   	push   esi
c001b2f5:	53                   	push   ebx
c001b2f6:	31 db                	xor    ebx,ebx
c001b2f8:	83 ec 0c             	sub    esp,0xc
c001b2fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b2ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b303:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b306:	f7 c7 01 00 00 00    	test   edi,0x1
c001b30c:	74 7a                	je     c001b388 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b30e:	89 d8                	mov    eax,ebx
c001b310:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b314:	c1 e0 07             	shl    eax,0x7
c001b317:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b31e:	55                   	push   ebp
c001b31f:	56                   	push   esi
c001b320:	e8 2b fe ff ff       	call   c001b150 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b325:	5a                   	pop    edx
c001b326:	83 f8 01             	cmp    eax,0x1
c001b329:	59                   	pop    ecx
c001b32a:	75 21                	jne    c001b34d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b32c:	50                   	push   eax
c001b32d:	53                   	push   ebx
c001b32e:	55                   	push   ebp
c001b32f:	56                   	push   esi
c001b330:	e8 ad fe ff ff       	call   c001b1e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b335:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b33c:	e8 32 c5 fe ff       	call   c0007873 <malloc>
c001b341:	89 c5                	mov    ebp,eax
c001b343:	89 04 24             	mov    DWORD PTR [esp],eax
c001b346:	e8 95 10 00 00       	call   c001c3e0 <SATA::SATA()>
c001b34b:	eb 24                	jmp    c001b371 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b34d:	83 f8 04             	cmp    eax,0x4
c001b350:	75 36                	jne    c001b388 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b352:	51                   	push   ecx
c001b353:	53                   	push   ebx
c001b354:	55                   	push   ebp
c001b355:	56                   	push   esi
c001b356:	e8 87 fe ff ff       	call   c001b1e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b35b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b362:	e8 0c c5 fe ff       	call   c0007873 <malloc>
c001b367:	89 c5                	mov    ebp,eax
c001b369:	89 04 24             	mov    DWORD PTR [esp],eax
c001b36c:	e8 c9 17 00 00       	call   c001cb3a <SATAPI::SATAPI()>
c001b371:	58                   	pop    eax
c001b372:	5a                   	pop    edx
c001b373:	55                   	push   ebp
c001b374:	56                   	push   esi
c001b375:	e8 22 07 ff ff       	call   c000ba9c <Device::addChild(Device*)>
c001b37a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b37d:	56                   	push   esi
c001b37e:	6a 00                	push   0x0
c001b380:	53                   	push   ebx
c001b381:	55                   	push   ebp
c001b382:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b385:	83 c4 20             	add    esp,0x20
c001b388:	d1 ef                	shr    edi,1
c001b38a:	43                   	inc    ebx
c001b38b:	83 fb 20             	cmp    ebx,0x20
c001b38e:	0f 85 72 ff ff ff    	jne    c001b306 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b394:	83 c4 0c             	add    esp,0xc
c001b397:	5b                   	pop    ebx
c001b398:	5e                   	pop    esi
c001b399:	5f                   	pop    edi
c001b39a:	5d                   	pop    ebp
c001b39b:	c3                   	ret    

c001b39c <SATABus::open(int, int, void*)>:
c001b39c:	83 ec 14             	sub    esp,0x14
c001b39f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3a3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b3a9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b3af:	52                   	push   edx
c001b3b0:	50                   	push   eax
c001b3b1:	e8 3c ff ff ff       	call   c001b2f2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b3b6:	31 c0                	xor    eax,eax
c001b3b8:	83 c4 1c             	add    esp,0x1c
c001b3bb:	c3                   	ret    

c001b3bc <ATA::close(int, int, void*)>:
c001b3bc:	83 ec 0c             	sub    esp,0xc
c001b3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b3c9:	85 c0                	test   eax,eax
c001b3cb:	74 0c                	je     c001b3d9 <ATA::close(int, int, void*)+0x1d>
c001b3cd:	83 ec 0c             	sub    esp,0xc
c001b3d0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3d2:	50                   	push   eax
c001b3d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	31 c0                	xor    eax,eax
c001b3db:	83 c4 0c             	add    esp,0xc
c001b3de:	c3                   	ret    
c001b3df:	90                   	nop

c001b3e0 <ATA::powerSaving(PowerSavingLevel)>:
c001b3e0:	c3                   	ret    
c001b3e1:	90                   	nop

c001b3e2 <ATA::ATA()>:
c001b3e2:	83 ec 0c             	sub    esp,0xc
c001b3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e9:	83 ec 04             	sub    esp,0x4
c001b3ec:	68 00 02 00 00       	push   0x200
c001b3f1:	68 b5 14 02 c0       	push   0xc00214b5
c001b3f6:	50                   	push   eax
c001b3f7:	e8 6e 0a ff ff       	call   c000be6a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	ba 28 14 02 c0       	mov    edx,0xc0021428
c001b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b408:	89 10                	mov    DWORD PTR [eax],edx
c001b40a:	90                   	nop
c001b40b:	83 c4 0c             	add    esp,0xc
c001b40e:	c3                   	ret    
c001b40f:	90                   	nop

c001b410 <ATA::flush(bool)>:
c001b410:	53                   	push   ebx
c001b411:	83 ec 08             	sub    esp,0x8
c001b414:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b419:	19 c0                	sbb    eax,eax
c001b41b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b41f:	83 e0 fd             	and    eax,0xfffffffd
c001b422:	05 ea 00 00 00       	add    eax,0xea
c001b427:	50                   	push   eax
c001b428:	6a 07                	push   0x7
c001b42a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b431:	50                   	push   eax
c001b432:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b438:	e8 55 f1 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b43d:	83 c4 0c             	add    esp,0xc
c001b440:	6a 00                	push   0x0
c001b442:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b449:	50                   	push   eax
c001b44a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b450:	e8 df fb ff ff       	call   c001b034 <IDE::polling(unsigned char, unsigned int)>
c001b455:	83 c4 18             	add    esp,0x18
c001b458:	5b                   	pop    ebx
c001b459:	c3                   	ret    

c001b45a <ATA::readyForCommand()>:
c001b45a:	56                   	push   esi
c001b45b:	53                   	push   ebx
c001b45c:	53                   	push   ebx
c001b45d:	31 db                	xor    ebx,ebx
c001b45f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b463:	51                   	push   ecx
c001b464:	6a 0c                	push   0xc
c001b466:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b46d:	50                   	push   eax
c001b46e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b474:	e8 d9 f1 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001b479:	83 c4 10             	add    esp,0x10
c001b47c:	a8 88                	test   al,0x88
c001b47e:	74 1f                	je     c001b49f <ATA::readyForCommand()+0x45>
c001b480:	43                   	inc    ebx
c001b481:	83 fb 63             	cmp    ebx,0x63
c001b484:	7e dd                	jle    c001b463 <ATA::readyForCommand()+0x9>
c001b486:	83 ec 0c             	sub    esp,0xc
c001b489:	6a 0a                	push   0xa
c001b48b:	e8 d8 99 ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001b490:	83 c4 10             	add    esp,0x10
c001b493:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b499:	75 c8                	jne    c001b463 <ATA::readyForCommand()+0x9>
c001b49b:	31 c0                	xor    eax,eax
c001b49d:	eb 02                	jmp    c001b4a1 <ATA::readyForCommand()+0x47>
c001b49f:	b0 01                	mov    al,0x1
c001b4a1:	5a                   	pop    edx
c001b4a2:	5b                   	pop    ebx
c001b4a3:	5e                   	pop    esi
c001b4a4:	c3                   	ret    
c001b4a5:	90                   	nop

c001b4a6 <ATA::access(unsigned long long, int, void*, bool)>:
c001b4a6:	55                   	push   ebp
c001b4a7:	57                   	push   edi
c001b4a8:	56                   	push   esi
c001b4a9:	53                   	push   ebx
c001b4aa:	83 ec 2c             	sub    esp,0x2c
c001b4ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b4b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b4b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4b8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001b4bc:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b4bf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b4c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b4c7:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001b4cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4d1:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b4d7:	c1 e0 06             	shl    eax,0x6
c001b4da:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b4de:	80 bc 03 a9 01 00 00 00 	cmp    BYTE PTR [ebx+eax*1+0x1a9],0x0
c001b4e6:	74 5a                	je     c001b542 <ATA::access(unsigned long long, int, void*, bool)+0x9c>
c001b4e8:	89 ea                	mov    edx,ebp
c001b4ea:	89 f8                	mov    eax,edi
c001b4ec:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b4f0:	c1 ea 1c             	shr    edx,0x1c
c001b4f3:	89 d1                	mov    ecx,edx
c001b4f5:	09 c1                	or     ecx,eax
c001b4f7:	74 25                	je     c001b51e <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001b4f9:	31 db                	xor    ebx,ebx
c001b4fb:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b502:	89 ea                	mov    edx,ebp
c001b504:	89 f8                	mov    eax,edi
c001b506:	0f ad d0             	shrd   eax,edx,cl
c001b509:	d3 ea                	shr    edx,cl
c001b50b:	f6 c1 20             	test   cl,0x20
c001b50e:	74 02                	je     c001b512 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001b510:	89 d0                	mov    eax,edx
c001b512:	88 44 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],al
c001b516:	43                   	inc    ebx
c001b517:	83 fb 06             	cmp    ebx,0x6
c001b51a:	75 df                	jne    c001b4fb <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001b51c:	eb 70                	jmp    c001b58e <ATA::access(unsigned long long, int, void*, bool)+0xe8>
c001b51e:	89 f8                	mov    eax,edi
c001b520:	89 ea                	mov    edx,ebp
c001b522:	0f ac d0 10          	shrd   eax,edx,0x10
c001b526:	66 89 7c 24 1a       	mov    WORD PTR [esp+0x1a],di
c001b52b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b52f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b536:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b53b:	c1 ef 18             	shr    edi,0x18
c001b53e:	b3 01                	mov    bl,0x1
c001b540:	eb 50                	jmp    c001b592 <ATA::access(unsigned long long, int, void*, bool)+0xec>
c001b542:	6a 00                	push   0x0
c001b544:	31 db                	xor    ebx,ebx
c001b546:	6a 3f                	push   0x3f
c001b548:	55                   	push   ebp
c001b549:	57                   	push   edi
c001b54a:	e8 91 2a 00 00       	call   c001dfe0 <__umoddi3>
c001b54f:	83 c4 10             	add    esp,0x10
c001b552:	40                   	inc    eax
c001b553:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b557:	6a 00                	push   0x0
c001b559:	68 f0 03 00 00       	push   0x3f0
c001b55e:	55                   	push   ebp
c001b55f:	57                   	push   edi
c001b560:	e8 7b 29 00 00       	call   c001dee0 <__udivdi3>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b56d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b574:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b579:	6a 00                	push   0x0
c001b57b:	6a 3f                	push   0x3f
c001b57d:	55                   	push   ebp
c001b57e:	57                   	push   edi
c001b57f:	e8 5c 29 00 00       	call   c001dee0 <__udivdi3>
c001b584:	89 c7                	mov    edi,eax
c001b586:	83 c4 10             	add    esp,0x10
c001b589:	83 e7 0f             	and    edi,0xf
c001b58c:	eb 04                	jmp    c001b592 <ATA::access(unsigned long long, int, void*, bool)+0xec>
c001b58e:	31 ff                	xor    edi,edi
c001b590:	b3 02                	mov    bl,0x2
c001b592:	55                   	push   ebp
c001b593:	6a 00                	push   0x0
c001b595:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b59c:	50                   	push   eax
c001b59d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b5a1:	e8 fa f1 ff ff       	call   c001a7a0 <IDE::enableIRQs(unsigned char, bool)>
c001b5a6:	89 34 24             	mov    DWORD PTR [esp],esi
c001b5a9:	e8 ac fe ff ff       	call   c001b45a <ATA::readyForCommand()>
c001b5ae:	83 c4 10             	add    esp,0x10
c001b5b1:	84 c0                	test   al,al
c001b5b3:	75 0a                	jne    c001b5bf <ATA::access(unsigned long long, int, void*, bool)+0x119>
c001b5b5:	bf 01 00 00 00       	mov    edi,0x1
c001b5ba:	e9 7d 02 00 00       	jmp    c001b83c <ATA::access(unsigned long long, int, void*, bool)+0x396>
c001b5bf:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001b5c5:	8b 96 6c 01 00 00    	mov    edx,DWORD PTR [esi+0x16c]
c001b5cb:	c1 e0 04             	shl    eax,0x4
c001b5ce:	09 c7                	or     edi,eax
c001b5d0:	84 db                	test   bl,bl
c001b5d2:	0f b6 8e 70 01 00 00 	movzx  ecx,BYTE PTR [esi+0x170]
c001b5d9:	75 05                	jne    c001b5e0 <ATA::access(unsigned long long, int, void*, bool)+0x13a>
c001b5db:	83 cf a0             	or     edi,0xffffffa0
c001b5de:	eb 03                	jmp    c001b5e3 <ATA::access(unsigned long long, int, void*, bool)+0x13d>
c001b5e0:	83 cf e0             	or     edi,0xffffffe0
c001b5e3:	89 f8                	mov    eax,edi
c001b5e5:	0f b6 f8             	movzx  edi,al
c001b5e8:	57                   	push   edi
c001b5e9:	6a 06                	push   0x6
c001b5eb:	51                   	push   ecx
c001b5ec:	52                   	push   edx
c001b5ed:	e8 a0 ef ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5f2:	83 c4 10             	add    esp,0x10
c001b5f5:	6a 00                	push   0x0
c001b5f7:	6a 01                	push   0x1
c001b5f9:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b600:	50                   	push   eax
c001b601:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b607:	e8 86 ef ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b60c:	83 c4 10             	add    esp,0x10
c001b60f:	80 fb 02             	cmp    bl,0x2
c001b612:	75 6e                	jne    c001b682 <ATA::access(unsigned long long, int, void*, bool)+0x1dc>
c001b614:	6a 00                	push   0x0
c001b616:	6a 08                	push   0x8
c001b618:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b61f:	50                   	push   eax
c001b620:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b626:	e8 67 ef ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b62b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b630:	50                   	push   eax
c001b631:	6a 09                	push   0x9
c001b633:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b63a:	50                   	push   eax
c001b63b:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b641:	e8 4c ef ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b646:	83 c4 20             	add    esp,0x20
c001b649:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b64e:	50                   	push   eax
c001b64f:	6a 0a                	push   0xa
c001b651:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b658:	50                   	push   eax
c001b659:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b65f:	e8 2e ef ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b664:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b669:	50                   	push   eax
c001b66a:	6a 0b                	push   0xb
c001b66c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b673:	50                   	push   eax
c001b674:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b67a:	e8 13 ef ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b67f:	83 c4 20             	add    esp,0x20
c001b682:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b687:	50                   	push   eax
c001b688:	6a 02                	push   0x2
c001b68a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b691:	50                   	push   eax
c001b692:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b698:	e8 f5 ee ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b69d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b6a2:	50                   	push   eax
c001b6a3:	6a 03                	push   0x3
c001b6a5:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b6ac:	50                   	push   eax
c001b6ad:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b6b3:	e8 da ee ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6b8:	83 c4 20             	add    esp,0x20
c001b6bb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b6c0:	50                   	push   eax
c001b6c1:	6a 04                	push   0x4
c001b6c3:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b6ca:	50                   	push   eax
c001b6cb:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b6d1:	e8 bc ee ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6d6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b6db:	50                   	push   eax
c001b6dc:	6a 05                	push   0x5
c001b6de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b6e5:	50                   	push   eax
c001b6e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b6ec:	e8 a1 ee ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6f1:	83 c4 20             	add    esp,0x20
c001b6f4:	80 fb 02             	cmp    bl,0x2
c001b6f7:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001b6fc:	75 06                	jne    c001b704 <ATA::access(unsigned long long, int, void*, bool)+0x25e>
c001b6fe:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b702:	75 3f                	jne    c001b743 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001b704:	80 fb 02             	cmp    bl,0x2
c001b707:	0f 95 c1             	setne  cl
c001b70a:	74 0b                	je     c001b717 <ATA::access(unsigned long long, int, void*, bool)+0x271>
c001b70c:	b8 30 00 00 00       	mov    eax,0x30
c001b711:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b715:	75 31                	jne    c001b748 <ATA::access(unsigned long long, int, void*, bool)+0x2a2>
c001b717:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b71a:	83 f2 01             	xor    edx,0x1
c001b71d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b722:	74 09                	je     c001b72d <ATA::access(unsigned long long, int, void*, bool)+0x287>
c001b724:	b8 24 00 00 00       	mov    eax,0x24
c001b729:	84 d2                	test   dl,dl
c001b72b:	75 1b                	jne    c001b748 <ATA::access(unsigned long long, int, void*, bool)+0x2a2>
c001b72d:	84 c9                	test   cl,cl
c001b72f:	0f 84 80 fe ff ff    	je     c001b5b5 <ATA::access(unsigned long long, int, void*, bool)+0x10f>
c001b735:	b8 20 00 00 00       	mov    eax,0x20
c001b73a:	84 d2                	test   dl,dl
c001b73c:	75 0a                	jne    c001b748 <ATA::access(unsigned long long, int, void*, bool)+0x2a2>
c001b73e:	e9 72 fe ff ff       	jmp    c001b5b5 <ATA::access(unsigned long long, int, void*, bool)+0x10f>
c001b743:	b8 34 00 00 00       	mov    eax,0x34
c001b748:	50                   	push   eax
c001b749:	6a 07                	push   0x7
c001b74b:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b752:	50                   	push   eax
c001b753:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b759:	e8 34 ee ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b75e:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001b762:	83 c4 10             	add    esp,0x10
c001b765:	85 ed                	test   ebp,ebp
c001b767:	0f 84 b6 00 00 00    	je     c001b823 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c001b76d:	57                   	push   edi
c001b76e:	6a 01                	push   0x1
c001b770:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b777:	50                   	push   eax
c001b778:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b77e:	e8 b1 f8 ff ff       	call   c001b034 <IDE::polling(unsigned char, unsigned int)>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001b78c:	84 c0                	test   al,al
c001b78e:	74 20                	je     c001b7b0 <ATA::access(unsigned long long, int, void*, bool)+0x30a>
c001b790:	0f b6 f8             	movzx  edi,al
c001b793:	57                   	push   edi
c001b794:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001b79b:	0f b6 d2             	movzx  edx,dl
c001b79e:	50                   	push   eax
c001b79f:	52                   	push   edx
c001b7a0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b7a6:	e8 d9 f7 ff ff       	call   c001af84 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b7ab:	e9 89 00 00 00       	jmp    c001b839 <ATA::access(unsigned long long, int, void*, bool)+0x393>
c001b7b0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001b7b5:	74 3b                	je     c001b7f2 <ATA::access(unsigned long long, int, void*, bool)+0x34c>
c001b7b7:	31 c9                	xor    ecx,ecx
c001b7b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b7c1:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001b7c5:	53                   	push   ebx
c001b7c6:	53                   	push   ebx
c001b7c7:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b7ce:	50                   	push   eax
c001b7cf:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b7d5:	e8 a6 ed ff ff       	call   c001a580 <IDE::getBase(unsigned char)>
c001b7da:	89 c2                	mov    edx,eax
c001b7dc:	89 f8                	mov    eax,edi
c001b7de:	66 ef                	out    dx,ax
c001b7e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b7e4:	83 c4 10             	add    esp,0x10
c001b7e7:	41                   	inc    ecx
c001b7e8:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001b7ee:	75 c9                	jne    c001b7b9 <ATA::access(unsigned long long, int, void*, bool)+0x313>
c001b7f0:	eb 23                	jmp    c001b815 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001b7f2:	51                   	push   ecx
c001b7f3:	51                   	push   ecx
c001b7f4:	0f b6 d2             	movzx  edx,dl
c001b7f7:	52                   	push   edx
c001b7f8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b7fe:	e8 7d ed ff ff       	call   c001a580 <IDE::getBase(unsigned char)>
c001b803:	b9 00 01 00 00       	mov    ecx,0x100
c001b808:	89 c2                	mov    edx,eax
c001b80a:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b80e:	fc                   	cld    
c001b80f:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b812:	83 c4 10             	add    esp,0x10
c001b815:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b81d:	4d                   	dec    ebp
c001b81e:	e9 42 ff ff ff       	jmp    c001b765 <ATA::access(unsigned long long, int, void*, bool)+0x2bf>
c001b823:	31 ff                	xor    edi,edi
c001b825:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b829:	74 11                	je     c001b83c <ATA::access(unsigned long long, int, void*, bool)+0x396>
c001b82b:	50                   	push   eax
c001b82c:	50                   	push   eax
c001b82d:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c001b832:	53                   	push   ebx
c001b833:	56                   	push   esi
c001b834:	e8 d7 fb ff ff       	call   c001b410 <ATA::flush(bool)>
c001b839:	83 c4 10             	add    esp,0x10
c001b83c:	83 c4 2c             	add    esp,0x2c
c001b83f:	89 f8                	mov    eax,edi
c001b841:	5b                   	pop    ebx
c001b842:	5e                   	pop    esi
c001b843:	5f                   	pop    edi
c001b844:	5d                   	pop    ebp
c001b845:	c3                   	ret    

c001b846 <ATA::detectCHS()>:
c001b846:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b84a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b850:	c1 e0 06             	shl    eax,0x6
c001b853:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b859:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b863:	c7 44 24 04 0c 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc002140c
c001b86b:	e9 a7 4b ff ff       	jmp    c0010417 <KePanic(char const*)>

c001b870 <ATA::open(int, int, void*)>:
c001b870:	53                   	push   ebx
c001b871:	83 ec 08             	sub    esp,0x8
c001b874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b878:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b87c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b880:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b886:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b88c:	c1 e0 06             	shl    eax,0x6
c001b88f:	01 d0                	add    eax,edx
c001b891:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b898:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b89e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b8a5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b8af:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b8b5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b8bc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b8c3:	75 0c                	jne    c001b8d1 <ATA::open(int, int, void*)+0x61>
c001b8c5:	83 ec 0c             	sub    esp,0xc
c001b8c8:	53                   	push   ebx
c001b8c9:	e8 78 ff ff ff       	call   c001b846 <ATA::detectCHS()>
c001b8ce:	83 c4 10             	add    esp,0x10
c001b8d1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b8d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b8dd:	c1 e0 06             	shl    eax,0x6
c001b8e0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b8e7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b8f1:	d1 e8                	shr    eax,1
c001b8f3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b8f9:	6a 04                	push   0x4
c001b8fb:	6a 0c                	push   0xc
c001b8fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b904:	50                   	push   eax
c001b905:	52                   	push   edx
c001b906:	e8 87 ec ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b90b:	90                   	nop
c001b90c:	90                   	nop
c001b90d:	6a 00                	push   0x0
c001b90f:	6a 0c                	push   0xc
c001b911:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b918:	50                   	push   eax
c001b919:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b91f:	e8 6e ec ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b924:	83 c4 14             	add    esp,0x14
c001b927:	53                   	push   ebx
c001b928:	e8 a5 05 ff ff       	call   c000bed2 <PhysicalDisk::startCache()>
c001b92d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b930:	e8 09 17 ff ff       	call   c000d03e <createPartitionsForDisk(PhysicalDisk*)>
c001b935:	83 c4 18             	add    esp,0x18
c001b938:	31 c0                	xor    eax,eax
c001b93a:	5b                   	pop    ebx
c001b93b:	c3                   	ret    

c001b93c <combineCharAndColour(char, unsigned char)>:
c001b93c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b941:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b947:	c1 e0 08             	shl    eax,0x8
c001b94a:	09 d0                	or     eax,edx
c001b94c:	c3                   	ret    

c001b94d <combineColours(unsigned char, unsigned char)>:
c001b94d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b952:	c1 e0 04             	shl    eax,0x4
c001b955:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b959:	c3                   	ret    

c001b95a <ATA::read(unsigned long long, int, void*)>:
c001b95a:	55                   	push   ebp
c001b95b:	57                   	push   edi
c001b95c:	56                   	push   esi
c001b95d:	be 04 00 00 00       	mov    esi,0x4
c001b962:	53                   	push   ebx
c001b963:	83 ec 0c             	sub    esp,0xc
c001b966:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b96a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b96e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b972:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b976:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b979:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b97f:	0f 87 a1 01 00 00    	ja     c001bb26 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b985:	be 06 00 00 00       	mov    esi,0x6
c001b98a:	85 c9                	test   ecx,ecx
c001b98c:	0f 84 94 01 00 00    	je     c001bb26 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b992:	55                   	push   ebp
c001b993:	55                   	push   ebp
c001b994:	6a 00                	push   0x0
c001b996:	51                   	push   ecx
c001b997:	53                   	push   ebx
c001b998:	52                   	push   edx
c001b999:	50                   	push   eax
c001b99a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b99e:	e8 03 fb ff ff       	call   c001b4a6 <ATA::access(unsigned long long, int, void*, bool)>
c001b9a3:	83 c4 20             	add    esp,0x20
c001b9a6:	89 c6                	mov    esi,eax
c001b9a8:	85 c0                	test   eax,eax
c001b9aa:	0f 85 71 01 00 00    	jne    c001bb21 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b9b0:	50                   	push   eax
c001b9b1:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b9b7:	50                   	push   eax
c001b9b8:	89 da                	mov    edx,ebx
c001b9ba:	6a 0f                	push   0xf
c001b9bc:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b9c2:	6a 00                	push   0x0
c001b9c4:	e8 84 ff ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001b9c9:	59                   	pop    ecx
c001b9ca:	bd 10 27 00 00       	mov    ebp,0x2710
c001b9cf:	5b                   	pop    ebx
c001b9d0:	b9 0a 00 00 00       	mov    ecx,0xa
c001b9d5:	0f b6 d8             	movzx  ebx,al
c001b9d8:	89 d0                	mov    eax,edx
c001b9da:	53                   	push   ebx
c001b9db:	99                   	cdq    
c001b9dc:	f7 fd                	idiv   ebp
c001b9de:	99                   	cdq    
c001b9df:	f7 f9                	idiv   ecx
c001b9e1:	83 c2 30             	add    edx,0x30
c001b9e4:	0f b6 d2             	movzx  edx,dl
c001b9e7:	52                   	push   edx
c001b9e8:	e8 4f ff ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001b9ed:	5f                   	pop    edi
c001b9ee:	bf e8 03 00 00       	mov    edi,0x3e8
c001b9f3:	5a                   	pop    edx
c001b9f4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b9fa:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b9ff:	53                   	push   ebx
c001ba00:	99                   	cdq    
c001ba01:	f7 ff                	idiv   edi
c001ba03:	99                   	cdq    
c001ba04:	f7 f9                	idiv   ecx
c001ba06:	8d 42 30             	lea    eax,[edx+0x30]
c001ba09:	0f b6 c0             	movzx  eax,al
c001ba0c:	50                   	push   eax
c001ba0d:	e8 2a ff ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ba12:	5f                   	pop    edi
c001ba13:	bf 64 00 00 00       	mov    edi,0x64
c001ba18:	5a                   	pop    edx
c001ba19:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ba1f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba24:	53                   	push   ebx
c001ba25:	99                   	cdq    
c001ba26:	f7 ff                	idiv   edi
c001ba28:	99                   	cdq    
c001ba29:	f7 f9                	idiv   ecx
c001ba2b:	8d 42 30             	lea    eax,[edx+0x30]
c001ba2e:	0f b6 c0             	movzx  eax,al
c001ba31:	50                   	push   eax
c001ba32:	e8 05 ff ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ba37:	5a                   	pop    edx
c001ba38:	5a                   	pop    edx
c001ba39:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ba3f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba44:	53                   	push   ebx
c001ba45:	99                   	cdq    
c001ba46:	f7 f9                	idiv   ecx
c001ba48:	99                   	cdq    
c001ba49:	f7 f9                	idiv   ecx
c001ba4b:	8d 42 30             	lea    eax,[edx+0x30]
c001ba4e:	0f b6 c0             	movzx  eax,al
c001ba51:	50                   	push   eax
c001ba52:	e8 e5 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ba57:	5a                   	pop    edx
c001ba58:	5a                   	pop    edx
c001ba59:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ba5f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba64:	53                   	push   ebx
c001ba65:	99                   	cdq    
c001ba66:	f7 f9                	idiv   ecx
c001ba68:	83 c2 30             	add    edx,0x30
c001ba6b:	0f b6 d2             	movzx  edx,dl
c001ba6e:	52                   	push   edx
c001ba6f:	e8 c8 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ba74:	5a                   	pop    edx
c001ba75:	5a                   	pop    edx
c001ba76:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ba7c:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba81:	53                   	push   ebx
c001ba82:	99                   	cdq    
c001ba83:	f7 fd                	idiv   ebp
c001ba85:	99                   	cdq    
c001ba86:	f7 f9                	idiv   ecx
c001ba88:	8d 42 30             	lea    eax,[edx+0x30]
c001ba8b:	0f b6 c0             	movzx  eax,al
c001ba8e:	50                   	push   eax
c001ba8f:	e8 a8 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ba94:	5d                   	pop    ebp
c001ba95:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ba9a:	5a                   	pop    edx
c001ba9b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001baa1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001baa6:	53                   	push   ebx
c001baa7:	99                   	cdq    
c001baa8:	f7 fd                	idiv   ebp
c001baaa:	99                   	cdq    
c001baab:	f7 f9                	idiv   ecx
c001baad:	8d 42 30             	lea    eax,[edx+0x30]
c001bab0:	0f b6 c0             	movzx  eax,al
c001bab3:	50                   	push   eax
c001bab4:	e8 83 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bab9:	5d                   	pop    ebp
c001baba:	5a                   	pop    edx
c001babb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bac1:	53                   	push   ebx
c001bac2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bac7:	99                   	cdq    
c001bac8:	f7 ff                	idiv   edi
c001baca:	99                   	cdq    
c001bacb:	f7 f9                	idiv   ecx
c001bacd:	8d 42 30             	lea    eax,[edx+0x30]
c001bad0:	0f b6 c0             	movzx  eax,al
c001bad3:	50                   	push   eax
c001bad4:	e8 63 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bad9:	5f                   	pop    edi
c001bada:	5d                   	pop    ebp
c001badb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bae1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bae6:	53                   	push   ebx
c001bae7:	99                   	cdq    
c001bae8:	f7 f9                	idiv   ecx
c001baea:	99                   	cdq    
c001baeb:	f7 f9                	idiv   ecx
c001baed:	8d 42 30             	lea    eax,[edx+0x30]
c001baf0:	0f b6 c0             	movzx  eax,al
c001baf3:	50                   	push   eax
c001baf4:	e8 43 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001baf9:	5a                   	pop    edx
c001bafa:	5f                   	pop    edi
c001bafb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bb01:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb06:	53                   	push   ebx
c001bb07:	99                   	cdq    
c001bb08:	f7 f9                	idiv   ecx
c001bb0a:	83 c2 30             	add    edx,0x30
c001bb0d:	0f b6 d2             	movzx  edx,dl
c001bb10:	52                   	push   edx
c001bb11:	e8 26 fe ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bb16:	83 c4 10             	add    esp,0x10
c001bb19:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bb1f:	eb 05                	jmp    c001bb26 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001bb21:	be 01 00 00 00       	mov    esi,0x1
c001bb26:	83 c4 0c             	add    esp,0xc
c001bb29:	89 f0                	mov    eax,esi
c001bb2b:	5b                   	pop    ebx
c001bb2c:	5e                   	pop    esi
c001bb2d:	5f                   	pop    edi
c001bb2e:	5d                   	pop    ebp
c001bb2f:	c3                   	ret    

c001bb30 <ATA::write(unsigned long long, int, void*)>:
c001bb30:	55                   	push   ebp
c001bb31:	57                   	push   edi
c001bb32:	56                   	push   esi
c001bb33:	be 04 00 00 00       	mov    esi,0x4
c001bb38:	53                   	push   ebx
c001bb39:	83 ec 0c             	sub    esp,0xc
c001bb3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb48:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bb4c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bb4f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bb55:	0f 87 9c 01 00 00    	ja     c001bcf7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bb5b:	be 06 00 00 00       	mov    esi,0x6
c001bb60:	85 c9                	test   ecx,ecx
c001bb62:	0f 84 8f 01 00 00    	je     c001bcf7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bb68:	55                   	push   ebp
c001bb69:	55                   	push   ebp
c001bb6a:	6a 01                	push   0x1
c001bb6c:	51                   	push   ecx
c001bb6d:	53                   	push   ebx
c001bb6e:	52                   	push   edx
c001bb6f:	50                   	push   eax
c001bb70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bb74:	e8 2d f9 ff ff       	call   c001b4a6 <ATA::access(unsigned long long, int, void*, bool)>
c001bb79:	83 c4 20             	add    esp,0x20
c001bb7c:	89 c6                	mov    esi,eax
c001bb7e:	85 c0                	test   eax,eax
c001bb80:	0f 85 6c 01 00 00    	jne    c001bcf2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001bb86:	50                   	push   eax
c001bb87:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001bb8d:	50                   	push   eax
c001bb8e:	bd 10 27 00 00       	mov    ebp,0x2710
c001bb93:	6a 0f                	push   0xf
c001bb95:	6a 00                	push   0x0
c001bb97:	e8 b1 fd ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001bb9c:	0f b6 d8             	movzx  ebx,al
c001bb9f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bba4:	5a                   	pop    edx
c001bba5:	99                   	cdq    
c001bba6:	f7 fd                	idiv   ebp
c001bba8:	59                   	pop    ecx
c001bba9:	b9 0a 00 00 00       	mov    ecx,0xa
c001bbae:	99                   	cdq    
c001bbaf:	f7 f9                	idiv   ecx
c001bbb1:	53                   	push   ebx
c001bbb2:	8d 42 30             	lea    eax,[edx+0x30]
c001bbb5:	0f b6 c0             	movzx  eax,al
c001bbb8:	50                   	push   eax
c001bbb9:	e8 7e fd ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bbbe:	5f                   	pop    edi
c001bbbf:	bf e8 03 00 00       	mov    edi,0x3e8
c001bbc4:	5a                   	pop    edx
c001bbc5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bbcb:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bbd0:	53                   	push   ebx
c001bbd1:	99                   	cdq    
c001bbd2:	f7 ff                	idiv   edi
c001bbd4:	99                   	cdq    
c001bbd5:	f7 f9                	idiv   ecx
c001bbd7:	8d 42 30             	lea    eax,[edx+0x30]
c001bbda:	0f b6 c0             	movzx  eax,al
c001bbdd:	50                   	push   eax
c001bbde:	e8 59 fd ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bbe3:	5f                   	pop    edi
c001bbe4:	bf 64 00 00 00       	mov    edi,0x64
c001bbe9:	5a                   	pop    edx
c001bbea:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bbf0:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bbf5:	53                   	push   ebx
c001bbf6:	99                   	cdq    
c001bbf7:	f7 ff                	idiv   edi
c001bbf9:	99                   	cdq    
c001bbfa:	f7 f9                	idiv   ecx
c001bbfc:	8d 42 30             	lea    eax,[edx+0x30]
c001bbff:	0f b6 c0             	movzx  eax,al
c001bc02:	50                   	push   eax
c001bc03:	e8 34 fd ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bc08:	5a                   	pop    edx
c001bc09:	5a                   	pop    edx
c001bc0a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bc10:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bc15:	53                   	push   ebx
c001bc16:	99                   	cdq    
c001bc17:	f7 f9                	idiv   ecx
c001bc19:	99                   	cdq    
c001bc1a:	f7 f9                	idiv   ecx
c001bc1c:	8d 42 30             	lea    eax,[edx+0x30]
c001bc1f:	0f b6 c0             	movzx  eax,al
c001bc22:	50                   	push   eax
c001bc23:	e8 14 fd ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bc28:	5a                   	pop    edx
c001bc29:	5a                   	pop    edx
c001bc2a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bc30:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bc35:	53                   	push   ebx
c001bc36:	99                   	cdq    
c001bc37:	f7 f9                	idiv   ecx
c001bc39:	8d 42 30             	lea    eax,[edx+0x30]
c001bc3c:	0f b6 c0             	movzx  eax,al
c001bc3f:	50                   	push   eax
c001bc40:	e8 f7 fc ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bc45:	5a                   	pop    edx
c001bc46:	5a                   	pop    edx
c001bc47:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bc4d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc52:	53                   	push   ebx
c001bc53:	99                   	cdq    
c001bc54:	f7 fd                	idiv   ebp
c001bc56:	99                   	cdq    
c001bc57:	f7 f9                	idiv   ecx
c001bc59:	8d 42 30             	lea    eax,[edx+0x30]
c001bc5c:	0f b6 c0             	movzx  eax,al
c001bc5f:	50                   	push   eax
c001bc60:	e8 d7 fc ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bc65:	5d                   	pop    ebp
c001bc66:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bc6b:	5a                   	pop    edx
c001bc6c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bc72:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc77:	53                   	push   ebx
c001bc78:	99                   	cdq    
c001bc79:	f7 fd                	idiv   ebp
c001bc7b:	99                   	cdq    
c001bc7c:	f7 f9                	idiv   ecx
c001bc7e:	8d 42 30             	lea    eax,[edx+0x30]
c001bc81:	0f b6 c0             	movzx  eax,al
c001bc84:	50                   	push   eax
c001bc85:	e8 b2 fc ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bc8a:	5d                   	pop    ebp
c001bc8b:	5a                   	pop    edx
c001bc8c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bc92:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc97:	53                   	push   ebx
c001bc98:	99                   	cdq    
c001bc99:	f7 ff                	idiv   edi
c001bc9b:	99                   	cdq    
c001bc9c:	f7 f9                	idiv   ecx
c001bc9e:	8d 42 30             	lea    eax,[edx+0x30]
c001bca1:	0f b6 c0             	movzx  eax,al
c001bca4:	50                   	push   eax
c001bca5:	e8 92 fc ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bcaa:	5f                   	pop    edi
c001bcab:	5d                   	pop    ebp
c001bcac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bcb2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bcb7:	53                   	push   ebx
c001bcb8:	99                   	cdq    
c001bcb9:	f7 f9                	idiv   ecx
c001bcbb:	99                   	cdq    
c001bcbc:	f7 f9                	idiv   ecx
c001bcbe:	8d 42 30             	lea    eax,[edx+0x30]
c001bcc1:	0f b6 c0             	movzx  eax,al
c001bcc4:	50                   	push   eax
c001bcc5:	e8 72 fc ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bcca:	5a                   	pop    edx
c001bccb:	5f                   	pop    edi
c001bccc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bcd2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bcd7:	53                   	push   ebx
c001bcd8:	99                   	cdq    
c001bcd9:	f7 f9                	idiv   ecx
c001bcdb:	83 c2 30             	add    edx,0x30
c001bcde:	0f b6 d2             	movzx  edx,dl
c001bce1:	52                   	push   edx
c001bce2:	e8 55 fc ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001bce7:	83 c4 10             	add    esp,0x10
c001bcea:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bcf0:	eb 05                	jmp    c001bcf7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bcf2:	be 01 00 00 00       	mov    esi,0x1
c001bcf7:	83 c4 0c             	add    esp,0xc
c001bcfa:	89 f0                	mov    eax,esi
c001bcfc:	5b                   	pop    ebx
c001bcfd:	5e                   	pop    esi
c001bcfe:	5f                   	pop    edi
c001bcff:	5d                   	pop    ebp
c001bd00:	c3                   	ret    
c001bd01:	90                   	nop

c001bd02 <ATAPI::write(unsigned long long, int, void*)>:
c001bd02:	b8 03 00 00 00       	mov    eax,0x3
c001bd07:	c3                   	ret    

c001bd08 <ATAPI::close(int, int, void*)>:
c001bd08:	83 ec 0c             	sub    esp,0xc
c001bd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd0f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd15:	85 c0                	test   eax,eax
c001bd17:	74 0c                	je     c001bd25 <ATAPI::close(int, int, void*)+0x1d>
c001bd19:	83 ec 0c             	sub    esp,0xc
c001bd1c:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd1e:	50                   	push   eax
c001bd1f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bd22:	83 c4 10             	add    esp,0x10
c001bd25:	31 c0                	xor    eax,eax
c001bd27:	83 c4 0c             	add    esp,0xc
c001bd2a:	c3                   	ret    
c001bd2b:	90                   	nop

c001bd2c <ATAPI::ATAPI()>:
c001bd2c:	83 ec 0c             	sub    esp,0xc
c001bd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd33:	83 ec 04             	sub    esp,0x4
c001bd36:	68 00 08 00 00       	push   0x800
c001bd3b:	68 55 15 02 c0       	push   0xc0021555
c001bd40:	50                   	push   eax
c001bd41:	e8 24 01 ff ff       	call   c000be6a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bd46:	83 c4 10             	add    esp,0x10
c001bd49:	ba 70 14 02 c0       	mov    edx,0xc0021470
c001bd4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd52:	89 10                	mov    DWORD PTR [eax],edx
c001bd54:	90                   	nop
c001bd55:	83 c4 0c             	add    esp,0xc
c001bd58:	c3                   	ret    
c001bd59:	90                   	nop

c001bd5a <ATAPI::readyForCommand()>:
c001bd5a:	56                   	push   esi
c001bd5b:	53                   	push   ebx
c001bd5c:	53                   	push   ebx
c001bd5d:	31 db                	xor    ebx,ebx
c001bd5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd63:	51                   	push   ecx
c001bd64:	6a 0c                	push   0xc
c001bd66:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bd6d:	50                   	push   eax
c001bd6e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bd74:	e8 d9 e8 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	a8 88                	test   al,0x88
c001bd7e:	74 25                	je     c001bda5 <ATAPI::readyForCommand()+0x4b>
c001bd80:	43                   	inc    ebx
c001bd81:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001bd87:	7e da                	jle    c001bd63 <ATAPI::readyForCommand()+0x9>
c001bd89:	83 ec 0c             	sub    esp,0xc
c001bd8c:	68 5e 01 00 00       	push   0x15e
c001bd91:	e8 d2 90 ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001bd96:	83 c4 10             	add    esp,0x10
c001bd99:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001bd9f:	75 c2                	jne    c001bd63 <ATAPI::readyForCommand()+0x9>
c001bda1:	31 c0                	xor    eax,eax
c001bda3:	eb 02                	jmp    c001bda7 <ATAPI::readyForCommand()+0x4d>
c001bda5:	b0 01                	mov    al,0x1
c001bda7:	5a                   	pop    edx
c001bda8:	5b                   	pop    ebx
c001bda9:	5e                   	pop    esi
c001bdaa:	c3                   	ret    
c001bdab:	90                   	nop

c001bdac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001bdac:	55                   	push   ebp
c001bdad:	57                   	push   edi
c001bdae:	56                   	push   esi
c001bdaf:	53                   	push   ebx
c001bdb0:	83 ec 20             	sub    esp,0x20
c001bdb3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bdb7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001bdbb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bdbf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001bdc3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bdc7:	6a 01                	push   0x1
c001bdc9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdd0:	50                   	push   eax
c001bdd1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdd7:	e8 c4 e9 ff ff       	call   c001a7a0 <IDE::enableIRQs(unsigned char, bool)>
c001bddc:	5e                   	pop    esi
c001bddd:	58                   	pop    eax
c001bdde:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bde5:	50                   	push   eax
c001bde6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdec:	e8 7b e7 ff ff       	call   c001a56c <IDE::prepareInterrupt(unsigned char)>
c001bdf1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdf4:	e8 61 ff ff ff       	call   c001bd5a <ATAPI::readyForCommand()>
c001bdf9:	83 c4 10             	add    esp,0x10
c001bdfc:	84 c0                	test   al,al
c001bdfe:	75 0a                	jne    c001be0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001be00:	bb 01 00 00 00       	mov    ebx,0x1
c001be05:	e9 57 02 00 00       	jmp    c001c061 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001be0a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001be10:	c1 e0 04             	shl    eax,0x4
c001be13:	0f b6 c0             	movzx  eax,al
c001be16:	50                   	push   eax
c001be17:	6a 06                	push   0x6
c001be19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be20:	50                   	push   eax
c001be21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be27:	e8 66 e7 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be2c:	6a 00                	push   0x0
c001be2e:	6a 01                	push   0x1
c001be30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be37:	50                   	push   eax
c001be38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be3e:	e8 4f e7 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be43:	83 c4 20             	add    esp,0x20
c001be46:	0f b6 c3             	movzx  eax,bl
c001be49:	50                   	push   eax
c001be4a:	6a 04                	push   0x4
c001be4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be53:	50                   	push   eax
c001be54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be5a:	0f b6 df             	movzx  ebx,bh
c001be5d:	e8 30 e7 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be62:	53                   	push   ebx
c001be63:	6a 05                	push   0x5
c001be65:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be6c:	50                   	push   eax
c001be6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be73:	e8 1a e7 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be78:	83 c4 20             	add    esp,0x20
c001be7b:	68 a0 00 00 00       	push   0xa0
c001be80:	6a 07                	push   0x7
c001be82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be89:	50                   	push   eax
c001be8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be90:	e8 fd e6 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be95:	83 c4 0c             	add    esp,0xc
c001be98:	6a 01                	push   0x1
c001be9a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bea1:	50                   	push   eax
c001bea2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bea8:	e8 87 f1 ff ff       	call   c001b034 <IDE::polling(unsigned char, unsigned int)>
c001bead:	83 c4 10             	add    esp,0x10
c001beb0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001beb6:	84 c0                	test   al,al
c001beb8:	74 23                	je     c001bedd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001beba:	0f b6 d8             	movzx  ebx,al
c001bebd:	53                   	push   ebx
c001bebe:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001bec5:	0f b6 d2             	movzx  edx,dl
c001bec8:	50                   	push   eax
c001bec9:	52                   	push   edx
c001beca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bed0:	e8 af f0 ff ff       	call   c001af84 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bed5:	83 c4 10             	add    esp,0x10
c001bed8:	e9 84 01 00 00       	jmp    c001c061 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bedd:	53                   	push   ebx
c001bede:	53                   	push   ebx
c001bedf:	0f b6 d2             	movzx  edx,dl
c001bee2:	52                   	push   edx
c001bee3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bee9:	e8 92 e6 ff ff       	call   c001a580 <IDE::getBase(unsigned char)>
c001beee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bef2:	b9 06 00 00 00       	mov    ecx,0x6
c001bef7:	89 c2                	mov    edx,eax
c001bef9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001befc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bf00:	83 c4 10             	add    esp,0x10
c001bf03:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bf09:	85 db                	test   ebx,ebx
c001bf0b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bf12:	0f 84 ec 00 00 00    	je     c001c004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001bf18:	51                   	push   ecx
c001bf19:	51                   	push   ecx
c001bf1a:	52                   	push   edx
c001bf1b:	50                   	push   eax
c001bf1c:	e8 df e7 ff ff       	call   c001a700 <IDE::waitInterrupt(unsigned char)>
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	84 c0                	test   al,al
c001bf26:	0f 84 d4 fe ff ff    	je     c001be00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bf2c:	56                   	push   esi
c001bf2d:	56                   	push   esi
c001bf2e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf35:	50                   	push   eax
c001bf36:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf3c:	e8 2b e6 ff ff       	call   c001a56c <IDE::prepareInterrupt(unsigned char)>
c001bf41:	83 c4 0c             	add    esp,0xc
c001bf44:	6a 04                	push   0x4
c001bf46:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf4d:	50                   	push   eax
c001bf4e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf54:	e8 f9 e6 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001bf59:	83 c4 0c             	add    esp,0xc
c001bf5c:	6a 05                	push   0x5
c001bf5e:	89 c6                	mov    esi,eax
c001bf60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf67:	50                   	push   eax
c001bf68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf6e:	e8 df e6 ff ff       	call   c001a652 <IDE::read(unsigned char, unsigned char)>
c001bf73:	89 f1                	mov    ecx,esi
c001bf75:	0f b6 c0             	movzx  eax,al
c001bf78:	c1 e0 08             	shl    eax,0x8
c001bf7b:	0f b6 f1             	movzx  esi,cl
c001bf7e:	09 c6                	or     esi,eax
c001bf80:	d1 fe                	sar    esi,1
c001bf82:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bf8e:	74 41                	je     c001bfd1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001bf90:	31 c9                	xor    ecx,ecx
c001bf92:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bf98:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001bf9c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bfa3:	75 0a                	jne    c001bfaf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001bfa5:	01 c9                	add    ecx,ecx
c001bfa7:	01 cd                	add    ebp,ecx
c001bfa9:	4b                   	dec    ebx
c001bfaa:	e9 54 ff ff ff       	jmp    c001bf03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bfaf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bfb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bfb8:	51                   	push   ecx
c001bfb9:	51                   	push   ecx
c001bfba:	52                   	push   edx
c001bfbb:	50                   	push   eax
c001bfbc:	e8 bf e5 ff ff       	call   c001a580 <IDE::getBase(unsigned char)>
c001bfc1:	89 c2                	mov    edx,eax
c001bfc3:	89 f0                	mov    eax,esi
c001bfc5:	66 ef                	out    dx,ax
c001bfc7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	41                   	inc    ecx
c001bfcf:	eb c1                	jmp    c001bf92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bfd1:	31 f6                	xor    esi,esi
c001bfd3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bfd9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bfdd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bfe4:	75 06                	jne    c001bfec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bfe6:	01 f6                	add    esi,esi
c001bfe8:	01 f5                	add    ebp,esi
c001bfea:	eb bd                	jmp    c001bfa9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bfec:	51                   	push   ecx
c001bfed:	51                   	push   ecx
c001bfee:	52                   	push   edx
c001bfef:	50                   	push   eax
c001bff0:	e8 8b e5 ff ff       	call   c001a580 <IDE::getBase(unsigned char)>
c001bff5:	89 c2                	mov    edx,eax
c001bff7:	66 ed                	in     ax,dx
c001bff9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001bffe:	83 c4 10             	add    esp,0x10
c001c001:	46                   	inc    esi
c001c002:	eb cf                	jmp    c001bfd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001c004:	51                   	push   ecx
c001c005:	51                   	push   ecx
c001c006:	52                   	push   edx
c001c007:	50                   	push   eax
c001c008:	e8 f3 e6 ff ff       	call   c001a700 <IDE::waitInterrupt(unsigned char)>
c001c00d:	83 c4 10             	add    esp,0x10
c001c010:	84 c0                	test   al,al
c001c012:	0f 84 e8 fd ff ff    	je     c001be00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c018:	52                   	push   edx
c001c019:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c01e:	52                   	push   edx
c001c01f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c026:	50                   	push   eax
c001c027:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c02d:	e8 3a e5 ff ff       	call   c001a56c <IDE::prepareInterrupt(unsigned char)>
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	50                   	push   eax
c001c036:	50                   	push   eax
c001c037:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c03e:	50                   	push   eax
c001c03f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c045:	e8 36 e5 ff ff       	call   c001a580 <IDE::getBase(unsigned char)>
c001c04a:	8d 50 07             	lea    edx,[eax+0x7]
c001c04d:	ec                   	in     al,dx
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	a8 88                	test   al,0x88
c001c053:	74 0a                	je     c001c05f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c055:	4b                   	dec    ebx
c001c056:	75 dd                	jne    c001c035 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c058:	bb 02 00 00 00       	mov    ebx,0x2
c001c05d:	eb 02                	jmp    c001c061 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c05f:	31 db                	xor    ebx,ebx
c001c061:	83 c4 1c             	add    esp,0x1c
c001c064:	89 d8                	mov    eax,ebx
c001c066:	5b                   	pop    ebx
c001c067:	5e                   	pop    esi
c001c068:	5f                   	pop    edi
c001c069:	5d                   	pop    ebp
c001c06a:	c3                   	ret    
c001c06b:	90                   	nop

c001c06c <ATAPI::diskRemoved()>:
c001c06c:	53                   	push   ebx
c001c06d:	83 ec 14             	sub    esp,0x14
c001c070:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c074:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c07b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c081:	e8 a8 0c ff ff       	call   c000cd2e <LogicalDisk::unmount()>
c001c086:	58                   	pop    eax
c001c087:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c08d:	e8 7a 16 ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c001c092:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c098:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c09c:	83 c4 18             	add    esp,0x18
c001c09f:	5b                   	pop    ebx
c001c0a0:	e9 57 16 ff ff       	jmp    c000d6fc <VCache::invalidateReadBuffer()>
c001c0a5:	90                   	nop

c001c0a6 <ATAPI::eject()>:
c001c0a6:	57                   	push   edi
c001c0a7:	b9 03 00 00 00       	mov    ecx,0x3
c001c0ac:	53                   	push   ebx
c001c0ad:	83 ec 14             	sub    esp,0x14
c001c0b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c0b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c0b8:	fc                   	cld    
c001c0b9:	31 c0                	xor    eax,eax
c001c0bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c0bd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c0c2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c0c7:	50                   	push   eax
c001c0c8:	50                   	push   eax
c001c0c9:	6a 00                	push   0x0
c001c0cb:	6a 00                	push   0x0
c001c0cd:	6a 00                	push   0x0
c001c0cf:	6a 02                	push   0x2
c001c0d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0d5:	50                   	push   eax
c001c0d6:	53                   	push   ebx
c001c0d7:	e8 d0 fc ff ff       	call   c001bdac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c0dc:	83 c4 14             	add    esp,0x14
c001c0df:	53                   	push   ebx
c001c0e0:	e8 87 ff ff ff       	call   c001c06c <ATAPI::diskRemoved()>
c001c0e5:	83 c4 24             	add    esp,0x24
c001c0e8:	31 c0                	xor    eax,eax
c001c0ea:	5b                   	pop    ebx
c001c0eb:	5f                   	pop    edi
c001c0ec:	c3                   	ret    
c001c0ed:	90                   	nop

c001c0ee <ATAPI::diskInserted()>:
c001c0ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c0f9:	c3                   	ret    

c001c0fa <ATAPI::detectMedia()>:
c001c0fa:	56                   	push   esi
c001c0fb:	53                   	push   ebx
c001c0fc:	83 ec 28             	sub    esp,0x28
c001c0ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c103:	6a 0c                	push   0xc
c001c105:	6a 00                	push   0x0
c001c107:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c10b:	56                   	push   esi
c001c10c:	e8 af 43 fe ff       	call   c00004c0 <memset>
c001c111:	58                   	pop    eax
c001c112:	5a                   	pop    edx
c001c113:	6a 00                	push   0x0
c001c115:	6a 00                	push   0x0
c001c117:	6a 00                	push   0x0
c001c119:	6a 00                	push   0x0
c001c11b:	56                   	push   esi
c001c11c:	53                   	push   ebx
c001c11d:	e8 8a fc ff ff       	call   c001bdac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c122:	83 c4 1c             	add    esp,0x1c
c001c125:	6a 0c                	push   0xc
c001c127:	6a 00                	push   0x0
c001c129:	56                   	push   esi
c001c12a:	e8 91 43 fe ff       	call   c00004c0 <memset>
c001c12f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c134:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c139:	59                   	pop    ecx
c001c13a:	58                   	pop    eax
c001c13b:	6a 01                	push   0x1
c001c13d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c141:	50                   	push   eax
c001c142:	6a 00                	push   0x0
c001c144:	6a 12                	push   0x12
c001c146:	56                   	push   esi
c001c147:	53                   	push   ebx
c001c148:	e8 5f fc ff ff       	call   c001bdac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c14d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c151:	83 c4 20             	add    esp,0x20
c001c154:	83 e0 7f             	and    eax,0x7f
c001c157:	3c 70                	cmp    al,0x70
c001c159:	74 15                	je     c001c170 <ATAPI::detectMedia()+0x76>
c001c15b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c162:	75 0c                	jne    c001c170 <ATAPI::detectMedia()+0x76>
c001c164:	83 ec 0c             	sub    esp,0xc
c001c167:	53                   	push   ebx
c001c168:	e8 81 ff ff ff       	call   c001c0ee <ATAPI::diskInserted()>
c001c16d:	83 c4 10             	add    esp,0x10
c001c170:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c174:	83 e0 0f             	and    eax,0xf
c001c177:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c17c:	75 18                	jne    c001c196 <ATAPI::detectMedia()+0x9c>
c001c17e:	3c 02                	cmp    al,0x2
c001c180:	75 14                	jne    c001c196 <ATAPI::detectMedia()+0x9c>
c001c182:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c189:	74 24                	je     c001c1af <ATAPI::detectMedia()+0xb5>
c001c18b:	83 ec 0c             	sub    esp,0xc
c001c18e:	53                   	push   ebx
c001c18f:	e8 d8 fe ff ff       	call   c001c06c <ATAPI::diskRemoved()>
c001c194:	eb 16                	jmp    c001c1ac <ATAPI::detectMedia()+0xb2>
c001c196:	84 c0                	test   al,al
c001c198:	75 15                	jne    c001c1af <ATAPI::detectMedia()+0xb5>
c001c19a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c1a1:	75 0c                	jne    c001c1af <ATAPI::detectMedia()+0xb5>
c001c1a3:	83 ec 0c             	sub    esp,0xc
c001c1a6:	53                   	push   ebx
c001c1a7:	e8 42 ff ff ff       	call   c001c0ee <ATAPI::diskInserted()>
c001c1ac:	83 c4 10             	add    esp,0x10
c001c1af:	83 c4 24             	add    esp,0x24
c001c1b2:	5b                   	pop    ebx
c001c1b3:	5e                   	pop    esi
c001c1b4:	c3                   	ret    
c001c1b5:	90                   	nop

c001c1b6 <ATAPI::open(int, int, void*)>:
c001c1b6:	56                   	push   esi
c001c1b7:	53                   	push   ebx
c001c1b8:	50                   	push   eax
c001c1b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c1c5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c1cb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c1d1:	c1 e0 06             	shl    eax,0x6
c001c1d4:	01 d0                	add    eax,edx
c001c1d6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c1dd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c1e3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c1ea:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c1f4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c1fa:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c201:	6a 04                	push   0x4
c001c203:	6a 0c                	push   0xc
c001c205:	51                   	push   ecx
c001c206:	52                   	push   edx
c001c207:	e8 86 e3 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c20c:	90                   	nop
c001c20d:	90                   	nop
c001c20e:	6a 00                	push   0x0
c001c210:	6a 0c                	push   0xc
c001c212:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c219:	50                   	push   eax
c001c21a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c220:	e8 6d e3 ff ff       	call   c001a592 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c225:	83 c4 14             	add    esp,0x14
c001c228:	68 78 01 00 00       	push   0x178
c001c22d:	e8 41 b6 fe ff       	call   c0007873 <malloc>
c001c232:	83 c4 0c             	add    esp,0xc
c001c235:	89 c6                	mov    esi,eax
c001c237:	6a 00                	push   0x0
c001c239:	68 ff ff ff 7f       	push   0x7fffffff
c001c23e:	6a 00                	push   0x0
c001c240:	6a 00                	push   0x0
c001c242:	53                   	push   ebx
c001c243:	68 07 16 02 c0       	push   0xc0021607
c001c248:	50                   	push   eax
c001c249:	e8 22 09 ff ff       	call   c000cb70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c24e:	83 c4 14             	add    esp,0x14
c001c251:	56                   	push   esi
c001c252:	e8 d9 09 ff ff       	call   c000cc30 <LogicalDisk::assignDriveLetter()>
c001c257:	5a                   	pop    edx
c001c258:	59                   	pop    ecx
c001c259:	0f be c0             	movsx  eax,al
c001c25c:	50                   	push   eax
c001c25d:	68 58 14 02 c0       	push   0xc0021458
c001c262:	e8 fc e3 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001c267:	58                   	pop    eax
c001c268:	5a                   	pop    edx
c001c269:	56                   	push   esi
c001c26a:	53                   	push   ebx
c001c26b:	e8 2c f8 fe ff       	call   c000ba9c <Device::addChild(Device*)>
c001c270:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c279:	e8 54 fc fe ff       	call   c000bed2 <PhysicalDisk::startCache()>
c001c27e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c285:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c288:	e8 6d fe ff ff       	call   c001c0fa <ATAPI::detectMedia()>
c001c28d:	83 c4 14             	add    esp,0x14
c001c290:	31 c0                	xor    eax,eax
c001c292:	5b                   	pop    ebx
c001c293:	5e                   	pop    esi
c001c294:	c3                   	ret    
c001c295:	90                   	nop

c001c296 <ATAPI::read(unsigned long long, int, void*)>:
c001c296:	55                   	push   ebp
c001c297:	57                   	push   edi
c001c298:	56                   	push   esi
c001c299:	53                   	push   ebx
c001c29a:	83 ec 1c             	sub    esp,0x1c
c001c29d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c2a1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c2a5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c2a9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c2b0:	74 3c                	je     c001c2ee <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c2b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c2b6:	b9 03 00 00 00       	mov    ecx,0x3
c001c2bb:	fc                   	cld    
c001c2bc:	31 c0                	xor    eax,eax
c001c2be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c2c0:	0f ce                	bswap  esi
c001c2c2:	89 e8                	mov    eax,ebp
c001c2c4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c2c9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c2cd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c2d1:	50                   	push   eax
c001c2d2:	50                   	push   eax
c001c2d3:	55                   	push   ebp
c001c2d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c2d8:	c1 e5 0b             	shl    ebp,0xb
c001c2db:	6a 00                	push   0x0
c001c2dd:	55                   	push   ebp
c001c2de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2e2:	50                   	push   eax
c001c2e3:	53                   	push   ebx
c001c2e4:	e8 c3 fa ff ff       	call   c001bdac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c2e9:	83 c4 20             	add    esp,0x20
c001c2ec:	eb 1a                	jmp    c001c308 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c2ee:	83 ec 0c             	sub    esp,0xc
c001c2f1:	53                   	push   ebx
c001c2f2:	e8 03 fe ff ff       	call   c001c0fa <ATAPI::detectMedia()>
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c301:	75 af                	jne    c001c2b2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c303:	b8 02 00 00 00       	mov    eax,0x2
c001c308:	83 c4 1c             	add    esp,0x1c
c001c30b:	5b                   	pop    ebx
c001c30c:	5e                   	pop    esi
c001c30d:	5f                   	pop    edi
c001c30e:	5d                   	pop    ebp
c001c30f:	c3                   	ret    

c001c310 <SATA::close(int, int, void*)>:
c001c310:	83 ec 0c             	sub    esp,0xc
c001c313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c317:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c31d:	85 c0                	test   eax,eax
c001c31f:	74 0c                	je     c001c32d <SATA::close(int, int, void*)+0x1d>
c001c321:	83 ec 0c             	sub    esp,0xc
c001c324:	8b 10                	mov    edx,DWORD PTR [eax]
c001c326:	50                   	push   eax
c001c327:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c32a:	83 c4 10             	add    esp,0x10
c001c32d:	31 c0                	xor    eax,eax
c001c32f:	83 c4 0c             	add    esp,0xc
c001c332:	c3                   	ret    
c001c333:	90                   	nop

c001c334 <SATA::powerSaving(PowerSavingLevel)>:
c001c334:	c3                   	ret    
c001c335:	90                   	nop

c001c336 <SATA::open(int, int, void*)>:
c001c336:	56                   	push   esi
c001c337:	53                   	push   ebx
c001c338:	50                   	push   eax
c001c339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c33d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c341:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c34b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c351:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c35b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c365:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c36f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c376:	e8 ef b7 fe ff       	call   c0007b6a <Phys::allocatePage()>
c001c37b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c381:	89 c6                	mov    esi,eax
c001c383:	e8 e2 b7 fe ff       	call   c0007b6a <Phys::allocatePage()>
c001c388:	81 c6 00 10 00 00    	add    esi,0x1000
c001c38e:	39 c6                	cmp    esi,eax
c001c390:	74 10                	je     c001c3a2 <SATA::open(int, int, void*)+0x6c>
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	68 a0 14 02 c0       	push   0xc00214a0
c001c39a:	e8 78 40 ff ff       	call   c0010417 <KePanic(char const*)>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	83 ec 0c             	sub    esp,0xc
c001c3a5:	6a 02                	push   0x2
c001c3a7:	e8 c6 cf fe ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c001c3ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c3b2:	6a 03                	push   0x3
c001c3b4:	50                   	push   eax
c001c3b5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c3bb:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c3c1:	e8 7c d6 fe ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c3c6:	83 c4 14             	add    esp,0x14
c001c3c9:	53                   	push   ebx
c001c3ca:	e8 03 fb fe ff       	call   c000bed2 <PhysicalDisk::startCache()>
c001c3cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3d2:	e8 67 0c ff ff       	call   c000d03e <createPartitionsForDisk(PhysicalDisk*)>
c001c3d7:	83 c4 14             	add    esp,0x14
c001c3da:	31 c0                	xor    eax,eax
c001c3dc:	5b                   	pop    ebx
c001c3dd:	5e                   	pop    esi
c001c3de:	c3                   	ret    
c001c3df:	90                   	nop

c001c3e0 <SATA::SATA()>:
c001c3e0:	83 ec 0c             	sub    esp,0xc
c001c3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e7:	83 ec 04             	sub    esp,0x4
c001c3ea:	68 00 02 00 00       	push   0x200
c001c3ef:	68 b4 14 02 c0       	push   0xc00214b4
c001c3f4:	50                   	push   eax
c001c3f5:	e8 70 fa fe ff       	call   c000be6a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	ba 24 15 02 c0       	mov    edx,0xc0021524
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	89 10                	mov    DWORD PTR [eax],edx
c001c408:	90                   	nop
c001c409:	83 c4 0c             	add    esp,0xc
c001c40c:	c3                   	ret    
c001c40d:	90                   	nop

c001c40e <SATA::access(unsigned long long, int, void*, bool)>:
c001c40e:	55                   	push   ebp
c001c40f:	57                   	push   edi
c001c410:	56                   	push   esi
c001c411:	53                   	push   ebx
c001c412:	83 ec 2c             	sub    esp,0x2c
c001c415:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c419:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c41d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c421:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c425:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c42d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c432:	7e 10                	jle    c001c444 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	68 c4 14 02 c0       	push   0xc00214c4
c001c43c:	e8 d6 3f ff ff       	call   c0010417 <KePanic(char const*)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c44a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c450:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c456:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c45a:	89 d0                	mov    eax,edx
c001c45c:	c1 e0 07             	shl    eax,0x7
c001c45f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c463:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c46d:	51                   	push   ecx
c001c46e:	8d 42 02             	lea    eax,[edx+0x2]
c001c471:	51                   	push   ecx
c001c472:	c1 e0 07             	shl    eax,0x7
c001c475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c479:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c47d:	50                   	push   eax
c001c47e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c484:	e8 95 ec ff ff       	call   c001b11e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c48d:	83 c4 10             	add    esp,0x10
c001c490:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c494:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c499:	0f 84 4f 01 00 00    	je     c001c5ee <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c49f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c4a3:	c1 e0 09             	shl    eax,0x9
c001c4a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4aa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c4af:	74 0e                	je     c001c4bf <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c4b1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c4b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c4bb:	89 c1                	mov    ecx,eax
c001c4bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4bf:	8d 42 02             	lea    eax,[edx+0x2]
c001c4c2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c4c8:	c1 e0 07             	shl    eax,0x7
c001c4cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c4cf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c4d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4d5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c4db:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c4e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4e5:	c1 e1 05             	shl    ecx,0x5
c001c4e8:	01 c8                	add    eax,ecx
c001c4ea:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c4ee:	83 e1 01             	and    ecx,0x1
c001c4f1:	89 ce                	mov    esi,ecx
c001c4f3:	8a 08                	mov    cl,BYTE PTR [eax]
c001c4f5:	c1 e6 06             	shl    esi,0x6
c001c4f8:	83 e1 bf             	and    ecx,0xffffffbf
c001c4fb:	09 f1                	or     ecx,esi
c001c4fd:	88 08                	mov    BYTE PTR [eax],cl
c001c4ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c501:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c507:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c50d:	89 08                	mov    DWORD PTR [eax],ecx
c001c50f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c515:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c51b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c521:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c524:	50                   	push   eax
c001c525:	68 90 00 00 00       	push   0x90
c001c52a:	6a 00                	push   0x0
c001c52c:	56                   	push   esi
c001c52d:	e8 8e 3f fe ff       	call   c00004c0 <memset>
c001c532:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c538:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c53c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c542:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c546:	48                   	dec    eax
c001c547:	83 c4 10             	add    esp,0x10
c001c54a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c54f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c553:	89 c1                	mov    ecx,eax
c001c555:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c55b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c560:	09 c8                	or     eax,ecx
c001c562:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c568:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c56b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c572:	66 25 00 7f          	and    ax,0x7f00
c001c576:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c57a:	66 0d 27 80          	or     ax,0x8027
c001c57e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c583:	66 89 06             	mov    WORD PTR [esi],ax
c001c586:	19 c0                	sbb    eax,eax
c001c588:	83 e0 f0             	and    eax,0xfffffff0
c001c58b:	83 c0 35             	add    eax,0x35
c001c58e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c591:	89 e8                	mov    eax,ebp
c001c593:	c1 e8 10             	shr    eax,0x10
c001c596:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c599:	89 e8                	mov    eax,ebp
c001c59b:	c1 e8 18             	shr    eax,0x18
c001c59e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c5a1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c5a5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c5a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5ac:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c5af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c5b3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c5b7:	89 d6                	mov    esi,edx
c001c5b9:	c1 e6 07             	shl    esi,0x7
c001c5bc:	31 c0                	xor    eax,eax
c001c5be:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c5c2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c5c8:	80 e1 88             	and    cl,0x88
c001c5cb:	74 0a                	je     c001c5d7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c5cd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c5d2:	74 0a                	je     c001c5de <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c5d4:	40                   	inc    eax
c001c5d5:	eb eb                	jmp    c001c5c2 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c5d7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c5dc:	75 17                	jne    c001c5f5 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c5de:	83 ec 0c             	sub    esp,0xc
c001c5e1:	68 fd 14 02 c0       	push   0xc00214fd
c001c5e6:	e8 78 e0 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	b8 01 00 00 00       	mov    eax,0x1
c001c5f3:	eb 5d                	jmp    c001c652 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c5f5:	b8 01 00 00 00       	mov    eax,0x1
c001c5fa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c5fe:	c1 e2 07             	shl    edx,0x7
c001c601:	d3 e0                	shl    eax,cl
c001c603:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c607:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c60d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c613:	85 c8                	test   eax,ecx
c001c615:	74 16                	je     c001c62d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c617:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c61d:	0f ba e1 1e          	bt     ecx,0x1e
c001c621:	73 ea                	jae    c001c60d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c623:	83 ec 0c             	sub    esp,0xc
c001c626:	68 0b 15 02 c0       	push   0xc002150b
c001c62b:	eb b9                	jmp    c001c5e6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c62d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c633:	0f ba e0 1e          	bt     eax,0x1e
c001c637:	72 b5                	jb     c001c5ee <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c639:	31 c0                	xor    eax,eax
c001c63b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c640:	75 10                	jne    c001c652 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c642:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c648:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c64c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c650:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c652:	83 c4 2c             	add    esp,0x2c
c001c655:	5b                   	pop    ebx
c001c656:	5e                   	pop    esi
c001c657:	5f                   	pop    edi
c001c658:	5d                   	pop    ebp
c001c659:	c3                   	ret    

c001c65a <SATA::read(unsigned long long, int, void*)>:
c001c65a:	55                   	push   ebp
c001c65b:	57                   	push   edi
c001c65c:	56                   	push   esi
c001c65d:	be 04 00 00 00       	mov    esi,0x4
c001c662:	53                   	push   ebx
c001c663:	83 ec 0c             	sub    esp,0xc
c001c666:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c66a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c66e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c672:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c676:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c679:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c67f:	0f 87 1a 02 00 00    	ja     c001c89f <SATA::read(unsigned long long, int, void*)+0x245>
c001c685:	be 06 00 00 00       	mov    esi,0x6
c001c68a:	85 c9                	test   ecx,ecx
c001c68c:	0f 84 0d 02 00 00    	je     c001c89f <SATA::read(unsigned long long, int, void*)+0x245>
c001c692:	56                   	push   esi
c001c693:	56                   	push   esi
c001c694:	6a 00                	push   0x0
c001c696:	51                   	push   ecx
c001c697:	53                   	push   ebx
c001c698:	52                   	push   edx
c001c699:	50                   	push   eax
c001c69a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c69e:	e8 6b fd ff ff       	call   c001c40e <SATA::access(unsigned long long, int, void*, bool)>
c001c6a3:	83 c4 20             	add    esp,0x20
c001c6a6:	89 c6                	mov    esi,eax
c001c6a8:	85 c0                	test   eax,eax
c001c6aa:	0f 85 ea 01 00 00    	jne    c001c89a <SATA::read(unsigned long long, int, void*)+0x240>
c001c6b0:	50                   	push   eax
c001c6b1:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c6b7:	50                   	push   eax
c001c6b8:	bb 0a 00 00 00       	mov    ebx,0xa
c001c6bd:	6a 0f                	push   0xf
c001c6bf:	6a 00                	push   0x0
c001c6c1:	e8 87 f2 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c6c6:	5a                   	pop    edx
c001c6c7:	59                   	pop    ecx
c001c6c8:	b9 10 27 00 00       	mov    ecx,0x2710
c001c6cd:	0f b6 c0             	movzx  eax,al
c001c6d0:	50                   	push   eax
c001c6d1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c6d6:	99                   	cdq    
c001c6d7:	f7 f9                	idiv   ecx
c001c6d9:	99                   	cdq    
c001c6da:	f7 fb                	idiv   ebx
c001c6dc:	8d 42 30             	lea    eax,[edx+0x30]
c001c6df:	0f b6 c0             	movzx  eax,al
c001c6e2:	50                   	push   eax
c001c6e3:	e8 54 f2 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c6e8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c6ee:	5f                   	pop    edi
c001c6ef:	5d                   	pop    ebp
c001c6f0:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c6f5:	6a 0f                	push   0xf
c001c6f7:	6a 00                	push   0x0
c001c6f9:	e8 4f f2 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c6fe:	5a                   	pop    edx
c001c6ff:	59                   	pop    ecx
c001c700:	0f b6 c0             	movzx  eax,al
c001c703:	50                   	push   eax
c001c704:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c709:	99                   	cdq    
c001c70a:	f7 fd                	idiv   ebp
c001c70c:	99                   	cdq    
c001c70d:	f7 fb                	idiv   ebx
c001c70f:	8d 42 30             	lea    eax,[edx+0x30]
c001c712:	0f b6 c0             	movzx  eax,al
c001c715:	50                   	push   eax
c001c716:	e8 21 f2 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c71b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c721:	5f                   	pop    edi
c001c722:	bf 64 00 00 00       	mov    edi,0x64
c001c727:	58                   	pop    eax
c001c728:	6a 0f                	push   0xf
c001c72a:	6a 00                	push   0x0
c001c72c:	e8 1c f2 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c731:	5a                   	pop    edx
c001c732:	59                   	pop    ecx
c001c733:	0f b6 c0             	movzx  eax,al
c001c736:	50                   	push   eax
c001c737:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c73c:	99                   	cdq    
c001c73d:	f7 ff                	idiv   edi
c001c73f:	99                   	cdq    
c001c740:	f7 fb                	idiv   ebx
c001c742:	8d 42 30             	lea    eax,[edx+0x30]
c001c745:	0f b6 c0             	movzx  eax,al
c001c748:	50                   	push   eax
c001c749:	e8 ee f1 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c74e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c754:	58                   	pop    eax
c001c755:	5a                   	pop    edx
c001c756:	6a 0f                	push   0xf
c001c758:	6a 00                	push   0x0
c001c75a:	e8 ee f1 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c75f:	59                   	pop    ecx
c001c760:	5a                   	pop    edx
c001c761:	0f b6 c0             	movzx  eax,al
c001c764:	50                   	push   eax
c001c765:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c76a:	99                   	cdq    
c001c76b:	f7 fb                	idiv   ebx
c001c76d:	99                   	cdq    
c001c76e:	f7 fb                	idiv   ebx
c001c770:	8d 42 30             	lea    eax,[edx+0x30]
c001c773:	0f b6 c0             	movzx  eax,al
c001c776:	50                   	push   eax
c001c777:	e8 c0 f1 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c77c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c782:	59                   	pop    ecx
c001c783:	58                   	pop    eax
c001c784:	6a 0f                	push   0xf
c001c786:	6a 00                	push   0x0
c001c788:	e8 c0 f1 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c78d:	5a                   	pop    edx
c001c78e:	59                   	pop    ecx
c001c78f:	0f b6 c0             	movzx  eax,al
c001c792:	50                   	push   eax
c001c793:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c798:	99                   	cdq    
c001c799:	f7 fb                	idiv   ebx
c001c79b:	8d 42 30             	lea    eax,[edx+0x30]
c001c79e:	0f b6 c0             	movzx  eax,al
c001c7a1:	50                   	push   eax
c001c7a2:	e8 95 f1 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c7a7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c7ad:	58                   	pop    eax
c001c7ae:	5a                   	pop    edx
c001c7af:	6a 0f                	push   0xf
c001c7b1:	6a 00                	push   0x0
c001c7b3:	e8 95 f1 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c7b8:	59                   	pop    ecx
c001c7b9:	b9 10 27 00 00       	mov    ecx,0x2710
c001c7be:	5a                   	pop    edx
c001c7bf:	0f b6 c0             	movzx  eax,al
c001c7c2:	50                   	push   eax
c001c7c3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c7c8:	99                   	cdq    
c001c7c9:	f7 f9                	idiv   ecx
c001c7cb:	99                   	cdq    
c001c7cc:	f7 fb                	idiv   ebx
c001c7ce:	8d 42 30             	lea    eax,[edx+0x30]
c001c7d1:	0f b6 c0             	movzx  eax,al
c001c7d4:	50                   	push   eax
c001c7d5:	e8 62 f1 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c7da:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c7e0:	59                   	pop    ecx
c001c7e1:	58                   	pop    eax
c001c7e2:	6a 0f                	push   0xf
c001c7e4:	6a 00                	push   0x0
c001c7e6:	e8 62 f1 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c7eb:	5a                   	pop    edx
c001c7ec:	59                   	pop    ecx
c001c7ed:	0f b6 c0             	movzx  eax,al
c001c7f0:	50                   	push   eax
c001c7f1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c7f6:	99                   	cdq    
c001c7f7:	f7 fd                	idiv   ebp
c001c7f9:	99                   	cdq    
c001c7fa:	f7 fb                	idiv   ebx
c001c7fc:	8d 42 30             	lea    eax,[edx+0x30]
c001c7ff:	0f b6 c0             	movzx  eax,al
c001c802:	50                   	push   eax
c001c803:	e8 34 f1 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c808:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c80e:	5d                   	pop    ebp
c001c80f:	58                   	pop    eax
c001c810:	6a 0f                	push   0xf
c001c812:	6a 00                	push   0x0
c001c814:	e8 34 f1 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c819:	5a                   	pop    edx
c001c81a:	59                   	pop    ecx
c001c81b:	0f b6 c0             	movzx  eax,al
c001c81e:	50                   	push   eax
c001c81f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c824:	99                   	cdq    
c001c825:	f7 ff                	idiv   edi
c001c827:	99                   	cdq    
c001c828:	f7 fb                	idiv   ebx
c001c82a:	8d 42 30             	lea    eax,[edx+0x30]
c001c82d:	0f b6 c0             	movzx  eax,al
c001c830:	50                   	push   eax
c001c831:	e8 06 f1 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c836:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c83c:	5f                   	pop    edi
c001c83d:	5d                   	pop    ebp
c001c83e:	6a 0f                	push   0xf
c001c840:	6a 00                	push   0x0
c001c842:	e8 06 f1 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c847:	5a                   	pop    edx
c001c848:	59                   	pop    ecx
c001c849:	0f b6 c0             	movzx  eax,al
c001c84c:	50                   	push   eax
c001c84d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c852:	99                   	cdq    
c001c853:	f7 fb                	idiv   ebx
c001c855:	99                   	cdq    
c001c856:	f7 fb                	idiv   ebx
c001c858:	8d 42 30             	lea    eax,[edx+0x30]
c001c85b:	0f b6 c0             	movzx  eax,al
c001c85e:	50                   	push   eax
c001c85f:	e8 d8 f0 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c864:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c86a:	5f                   	pop    edi
c001c86b:	5d                   	pop    ebp
c001c86c:	6a 0f                	push   0xf
c001c86e:	6a 00                	push   0x0
c001c870:	e8 d8 f0 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c875:	5a                   	pop    edx
c001c876:	59                   	pop    ecx
c001c877:	0f b6 c0             	movzx  eax,al
c001c87a:	50                   	push   eax
c001c87b:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c880:	99                   	cdq    
c001c881:	f7 fb                	idiv   ebx
c001c883:	83 c2 30             	add    edx,0x30
c001c886:	0f b6 d2             	movzx  edx,dl
c001c889:	52                   	push   edx
c001c88a:	e8 ad f0 ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c898:	eb 05                	jmp    c001c89f <SATA::read(unsigned long long, int, void*)+0x245>
c001c89a:	be 01 00 00 00       	mov    esi,0x1
c001c89f:	83 c4 0c             	add    esp,0xc
c001c8a2:	89 f0                	mov    eax,esi
c001c8a4:	5b                   	pop    ebx
c001c8a5:	5e                   	pop    esi
c001c8a6:	5f                   	pop    edi
c001c8a7:	5d                   	pop    ebp
c001c8a8:	c3                   	ret    
c001c8a9:	90                   	nop

c001c8aa <SATA::write(unsigned long long, int, void*)>:
c001c8aa:	55                   	push   ebp
c001c8ab:	b8 04 00 00 00       	mov    eax,0x4
c001c8b0:	57                   	push   edi
c001c8b1:	56                   	push   esi
c001c8b2:	53                   	push   ebx
c001c8b3:	83 ec 1c             	sub    esp,0x1c
c001c8b6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c8ba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c8be:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8c2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c8c6:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c8c9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c8cf:	0f 87 32 02 00 00    	ja     c001cb07 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c8d5:	b8 06 00 00 00       	mov    eax,0x6
c001c8da:	85 ff                	test   edi,edi
c001c8dc:	0f 84 25 02 00 00    	je     c001cb07 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c8e2:	89 ee                	mov    esi,ebp
c001c8e4:	c1 e6 09             	shl    esi,0x9
c001c8e7:	01 fe                	add    esi,edi
c001c8e9:	89 c8                	mov    eax,ecx
c001c8eb:	89 da                	mov    edx,ebx
c001c8ed:	83 c0 01             	add    eax,0x1
c001c8f0:	83 d2 00             	adc    edx,0x0
c001c8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c8fb:	50                   	push   eax
c001c8fc:	50                   	push   eax
c001c8fd:	6a 01                	push   0x1
c001c8ff:	57                   	push   edi
c001c900:	81 c7 00 02 00 00    	add    edi,0x200
c001c906:	6a 01                	push   0x1
c001c908:	53                   	push   ebx
c001c909:	51                   	push   ecx
c001c90a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c90e:	e8 fb fa ff ff       	call   c001c40e <SATA::access(unsigned long long, int, void*, bool)>
c001c913:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c917:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c91b:	83 c4 20             	add    esp,0x20
c001c91e:	39 f7                	cmp    edi,esi
c001c920:	75 c7                	jne    c001c8e9 <SATA::write(unsigned long long, int, void*)+0x3f>
c001c922:	50                   	push   eax
c001c923:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c929:	50                   	push   eax
c001c92a:	bd 10 27 00 00       	mov    ebp,0x2710
c001c92f:	6a 0f                	push   0xf
c001c931:	bb 0a 00 00 00       	mov    ebx,0xa
c001c936:	6a 00                	push   0x0
c001c938:	e8 10 f0 ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c93d:	5a                   	pop    edx
c001c93e:	59                   	pop    ecx
c001c93f:	0f b6 c0             	movzx  eax,al
c001c942:	50                   	push   eax
c001c943:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c948:	99                   	cdq    
c001c949:	f7 fd                	idiv   ebp
c001c94b:	99                   	cdq    
c001c94c:	f7 fb                	idiv   ebx
c001c94e:	8d 42 30             	lea    eax,[edx+0x30]
c001c951:	0f b6 c0             	movzx  eax,al
c001c954:	50                   	push   eax
c001c955:	e8 e2 ef ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c95a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c960:	5e                   	pop    esi
c001c961:	5f                   	pop    edi
c001c962:	bf e8 03 00 00       	mov    edi,0x3e8
c001c967:	6a 0f                	push   0xf
c001c969:	6a 00                	push   0x0
c001c96b:	e8 dd ef ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c970:	5a                   	pop    edx
c001c971:	59                   	pop    ecx
c001c972:	0f b6 c0             	movzx  eax,al
c001c975:	50                   	push   eax
c001c976:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c97b:	99                   	cdq    
c001c97c:	f7 ff                	idiv   edi
c001c97e:	99                   	cdq    
c001c97f:	f7 fb                	idiv   ebx
c001c981:	8d 42 30             	lea    eax,[edx+0x30]
c001c984:	0f b6 c0             	movzx  eax,al
c001c987:	50                   	push   eax
c001c988:	e8 af ef ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c98d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c993:	5e                   	pop    esi
c001c994:	be 64 00 00 00       	mov    esi,0x64
c001c999:	58                   	pop    eax
c001c99a:	6a 0f                	push   0xf
c001c99c:	6a 00                	push   0x0
c001c99e:	e8 aa ef ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c9a3:	5a                   	pop    edx
c001c9a4:	59                   	pop    ecx
c001c9a5:	0f b6 c0             	movzx  eax,al
c001c9a8:	50                   	push   eax
c001c9a9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c9ae:	99                   	cdq    
c001c9af:	f7 fe                	idiv   esi
c001c9b1:	99                   	cdq    
c001c9b2:	f7 fb                	idiv   ebx
c001c9b4:	8d 42 30             	lea    eax,[edx+0x30]
c001c9b7:	0f b6 c0             	movzx  eax,al
c001c9ba:	50                   	push   eax
c001c9bb:	e8 7c ef ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c9c0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c9c6:	58                   	pop    eax
c001c9c7:	5a                   	pop    edx
c001c9c8:	6a 0f                	push   0xf
c001c9ca:	6a 00                	push   0x0
c001c9cc:	e8 7c ef ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c9d1:	59                   	pop    ecx
c001c9d2:	5a                   	pop    edx
c001c9d3:	0f b6 c0             	movzx  eax,al
c001c9d6:	50                   	push   eax
c001c9d7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c9dc:	99                   	cdq    
c001c9dd:	f7 fb                	idiv   ebx
c001c9df:	99                   	cdq    
c001c9e0:	f7 fb                	idiv   ebx
c001c9e2:	8d 42 30             	lea    eax,[edx+0x30]
c001c9e5:	0f b6 c0             	movzx  eax,al
c001c9e8:	50                   	push   eax
c001c9e9:	e8 4e ef ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001c9ee:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c9f4:	59                   	pop    ecx
c001c9f5:	58                   	pop    eax
c001c9f6:	6a 0f                	push   0xf
c001c9f8:	6a 00                	push   0x0
c001c9fa:	e8 4e ef ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001c9ff:	5a                   	pop    edx
c001ca00:	59                   	pop    ecx
c001ca01:	0f b6 c0             	movzx  eax,al
c001ca04:	50                   	push   eax
c001ca05:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ca0a:	99                   	cdq    
c001ca0b:	f7 fb                	idiv   ebx
c001ca0d:	83 c2 30             	add    edx,0x30
c001ca10:	0f b6 d2             	movzx  edx,dl
c001ca13:	52                   	push   edx
c001ca14:	e8 23 ef ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ca19:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ca1f:	58                   	pop    eax
c001ca20:	5a                   	pop    edx
c001ca21:	6a 0f                	push   0xf
c001ca23:	6a 00                	push   0x0
c001ca25:	e8 23 ef ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001ca2a:	59                   	pop    ecx
c001ca2b:	5a                   	pop    edx
c001ca2c:	0f b6 c0             	movzx  eax,al
c001ca2f:	50                   	push   eax
c001ca30:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca35:	99                   	cdq    
c001ca36:	f7 fd                	idiv   ebp
c001ca38:	99                   	cdq    
c001ca39:	f7 fb                	idiv   ebx
c001ca3b:	8d 42 30             	lea    eax,[edx+0x30]
c001ca3e:	0f b6 c0             	movzx  eax,al
c001ca41:	50                   	push   eax
c001ca42:	e8 f5 ee ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ca47:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ca4d:	59                   	pop    ecx
c001ca4e:	5d                   	pop    ebp
c001ca4f:	6a 0f                	push   0xf
c001ca51:	6a 00                	push   0x0
c001ca53:	e8 f5 ee ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001ca58:	5a                   	pop    edx
c001ca59:	59                   	pop    ecx
c001ca5a:	0f b6 c0             	movzx  eax,al
c001ca5d:	50                   	push   eax
c001ca5e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca63:	99                   	cdq    
c001ca64:	f7 ff                	idiv   edi
c001ca66:	99                   	cdq    
c001ca67:	f7 fb                	idiv   ebx
c001ca69:	8d 42 30             	lea    eax,[edx+0x30]
c001ca6c:	0f b6 c0             	movzx  eax,al
c001ca6f:	50                   	push   eax
c001ca70:	e8 c7 ee ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001ca75:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ca7b:	5f                   	pop    edi
c001ca7c:	5d                   	pop    ebp
c001ca7d:	6a 0f                	push   0xf
c001ca7f:	6a 00                	push   0x0
c001ca81:	e8 c7 ee ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001ca86:	5a                   	pop    edx
c001ca87:	59                   	pop    ecx
c001ca88:	0f b6 c0             	movzx  eax,al
c001ca8b:	50                   	push   eax
c001ca8c:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca91:	99                   	cdq    
c001ca92:	f7 fe                	idiv   esi
c001ca94:	99                   	cdq    
c001ca95:	f7 fb                	idiv   ebx
c001ca97:	8d 42 30             	lea    eax,[edx+0x30]
c001ca9a:	0f b6 c0             	movzx  eax,al
c001ca9d:	50                   	push   eax
c001ca9e:	e8 99 ee ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001caa3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001caa9:	5e                   	pop    esi
c001caaa:	5f                   	pop    edi
c001caab:	6a 0f                	push   0xf
c001caad:	6a 00                	push   0x0
c001caaf:	e8 99 ee ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001cab4:	5d                   	pop    ebp
c001cab5:	5a                   	pop    edx
c001cab6:	0f b6 c0             	movzx  eax,al
c001cab9:	50                   	push   eax
c001caba:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cabf:	99                   	cdq    
c001cac0:	f7 fb                	idiv   ebx
c001cac2:	99                   	cdq    
c001cac3:	f7 fb                	idiv   ebx
c001cac5:	8d 42 30             	lea    eax,[edx+0x30]
c001cac8:	0f b6 c0             	movzx  eax,al
c001cacb:	50                   	push   eax
c001cacc:	e8 6b ee ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001cad1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cad7:	59                   	pop    ecx
c001cad8:	5e                   	pop    esi
c001cad9:	6a 0f                	push   0xf
c001cadb:	6a 00                	push   0x0
c001cadd:	e8 6b ee ff ff       	call   c001b94d <combineColours(unsigned char, unsigned char)>
c001cae2:	5f                   	pop    edi
c001cae3:	5d                   	pop    ebp
c001cae4:	0f b6 c0             	movzx  eax,al
c001cae7:	50                   	push   eax
c001cae8:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001caed:	99                   	cdq    
c001caee:	f7 fb                	idiv   ebx
c001caf0:	83 c2 30             	add    edx,0x30
c001caf3:	0f b6 d2             	movzx  edx,dl
c001caf6:	52                   	push   edx
c001caf7:	e8 40 ee ff ff       	call   c001b93c <combineCharAndColour(char, unsigned char)>
c001cafc:	83 c4 10             	add    esp,0x10
c001caff:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cb05:	31 c0                	xor    eax,eax
c001cb07:	83 c4 1c             	add    esp,0x1c
c001cb0a:	5b                   	pop    ebx
c001cb0b:	5e                   	pop    esi
c001cb0c:	5f                   	pop    edi
c001cb0d:	5d                   	pop    ebp
c001cb0e:	c3                   	ret    
c001cb0f:	90                   	nop

c001cb10 <SATAPI::write(unsigned long long, int, void*)>:
c001cb10:	b8 03 00 00 00       	mov    eax,0x3
c001cb15:	c3                   	ret    

c001cb16 <SATAPI::close(int, int, void*)>:
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb23:	85 c0                	test   eax,eax
c001cb25:	74 0c                	je     c001cb33 <SATAPI::close(int, int, void*)+0x1d>
c001cb27:	83 ec 0c             	sub    esp,0xc
c001cb2a:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb2c:	50                   	push   eax
c001cb2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb30:	83 c4 10             	add    esp,0x10
c001cb33:	31 c0                	xor    eax,eax
c001cb35:	83 c4 0c             	add    esp,0xc
c001cb38:	c3                   	ret    
c001cb39:	90                   	nop

c001cb3a <SATAPI::SATAPI()>:
c001cb3a:	83 ec 0c             	sub    esp,0xc
c001cb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb41:	83 ec 04             	sub    esp,0x4
c001cb44:	68 00 08 00 00       	push   0x800
c001cb49:	68 54 15 02 c0       	push   0xc0021554
c001cb4e:	50                   	push   eax
c001cb4f:	e8 16 f3 fe ff       	call   c000be6a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb54:	83 c4 10             	add    esp,0x10
c001cb57:	ba 48 16 02 c0       	mov    edx,0xc0021648
c001cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb60:	89 10                	mov    DWORD PTR [eax],edx
c001cb62:	90                   	nop
c001cb63:	83 c4 0c             	add    esp,0xc
c001cb66:	c3                   	ret    
c001cb67:	90                   	nop

c001cb68 <SATAPI::diskRemoved()>:
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <SATAPI::diskInserted()>:
c001cb6a:	83 ec 18             	sub    esp,0x18
c001cb6d:	68 60 15 02 c0       	push   0xc0021560
c001cb72:	e8 ec da fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001cb77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb7b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001cb82:	83 c4 1c             	add    esp,0x1c
c001cb85:	c3                   	ret    

c001cb86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001cb86:	55                   	push   ebp
c001cb87:	57                   	push   edi
c001cb88:	56                   	push   esi
c001cb89:	53                   	push   ebx
c001cb8a:	83 ec 34             	sub    esp,0x34
c001cb8d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb91:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cb95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001cb9d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001cba3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001cba7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cbad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbb1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001cbb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbbb:	83 c0 02             	add    eax,0x2
c001cbbe:	c1 e0 07             	shl    eax,0x7
c001cbc1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbcd:	c1 e0 07             	shl    eax,0x7
c001cbd0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbd8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cbe6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cbec:	e8 2d e5 ff ff       	call   c001b11e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbf5:	83 c4 10             	add    esp,0x10
c001cbf8:	b8 01 00 00 00       	mov    eax,0x1
c001cbfd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cc02:	0f 84 49 02 00 00    	je     c001ce51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cc08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc0c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cc12:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc14:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc1a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc24:	c1 e1 05             	shl    ecx,0x5
c001cc27:	01 c8                	add    eax,ecx
c001cc29:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc2b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001cc31:	81 c9 25 00 01 00    	or     ecx,0x10025
c001cc37:	89 08                	mov    DWORD PTR [eax],ecx
c001cc39:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cc3f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001cc45:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001cc4b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001cc4e:	50                   	push   eax
c001cc4f:	68 90 00 00 00       	push   0x90
c001cc54:	6a 00                	push   0x0
c001cc56:	8d 7b 40             	lea    edi,[ebx+0x40]
c001cc59:	53                   	push   ebx
c001cc5a:	e8 61 38 fe ff       	call   c00004c0 <memset>
c001cc5f:	b9 0c 00 00 00       	mov    ecx,0xc
c001cc64:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001cc68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc6a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001cc70:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001cc74:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001cc7a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cc7e:	48                   	dec    eax
c001cc7f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001cc83:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc88:	89 c1                	mov    ecx,eax
c001cc8a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001cc90:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc95:	09 c8                	or     eax,ecx
c001cc97:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001cc9d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001cca0:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001cca7:	66 25 00 7f          	and    ax,0x7f00
c001ccab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ccaf:	66 0d 27 80          	or     ax,0x8027
c001ccb3:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ccb7:	66 89 03             	mov    WORD PTR [ebx],ax
c001ccba:	89 d0                	mov    eax,edx
c001ccbc:	c1 e8 10             	shr    eax,0x10
c001ccbf:	c1 ea 18             	shr    edx,0x18
c001ccc2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ccc5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ccc9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001cccc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001cccf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccd3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ccd6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ccda:	83 c4 10             	add    esp,0x10
c001ccdd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001cce1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cce5:	31 c0                	xor    eax,eax
c001cce7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001cced:	80 e1 88             	and    cl,0x88
c001ccf0:	74 0a                	je     c001ccfc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001ccf2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccf7:	74 0a                	je     c001cd03 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001ccf9:	40                   	inc    eax
c001ccfa:	eb eb                	jmp    c001cce7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001ccfc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd01:	75 43                	jne    c001cd46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	68 78 15 02 c0       	push   0xc0021578
c001cd0b:	e8 53 d9 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001cd10:	58                   	pop    eax
c001cd11:	5a                   	pop    edx
c001cd12:	68 8d 15 02 c0       	push   0xc002158d
c001cd17:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001cd1d:	e8 f4 ba fe ff       	call   c0008816 <VgaText::puts(char const*)>
c001cd22:	59                   	pop    ecx
c001cd23:	5b                   	pop    ebx
c001cd24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cd28:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cd2e:	e8 85 e4 ff ff       	call   c001b1b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cd33:	5e                   	pop    esi
c001cd34:	5f                   	pop    edi
c001cd35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cd39:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cd3f:	e8 54 e4 ff ff       	call   c001b198 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cd44:	eb 48                	jmp    c001cd8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001cd46:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cd4a:	be 01 00 00 00       	mov    esi,0x1
c001cd4f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cd53:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001cd58:	c1 e7 07             	shl    edi,0x7
c001cd5b:	d3 e6                	shl    esi,cl
c001cd5d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001cd61:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001cd67:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001cd6d:	85 c6                	test   esi,eax
c001cd6f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001cd75:	0f 84 a3 00 00 00    	je     c001ce1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001cd7b:	0f ba e0 1e          	bt     eax,0x1e
c001cd7f:	73 1a                	jae    c001cd9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001cd81:	83 ec 0c             	sub    esp,0xc
c001cd84:	68 9f 15 02 c0       	push   0xc002159f
c001cd89:	e8 d5 d8 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001cd8e:	83 c4 10             	add    esp,0x10
c001cd91:	b8 01 00 00 00       	mov    eax,0x1
c001cd96:	e9 b6 00 00 00       	jmp    c001ce51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cd9b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001cda1:	83 f8 0d             	cmp    eax,0xd
c001cda4:	77 0a                	ja     c001cdb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001cda6:	83 ec 0c             	sub    esp,0xc
c001cda9:	68 c8 00 00 00       	push   0xc8
c001cdae:	eb 28                	jmp    c001cdd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cdb0:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001cdb6:	83 f8 0d             	cmp    eax,0xd
c001cdb9:	77 0a                	ja     c001cdc5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001cdbb:	83 ec 0c             	sub    esp,0xc
c001cdbe:	68 58 02 00 00       	push   0x258
c001cdc3:	eb 13                	jmp    c001cdd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cdc5:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001cdcb:	83 f8 06             	cmp    eax,0x6
c001cdce:	77 10                	ja     c001cde0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001cdd0:	83 ec 0c             	sub    esp,0xc
c001cdd3:	68 dc 05 00 00       	push   0x5dc
c001cdd8:	e8 8b 80 ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001cddd:	83 c4 10             	add    esp,0x10
c001cde0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cde4:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001cde7:	75 06                	jne    c001cdef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001cde9:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001cded:	74 15                	je     c001ce04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cdef:	83 fb 06             	cmp    ebx,0x6
c001cdf2:	77 10                	ja     c001ce04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cdf4:	83 ec 0c             	sub    esp,0xc
c001cdf7:	68 c4 09 00 00       	push   0x9c4
c001cdfc:	e8 67 80 ff ff       	call   c0014e68 <milliTenthSleep(unsigned int)>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	43                   	inc    ebx
c001ce05:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ce0b:	0f 85 56 ff ff ff    	jne    c001cd67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	68 b2 15 02 c0       	push   0xc00215b2
c001ce19:	e9 6b ff ff ff       	jmp    c001cd89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ce1e:	0f ba e0 1e          	bt     eax,0x1e
c001ce22:	73 0d                	jae    c001ce31 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	68 c6 15 02 c0       	push   0xc00215c6
c001ce2c:	e9 58 ff ff ff       	jmp    c001cd89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ce31:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ce36:	74 17                	je     c001ce4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ce38:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ce3d:	74 10                	je     c001ce4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ce3f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ce45:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ce49:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ce4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce4f:	31 c0                	xor    eax,eax
c001ce51:	83 c4 2c             	add    esp,0x2c
c001ce54:	5b                   	pop    ebx
c001ce55:	5e                   	pop    esi
c001ce56:	5f                   	pop    edi
c001ce57:	5d                   	pop    ebp
c001ce58:	c3                   	ret    
c001ce59:	90                   	nop

c001ce5a <SATAPI::eject()>:
c001ce5a:	57                   	push   edi
c001ce5b:	b9 03 00 00 00       	mov    ecx,0x3
c001ce60:	83 ec 18             	sub    esp,0x18
c001ce63:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ce67:	fc                   	cld    
c001ce68:	31 c0                	xor    eax,eax
c001ce6a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce6c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ce71:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ce76:	50                   	push   eax
c001ce77:	6a 00                	push   0x0
c001ce79:	6a 00                	push   0x0
c001ce7b:	6a 00                	push   0x0
c001ce7d:	6a 00                	push   0x0
c001ce7f:	6a 02                	push   0x2
c001ce81:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce85:	50                   	push   eax
c001ce86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce8a:	e8 f7 fc ff ff       	call   c001cb86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ce8f:	83 c4 38             	add    esp,0x38
c001ce92:	31 c0                	xor    eax,eax
c001ce94:	5f                   	pop    edi
c001ce95:	c3                   	ret    

c001ce96 <SATAPI::detectMedia()>:
c001ce96:	53                   	push   ebx
c001ce97:	83 ec 14             	sub    esp,0x14
c001ce9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce9e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cea4:	e8 63 08 ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c001cea9:	59                   	pop    ecx
c001ceaa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ceb0:	e8 47 08 ff ff       	call   c000d6fc <VCache::invalidateReadBuffer()>
c001ceb5:	c7 04 24 db 15 02 c0 	mov    DWORD PTR [esp],0xc00215db
c001cebc:	e8 a2 d7 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001cec1:	83 c4 10             	add    esp,0x10
c001cec4:	31 c0                	xor    eax,eax
c001cec6:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001cecd:	85 d2                	test   edx,edx
c001cecf:	74 0f                	je     c001cee0 <SATAPI::detectMedia()+0x4a>
c001ced1:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001ced7:	75 07                	jne    c001cee0 <SATAPI::detectMedia()+0x4a>
c001ced9:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001cee0:	40                   	inc    eax
c001cee1:	83 f8 1a             	cmp    eax,0x1a
c001cee4:	75 e0                	jne    c001cec6 <SATAPI::detectMedia()+0x30>
c001cee6:	83 c4 08             	add    esp,0x8
c001cee9:	5b                   	pop    ebx
c001ceea:	c3                   	ret    
c001ceeb:	90                   	nop

c001ceec <SATAPI::open(int, int, void*)>:
c001ceec:	56                   	push   esi
c001ceed:	53                   	push   ebx
c001ceee:	51                   	push   ecx
c001ceef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cef7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf01:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cf07:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cf11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cf1b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cf25:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cf2c:	e8 39 ac fe ff       	call   c0007b6a <Phys::allocatePage()>
c001cf31:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001cf37:	89 c6                	mov    esi,eax
c001cf39:	e8 2c ac fe ff       	call   c0007b6a <Phys::allocatePage()>
c001cf3e:	81 c6 00 10 00 00    	add    esi,0x1000
c001cf44:	39 c6                	cmp    esi,eax
c001cf46:	74 10                	je     c001cf58 <SATAPI::open(int, int, void*)+0x6c>
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	68 f0 15 02 c0       	push   0xc00215f0
c001cf50:	e8 c2 34 ff ff       	call   c0010417 <KePanic(char const*)>
c001cf55:	83 c4 10             	add    esp,0x10
c001cf58:	83 ec 0c             	sub    esp,0xc
c001cf5b:	6a 02                	push   0x2
c001cf5d:	e8 10 c4 fe ff       	call   c0009372 <Virt::allocateKernelVirtualPages(int)>
c001cf62:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001cf68:	6a 03                	push   0x3
c001cf6a:	50                   	push   eax
c001cf6b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001cf71:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001cf77:	e8 c6 ca fe ff       	call   c0009a42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf7c:	83 c4 14             	add    esp,0x14
c001cf7f:	68 78 01 00 00       	push   0x178
c001cf84:	e8 ea a8 fe ff       	call   c0007873 <malloc>
c001cf89:	83 c4 0c             	add    esp,0xc
c001cf8c:	89 c6                	mov    esi,eax
c001cf8e:	6a 00                	push   0x0
c001cf90:	68 ff ff ff 7f       	push   0x7fffffff
c001cf95:	6a 00                	push   0x0
c001cf97:	6a 00                	push   0x0
c001cf99:	53                   	push   ebx
c001cf9a:	68 06 16 02 c0       	push   0xc0021606
c001cf9f:	50                   	push   eax
c001cfa0:	e8 cb fb fe ff       	call   c000cb70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cfa5:	83 c4 14             	add    esp,0x14
c001cfa8:	56                   	push   esi
c001cfa9:	e8 82 fc fe ff       	call   c000cc30 <LogicalDisk::assignDriveLetter()>
c001cfae:	5a                   	pop    edx
c001cfaf:	59                   	pop    ecx
c001cfb0:	0f be c0             	movsx  eax,al
c001cfb3:	50                   	push   eax
c001cfb4:	68 58 14 02 c0       	push   0xc0021458
c001cfb9:	e8 a5 d6 fe ff       	call   c000a663 <Dbg::kprintf(char const*, ...)>
c001cfbe:	58                   	pop    eax
c001cfbf:	5a                   	pop    edx
c001cfc0:	56                   	push   esi
c001cfc1:	53                   	push   ebx
c001cfc2:	e8 d5 ea fe ff       	call   c000ba9c <Device::addChild(Device*)>
c001cfc7:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001cfcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfd0:	e8 fd ee fe ff       	call   c000bed2 <PhysicalDisk::startCache()>
c001cfd5:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001cfdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfdf:	e8 b2 fe ff ff       	call   c001ce96 <SATAPI::detectMedia()>
c001cfe4:	83 c4 14             	add    esp,0x14
c001cfe7:	31 c0                	xor    eax,eax
c001cfe9:	5b                   	pop    ebx
c001cfea:	5e                   	pop    esi
c001cfeb:	c3                   	ret    

c001cfec <SATAPI::read(unsigned long long, int, void*)>:
c001cfec:	57                   	push   edi
c001cfed:	56                   	push   esi
c001cfee:	53                   	push   ebx
c001cfef:	83 ec 30             	sub    esp,0x30
c001cff2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cff6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001cffa:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001cffe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d002:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d006:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d00a:	83 fe 04             	cmp    esi,0x4
c001d00d:	7e 10                	jle    c001d01f <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d00f:	83 ec 0c             	sub    esp,0xc
c001d012:	68 14 16 02 c0       	push   0xc0021614
c001d017:	e8 fb 33 ff ff       	call   c0010417 <KePanic(char const*)>
c001d01c:	83 c4 10             	add    esp,0x10
c001d01f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d025:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d02b:	51                   	push   ecx
c001d02c:	50                   	push   eax
c001d02d:	83 c0 02             	add    eax,0x2
c001d030:	c1 e0 07             	shl    eax,0x7
c001d033:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d039:	50                   	push   eax
c001d03a:	52                   	push   edx
c001d03b:	e8 a2 e1 ff ff       	call   c001b1e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d040:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d044:	b9 03 00 00 00       	mov    ecx,0x3
c001d049:	fc                   	cld    
c001d04a:	31 c0                	xor    eax,eax
c001d04c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d04e:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d053:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d058:	83 c4 0c             	add    esp,0xc
c001d05b:	6a 00                	push   0x0
c001d05d:	6a 00                	push   0x0
c001d05f:	6a 00                	push   0x0
c001d061:	6a 00                	push   0x0
c001d063:	6a 02                	push   0x2
c001d065:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d069:	50                   	push   eax
c001d06a:	53                   	push   ebx
c001d06b:	e8 16 fb ff ff       	call   c001cb86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d070:	83 c4 20             	add    esp,0x20
c001d073:	85 c0                	test   eax,eax
c001d075:	75 44                	jne    c001d0bb <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d077:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d07b:	b9 03 00 00 00       	mov    ecx,0x3
c001d080:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d082:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d086:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d08b:	0f c8                	bswap  eax
c001d08d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d091:	89 f0                	mov    eax,esi
c001d093:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d097:	50                   	push   eax
c001d098:	56                   	push   esi
c001d099:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d09d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0a5:	c1 e6 0b             	shl    esi,0xb
c001d0a8:	56                   	push   esi
c001d0a9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d0ad:	50                   	push   eax
c001d0ae:	53                   	push   ebx
c001d0af:	e8 d2 fa ff ff       	call   c001cb86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d0b4:	83 c4 20             	add    esp,0x20
c001d0b7:	85 c0                	test   eax,eax
c001d0b9:	74 14                	je     c001d0cf <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	53                   	push   ebx
c001d0c3:	e8 ce fd ff ff       	call   c001ce96 <SATAPI::detectMedia()>
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0cf:	83 c4 30             	add    esp,0x30
c001d0d2:	5b                   	pop    ebx
c001d0d3:	5e                   	pop    esi
c001d0d4:	5f                   	pop    edi
c001d0d5:	c3                   	ret    

c001d0d6 <IOAPIC::close(int, int, void*)>:
c001d0d6:	b8 00 00 00 00       	mov    eax,0x0
c001d0db:	c3                   	ret    

c001d0dc <apicGetBase()>:
c001d0dc:	55                   	push   ebp
c001d0dd:	89 e5                	mov    ebp,esp
c001d0df:	83 ec 18             	sub    esp,0x18
c001d0e2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d0e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d0ed:	83 e0 08             	and    eax,0x8
c001d0f0:	84 c0                	test   al,al
c001d0f2:	75 07                	jne    c001d0fb <apicGetBase()+0x1f>
c001d0f4:	b8 00 00 00 00       	mov    eax,0x0
c001d0f9:	eb 21                	jmp    c001d11c <apicGetBase()+0x40>
c001d0fb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d100:	83 ec 08             	sub    esp,0x8
c001d103:	6a 1b                	push   0x1b
c001d105:	50                   	push   eax
c001d106:	e8 a1 9d fe ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001d10b:	83 c4 10             	add    esp,0x10
c001d10e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d111:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d114:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d117:	25 00 00 ff ff       	and    eax,0xffff0000
c001d11c:	c9                   	leave  
c001d11d:	c3                   	ret    

c001d11e <IOAPIC::IOAPIC()>:
c001d11e:	83 ec 0c             	sub    esp,0xc
c001d121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d125:	83 ec 08             	sub    esp,0x8
c001d128:	68 78 16 02 c0       	push   0xc0021678
c001d12d:	50                   	push   eax
c001d12e:	e8 01 eb fe ff       	call   c000bc34 <Device::Device(char const*)>
c001d133:	83 c4 10             	add    esp,0x10
c001d136:	ba 88 16 02 c0       	mov    edx,0xc0021688
c001d13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13f:	89 10                	mov    DWORD PTR [eax],edx
c001d141:	90                   	nop
c001d142:	83 c4 0c             	add    esp,0xc
c001d145:	c3                   	ret    

c001d146 <apicOpen()>:
c001d146:	55                   	push   ebp
c001d147:	89 e5                	mov    ebp,esp
c001d149:	53                   	push   ebx
c001d14a:	83 ec 34             	sub    esp,0x34
c001d14d:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001d152:	83 f0 01             	xor    eax,0x1
c001d155:	84 c0                	test   al,al
c001d157:	0f 84 9d 00 00 00    	je     c001d1fa <apicOpen()+0xb4>
c001d15d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d161:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001d166:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d169:	0f 83 84 00 00 00    	jae    c001d1f3 <apicOpen()+0xad>
c001d16f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d176:	83 ec 0c             	sub    esp,0xc
c001d179:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d17c:	e8 f2 a6 fe ff       	call   c0007873 <malloc>
c001d181:	83 c4 10             	add    esp,0x10
c001d184:	89 c3                	mov    ebx,eax
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	53                   	push   ebx
c001d18a:	e8 8f ff ff ff       	call   c001d11e <IOAPIC::IOAPIC()>
c001d18f:	83 c4 10             	add    esp,0x10
c001d192:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d195:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d198:	25 ff 00 00 00       	and    eax,0xff
c001d19d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d1a0:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001d1a7:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001d1ac:	40                   	inc    eax
c001d1ad:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001d1b2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d1b7:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d1bd:	83 ec 08             	sub    esp,0x8
c001d1c0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d1c3:	50                   	push   eax
c001d1c4:	e8 d3 e8 fe ff       	call   c000ba9c <Device::addChild(Device*)>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d1cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1d1:	83 c0 08             	add    eax,0x8
c001d1d4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1d6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d1d9:	25 ff 00 00 00       	and    eax,0xff
c001d1de:	6a 00                	push   0x0
c001d1e0:	6a 00                	push   0x0
c001d1e2:	50                   	push   eax
c001d1e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d1e6:	ff d2                	call   edx
c001d1e8:	83 c4 10             	add    esp,0x10
c001d1eb:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d1ee:	e9 6e ff ff ff       	jmp    c001d161 <apicOpen()+0x1b>
c001d1f3:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001d1fa:	e8 dd fe ff ff       	call   c001d0dc <apicGetBase()>
c001d1ff:	05 f0 00 00 00       	add    eax,0xf0
c001d204:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d207:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d20a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d20c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d20f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d216:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d21d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d220:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d223:	89 10                	mov    DWORD PTR [eax],edx
c001d225:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d22c:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001d231:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d234:	7d 70                	jge    c001d2a6 <apicOpen()+0x160>
c001d236:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d239:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d240:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d243:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d246:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d24d:	c1 e8 08             	shr    eax,0x8
c001d250:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d254:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d257:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d25e:	c1 e8 18             	shr    eax,0x18
c001d261:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d264:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d268:	75 37                	jne    c001d2a1 <apicOpen()+0x15b>
c001d26a:	e8 6d fe ff ff       	call   c001d0dc <apicGetBase()>
c001d26f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d273:	75 07                	jne    c001d27c <apicOpen()+0x136>
c001d275:	ba 60 03 00 00       	mov    edx,0x360
c001d27a:	eb 05                	jmp    c001d281 <apicOpen()+0x13b>
c001d27c:	ba 50 03 00 00       	mov    edx,0x350
c001d281:	01 d0                	add    eax,edx
c001d283:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d286:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d289:	8b 00                	mov    eax,DWORD PTR [eax]
c001d28b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d28e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d295:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d299:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d29c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d29f:	89 10                	mov    DWORD PTR [eax],edx
c001d2a1:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d2a4:	eb 86                	jmp    c001d22c <apicOpen()+0xe6>
c001d2a6:	90                   	nop
c001d2a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d2aa:	c9                   	leave  
c001d2ab:	c3                   	ret    

c001d2ac <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d2ac:	55                   	push   ebp
c001d2ad:	89 e5                	mov    ebp,esp
c001d2af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2b8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d2bb:	72 1d                	jb     c001d2da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2c0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2c9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d2cf:	01 d0                	add    eax,edx
c001d2d1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d2d4:	73 04                	jae    c001d2da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d2d6:	b0 01                	mov    al,0x1
c001d2d8:	eb 02                	jmp    c001d2dc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d2da:	b0 00                	mov    al,0x0
c001d2dc:	5d                   	pop    ebp
c001d2dd:	c3                   	ret    

c001d2de <IOAPIC::read(int)>:
c001d2de:	55                   	push   ebp
c001d2df:	89 e5                	mov    ebp,esp
c001d2e1:	83 ec 10             	sub    esp,0x10
c001d2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2e7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d2ed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d2f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d2f3:	31 d2                	xor    edx,edx
c001d2f5:	88 c2                	mov    dl,al
c001d2f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d2fa:	89 10                	mov    DWORD PTR [eax],edx
c001d2fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d2ff:	83 c0 10             	add    eax,0x10
c001d302:	8b 00                	mov    eax,DWORD PTR [eax]
c001d304:	c9                   	leave  
c001d305:	c3                   	ret    

c001d306 <IOAPIC::open(int, int, void*)>:
c001d306:	55                   	push   ebp
c001d307:	89 e5                	mov    ebp,esp
c001d309:	57                   	push   edi
c001d30a:	56                   	push   esi
c001d30b:	53                   	push   ebx
c001d30c:	83 ec 04             	sub    esp,0x4
c001d30f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d312:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d315:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d31b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d31e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d324:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001d32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d32e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d337:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d33d:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001d344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d347:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d350:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d359:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d35f:	89 c6                	mov    esi,eax
c001d361:	81 e6 ff 00 00 00    	and    esi,0xff
c001d367:	89 d0                	mov    eax,edx
c001d369:	ba 00 00 00 00       	mov    edx,0x0
c001d36e:	89 c7                	mov    edi,eax
c001d370:	83 e7 ff             	and    edi,0xffffffff
c001d373:	89 f9                	mov    ecx,edi
c001d375:	89 d0                	mov    eax,edx
c001d377:	25 ff 00 00 00       	and    eax,0xff
c001d37c:	89 c3                	mov    ebx,eax
c001d37e:	89 c8                	mov    eax,ecx
c001d380:	89 da                	mov    edx,ebx
c001d382:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d385:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d388:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d38c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d390:	83 e0 00             	and    eax,0x0
c001d393:	09 d0                	or     eax,edx
c001d395:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d39c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d3a2:	8d 50 01             	lea    edx,[eax+0x1]
c001d3a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d3a8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d3ae:	31 d2                	xor    edx,edx
c001d3b0:	88 c2                	mov    dl,al
c001d3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3b5:	83 c2 08             	add    edx,0x8
c001d3b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d3bc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001d3c2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d3c8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d3cc:	6a 01                	push   0x1
c001d3ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3d1:	e8 08 ff ff ff       	call   c001d2de <IOAPIC::read(int)>
c001d3d6:	83 c4 08             	add    esp,0x8
c001d3d9:	c1 f8 10             	sar    eax,0x10
c001d3dc:	25 ff 00 00 00       	and    eax,0xff
c001d3e1:	8d 50 01             	lea    edx,[eax+0x1]
c001d3e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3e7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d3ed:	b8 00 00 00 00       	mov    eax,0x0
c001d3f2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d3f5:	5b                   	pop    ebx
c001d3f6:	5e                   	pop    esi
c001d3f7:	5f                   	pop    edi
c001d3f8:	5d                   	pop    ebp
c001d3f9:	c3                   	ret    

c001d3fa <IOAPIC::write(int, int)>:
c001d3fa:	55                   	push   ebp
c001d3fb:	89 e5                	mov    ebp,esp
c001d3fd:	83 ec 10             	sub    esp,0x10
c001d400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d403:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d409:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d40c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d40f:	31 d2                	xor    edx,edx
c001d411:	88 c2                	mov    dl,al
c001d413:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d416:	89 10                	mov    DWORD PTR [eax],edx
c001d418:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d41b:	8d 50 10             	lea    edx,[eax+0x10]
c001d41e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d421:	89 02                	mov    DWORD PTR [edx],eax
c001d423:	90                   	nop
c001d424:	c9                   	leave  
c001d425:	c3                   	ret    

c001d426 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d426:	55                   	push   ebp
c001d427:	89 e5                	mov    ebp,esp
c001d429:	53                   	push   ebx
c001d42a:	83 ec 2c             	sub    esp,0x2c
c001d42d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d430:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d433:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d436:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d439:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d43c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d43f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d442:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d445:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d448:	88 d8                	mov    al,bl
c001d44a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d44d:	88 c8                	mov    al,cl
c001d44f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d452:	88 d0                	mov    al,dl
c001d454:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d457:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d45a:	25 ff 00 00 00       	and    eax,0xff
c001d45f:	83 c0 08             	add    eax,0x8
c001d462:	01 c0                	add    eax,eax
c001d464:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d467:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d46a:	25 ff 00 00 00       	and    eax,0xff
c001d46f:	83 c0 08             	add    eax,0x8
c001d472:	01 c0                	add    eax,eax
c001d474:	40                   	inc    eax
c001d475:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d478:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d47b:	50                   	push   eax
c001d47c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d47f:	e8 5a fe ff ff       	call   c001d2de <IOAPIC::read(int)>
c001d484:	83 c4 08             	add    esp,0x8
c001d487:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d48a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d491:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d494:	c1 e0 18             	shl    eax,0x18
c001d497:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d49a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d49d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d4a0:	52                   	push   edx
c001d4a1:	50                   	push   eax
c001d4a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4a5:	e8 50 ff ff ff       	call   c001d3fa <IOAPIC::write(int, int)>
c001d4aa:	83 c4 0c             	add    esp,0xc
c001d4ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d4b0:	50                   	push   eax
c001d4b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4b4:	e8 25 fe ff ff       	call   c001d2de <IOAPIC::read(int)>
c001d4b9:	83 c4 08             	add    esp,0x8
c001d4bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d4bf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d4c6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d4cd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d4d4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d4d8:	74 09                	je     c001d4e3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d4da:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d4e1:	eb 07                	jmp    c001d4ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d4e3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d4ea:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d4ee:	74 09                	je     c001d4f9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d4f0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d4f7:	eb 07                	jmp    c001d500 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d4f9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d500:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d507:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d50a:	25 ff 00 00 00       	and    eax,0xff
c001d50f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d512:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d515:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d518:	52                   	push   edx
c001d519:	50                   	push   eax
c001d51a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d51d:	e8 d8 fe ff ff       	call   c001d3fa <IOAPIC::write(int, int)>
c001d522:	83 c4 0c             	add    esp,0xc
c001d525:	90                   	nop
c001d526:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d529:	c9                   	leave  
c001d52a:	c3                   	ret    
c001d52b:	90                   	nop

c001d52c <APICTimer::close(int, int, void*)>:
c001d52c:	b8 00 00 00 00       	mov    eax,0x0
c001d531:	c3                   	ret    
c001d532:	66 90                	xchg   ax,ax

c001d534 <apicTimerHandler(regs*, void*)>:
c001d534:	83 ec 0c             	sub    esp,0xc
c001d537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d53b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d53d:	b8 10 27 00 00       	mov    eax,0x2710
c001d542:	ba 00 00 00 00       	mov    edx,0x0
c001d547:	f7 f1                	div    ecx
c001d549:	83 ec 0c             	sub    esp,0xc
c001d54c:	50                   	push   eax
c001d54d:	e8 d2 fe fe ff       	call   c000d424 <timerHandler(unsigned int)>
c001d552:	83 c4 10             	add    esp,0x10
c001d555:	90                   	nop
c001d556:	83 c4 0c             	add    esp,0xc
c001d559:	c3                   	ret    
c001d55a:	66 90                	xchg   ax,ax

c001d55c <APICTimer::open(int, int, void*)>:
c001d55c:	83 ec 0c             	sub    esp,0xc
c001d55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d563:	8b 00                	mov    eax,DWORD PTR [eax]
c001d565:	83 c0 24             	add    eax,0x24
c001d568:	8b 00                	mov    eax,DWORD PTR [eax]
c001d56a:	83 ec 08             	sub    esp,0x8
c001d56d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d575:	ff d0                	call   eax
c001d577:	83 c4 10             	add    esp,0x10
c001d57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d582:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d590:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d596:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d59a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	51                   	push   ecx
c001d5a4:	6a 01                	push   0x1
c001d5a6:	68 34 d5 01 c0       	push   0xc001d534
c001d5ab:	52                   	push   edx
c001d5ac:	50                   	push   eax
c001d5ad:	e8 96 e4 fe ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d5b2:	83 c4 20             	add    esp,0x20
c001d5b5:	89 c2                	mov    edx,eax
c001d5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5bb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d5c1:	b8 00 00 00 00       	mov    eax,0x0
c001d5c6:	83 c4 0c             	add    esp,0xc
c001d5c9:	c3                   	ret    
c001d5ca:	66 90                	xchg   ax,ax

c001d5cc <APICTimer::write(int)>:
c001d5cc:	83 ec 0c             	sub    esp,0xc
c001d5cf:	83 ec 0c             	sub    esp,0xc
c001d5d2:	68 ac 16 02 c0       	push   0xc00216ac
c001d5d7:	e8 3b 2e ff ff       	call   c0010417 <KePanic(char const*)>
c001d5dc:	83 c4 10             	add    esp,0x10
c001d5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d5e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d5ed:	90                   	nop
c001d5ee:	83 c4 0c             	add    esp,0xc
c001d5f1:	c3                   	ret    
c001d5f2:	66 90                	xchg   ax,ax

c001d5f4 <APICTimer::APICTimer()>:
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fb:	83 ec 08             	sub    esp,0x8
c001d5fe:	68 bc 16 02 c0       	push   0xc00216bc
c001d603:	50                   	push   eax
c001d604:	e8 4f fd fe ff       	call   c000d358 <Timer::Timer(char const*)>
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c001d611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d615:	89 10                	mov    DWORD PTR [eax],edx
c001d617:	90                   	nop
c001d618:	83 c4 0c             	add    esp,0xc
c001d61b:	c3                   	ret    

c001d61c <PIT::write(int)>:
c001d61c:	83 ec 10             	sub    esp,0x10
c001d61f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d623:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d627:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d62d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d631:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d636:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d63b:	89 c2                	mov    edx,eax
c001d63d:	c1 fa 1f             	sar    edx,0x1f
c001d640:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d648:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d64f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d654:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d658:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d65d:	ee                   	out    dx,al
c001d65e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d662:	25 ff 00 00 00       	and    eax,0xff
c001d667:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d66e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d672:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d676:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d67b:	ee                   	out    dx,al
c001d67c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d680:	c1 f8 08             	sar    eax,0x8
c001d683:	25 ff 00 00 00       	and    eax,0xff
c001d688:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d68f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d693:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d697:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d69c:	ee                   	out    dx,al
c001d69d:	90                   	nop
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	c3                   	ret    
c001d6a2:	66 90                	xchg   ax,ax

c001d6a4 <pitHandler(regs*, void*)>:
c001d6a4:	83 ec 0c             	sub    esp,0xc
c001d6a7:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d6ad:	b8 10 27 00 00       	mov    eax,0x2710
c001d6b2:	89 c2                	mov    edx,eax
c001d6b4:	c1 fa 1f             	sar    edx,0x1f
c001d6b7:	f7 f9                	idiv   ecx
c001d6b9:	83 ec 0c             	sub    esp,0xc
c001d6bc:	50                   	push   eax
c001d6bd:	e8 62 fd fe ff       	call   c000d424 <timerHandler(unsigned int)>
c001d6c2:	83 c4 10             	add    esp,0x10
c001d6c5:	90                   	nop
c001d6c6:	83 c4 0c             	add    esp,0xc
c001d6c9:	c3                   	ret    
c001d6ca:	66 90                	xchg   ax,ax

c001d6cc <PIT::open(int, int, void*)>:
c001d6cc:	83 ec 0c             	sub    esp,0xc
c001d6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6d5:	83 c0 24             	add    eax,0x24
c001d6d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6da:	83 ec 08             	sub    esp,0x8
c001d6dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e5:	ff d0                	call   eax
c001d6e7:	83 c4 10             	add    esp,0x10
c001d6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ee:	83 ec 0c             	sub    esp,0xc
c001d6f1:	6a 00                	push   0x0
c001d6f3:	6a 01                	push   0x1
c001d6f5:	68 a4 d6 01 c0       	push   0xc001d6a4
c001d6fa:	6a 00                	push   0x0
c001d6fc:	50                   	push   eax
c001d6fd:	e8 46 e3 fe ff       	call   c000ba48 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d702:	83 c4 20             	add    esp,0x20
c001d705:	89 c2                	mov    edx,eax
c001d707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d70b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d711:	b8 00 00 00 00       	mov    eax,0x0
c001d716:	83 c4 0c             	add    esp,0xc
c001d719:	c3                   	ret    
c001d71a:	66 90                	xchg   ax,ax

c001d71c <PIT::close(int, int, void*)>:
c001d71c:	83 ec 0c             	sub    esp,0xc
c001d71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d723:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d731:	6a 01                	push   0x1
c001d733:	68 a4 d6 01 c0       	push   0xc001d6a4
c001d738:	6a 00                	push   0x0
c001d73a:	50                   	push   eax
c001d73b:	e8 3e e3 fe ff       	call   c000ba7e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d740:	83 c4 10             	add    esp,0x10
c001d743:	b8 00 00 00 00       	mov    eax,0x0
c001d748:	83 c4 0c             	add    esp,0xc
c001d74b:	c3                   	ret    

c001d74c <PIT::PIT()>:
c001d74c:	83 ec 0c             	sub    esp,0xc
c001d74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d753:	83 ec 08             	sub    esp,0x8
c001d756:	68 f8 16 02 c0       	push   0xc00216f8
c001d75b:	50                   	push   eax
c001d75c:	e8 f7 fb fe ff       	call   c000d358 <Timer::Timer(char const*)>
c001d761:	83 c4 10             	add    esp,0x10
c001d764:	ba 20 17 02 c0       	mov    edx,0xc0021720
c001d769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76d:	89 10                	mov    DWORD PTR [eax],edx
c001d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d773:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d779:	31 d2                	xor    edx,edx
c001d77b:	88 c2                	mov    dl,al
c001d77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d781:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d792:	31 d2                	xor    edx,edx
c001d794:	88 c2                	mov    dl,al
c001d796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d79a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d7a9:	8d 50 01             	lea    edx,[eax+0x1]
c001d7ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d7b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d7b6:	31 d2                	xor    edx,edx
c001d7b8:	88 c2                	mov    dl,al
c001d7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7be:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d7c2:	83 e1 3f             	and    ecx,0x3f
c001d7c5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d7c9:	90                   	nop
c001d7ca:	83 c4 0c             	add    esp,0xc
c001d7cd:	c3                   	ret    
c001d7ce:	66 90                	xchg   ax,ax

c001d7d0 <avxDetect>:
c001d7d0:	b8 01 00 00 00       	mov    eax,0x1
c001d7d5:	0f a2                	cpuid  
c001d7d7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d7dd:	74 15                	je     c001d7f4 <avxDetect.noAVX>
c001d7df:	b8 01 00 00 00       	mov    eax,0x1
c001d7e4:	0f a2                	cpuid  
c001d7e6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d7ec:	74 06                	je     c001d7f4 <avxDetect.noAVX>
c001d7ee:	b8 01 00 00 00       	mov    eax,0x1
c001d7f3:	c3                   	ret    

c001d7f4 <avxDetect.noAVX>:
c001d7f4:	b8 00 00 00 00       	mov    eax,0x0
c001d7f9:	c3                   	ret    

c001d7fa <avxSave>:
c001d7fa:	53                   	push   ebx
c001d7fb:	52                   	push   edx
c001d7fc:	31 c0                	xor    eax,eax
c001d7fe:	48                   	dec    eax
c001d7ff:	89 c2                	mov    edx,eax
c001d801:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d805:	0f ae 23             	xsave  [ebx]
c001d808:	5a                   	pop    edx
c001d809:	5b                   	pop    ebx
c001d80a:	c3                   	ret    

c001d80b <avxLoad>:
c001d80b:	53                   	push   ebx
c001d80c:	52                   	push   edx
c001d80d:	31 c0                	xor    eax,eax
c001d80f:	48                   	dec    eax
c001d810:	89 c2                	mov    edx,eax
c001d812:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d816:	0f ae 2b             	xrstor [ebx]
c001d819:	5a                   	pop    edx
c001d81a:	5b                   	pop    ebx
c001d81b:	c3                   	ret    

c001d81c <avxInit>:
c001d81c:	e8 67 03 00 00       	call   c001db88 <sseInit>
c001d821:	50                   	push   eax
c001d822:	51                   	push   ecx
c001d823:	0f 20 e0             	mov    eax,cr4
c001d826:	0d 00 00 04 00       	or     eax,0x40000
c001d82b:	0f 22 e0             	mov    cr4,eax
c001d82e:	31 c9                	xor    ecx,ecx
c001d830:	0f 01 d0             	xgetbv 
c001d833:	0d 07 00 00 00       	or     eax,0x7
c001d838:	0f 01 d1             	xsetbv 
c001d83b:	59                   	pop    ecx
c001d83c:	58                   	pop    eax
c001d83d:	c3                   	ret    

c001d83e <avxClose>:
c001d83e:	c3                   	ret    

c001d83f <wouldSheSayYes>:
c001d83f:	c3                   	ret    
c001d840:	49                   	dec    ecx
c001d841:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d845:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d849:	75 20                	jne    c001d86b <isr0+0xb>
c001d84b:	4e                   	dec    esi
c001d84c:	79 61                	jns    c001d8af <isr7+0x3>
c001d84e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d853:	66 90                	xchg   ax,ax
c001d855:	66 90                	xchg   ax,ax
c001d857:	66 90                	xchg   ax,ax
c001d859:	66 90                	xchg   ax,ax
c001d85b:	66 90                	xchg   ax,ax
c001d85d:	66 90                	xchg   ax,ax
c001d85f:	90                   	nop

c001d860 <isr0>:
c001d860:	fa                   	cli    
c001d861:	68 00 00 00 00       	push   0x0
c001d866:	68 00 00 00 00       	push   0x0
c001d86b:	e9 56 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d870 <isr1>:
c001d870:	fa                   	cli    
c001d871:	6a 00                	push   0x0
c001d873:	6a 01                	push   0x1
c001d875:	e9 4c 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d87a <isr2>:
c001d87a:	fa                   	cli    
c001d87b:	6a 00                	push   0x0
c001d87d:	6a 02                	push   0x2
c001d87f:	e9 42 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d884 <isr3>:
c001d884:	fa                   	cli    
c001d885:	6a 00                	push   0x0
c001d887:	6a 03                	push   0x3
c001d889:	e9 38 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d88e <isr4>:
c001d88e:	fa                   	cli    
c001d88f:	6a 00                	push   0x0
c001d891:	6a 04                	push   0x4
c001d893:	e9 2e 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d898 <isr5>:
c001d898:	fa                   	cli    
c001d899:	6a 00                	push   0x0
c001d89b:	6a 05                	push   0x5
c001d89d:	e9 24 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8a2 <isr6>:
c001d8a2:	fa                   	cli    
c001d8a3:	6a 00                	push   0x0
c001d8a5:	6a 06                	push   0x6
c001d8a7:	e9 1a 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8ac <isr7>:
c001d8ac:	fa                   	cli    
c001d8ad:	6a 00                	push   0x0
c001d8af:	6a 07                	push   0x7
c001d8b1:	e9 10 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8b6 <isr8>:
c001d8b6:	fa                   	cli    
c001d8b7:	6a 08                	push   0x8
c001d8b9:	e9 08 01 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8be <isr9>:
c001d8be:	fa                   	cli    
c001d8bf:	6a 00                	push   0x0
c001d8c1:	6a 09                	push   0x9
c001d8c3:	e9 fe 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8c8 <isr10>:
c001d8c8:	fa                   	cli    
c001d8c9:	6a 0a                	push   0xa
c001d8cb:	e9 f6 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8d0 <isr11>:
c001d8d0:	fa                   	cli    
c001d8d1:	6a 0b                	push   0xb
c001d8d3:	e9 ee 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8d8 <isr12>:
c001d8d8:	fa                   	cli    
c001d8d9:	6a 0c                	push   0xc
c001d8db:	e9 e6 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8e0 <isr13>:
c001d8e0:	fa                   	cli    
c001d8e1:	6a 0d                	push   0xd
c001d8e3:	53                   	push   ebx
c001d8e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d8e8:	81 fb b6 da 01 c0    	cmp    ebx,0xc001dab6
c001d8ee:	5b                   	pop    ebx
c001d8ef:	0f 84 c3 01 00 00    	je     c001dab8 <finishSignal2>
c001d8f5:	e9 cc 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d8fa <isr14>:
c001d8fa:	fa                   	cli    
c001d8fb:	6a 0e                	push   0xe
c001d8fd:	e9 c4 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d902 <isr15>:
c001d902:	fa                   	cli    
c001d903:	6a 00                	push   0x0
c001d905:	6a 0f                	push   0xf
c001d907:	e9 ba 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d90c <isr16>:
c001d90c:	fa                   	cli    
c001d90d:	6a 00                	push   0x0
c001d90f:	6a 10                	push   0x10
c001d911:	e9 b0 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d916 <isr17>:
c001d916:	fa                   	cli    
c001d917:	6a 00                	push   0x0
c001d919:	6a 11                	push   0x11
c001d91b:	e9 a6 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d920 <isr18>:
c001d920:	fa                   	cli    
c001d921:	6a 00                	push   0x0
c001d923:	6a 12                	push   0x12
c001d925:	e9 9c 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d92a <irq3>:
c001d92a:	fa                   	cli    
c001d92b:	6a 00                	push   0x0
c001d92d:	6a 23                	push   0x23
c001d92f:	e9 92 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d934 <irq4>:
c001d934:	fa                   	cli    
c001d935:	6a 00                	push   0x0
c001d937:	6a 24                	push   0x24
c001d939:	e9 88 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d93e <irq5>:
c001d93e:	fa                   	cli    
c001d93f:	6a 00                	push   0x0
c001d941:	6a 25                	push   0x25
c001d943:	e9 7e 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d948 <irq6>:
c001d948:	fa                   	cli    
c001d949:	6a 00                	push   0x0
c001d94b:	6a 26                	push   0x26
c001d94d:	e9 74 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d952 <irq7>:
c001d952:	fa                   	cli    
c001d953:	6a 00                	push   0x0
c001d955:	6a 27                	push   0x27
c001d957:	e9 6a 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d95c <irq8>:
c001d95c:	fa                   	cli    
c001d95d:	6a 00                	push   0x0
c001d95f:	6a 28                	push   0x28
c001d961:	e9 60 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d966 <irq9>:
c001d966:	fa                   	cli    
c001d967:	6a 00                	push   0x0
c001d969:	6a 29                	push   0x29
c001d96b:	e9 56 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d970 <irq10>:
c001d970:	fa                   	cli    
c001d971:	6a 00                	push   0x0
c001d973:	6a 2a                	push   0x2a
c001d975:	e9 4c 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d97a <irq11>:
c001d97a:	fa                   	cli    
c001d97b:	6a 00                	push   0x0
c001d97d:	6a 2b                	push   0x2b
c001d97f:	e9 42 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d984 <irq12>:
c001d984:	fa                   	cli    
c001d985:	6a 00                	push   0x0
c001d987:	6a 2c                	push   0x2c
c001d989:	e9 38 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d98e <irq13>:
c001d98e:	fa                   	cli    
c001d98f:	6a 00                	push   0x0
c001d991:	6a 2d                	push   0x2d
c001d993:	e9 2e 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d998 <irq14>:
c001d998:	fa                   	cli    
c001d999:	6a 00                	push   0x0
c001d99b:	6a 2e                	push   0x2e
c001d99d:	e9 24 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d9a2 <irq15>:
c001d9a2:	fa                   	cli    
c001d9a3:	6a 00                	push   0x0
c001d9a5:	6a 2f                	push   0x2f
c001d9a7:	e9 1a 00 00 00       	jmp    c001d9c6 <int_common_stub>

c001d9ac <irq1>:
c001d9ac:	fa                   	cli    
c001d9ad:	6a 00                	push   0x0
c001d9af:	6a 21                	push   0x21
c001d9b1:	eb 13                	jmp    c001d9c6 <int_common_stub>

c001d9b3 <irq2>:
c001d9b3:	fa                   	cli    
c001d9b4:	6a 00                	push   0x0
c001d9b6:	6a 22                	push   0x22
c001d9b8:	eb 0c                	jmp    c001d9c6 <int_common_stub>

c001d9ba <isr96>:
c001d9ba:	6a 00                	push   0x0
c001d9bc:	6a 60                	push   0x60
c001d9be:	fb                   	sti    
c001d9bf:	eb 37                	jmp    c001d9f8 <syscall_common_stub>

c001d9c1 <irq0>:
c001d9c1:	fa                   	cli    
c001d9c2:	6a 00                	push   0x0
c001d9c4:	6a 20                	push   0x20

c001d9c6 <int_common_stub>:
c001d9c6:	60                   	pusha  
c001d9c7:	1e                   	push   ds
c001d9c8:	06                   	push   es
c001d9c9:	0f a0                	push   fs
c001d9cb:	0f a8                	push   gs
c001d9cd:	66 b8 10 00          	mov    ax,0x10
c001d9d1:	66 8e d8             	mov    ds,ax
c001d9d4:	66 8e c0             	mov    es,ax
c001d9d7:	66 8e e0             	mov    fs,ax
c001d9da:	66 8e e8             	mov    gs,ax
c001d9dd:	54                   	push   esp
c001d9de:	fc                   	cld    
c001d9df:	e8 64 e5 fe ff       	call   c000bf48 <int_handler>
c001d9e4:	81 c4 04 00 00 00    	add    esp,0x4
c001d9ea:	0f a9                	pop    gs
c001d9ec:	0f a1                	pop    fs
c001d9ee:	07                   	pop    es
c001d9ef:	1f                   	pop    ds
c001d9f0:	61                   	popa   
c001d9f1:	81 c4 08 00 00 00    	add    esp,0x8
c001d9f7:	cf                   	iret   

c001d9f8 <syscall_common_stub>:
c001d9f8:	60                   	pusha  
c001d9f9:	1e                   	push   ds
c001d9fa:	06                   	push   es
c001d9fb:	0f a0                	push   fs
c001d9fd:	0f a8                	push   gs
c001d9ff:	66 b8 10 00          	mov    ax,0x10
c001da03:	66 8e d8             	mov    ds,ax
c001da06:	66 8e c0             	mov    es,ax
c001da09:	66 8e e0             	mov    fs,ax
c001da0c:	66 8e e8             	mov    gs,ax
c001da0f:	54                   	push   esp
c001da10:	fc                   	cld    
c001da11:	e8 32 e5 fe ff       	call   c000bf48 <int_handler>
c001da16:	81 c4 04 00 00 00    	add    esp,0x4
c001da1c:	0f a9                	pop    gs
c001da1e:	0f a1                	pop    fs
c001da20:	07                   	pop    es
c001da21:	1f                   	pop    ds
c001da22:	e8 cc 2f ff ff       	call   c00109f3 <KiCheckSignalZ>
c001da27:	3d 00 00 00 00       	cmp    eax,0x0
c001da2c:	0f 84 c0 00 00 00    	je     c001daf2 <skipSignals>
c001da32:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001da37:	61                   	popa   
c001da38:	53                   	push   ebx
c001da39:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001da3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001da42:	5b                   	pop    ebx
c001da43:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001da48:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001da4b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001da4e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da51:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001da54:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001da57:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001da5a:	81 c4 08 00 00 00    	add    esp,0x8
c001da60:	5e                   	pop    esi
c001da61:	5b                   	pop    ebx
c001da62:	59                   	pop    ecx
c001da63:	5a                   	pop    edx
c001da64:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001da67:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001da6a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001da6d:	52                   	push   edx
c001da6e:	51                   	push   ecx
c001da6f:	53                   	push   ebx
c001da70:	56                   	push   esi
c001da71:	81 ec 08 00 00 00    	sub    esp,0x8
c001da77:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001da7a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001da7d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001da80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001da86:	60                   	pusha  
c001da87:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001da8d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001da90:	89 e3                	mov    ebx,esp
c001da92:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001da95:	52                   	push   edx
c001da96:	68 b6 da 01 c0       	push   0xc001dab6
c001da9b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001da9e:	89 dc                	mov    esp,ebx
c001daa0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001daa3:	68 23 00 00 00       	push   0x23
c001daa8:	51                   	push   ecx
c001daa9:	68 02 02 00 00       	push   0x202
c001daae:	68 1b 00 00 00       	push   0x1b
c001dab3:	ff 36                	push   DWORD PTR [esi]
c001dab5:	cf                   	iret   

c001dab6 <finishSignal>:
c001dab6:	cd 0f                	int    0xf

c001dab8 <finishSignal2>:
c001dab8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001dabe:	e8 ad 2f ff ff       	call   c0010a70 <KiFinishSignalZ>
c001dac3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001dac9:	68 23 00 00 00       	push   0x23
c001dace:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001dad1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001dad4:	68 1b 00 00 00       	push   0x1b
c001dad9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001dadc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dadf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001dae2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001dae5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dae8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001daeb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001daee:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001daf1:	cf                   	iret   

c001daf2 <skipSignals>:
c001daf2:	61                   	popa   
c001daf3:	81 c4 08 00 00 00    	add    esp,0x8
c001daf9:	cf                   	iret   
c001dafa:	90                   	nop
c001dafb:	90                   	nop

c001dafc <irq16>:
c001dafc:	fa                   	cli    
c001dafd:	6a 00                	push   0x0
c001daff:	6a 30                	push   0x30
c001db01:	e9 c0 fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db06 <irq17>:
c001db06:	fa                   	cli    
c001db07:	6a 00                	push   0x0
c001db09:	6a 31                	push   0x31
c001db0b:	e9 b6 fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db10 <irq18>:
c001db10:	fa                   	cli    
c001db11:	6a 00                	push   0x0
c001db13:	6a 32                	push   0x32
c001db15:	e9 ac fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db1a <irq19>:
c001db1a:	fa                   	cli    
c001db1b:	6a 00                	push   0x0
c001db1d:	6a 33                	push   0x33
c001db1f:	e9 a2 fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db24 <irq20>:
c001db24:	fa                   	cli    
c001db25:	6a 00                	push   0x0
c001db27:	6a 34                	push   0x34
c001db29:	e9 98 fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db2e <irq21>:
c001db2e:	fa                   	cli    
c001db2f:	6a 00                	push   0x0
c001db31:	6a 35                	push   0x35
c001db33:	e9 8e fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db38 <irq22>:
c001db38:	fa                   	cli    
c001db39:	6a 00                	push   0x0
c001db3b:	6a 36                	push   0x36
c001db3d:	e9 84 fe ff ff       	jmp    c001d9c6 <int_common_stub>

c001db42 <irq23>:
c001db42:	fa                   	cli    
c001db43:	6a 00                	push   0x0
c001db45:	6a 37                	push   0x37
c001db47:	e9 7a fe ff ff       	jmp    c001d9c6 <int_common_stub>
c001db4c:	66 90                	xchg   ax,ax
c001db4e:	66 90                	xchg   ax,ax

c001db50 <i386GetRDRAND>:
c001db50:	b9 64 00 00 00       	mov    ecx,0x64

c001db55 <retry>:
c001db55:	0f c7 f0             	rdrand eax
c001db58:	72 05                	jb     c001db5f <retry.done>
c001db5a:	e2 f9                	loop   c001db55 <retry>

c001db5c <retry.fail>:
c001db5c:	31 c0                	xor    eax,eax
c001db5e:	c3                   	ret    

c001db5f <retry.done>:
c001db5f:	c3                   	ret    

c001db60 <absolutelyNoChanceInHell>:
c001db60:	b8 01 00 00 00       	mov    eax,0x1
c001db65:	0f a2                	cpuid  
c001db67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001db6d:	74 06                	je     c001db75 <sseDetect.noSSE>
c001db6f:	b8 01 00 00 00       	mov    eax,0x1
c001db74:	c3                   	ret    

c001db75 <sseDetect.noSSE>:
c001db75:	31 c0                	xor    eax,eax
c001db77:	c3                   	ret    

c001db78 <sseSave>:
c001db78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db7c:	0f ae 00             	fxsave [eax]
c001db7f:	c3                   	ret    

c001db80 <sseLoad>:
c001db80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db84:	0f ae 08             	fxrstor [eax]
c001db87:	c3                   	ret    

c001db88 <sseInit>:
c001db88:	e8 42 00 00 00       	call   c001dbcf <x87Init>
c001db8d:	0f 20 e0             	mov    eax,cr4
c001db90:	66 0d 00 06          	or     ax,0x600
c001db94:	0f 22 e0             	mov    cr4,eax
c001db97:	c3                   	ret    

c001db98 <sseClose>:
c001db98:	c3                   	ret    
c001db99:	66 90                	xchg   ax,ax
c001db9b:	66 90                	xchg   ax,ax
c001db9d:	66 90                	xchg   ax,ax
c001db9f:	90                   	nop

c001dba0 <value_37F>:
c001dba0:	7f 03                	jg     c001dba5 <value_37A+0x1>

c001dba2 <value_37E>:
c001dba2:	7e 03                	jle    c001dba7 <x87Detect+0x1>

c001dba4 <value_37A>:
c001dba4:	7a 03                	jp     c001dba9 <x87Detect+0x3>

c001dba6 <x87Detect>:
c001dba6:	b8 01 00 00 00       	mov    eax,0x1
c001dbab:	0f a2                	cpuid  
c001dbad:	f7 c2 01 00 00 00    	test   edx,0x1
c001dbb3:	74 06                	je     c001dbbb <x87Detect.nox87>
c001dbb5:	b8 01 00 00 00       	mov    eax,0x1
c001dbba:	c3                   	ret    

c001dbbb <x87Detect.nox87>:
c001dbbb:	b8 00 00 00 00       	mov    eax,0x0
c001dbc0:	c3                   	ret    

c001dbc1 <x87Save>:
c001dbc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbc5:	dd 30                	fnsave [eax]
c001dbc7:	c3                   	ret    

c001dbc8 <x87Load>:
c001dbc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbcc:	dd 20                	frstor [eax]
c001dbce:	c3                   	ret    

c001dbcf <x87Init>:
c001dbcf:	0f 20 c0             	mov    eax,cr0
c001dbd2:	66 25 fb ff          	and    ax,0xfffb
c001dbd6:	66 0d 22 00          	or     ax,0x22
c001dbda:	0f 22 c0             	mov    cr0,eax
c001dbdd:	db e3                	fninit 
c001dbdf:	0f 06                	clts   
c001dbe1:	d9 2d a4 db 01 c0    	fldcw  WORD PTR ds:0xc001dba4
c001dbe7:	c3                   	ret    

c001dbe8 <x87Close>:
c001dbe8:	c3                   	ret    
c001dbe9:	66 90                	xchg   ax,ax
c001dbeb:	90                   	nop

c001dbec <__do_global_ctors_aux>:
c001dbec:	a1 9c eb 01 c0       	mov    eax,ds:0xc001eb9c
c001dbf1:	83 f8 ff             	cmp    eax,0xffffffff
c001dbf4:	74 1a                	je     c001dc10 <__do_global_ctors_aux+0x24>
c001dbf6:	55                   	push   ebp
c001dbf7:	89 e5                	mov    ebp,esp
c001dbf9:	53                   	push   ebx
c001dbfa:	52                   	push   edx
c001dbfb:	bb 9c eb 01 c0       	mov    ebx,0xc001eb9c
c001dc00:	ff d0                	call   eax
c001dc02:	83 eb 04             	sub    ebx,0x4
c001dc05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc07:	83 f8 ff             	cmp    eax,0xffffffff
c001dc0a:	75 f4                	jne    c001dc00 <__do_global_ctors_aux+0x14>
c001dc0c:	58                   	pop    eax
c001dc0d:	5b                   	pop    ebx
c001dc0e:	5d                   	pop    ebp
c001dc0f:	c3                   	ret    
c001dc10:	c3                   	ret    
c001dc11:	66 90                	xchg   ax,ax
c001dc13:	90                   	nop

c001dc14 <__divdi3>:
c001dc14:	55                   	push   ebp
c001dc15:	57                   	push   edi
c001dc16:	56                   	push   esi
c001dc17:	53                   	push   ebx
c001dc18:	83 ec 1c             	sub    esp,0x1c
c001dc1b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dc1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dc26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dc2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dc2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc32:	85 db                	test   ebx,ebx
c001dc34:	0f 88 8e 00 00 00    	js     c001dcc8 <__divdi3+0xb4>
c001dc3a:	89 dd                	mov    ebp,ebx
c001dc3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001dc44:	89 d3                	mov    ebx,edx
c001dc46:	85 d2                	test   edx,edx
c001dc48:	79 0d                	jns    c001dc57 <__divdi3+0x43>
c001dc4a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001dc4e:	f7 d8                	neg    eax
c001dc50:	83 d2 00             	adc    edx,0x0
c001dc53:	f7 da                	neg    edx
c001dc55:	89 d3                	mov    ebx,edx
c001dc57:	89 c7                	mov    edi,eax
c001dc59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dc5c:	85 db                	test   ebx,ebx
c001dc5e:	75 48                	jne    c001dca8 <__divdi3+0x94>
c001dc60:	39 ef                	cmp    edi,ebp
c001dc62:	76 24                	jbe    c001dc88 <__divdi3+0x74>
c001dc64:	89 ea                	mov    edx,ebp
c001dc66:	f7 f7                	div    edi
c001dc68:	89 c1                	mov    ecx,eax
c001dc6a:	31 f6                	xor    esi,esi
c001dc6c:	89 c8                	mov    eax,ecx
c001dc6e:	89 f2                	mov    edx,esi
c001dc70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc74:	85 c9                	test   ecx,ecx
c001dc76:	74 07                	je     c001dc7f <__divdi3+0x6b>
c001dc78:	f7 d8                	neg    eax
c001dc7a:	83 d2 00             	adc    edx,0x0
c001dc7d:	f7 da                	neg    edx
c001dc7f:	83 c4 1c             	add    esp,0x1c
c001dc82:	5b                   	pop    ebx
c001dc83:	5e                   	pop    esi
c001dc84:	5f                   	pop    edi
c001dc85:	5d                   	pop    ebp
c001dc86:	c3                   	ret    
c001dc87:	90                   	nop
c001dc88:	85 ff                	test   edi,edi
c001dc8a:	75 0b                	jne    c001dc97 <__divdi3+0x83>
c001dc8c:	b8 01 00 00 00       	mov    eax,0x1
c001dc91:	31 d2                	xor    edx,edx
c001dc93:	f7 f3                	div    ebx
c001dc95:	89 c7                	mov    edi,eax
c001dc97:	31 d2                	xor    edx,edx
c001dc99:	89 e8                	mov    eax,ebp
c001dc9b:	f7 f7                	div    edi
c001dc9d:	89 c6                	mov    esi,eax
c001dc9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dca2:	f7 f7                	div    edi
c001dca4:	89 c1                	mov    ecx,eax
c001dca6:	eb c4                	jmp    c001dc6c <__divdi3+0x58>
c001dca8:	39 eb                	cmp    ebx,ebp
c001dcaa:	77 3c                	ja     c001dce8 <__divdi3+0xd4>
c001dcac:	0f bd f3             	bsr    esi,ebx
c001dcaf:	83 f6 1f             	xor    esi,0x1f
c001dcb2:	75 40                	jne    c001dcf4 <__divdi3+0xe0>
c001dcb4:	39 eb                	cmp    ebx,ebp
c001dcb6:	72 09                	jb     c001dcc1 <__divdi3+0xad>
c001dcb8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dcbb:	0f 87 97 00 00 00    	ja     c001dd58 <__divdi3+0x144>
c001dcc1:	b9 01 00 00 00       	mov    ecx,0x1
c001dcc6:	eb a4                	jmp    c001dc6c <__divdi3+0x58>
c001dcc8:	f7 d9                	neg    ecx
c001dcca:	83 d3 00             	adc    ebx,0x0
c001dccd:	f7 db                	neg    ebx
c001dccf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dcd2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dcd6:	89 dd                	mov    ebp,ebx
c001dcd8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001dce0:	e9 5f ff ff ff       	jmp    c001dc44 <__divdi3+0x30>
c001dce5:	8d 76 00             	lea    esi,[esi+0x0]
c001dce8:	31 f6                	xor    esi,esi
c001dcea:	31 c9                	xor    ecx,ecx
c001dcec:	e9 7b ff ff ff       	jmp    c001dc6c <__divdi3+0x58>
c001dcf1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcf4:	b8 20 00 00 00       	mov    eax,0x20
c001dcf9:	29 f0                	sub    eax,esi
c001dcfb:	89 f1                	mov    ecx,esi
c001dcfd:	d3 e3                	shl    ebx,cl
c001dcff:	89 fa                	mov    edx,edi
c001dd01:	88 c1                	mov    cl,al
c001dd03:	d3 ea                	shr    edx,cl
c001dd05:	09 da                	or     edx,ebx
c001dd07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dd0b:	89 f1                	mov    ecx,esi
c001dd0d:	d3 e7                	shl    edi,cl
c001dd0f:	89 eb                	mov    ebx,ebp
c001dd11:	88 c1                	mov    cl,al
c001dd13:	d3 eb                	shr    ebx,cl
c001dd15:	89 f1                	mov    ecx,esi
c001dd17:	d3 e5                	shl    ebp,cl
c001dd19:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001dd1c:	88 c1                	mov    cl,al
c001dd1e:	d3 ea                	shr    edx,cl
c001dd20:	09 d5                	or     ebp,edx
c001dd22:	89 e8                	mov    eax,ebp
c001dd24:	89 da                	mov    edx,ebx
c001dd26:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001dd2a:	89 d3                	mov    ebx,edx
c001dd2c:	89 c5                	mov    ebp,eax
c001dd2e:	f7 e7                	mul    edi
c001dd30:	39 d3                	cmp    ebx,edx
c001dd32:	72 18                	jb     c001dd4c <__divdi3+0x138>
c001dd34:	74 0a                	je     c001dd40 <__divdi3+0x12c>
c001dd36:	89 e9                	mov    ecx,ebp
c001dd38:	31 f6                	xor    esi,esi
c001dd3a:	e9 2d ff ff ff       	jmp    c001dc6c <__divdi3+0x58>
c001dd3f:	90                   	nop
c001dd40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001dd43:	89 f1                	mov    ecx,esi
c001dd45:	d3 e7                	shl    edi,cl
c001dd47:	39 c7                	cmp    edi,eax
c001dd49:	73 eb                	jae    c001dd36 <__divdi3+0x122>
c001dd4b:	90                   	nop
c001dd4c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001dd4f:	31 f6                	xor    esi,esi
c001dd51:	e9 16 ff ff ff       	jmp    c001dc6c <__divdi3+0x58>
c001dd56:	66 90                	xchg   ax,ax
c001dd58:	31 c9                	xor    ecx,ecx
c001dd5a:	e9 0d ff ff ff       	jmp    c001dc6c <__divdi3+0x58>
c001dd5f:	90                   	nop

c001dd60 <__moddi3>:
c001dd60:	55                   	push   ebp
c001dd61:	57                   	push   edi
c001dd62:	56                   	push   esi
c001dd63:	53                   	push   ebx
c001dd64:	83 ec 2c             	sub    esp,0x2c
c001dd67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001dd6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd73:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001dd77:	85 db                	test   ebx,ebx
c001dd79:	0f 88 85 00 00 00    	js     c001de04 <__moddi3+0xa4>
c001dd7f:	89 de                	mov    esi,ebx
c001dd81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dd89:	89 d7                	mov    edi,edx
c001dd8b:	85 d2                	test   edx,edx
c001dd8d:	79 09                	jns    c001dd98 <__moddi3+0x38>
c001dd8f:	f7 d8                	neg    eax
c001dd91:	83 d2 00             	adc    edx,0x0
c001dd94:	f7 da                	neg    edx
c001dd96:	89 d7                	mov    edi,edx
c001dd98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd9c:	89 cd                	mov    ebp,ecx
c001dd9e:	85 ff                	test   edi,edi
c001dda0:	75 52                	jne    c001ddf4 <__moddi3+0x94>
c001dda2:	89 c3                	mov    ebx,eax
c001dda4:	39 f0                	cmp    eax,esi
c001dda6:	76 24                	jbe    c001ddcc <__moddi3+0x6c>
c001dda8:	89 c8                	mov    eax,ecx
c001ddaa:	89 f2                	mov    edx,esi
c001ddac:	f7 f3                	div    ebx
c001ddae:	89 d6                	mov    esi,edx
c001ddb0:	89 f0                	mov    eax,esi
c001ddb2:	31 d2                	xor    edx,edx
c001ddb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddb8:	85 c9                	test   ecx,ecx
c001ddba:	74 07                	je     c001ddc3 <__moddi3+0x63>
c001ddbc:	f7 d8                	neg    eax
c001ddbe:	83 d2 00             	adc    edx,0x0
c001ddc1:	f7 da                	neg    edx
c001ddc3:	83 c4 2c             	add    esp,0x2c
c001ddc6:	5b                   	pop    ebx
c001ddc7:	5e                   	pop    esi
c001ddc8:	5f                   	pop    edi
c001ddc9:	5d                   	pop    ebp
c001ddca:	c3                   	ret    
c001ddcb:	90                   	nop
c001ddcc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ddd0:	85 db                	test   ebx,ebx
c001ddd2:	75 0d                	jne    c001dde1 <__moddi3+0x81>
c001ddd4:	b8 01 00 00 00       	mov    eax,0x1
c001ddd9:	31 d2                	xor    edx,edx
c001dddb:	f7 f7                	div    edi
c001dddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dde1:	89 f0                	mov    eax,esi
c001dde3:	31 d2                	xor    edx,edx
c001dde5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dde9:	f7 f7                	div    edi
c001ddeb:	89 e8                	mov    eax,ebp
c001dded:	f7 f7                	div    edi
c001ddef:	89 d6                	mov    esi,edx
c001ddf1:	eb bd                	jmp    c001ddb0 <__moddi3+0x50>
c001ddf3:	90                   	nop
c001ddf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ddf8:	39 f7                	cmp    edi,esi
c001ddfa:	76 20                	jbe    c001de1c <__moddi3+0xbc>
c001ddfc:	89 c8                	mov    eax,ecx
c001ddfe:	89 f2                	mov    edx,esi
c001de00:	eb b2                	jmp    c001ddb4 <__moddi3+0x54>
c001de02:	66 90                	xchg   ax,ax
c001de04:	f7 d9                	neg    ecx
c001de06:	83 d3 00             	adc    ebx,0x0
c001de09:	f7 db                	neg    ebx
c001de0b:	89 de                	mov    esi,ebx
c001de0d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001de15:	e9 6f ff ff ff       	jmp    c001dd89 <__moddi3+0x29>
c001de1a:	66 90                	xchg   ax,ax
c001de1c:	0f bd c7             	bsr    eax,edi
c001de1f:	83 f0 1f             	xor    eax,0x1f
c001de22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de26:	75 24                	jne    c001de4c <__moddi3+0xec>
c001de28:	39 f7                	cmp    edi,esi
c001de2a:	72 06                	jb     c001de32 <__moddi3+0xd2>
c001de2c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001de30:	77 0c                	ja     c001de3e <__moddi3+0xde>
c001de32:	89 e9                	mov    ecx,ebp
c001de34:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001de38:	19 fe                	sbb    esi,edi
c001de3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001de3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de42:	89 f2                	mov    edx,esi
c001de44:	e9 6b ff ff ff       	jmp    c001ddb4 <__moddi3+0x54>
c001de49:	8d 76 00             	lea    esi,[esi+0x0]
c001de4c:	b8 20 00 00 00       	mov    eax,0x20
c001de51:	89 c2                	mov    edx,eax
c001de53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001de57:	29 da                	sub    edx,ebx
c001de59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de5d:	88 d9                	mov    cl,bl
c001de5f:	d3 e7                	shl    edi,cl
c001de61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de65:	88 d1                	mov    cl,dl
c001de67:	d3 e8                	shr    eax,cl
c001de69:	09 c7                	or     edi,eax
c001de6b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001de6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001de73:	89 d8                	mov    eax,ebx
c001de75:	88 d9                	mov    cl,bl
c001de77:	d3 e7                	shl    edi,cl
c001de79:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001de7d:	89 f3                	mov    ebx,esi
c001de7f:	88 d1                	mov    cl,dl
c001de81:	d3 eb                	shr    ebx,cl
c001de83:	89 c7                	mov    edi,eax
c001de85:	88 c1                	mov    cl,al
c001de87:	d3 e6                	shl    esi,cl
c001de89:	89 e8                	mov    eax,ebp
c001de8b:	88 d1                	mov    cl,dl
c001de8d:	d3 e8                	shr    eax,cl
c001de8f:	09 f0                	or     eax,esi
c001de91:	89 f9                	mov    ecx,edi
c001de93:	d3 e5                	shl    ebp,cl
c001de95:	89 da                	mov    edx,ebx
c001de97:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001de9b:	89 d3                	mov    ebx,edx
c001de9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dea1:	89 c6                	mov    esi,eax
c001dea3:	89 d1                	mov    ecx,edx
c001dea5:	39 d3                	cmp    ebx,edx
c001dea7:	72 27                	jb     c001ded0 <__moddi3+0x170>
c001dea9:	74 21                	je     c001decc <__moddi3+0x16c>
c001deab:	29 f5                	sub    ebp,esi
c001dead:	19 cb                	sbb    ebx,ecx
c001deaf:	89 de                	mov    esi,ebx
c001deb1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001deb5:	d3 e6                	shl    esi,cl
c001deb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001debb:	89 f9                	mov    ecx,edi
c001debd:	d3 ed                	shr    ebp,cl
c001debf:	09 ee                	or     esi,ebp
c001dec1:	89 f0                	mov    eax,esi
c001dec3:	d3 eb                	shr    ebx,cl
c001dec5:	89 da                	mov    edx,ebx
c001dec7:	e9 e8 fe ff ff       	jmp    c001ddb4 <__moddi3+0x54>
c001decc:	39 c5                	cmp    ebp,eax
c001dece:	73 db                	jae    c001deab <__moddi3+0x14b>
c001ded0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ded4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001ded8:	89 d1                	mov    ecx,edx
c001deda:	89 c6                	mov    esi,eax
c001dedc:	eb cd                	jmp    c001deab <__moddi3+0x14b>
c001dede:	66 90                	xchg   ax,ax

c001dee0 <__udivdi3>:
c001dee0:	55                   	push   ebp
c001dee1:	57                   	push   edi
c001dee2:	56                   	push   esi
c001dee3:	53                   	push   ebx
c001dee4:	83 ec 1c             	sub    esp,0x1c
c001dee7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001deeb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001deef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001def3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001def7:	85 d2                	test   edx,edx
c001def9:	75 41                	jne    c001df3c <__udivdi3+0x5c>
c001defb:	39 f7                	cmp    edi,esi
c001defd:	76 15                	jbe    c001df14 <__udivdi3+0x34>
c001deff:	89 e8                	mov    eax,ebp
c001df01:	89 f2                	mov    edx,esi
c001df03:	f7 f7                	div    edi
c001df05:	31 db                	xor    ebx,ebx
c001df07:	89 da                	mov    edx,ebx
c001df09:	83 c4 1c             	add    esp,0x1c
c001df0c:	5b                   	pop    ebx
c001df0d:	5e                   	pop    esi
c001df0e:	5f                   	pop    edi
c001df0f:	5d                   	pop    ebp
c001df10:	c3                   	ret    
c001df11:	8d 76 00             	lea    esi,[esi+0x0]
c001df14:	89 f9                	mov    ecx,edi
c001df16:	85 ff                	test   edi,edi
c001df18:	75 0b                	jne    c001df25 <__udivdi3+0x45>
c001df1a:	b8 01 00 00 00       	mov    eax,0x1
c001df1f:	31 d2                	xor    edx,edx
c001df21:	f7 f7                	div    edi
c001df23:	89 c1                	mov    ecx,eax
c001df25:	31 d2                	xor    edx,edx
c001df27:	89 f0                	mov    eax,esi
c001df29:	f7 f1                	div    ecx
c001df2b:	89 c3                	mov    ebx,eax
c001df2d:	89 e8                	mov    eax,ebp
c001df2f:	f7 f1                	div    ecx
c001df31:	89 da                	mov    edx,ebx
c001df33:	83 c4 1c             	add    esp,0x1c
c001df36:	5b                   	pop    ebx
c001df37:	5e                   	pop    esi
c001df38:	5f                   	pop    edi
c001df39:	5d                   	pop    ebp
c001df3a:	c3                   	ret    
c001df3b:	90                   	nop
c001df3c:	39 f2                	cmp    edx,esi
c001df3e:	77 1c                	ja     c001df5c <__udivdi3+0x7c>
c001df40:	0f bd da             	bsr    ebx,edx
c001df43:	83 f3 1f             	xor    ebx,0x1f
c001df46:	75 24                	jne    c001df6c <__udivdi3+0x8c>
c001df48:	39 f2                	cmp    edx,esi
c001df4a:	72 08                	jb     c001df54 <__udivdi3+0x74>
c001df4c:	39 ef                	cmp    edi,ebp
c001df4e:	0f 87 84 00 00 00    	ja     c001dfd8 <__udivdi3+0xf8>
c001df54:	b8 01 00 00 00       	mov    eax,0x1
c001df59:	eb ac                	jmp    c001df07 <__udivdi3+0x27>
c001df5b:	90                   	nop
c001df5c:	31 db                	xor    ebx,ebx
c001df5e:	31 c0                	xor    eax,eax
c001df60:	89 da                	mov    edx,ebx
c001df62:	83 c4 1c             	add    esp,0x1c
c001df65:	5b                   	pop    ebx
c001df66:	5e                   	pop    esi
c001df67:	5f                   	pop    edi
c001df68:	5d                   	pop    ebp
c001df69:	c3                   	ret    
c001df6a:	66 90                	xchg   ax,ax
c001df6c:	b8 20 00 00 00       	mov    eax,0x20
c001df71:	29 d8                	sub    eax,ebx
c001df73:	88 d9                	mov    cl,bl
c001df75:	d3 e2                	shl    edx,cl
c001df77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001df7b:	89 fa                	mov    edx,edi
c001df7d:	88 c1                	mov    cl,al
c001df7f:	d3 ea                	shr    edx,cl
c001df81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001df85:	09 d1                	or     ecx,edx
c001df87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df8b:	88 d9                	mov    cl,bl
c001df8d:	d3 e7                	shl    edi,cl
c001df8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001df93:	89 f7                	mov    edi,esi
c001df95:	88 c1                	mov    cl,al
c001df97:	d3 ef                	shr    edi,cl
c001df99:	88 d9                	mov    cl,bl
c001df9b:	d3 e6                	shl    esi,cl
c001df9d:	89 ea                	mov    edx,ebp
c001df9f:	88 c1                	mov    cl,al
c001dfa1:	d3 ea                	shr    edx,cl
c001dfa3:	09 d6                	or     esi,edx
c001dfa5:	89 f0                	mov    eax,esi
c001dfa7:	89 fa                	mov    edx,edi
c001dfa9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001dfad:	89 d7                	mov    edi,edx
c001dfaf:	89 c6                	mov    esi,eax
c001dfb1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dfb5:	39 d7                	cmp    edi,edx
c001dfb7:	72 13                	jb     c001dfcc <__udivdi3+0xec>
c001dfb9:	74 09                	je     c001dfc4 <__udivdi3+0xe4>
c001dfbb:	89 f0                	mov    eax,esi
c001dfbd:	31 db                	xor    ebx,ebx
c001dfbf:	e9 43 ff ff ff       	jmp    c001df07 <__udivdi3+0x27>
c001dfc4:	88 d9                	mov    cl,bl
c001dfc6:	d3 e5                	shl    ebp,cl
c001dfc8:	39 c5                	cmp    ebp,eax
c001dfca:	73 ef                	jae    c001dfbb <__udivdi3+0xdb>
c001dfcc:	8d 46 ff             	lea    eax,[esi-0x1]
c001dfcf:	31 db                	xor    ebx,ebx
c001dfd1:	e9 31 ff ff ff       	jmp    c001df07 <__udivdi3+0x27>
c001dfd6:	66 90                	xchg   ax,ax
c001dfd8:	31 c0                	xor    eax,eax
c001dfda:	e9 28 ff ff ff       	jmp    c001df07 <__udivdi3+0x27>
c001dfdf:	90                   	nop

c001dfe0 <__umoddi3>:
c001dfe0:	55                   	push   ebp
c001dfe1:	57                   	push   edi
c001dfe2:	56                   	push   esi
c001dfe3:	53                   	push   ebx
c001dfe4:	83 ec 1c             	sub    esp,0x1c
c001dfe7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dfeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dff3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dff7:	89 da                	mov    edx,ebx
c001dff9:	85 c0                	test   eax,eax
c001dffb:	75 37                	jne    c001e034 <__umoddi3+0x54>
c001dffd:	39 df                	cmp    edi,ebx
c001dfff:	76 13                	jbe    c001e014 <__umoddi3+0x34>
c001e001:	89 f0                	mov    eax,esi
c001e003:	f7 f7                	div    edi
c001e005:	89 d0                	mov    eax,edx
c001e007:	31 d2                	xor    edx,edx
c001e009:	83 c4 1c             	add    esp,0x1c
c001e00c:	5b                   	pop    ebx
c001e00d:	5e                   	pop    esi
c001e00e:	5f                   	pop    edi
c001e00f:	5d                   	pop    ebp
c001e010:	c3                   	ret    
c001e011:	8d 76 00             	lea    esi,[esi+0x0]
c001e014:	89 fd                	mov    ebp,edi
c001e016:	85 ff                	test   edi,edi
c001e018:	75 0b                	jne    c001e025 <__umoddi3+0x45>
c001e01a:	b8 01 00 00 00       	mov    eax,0x1
c001e01f:	31 d2                	xor    edx,edx
c001e021:	f7 f7                	div    edi
c001e023:	89 c5                	mov    ebp,eax
c001e025:	89 d8                	mov    eax,ebx
c001e027:	31 d2                	xor    edx,edx
c001e029:	f7 f5                	div    ebp
c001e02b:	89 f0                	mov    eax,esi
c001e02d:	f7 f5                	div    ebp
c001e02f:	89 d0                	mov    eax,edx
c001e031:	eb d4                	jmp    c001e007 <__umoddi3+0x27>
c001e033:	90                   	nop
c001e034:	89 f1                	mov    ecx,esi
c001e036:	39 d8                	cmp    eax,ebx
c001e038:	76 0a                	jbe    c001e044 <__umoddi3+0x64>
c001e03a:	89 f0                	mov    eax,esi
c001e03c:	83 c4 1c             	add    esp,0x1c
c001e03f:	5b                   	pop    ebx
c001e040:	5e                   	pop    esi
c001e041:	5f                   	pop    edi
c001e042:	5d                   	pop    ebp
c001e043:	c3                   	ret    
c001e044:	0f bd e8             	bsr    ebp,eax
c001e047:	83 f5 1f             	xor    ebp,0x1f
c001e04a:	75 1c                	jne    c001e068 <__umoddi3+0x88>
c001e04c:	39 d8                	cmp    eax,ebx
c001e04e:	72 04                	jb     c001e054 <__umoddi3+0x74>
c001e050:	39 f7                	cmp    edi,esi
c001e052:	77 08                	ja     c001e05c <__umoddi3+0x7c>
c001e054:	89 da                	mov    edx,ebx
c001e056:	29 fe                	sub    esi,edi
c001e058:	19 c2                	sbb    edx,eax
c001e05a:	89 f1                	mov    ecx,esi
c001e05c:	89 c8                	mov    eax,ecx
c001e05e:	83 c4 1c             	add    esp,0x1c
c001e061:	5b                   	pop    ebx
c001e062:	5e                   	pop    esi
c001e063:	5f                   	pop    edi
c001e064:	5d                   	pop    ebp
c001e065:	c3                   	ret    
c001e066:	66 90                	xchg   ax,ax
c001e068:	ba 20 00 00 00       	mov    edx,0x20
c001e06d:	29 ea                	sub    edx,ebp
c001e06f:	89 e9                	mov    ecx,ebp
c001e071:	d3 e0                	shl    eax,cl
c001e073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e077:	89 f8                	mov    eax,edi
c001e079:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e07d:	88 d1                	mov    cl,dl
c001e07f:	d3 e8                	shr    eax,cl
c001e081:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e085:	09 c1                	or     ecx,eax
c001e087:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e08b:	89 e9                	mov    ecx,ebp
c001e08d:	d3 e7                	shl    edi,cl
c001e08f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e093:	89 d8                	mov    eax,ebx
c001e095:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e099:	88 d1                	mov    cl,dl
c001e09b:	d3 e8                	shr    eax,cl
c001e09d:	89 c7                	mov    edi,eax
c001e09f:	89 e9                	mov    ecx,ebp
c001e0a1:	d3 e3                	shl    ebx,cl
c001e0a3:	89 f0                	mov    eax,esi
c001e0a5:	88 d1                	mov    cl,dl
c001e0a7:	d3 e8                	shr    eax,cl
c001e0a9:	09 d8                	or     eax,ebx
c001e0ab:	89 e9                	mov    ecx,ebp
c001e0ad:	d3 e6                	shl    esi,cl
c001e0af:	89 f3                	mov    ebx,esi
c001e0b1:	89 fa                	mov    edx,edi
c001e0b3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e0b7:	89 d1                	mov    ecx,edx
c001e0b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e0bd:	89 c6                	mov    esi,eax
c001e0bf:	89 d7                	mov    edi,edx
c001e0c1:	39 d1                	cmp    ecx,edx
c001e0c3:	72 27                	jb     c001e0ec <__umoddi3+0x10c>
c001e0c5:	74 21                	je     c001e0e8 <__umoddi3+0x108>
c001e0c7:	89 ca                	mov    edx,ecx
c001e0c9:	29 f3                	sub    ebx,esi
c001e0cb:	19 fa                	sbb    edx,edi
c001e0cd:	89 d0                	mov    eax,edx
c001e0cf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e0d3:	d3 e0                	shl    eax,cl
c001e0d5:	89 e9                	mov    ecx,ebp
c001e0d7:	d3 eb                	shr    ebx,cl
c001e0d9:	09 d8                	or     eax,ebx
c001e0db:	d3 ea                	shr    edx,cl
c001e0dd:	83 c4 1c             	add    esp,0x1c
c001e0e0:	5b                   	pop    ebx
c001e0e1:	5e                   	pop    esi
c001e0e2:	5f                   	pop    edi
c001e0e3:	5d                   	pop    ebp
c001e0e4:	c3                   	ret    
c001e0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e0e8:	39 c3                	cmp    ebx,eax
c001e0ea:	73 db                	jae    c001e0c7 <__umoddi3+0xe7>
c001e0ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e0f0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e0f4:	89 d7                	mov    edi,edx
c001e0f6:	89 c6                	mov    esi,eax
c001e0f8:	eb cd                	jmp    c001e0c7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e0fa <_init>:
c001e0fa:	55                   	push   ebp
c001e0fb:	89 e5                	mov    ebp,esp
c001e0fd:	e8 f2 1f fe ff       	call   c00000f4 <frame_dummy>
c001e102:	e8 e5 fa ff ff       	call   c001dbec <__do_global_ctors_aux>
c001e107:	5d                   	pop    ebp
c001e108:	c3                   	ret    

Disassembly of section .fini:

c001e109 <_fini>:
c001e109:	55                   	push   ebp
c001e10a:	89 e5                	mov    ebp,esp
c001e10c:	e8 73 1f fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e111:	5d                   	pop    ebp
c001e112:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e114 <Computer::~Computer()>:
c001e114:	83 ec 0c             	sub    esp,0xc
c001e117:	ba 34 f4 01 c0       	mov    edx,0xc001f434
c001e11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e120:	89 10                	mov    DWORD PTR [eax],edx
c001e122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e126:	83 ec 0c             	sub    esp,0xc
c001e129:	50                   	push   eax
c001e12a:	e8 73 d8 fe ff       	call   c000b9a2 <Device::~Device()>
c001e12f:	83 c4 10             	add    esp,0x10
c001e132:	90                   	nop
c001e133:	83 c4 0c             	add    esp,0xc
c001e136:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e138 <Computer::~Computer()>:
c001e138:	83 ec 0c             	sub    esp,0xc
c001e13b:	83 ec 0c             	sub    esp,0xc
c001e13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e142:	e8 cd ff ff ff       	call   c001e114 <Computer::~Computer()>
c001e147:	83 c4 10             	add    esp,0x10
c001e14a:	83 ec 08             	sub    esp,0x8
c001e14d:	68 70 01 00 00       	push   0x170
c001e152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e156:	e8 12 c4 fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e15b:	83 c4 10             	add    esp,0x10
c001e15e:	83 c4 0c             	add    esp,0xc
c001e161:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e162 <idleCommon()>:
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	fa                   	cli    
c001e166:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001e16c:	e8 ef 69 ff ff       	call   c0014b60 <schedule()>
c001e171:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001e176:	48                   	dec    eax
c001e177:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001e17c:	75 01                	jne    c001e17f <idleCommon()+0x1d>
c001e17e:	fb                   	sti    
c001e17f:	83 c4 0c             	add    esp,0xc
c001e182:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e184 <LinkedList<UnixFile>::~LinkedList()>:
c001e184:	90                   	nop
c001e185:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e186 <LinkedList<UnixFile>::LinkedList()>:
c001e186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e18a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e194:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e19b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e19f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1c6:	90                   	nop
c001e1c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e1c8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e1c8:	83 ec 0c             	sub    esp,0xc
c001e1cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e1d0:	75 10                	jne    c001e1e2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e1d2:	83 ec 0c             	sub    esp,0xc
c001e1d5:	68 48 f6 01 c0       	push   0xc001f648
c001e1da:	e8 38 22 ff ff       	call   c0010417 <KePanic(char const*)>
c001e1df:	83 c4 10             	add    esp,0x10
c001e1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1e8:	85 c0                	test   eax,eax
c001e1ea:	74 34                	je     c001e220 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1f3:	85 c0                	test   eax,eax
c001e1f5:	74 29                	je     c001e220 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e202:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e209:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e20d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e217:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e21e:	eb 65                	jmp    c001e285 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e224:	8b 00                	mov    eax,DWORD PTR [eax]
c001e226:	85 c0                	test   eax,eax
c001e228:	75 4b                	jne    c001e275 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e231:	85 c0                	test   eax,eax
c001e233:	75 40                	jne    c001e275 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e239:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e23d:	89 10                	mov    DWORD PTR [eax],edx
c001e23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e243:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e247:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e251:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e25f:	85 c0                	test   eax,eax
c001e261:	74 22                	je     c001e285 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e263:	83 ec 0c             	sub    esp,0xc
c001e266:	68 6a f6 01 c0       	push   0xc001f66a
c001e26b:	e8 a7 21 ff ff       	call   c0010417 <KePanic(char const*)>
c001e270:	83 c4 10             	add    esp,0x10
c001e273:	eb 10                	jmp    c001e285 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e275:	83 ec 0c             	sub    esp,0xc
c001e278:	68 74 f6 01 c0       	push   0xc001f674
c001e27d:	e8 95 21 ff ff       	call   c0010417 <KePanic(char const*)>
c001e282:	83 c4 10             	add    esp,0x10
c001e285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e289:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e28c:	8d 50 01             	lea    edx,[eax+0x1]
c001e28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e293:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e296:	90                   	nop
c001e297:	83 c4 0c             	add    esp,0xc
c001e29a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e29c <LinkedList<UnixFile>::getFirstElement()>:
c001e29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e2a4 <LinkedList<UnixFile>::removeFirst()>:
c001e2a4:	83 ec 0c             	sub    esp,0xc
c001e2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2ad:	85 c0                	test   eax,eax
c001e2af:	75 12                	jne    c001e2c3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e2b1:	83 ec 0c             	sub    esp,0xc
c001e2b4:	68 80 f6 01 c0       	push   0xc001f680
c001e2b9:	e8 59 21 ff ff       	call   c0010417 <KePanic(char const*)>
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	eb 7e                	jmp    c001e341 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e2c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2cd:	85 c0                	test   eax,eax
c001e2cf:	74 10                	je     c001e2e1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e2d1:	83 ec 0c             	sub    esp,0xc
c001e2d4:	68 cb f6 01 c0       	push   0xc001f6cb
c001e2d9:	e8 39 21 ff ff       	call   c0010417 <KePanic(char const*)>
c001e2de:	83 c4 10             	add    esp,0x10
c001e2e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2ea:	85 c0                	test   eax,eax
c001e2ec:	75 33                	jne    c001e321 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e307:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e30a:	83 f8 01             	cmp    eax,0x1
c001e30d:	74 21                	je     c001e330 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e30f:	83 ec 0c             	sub    esp,0xc
c001e312:	68 a4 f6 01 c0       	push   0xc001f6a4
c001e317:	e8 fb 20 ff ff       	call   c0010417 <KePanic(char const*)>
c001e31c:	83 c4 10             	add    esp,0x10
c001e31f:	eb 0f                	jmp    c001e330 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e325:	8b 00                	mov    eax,DWORD PTR [eax]
c001e327:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32e:	89 10                	mov    DWORD PTR [eax],edx
c001e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e334:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e337:	8d 50 ff             	lea    edx,[eax-0x1]
c001e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e341:	83 c4 0c             	add    esp,0xc
c001e344:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e346 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e34a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e34d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e34e <DriverlessDevice::~DriverlessDevice()>:
c001e34e:	ba 1c fd 01 c0       	mov    edx,0xc001fd1c
c001e353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e357:	89 10                	mov    DWORD PTR [eax],edx
c001e359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e35d:	50                   	push   eax
c001e35e:	e8 3f d6 fe ff       	call   c000b9a2 <Device::~Device()>
c001e363:	83 c4 04             	add    esp,0x4
c001e366:	90                   	nop
c001e367:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e368 <DriverlessDevice::~DriverlessDevice()>:
c001e368:	83 ec 0c             	sub    esp,0xc
c001e36b:	83 ec 0c             	sub    esp,0xc
c001e36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e372:	e8 d7 ff ff ff       	call   c001e34e <DriverlessDevice::~DriverlessDevice()>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	83 ec 08             	sub    esp,0x8
c001e37d:	68 58 01 00 00       	push   0x158
c001e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e386:	e8 e2 c1 fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e38b:	83 c4 10             	add    esp,0x10
c001e38e:	83 c4 0c             	add    esp,0xc
c001e391:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e392 <LinkedList<Device>::addElement(Device*)>:
c001e392:	83 ec 0c             	sub    esp,0xc
c001e395:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e39a:	75 10                	jne    c001e3ac <LinkedList<Device>::addElement(Device*)+0x1a>
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	68 48 f6 01 c0       	push   0xc001f648
c001e3a4:	e8 6e 20 ff ff       	call   c0010417 <KePanic(char const*)>
c001e3a9:	83 c4 10             	add    esp,0x10
c001e3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3b2:	85 c0                	test   eax,eax
c001e3b4:	74 3a                	je     c001e3f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3bd:	85 c0                	test   eax,eax
c001e3bf:	74 2f                	je     c001e3f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e3ee:	eb 68                	jmp    c001e458 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3f6:	85 c0                	test   eax,eax
c001e3f8:	75 4e                	jne    c001e448 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e401:	85 c0                	test   eax,eax
c001e403:	75 43                	jne    c001e448 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e409:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e40d:	89 10                	mov    DWORD PTR [eax],edx
c001e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e413:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e417:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e421:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e42f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e432:	85 c0                	test   eax,eax
c001e434:	74 22                	je     c001e458 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e436:	83 ec 0c             	sub    esp,0xc
c001e439:	68 6a f6 01 c0       	push   0xc001f66a
c001e43e:	e8 d4 1f ff ff       	call   c0010417 <KePanic(char const*)>
c001e443:	83 c4 10             	add    esp,0x10
c001e446:	eb 10                	jmp    c001e458 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e448:	83 ec 0c             	sub    esp,0xc
c001e44b:	68 74 f6 01 c0       	push   0xc001f674
c001e450:	e8 c2 1f ff ff       	call   c0010417 <KePanic(char const*)>
c001e455:	83 c4 10             	add    esp,0x10
c001e458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e45f:	8d 50 01             	lea    edx,[eax+0x1]
c001e462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e466:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e469:	90                   	nop
c001e46a:	83 c4 0c             	add    esp,0xc
c001e46d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e46e <LinkedList<Device>::LinkedList()>:
c001e46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e472:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e47c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e487:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e492:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e49c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e4a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e4ae:	90                   	nop
c001e4af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4b6:	85 c0                	test   eax,eax
c001e4b8:	75 0e                	jne    c001e4c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4c1:	85 c0                	test   eax,eax
c001e4c3:	75 03                	jne    c001e4c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e4c5:	b0 01                	mov    al,0x1
c001e4c7:	c3                   	ret    
c001e4c8:	b0 00                	mov    al,0x0
c001e4ca:	90                   	nop
c001e4cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e4cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e4d4:	83 ec 0c             	sub    esp,0xc
c001e4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4db:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4dd:	85 c0                	test   eax,eax
c001e4df:	75 17                	jne    c001e4f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e4e1:	83 ec 0c             	sub    esp,0xc
c001e4e4:	68 80 f6 01 c0       	push   0xc001f680
c001e4e9:	e8 29 1f ff ff       	call   c0010417 <KePanic(char const*)>
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	e9 92 00 00 00       	jmp    c001e588 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e4f6:	66 90                	xchg   ax,ax
c001e4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e502:	85 c0                	test   eax,eax
c001e504:	0f 95 c0             	setne  al
c001e507:	84 c0                	test   al,al
c001e509:	74 11                	je     c001e51c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e50b:	83 ec 0c             	sub    esp,0xc
c001e50e:	68 cb f6 01 c0       	push   0xc001f6cb
c001e513:	e8 ff 1e ff ff       	call   c0010417 <KePanic(char const*)>
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	90                   	nop
c001e51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e520:	8b 00                	mov    eax,DWORD PTR [eax]
c001e522:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e525:	85 c0                	test   eax,eax
c001e527:	0f 94 c0             	sete   al
c001e52a:	84 c0                	test   al,al
c001e52c:	74 36                	je     c001e564 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e532:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e53c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e54a:	83 f8 01             	cmp    eax,0x1
c001e54d:	74 25                	je     c001e574 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e54f:	83 ec 0c             	sub    esp,0xc
c001e552:	68 a4 f6 01 c0       	push   0xc001f6a4
c001e557:	e8 bb 1e ff ff       	call   c0010417 <KePanic(char const*)>
c001e55c:	83 c4 10             	add    esp,0x10
c001e55f:	eb 13                	jmp    c001e574 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e561:	8d 76 00             	lea    esi,[esi+0x0]
c001e564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e568:	8b 00                	mov    eax,DWORD PTR [eax]
c001e56a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e571:	89 10                	mov    DWORD PTR [eax],edx
c001e573:	90                   	nop
c001e574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e578:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e57b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e582:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e585:	8d 76 00             	lea    esi,[esi+0x0]
c001e588:	83 c4 0c             	add    esp,0xc
c001e58b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e58c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e594:	75 12                	jne    c001e5a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e596:	83 ec 0c             	sub    esp,0xc
c001e599:	68 48 f6 01 c0       	push   0xc001f648
c001e59e:	e8 74 1e ff ff       	call   c0010417 <KePanic(char const*)>
c001e5a3:	83 c4 10             	add    esp,0x10
c001e5a6:	66 90                	xchg   ax,ax
c001e5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ae:	85 c0                	test   eax,eax
c001e5b0:	74 36                	je     c001e5e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5b9:	85 c0                	test   eax,eax
c001e5bb:	74 2b                	je     c001e5e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e5bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e5e4:	eb 6a                	jmp    c001e650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e5e6:	66 90                	xchg   ax,ax
c001e5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ee:	85 c0                	test   eax,eax
c001e5f0:	75 4e                	jne    c001e640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5f9:	85 c0                	test   eax,eax
c001e5fb:	75 43                	jne    c001e640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e601:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e605:	89 10                	mov    DWORD PTR [eax],edx
c001e607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e60b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e60f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e619:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e624:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e627:	85 c0                	test   eax,eax
c001e629:	74 25                	je     c001e650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e62b:	83 ec 0c             	sub    esp,0xc
c001e62e:	68 6a f6 01 c0       	push   0xc001f66a
c001e633:	e8 df 1d ff ff       	call   c0010417 <KePanic(char const*)>
c001e638:	83 c4 10             	add    esp,0x10
c001e63b:	eb 13                	jmp    c001e650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e63d:	8d 76 00             	lea    esi,[esi+0x0]
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	68 74 f6 01 c0       	push   0xc001f674
c001e648:	e8 ca 1d ff ff       	call   c0010417 <KePanic(char const*)>
c001e64d:	83 c4 10             	add    esp,0x10
c001e650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e657:	8d 50 01             	lea    edx,[eax+0x1]
c001e65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e65e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e661:	90                   	nop
c001e662:	83 c4 0c             	add    esp,0xc
c001e665:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e668 <ACPI::~ACPI()>:
c001e668:	83 ec 0c             	sub    esp,0xc
c001e66b:	ba e8 02 02 c0       	mov    edx,0xc00202e8
c001e670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e674:	89 10                	mov    DWORD PTR [eax],edx
c001e676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e67a:	83 ec 0c             	sub    esp,0xc
c001e67d:	50                   	push   eax
c001e67e:	e8 1f d3 fe ff       	call   c000b9a2 <Device::~Device()>
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	90                   	nop
c001e687:	83 c4 0c             	add    esp,0xc
c001e68a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e68c <ACPI::~ACPI()>:
c001e68c:	83 ec 0c             	sub    esp,0xc
c001e68f:	83 ec 0c             	sub    esp,0xc
c001e692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e696:	e8 cd ff ff ff       	call   c001e668 <ACPI::~ACPI()>
c001e69b:	83 c4 10             	add    esp,0x10
c001e69e:	83 ec 08             	sub    esp,0x8
c001e6a1:	68 64 12 00 00       	push   0x1264
c001e6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6aa:	e8 be be fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e6af:	83 c4 10             	add    esp,0x10
c001e6b2:	83 c4 0c             	add    esp,0xc
c001e6b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e6b8 <LinkedList<Device>::~LinkedList()>:
c001e6b8:	90                   	nop
c001e6b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e6bc <LinkedList<Device>::isEmpty()>:
c001e6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6c2:	85 c0                	test   eax,eax
c001e6c4:	75 0e                	jne    c001e6d4 <LinkedList<Device>::isEmpty()+0x18>
c001e6c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6cd:	85 c0                	test   eax,eax
c001e6cf:	75 03                	jne    c001e6d4 <LinkedList<Device>::isEmpty()+0x18>
c001e6d1:	b0 01                	mov    al,0x1
c001e6d3:	c3                   	ret    
c001e6d4:	b0 00                	mov    al,0x0
c001e6d6:	90                   	nop
c001e6d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e6d8 <LinkedList<Device>::getFirstElement()>:
c001e6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e6e0 <LinkedList<Device>::removeFirst()>:
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6e9:	85 c0                	test   eax,eax
c001e6eb:	75 17                	jne    c001e704 <LinkedList<Device>::removeFirst()+0x24>
c001e6ed:	83 ec 0c             	sub    esp,0xc
c001e6f0:	68 80 f6 01 c0       	push   0xc001f680
c001e6f5:	e8 1d 1d ff ff       	call   c0010417 <KePanic(char const*)>
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	e9 92 00 00 00       	jmp    c001e794 <LinkedList<Device>::removeFirst()+0xb4>
c001e702:	66 90                	xchg   ax,ax
c001e704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e70b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e711:	85 c0                	test   eax,eax
c001e713:	74 13                	je     c001e728 <LinkedList<Device>::removeFirst()+0x48>
c001e715:	83 ec 0c             	sub    esp,0xc
c001e718:	68 cb f6 01 c0       	push   0xc001f6cb
c001e71d:	e8 f5 1c ff ff       	call   c0010417 <KePanic(char const*)>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	8d 76 00             	lea    esi,[esi+0x0]
c001e728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e72c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e72e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e734:	85 c0                	test   eax,eax
c001e736:	75 34                	jne    c001e76c <LinkedList<Device>::removeFirst()+0x8c>
c001e738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e746:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e751:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e754:	83 f8 01             	cmp    eax,0x1
c001e757:	74 27                	je     c001e780 <LinkedList<Device>::removeFirst()+0xa0>
c001e759:	83 ec 0c             	sub    esp,0xc
c001e75c:	68 a4 f6 01 c0       	push   0xc001f6a4
c001e761:	e8 b1 1c ff ff       	call   c0010417 <KePanic(char const*)>
c001e766:	83 c4 10             	add    esp,0x10
c001e769:	eb 15                	jmp    c001e780 <LinkedList<Device>::removeFirst()+0xa0>
c001e76b:	90                   	nop
c001e76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e770:	8b 00                	mov    eax,DWORD PTR [eax]
c001e772:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77c:	89 10                	mov    DWORD PTR [eax],edx
c001e77e:	66 90                	xchg   ax,ax
c001e780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e787:	8d 50 ff             	lea    edx,[eax-0x1]
c001e78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e791:	8d 76 00             	lea    esi,[esi+0x0]
c001e794:	83 c4 0c             	add    esp,0xc
c001e797:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e798 <CPU::~CPU()>:
c001e798:	83 ec 0c             	sub    esp,0xc
c001e79b:	ba 84 04 02 c0       	mov    edx,0xc0020484
c001e7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a4:	89 10                	mov    DWORD PTR [eax],edx
c001e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7aa:	83 ec 0c             	sub    esp,0xc
c001e7ad:	50                   	push   eax
c001e7ae:	e8 ef d1 fe ff       	call   c000b9a2 <Device::~Device()>
c001e7b3:	83 c4 10             	add    esp,0x10
c001e7b6:	90                   	nop
c001e7b7:	83 c4 0c             	add    esp,0xc
c001e7ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e7bc <CPU::~CPU()>:
c001e7bc:	83 ec 0c             	sub    esp,0xc
c001e7bf:	83 ec 0c             	sub    esp,0xc
c001e7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7c6:	e8 cd ff ff ff       	call   c001e798 <CPU::~CPU()>
c001e7cb:	83 c4 10             	add    esp,0x10
c001e7ce:	83 ec 08             	sub    esp,0x8
c001e7d1:	68 94 11 00 00       	push   0x1194
c001e7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7da:	e8 8e bd fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e7df:	83 c4 10             	add    esp,0x10
c001e7e2:	83 c4 0c             	add    esp,0xc
c001e7e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e7e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e7e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e7f0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e7f0:	90                   	nop
c001e7f1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e7f4 <ThreadControlBlock::ThreadControlBlock()>:
c001e7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7f8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e803:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e80e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e815:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e819:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e824:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e82f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e837:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e83b:	90                   	nop
c001e83c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e844:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e84e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e855:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e859:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e864:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e86e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e879:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e880:	90                   	nop
c001e881:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e882 <PCI::~PCI()>:
c001e882:	83 ec 0c             	sub    esp,0xc
c001e885:	ba e4 12 02 c0       	mov    edx,0xc00212e4
c001e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e88e:	89 10                	mov    DWORD PTR [eax],edx
c001e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	50                   	push   eax
c001e898:	e8 8f cb fe ff       	call   c000b42c <Bus::~Bus()>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	90                   	nop
c001e8a1:	83 c4 0c             	add    esp,0xc
c001e8a4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e8a6 <PCI::~PCI()>:
c001e8a6:	83 ec 0c             	sub    esp,0xc
c001e8a9:	83 ec 0c             	sub    esp,0xc
c001e8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b0:	e8 cd ff ff ff       	call   c001e882 <PCI::~PCI()>
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	83 ec 08             	sub    esp,0x8
c001e8bb:	68 5c 01 00 00       	push   0x15c
c001e8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8c4:	e8 a4 bc fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e8c9:	83 c4 10             	add    esp,0x10
c001e8cc:	83 c4 0c             	add    esp,0xc
c001e8cf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e8d0 <IDE::~IDE()>:
c001e8d0:	83 ec 0c             	sub    esp,0xc
c001e8d3:	ba 98 13 02 c0       	mov    edx,0xc0021398
c001e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8dc:	89 10                	mov    DWORD PTR [eax],edx
c001e8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e2:	83 ec 0c             	sub    esp,0xc
c001e8e5:	50                   	push   eax
c001e8e6:	e8 2d d5 fe ff       	call   c000be18 <HardDiskController::~HardDiskController()>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	90                   	nop
c001e8ef:	83 c4 0c             	add    esp,0xc
c001e8f2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e8f4 <IDE::~IDE()>:
c001e8f4:	83 ec 0c             	sub    esp,0xc
c001e8f7:	83 ec 0c             	sub    esp,0xc
c001e8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8fe:	e8 cd ff ff ff       	call   c001e8d0 <IDE::~IDE()>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	83 ec 08             	sub    esp,0x8
c001e909:	68 70 02 00 00       	push   0x270
c001e90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e912:	e8 56 bc fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	83 c4 0c             	add    esp,0xc
c001e91d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e91e <SATABus::~SATABus()>:
c001e91e:	83 ec 0c             	sub    esp,0xc
c001e921:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c001e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92a:	89 10                	mov    DWORD PTR [eax],edx
c001e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e930:	83 ec 0c             	sub    esp,0xc
c001e933:	50                   	push   eax
c001e934:	e8 df d4 fe ff       	call   c000be18 <HardDiskController::~HardDiskController()>
c001e939:	83 c4 10             	add    esp,0x10
c001e93c:	90                   	nop
c001e93d:	83 c4 0c             	add    esp,0xc
c001e940:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e942 <SATABus::~SATABus()>:
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	83 ec 0c             	sub    esp,0xc
c001e948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e94c:	e8 cd ff ff ff       	call   c001e91e <SATABus::~SATABus()>
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	83 ec 08             	sub    esp,0x8
c001e957:	68 64 01 00 00       	push   0x164
c001e95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e960:	e8 08 bc fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	83 c4 0c             	add    esp,0xc
c001e96b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e96c <ATA::~ATA()>:
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	ba 28 14 02 c0       	mov    edx,0xc0021428
c001e974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e978:	89 10                	mov    DWORD PTR [eax],edx
c001e97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97e:	83 ec 0c             	sub    esp,0xc
c001e981:	50                   	push   eax
c001e982:	e8 73 d5 fe ff       	call   c000befa <PhysicalDisk::~PhysicalDisk()>
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	90                   	nop
c001e98b:	83 c4 0c             	add    esp,0xc
c001e98e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e990 <ATA::~ATA()>:
c001e990:	83 ec 0c             	sub    esp,0xc
c001e993:	83 ec 0c             	sub    esp,0xc
c001e996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e99a:	e8 cd ff ff ff       	call   c001e96c <ATA::~ATA()>
c001e99f:	83 c4 10             	add    esp,0x10
c001e9a2:	83 ec 08             	sub    esp,0x8
c001e9a5:	68 7c 01 00 00       	push   0x17c
c001e9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ae:	e8 ba bb fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001e9b3:	83 c4 10             	add    esp,0x10
c001e9b6:	83 c4 0c             	add    esp,0xc
c001e9b9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e9ba <ATAPI::~ATAPI()>:
c001e9ba:	83 ec 0c             	sub    esp,0xc
c001e9bd:	ba 70 14 02 c0       	mov    edx,0xc0021470
c001e9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c6:	89 10                	mov    DWORD PTR [eax],edx
c001e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cc:	83 ec 0c             	sub    esp,0xc
c001e9cf:	50                   	push   eax
c001e9d0:	e8 25 d5 fe ff       	call   c000befa <PhysicalDisk::~PhysicalDisk()>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	90                   	nop
c001e9d9:	83 c4 0c             	add    esp,0xc
c001e9dc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e9de <ATAPI::~ATAPI()>:
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9e8:	e8 cd ff ff ff       	call   c001e9ba <ATAPI::~ATAPI()>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	83 ec 08             	sub    esp,0x8
c001e9f3:	68 84 01 00 00       	push   0x184
c001e9f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9fc:	e8 6c bb fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	83 c4 0c             	add    esp,0xc
c001ea07:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ea08 <SATA::~SATA()>:
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	ba 24 15 02 c0       	mov    edx,0xc0021524
c001ea10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea14:	89 10                	mov    DWORD PTR [eax],edx
c001ea16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1a:	83 ec 0c             	sub    esp,0xc
c001ea1d:	50                   	push   eax
c001ea1e:	e8 d7 d4 fe ff       	call   c000befa <PhysicalDisk::~PhysicalDisk()>
c001ea23:	83 c4 10             	add    esp,0x10
c001ea26:	90                   	nop
c001ea27:	83 c4 0c             	add    esp,0xc
c001ea2a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ea2c <SATA::~SATA()>:
c001ea2c:	83 ec 0c             	sub    esp,0xc
c001ea2f:	83 ec 0c             	sub    esp,0xc
c001ea32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea36:	e8 cd ff ff ff       	call   c001ea08 <SATA::~SATA()>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 ec 08             	sub    esp,0x8
c001ea41:	68 7c 01 00 00       	push   0x17c
c001ea46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea4a:	e8 1e bb fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001ea4f:	83 c4 10             	add    esp,0x10
c001ea52:	83 c4 0c             	add    esp,0xc
c001ea55:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ea56 <SATAPI::~SATAPI()>:
c001ea56:	83 ec 0c             	sub    esp,0xc
c001ea59:	ba 48 16 02 c0       	mov    edx,0xc0021648
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	89 10                	mov    DWORD PTR [eax],edx
c001ea64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	50                   	push   eax
c001ea6c:	e8 89 d4 fe ff       	call   c000befa <PhysicalDisk::~PhysicalDisk()>
c001ea71:	83 c4 10             	add    esp,0x10
c001ea74:	90                   	nop
c001ea75:	83 c4 0c             	add    esp,0xc
c001ea78:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ea7a <SATAPI::~SATAPI()>:
c001ea7a:	83 ec 0c             	sub    esp,0xc
c001ea7d:	83 ec 0c             	sub    esp,0xc
c001ea80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea84:	e8 cd ff ff ff       	call   c001ea56 <SATAPI::~SATAPI()>
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	83 ec 08             	sub    esp,0x8
c001ea8f:	68 84 01 00 00       	push   0x184
c001ea94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea98:	e8 d0 ba fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001ea9d:	83 c4 10             	add    esp,0x10
c001eaa0:	83 c4 0c             	add    esp,0xc
c001eaa3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001eaa4 <IOAPIC::~IOAPIC()>:
c001eaa4:	83 ec 0c             	sub    esp,0xc
c001eaa7:	ba 88 16 02 c0       	mov    edx,0xc0021688
c001eaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab0:	89 10                	mov    DWORD PTR [eax],edx
c001eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab6:	83 ec 0c             	sub    esp,0xc
c001eab9:	50                   	push   eax
c001eaba:	e8 e3 ce fe ff       	call   c000b9a2 <Device::~Device()>
c001eabf:	83 c4 10             	add    esp,0x10
c001eac2:	90                   	nop
c001eac3:	83 c4 0c             	add    esp,0xc
c001eac6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001eac8 <IOAPIC::~IOAPIC()>:
c001eac8:	83 ec 0c             	sub    esp,0xc
c001eacb:	83 ec 0c             	sub    esp,0xc
c001eace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead2:	e8 cd ff ff ff       	call   c001eaa4 <IOAPIC::~IOAPIC()>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	83 ec 08             	sub    esp,0x8
c001eadd:	68 68 01 00 00       	push   0x168
c001eae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eae6:	e8 82 ba fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	83 c4 0c             	add    esp,0xc
c001eaf1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001eaf4 <APICTimer::~APICTimer()>:
c001eaf4:	83 ec 0c             	sub    esp,0xc
c001eaf7:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c001eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb00:	89 10                	mov    DWORD PTR [eax],edx
c001eb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb06:	83 ec 0c             	sub    esp,0xc
c001eb09:	50                   	push   eax
c001eb0a:	e8 81 e8 fe ff       	call   c000d390 <Timer::~Timer()>
c001eb0f:	83 c4 10             	add    esp,0x10
c001eb12:	90                   	nop
c001eb13:	83 c4 0c             	add    esp,0xc
c001eb16:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001eb18 <APICTimer::~APICTimer()>:
c001eb18:	83 ec 0c             	sub    esp,0xc
c001eb1b:	83 ec 0c             	sub    esp,0xc
c001eb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb22:	e8 cd ff ff ff       	call   c001eaf4 <APICTimer::~APICTimer()>
c001eb27:	83 c4 10             	add    esp,0x10
c001eb2a:	83 ec 08             	sub    esp,0x8
c001eb2d:	68 60 01 00 00       	push   0x160
c001eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb36:	e8 32 ba fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001eb3b:	83 c4 10             	add    esp,0x10
c001eb3e:	83 c4 0c             	add    esp,0xc
c001eb41:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001eb44 <PIT::~PIT()>:
c001eb44:	83 ec 0c             	sub    esp,0xc
c001eb47:	ba 20 17 02 c0       	mov    edx,0xc0021720
c001eb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb50:	89 10                	mov    DWORD PTR [eax],edx
c001eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb56:	83 ec 0c             	sub    esp,0xc
c001eb59:	50                   	push   eax
c001eb5a:	e8 31 e8 fe ff       	call   c000d390 <Timer::~Timer()>
c001eb5f:	83 c4 10             	add    esp,0x10
c001eb62:	90                   	nop
c001eb63:	83 c4 0c             	add    esp,0xc
c001eb66:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001eb68 <PIT::~PIT()>:
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	83 ec 0c             	sub    esp,0xc
c001eb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb72:	e8 cd ff ff ff       	call   c001eb44 <PIT::~PIT()>
c001eb77:	83 c4 10             	add    esp,0x10
c001eb7a:	83 ec 08             	sub    esp,0x8
c001eb7d:	68 5c 01 00 00       	push   0x15c
c001eb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb86:	e8 e2 b9 fe ff       	call   c000a56d <operator delete(void*, unsigned long)>
c001eb8b:	83 c4 10             	add    esp,0x10
c001eb8e:	83 c4 0c             	add    esp,0xc
c001eb91:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 75 05 02 c0       	mov    esi,0xc0020575
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	8d 44 24 04          	lea    eax,[esp+0x4]
c0022018:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 91 05 02 c0       	mov    esi,0xc0020591
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
