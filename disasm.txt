
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 82 02 00       	call   c00282d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 8e 02 c0       	mov    ebx,0xc0028e82
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 8e 02 c0    	cmp    ebx,0xc0028e90
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 d6 02 c0       	mov    eax,0xc002d658
c0000049:	3d 58 d6 02 c0       	cmp    eax,0xc002d658
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 d6 02 c0       	push   0xc002d658
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 d6 02 c0       	mov    eax,0xc002d658
c0000075:	2d 58 d6 02 c0       	sub    eax,0xc002d658
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 d6 02 c0       	push   0xc002d658
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 8e 02 c0       	mov    ebx,0xc0028e98
c00000bb:	81 eb 94 8e 02 c0    	sub    ebx,0xc0028e94
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 8e 02 c0       	mov    esi,0xc0028e94
c00000ca:	a1 8c dc 02 c0       	mov    eax,ds:0xc002dc8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c dc 02 c0       	mov    ds:0xc002dc8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c dc 02 c0       	mov    eax,ds:0xc002dc8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 d6 02 c0       	push   0xc002d658
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 dc 02 c0       	push   0xc002dc90
c000012c:	68 58 d6 02 c0       	push   0xc002d658
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 87 d2 01 00       	call   c001d622 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 db 25 01 00       	call   c001298e <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 65 d2 01 00       	call   c001d622 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 b3 d6 01 00       	call   c001da8f <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 61 dc 01 00       	call   c001e046 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 e0 02 c0 	lgdtd  ds:0xc002e0d0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 c4 42 01 00       	call   c001489d <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 a8 dc 02 c0       	mov    ds:0xc002dca8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 a8 dc 02 c0    	mov    DWORD PTR ds:0xc002dca8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d a8 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dca8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd7160],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7160],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd7160],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7160],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7160],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d c0 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dcc0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d c0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcc0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 c4 dc 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd233c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 c4 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd233c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d c0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcc0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ec dc 02 c0    	cmp    DWORD PTR ds:0xc002dcec,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d fc dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dcfc
c0000e60:	c7 42 0c f4 dc 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dcf4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 fc dc 02 c0    	mov    DWORD PTR ds:0xc002dcfc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ec dc 02 c0    	mov    DWORD PTR ds:0xc002dcec,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 c0 dc 02 c0 02 	test   BYTE PTR ds:0xc002dcc0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d c0 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dcc0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 c4 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd233c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 c4 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd233c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 f4 dc 02 c0 	lea    edx,[eax*8-0x3ffd230c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 00 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd00
c00011e2:	81 fb f4 dc 02 c0    	cmp    ebx,0xc002dcf4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d f4 dc 02 c0       	cmp    eax,0xc002dcf4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d f0 dc 02 c0    	cmp    DWORD PTR ds:0xc002dcf0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 fc dc 02 c0       	mov    ds:0xc002dcfc,eax
c000121e:	a3 00 dd 02 c0       	mov    ds:0xc002dd00,eax
c0001223:	a3 f0 dc 02 c0       	mov    ds:0xc002dcf0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 f4 dc 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dcf4
c0001231:	c7 40 0c f4 dc 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dcf4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 00 dd 02 c0       	mov    ds:0xc002dd00,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 f4 dc 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dcf4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 b8 dc 02 c0 	lea    ebp,[edx*4-0x3ffd2348]
c0001282:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 c0 dc 02 c0 	lea    ecx,[edx*4-0x3ffd2340]
c000129d:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd f4 df 02 c0 	or     DWORD PTR [edi*4-0x3ffd200c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 f4 dc 02 c0 	lea    eax,[eax*8-0x3ffd230c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d fc dc 02 c0    	mov    DWORD PTR ds:0xc002dcfc,ecx
c0001357:	89 0d 00 dd 02 c0    	mov    DWORD PTR ds:0xc002dd00,ecx
c000135d:	c7 41 08 f4 dc 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dcf4
c0001364:	c7 41 0c f4 dc 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dcf4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ec dc 02 c0 	lea    edx,[ecx*8-0x3ffd2314]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d f4 df 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd200c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d f4 df 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd200c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ec dc 02 c0 	lea    edx,[eax*4-0x3ffd2314]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d f4 df 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd200c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d fc dc 02 c0    	mov    DWORD PTR ds:0xc002dcfc,edi
c000142a:	89 3d 00 dd 02 c0    	mov    DWORD PTR ds:0xc002dd00,edi
c0001430:	c7 47 08 f4 dc 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dcf4
c0001437:	c7 47 0c f4 dc 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dcf4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d f0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcf0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ec dc 02 c0       	mov    eax,ds:0xc002dcec
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ec dc 02 c0    	mov    DWORD PTR ds:0xc002dcec,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d c0 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dcc0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 14 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e014
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 14 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e014,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 14 e0 02 c0    	mov    DWORD PTR ds:0xc002e014,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ec dc 02 c0    	cmp    DWORD PTR ds:0xc002dcec,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ec dc 02 c0    	mov    DWORD PTR ds:0xc002dcec,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d c0 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dcc0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 1c e0 02 c0    	push   DWORD PTR ds:0xc002e01c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d c0 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dcc0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 1c e0 02 c0       	mov    eax,ds:0xc002e01c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ec dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dcec,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ec dc 02 c0       	mov    eax,ds:0xc002dcec
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 c4 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd233c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 f4 dc 02 c0       	mov    eax,0xc002dcf4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ec df 02 c0       	cmp    eax,0xc002dfec
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 28 e0 02 c0       	mov    eax,ds:0xc002e028
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 10 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e010
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 24 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e024
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 34 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e034
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd705c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 c0 dc 02 c0       	mov    eax,ds:0xc002dcc0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 c0 dc 02 c0       	mov    ds:0xc002dcc0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 04 e0 02 c0    	mov    DWORD PTR ds:0xc002e004,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 08 e0 02 c0    	mov    DWORD PTR ds:0xc002e008,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 0c e0 02 c0    	mov    DWORD PTR ds:0xc002e00c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 14 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e014,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 a0 17 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce860]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 12 ee 01 00       	jmp    c0020a3e <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 a0 17 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce860]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 43 ee 01 00       	jmp    c0020a85 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 a0 17 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce860]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 6b ee 01 00       	jmp    c0020acc <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 f8 46 02 00       	call   c002663c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 90 02 c0       	mov    edx,0xc00290e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba cc c4 02 c0       	mov    edx,0xc002c4cc
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 90 02 c0       	mov    edx,0xc00290ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 90 02 c0       	mov    edx,0xc00290d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 60 e0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1fa0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 40 e0 02 c0    	mov    ax,ds:0xc002e040
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 40 e0 02 c0    	mov    ds:0xc002e040,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 f5 34 02 00       	call   c002663c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 90 02 c0       	mov    eax,0xc00290f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6fc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 90 02 c0       	mov    eax,0xc00290fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 c0 1e 02 00       	call   c002663c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 90 02 c0       	mov    edx,0xc00290d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 8f 02 c0       	mov    edx,0xc0028fd0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 60 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fa0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 60 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1fa0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 87 08 02 00       	call   c002663c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 6d 08 02 00       	call   c002663c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 90 02 c0       	mov    eax,0xc0029017
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 90 02 c0       	mov    eax,0xc0029010
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 60 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fa0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 90 02 c0       	mov    esi,0xc0029000
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 b0 ef 01 00       	call   c002663c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 90 02 c0       	mov    edx,0xc00290e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 8f 02 c0       	mov    edx,0xc0028fe0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 8f 02 c0       	mov    edx,0xc0028ff0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 91 02 c0       	mov    edx,0xc0029102
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 91 02 c0       	mov    edx,0xc002910e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 91 02 c0       	mov    edx,0xc0029122
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029440
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029440
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 92 02 c0       	mov    eax,0xc0029240
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 91 02 c0       	mov    eax,0xc0029180
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ec0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 04 f9 01 00       	call   c002810f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 c7 f8 01 00       	call   c00280f1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 9b f8 01 00       	call   c002810f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 4e ef 01 00       	call   c0027814 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 c8 f9 01 00       	call   c00282a0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 15 f8 01 00       	call   c002810f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 57 f7 01 00       	call   c002810f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 24 f7 01 00       	call   c00280f1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 11 f6 01 00       	call   c002810f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 d9 f5 01 00       	call   c00280f1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 95 02 c0       	mov    eax,0xc0029540
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 e5 f3 01 00       	call   c002810f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 aa f3 01 00       	call   c00280f1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6660]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ba f0 01 00       	call   c0027ea3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 38 ea 01 00       	call   c0027840 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 f4 f2 01 00       	call   c0028113 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 e2 f3 01 00       	call   c0028237 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 cc e9 01 00       	call   c0027840 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 77 f2 01 00       	call   c002810d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 58 f2 01 00       	call   c0028111 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 e6 f3 01 00       	call   c00282c0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 98 ef 01 00       	call   c0027ea3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 16 e9 01 00       	call   c0027840 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 d2 f1 01 00       	call   c0028113 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 c0 f2 01 00       	call   c0028237 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 aa e8 01 00       	call   c0027840 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 55 f1 01 00       	call   c002810d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 35 f1 01 00       	call   c0028111 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 c2 f2 01 00       	call   c00282c0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 70 f0 01 00       	call   c002810f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 2e f0 01 00       	call   c00280f1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 16 f0 01 00       	call   c002810f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 88 ed 01 00       	call   c0027ea3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 8a e0 01 00       	call   c00271c3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ed e6 01 00       	call   c0027840 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 3f ed 01 00       	call   c0027ea3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 45 e0 01 00       	call   c00271c3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 14 ed 01 00       	call   c0027ea3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 64 ef 01 00       	call   c002810d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 41 e6 01 00       	call   c0027814 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 bb f0 01 00       	call   c00282a0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 ea ee 01 00       	call   c00280f1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 e5 e5 01 00       	call   c0027814 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 63 ec 01 00       	call   c0027ea3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 e6 e5 01 00       	call   c0027840 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 38 ec 01 00       	call   c0027ea3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 9f e8 01 00       	call   c0027b24 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 1e df 01 00       	call   c00271c3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 7e d8 01 00       	call   c0026b58 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 55 ef 01 00       	call   c0028237 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 3e e5 01 00       	call   c0027840 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 25 ef 01 00       	call   c0028237 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 97 de 01 00       	call   c00271c3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 d0 ed 01 00       	call   c0028113 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 b8 e7 01 00       	call   c0027b24 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 3e de 01 00       	call   c00271c3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 24 ef 01 00       	call   c00282c0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 fe ea 01 00       	call   c0027ea3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 55 e4 01 00       	call   c0027814 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 34 ed 01 00       	call   c002810f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 cd dd 01 00       	call   c00271c3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 f9 e3 01 00       	call   c0027814 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 93 ee 01 00       	call   c00282c0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 4c ea 01 00       	call   c0027ea3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 c9 e3 01 00       	call   c0027840 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 1c ea 01 00       	call   c0027ea3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 22 dd 01 00       	call   c00271c3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 f2 e9 01 00       	call   c0027ea3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 44 ec 01 00       	call   c002810f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 1b e3 01 00       	call   c0027814 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 95 ed 01 00       	call   c00282a0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 c4 eb 01 00       	call   c00280f1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 be e2 01 00       	call   c0027814 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 3c e9 01 00       	call   c0027ea3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 bf e2 01 00       	call   c0027840 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 11 e9 01 00       	call   c0027ea3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 78 e5 01 00       	call   c0027b24 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 f7 db 01 00       	call   c00271c3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 47 d5 01 00       	call   c0026b58 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 1e ec 01 00       	call   c0028237 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 07 e2 01 00       	call   c0027840 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ee eb 01 00       	call   c0028237 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 60 db 01 00       	call   c00271c3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 99 ea 01 00       	call   c0028113 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 80 e4 01 00       	call   c0027b24 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ff da 01 00       	call   c00271c3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 e5 eb 01 00       	call   c00282c0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 bf e7 01 00       	call   c0027ea3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 16 e1 01 00       	call   c0027814 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 f5 e9 01 00       	call   c002810f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 8e da 01 00       	call   c00271c3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ba e0 01 00       	call   c0027814 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 2f e7 01 00       	call   c0027ea3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 35 da 01 00       	call   c00271c3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9a 02 c0       	mov    eax,0xc0029a14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 aa e5 01 00       	call   c0027ea3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 28 df 01 00       	call   c0027840 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ba d1 01 00       	call   c0026b58 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 91 e8 01 00       	call   c0028237 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 7a de 01 00       	call   c0027840 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 5d e8 01 00       	call   c0028237 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 cf d7 01 00       	call   c00271c3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 2f e8 01 00       	call   c0028237 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 1e de 01 00       	call   c0027840 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 87 d7 01 00       	call   c00271c3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 a8 d0 01 00       	call   c0026b58 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 7f e7 01 00       	call   c0028237 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 68 dd 01 00       	call   c0027840 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 4b e7 01 00       	call   c0028237 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 bd d6 01 00       	call   c00271c3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 1d e7 01 00       	call   c0028237 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 0c dd 01 00       	call   c0027840 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 75 d6 01 00       	call   c00271c3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 53 d6 01 00       	call   c00271c3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 2f cf 01 00       	call   c0026b58 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 06 e6 01 00       	call   c0028237 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 ef db 01 00       	call   c0027840 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 d2 e5 01 00       	call   c0028237 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 44 d5 01 00       	call   c00271c3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 a4 e5 01 00       	call   c0028237 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 8d db 01 00       	call   c0027840 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 f6 d4 01 00       	call   c00271c3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 56 e5 01 00       	call   c0028237 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 3f db 01 00       	call   c0027840 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 a8 d4 01 00       	call   c00271c3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 bd cd 01 00       	call   c0026b58 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 94 e4 01 00       	call   c0028237 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 7d da 01 00       	call   c0027840 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 64 e4 01 00       	call   c0028237 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 d6 d3 01 00       	call   c00271c3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 36 e4 01 00       	call   c0028237 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 1f da 01 00       	call   c0027840 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 88 d3 01 00       	call   c00271c3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 e8 e3 01 00       	call   c0028237 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 d1 d9 01 00       	call   c0027840 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 3a d3 01 00       	call   c00271c3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 0e d3 01 00       	call   c00271c3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 6b d9 01 00       	call   c0027840 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 27 e2 01 00       	call   c0028113 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 b6 d2 01 00       	call   c00271c3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 13 d9 01 00       	call   c0027840 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 cf e1 01 00       	call   c0028113 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 49 cb 01 00       	call   c0026b58 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 20 e2 01 00       	call   c0028237 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 09 d8 01 00       	call   c0027840 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ec e1 01 00       	call   c0028237 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 5e d1 01 00       	call   c00271c3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 be e1 01 00       	call   c0028237 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 a7 d7 01 00       	call   c0027840 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 10 d1 01 00       	call   c00271c3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 70 e1 01 00       	call   c0028237 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 59 d7 01 00       	call   c0027840 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 c2 d0 01 00       	call   c00271c3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 22 e1 01 00       	call   c0028237 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 0b d7 01 00       	call   c0027840 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 74 d0 01 00       	call   c00271c3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 d4 e0 01 00       	call   c0028237 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 bd d6 01 00       	call   c0027840 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 26 d0 01 00       	call   c00271c3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 28 c9 01 00       	call   c0026b58 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ff df 01 00       	call   c0028237 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 e8 d5 01 00       	call   c0027840 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 cf df 01 00       	call   c0028237 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 41 cf 01 00       	call   c00271c3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 a1 df 01 00       	call   c0028237 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 8a d5 01 00       	call   c0027840 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 f3 ce 01 00       	call   c00271c3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 53 df 01 00       	call   c0028237 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 3c d5 01 00       	call   c0027840 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 a5 ce 01 00       	call   c00271c3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 05 df 01 00       	call   c0028237 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ee d4 01 00       	call   c0027840 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 57 ce 01 00       	call   c00271c3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 b7 de 01 00       	call   c0028237 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 a0 d4 01 00       	call   c0027840 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 09 ce 01 00       	call   c00271c3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 dd cd 01 00       	call   c00271c3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 3a d4 01 00       	call   c0027840 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 f6 dc 01 00       	call   c0028113 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 85 cd 01 00       	call   c00271c3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 e2 d3 01 00       	call   c0027840 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 9e dc 01 00       	call   c0028113 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 2c cd 01 00       	call   c00271c3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 89 d3 01 00       	call   c0027840 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 45 dc 01 00       	call   c0028113 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 d3 cc 01 00       	call   c00271c3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 30 d3 01 00       	call   c0027840 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ec db 01 00       	call   c0028113 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 4a c5 01 00       	call   c0026b58 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 21 dc 01 00       	call   c0028237 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 0a d2 01 00       	call   c0027840 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ed db 01 00       	call   c0028237 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 5f cb 01 00       	call   c00271c3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 bf db 01 00       	call   c0028237 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 a8 d1 01 00       	call   c0027840 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 11 cb 01 00       	call   c00271c3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 71 db 01 00       	call   c0028237 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 5a d1 01 00       	call   c0027840 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 c3 ca 01 00       	call   c00271c3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 23 db 01 00       	call   c0028237 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 0c d1 01 00       	call   c0027840 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 75 ca 01 00       	call   c00271c3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 d5 da 01 00       	call   c0028237 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 be d0 01 00       	call   c0027840 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 27 ca 01 00       	call   c00271c3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 87 da 01 00       	call   c0028237 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 70 d0 01 00       	call   c0027840 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 d6 c9 01 00       	call   c00271c3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 36 da 01 00       	call   c0028237 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 1f d0 01 00       	call   c0027840 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 88 c9 01 00       	call   c00271c3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 82 c2 01 00       	call   c0026b58 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 59 d9 01 00       	call   c0028237 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 42 cf 01 00       	call   c0027840 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 22 d9 01 00       	call   c0028237 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 94 c8 01 00       	call   c00271c3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 f4 d8 01 00       	call   c0028237 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 dd ce 01 00       	call   c0027840 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 46 c8 01 00       	call   c00271c3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 a6 d8 01 00       	call   c0028237 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 8f ce 01 00       	call   c0027840 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 f8 c7 01 00       	call   c00271c3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 58 d8 01 00       	call   c0028237 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 41 ce 01 00       	call   c0027840 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 aa c7 01 00       	call   c00271c3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 0a d8 01 00       	call   c0028237 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 f3 cd 01 00       	call   c0027840 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 5c c7 01 00       	call   c00271c3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 bc d7 01 00       	call   c0028237 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 a5 cd 01 00       	call   c0027840 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 0b c7 01 00       	call   c00271c3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 6b d7 01 00       	call   c0028237 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 54 cd 01 00       	call   c0027840 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 c3 c6 01 00       	call   c00271c3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 9c c6 01 00       	call   c00271c3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 fa cc 01 00       	call   c0027840 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 b6 d5 01 00       	call   c0028113 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 45 c6 01 00       	call   c00271c3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 a3 cc 01 00       	call   c0027840 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 5f d5 01 00       	call   c0028113 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ed c5 01 00       	call   c00271c3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 4b cc 01 00       	call   c0027840 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 07 d5 01 00       	call   c0028113 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 95 c5 01 00       	call   c00271c3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 f3 cb 01 00       	call   c0027840 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 af d4 01 00       	call   c0028113 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 3d c5 01 00       	call   c00271c3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 9b cb 01 00       	call   c0027840 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 57 d4 01 00       	call   c0028113 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 eb c4 01 00       	call   c00271c3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 49 cb 01 00       	call   c0027840 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 05 d4 01 00       	call   c0028113 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 19 bd 01 00       	call   c0026b58 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 f0 d3 01 00       	call   c0028237 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 d9 c9 01 00       	call   c0027840 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 c0 d3 01 00       	call   c0028237 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 32 c3 01 00       	call   c00271c3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 66 d3 01 00       	call   c0028237 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 4f c9 01 00       	call   c0027840 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ba c2 01 00       	call   c00271c3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 07 d3 01 00       	call   c0028237 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 f0 c8 01 00       	call   c0027840 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 5b c2 01 00       	call   c00271c3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 a8 d2 01 00       	call   c0028237 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 91 c8 01 00       	call   c0027840 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 fc c1 01 00       	call   c00271c3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 49 d2 01 00       	call   c0028237 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 32 c8 01 00       	call   c0027840 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 9d c1 01 00       	call   c00271c3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 ea d1 01 00       	call   c0028237 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 d3 c7 01 00       	call   c0027840 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 3e c1 01 00       	call   c00271c3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 8b d1 01 00       	call   c0028237 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 74 c7 01 00       	call   c0027840 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 df c0 01 00       	call   c00271c3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 2c d1 01 00       	call   c0028237 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 15 c7 01 00       	call   c0027840 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 80 c0 01 00       	call   c00271c3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 cd d0 01 00       	call   c0028237 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 b6 c6 01 00       	call   c0027840 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 21 c0 01 00       	call   c00271c3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 2b b9 01 00       	call   c0026b58 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 02 d0 01 00       	call   c0028237 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 eb c5 01 00       	call   c0027840 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 d2 cf 01 00       	call   c0028237 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 44 bf 01 00       	call   c00271c3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 77 cf 01 00       	call   c0028237 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 60 c5 01 00       	call   c0027840 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 cb be 01 00       	call   c00271c3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 17 cf 01 00       	call   c0028237 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 00 c5 01 00       	call   c0027840 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 6b be 01 00       	call   c00271c3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 b7 ce 01 00       	call   c0028237 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 a0 c4 01 00       	call   c0027840 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 0b be 01 00       	call   c00271c3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 57 ce 01 00       	call   c0028237 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 40 c4 01 00       	call   c0027840 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 ab bd 01 00       	call   c00271c3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 f7 cd 01 00       	call   c0028237 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 e0 c3 01 00       	call   c0027840 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 4b bd 01 00       	call   c00271c3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 97 cd 01 00       	call   c0028237 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 80 c3 01 00       	call   c0027840 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 eb bc 01 00       	call   c00271c3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 37 cd 01 00       	call   c0028237 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 20 c3 01 00       	call   c0027840 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 8b bc 01 00       	call   c00271c3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 d7 cc 01 00       	call   c0028237 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 c0 c2 01 00       	call   c0027840 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 2b bc 01 00       	call   c00271c3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6584]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 d0 bb 01 00       	call   c00271c3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 2d c2 01 00       	call   c0027840 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 e9 ca 01 00       	call   c0028113 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 73 bb 01 00       	call   c00271c3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 d0 c1 01 00       	call   c0027840 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 8c ca 01 00       	call   c0028113 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 16 bb 01 00       	call   c00271c3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 73 c1 01 00       	call   c0027840 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 2f ca 01 00       	call   c0028113 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 b9 ba 01 00       	call   c00271c3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 16 c1 01 00       	call   c0027840 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 d2 c9 01 00       	call   c0028113 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 5c ba 01 00       	call   c00271c3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 b9 c0 01 00       	call   c0027840 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 75 c9 01 00       	call   c0028113 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ff b9 01 00       	call   c00271c3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 5c c0 01 00       	call   c0027840 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 18 c9 01 00       	call   c0028113 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 a2 b9 01 00       	call   c00271c3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ff bf 01 00       	call   c0027840 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 bb c8 01 00       	call   c0028113 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 45 b9 01 00       	call   c00271c3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 a2 bf 01 00       	call   c0027840 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 5e c8 01 00       	call   c0028113 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 5a bf 01 00       	call   c0027840 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ca c9 01 00       	jmp    c00282c0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 3c c6 01 00       	call   c002810f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 fa c5 01 00       	call   c00280f1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 91 c3 01 00       	call   c0027ea3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 92 b6 01 00       	call   c00271c3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 61 c3 01 00       	call   c0027ea3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 c8 bf 01 00       	call   c0027b24 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 67 c5 01 00       	call   c00280f1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 6a c5 01 00       	call   c002810f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 3d c5 01 00       	call   c002810f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 36 bf 01 00       	call   c0027b24 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 b8 c6 01 00       	call   c00282c0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 93 c6 01 00       	call   c00282c0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 6d c2 01 00       	call   c0027ea3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 c4 bb 01 00       	call   c0027814 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 a3 c4 01 00       	call   c002810f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 3c b5 01 00       	call   c00271c3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 60 bb 01 00       	call   c0027814 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 fa c5 01 00       	call   c00282c0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 3a be 01 00       	call   c0027b24 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 b7 b4 01 00       	call   c00271c3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 e3 c0 01 00       	call   c0027ea3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 e3 b3 01 00       	call   c00271c3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 c3 b3 01 00       	call   c00271c3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 93 c0 01 00       	call   c0027ea3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 e3 c2 01 00       	call   c002810d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 c2 b9 01 00       	call   c0027814 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 3c c4 01 00       	call   c00282a0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 6b c2 01 00       	call   c00280f1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 69 b9 01 00       	call   c0027814 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 e7 bf 01 00       	call   c0027ea3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 6a b9 01 00       	call   c0027840 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 bc bf 01 00       	call   c0027ea3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 23 bc 01 00       	call   c0027b24 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 a2 b2 01 00       	call   c00271c3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 6c bf 01 00       	call   c0027ea3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 b8 c1 01 00       	call   c002810f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ad b8 01 00       	call   c0027840 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 7f b8 01 00       	call   c0027840 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 b8 be 01 00       	call   c0027ea3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 1c bb 01 00       	call   c0027b24 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 e4 ba 01 00       	call   c0027b24 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 63 b1 01 00       	call   c00271c3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 48 c2 01 00       	call   c00282c0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 22 be 01 00       	call   c0027ea3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 79 b7 01 00       	call   c0027814 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 58 c0 01 00       	call   c002810f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 f0 b0 01 00       	call   c00271c3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 14 b7 01 00       	call   c0027814 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ae c1 01 00       	call   c00282c0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 77 bf 01 00       	call   c002810f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 35 bf 01 00       	call   c00280f1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 cc bc 01 00       	call   c0027ea3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 cd af 01 00       	call   c00271c3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 9c bc 01 00       	call   c0027ea3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 03 b9 01 00       	call   c0027b24 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 a2 be 01 00       	call   c00280f1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 a5 be 01 00       	call   c002810f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 78 be 01 00       	call   c002810f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 71 b8 01 00       	call   c0027b24 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 f3 bf 01 00       	call   c00282c0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ce bf 01 00       	call   c00282c0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 a8 bb 01 00       	call   c0027ea3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ff b4 01 00       	call   c0027814 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 de bd 01 00       	call   c002810f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 77 ae 01 00       	call   c00271c3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 9b b4 01 00       	call   c0027814 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 35 bf 01 00       	call   c00282c0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 75 b7 01 00       	call   c0027b24 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 f2 ad 01 00       	call   c00271c3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 1d ba 01 00       	call   c0027ea3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 1d ad 01 00       	call   c00271c3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 fd ac 01 00       	call   c00271c3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 cd b9 01 00       	call   c0027ea3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 1d bc 01 00       	call   c002810d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 fb b2 01 00       	call   c0027814 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 75 bd 01 00       	call   c00282a0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 a4 bb 01 00       	call   c00280f1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 a1 b2 01 00       	call   c0027814 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 1f b9 01 00       	call   c0027ea3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 a2 b2 01 00       	call   c0027840 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 f4 b8 01 00       	call   c0027ea3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 5b b5 01 00       	call   c0027b24 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 da ab 01 00       	call   c00271c3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 a4 b8 01 00       	call   c0027ea3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 f0 ba 01 00       	call   c002810f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 e5 b1 01 00       	call   c0027840 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 b7 b1 01 00       	call   c0027840 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ee b7 01 00       	call   c0027ea3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 52 b4 01 00       	call   c0027b24 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 1f b4 01 00       	call   c0027b24 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 9e aa 01 00       	call   c00271c3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 83 bb 01 00       	call   c00282c0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 5d b7 01 00       	call   c0027ea3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 b4 b0 01 00       	call   c0027814 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 93 b9 01 00       	call   c002810f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 2b aa 01 00       	call   c00271c3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 4f b0 01 00       	call   c0027814 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 e9 ba 01 00       	call   c00282c0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 b2 b8 01 00       	call   c002810f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 70 b8 01 00       	call   c00280f1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 07 b6 01 00       	call   c0027ea3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 08 a9 01 00       	call   c00271c3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 d7 b5 01 00       	call   c0027ea3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 3e b2 01 00       	call   c0027b24 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 dd b7 01 00       	call   c00280f1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 e0 b7 01 00       	call   c002810f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 b3 b7 01 00       	call   c002810f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ac b1 01 00       	call   c0027b24 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 2e b9 01 00       	call   c00282c0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 09 b9 01 00       	call   c00282c0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 e3 b4 01 00       	call   c0027ea3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 3a ae 01 00       	call   c0027814 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 19 b7 01 00       	call   c002810f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 b2 a7 01 00       	call   c00271c3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 d6 ad 01 00       	call   c0027814 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 70 b8 01 00       	call   c00282c0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 b0 b0 01 00       	call   c0027b24 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 2d a7 01 00       	call   c00271c3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 58 b3 01 00       	call   c0027ea3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 58 a6 01 00       	call   c00271c3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 38 a6 01 00       	call   c00271c3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 08 b3 01 00       	call   c0027ea3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 58 b5 01 00       	call   c002810d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 36 ac 01 00       	call   c0027814 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 b0 b6 01 00       	call   c00282a0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 df b4 01 00       	call   c00280f1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 dc ab 01 00       	call   c0027814 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 5a b2 01 00       	call   c0027ea3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 dd ab 01 00       	call   c0027840 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 2f b2 01 00       	call   c0027ea3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 96 ae 01 00       	call   c0027b24 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 15 a5 01 00       	call   c00271c3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 df b1 01 00       	call   c0027ea3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 2b b4 01 00       	call   c002810f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 20 ab 01 00       	call   c0027840 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 f2 aa 01 00       	call   c0027840 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 29 b1 01 00       	call   c0027ea3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 8d ad 01 00       	call   c0027b24 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 5a ad 01 00       	call   c0027b24 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 d9 a3 01 00       	call   c00271c3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 be b4 01 00       	call   c00282c0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 98 b0 01 00       	call   c0027ea3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 ef a9 01 00       	call   c0027814 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ce b2 01 00       	call   c002810f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 66 a3 01 00       	call   c00271c3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 8a a9 01 00       	call   c0027814 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 24 b4 01 00       	call   c00282c0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ed b1 01 00       	call   c002810f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 ab b1 01 00       	call   c00280f1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 42 af 01 00       	call   c0027ea3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 43 a2 01 00       	call   c00271c3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 12 af 01 00       	call   c0027ea3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 79 ab 01 00       	call   c0027b24 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 18 b1 01 00       	call   c00280f1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 1b b1 01 00       	call   c002810f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ee b0 01 00       	call   c002810f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 e7 aa 01 00       	call   c0027b24 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 69 b2 01 00       	call   c00282c0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 44 b2 01 00       	call   c00282c0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 1e ae 01 00       	call   c0027ea3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 75 a7 01 00       	call   c0027814 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 54 b0 01 00       	call   c002810f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ed a0 01 00       	call   c00271c3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 11 a7 01 00       	call   c0027814 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 ab b1 01 00       	call   c00282c0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 eb a9 01 00       	call   c0027b24 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 68 a0 01 00       	call   c00271c3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 93 ac 01 00       	call   c0027ea3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 93 9f 01 00       	call   c00271c3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 73 9f 01 00       	call   c00271c3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 43 ac 01 00       	call   c0027ea3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 93 ae 01 00       	call   c002810d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 71 a5 01 00       	call   c0027814 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 eb af 01 00       	call   c00282a0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 1a ae 01 00       	call   c00280f1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 17 a5 01 00       	call   c0027814 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 95 ab 01 00       	call   c0027ea3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 18 a5 01 00       	call   c0027840 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 6a ab 01 00       	call   c0027ea3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 d1 a7 01 00       	call   c0027b24 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 50 9e 01 00       	call   c00271c3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 1a ab 01 00       	call   c0027ea3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 66 ad 01 00       	call   c002810f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 5b a4 01 00       	call   c0027840 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 2d a4 01 00       	call   c0027840 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 64 aa 01 00       	call   c0027ea3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 c8 a6 01 00       	call   c0027b24 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 95 a6 01 00       	call   c0027b24 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 14 9d 01 00       	call   c00271c3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 f9 ad 01 00       	call   c00282c0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 d3 a9 01 00       	call   c0027ea3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 2a a3 01 00       	call   c0027814 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 09 ac 01 00       	call   c002810f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 a1 9c 01 00       	call   c00271c3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 c5 a2 01 00       	call   c0027814 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 5f ad 01 00       	call   c00282c0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 25 ab 01 00       	call   c002810f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 e3 aa 01 00       	call   c00280f1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 7a a8 01 00       	call   c0027ea3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 7b 9b 01 00       	call   c00271c3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 4a a8 01 00       	call   c0027ea3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 b1 a4 01 00       	call   c0027b24 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 50 aa 01 00       	call   c00280f1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 53 aa 01 00       	call   c002810f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 26 aa 01 00       	call   c002810f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 1f a4 01 00       	call   c0027b24 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 a1 ab 01 00       	call   c00282c0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 78 ab 01 00       	call   c00282c0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 52 a7 01 00       	call   c0027ea3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 a9 a0 01 00       	call   c0027814 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 88 a9 01 00       	call   c002810f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 21 9a 01 00       	call   c00271c3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 49 a0 01 00       	call   c0027814 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 e3 aa 01 00       	call   c00282c0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 24 a3 01 00       	call   c0027b24 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 a1 99 01 00       	call   c00271c3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 cd a5 01 00       	call   c0027ea3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 cd 98 01 00       	call   c00271c3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ad 98 01 00       	call   c00271c3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 7d a5 01 00       	call   c0027ea3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 b1 a7 01 00       	call   c00280f1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 a8 9e 01 00       	call   c0027814 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 22 a9 01 00       	call   c00282a0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 51 a7 01 00       	call   c00280f1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 4b 9e 01 00       	call   c0027814 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 c9 a4 01 00       	call   c0027ea3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 4c 9e 01 00       	call   c0027840 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 9e a4 01 00       	call   c0027ea3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 05 a1 01 00       	call   c0027b24 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 84 97 01 00       	call   c00271c3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 4e a4 01 00       	call   c0027ea3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 9a a6 01 00       	call   c002810f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 8f 9d 01 00       	call   c0027840 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 61 9d 01 00       	call   c0027840 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 a5 a3 01 00       	call   c0027ea3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 0c a0 01 00       	call   c0027b24 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 f5 9c 01 00       	call   c0027840 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 b1 a5 01 00       	call   c0028113 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 a4 9f 01 00       	call   c0027b24 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 23 96 01 00       	call   c00271c3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 08 a7 01 00       	call   c00282c0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 e2 a2 01 00       	call   c0027ea3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 39 9c 01 00       	call   c0027814 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 18 a5 01 00       	call   c002810f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 b0 95 01 00       	call   c00271c3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 d8 9b 01 00       	call   c0027814 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 72 a6 01 00       	call   c00282c0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd655c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6568]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 2d a3 01 00       	call   c002810f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 eb a2 01 00       	call   c00280f1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 d7 a2 01 00       	call   c002810f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 49 a0 01 00       	call   c0027ea3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 c7 99 01 00       	call   c0027840 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 19 a0 01 00       	call   c0027ea3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 1f 93 01 00       	call   c00271c3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ee 9f 01 00       	call   c0027ea3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 3e a2 01 00       	call   c002810d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 1f 99 01 00       	call   c0027814 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 99 a3 01 00       	call   c00282a0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 c8 a1 01 00       	call   c00280f1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 c7 98 01 00       	call   c0027814 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 45 9f 01 00       	call   c0027ea3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 c8 98 01 00       	call   c0027840 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 1a 9f 01 00       	call   c0027ea3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 81 9b 01 00       	call   c0027b24 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 00 92 01 00       	call   c00271c3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 28 9b 01 00       	call   c0027b24 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ae 91 01 00       	call   c00271c3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 94 a2 01 00       	call   c00282c0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 6e 9e 01 00       	call   c0027ea3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 c5 97 01 00       	call   c0027814 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 a4 a0 01 00       	call   c002810f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 3d 91 01 00       	call   c00271c3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 69 97 01 00       	call   c0027814 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 03 a2 01 00       	call   c00282c0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 b8 9d 01 00       	call   c0027ea3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 35 97 01 00       	call   c0027840 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 86 9d 01 00       	call   c0027ea3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 8c 90 01 00       	call   c00271c3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 5c 9d 01 00       	call   c0027ea3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 b0 9f 01 00       	call   c0028111 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 89 96 01 00       	call   c0027814 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 03 a1 01 00       	call   c00282a0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 32 9f 01 00       	call   c00280f1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 30 96 01 00       	call   c0027814 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ae 9c 01 00       	call   c0027ea3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 31 96 01 00       	call   c0027840 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 83 9c 01 00       	call   c0027ea3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 ea 98 01 00       	call   c0027b24 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 69 8f 01 00       	call   c00271c3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 85 98 01 00       	call   c0027b24 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 04 8f 01 00       	call   c00271c3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 ea 9f 01 00       	call   c00282c0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 c4 9b 01 00       	call   c0027ea3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 1b 95 01 00       	call   c0027814 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 fa 9d 01 00       	call   c002810f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 93 8e 01 00       	call   c00271c3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 bf 94 01 00       	call   c0027814 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 30 9b 01 00       	call   c0027ea3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 36 8e 01 00       	call   c00271c3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9b 02 c0       	mov    eax,0xc0029bbe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9b 02 c0       	mov    eax,0xc0029bcf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 9c 02 c0       	push   0xc0029c06
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 c8 e0 02 c0       	mov    eax,0xc002e0c8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f 9c 02 c0       	push   0xc0029c0f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 3c 66 02 c0       	mov    eax,0xc002663c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 9c 02 c0       	push   0xc0029c19
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 70 63 02 c0       	mov    eax,0xc0026370
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 9c 02 c0       	push   0xc0029c22
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 3c 67 02 c0       	mov    eax,0xc002673c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c 9c 02 c0       	push   0xc0029c2c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 bc 64 02 c0       	mov    eax,0xc00264bc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 9c 02 c0       	push   0xc0029c35
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 cc e0 02 c0       	mov    eax,0xc002e0cc
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 9c 02 c0       	push   0xc0029c42
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 cd e0 02 c0       	mov    eax,0xc002e0cd
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 35 5b 00 00       	call   c0014158 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c000e668:	68 4f 9c 02 c0       	push   0xc0029c4f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 1b f2 00 00       	call   c001d890 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 04 f5 00 00       	call   c001db8e <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 ec e3 01 c0       	push   0xc001e3ec
c000e693:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c000e699:	e8 f0 f4 00 00       	call   c001db8e <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 e8 15 03 c0       	mov    ds:0xc00315e8,eax
c000e6a6:	c6 05 cd e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cd,0x1
c000e6ad:	e8 bb 00 01 00       	call   c001e76d <Vm::initialise8086()>
c000e6b2:	e8 89 48 00 00       	call   c0012f40 <Fs::initVFS()>
c000e6b7:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 4d db 00 00       	call   c001c220 <Sys::loadSyscalls()>
c000e6d3:	e8 26 ba 00 00       	call   c001a0fe <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c 9c 02 c0       	push   0xc0029c5c
c000e6e2:	68 65 9c 02 c0       	push   0xc0029c65
c000e6e7:	e8 38 c7 00 00       	call   c001ae24 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 34 53 00 00       	call   c0013a28 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 27 5a 00 00       	call   c001412c <Device::loadDriversForAll()>
c000e705:	e8 3a b5 00 00       	call   c0019c44 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d 9c 02 c0       	push   0xc0029c6d
c000e719:	e8 96 ec 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 c1 ee 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 be f7 00 00       	call   c001def2 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 9c 02 c0       	push   0xc0029c89
c000e749:	50                   	push   eax
c000e74a:	e8 83 5a 00 00       	call   c00141d2 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 9e 02 c0       	mov    edx,0xc0029e28
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 e1 e0 02 c0 04 	test   BYTE PTR ds:0xc002e0e1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 23 7a 01 00       	call   c0026306 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 38 a0 00 00       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 11 a0 00 00       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 ef 9f 00 00       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 cd 9f 00 00       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 e0 e0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e0e0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 db 9e 00 00       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 b6 9e 00 00       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 8d 78 01 00       	call   c00262c0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 4a 78 01 00       	call   c00262a0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 d2 9e 00 00       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 9c 02 c0       	push   0xc0029c99
c000eaaf:	e8 08 41 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac 9c 02 c0       	push   0xc0029cac
c000ead2:	e8 e5 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd 9c 02 c0       	push   0xc0029cbd
c000eaf5:	e8 c2 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce 9c 02 c0       	push   0xc0029cce
c000eb18:	e8 9f 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df 9c 02 c0       	push   0xc0029cdf
c000eb3b:	e8 7c 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 9c 02 c0       	push   0xc0029cf0
c000eb5e:	e8 59 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 9d 02 c0       	push   0xc0029d01
c000eb81:	e8 36 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 9d 02 c0       	push   0xc0029d12
c000eba4:	e8 13 40 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 9d 02 c0       	push   0xc0029d23
c000ebc7:	e8 f0 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 9d 02 c0       	push   0xc0029d34
c000ebea:	e8 cd 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 9d 02 c0       	push   0xc0029d45
c000ec0d:	e8 aa 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 9d 02 c0       	push   0xc0029d56
c000ec30:	e8 87 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 9d 02 c0       	push   0xc0029d67
c000ec53:	e8 64 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 9d 02 c0       	push   0xc0029d78
c000ec76:	e8 41 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 9d 02 c0       	push   0xc0029d89
c000ec99:	e8 1e 3f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a 9d 02 c0       	push   0xc0029d9a
c000ecbc:	e8 fb 3e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab 9d 02 c0       	push   0xc0029dab
c000ecdf:	e8 d8 3e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc 9d 02 c0       	push   0xc0029dbc
c000ed02:	e8 b5 3e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd 9d 02 c0       	push   0xc0029dcd
c000ed21:	e8 96 3e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 30 b7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b730
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 85 3e 00 00       	jmp    c0012bbc <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de 9d 02 c0       	push   0xc0029dde
c000ee0a:	e8 28 b4 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 9d 02 c0       	push   0xc0029de4
c000ee42:	e8 f0 b3 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 e0 e0 02 c0 04 	test   BYTE PTR ds:0xc002e0e0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 04 d0 02 c0 	sete   BYTE PTR ds:0xc002d004
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 71 8f 00 00       	call   c0017e26 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 1e 51 00 00       	call   c0013fe2 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 1a 9b 00 00       	call   c0018a0e <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 df 50 00 00       	call   c0013fe2 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 49 56 00 00       	call   c0014568 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 af 50 00 00       	call   c0013fe2 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 39 ed 00 00       	call   c001dc8e <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea 9d 02 c0       	push   0xc0029dea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 19 3c 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb 9d 02 c0       	push   0xc0029dfb
c000efc0:	e8 72 b2 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 9e 02 c0       	push   0xc0029e08
c000efd5:	e8 5d b2 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e12
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 46 b2 00 00       	jmp    c001a237 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c 9e 02 c0       	push   0xc0029e4c
c000f086:	e8 31 3b 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 d2 e0 02 c0       	mov    ds:0xc002e0d2,eax
c000f0c7:	66 89 15 d0 e0 02 c0 	mov    WORD PTR ds:0xc002e0d0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 80 e8 00 00       	call   c001da5e <unlockScheduler()>
c000f1de:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 14 91 01 00       	call   c0028340 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 0b 91 01 00       	call   c0028340 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 d8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0d8,0x7ff
c000f323:	a3 da e0 02 c0       	mov    ds:0xc002e0da,eax
c000f328:	0f 01 1d d8 e0 02 c0 	lidtd  ds:0xc002e0d8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 9c 26 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 cc 2c 00 00       	call   c00122ec <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 14 1e 00 00       	call   c0011452 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 45 1e 00 00       	call   c0011492 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d e0 cf 02 c0    	mov    ecx,DWORD PTR ds:0xc002cfe0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 9e 02 c0       	push   0xc0029e68
c000f6f4:	e8 c3 34 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 e0 cf 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cfe0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 92 25 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d e0 cf 02 c0    	mov    ebp,DWORD PTR ds:0xc002cfe0
c000f727:	e8 b3 07 00 00       	call   c000fedf <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 b3 2a 00 00       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d e0 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cfe0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 9e 02 c0       	push   0xc0029e98
c000f7ad:	e8 85 aa 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d 9e 02 c0       	push   0xc0029e9d
c000f7c3:	e8 6f aa 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 83 e2 00 00       	call   c001da5c <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 74 e2 00 00       	call   c001da5e <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 b6 24 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 e2 2a 00 00       	call   c00122ec <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 9b 24 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 85 27 00 00       	call   c0011fa8 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 00 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d000
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 34 0c 00 00       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 f6 0b 00 00       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 8d 0c 00 00       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 00 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d000
c000fb46:	80 3d 60 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e160,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 00 d0 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d000,0x8000
c000fba0:	c6 05 60 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e160,0x1
c000fba7:	c7 05 98 e1 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e198,0xc000fa13
c000fbb1:	c7 05 84 e1 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e184,0xc000f89a
c000fbbb:	c7 05 80 e1 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e180,0xc000f8e5
c000fbc5:	c7 05 8c e1 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e18c,0xc000fa59
c000fbcf:	c7 05 94 e1 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e194,0xc000f963
c000fbd9:	c7 05 88 e1 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e188,0xc000f9c1
c000fbe3:	c7 05 90 e1 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e190,0xc000f9c2
c000fbed:	c7 05 9c e1 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e19c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 74 09 00 00       	call   c001057e <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 a4 9e 02 c0       	push   0xc0029ea4
c000fc4a:	e8 6d 2f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	8d 98 ff 0f 00 00    	lea    ebx,[eax+0xfff]
c000fc5a:	e8 d3 1f 00 00       	call   c0011c32 <Virt::virtualMemorySetup()>
c000fc5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000fc65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc68:	e8 cc 03 00 00       	call   c0010039 <Phys::physicalMemorySetup(unsigned int)>
c000fc6d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7c:	75 0e                	jne    c000fc8c <kernel_main+0x94>
c000fc7e:	89 d8                	mov    eax,ebx
c000fc80:	25 48 03 00 00       	and    eax,0x348
c000fc85:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8a:	74 10                	je     c000fc9c <kernel_main+0xa4>
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	68 31 b7 02 c0       	push   0xc002b731
c000fc94:	e8 9e a5 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	83 ec 0c             	sub    esp,0xc
c000fc9f:	89 1d e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,ebx
c000fca5:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca9:	53                   	push   ebx
c000fcaa:	e8 37 21 00 00       	call   c0011de6 <VAS::VAS()>
c000fcaf:	89 1d 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,ebx
c000fcb5:	e8 66 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcba:	c7 04 24 bb 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ebb
c000fcc1:	e8 f6 2e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000fcc6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccd:	e8 6e fb ff ff       	call   c000f840 <malloc>
c000fcd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd5:	89 c6                	mov    esi,eax
c000fcd7:	e8 5e ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdc:	58                   	pop    eax
c000fcdd:	89 35 c8 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c8,esi
c000fce3:	5a                   	pop    edx
c000fce4:	56                   	push   esi
c000fce5:	68 d8 9e 02 c0       	push   0xc0029ed8
c000fcea:	e8 cd 2e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000fcef:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c000fcf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	6a 00                	push   0x0
c000fcfc:	50                   	push   eax
c000fcfd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd00:	83 c4 14             	add    esp,0x14
c000fd03:	53                   	push   ebx
c000fd04:	e8 77 23 00 00       	call   c0012080 <VAS::~VAS()>
c000fd09:	c7 04 24 eb 9e 02 c0 	mov    DWORD PTR [esp],0xc0029eeb
c000fd10:	e8 22 a5 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000fd15:	83 c4 20             	add    esp,0x20
c000fd18:	5b                   	pop    ebx
c000fd19:	5e                   	pop    esi
c000fd1a:	5f                   	pop    edi
c000fd1b:	c3                   	ret    

c000fd1c <Phys::allocateDMA(unsigned long)>:
c000fd1c:	55                   	push   ebp
c000fd1d:	31 d2                	xor    edx,edx
c000fd1f:	57                   	push   edi
c000fd20:	31 ed                	xor    ebp,ebp
c000fd22:	56                   	push   esi
c000fd23:	31 c9                	xor    ecx,ecx
c000fd25:	53                   	push   ebx
c000fd26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd30:	31 c0                	xor    eax,eax
c000fd32:	c1 ee 0c             	shr    esi,0xc
c000fd35:	eb 17                	jmp    c000fd4e <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	85 c9                	test   ecx,ecx
c000fd39:	75 04                	jne    c000fd3f <Phys::allocateDMA(unsigned long)+0x23>
c000fd3b:	89 d5                	mov    ebp,edx
c000fd3d:	89 d0                	mov    eax,edx
c000fd3f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd42:	39 de                	cmp    esi,ebx
c000fd44:	74 20                	je     c000fd66 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd46:	42                   	inc    edx
c000fd47:	89 d9                	mov    ecx,ebx
c000fd49:	83 fa 2f             	cmp    edx,0x2f
c000fd4c:	7f 11                	jg     c000fd5f <Phys::allocateDMA(unsigned long)+0x43>
c000fd4e:	80 ba 20 e1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ee0],0x0
c000fd55:	74 e0                	je     c000fd37 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd57:	31 c9                	xor    ecx,ecx
c000fd59:	42                   	inc    edx
c000fd5a:	83 fa 2f             	cmp    edx,0x2f
c000fd5d:	7e ef                	jle    c000fd4e <Phys::allocateDMA(unsigned long)+0x32>
c000fd5f:	5b                   	pop    ebx
c000fd60:	31 c0                	xor    eax,eax
c000fd62:	5e                   	pop    esi
c000fd63:	5f                   	pop    edi
c000fd64:	5d                   	pop    ebp
c000fd65:	c3                   	ret    
c000fd66:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd69:	89 d7                	mov    edi,edx
c000fd6b:	4f                   	dec    edi
c000fd6c:	79 03                	jns    c000fd71 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd71:	c1 ff 04             	sar    edi,0x4
c000fd74:	89 c2                	mov    edx,eax
c000fd76:	c1 fa 04             	sar    edx,0x4
c000fd79:	39 fa                	cmp    edx,edi
c000fd7b:	75 2f                	jne    c000fdac <Phys::allocateDMA(unsigned long)+0x90>
c000fd7d:	85 db                	test   ebx,ebx
c000fd7f:	74 1a                	je     c000fd9b <Phys::allocateDMA(unsigned long)+0x7f>
c000fd81:	be 20 e1 02 c0       	mov    esi,0xc002e120
c000fd86:	8d 90 20 e1 02 c0    	lea    edx,[eax-0x3ffd1ee0]
c000fd8c:	f7 d6                	not    esi
c000fd8e:	29 c6                	sub    esi,eax
c000fd90:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd93:	42                   	inc    edx
c000fd94:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd97:	39 d9                	cmp    ecx,ebx
c000fd99:	7f f5                	jg     c000fd90 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9b:	85 ff                	test   edi,edi
c000fd9d:	74 13                	je     c000fdb2 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9f:	5b                   	pop    ebx
c000fda0:	05 50 20 0c 00       	add    eax,0xc2050
c000fda5:	5e                   	pop    esi
c000fda6:	c1 e0 0c             	shl    eax,0xc
c000fda9:	5f                   	pop    edi
c000fdaa:	5d                   	pop    ebp
c000fdab:	c3                   	ret    
c000fdac:	89 ea                	mov    edx,ebp
c000fdae:	31 c9                	xor    ecx,ecx
c000fdb0:	eb a7                	jmp    c000fd59 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb2:	5b                   	pop    ebx
c000fdb3:	c1 e0 0c             	shl    eax,0xc
c000fdb6:	5e                   	pop    esi
c000fdb7:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbc:	5f                   	pop    edi
c000fdbd:	5d                   	pop    ebp
c000fdbe:	c3                   	ret    

c000fdbf <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcd:	c1 e9 0c             	shr    ecx,0xc
c000fdd0:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd5:	76 25                	jbe    c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd7:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddc:	c1 e8 0c             	shr    eax,0xc
c000fddf:	8d 50 10             	lea    edx,[eax+0x10]
c000fde2:	85 c9                	test   ecx,ecx
c000fde4:	74 15                	je     c000fdfb <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde6:	8d 82 20 e1 02 c0    	lea    eax,[edx-0x3ffd1ee0]
c000fdec:	8d 94 11 20 e1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ee0]
c000fdf3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf6:	40                   	inc    eax
c000fdf7:	39 d0                	cmp    eax,edx
c000fdf9:	75 f8                	jne    c000fdf3 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfb:	c3                   	ret    
c000fdfc:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe02:	c1 ea 0c             	shr    edx,0xc
c000fe05:	eb db                	jmp    c000fde2 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe07 <Phys::setPageState(unsigned long, bool)>:
c000fe07:	56                   	push   esi
c000fe08:	ba 01 00 00 00       	mov    edx,0x1
c000fe0d:	53                   	push   ebx
c000fe0e:	8b 35 e4 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfe4
c000fe14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1c:	89 c8                	mov    eax,ecx
c000fe1e:	83 e1 07             	and    ecx,0x7
c000fe21:	c1 e8 03             	shr    eax,0x3
c000fe24:	d3 e3                	shl    ebx,cl
c000fe26:	01 c6                	add    esi,eax
c000fe28:	d3 e2                	shl    edx,cl
c000fe2a:	f7 d2                	not    edx
c000fe2c:	20 16                	and    BYTE PTR [esi],dl
c000fe2e:	03 05 e4 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cfe4
c000fe34:	08 18                	or     BYTE PTR [eax],bl
c000fe36:	5b                   	pop    ebx
c000fe37:	5e                   	pop    esi
c000fe38:	c3                   	ret    

c000fe39 <Phys::getPageState(unsigned long)>:
c000fe39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3d:	8b 15 e4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfe4
c000fe43:	89 c8                	mov    eax,ecx
c000fe45:	83 e1 07             	and    ecx,0x7
c000fe48:	c1 e8 03             	shr    eax,0x3
c000fe4b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4f:	d3 f8                	sar    eax,cl
c000fe51:	83 e0 01             	and    eax,0x1
c000fe54:	c3                   	ret    

c000fe55 <Phys::freePage(unsigned long)>:
c000fe55:	53                   	push   ebx
c000fe56:	83 ec 08             	sub    esp,0x8
c000fe59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5d:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe63:	76 57                	jbe    c000febc <Phys::freePage(unsigned long)+0x67>
c000fe65:	c1 eb 0c             	shr    ebx,0xc
c000fe68:	53                   	push   ebx
c000fe69:	e8 cb ff ff ff       	call   c000fe39 <Phys::getPageState(unsigned long)>
c000fe6e:	5a                   	pop    edx
c000fe6f:	84 c0                	test   al,al
c000fe71:	74 5b                	je     c000fece <Phys::freePage(unsigned long)+0x79>
c000fe73:	a1 0c e1 02 c0       	mov    eax,ds:0xc002e10c
c000fe78:	48                   	dec    eax
c000fe79:	a3 0c e1 02 c0       	mov    ds:0xc002e10c,eax
c000fe7e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	c1 e0 02             	shl    eax,0x2
c000fe87:	99                   	cdq    
c000fe88:	f7 3d 10 e1 02 c0    	idiv   DWORD PTR ds:0xc002e110
c000fe8e:	39 05 08 e1 02 c0    	cmp    DWORD PTR ds:0xc002e108,eax
c000fe94:	75 13                	jne    c000fea9 <Phys::freePage(unsigned long)+0x54>
c000fe96:	83 ec 08             	sub    esp,0x8
c000fe99:	6a 00                	push   0x0
c000fe9b:	53                   	push   ebx
c000fe9c:	e8 66 ff ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	83 c4 08             	add    esp,0x8
c000fea7:	5b                   	pop    ebx
c000fea8:	c3                   	ret    
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	a3 08 e1 02 c0       	mov    ds:0xc002e108,eax
c000feb1:	50                   	push   eax
c000feb2:	e8 5b 0a 00 00       	call   c0010912 <VgaText::updateRAMUsageDisplay(int)>
c000feb7:	83 c4 10             	add    esp,0x10
c000feba:	eb da                	jmp    c000fe96 <Phys::freePage(unsigned long)+0x41>
c000febc:	68 00 10 00 00       	push   0x1000
c000fec1:	53                   	push   ebx
c000fec2:	e8 f8 fe ff ff       	call   c000fdbf <Phys::freeDMA(unsigned long, unsigned long)>
c000fec7:	59                   	pop    ecx
c000fec8:	5b                   	pop    ebx
c000fec9:	83 c4 08             	add    esp,0x8
c000fecc:	5b                   	pop    ebx
c000fecd:	c3                   	ret    
c000fece:	c7 44 24 10 06 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f06
c000fed6:	83 c4 08             	add    esp,0x8
c000fed9:	5b                   	pop    ebx
c000feda:	e9 58 a3 00 00       	jmp    c001a237 <Krnl::panic(char const*)>

c000fedf <Phys::allocatePage()>:
c000fedf:	56                   	push   esi
c000fee0:	53                   	push   ebx
c000fee1:	51                   	push   ecx
c000fee2:	8b 35 00 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e100
c000fee8:	89 f3                	mov    ebx,esi
c000feea:	eb 0a                	jmp    c000fef6 <Phys::allocatePage()+0x17>
c000feec:	89 1d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ebx
c000fef2:	39 de                	cmp    esi,ebx
c000fef4:	74 24                	je     c000ff1a <Phys::allocatePage()+0x3b>
c000fef6:	53                   	push   ebx
c000fef7:	e8 3d ff ff ff       	call   c000fe39 <Phys::getPageState(unsigned long)>
c000fefc:	5a                   	pop    edx
c000fefd:	84 c0                	test   al,al
c000feff:	74 5a                	je     c000ff5b <Phys::allocatePage()+0x7c>
c000ff01:	43                   	inc    ebx
c000ff02:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff08:	75 e2                	jne    c000feec <Phys::allocatePage()+0xd>
c000ff0a:	31 db                	xor    ebx,ebx
c000ff0c:	c7 05 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e100,0x0
c000ff16:	39 de                	cmp    esi,ebx
c000ff18:	75 dc                	jne    c000fef6 <Phys::allocatePage()+0x17>
c000ff1a:	83 ec 0c             	sub    esp,0xc
c000ff1d:	68 1c 9f 02 c0       	push   0xc0029f1c
c000ff22:	e8 95 2c 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c000ff27:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff2e:	e8 e9 fd ff ff       	call   c000fd1c <Phys::allocateDMA(unsigned long)>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	85 c0                	test   eax,eax
c000ff38:	75 56                	jne    c000ff90 <Phys::allocatePage()+0xb1>
c000ff3a:	83 ec 0c             	sub    esp,0xc
c000ff3d:	68 2d 9f 02 c0       	push   0xc0029f2d
c000ff42:	e8 f0 a2 00 00       	call   c001a237 <Krnl::panic(char const*)>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	8b 1d 00 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e100
c000ff50:	53                   	push   ebx
c000ff51:	e8 e3 fe ff ff       	call   c000fe39 <Phys::getPageState(unsigned long)>
c000ff56:	5a                   	pop    edx
c000ff57:	84 c0                	test   al,al
c000ff59:	75 a6                	jne    c000ff01 <Phys::allocatePage()+0x22>
c000ff5b:	6a 01                	push   0x1
c000ff5d:	53                   	push   ebx
c000ff5e:	e8 a4 fe ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c000ff63:	a1 0c e1 02 c0       	mov    eax,ds:0xc002e10c
c000ff68:	59                   	pop    ecx
c000ff69:	40                   	inc    eax
c000ff6a:	5b                   	pop    ebx
c000ff6b:	a3 0c e1 02 c0       	mov    ds:0xc002e10c,eax
c000ff70:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff73:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff76:	c1 e0 02             	shl    eax,0x2
c000ff79:	99                   	cdq    
c000ff7a:	f7 3d 10 e1 02 c0    	idiv   DWORD PTR ds:0xc002e110
c000ff80:	39 05 08 e1 02 c0    	cmp    DWORD PTR ds:0xc002e108,eax
c000ff86:	75 0c                	jne    c000ff94 <Phys::allocatePage()+0xb5>
c000ff88:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c000ff8d:	c1 e0 0c             	shl    eax,0xc
c000ff90:	5a                   	pop    edx
c000ff91:	5b                   	pop    ebx
c000ff92:	5e                   	pop    esi
c000ff93:	c3                   	ret    
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	a3 08 e1 02 c0       	mov    ds:0xc002e108,eax
c000ff9c:	50                   	push   eax
c000ff9d:	e8 70 09 00 00       	call   c0010912 <VgaText::updateRAMUsageDisplay(int)>
c000ffa2:	83 c4 10             	add    esp,0x10
c000ffa5:	eb e1                	jmp    c000ff88 <Phys::allocatePage()+0xa9>

c000ffa7 <Phys::allocateContiguousPages(int)>:
c000ffa7:	57                   	push   edi
c000ffa8:	56                   	push   esi
c000ffa9:	53                   	push   ebx
c000ffaa:	31 db                	xor    ebx,ebx
c000ffac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffb0:	e8 a7 da 00 00       	call   c001da5c <lockScheduler()>
c000ffb5:	85 db                	test   ebx,ebx
c000ffb7:	75 11                	jne    c000ffca <Phys::allocateContiguousPages(int)+0x23>
c000ffb9:	e8 21 ff ff ff       	call   c000fedf <Phys::allocatePage()>
c000ffbe:	83 ff 01             	cmp    edi,0x1
c000ffc1:	89 c6                	mov    esi,eax
c000ffc3:	74 21                	je     c000ffe6 <Phys::allocateContiguousPages(int)+0x3f>
c000ffc5:	bb 01 00 00 00       	mov    ebx,0x1
c000ffca:	e8 10 ff ff ff       	call   c000fedf <Phys::allocatePage()>
c000ffcf:	89 da                	mov    edx,ebx
c000ffd1:	c1 e2 0c             	shl    edx,0xc
c000ffd4:	01 f2                	add    edx,esi
c000ffd6:	39 c2                	cmp    edx,eax
c000ffd8:	74 17                	je     c000fff1 <Phys::allocateContiguousPages(int)+0x4a>
c000ffda:	bb 01 00 00 00       	mov    ebx,0x1
c000ffdf:	89 c6                	mov    esi,eax
c000ffe1:	83 ff 01             	cmp    edi,0x1
c000ffe4:	75 e4                	jne    c000ffca <Phys::allocateContiguousPages(int)+0x23>
c000ffe6:	e8 73 da 00 00       	call   c001da5e <unlockScheduler()>
c000ffeb:	89 f0                	mov    eax,esi
c000ffed:	5b                   	pop    ebx
c000ffee:	5e                   	pop    esi
c000ffef:	5f                   	pop    edi
c000fff0:	c3                   	ret    
c000fff1:	43                   	inc    ebx
c000fff2:	39 fb                	cmp    ebx,edi
c000fff4:	75 bf                	jne    c000ffb5 <Phys::allocateContiguousPages(int)+0xe>
c000fff6:	e8 63 da 00 00       	call   c001da5e <unlockScheduler()>
c000fffb:	89 f0                	mov    eax,esi
c000fffd:	5b                   	pop    ebx
c000fffe:	5e                   	pop    esi
c000ffff:	5f                   	pop    edi
c0010000:	c3                   	ret    

c0010001 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010001:	56                   	push   esi
c0010002:	53                   	push   ebx
c0010003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010007:	39 1d 04 e1 02 c0    	cmp    DWORD PTR ds:0xc002e104,ebx
c001000d:	73 06                	jae    c0010015 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001000f:	89 1d 04 e1 02 c0    	mov    DWORD PTR ds:0xc002e104,ebx
c0010015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010019:	c1 eb 0c             	shr    ebx,0xc
c001001c:	c1 e8 0c             	shr    eax,0xc
c001001f:	39 d8                	cmp    eax,ebx
c0010021:	73 13                	jae    c0010036 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010023:	6a 00                	push   0x0
c0010025:	8d 70 01             	lea    esi,[eax+0x1]
c0010028:	50                   	push   eax
c0010029:	e8 d9 fd ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c001002e:	5a                   	pop    edx
c001002f:	89 f0                	mov    eax,esi
c0010031:	59                   	pop    ecx
c0010032:	39 f3                	cmp    ebx,esi
c0010034:	75 ed                	jne    c0010023 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010036:	5b                   	pop    ebx
c0010037:	5e                   	pop    esi
c0010038:	c3                   	ret    

c0010039 <Phys::physicalMemorySetup(unsigned int)>:
c0010039:	55                   	push   ebp
c001003a:	57                   	push   edi
c001003b:	56                   	push   esi
c001003c:	53                   	push   ebx
c001003d:	31 db                	xor    ebx,ebx
c001003f:	83 ec 40             	sub    esp,0x40
c0010042:	6a 30                	push   0x30
c0010044:	6a 00                	push   0x0
c0010046:	68 20 e1 02 c0       	push   0xc002e120
c001004b:	e8 28 07 ff ff       	call   c0000778 <memset>
c0010050:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010054:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010059:	05 00 10 00 00       	add    eax,0x1000
c001005e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	83 ec 08             	sub    esp,0x8
c0010068:	6a 01                	push   0x1
c001006a:	53                   	push   ebx
c001006b:	43                   	inc    ebx
c001006c:	e8 96 fd ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c0010071:	83 c4 10             	add    esp,0x10
c0010074:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001007a:	75 e9                	jne    c0010065 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001007c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010083:	66 85 c0             	test   ax,ax
c0010086:	0f 84 8e 01 00 00    	je     c001021a <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001008c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010090:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010098:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001009c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100ad:	eb 15                	jmp    c00100c4 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100af:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b3:	83 c3 18             	add    ebx,0x18
c00100b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ba:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100be:	0f 84 66 01 00 00    	je     c001022a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100d7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100da:	01 f0                	add    eax,esi
c00100dc:	55                   	push   ebp
c00100dd:	11 fa                	adc    edx,edi
c00100df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100eb:	56                   	push   esi
c00100ec:	68 68 9f 02 c0       	push   0xc0029f68
c00100f1:	e8 c6 2a 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00100f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fa:	83 c4 10             	add    esp,0x10
c00100fd:	09 f8                	or     eax,edi
c00100ff:	0f 85 25 01 00 00    	jne    c001022a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010105:	4d                   	dec    ebp
c0010106:	75 a7                	jne    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010108:	ba 00 00 08 00       	mov    edx,0x80000
c001010d:	89 c1                	mov    ecx,eax
c001010f:	39 f2                	cmp    edx,esi
c0010111:	19 f9                	sbb    ecx,edi
c0010113:	0f 82 a7 00 00 00    	jb     c00101c0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010119:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001011d:	89 c1                	mov    ecx,eax
c001011f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010123:	0f 83 97 00 00 00    	jae    c00101c0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010129:	ba 00 00 0a 00       	mov    edx,0xa0000
c001012e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010132:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010136:	39 fa                	cmp    edx,edi
c0010138:	19 e8                	sbb    eax,ebp
c001013a:	0f 82 14 01 00 00    	jb     c0010254 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010140:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010144:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010148:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001014e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010153:	83 d5 ff             	adc    ebp,0xffffffff
c0010156:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001015a:	31 c0                	xor    eax,eax
c001015c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010160:	39 fa                	cmp    edx,edi
c0010162:	89 c1                	mov    ecx,eax
c0010164:	19 e9                	sbb    ecx,ebp
c0010166:	0f 83 43 ff ff ff    	jae    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c001016c:	be 00 00 08 00       	mov    esi,0x80000
c0010171:	50                   	push   eax
c0010172:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010176:	57                   	push   edi
c0010177:	56                   	push   esi
c0010178:	68 8c 9f 02 c0       	push   0xc0029f8c
c001017d:	e8 3a 2a 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0010182:	5a                   	pop    edx
c0010183:	59                   	pop    ecx
c0010184:	57                   	push   edi
c0010185:	56                   	push   esi
c0010186:	e8 76 fe ff ff       	call   c0010001 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001018b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001018f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010193:	83 c4 0c             	add    esp,0xc
c0010196:	0f ac d0 0c          	shrd   eax,edx,0xc
c001019a:	03 05 10 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e110
c00101a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101a7:	a3 10 e1 02 c0       	mov    ds:0xc002e110,eax
c00101ac:	52                   	push   edx
c00101ad:	50                   	push   eax
c00101ae:	68 49 9f 02 c0       	push   0xc0029f49
c00101b3:	e8 04 2a 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00101b8:	83 c4 10             	add    esp,0x10
c00101bb:	e9 ef fe ff ff       	jmp    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101cc:	39 ea                	cmp    edx,ebp
c00101ce:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d2:	0f 82 d7 fe ff ff    	jb     c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101dd:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101e1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e5:	0f 83 c4 fe ff ff    	jae    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101eb:	39 ee                	cmp    esi,ebp
c00101ed:	89 f8                	mov    eax,edi
c00101ef:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f3:	0f 83 78 ff ff ff    	jae    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010201:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010205:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010209:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001020d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010215:	e9 57 ff ff ff       	jmp    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021a:	83 ec 0c             	sub    esp,0xc
c001021d:	68 3b 9f 02 c0       	push   0xc0029f3b
c0010222:	e8 10 a0 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0010227:	83 c4 10             	add    esp,0x10
c001022a:	bb 40 01 00 00       	mov    ebx,0x140
c001022f:	83 ec 08             	sub    esp,0x8
c0010232:	6a 00                	push   0x0
c0010234:	53                   	push   ebx
c0010235:	43                   	inc    ebx
c0010236:	e8 cc fb ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c001023b:	ff 05 10 e1 02 c0    	inc    DWORD PTR ds:0xc002e110
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001024a:	75 e3                	jne    c001022f <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001024c:	83 c4 3c             	add    esp,0x3c
c001024f:	5b                   	pop    ebx
c0010250:	5e                   	pop    esi
c0010251:	5f                   	pop    edi
c0010252:	5d                   	pop    ebp
c0010253:	c3                   	ret    
c0010254:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001025c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010264:	e9 d7 fe ff ff       	jmp    c0010140 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010269:	90                   	nop

c001026a <Pipe::isAtty()>:
c001026a:	31 c0                	xor    eax,eax
c001026c:	c3                   	ret    
c001026d:	90                   	nop

c001026e <Pipe::~Pipe()>:
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	ba f8 9f 02 c0       	mov    edx,0xc0029ff8
c0010276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027a:	89 10                	mov    DWORD PTR [eax],edx
c001027c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010280:	83 ec 0c             	sub    esp,0xc
c0010283:	50                   	push   eax
c0010284:	e8 37 16 00 00       	call   c00118c0 <UnixFile::~UnixFile()>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	90                   	nop
c001028d:	83 c4 0c             	add    esp,0xc
c0010290:	c3                   	ret    
c0010291:	90                   	nop

c0010292 <Pipe::~Pipe()>:
c0010292:	83 ec 0c             	sub    esp,0xc
c0010295:	83 ec 0c             	sub    esp,0xc
c0010298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029c:	e8 cd ff ff ff       	call   c001026e <Pipe::~Pipe()>
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	83 ec 08             	sub    esp,0x8
c00102a7:	6a 20                	push   0x20
c00102a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ad:	e8 2a 28 00 00       	call   c0012adc <operator delete(void*, unsigned long)>
c00102b2:	83 c4 10             	add    esp,0x10
c00102b5:	83 c4 0c             	add    esp,0xc
c00102b8:	c3                   	ret    
c00102b9:	90                   	nop

c00102ba <Pipe::read(unsigned long long, void*, int*)>:
c00102ba:	55                   	push   ebp
c00102bb:	57                   	push   edi
c00102bc:	56                   	push   esi
c00102bd:	53                   	push   ebx
c00102be:	83 ec 1c             	sub    esp,0x1c
c00102c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102d0:	89 c8                	mov    eax,ecx
c00102d2:	99                   	cdq    
c00102d3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102d7:	74 19                	je     c00102f2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d9:	39 f9                	cmp    ecx,edi
c00102db:	89 d1                	mov    ecx,edx
c00102dd:	19 f1                	sbb    ecx,esi
c00102df:	73 11                	jae    c00102f2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102e1:	e8 76 d7 00 00       	call   c001da5c <lockScheduler()>
c00102e6:	e8 ad da 00 00       	call   c001dd98 <schedule()>
c00102eb:	e8 6e d7 00 00       	call   c001da5e <unlockScheduler()>
c00102f0:	eb db                	jmp    c00102cd <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f2:	39 f8                	cmp    eax,edi
c00102f4:	89 d1                	mov    ecx,edx
c00102f6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102fa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102fe:	19 f1                	sbb    ecx,esi
c0010300:	73 08                	jae    c001030a <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010306:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001030a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001030d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010310:	29 c6                	sub    esi,eax
c0010312:	89 f1                	mov    ecx,esi
c0010314:	c1 f9 1f             	sar    ecx,0x1f
c0010317:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001031b:	89 ca                	mov    edx,ecx
c001031d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010321:	19 d1                	sbb    ecx,edx
c0010323:	73 04                	jae    c0010329 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010325:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010329:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001032d:	89 fd                	mov    ebp,edi
c001032f:	29 f5                	sub    ebp,esi
c0010331:	85 f6                	test   esi,esi
c0010333:	74 12                	je     c0010347 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010335:	52                   	push   edx
c0010336:	56                   	push   esi
c0010337:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001033a:	50                   	push   eax
c001033b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001033f:	e8 00 04 ff ff       	call   c0000744 <memcpy>
c0010344:	83 c4 10             	add    esp,0x10
c0010347:	85 ed                	test   ebp,ebp
c0010349:	74 12                	je     c001035d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001034b:	50                   	push   eax
c001034c:	55                   	push   ebp
c001034d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010350:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010354:	56                   	push   esi
c0010355:	e8 ea 03 ff ff       	call   c0000744 <memcpy>
c001035a:	83 c4 10             	add    esp,0x10
c001035d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010360:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010363:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010366:	99                   	cdq    
c0010367:	89 f7                	mov    edi,esi
c0010369:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001036d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010371:	c1 ff 1f             	sar    edi,0x1f
c0010374:	57                   	push   edi
c0010375:	56                   	push   esi
c0010376:	52                   	push   edx
c0010377:	50                   	push   eax
c0010378:	e8 bf 63 01 00       	call   c002673c <__umoddi3>
c001037d:	83 c4 10             	add    esp,0x10
c0010380:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010383:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010388:	75 10                	jne    c001039a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001038a:	83 ec 0c             	sub    esp,0xc
c001038d:	68 b5 9f 02 c0       	push   0xc0029fb5
c0010392:	e8 a0 9e 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001039e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a2:	89 10                	mov    DWORD PTR [eax],edx
c00103a4:	83 c4 1c             	add    esp,0x1c
c00103a7:	31 c0                	xor    eax,eax
c00103a9:	5b                   	pop    ebx
c00103aa:	5e                   	pop    esi
c00103ab:	5f                   	pop    edi
c00103ac:	5d                   	pop    ebp
c00103ad:	c3                   	ret    

c00103ae <Pipe::write(unsigned long long, void*, int*)>:
c00103ae:	55                   	push   ebp
c00103af:	57                   	push   edi
c00103b0:	56                   	push   esi
c00103b1:	53                   	push   ebx
c00103b2:	83 ec 1c             	sub    esp,0x1c
c00103b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103c7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ce:	89 de                	mov    esi,ebx
c00103d0:	89 df                	mov    edi,ebx
c00103d2:	c1 ff 1f             	sar    edi,0x1f
c00103d5:	01 c6                	add    esi,eax
c00103d7:	89 c8                	mov    eax,ecx
c00103d9:	11 d7                	adc    edi,edx
c00103db:	99                   	cdq    
c00103dc:	39 f1                	cmp    ecx,esi
c00103de:	89 d0                	mov    eax,edx
c00103e0:	19 f8                	sbb    eax,edi
c00103e2:	b8 01 00 00 00       	mov    eax,0x1
c00103e7:	0f 82 80 00 00 00    	jb     c001046d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103f0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f3:	01 d8                	add    eax,ebx
c00103f5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103f9:	99                   	cdq    
c00103fa:	f7 f9                	idiv   ecx
c00103fc:	29 d1                	sub    ecx,edx
c00103fe:	89 d7                	mov    edi,edx
c0010400:	89 c8                	mov    eax,ecx
c0010402:	99                   	cdq    
c0010403:	39 ce                	cmp    esi,ecx
c0010405:	19 d3                	sbb    ebx,edx
c0010407:	bb 00 00 00 00       	mov    ebx,0x0
c001040c:	72 04                	jb     c0010412 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001040e:	89 f3                	mov    ebx,esi
c0010410:	29 cb                	sub    ebx,ecx
c0010412:	89 f1                	mov    ecx,esi
c0010414:	29 d9                	sub    ecx,ebx
c0010416:	74 1a                	je     c0010432 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010418:	52                   	push   edx
c0010419:	51                   	push   ecx
c001041a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001041e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010422:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010425:	57                   	push   edi
c0010426:	e8 19 03 ff ff       	call   c0000744 <memcpy>
c001042b:	83 c4 10             	add    esp,0x10
c001042e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010432:	85 db                	test   ebx,ebx
c0010434:	74 12                	je     c0010448 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010436:	50                   	push   eax
c0010437:	53                   	push   ebx
c0010438:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001043c:	51                   	push   ecx
c001043d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010440:	e8 ff 02 ff ff       	call   c0000744 <memcpy>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001044b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010450:	75 10                	jne    c0010462 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010452:	83 ec 0c             	sub    esp,0xc
c0010455:	68 d1 9f 02 c0       	push   0xc0029fd1
c001045a:	e8 d8 9d 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010466:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010469:	89 38                	mov    DWORD PTR [eax],edi
c001046b:	31 c0                	xor    eax,eax
c001046d:	83 c4 1c             	add    esp,0x1c
c0010470:	5b                   	pop    ebx
c0010471:	5e                   	pop    esi
c0010472:	5f                   	pop    edi
c0010473:	5d                   	pop    ebp
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <Pipe::Pipe(int)>:
c0010476:	83 ec 0c             	sub    esp,0xc
c0010479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047d:	83 ec 08             	sub    esp,0x8
c0010480:	6a 00                	push   0x0
c0010482:	50                   	push   eax
c0010483:	e8 56 12 00 00       	call   c00116de <UnixFile::UnixFile(int)>
c0010488:	83 c4 10             	add    esp,0x10
c001048b:	ba f8 9f 02 c0       	mov    edx,0xc0029ff8
c0010490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010494:	89 10                	mov    DWORD PTR [eax],edx
c0010496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001049e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	50                   	push   eax
c00104bf:	e8 7c f3 ff ff       	call   c000f840 <malloc>
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	89 c2                	mov    edx,eax
c00104c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d8:	90                   	nop
c00104d9:	83 c4 0c             	add    esp,0xc
c00104dc:	c3                   	ret    
c00104dd:	90                   	nop

c00104de <VgaText::isAtty()>:
c00104de:	b0 01                	mov    al,0x1
c00104e0:	c3                   	ret    
c00104e1:	90                   	nop

c00104e2 <VgaText::~VgaText()>:
c00104e2:	83 ec 0c             	sub    esp,0xc
c00104e5:	ba b4 a0 02 c0       	mov    edx,0xc002a0b4
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	89 10                	mov    DWORD PTR [eax],edx
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	50                   	push   eax
c00104f8:	e8 c3 13 00 00       	call   c00118c0 <UnixFile::~UnixFile()>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	90                   	nop
c0010501:	83 c4 0c             	add    esp,0xc
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <VgaText::~VgaText()>:
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	83 ec 0c             	sub    esp,0xc
c001050c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010510:	e8 cd ff ff ff       	call   c00104e2 <VgaText::~VgaText()>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	83 ec 08             	sub    esp,0x8
c001051b:	68 60 12 00 00       	push   0x1260
c0010520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010524:	e8 b3 25 00 00       	call   c0012adc <operator delete(void*, unsigned long)>
c0010529:	83 c4 10             	add    esp,0x10
c001052c:	83 c4 0c             	add    esp,0xc
c001052f:	c3                   	ret    

c0010530 <VgaText::read(unsigned long long, void*, int*)>:
c0010530:	83 ec 10             	sub    esp,0x10
c0010533:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001053b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053f:	e8 f4 59 00 00       	call   c0015f38 <readKeyboard(VgaText*, char*, unsigned long)>
c0010544:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010548:	89 02                	mov    DWORD PTR [edx],eax
c001054a:	31 c0                	xor    eax,eax
c001054c:	83 c4 1c             	add    esp,0x1c
c001054f:	c3                   	ret    

c0010550 <setTerminalScrollLock(bool)>:
c0010550:	c3                   	ret    

c0010551 <addToTerminalCycle(VgaText*)>:
c0010551:	8b 15 a0 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1a0
c0010557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055b:	85 d2                	test   edx,edx
c001055d:	75 0c                	jne    c001056b <addToTerminalCycle(VgaText*)+0x1a>
c001055f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010565:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c001056a:	c3                   	ret    
c001056b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010571:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010577:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001057d:	c3                   	ret    

c001057e <installVgaTextImplementation()>:
c001057e:	83 ec 10             	sub    esp,0x10
c0010581:	6a 20                	push   0x20
c0010583:	6a 00                	push   0x0
c0010585:	68 80 e1 02 c0       	push   0xc002e180
c001058a:	e8 e9 01 ff ff       	call   c0000778 <memset>
c001058f:	83 c4 1c             	add    esp,0x1c
c0010592:	c3                   	ret    

c0010593 <scrollTerminalScrollLock(int)>:
c0010593:	c3                   	ret    

c0010594 <VgaText::load()>:
c0010594:	53                   	push   ebx
c0010595:	31 c0                	xor    eax,eax
c0010597:	83 ec 58             	sub    esp,0x58
c001059a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001059e:	89 e2                	mov    edx,esp
c00105a0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a4:	40                   	inc    eax
c00105a5:	83 f8 50             	cmp    eax,0x50
c00105a8:	75 f6                	jne    c00105a0 <VgaText::load()+0xc>
c00105aa:	31 c0                	xor    eax,eax
c00105ac:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b3:	84 c9                	test   cl,cl
c00105b5:	74 06                	je     c00105bd <VgaText::load()+0x29>
c00105b7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105ba:	40                   	inc    eax
c00105bb:	eb ef                	jmp    c00105ac <VgaText::load()+0x18>
c00105bd:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c3:	85 c0                	test   eax,eax
c00105c5:	74 09                	je     c00105d0 <VgaText::load()+0x3c>
c00105c7:	51                   	push   ecx
c00105c8:	51                   	push   ecx
c00105c9:	52                   	push   edx
c00105ca:	53                   	push   ebx
c00105cb:	ff d0                	call   eax
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105d6:	85 c0                	test   eax,eax
c00105d8:	74 09                	je     c00105e3 <VgaText::load()+0x4f>
c00105da:	83 ec 0c             	sub    esp,0xc
c00105dd:	53                   	push   ebx
c00105de:	ff d0                	call   eax
c00105e0:	83 c4 10             	add    esp,0x10
c00105e3:	83 c4 58             	add    esp,0x58
c00105e6:	5b                   	pop    ebx
c00105e7:	c3                   	ret    

c00105e8 <VgaText::updateCursor()>:
c00105e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ec:	39 05 a4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1a4,eax
c00105f2:	75 0c                	jne    c0010600 <VgaText::updateCursor()+0x18>
c00105f4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105fa:	85 c0                	test   eax,eax
c00105fc:	74 02                	je     c0010600 <VgaText::updateCursor()+0x18>
c00105fe:	ff e0                	jmp    eax
c0010600:	c3                   	ret    
c0010601:	90                   	nop

c0010602 <VgaText::showCursor(bool)>:
c0010602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010606:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001060a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010610:	c3                   	ret    
c0010611:	90                   	nop

c0010612 <VgaText::disableBlink(bool)>:
c0010612:	56                   	push   esi
c0010613:	53                   	push   ebx
c0010614:	51                   	push   ecx
c0010615:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010619:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001061d:	39 1d a4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1a4,ebx
c0010623:	75 18                	jne    c001063d <VgaText::disableBlink(bool)+0x2b>
c0010625:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001062b:	85 c0                	test   eax,eax
c001062d:	74 0e                	je     c001063d <VgaText::disableBlink(bool)+0x2b>
c001062f:	89 f1                	mov    ecx,esi
c0010631:	52                   	push   edx
c0010632:	52                   	push   edx
c0010633:	0f b6 d1             	movzx  edx,cl
c0010636:	52                   	push   edx
c0010637:	53                   	push   ebx
c0010638:	ff d0                	call   eax
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	89 f0                	mov    eax,esi
c001063f:	83 f0 01             	xor    eax,0x1
c0010642:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010648:	58                   	pop    eax
c0010649:	5b                   	pop    ebx
c001064a:	5e                   	pop    esi
c001064b:	c3                   	ret    

c001064c <VgaText::doANSI_SGR(int)>:
c001064c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010654:	85 d2                	test   edx,edx
c0010656:	75 14                	jne    c001066c <VgaText::doANSI_SGR(int)+0x20>
c0010658:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001065e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010664:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001066a:	eb 65                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x85>
c001066c:	83 fa 07             	cmp    edx,0x7
c001066f:	75 14                	jne    c0010685 <VgaText::doANSI_SGR(int)+0x39>
c0010671:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010677:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001067d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010683:	eb 4c                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x85>
c0010685:	83 fa 1b             	cmp    edx,0x1b
c0010688:	74 ce                	je     c0010658 <VgaText::doANSI_SGR(int)+0xc>
c001068a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001068d:	83 f9 07             	cmp    ecx,0x7
c0010690:	77 09                	ja     c001069b <VgaText::doANSI_SGR(int)+0x4f>
c0010692:	8b 14 8d 20 d0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0010699:	eb 20                	jmp    c00106bb <VgaText::doANSI_SGR(int)+0x6f>
c001069b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001069e:	83 f9 07             	cmp    ecx,0x7
c00106a1:	77 09                	ja     c00106ac <VgaText::doANSI_SGR(int)+0x60>
c00106a3:	8b 14 8d 20 d0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2fe0]
c00106aa:	eb 25                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x85>
c00106ac:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106af:	83 f9 07             	cmp    ecx,0x7
c00106b2:	77 0e                	ja     c00106c2 <VgaText::doANSI_SGR(int)+0x76>
c00106b4:	8b 14 95 d8 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3128]
c00106bb:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c1:	c3                   	ret    
c00106c2:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c5:	83 f9 07             	cmp    ecx,0x7
c00106c8:	77 0d                	ja     c00106d7 <VgaText::doANSI_SGR(int)+0x8b>
c00106ca:	8b 14 95 b0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3150]
c00106d1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106d7:	c3                   	ret    

c00106d8 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106e6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106ec:	c3                   	ret    
c00106ed:	90                   	nop

c00106ee <VgaText::setDefaultFgColour(VgaColour)>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00106fc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010704:	53                   	push   ebx
c0010705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010709:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010711:	51                   	push   ecx
c0010712:	e8 c1 ff ff ff       	call   c00106d8 <VgaText::setDefaultBgColour(VgaColour)>
c0010717:	58                   	pop    eax
c0010718:	5a                   	pop    edx
c0010719:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010721:	5b                   	pop    ebx
c0010722:	eb ca                	jmp    c00106ee <VgaText::setDefaultFgColour(VgaColour)>

c0010724 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010724:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010728:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072d:	83 e0 0f             	and    eax,0xf
c0010730:	c1 e2 04             	shl    edx,0x4
c0010733:	09 d0                	or     eax,edx
c0010735:	c3                   	ret    

c0010736 <VgaText::scrollScreen()>:
c0010736:	57                   	push   edi
c0010737:	56                   	push   esi
c0010738:	be 01 00 00 00       	mov    esi,0x1
c001073d:	53                   	push   ebx
c001073e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010742:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010748:	31 ff                	xor    edi,edi
c001074a:	01 d9                	add    ecx,ebx
c001074c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001074f:	83 fe 17             	cmp    esi,0x17
c0010752:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010758:	75 28                	jne    c0010782 <VgaText::scrollScreen()+0x4c>
c001075a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010760:	74 1c                	je     c001077e <VgaText::scrollScreen()+0x48>
c0010762:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010769:	50                   	push   eax
c001076a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010771:	50                   	push   eax
c0010772:	e8 ad ff ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010777:	5a                   	pop    edx
c0010778:	5a                   	pop    edx
c0010779:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001077c:	eb 04                	jmp    c0010782 <VgaText::scrollScreen()+0x4c>
c001077e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010782:	47                   	inc    edi
c0010783:	41                   	inc    ecx
c0010784:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001078a:	75 c0                	jne    c001074c <VgaText::scrollScreen()+0x16>
c001078c:	46                   	inc    esi
c001078d:	83 fe 18             	cmp    esi,0x18
c0010790:	75 b0                	jne    c0010742 <VgaText::scrollScreen()+0xc>
c0010792:	39 1d a4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1a4,ebx
c0010798:	75 24                	jne    c00107be <VgaText::scrollScreen()+0x88>
c001079a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107a1:	74 08                	je     c00107ab <VgaText::scrollScreen()+0x75>
c00107a3:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107a9:	eb 13                	jmp    c00107be <VgaText::scrollScreen()+0x88>
c00107ab:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107b1:	85 c0                	test   eax,eax
c00107b3:	74 09                	je     c00107be <VgaText::scrollScreen()+0x88>
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	53                   	push   ebx
c00107b9:	ff d0                	call   eax
c00107bb:	83 c4 10             	add    esp,0x10
c00107be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c2:	5b                   	pop    ebx
c00107c3:	5e                   	pop    esi
c00107c4:	5f                   	pop    edi
c00107c5:	e9 1e fe ff ff       	jmp    c00105e8 <VgaText::updateCursor()>

c00107ca <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cf:	c1 e0 08             	shl    eax,0x8
c00107d2:	89 c2                	mov    edx,eax
c00107d4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d9:	09 d0                	or     eax,edx
c00107db:	c3                   	ret    

c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107dc:	53                   	push   ebx
c00107dd:	83 ec 08             	sub    esp,0x8
c00107e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e9:	50                   	push   eax
c00107ea:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ef:	50                   	push   eax
c00107f0:	e8 2f ff ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	0f b6 c0             	movzx  eax,al
c00107f9:	5b                   	pop    ebx
c00107fa:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107ff:	50                   	push   eax
c0010800:	53                   	push   ebx
c0010801:	e8 c4 ff ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010806:	5a                   	pop    edx
c0010807:	5a                   	pop    edx
c0010808:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010812:	0f b7 d2             	movzx  edx,dx
c0010815:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001081a:	39 0d a4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1a4,ecx
c0010820:	75 14                	jne    c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010822:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010828:	85 c0                	test   eax,eax
c001082a:	74 0a                	je     c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001082c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010830:	83 c4 08             	add    esp,0x8
c0010833:	5b                   	pop    ebx
c0010834:	ff e0                	jmp    eax
c0010836:	83 c4 08             	add    esp,0x8
c0010839:	5b                   	pop    ebx
c001083a:	c3                   	ret    
c001083b:	90                   	nop

c001083c <VgaText::getCursorX()>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010846:	c3                   	ret    
c0010847:	90                   	nop

c0010848 <VgaText::getCursorY()>:
c0010848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010852:	c3                   	ret    
c0010853:	90                   	nop

c0010854 <VgaText::setCursor(int, int)>:
c0010854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010858:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010862:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010866:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001086c:	e9 77 fd ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c0010871:	90                   	nop

c0010872 <VgaText::setCursorX(int)>:
c0010872:	83 ec 10             	sub    esp,0x10
c0010875:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010879:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001087f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010883:	50                   	push   eax
c0010884:	e8 cb ff ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0010889:	83 c4 1c             	add    esp,0x1c
c001088c:	c3                   	ret    
c001088d:	90                   	nop

c001088e <VgaText::setCursorY(int)>:
c001088e:	83 ec 10             	sub    esp,0x10
c0010891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010895:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010899:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001089f:	50                   	push   eax
c00108a0:	e8 af ff ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c00108a5:	83 c4 1c             	add    esp,0x1c
c00108a8:	c3                   	ret    
c00108a9:	90                   	nop

c00108aa <VgaText::incrementCursor(bool)>:
c00108aa:	56                   	push   esi
c00108ab:	53                   	push   ebx
c00108ac:	51                   	push   ecx
c00108ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b5:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108bb:	40                   	inc    eax
c00108bc:	83 f8 50             	cmp    eax,0x50
c00108bf:	74 08                	je     c00108c9 <VgaText::incrementCursor(bool)+0x1f>
c00108c1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108c7:	eb 33                	jmp    c00108fc <VgaText::incrementCursor(bool)+0x52>
c00108c9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108cf:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108d9:	8d 50 01             	lea    edx,[eax+0x1]
c00108dc:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108e8:	75 12                	jne    c00108fc <VgaText::incrementCursor(bool)+0x52>
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f3:	53                   	push   ebx
c00108f4:	e8 3d fe ff ff       	call   c0010736 <VgaText::scrollScreen()>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	89 f0                	mov    eax,esi
c00108fe:	84 c0                	test   al,al
c0010900:	74 0c                	je     c001090e <VgaText::incrementCursor(bool)+0x64>
c0010902:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010906:	5a                   	pop    edx
c0010907:	5b                   	pop    ebx
c0010908:	5e                   	pop    esi
c0010909:	e9 da fc ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c001090e:	58                   	pop    eax
c001090f:	5b                   	pop    ebx
c0010910:	5e                   	pop    esi
c0010911:	c3                   	ret    

c0010912 <VgaText::updateRAMUsageDisplay(int)>:
c0010912:	56                   	push   esi
c0010913:	8b 35 00 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d000
c0010919:	53                   	push   ebx
c001091a:	bb 0a 00 00 00       	mov    ebx,0xa
c001091f:	6a 0f                	push   0xf
c0010921:	6a 00                	push   0x0
c0010923:	e8 fc fd ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010928:	5a                   	pop    edx
c0010929:	59                   	pop    ecx
c001092a:	0f b6 c8             	movzx  ecx,al
c001092d:	51                   	push   ecx
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	99                   	cdq    
c0010933:	f7 fb                	idiv   ebx
c0010935:	89 d3                	mov    ebx,edx
c0010937:	83 c0 30             	add    eax,0x30
c001093a:	83 c3 30             	add    ebx,0x30
c001093d:	0f be c0             	movsx  eax,al
c0010940:	0f b6 db             	movzx  ebx,bl
c0010943:	50                   	push   eax
c0010944:	e8 81 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010949:	5a                   	pop    edx
c001094a:	5a                   	pop    edx
c001094b:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010952:	51                   	push   ecx
c0010953:	53                   	push   ebx
c0010954:	e8 71 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010959:	5b                   	pop    ebx
c001095a:	5a                   	pop    edx
c001095b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010962:	51                   	push   ecx
c0010963:	6a 25                	push   0x25
c0010965:	e8 60 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c001096a:	59                   	pop    ecx
c001096b:	5b                   	pop    ebx
c001096c:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010973:	5b                   	pop    ebx
c0010974:	5e                   	pop    esi
c0010975:	c3                   	ret    

c0010976 <VgaText::updateDiskUsage()>:
c0010976:	55                   	push   ebp
c0010977:	bd 10 27 00 00       	mov    ebp,0x2710
c001097c:	57                   	push   edi
c001097d:	8b 3d 00 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d000
c0010983:	56                   	push   esi
c0010984:	53                   	push   ebx
c0010985:	6a 0f                	push   0xf
c0010987:	6a 00                	push   0x0
c0010989:	e8 96 fd ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c001098e:	5a                   	pop    edx
c001098f:	0f b6 d8             	movzx  ebx,al
c0010992:	59                   	pop    ecx
c0010993:	8b 35 28 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032428
c0010999:	53                   	push   ebx
c001099a:	b9 0a 00 00 00       	mov    ecx,0xa
c001099f:	89 f0                	mov    eax,esi
c00109a1:	99                   	cdq    
c00109a2:	f7 fd                	idiv   ebp
c00109a4:	99                   	cdq    
c00109a5:	f7 f9                	idiv   ecx
c00109a7:	8d 42 30             	lea    eax,[edx+0x30]
c00109aa:	0f b6 c0             	movzx  eax,al
c00109ad:	50                   	push   eax
c00109ae:	e8 17 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5d                   	pop    ebp
c00109b4:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109b9:	5a                   	pop    edx
c00109ba:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109be:	53                   	push   ebx
c00109bf:	89 f0                	mov    eax,esi
c00109c1:	99                   	cdq    
c00109c2:	f7 fd                	idiv   ebp
c00109c4:	99                   	cdq    
c00109c5:	f7 f9                	idiv   ecx
c00109c7:	8d 42 30             	lea    eax,[edx+0x30]
c00109ca:	0f b6 c0             	movzx  eax,al
c00109cd:	50                   	push   eax
c00109ce:	e8 f7 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109d3:	5d                   	pop    ebp
c00109d4:	bd 64 00 00 00       	mov    ebp,0x64
c00109d9:	5a                   	pop    edx
c00109da:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109e1:	53                   	push   ebx
c00109e2:	89 f0                	mov    eax,esi
c00109e4:	99                   	cdq    
c00109e5:	f7 fd                	idiv   ebp
c00109e7:	99                   	cdq    
c00109e8:	f7 f9                	idiv   ecx
c00109ea:	8d 42 30             	lea    eax,[edx+0x30]
c00109ed:	0f b6 c0             	movzx  eax,al
c00109f0:	50                   	push   eax
c00109f1:	e8 d4 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109f6:	5d                   	pop    ebp
c00109f7:	5a                   	pop    edx
c00109f8:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109ff:	53                   	push   ebx
c0010a00:	89 f0                	mov    eax,esi
c0010a02:	99                   	cdq    
c0010a03:	f7 f9                	idiv   ecx
c0010a05:	89 d6                	mov    esi,edx
c0010a07:	99                   	cdq    
c0010a08:	f7 f9                	idiv   ecx
c0010a0a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0d:	0f b6 c0             	movzx  eax,al
c0010a10:	50                   	push   eax
c0010a11:	e8 b4 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a16:	5d                   	pop    ebp
c0010a17:	5a                   	pop    edx
c0010a18:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a1f:	53                   	push   ebx
c0010a20:	8d 46 30             	lea    eax,[esi+0x30]
c0010a23:	0f b6 f0             	movzx  esi,al
c0010a26:	56                   	push   esi
c0010a27:	e8 9e fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2c:	5e                   	pop    esi
c0010a2d:	8b 35 24 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032424
c0010a33:	5d                   	pop    ebp
c0010a34:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a3b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a40:	53                   	push   ebx
c0010a41:	89 f0                	mov    eax,esi
c0010a43:	99                   	cdq    
c0010a44:	f7 fd                	idiv   ebp
c0010a46:	99                   	cdq    
c0010a47:	f7 f9                	idiv   ecx
c0010a49:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4c:	0f b6 c0             	movzx  eax,al
c0010a4f:	50                   	push   eax
c0010a50:	e8 75 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a55:	5a                   	pop    edx
c0010a56:	5d                   	pop    ebp
c0010a57:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a5e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a63:	53                   	push   ebx
c0010a64:	89 f0                	mov    eax,esi
c0010a66:	99                   	cdq    
c0010a67:	f7 fd                	idiv   ebp
c0010a69:	99                   	cdq    
c0010a6a:	f7 f9                	idiv   ecx
c0010a6c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6f:	0f b6 c0             	movzx  eax,al
c0010a72:	50                   	push   eax
c0010a73:	e8 52 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a78:	5a                   	pop    edx
c0010a79:	5d                   	pop    ebp
c0010a7a:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a81:	bd 64 00 00 00       	mov    ebp,0x64
c0010a86:	53                   	push   ebx
c0010a87:	89 f0                	mov    eax,esi
c0010a89:	99                   	cdq    
c0010a8a:	f7 fd                	idiv   ebp
c0010a8c:	99                   	cdq    
c0010a8d:	f7 f9                	idiv   ecx
c0010a8f:	83 c2 30             	add    edx,0x30
c0010a92:	0f b6 d2             	movzx  edx,dl
c0010a95:	52                   	push   edx
c0010a96:	e8 2f fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9b:	5a                   	pop    edx
c0010a9c:	5d                   	pop    ebp
c0010a9d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa4:	53                   	push   ebx
c0010aa5:	89 f0                	mov    eax,esi
c0010aa7:	99                   	cdq    
c0010aa8:	f7 f9                	idiv   ecx
c0010aaa:	89 d6                	mov    esi,edx
c0010aac:	99                   	cdq    
c0010aad:	f7 f9                	idiv   ecx
c0010aaf:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab2:	0f b6 c0             	movzx  eax,al
c0010ab5:	50                   	push   eax
c0010ab6:	e8 0f fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010abb:	5a                   	pop    edx
c0010abc:	59                   	pop    ecx
c0010abd:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac4:	53                   	push   ebx
c0010ac5:	8d 46 30             	lea    eax,[esi+0x30]
c0010ac8:	0f b6 f0             	movzx  esi,al
c0010acb:	56                   	push   esi
c0010acc:	e8 f9 fc ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad1:	5b                   	pop    ebx
c0010ad2:	5e                   	pop    esi
c0010ad3:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ada:	5b                   	pop    ebx
c0010adb:	5e                   	pop    esi
c0010adc:	5f                   	pop    edi
c0010add:	5d                   	pop    ebp
c0010ade:	c3                   	ret    
c0010adf:	90                   	nop

c0010ae0 <VgaText::updateTitle()>:
c0010ae0:	53                   	push   ebx
c0010ae1:	31 c0                	xor    eax,eax
c0010ae3:	83 ec 58             	sub    esp,0x58
c0010ae6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010aea:	89 e1                	mov    ecx,esp
c0010aec:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010af0:	40                   	inc    eax
c0010af1:	83 f8 50             	cmp    eax,0x50
c0010af4:	75 f6                	jne    c0010aec <VgaText::updateTitle()+0xc>
c0010af6:	31 c0                	xor    eax,eax
c0010af8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010aff:	84 db                	test   bl,bl
c0010b01:	74 06                	je     c0010b09 <VgaText::updateTitle()+0x29>
c0010b03:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b06:	40                   	inc    eax
c0010b07:	eb ef                	jmp    c0010af8 <VgaText::updateTitle()+0x18>
c0010b09:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b0f:	85 c0                	test   eax,eax
c0010b11:	74 09                	je     c0010b1c <VgaText::updateTitle()+0x3c>
c0010b13:	53                   	push   ebx
c0010b14:	53                   	push   ebx
c0010b15:	51                   	push   ecx
c0010b16:	52                   	push   edx
c0010b17:	ff d0                	call   eax
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	e8 55 fe ff ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0010b21:	83 c4 58             	add    esp,0x58
c0010b24:	5b                   	pop    ebx
c0010b25:	c3                   	ret    

c0010b26 <VgaText::setTitleTextColour(VgaColour)>:
c0010b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b2e:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b34:	eb aa                	jmp    c0010ae0 <VgaText::updateTitle()>

c0010b36 <VgaText::setTitleColour(VgaColour)>:
c0010b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b3e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b44:	eb 9a                	jmp    c0010ae0 <VgaText::updateTitle()>

c0010b46 <VgaText::setTitle(char*)>:
c0010b46:	53                   	push   ebx
c0010b47:	83 ec 10             	sub    esp,0x10
c0010b4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b52:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b58:	50                   	push   eax
c0010b59:	e8 d6 fc fe ff       	call   c0000834 <strcpy>
c0010b5e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b62:	83 c4 18             	add    esp,0x18
c0010b65:	5b                   	pop    ebx
c0010b66:	e9 75 ff ff ff       	jmp    c0010ae0 <VgaText::updateTitle()>
c0010b6b:	90                   	nop

c0010b6c <VgaText::decrementCursor(bool)>:
c0010b6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b74:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b7a:	85 c0                	test   eax,eax
c0010b7c:	74 07                	je     c0010b85 <VgaText::decrementCursor(bool)+0x19>
c0010b7e:	48                   	dec    eax
c0010b7f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b85:	84 c9                	test   cl,cl
c0010b87:	74 09                	je     c0010b92 <VgaText::decrementCursor(bool)+0x26>
c0010b89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b8d:	e9 56 fa ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c0010b92:	c3                   	ret    
c0010b93:	90                   	nop

c0010b94 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b94:	53                   	push   ebx
c0010b95:	83 ec 08             	sub    esp,0x8
c0010b98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba8:	3c 07                	cmp    al,0x7
c0010baa:	75 2a                	jne    c0010bd6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bac:	a1 4c e2 02 c0       	mov    eax,ds:0xc002e24c
c0010bb1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb9:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bc1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bcd:	83 c4 08             	add    esp,0x8
c0010bd0:	5b                   	pop    ebx
c0010bd1:	e9 e4 2d 00 00       	jmp    c00139ba <Buzzer::beep(int, int, bool)>
c0010bd6:	3c 0d                	cmp    al,0xd
c0010bd8:	75 0c                	jne    c0010be6 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bda:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be4:	eb 3b                	jmp    c0010c21 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010be6:	3c 0a                	cmp    al,0xa
c0010be8:	75 40                	jne    c0010c2a <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010bea:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bf0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfa:	8d 50 01             	lea    edx,[eax+0x1]
c0010bfd:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c03:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c09:	75 12                	jne    c0010c1d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c14:	53                   	push   ebx
c0010c15:	e8 1c fb ff ff       	call   c0010736 <VgaText::scrollScreen()>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c21:	83 c4 08             	add    esp,0x8
c0010c24:	5b                   	pop    ebx
c0010c25:	e9 be f9 ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c0010c2a:	3c 08                	cmp    al,0x8
c0010c2c:	75 31                	jne    c0010c5f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c2e:	50                   	push   eax
c0010c2f:	50                   	push   eax
c0010c30:	6a 01                	push   0x1
c0010c32:	53                   	push   ebx
c0010c33:	e8 34 ff ff ff       	call   c0010b6c <VgaText::decrementCursor(bool)>
c0010c38:	5a                   	pop    edx
c0010c39:	59                   	pop    ecx
c0010c3a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c40:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c46:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c52:	6a 20                	push   0x20
c0010c54:	53                   	push   ebx
c0010c55:	e8 82 fb ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c5a:	83 c4 28             	add    esp,0x28
c0010c5d:	5b                   	pop    ebx
c0010c5e:	c3                   	ret    
c0010c5f:	83 ec 08             	sub    esp,0x8
c0010c62:	0f be c0             	movsx  eax,al
c0010c65:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c71:	51                   	push   ecx
c0010c72:	52                   	push   edx
c0010c73:	50                   	push   eax
c0010c74:	53                   	push   ebx
c0010c75:	e8 62 fb ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c7e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c86:	83 c4 28             	add    esp,0x28
c0010c89:	5b                   	pop    ebx
c0010c8a:	e9 1b fc ff ff       	jmp    c00108aa <VgaText::incrementCursor(bool)>
c0010c8f:	90                   	nop

c0010c90 <VgaText::isShowingCursor()>:
c0010c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c94:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c9a:	c3                   	ret    
c0010c9b:	90                   	nop

c0010c9c <VgaText::isBlinkDisabled()>:
c0010c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca0:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010ca6:	83 f0 01             	xor    eax,0x1
c0010ca9:	c3                   	ret    

c0010caa <VgaText::setCursorHeight(int)>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb2:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cb8:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc3:	e9 3a f9 ff ff       	jmp    c0010602 <VgaText::showCursor(bool)>

c0010cc8 <VgaText::getCursorHeight()>:
c0010cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ccc:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd2:	c3                   	ret    

c0010cd3 <setActiveTerminal(VgaText*)>:
c0010cd3:	53                   	push   ebx
c0010cd4:	83 ec 08             	sub    esp,0x8
c0010cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cdb:	85 db                	test   ebx,ebx
c0010cdd:	75 11                	jne    c0010cf0 <setActiveTerminal(VgaText*)+0x1d>
c0010cdf:	c7 44 24 10 0c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a00c
c0010ce7:	83 c4 08             	add    esp,0x8
c0010cea:	5b                   	pop    ebx
c0010ceb:	e9 47 95 00 00       	jmp    c001a237 <Krnl::panic(char const*)>
c0010cf0:	50                   	push   eax
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	68 1a a0 02 c0       	push   0xc002a01a
c0010cf8:	e8 bf 1e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0010cfd:	a1 a4 e1 02 c0       	mov    eax,ds:0xc002e1a4
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	85 c0                	test   eax,eax
c0010d07:	74 0c                	je     c0010d15 <setActiveTerminal(VgaText*)+0x42>
c0010d09:	83 ec 0c             	sub    esp,0xc
c0010d0c:	50                   	push   eax
c0010d0d:	e8 d6 f8 ff ff       	call   c00105e8 <VgaText::updateCursor()>
c0010d12:	83 c4 10             	add    esp,0x10
c0010d15:	89 1d a4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a4,ebx
c0010d1b:	51                   	push   ecx
c0010d1c:	51                   	push   ecx
c0010d1d:	53                   	push   ebx
c0010d1e:	68 32 a0 02 c0       	push   0xc002a032
c0010d23:	e8 94 1e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0010d28:	83 c4 0c             	add    esp,0xc
c0010d2b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d31:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d37:	53                   	push   ebx
c0010d38:	e8 17 fb ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0010d3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d40:	e8 57 ff ff ff       	call   c0010c9c <VgaText::isBlinkDisabled()>
c0010d45:	5a                   	pop    edx
c0010d46:	0f b6 c0             	movzx  eax,al
c0010d49:	59                   	pop    ecx
c0010d4a:	50                   	push   eax
c0010d4b:	53                   	push   ebx
c0010d4c:	e8 c1 f8 ff ff       	call   c0010612 <VgaText::disableBlink(bool)>
c0010d51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d54:	e8 6f ff ff ff       	call   c0010cc8 <VgaText::getCursorHeight()>
c0010d59:	5a                   	pop    edx
c0010d5a:	59                   	pop    ecx
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	e8 48 ff ff ff       	call   c0010caa <VgaText::setCursorHeight(int)>
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d6c:	75 0a                	jne    c0010d78 <setActiveTerminal(VgaText*)+0xa5>
c0010d6e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d78:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d7c:	83 c4 08             	add    esp,0x8
c0010d7f:	5b                   	pop    ebx
c0010d80:	e9 0f f8 ff ff       	jmp    c0010594 <VgaText::load()>

c0010d85 <doTerminalCycle()>:
c0010d85:	83 ec 18             	sub    esp,0x18
c0010d88:	a1 a0 e1 02 c0       	mov    eax,ds:0xc002e1a0
c0010d8d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d93:	50                   	push   eax
c0010d94:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c0010d99:	e8 35 ff ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c0010d9e:	83 c4 1c             	add    esp,0x1c
c0010da1:	c3                   	ret    

c0010da2 <VgaText::doUpdate()>:
c0010da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da6:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dac:	85 c0                	test   eax,eax
c0010dae:	74 02                	je     c0010db2 <VgaText::doUpdate()+0x10>
c0010db0:	ff e0                	jmp    eax
c0010db2:	c3                   	ret    
c0010db3:	90                   	nop

c0010db4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db4:	55                   	push   ebp
c0010db5:	57                   	push   edi
c0010db6:	56                   	push   esi
c0010db7:	53                   	push   ebx
c0010db8:	83 ec 1c             	sub    esp,0x1c
c0010dbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dbf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc4:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dcb:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dce:	50                   	push   eax
c0010dcf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd4:	50                   	push   eax
c0010dd5:	e8 4a f9 ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dda:	59                   	pop    ecx
c0010ddb:	0f b6 c0             	movzx  eax,al
c0010dde:	5b                   	pop    ebx
c0010ddf:	31 c9                	xor    ecx,ecx
c0010de1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010de9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010ded:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010df7:	0f b7 db             	movzx  ebx,bx
c0010dfa:	01 db                	add    ebx,ebx
c0010dfc:	01 fb                	add    ebx,edi
c0010dfe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e01:	84 c0                	test   al,al
c0010e03:	0f 84 38 01 00 00    	je     c0010f41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e09:	3c 0d                	cmp    al,0xd
c0010e0b:	75 0f                	jne    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e0d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e17:	e9 1f 01 00 00       	jmp    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e1c:	3c 0a                	cmp    al,0xa
c0010e1e:	75 5b                	jne    c0010e7b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e20:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e26:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e30:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e33:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e39:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e3f:	75 12                	jne    c0010e53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e4a:	55                   	push   ebp
c0010e4b:	e8 e6 f8 ff ff       	call   c0010736 <VgaText::scrollScreen()>
c0010e50:	83 c4 10             	add    esp,0x10
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	55                   	push   ebp
c0010e57:	e8 8c f7 ff ff       	call   c00105e8 <VgaText::updateCursor()>
c0010e5c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e6d:	31 c9                	xor    ecx,ecx
c0010e6f:	0f b7 db             	movzx  ebx,bx
c0010e72:	01 db                	add    ebx,ebx
c0010e74:	01 fb                	add    ebx,edi
c0010e76:	e9 c0 00 00 00       	jmp    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7b:	3c 08                	cmp    al,0x8
c0010e7d:	75 4e                	jne    c0010ecd <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e7f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e83:	53                   	push   ebx
c0010e84:	53                   	push   ebx
c0010e85:	6a 01                	push   0x1
c0010e87:	55                   	push   ebp
c0010e88:	e8 df fc ff ff       	call   c0010b6c <VgaText::decrementCursor(bool)>
c0010e8d:	58                   	pop    eax
c0010e8e:	5a                   	pop    edx
c0010e8f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e95:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e9b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ea1:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ea7:	6a 20                	push   0x20
c0010ea9:	55                   	push   ebp
c0010eaa:	e8 2d f9 ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010eaf:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eb7:	83 c4 20             	add    esp,0x20
c0010eba:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec4:	0f b7 db             	movzx  ebx,bx
c0010ec7:	01 db                	add    ebx,ebx
c0010ec9:	01 fb                	add    ebx,edi
c0010ecb:	eb 6e                	jmp    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ecd:	51                   	push   ecx
c0010ece:	51                   	push   ecx
c0010ecf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed3:	50                   	push   eax
c0010ed4:	e8 f1 f8 ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	66 89 03             	mov    WORD PTR [ebx],ax
c0010edf:	39 2d a4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1a4,ebp
c0010ee5:	75 2a                	jne    c0010f11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ee7:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010eed:	85 c0                	test   eax,eax
c0010eef:	74 20                	je     c0010f11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ef1:	52                   	push   edx
c0010ef2:	52                   	push   edx
c0010ef3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f07:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f0a:	51                   	push   ecx
c0010f0b:	55                   	push   ebp
c0010f0c:	ff d0                	call   eax
c0010f0e:	83 c4 20             	add    esp,0x20
c0010f11:	83 c3 02             	add    ebx,0x2
c0010f14:	50                   	push   eax
c0010f15:	50                   	push   eax
c0010f16:	6a 00                	push   0x0
c0010f18:	55                   	push   ebp
c0010f19:	e8 8c f9 ff ff       	call   c00108aa <VgaText::incrementCursor(bool)>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f28:	75 0f                	jne    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f2a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f32:	0f b7 db             	movzx  ebx,bx
c0010f35:	01 db                	add    ebx,ebx
c0010f37:	01 fb                	add    ebx,edi
c0010f39:	b1 01                	mov    cl,0x1
c0010f3b:	46                   	inc    esi
c0010f3c:	e9 bd fe ff ff       	jmp    c0010dfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f41:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f45:	83 ec 0c             	sub    esp,0xc
c0010f48:	55                   	push   ebp
c0010f49:	e8 9a f6 ff ff       	call   c00105e8 <VgaText::updateCursor()>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f55:	84 c9                	test   cl,cl
c0010f57:	74 0c                	je     c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	55                   	push   ebp
c0010f5d:	e8 40 fe ff ff       	call   c0010da2 <VgaText::doUpdate()>
c0010f62:	83 c4 10             	add    esp,0x10
c0010f65:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f6c:	83 c4 1c             	add    esp,0x1c
c0010f6f:	5b                   	pop    ebx
c0010f70:	5e                   	pop    esi
c0010f71:	5f                   	pop    edi
c0010f72:	5d                   	pop    ebp
c0010f73:	c3                   	ret    

c0010f74 <VgaText::clearScreen()>:
c0010f74:	57                   	push   edi
c0010f75:	56                   	push   esi
c0010f76:	31 f6                	xor    esi,esi
c0010f78:	53                   	push   ebx
c0010f79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f7d:	52                   	push   edx
c0010f7e:	6a 00                	push   0x0
c0010f80:	6a 00                	push   0x0
c0010f82:	53                   	push   ebx
c0010f83:	e8 cc f8 ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0010f88:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f98:	7e 26                	jle    c0010fc0 <VgaText::clearScreen()+0x4c>
c0010f9a:	31 ff                	xor    edi,edi
c0010f9c:	50                   	push   eax
c0010f9d:	50                   	push   eax
c0010f9e:	56                   	push   esi
c0010f9f:	57                   	push   edi
c0010fa0:	47                   	inc    edi
c0010fa1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fa7:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fad:	6a 20                	push   0x20
c0010faf:	53                   	push   ebx
c0010fb0:	e8 27 f8 ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb5:	83 c4 20             	add    esp,0x20
c0010fb8:	83 ff 50             	cmp    edi,0x50
c0010fbb:	75 df                	jne    c0010f9c <VgaText::clearScreen()+0x28>
c0010fbd:	46                   	inc    esi
c0010fbe:	eb d2                	jmp    c0010f92 <VgaText::clearScreen()+0x1e>
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	53                   	push   ebx
c0010fc4:	e8 d9 fd ff ff       	call   c0010da2 <VgaText::doUpdate()>
c0010fc9:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	5b                   	pop    ebx
c0010fd4:	5e                   	pop    esi
c0010fd5:	5f                   	pop    edi
c0010fd6:	c3                   	ret    
c0010fd7:	90                   	nop

c0010fd8 <VgaText::putchar(char)>:
c0010fd8:	56                   	push   esi
c0010fd9:	53                   	push   ebx
c0010fda:	83 ec 14             	sub    esp,0x14
c0010fdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fe1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe5:	3c 5b                	cmp    al,0x5b
c0010fe7:	75 21                	jne    c001100a <VgaText::putchar(char)+0x32>
c0010fe9:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010ff0:	74 28                	je     c001101a <VgaText::putchar(char)+0x42>
c0010ff2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ffb:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011005:	e9 e2 00 00 00       	jmp    c00110ec <VgaText::putchar(char)+0x114>
c001100a:	3c 1b                	cmp    al,0x1b
c001100c:	75 0c                	jne    c001101a <VgaText::putchar(char)+0x42>
c001100e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011015:	e9 d2 00 00 00       	jmp    c00110ec <VgaText::putchar(char)+0x114>
c001101a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011020:	84 c9                	test   cl,cl
c0011022:	0f 84 ab 00 00 00    	je     c00110d3 <VgaText::putchar(char)+0xfb>
c0011028:	8d 50 c0             	lea    edx,[eax-0x40]
c001102b:	80 fa 3e             	cmp    dl,0x3e
c001102e:	0f 87 82 00 00 00    	ja     c00110b6 <VgaText::putchar(char)+0xde>
c0011034:	3c 6d                	cmp    al,0x6d
c0011036:	75 4d                	jne    c0011085 <VgaText::putchar(char)+0xad>
c0011038:	31 f6                	xor    esi,esi
c001103a:	31 d2                	xor    edx,edx
c001103c:	31 c0                	xor    eax,eax
c001103e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011044:	7e 30                	jle    c0011076 <VgaText::putchar(char)+0x9e>
c0011046:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001104e:	80 fa 3b             	cmp    dl,0x3b
c0011051:	75 17                	jne    c001106a <VgaText::putchar(char)+0x92>
c0011053:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011057:	50                   	push   eax
c0011058:	53                   	push   ebx
c0011059:	e8 ee f5 ff ff       	call   c001064c <VgaText::doANSI_SGR(int)>
c001105e:	59                   	pop    ecx
c001105f:	31 d2                	xor    edx,edx
c0011061:	58                   	pop    eax
c0011062:	31 c0                	xor    eax,eax
c0011064:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011068:	eb 09                	jmp    c0011073 <VgaText::putchar(char)+0x9b>
c001106a:	6b c0 0a             	imul   eax,eax,0xa
c001106d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011071:	88 ca                	mov    dl,cl
c0011073:	46                   	inc    esi
c0011074:	eb c8                	jmp    c001103e <VgaText::putchar(char)+0x66>
c0011076:	84 d2                	test   dl,dl
c0011078:	74 31                	je     c00110ab <VgaText::putchar(char)+0xd3>
c001107a:	50                   	push   eax
c001107b:	53                   	push   ebx
c001107c:	e8 cb f5 ff ff       	call   c001064c <VgaText::doANSI_SGR(int)>
c0011081:	58                   	pop    eax
c0011082:	5a                   	pop    edx
c0011083:	eb 26                	jmp    c00110ab <VgaText::putchar(char)+0xd3>
c0011085:	3c 4a                	cmp    al,0x4a
c0011087:	75 22                	jne    c00110ab <VgaText::putchar(char)+0xd3>
c0011089:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011090:	75 19                	jne    c00110ab <VgaText::putchar(char)+0xd3>
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	53                   	push   ebx
c0011096:	e8 d9 fe ff ff       	call   c0010f74 <VgaText::clearScreen()>
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	6a 00                	push   0x0
c00110a0:	6a 00                	push   0x0
c00110a2:	53                   	push   ebx
c00110a3:	e8 ac f7 ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b4:	eb 36                	jmp    c00110ec <VgaText::putchar(char)+0x114>
c00110b6:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110bc:	83 fa 0e             	cmp    edx,0xe
c00110bf:	7f 2b                	jg     c00110ec <VgaText::putchar(char)+0x114>
c00110c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c4:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ca:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110d1:	eb 19                	jmp    c00110ec <VgaText::putchar(char)+0x114>
c00110d3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110d9:	0f be c0             	movsx  eax,al
c00110dc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e2:	50                   	push   eax
c00110e3:	53                   	push   ebx
c00110e4:	e8 ab fa ff ff       	call   c0010b94 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	83 c4 14             	add    esp,0x14
c00110ef:	5b                   	pop    ebx
c00110f0:	5e                   	pop    esi
c00110f1:	c3                   	ret    

c00110f2 <VgaText::puts(char const*)>:
c00110f2:	53                   	push   ebx
c00110f3:	83 ec 08             	sub    esp,0x8
c00110f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110fd:	84 c0                	test   al,al
c00110ff:	74 12                	je     c0011113 <VgaText::puts(char const*)+0x21>
c0011101:	43                   	inc    ebx
c0011102:	51                   	push   ecx
c0011103:	51                   	push   ecx
c0011104:	50                   	push   eax
c0011105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011109:	e8 ca fe ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c001110e:	83 c4 10             	add    esp,0x10
c0011111:	eb e7                	jmp    c00110fa <VgaText::puts(char const*)+0x8>
c0011113:	83 c4 08             	add    esp,0x8
c0011116:	5b                   	pop    ebx
c0011117:	c3                   	ret    

c0011118 <VgaText::putx(unsigned int)>:
c0011118:	57                   	push   edi
c0011119:	b9 11 00 00 00       	mov    ecx,0x11
c001111e:	56                   	push   esi
c001111f:	be 4e a0 02 c0       	mov    esi,0xc002a04e
c0011124:	53                   	push   ebx
c0011125:	83 ec 20             	sub    esp,0x20
c0011128:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001112c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011130:	fc                   	cld    
c0011131:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011133:	be 08 00 00 00       	mov    esi,0x8
c0011138:	50                   	push   eax
c0011139:	50                   	push   eax
c001113a:	89 d8                	mov    eax,ebx
c001113c:	c1 e3 04             	shl    ebx,0x4
c001113f:	c1 e8 1c             	shr    eax,0x1c
c0011142:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011147:	50                   	push   eax
c0011148:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114c:	e8 87 fe ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c0011151:	83 c4 10             	add    esp,0x10
c0011154:	4e                   	dec    esi
c0011155:	75 e1                	jne    c0011138 <VgaText::putx(unsigned int)+0x20>
c0011157:	83 c4 20             	add    esp,0x20
c001115a:	5b                   	pop    ebx
c001115b:	5e                   	pop    esi
c001115c:	5f                   	pop    edi
c001115d:	c3                   	ret    

c001115e <VgaText::VgaText(char const*)>:
c001115e:	57                   	push   edi
c001115f:	56                   	push   esi
c0011160:	53                   	push   ebx
c0011161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011165:	83 ec 08             	sub    esp,0x8
c0011168:	6a 00                	push   0x0
c001116a:	50                   	push   eax
c001116b:	e8 6e 05 00 00       	call   c00116de <UnixFile::UnixFile(int)>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	ba b4 a0 02 c0       	mov    edx,0xc002a0b4
c0011178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117c:	89 10                	mov    DWORD PTR [eax],edx
c001117e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011182:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001118c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011190:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001119a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a9:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b4:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c2:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d0:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111db:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111ec:	bb 80 e1 02 c0       	mov    ebx,0xc002e180
c00111f1:	b8 08 00 00 00       	mov    eax,0x8
c00111f6:	fc                   	cld    
c00111f7:	89 d7                	mov    edi,edx
c00111f9:	89 de                	mov    esi,ebx
c00111fb:	89 c1                	mov    ecx,eax
c00111fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011203:	05 1e 10 00 00       	add    eax,0x101e
c0011208:	83 ec 08             	sub    esp,0x8
c001120b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120f:	50                   	push   eax
c0011210:	e8 1f f6 fe ff       	call   c0000834 <strcpy>
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	83 c0 0c             	add    eax,0xc
c001122d:	83 ec 04             	sub    esp,0x4
c0011230:	68 00 0f 00 00       	push   0xf00
c0011235:	6a 00                	push   0x0
c0011237:	50                   	push   eax
c0011238:	e8 3b f5 fe ff       	call   c0000778 <memset>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	83 ec 04             	sub    esp,0x4
c0011243:	6a 00                	push   0x0
c0011245:	6a 07                	push   0x7
c0011247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124b:	e8 b4 f4 ff ff       	call   c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	83 ec 08             	sub    esp,0x8
c0011256:	6a 02                	push   0x2
c0011258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125c:	e8 49 fa ff ff       	call   c0010caa <VgaText::setCursorHeight(int)>
c0011261:	83 c4 10             	add    esp,0x10
c0011264:	83 ec 04             	sub    esp,0x4
c0011267:	6a 00                	push   0x0
c0011269:	6a 00                	push   0x0
c001126b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126f:	e8 e0 f5 ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0011274:	83 c4 10             	add    esp,0x10
c0011277:	83 ec 08             	sub    esp,0x8
c001127a:	6a 01                	push   0x1
c001127c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011280:	e8 7d f3 ff ff       	call   c0010602 <VgaText::showCursor(bool)>
c0011285:	83 c4 10             	add    esp,0x10
c0011288:	83 ec 08             	sub    esp,0x8
c001128b:	6a 01                	push   0x1
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	e8 7c f3 ff ff       	call   c0010612 <VgaText::disableBlink(bool)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	83 ec 0c             	sub    esp,0xc
c001129c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a0:	e8 cf fc ff ff       	call   c0010f74 <VgaText::clearScreen()>
c00112a5:	83 c4 10             	add    esp,0x10
c00112a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ac:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b7:	05 9e 10 00 00       	add    eax,0x109e
c00112bc:	83 ec 04             	sub    esp,0x4
c00112bf:	68 96 00 00 00       	push   0x96
c00112c4:	6a 00                	push   0x0
c00112c6:	50                   	push   eax
c00112c7:	e8 ac f4 fe ff       	call   c0000778 <memset>
c00112cc:	83 c4 10             	add    esp,0x10
c00112cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d3:	05 34 11 00 00       	add    eax,0x1134
c00112d8:	83 ec 04             	sub    esp,0x4
c00112db:	68 2c 01 00 00       	push   0x12c
c00112e0:	6a 00                	push   0x0
c00112e2:	50                   	push   eax
c00112e3:	e8 90 f4 fe ff       	call   c0000778 <memset>
c00112e8:	83 c4 10             	add    esp,0x10
c00112eb:	90                   	nop
c00112ec:	5b                   	pop    ebx
c00112ed:	5e                   	pop    esi
c00112ee:	5f                   	pop    edi
c00112ef:	c3                   	ret    

c00112f0 <VgaText::receiveKey(unsigned char)>:
c00112f0:	55                   	push   ebp
c00112f1:	57                   	push   edi
c00112f2:	56                   	push   esi
c00112f3:	53                   	push   ebx
c00112f4:	83 ec 1c             	sub    esp,0x1c
c00112f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112ff:	84 db                	test   bl,bl
c0011301:	0f 84 c9 00 00 00    	je     c00113d0 <VgaText::receiveKey(unsigned char)+0xe0>
c0011307:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001130d:	80 fb 08             	cmp    bl,0x8
c0011310:	75 2c                	jne    c001133e <VgaText::receiveKey(unsigned char)+0x4e>
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	57                   	push   edi
c0011316:	e8 79 f4 fe ff       	call   c0000794 <strlen>
c001131b:	83 c4 10             	add    esp,0x10
c001131e:	85 c0                	test   eax,eax
c0011320:	74 41                	je     c0011363 <VgaText::receiveKey(unsigned char)+0x73>
c0011322:	50                   	push   eax
c0011323:	50                   	push   eax
c0011324:	6a 08                	push   0x8
c0011326:	56                   	push   esi
c0011327:	e8 ac fc ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c001132c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001132f:	e8 60 f4 fe ff       	call   c0000794 <strlen>
c0011334:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001133c:	eb 22                	jmp    c0011360 <VgaText::receiveKey(unsigned char)+0x70>
c001133e:	0f be c3             	movsx  eax,bl
c0011341:	52                   	push   edx
c0011342:	52                   	push   edx
c0011343:	50                   	push   eax
c0011344:	56                   	push   esi
c0011345:	e8 8e fc ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c001134a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001134e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011353:	59                   	pop    ecx
c0011354:	5d                   	pop    ebp
c0011355:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011359:	50                   	push   eax
c001135a:	57                   	push   edi
c001135b:	e8 14 f6 fe ff       	call   c0000974 <strcat>
c0011360:	83 c4 10             	add    esp,0x10
c0011363:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001136a:	75 05                	jne    c0011371 <VgaText::receiveKey(unsigned char)+0x81>
c001136c:	80 fb 0a             	cmp    bl,0xa
c001136f:	75 53                	jne    c00113c4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011371:	83 ec 0c             	sub    esp,0xc
c0011374:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001137a:	53                   	push   ebx
c001137b:	e8 14 f4 fe ff       	call   c0000794 <strlen>
c0011380:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011383:	89 c5                	mov    ebp,eax
c0011385:	e8 0a f4 fe ff       	call   c0000794 <strlen>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011391:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011396:	76 10                	jbe    c00113a8 <VgaText::receiveKey(unsigned char)+0xb8>
c0011398:	83 ec 0c             	sub    esp,0xc
c001139b:	68 5f a0 02 c0       	push   0xc002a05f
c00113a0:	e8 92 8e 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00113a5:	83 c4 10             	add    esp,0x10
c00113a8:	50                   	push   eax
c00113a9:	50                   	push   eax
c00113aa:	57                   	push   edi
c00113ab:	53                   	push   ebx
c00113ac:	e8 c3 f5 fe ff       	call   c0000974 <strcat>
c00113b1:	83 c4 0c             	add    esp,0xc
c00113b4:	68 96 00 00 00       	push   0x96
c00113b9:	6a 00                	push   0x0
c00113bb:	57                   	push   edi
c00113bc:	e8 b7 f3 fe ff       	call   c0000778 <memset>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	56                   	push   esi
c00113c8:	e8 d5 f9 ff ff       	call   c0010da2 <VgaText::doUpdate()>
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	83 c4 1c             	add    esp,0x1c
c00113d3:	5b                   	pop    ebx
c00113d4:	5e                   	pop    esi
c00113d5:	5f                   	pop    edi
c00113d6:	5d                   	pop    ebp
c00113d7:	c3                   	ret    

c00113d8 <VgaText::write(unsigned long long, void*, int*)>:
c00113d8:	55                   	push   ebp
c00113d9:	57                   	push   edi
c00113da:	56                   	push   esi
c00113db:	53                   	push   ebx
c00113dc:	83 ec 0c             	sub    esp,0xc
c00113df:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113eb:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f5:	39 eb                	cmp    ebx,ebp
c00113f7:	74 13                	je     c001140c <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113f9:	43                   	inc    ebx
c00113fa:	50                   	push   eax
c00113fb:	50                   	push   eax
c00113fc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011400:	50                   	push   eax
c0011401:	56                   	push   esi
c0011402:	e8 d1 fb ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	eb e9                	jmp    c00113f5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001140c:	83 ec 0c             	sub    esp,0xc
c001140f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011416:	56                   	push   esi
c0011417:	e8 86 f9 ff ff       	call   c0010da2 <VgaText::doUpdate()>
c001141c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011420:	89 38                	mov    DWORD PTR [eax],edi
c0011422:	83 c4 1c             	add    esp,0x1c
c0011425:	31 c0                	xor    eax,eax
c0011427:	5b                   	pop    ebx
c0011428:	5e                   	pop    esi
c0011429:	5f                   	pop    edi
c001142a:	5d                   	pop    ebp
c001142b:	c3                   	ret    

c001142c <newTerminal(char*)>:
c001142c:	83 ec 28             	sub    esp,0x28
c001142f:	68 60 12 00 00       	push   0x1260
c0011434:	e8 07 e4 ff ff       	call   c000f840 <malloc>
c0011439:	5a                   	pop    edx
c001143a:	59                   	pop    ecx
c001143b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001143f:	50                   	push   eax
c0011440:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011444:	e8 15 fd ff ff       	call   c001115e <VgaText::VgaText(char const*)>
c0011449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144d:	83 c4 2c             	add    esp,0x2c
c0011450:	c3                   	ret    
c0011451:	90                   	nop

c0011452 <TSS::TSS()>:
c0011452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011456:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001145d:	90                   	nop
c001145e:	c3                   	ret    
c001145f:	90                   	nop

c0011460 <TSS::setESP(unsigned long)>:
c0011460:	55                   	push   ebp
c0011461:	89 e5                	mov    ebp,esp
c0011463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011469:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001146c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001146f:	90                   	nop
c0011470:	5d                   	pop    ebp
c0011471:	c3                   	ret    

c0011472 <TSS::flush()>:
c0011472:	55                   	push   ebp
c0011473:	89 e5                	mov    ebp,esp
c0011475:	83 ec 10             	sub    esp,0x10
c0011478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147b:	8b 00                	mov    eax,DWORD PTR [eax]
c001147d:	83 c8 03             	or     eax,0x3
c0011480:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011484:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011488:	66 89 d0             	mov    ax,dx
c001148b:	0f 00 d8             	ltr    ax
c001148e:	90                   	nop
c001148f:	c9                   	leave  
c0011490:	c3                   	ret    
c0011491:	90                   	nop

c0011492 <TSS::setup(unsigned long, unsigned long)>:
c0011492:	55                   	push   ebp
c0011493:	89 e5                	mov    ebp,esp
c0011495:	83 ec 18             	sub    esp,0x18
c0011498:	83 ec 0c             	sub    esp,0xc
c001149b:	6a 68                	push   0x68
c001149d:	e8 9e e3 ff ff       	call   c000f840 <malloc>
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	89 c2                	mov    edx,eax
c00114a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b3:	83 ec 04             	sub    esp,0x4
c00114b6:	6a 68                	push   0x68
c00114b8:	6a 00                	push   0x0
c00114ba:	50                   	push   eax
c00114bb:	e8 b8 f2 fe ff       	call   c0000778 <memset>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011505:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001150b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011511:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011529:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001152f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011532:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011535:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011538:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001153b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011541:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011544:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011557:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155a:	0f 20 da             	mov    edx,cr3
c001155d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011560:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011563:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011569:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156c:	83 ec 08             	sub    esp,0x8
c001156f:	50                   	push   eax
c0011570:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011573:	50                   	push   eax
c0011574:	e8 a5 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	83 ec 08             	sub    esp,0x8
c001157f:	6a 68                	push   0x68
c0011581:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011584:	50                   	push   eax
c0011585:	e8 b0 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001158a:	83 c4 10             	add    esp,0x10
c001158d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011591:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011594:	83 e0 0f             	and    eax,0xf
c0011597:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001159a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001159d:	83 c8 40             	or     eax,0x40
c00115a0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a3:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00115a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ae:	05 78 01 00 00       	add    eax,0x178
c00115b3:	83 ec 04             	sub    esp,0x4
c00115b6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115b9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115bc:	50                   	push   eax
c00115bd:	e8 ac da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	89 c2                	mov    edx,eax
c00115c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ca:	89 10                	mov    DWORD PTR [eax],edx
c00115cc:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00115d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d7:	05 78 01 00 00       	add    eax,0x178
c00115dc:	83 ec 0c             	sub    esp,0xc
c00115df:	50                   	push   eax
c00115e0:	e8 cd da ff ff       	call   c000f0b2 <GDT::flush()>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00115ed:	83 ec 08             	sub    esp,0x8
c00115f0:	50                   	push   eax
c00115f1:	68 c8 a0 02 c0       	push   0xc002a0c8
c00115f6:	e8 c1 15 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00115fb:	83 c4 10             	add    esp,0x10
c00115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011601:	8b 00                	mov    eax,DWORD PTR [eax]
c0011603:	c9                   	leave  
c0011604:	c3                   	ret    
c0011605:	90                   	nop

c0011606 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001160e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011611:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011616:	75 08                	jne    c0011620 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011618:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001161e:	eb 38                	jmp    c0011658 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011620:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011625:	75 17                	jne    c001163e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011627:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001162c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001162f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011635:	8b 10                	mov    edx,DWORD PTR [eax]
c0011637:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001163b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001163e:	89 c1                	mov    ecx,eax
c0011640:	83 e1 fd             	and    ecx,0xfffffffd
c0011643:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011649:	74 cd                	je     c0011618 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001164b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011650:	83 e0 ef             	and    eax,0xffffffef
c0011653:	83 f8 08             	cmp    eax,0x8
c0011656:	76 c0                	jbe    c0011618 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011658:	31 c0                	xor    eax,eax
c001165a:	c3                   	ret    
c001165b:	90                   	nop

c001165c <ReservedFilename::isAtty()>:
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011663:	31 c0                	xor    eax,eax
c0011665:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001166b:	74 09                	je     c0011676 <ReservedFilename::isAtty()+0x1a>
c001166d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011673:	0f 94 c0             	sete   al
c0011676:	c3                   	ret    
c0011677:	90                   	nop

c0011678 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011683:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011687:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168c:	75 08                	jne    c0011696 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001168e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011694:	eb 3d                	jmp    c00116d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011696:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001169b:	75 17                	jne    c00116b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001169d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116b9:	75 04                	jne    c00116bf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116bb:	89 0a                	mov    DWORD PTR [edx],ecx
c00116bd:	eb 14                	jmp    c00116d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116bf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c4:	74 c8                	je     c001168e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116c6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116cb:	83 e0 ef             	and    eax,0xffffffef
c00116ce:	83 f8 08             	cmp    eax,0x8
c00116d1:	76 bb                	jbe    c001168e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d3:	31 c0                	xor    eax,eax
c00116d5:	c3                   	ret    

c00116d6 <UnixFile::getFileDescriptor()>:
c00116d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116dd:	c3                   	ret    

c00116de <UnixFile::UnixFile(int)>:
c00116de:	53                   	push   ebx
c00116df:	83 ec 28             	sub    esp,0x28
c00116e2:	ba b4 a1 02 c0       	mov    edx,0xc002a1b4
c00116e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116eb:	89 10                	mov    DWORD PTR [eax],edx
c00116ed:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f5:	0f 8f 8c 01 00 00    	jg     c0011887 <UnixFile::UnixFile(int)+0x1a9>
c00116fb:	a1 60 d0 02 c0       	mov    eax,ds:0xc002d060
c0011700:	8d 50 01             	lea    edx,[eax+0x1]
c0011703:	89 15 60 d0 02 c0    	mov    DWORD PTR ds:0xc002d060,edx
c0011709:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001170d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011710:	83 ec 08             	sub    esp,0x8
c0011713:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011717:	68 38 e2 02 c0       	push   0xc002e238
c001171c:	e8 8f 6c 01 00       	call   c00283b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0011729:	83 f0 01             	xor    eax,0x1
c001172c:	84 c0                	test   al,al
c001172e:	0f 84 54 01 00 00    	je     c0011888 <UnixFile::UnixFile(int)+0x1aa>
c0011734:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c001173b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011743:	83 ec 0c             	sub    esp,0xc
c0011746:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001174a:	e8 f1 e0 ff ff       	call   c000f840 <malloc>
c001174f:	83 c4 10             	add    esp,0x10
c0011752:	89 c3                	mov    ebx,eax
c0011754:	83 ec 08             	sub    esp,0x8
c0011757:	68 03 ff ff 0f       	push   0xfffff03
c001175c:	53                   	push   ebx
c001175d:	e8 2c 01 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c001176b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177a:	e8 c1 e0 ff ff       	call   c000f840 <malloc>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	89 c3                	mov    ebx,eax
c0011784:	83 ec 08             	sub    esp,0x8
c0011787:	68 01 ff ff 0f       	push   0xfffff01
c001178c:	53                   	push   ebx
c001178d:	e8 fc 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011792:	83 c4 10             	add    esp,0x10
c0011795:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c001179b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a3:	83 ec 0c             	sub    esp,0xc
c00117a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117aa:	e8 91 e0 ff ff       	call   c000f840 <malloc>
c00117af:	83 c4 10             	add    esp,0x10
c00117b2:	89 c3                	mov    ebx,eax
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	68 00 ff ff 0f       	push   0xfffff00
c00117bc:	53                   	push   ebx
c00117bd:	e8 cc 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c00117cb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d3:	83 ec 0c             	sub    esp,0xc
c00117d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117da:	e8 61 e0 ff ff       	call   c000f840 <malloc>
c00117df:	83 c4 10             	add    esp,0x10
c00117e2:	89 c3                	mov    ebx,eax
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	68 02 ff ff 0f       	push   0xfffff02
c00117ec:	53                   	push   ebx
c00117ed:	e8 9c 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c00117fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011803:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011808:	7f 7e                	jg     c0011888 <UnixFile::UnixFile(int)+0x1aa>
c001180a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011812:	83 ec 0c             	sub    esp,0xc
c0011815:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011819:	e8 22 e0 ff ff       	call   c000f840 <malloc>
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	89 c3                	mov    ebx,eax
c0011823:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011827:	05 10 ff ff 0f       	add    eax,0xfffff10
c001182c:	83 ec 08             	sub    esp,0x8
c001182f:	50                   	push   eax
c0011830:	53                   	push   ebx
c0011831:	e8 58 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183d:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c0011844:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011853:	e8 e8 df ff ff       	call   c000f840 <malloc>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	89 c3                	mov    ebx,eax
c001185d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011861:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011866:	83 ec 08             	sub    esp,0x8
c0011869:	50                   	push   eax
c001186a:	53                   	push   ebx
c001186b:	e8 1e 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011877:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c001187e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011882:	e9 7c ff ff ff       	jmp    c0011803 <UnixFile::UnixFile(int)+0x125>
c0011887:	90                   	nop
c0011888:	83 c4 28             	add    esp,0x28
c001188b:	5b                   	pop    ebx
c001188c:	c3                   	ret    
c001188d:	90                   	nop

c001188e <ReservedFilename::ReservedFilename(int)>:
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011895:	83 ec 08             	sub    esp,0x8
c0011898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189c:	50                   	push   eax
c001189d:	e8 3c fe ff ff       	call   c00116de <UnixFile::UnixFile(int)>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c00118aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ae:	89 10                	mov    DWORD PTR [eax],edx
c00118b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118bb:	90                   	nop
c00118bc:	83 c4 0c             	add    esp,0xc
c00118bf:	c3                   	ret    

c00118c0 <UnixFile::~UnixFile()>:
c00118c0:	83 ec 1c             	sub    esp,0x1c
c00118c3:	ba b4 a1 02 c0       	mov    edx,0xc002a1b4
c00118c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118cc:	89 10                	mov    DWORD PTR [eax],edx
c00118ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118da:	7f 73                	jg     c001194f <UnixFile::~UnixFile()+0x8f>
c00118dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	68 38 e2 02 c0       	push   0xc002e238
c00118ec:	e8 93 6b 01 00       	call   c0028484 <LinkedList<UnixFile>::getFirstElement()>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	68 38 e2 02 c0       	push   0xc002e238
c0011900:	e8 87 6b 01 00       	call   c002848c <LinkedList<UnixFile>::removeFirst()>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001190c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011910:	74 40                	je     c0011952 <UnixFile::~UnixFile()+0x92>
c0011912:	83 ec 08             	sub    esp,0x8
c0011915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011919:	68 38 e2 02 c0       	push   0xc002e238
c001191e:	e8 8d 6a 01 00       	call   c00283b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001192a:	8d 50 01             	lea    edx,[eax+0x1]
c001192d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011931:	3d 88 13 00 00       	cmp    eax,0x1388
c0011936:	0f 94 c0             	sete   al
c0011939:	84 c0                	test   al,al
c001193b:	74 a7                	je     c00118e4 <UnixFile::~UnixFile()+0x24>
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	68 8c a1 02 c0       	push   0xc002a18c
c0011945:	e8 ed 88 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	eb 95                	jmp    c00118e4 <UnixFile::~UnixFile()+0x24>
c001194f:	90                   	nop
c0011950:	eb 01                	jmp    c0011953 <UnixFile::~UnixFile()+0x93>
c0011952:	90                   	nop
c0011953:	90                   	nop
c0011954:	83 c4 1c             	add    esp,0x1c
c0011957:	c3                   	ret    

c0011958 <UnixFile::~UnixFile()>:
c0011958:	83 ec 0c             	sub    esp,0xc
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011962:	e8 59 ff ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	83 ec 08             	sub    esp,0x8
c001196d:	6a 0c                	push   0xc
c001196f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011973:	e8 64 11 00 00       	call   c0012adc <operator delete(void*, unsigned long)>
c0011978:	83 c4 10             	add    esp,0x10
c001197b:	83 c4 0c             	add    esp,0xc
c001197e:	c3                   	ret    
c001197f:	90                   	nop

c0011980 <ReservedFilename::~ReservedFilename()>:
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c0011988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198c:	89 10                	mov    DWORD PTR [eax],edx
c001198e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011992:	83 ec 0c             	sub    esp,0xc
c0011995:	50                   	push   eax
c0011996:	e8 25 ff ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c001199b:	83 c4 10             	add    esp,0x10
c001199e:	90                   	nop
c001199f:	83 c4 0c             	add    esp,0xc
c00119a2:	c3                   	ret    
c00119a3:	90                   	nop

c00119a4 <ReservedFilename::~ReservedFilename()>:
c00119a4:	83 ec 0c             	sub    esp,0xc
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ae:	e8 cd ff ff ff       	call   c0011980 <ReservedFilename::~ReservedFilename()>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	83 ec 08             	sub    esp,0x8
c00119b9:	6a 0c                	push   0xc
c00119bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bf:	e8 18 11 00 00       	call   c0012adc <operator delete(void*, unsigned long)>
c00119c4:	83 c4 10             	add    esp,0x10
c00119c7:	83 c4 0c             	add    esp,0xc
c00119ca:	c3                   	ret    

c00119cb <getFromFileDescriptor(int)>:
c00119cb:	53                   	push   ebx
c00119cc:	83 ec 08             	sub    esp,0x8
c00119cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119d9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119df:	7f 2c                	jg     c0011a0d <getFromFileDescriptor(int)+0x42>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 38 e2 02 c0       	push   0xc002e238
c00119e9:	e8 96 6a 01 00       	call   c0028484 <LinkedList<UnixFile>::getFirstElement()>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	85 c0                	test   eax,eax
c00119f3:	75 04                	jne    c00119f9 <getFromFileDescriptor(int)+0x2e>
c00119f5:	31 c0                	xor    eax,eax
c00119f7:	eb 6e                	jmp    c0011a67 <getFromFileDescriptor(int)+0x9c>
c00119f9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119fc:	74 69                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c00119fe:	52                   	push   edx
c00119ff:	52                   	push   edx
c0011a00:	50                   	push   eax
c0011a01:	68 38 e2 02 c0       	push   0xc002e238
c0011a06:	e8 23 6b 01 00       	call   c002852e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a0b:	eb e1                	jmp    c00119ee <getFromFileDescriptor(int)+0x23>
c0011a0d:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0011a12:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a18:	74 4d                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a1a:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0011a1f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a25:	74 40                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a27:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0011a2c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a32:	74 33                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a34:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c0011a39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a3f:	74 26                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a41:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a47:	83 f8 08             	cmp    eax,0x8
c0011a4a:	77 09                	ja     c0011a55 <getFromFileDescriptor(int)+0x8a>
c0011a4c:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c0011a53:	eb 12                	jmp    c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a55:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a5b:	83 fb 08             	cmp    ebx,0x8
c0011a5e:	77 95                	ja     c00119f5 <getFromFileDescriptor(int)+0x2a>
c0011a60:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c0011a67:	83 c4 08             	add    esp,0x8
c0011a6a:	5b                   	pop    ebx
c0011a6b:	c3                   	ret    

c0011a6c <__static_initialization_and_destruction_0(int, int)>:
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a74:	75 34                	jne    c0011aaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a7e:	75 2a                	jne    c0011aaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	68 38 e2 02 c0       	push   0xc002e238
c0011a88:	e8 cb 68 01 00       	call   c0028358 <LinkedList<UnixFile>::LinkedList()>
c0011a8d:	83 c4 10             	add    esp,0x10
c0011a90:	83 ec 04             	sub    esp,0x4
c0011a93:	68 dc cf 02 c0       	push   0xc002cfdc
c0011a98:	68 38 e2 02 c0       	push   0xc002e238
c0011a9d:	68 56 83 02 c0       	push   0xc0028356
c0011aa2:	e8 af 0f 00 00       	call   c0012a56 <__cxa_atexit>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	90                   	nop
c0011aab:	83 c4 0c             	add    esp,0xc
c0011aae:	c3                   	ret    

c0011aaf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	83 ec 08             	sub    esp,0x8
c0011ab5:	68 ff ff 00 00       	push   0xffff
c0011aba:	6a 01                	push   0x1
c0011abc:	e8 ab ff ff ff       	call   c0011a6c <__static_initialization_and_destruction_0(int, int)>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	83 c4 0c             	add    esp,0xc
c0011ac7:	c3                   	ret    

c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ac8:	53                   	push   ebx
c0011ac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011acd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ad1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011ad7:	89 c8                	mov    eax,ecx
c0011ad9:	d1 e8                	shr    eax,1
c0011adb:	03 05 68 d0 02 c0    	add    eax,DWORD PTR ds:0xc002d068
c0011ae1:	83 e1 01             	and    ecx,0x1
c0011ae4:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ae6:	75 09                	jne    c0011af1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011ae8:	83 e2 f0             	and    edx,0xfffffff0
c0011aeb:	09 da                	or     edx,ebx
c0011aed:	88 10                	mov    BYTE PTR [eax],dl
c0011aef:	5b                   	pop    ebx
c0011af0:	c3                   	ret    
c0011af1:	c1 e3 04             	shl    ebx,0x4
c0011af4:	83 e2 0f             	and    edx,0xf
c0011af7:	09 da                	or     edx,ebx
c0011af9:	88 10                	mov    BYTE PTR [eax],dl
c0011afb:	5b                   	pop    ebx
c0011afc:	c3                   	ret    

c0011afd <Virt::getPageState(unsigned long)>:
c0011afd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b01:	8b 0d 68 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d068
c0011b07:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b0d:	89 d0                	mov    eax,edx
c0011b0f:	d1 e8                	shr    eax,1
c0011b11:	83 e2 01             	and    edx,0x1
c0011b14:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b17:	75 04                	jne    c0011b1d <Virt::getPageState(unsigned long)+0x20>
c0011b19:	83 e0 0f             	and    eax,0xf
c0011b1c:	c3                   	ret    
c0011b1d:	c0 e8 04             	shr    al,0x4
c0011b20:	c3                   	ret    

c0011b21 <Virt::allocateKernelVirtualPages(int)>:
c0011b21:	55                   	push   ebp
c0011b22:	31 ed                	xor    ebp,ebp
c0011b24:	57                   	push   edi
c0011b25:	56                   	push   esi
c0011b26:	53                   	push   ebx
c0011b27:	31 db                	xor    ebx,ebx
c0011b29:	83 ec 1c             	sub    esp,0x1c
c0011b2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b30:	8b 3d 64 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d064
c0011b36:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b3b:	57                   	push   edi
c0011b3c:	e8 bc ff ff ff       	call   c0011afd <Virt::getPageState(unsigned long)>
c0011b41:	5a                   	pop    edx
c0011b42:	84 c0                	test   al,al
c0011b44:	75 3a                	jne    c0011b80 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b46:	85 db                	test   ebx,ebx
c0011b48:	75 02                	jne    c0011b4c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b4a:	89 fd                	mov    ebp,edi
c0011b4c:	43                   	inc    ebx
c0011b4d:	39 f3                	cmp    ebx,esi
c0011b4f:	74 5a                	je     c0011bab <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b51:	47                   	inc    edi
c0011b52:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b58:	76 31                	jbe    c0011b8b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b5a:	c7 05 64 d0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d064,0xc8000
c0011b64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b69:	75 28                	jne    c0011b93 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b6b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b70:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b75:	57                   	push   edi
c0011b76:	e8 82 ff ff ff       	call   c0011afd <Virt::getPageState(unsigned long)>
c0011b7b:	5a                   	pop    edx
c0011b7c:	84 c0                	test   al,al
c0011b7e:	74 c6                	je     c0011b46 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b80:	31 db                	xor    ebx,ebx
c0011b82:	47                   	inc    edi
c0011b83:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b89:	77 cf                	ja     c0011b5a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b8b:	89 3d 64 d0 02 c0    	mov    DWORD PTR ds:0xc002d064,edi
c0011b91:	eb a8                	jmp    c0011b3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b93:	83 ec 0c             	sub    esp,0xc
c0011b96:	68 e4 a1 02 c0       	push   0xc002a1e4
c0011b9b:	e8 97 86 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0011ba0:	8b 3d 64 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d064
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	eb 90                	jmp    c0011b3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bab:	89 2d 64 d0 02 c0    	mov    DWORD PTR ds:0xc002d064,ebp
c0011bb1:	4b                   	dec    ebx
c0011bb2:	74 5f                	je     c0011c13 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb4:	85 f6                	test   esi,esi
c0011bb6:	74 3d                	je     c0011bf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bb8:	89 e8                	mov    eax,ebp
c0011bba:	31 db                	xor    ebx,ebx
c0011bbc:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bbf:	eb 14                	jmp    c0011bd5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bc1:	6a 01                	push   0x1
c0011bc3:	43                   	inc    ebx
c0011bc4:	50                   	push   eax
c0011bc5:	e8 fe fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bca:	58                   	pop    eax
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	5a                   	pop    edx
c0011bce:	74 25                	je     c0011bf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd0:	a1 64 d0 02 c0       	mov    eax,ds:0xc002d064
c0011bd5:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd8:	85 db                	test   ebx,ebx
c0011bda:	89 15 64 d0 02 c0    	mov    DWORD PTR ds:0xc002d064,edx
c0011be0:	74 20                	je     c0011c02 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be2:	39 df                	cmp    edi,ebx
c0011be4:	75 db                	jne    c0011bc1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011be6:	6a 03                	push   0x3
c0011be8:	43                   	inc    ebx
c0011be9:	50                   	push   eax
c0011bea:	e8 d9 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bef:	59                   	pop    ecx
c0011bf0:	39 f3                	cmp    ebx,esi
c0011bf2:	58                   	pop    eax
c0011bf3:	75 db                	jne    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf5:	83 c4 1c             	add    esp,0x1c
c0011bf8:	89 e8                	mov    eax,ebp
c0011bfa:	5b                   	pop    ebx
c0011bfb:	c1 e0 0c             	shl    eax,0xc
c0011bfe:	5e                   	pop    esi
c0011bff:	5f                   	pop    edi
c0011c00:	5d                   	pop    ebp
c0011c01:	c3                   	ret    
c0011c02:	6a 02                	push   0x2
c0011c04:	bb 01 00 00 00       	mov    ebx,0x1
c0011c09:	50                   	push   eax
c0011c0a:	e8 b9 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0f:	58                   	pop    eax
c0011c10:	5a                   	pop    edx
c0011c11:	eb bd                	jmp    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c13:	6a 04                	push   0x4
c0011c15:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c18:	55                   	push   ebp
c0011c19:	a3 64 d0 02 c0       	mov    ds:0xc002d064,eax
c0011c1e:	e8 a5 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c23:	59                   	pop    ecx
c0011c24:	89 e8                	mov    eax,ebp
c0011c26:	5b                   	pop    ebx
c0011c27:	c1 e0 0c             	shl    eax,0xc
c0011c2a:	83 c4 1c             	add    esp,0x1c
c0011c2d:	5b                   	pop    ebx
c0011c2e:	5e                   	pop    esi
c0011c2f:	5f                   	pop    edi
c0011c30:	5d                   	pop    ebp
c0011c31:	c3                   	ret    

c0011c32 <Virt::virtualMemorySetup()>:
c0011c32:	53                   	push   ebx
c0011c33:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c38:	83 ec 08             	sub    esp,0x8
c0011c3b:	6a 0f                	push   0xf
c0011c3d:	53                   	push   ebx
c0011c3e:	43                   	inc    ebx
c0011c3f:	e8 84 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c44:	59                   	pop    ecx
c0011c45:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4b:	58                   	pop    eax
c0011c4c:	75 ed                	jne    c0011c3b <Virt::virtualMemorySetup()+0x9>
c0011c4e:	83 ec 08             	sub    esp,0x8
c0011c51:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c56:	68 00 00 00 c8       	push   0xc8000000
c0011c5b:	68 ea a3 02 c0       	push   0xc002a3ea
c0011c60:	e8 57 0f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0011c65:	58                   	pop    eax
c0011c66:	5a                   	pop    edx
c0011c67:	68 00 f0 ff ef       	push   0xeffff000
c0011c6c:	68 fe a3 02 c0       	push   0xc002a3fe
c0011c71:	e8 46 0f 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0011c76:	83 c4 10             	add    esp,0x10
c0011c79:	83 ec 08             	sub    esp,0x8
c0011c7c:	6a 00                	push   0x0
c0011c7e:	53                   	push   ebx
c0011c7f:	43                   	inc    ebx
c0011c80:	e8 43 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c8e:	75 e9                	jne    c0011c79 <Virt::virtualMemorySetup()+0x47>
c0011c90:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c95:	83 ec 08             	sub    esp,0x8
c0011c98:	6a 0f                	push   0xf
c0011c9a:	53                   	push   ebx
c0011c9b:	43                   	inc    ebx
c0011c9c:	e8 27 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011caa:	75 e9                	jne    c0011c95 <Virt::virtualMemorySetup()+0x63>
c0011cac:	83 c4 08             	add    esp,0x8
c0011caf:	5b                   	pop    ebx
c0011cb0:	c3                   	ret    

c0011cb1 <Virt::getAKernelVAS()>:
c0011cb1:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c0011cb6:	c3                   	ret    

c0011cb7 <Virt::setupPageSwapping(int)>:
c0011cb7:	57                   	push   edi
c0011cb8:	56                   	push   esi
c0011cb9:	53                   	push   ebx
c0011cba:	83 ec 1c             	sub    esp,0x1c
c0011cbd:	68 14 01 00 00       	push   0x114
c0011cc2:	e8 79 db ff ff       	call   c000f840 <malloc>
c0011cc7:	83 c4 0c             	add    esp,0xc
c0011cca:	89 c6                	mov    esi,eax
c0011ccc:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c0011cd2:	68 12 a4 02 c0       	push   0xc002a412
c0011cd7:	50                   	push   eax
c0011cd8:	e8 37 14 00 00       	call   c0013114 <File::File(char const*, Process*)>
c0011cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce0:	e8 0b 16 00 00       	call   c00132f0 <File::unlink()>
c0011ce5:	58                   	pop    eax
c0011ce6:	5a                   	pop    edx
c0011ce7:	6a 12                	push   0x12
c0011ce9:	56                   	push   esi
c0011cea:	e8 89 14 00 00       	call   c0013178 <File::open(FileOpenMode)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	85 c0                	test   eax,eax
c0011cf4:	0f 85 ca 00 00 00    	jne    c0011dc4 <Virt::setupPageSwapping(int)+0x10d>
c0011cfa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d06:	c1 e3 08             	shl    ebx,0x8
c0011d09:	83 ec 0c             	sub    esp,0xc
c0011d0c:	68 00 00 01 00       	push   0x10000
c0011d11:	e8 2a db ff ff       	call   c000f840 <malloc>
c0011d16:	83 c4 0c             	add    esp,0xc
c0011d19:	89 c7                	mov    edi,eax
c0011d1b:	68 00 00 01 00       	push   0x10000
c0011d20:	6a 00                	push   0x0
c0011d22:	50                   	push   eax
c0011d23:	e8 50 ea fe ff       	call   c0000778 <memset>
c0011d28:	83 c4 10             	add    esp,0x10
c0011d2b:	85 db                	test   ebx,ebx
c0011d2d:	79 03                	jns    c0011d32 <Virt::setupPageSwapping(int)+0x7b>
c0011d2f:	83 c3 0f             	add    ebx,0xf
c0011d32:	c1 fb 04             	sar    ebx,0x4
c0011d35:	4b                   	dec    ebx
c0011d36:	83 fb ff             	cmp    ebx,0xffffffff
c0011d39:	74 4b                	je     c0011d86 <Virt::setupPageSwapping(int)+0xcf>
c0011d3b:	83 ec 0c             	sub    esp,0xc
c0011d3e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d40:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d44:	52                   	push   edx
c0011d45:	57                   	push   edi
c0011d46:	6a 00                	push   0x0
c0011d48:	68 00 00 01 00       	push   0x10000
c0011d4d:	56                   	push   esi
c0011d4e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d51:	83 c4 20             	add    esp,0x20
c0011d54:	85 c0                	test   eax,eax
c0011d56:	75 59                	jne    c0011db1 <Virt::setupPageSwapping(int)+0xfa>
c0011d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d5c:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d61:	74 d2                	je     c0011d35 <Virt::setupPageSwapping(int)+0x7e>
c0011d63:	83 ec 08             	sub    esp,0x8
c0011d66:	4b                   	dec    ebx
c0011d67:	50                   	push   eax
c0011d68:	68 65 a4 02 c0       	push   0xc002a465
c0011d6d:	e8 4a 0e 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0011d72:	c7 04 24 6e a4 02 c0 	mov    DWORD PTR [esp],0xc002a46e
c0011d79:	e8 b9 84 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	83 fb ff             	cmp    ebx,0xffffffff
c0011d84:	75 b5                	jne    c0011d3b <Virt::setupPageSwapping(int)+0x84>
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	56                   	push   esi
c0011d8a:	e8 47 14 00 00       	call   c00131d6 <File::close()>
c0011d8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d92:	e8 c9 da ff ff       	call   c000f860 <rfree>
c0011d97:	83 c4 10             	add    esp,0x10
c0011d9a:	85 f6                	test   esi,esi
c0011d9c:	74 0c                	je     c0011daa <Virt::setupPageSwapping(int)+0xf3>
c0011d9e:	83 ec 0c             	sub    esp,0xc
c0011da1:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da3:	56                   	push   esi
c0011da4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011da7:	83 c4 10             	add    esp,0x10
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	5b                   	pop    ebx
c0011dae:	5e                   	pop    esi
c0011daf:	5f                   	pop    edi
c0011db0:	c3                   	ret    
c0011db1:	83 ec 08             	sub    esp,0x8
c0011db4:	50                   	push   eax
c0011db5:	68 4d a4 02 c0       	push   0xc002a44d
c0011dba:	e8 fd 0d 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	eb 94                	jmp    c0011d58 <Virt::setupPageSwapping(int)+0xa1>
c0011dc4:	83 ec 08             	sub    esp,0x8
c0011dc7:	50                   	push   eax
c0011dc8:	68 29 a4 02 c0       	push   0xc002a429
c0011dcd:	e8 ea 0d 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0011dd2:	c7 04 24 32 a4 02 c0 	mov    DWORD PTR [esp],0xc002a432
c0011dd9:	e8 59 84 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	e9 14 ff ff ff       	jmp    c0011cfa <Virt::setupPageSwapping(int)+0x43>

c0011de6 <VAS::VAS()>:
c0011de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df5:	a3 44 e2 02 c0       	mov    ds:0xc002e244,eax
c0011dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfe:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e06:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e14:	90                   	nop
c0011e15:	c3                   	ret    

c0011e16 <VAS::VAS(VAS*)>:
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e24:	83 ec 0c             	sub    esp,0xc
c0011e27:	68 04 a2 02 c0       	push   0xc002a204
c0011e2c:	e8 06 84 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0011e31:	83 c4 10             	add    esp,0x10
c0011e34:	90                   	nop
c0011e35:	83 c4 0c             	add    esp,0xc
c0011e38:	c3                   	ret    
c0011e39:	90                   	nop

c0011e3a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e3e:	89 c2                	mov    edx,eax
c0011e40:	c1 e8 0a             	shr    eax,0xa
c0011e43:	c1 ea 16             	shr    edx,0x16
c0011e46:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e4b:	19 c9                	sbb    ecx,ecx
c0011e4d:	c1 e2 0c             	shl    edx,0xc
c0011e50:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e56:	25 fc 0f 00 00       	and    eax,0xffc
c0011e5b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e62:	01 d0                	add    eax,edx
c0011e64:	c3                   	ret    
c0011e65:	90                   	nop

c0011e66 <VAS::getPageTableEntry(unsigned long)>:
c0011e66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e6a:	89 ca                	mov    edx,ecx
c0011e6c:	c1 e9 0a             	shr    ecx,0xa
c0011e6f:	c1 ea 16             	shr    edx,0x16
c0011e72:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e78:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e7e:	c1 e0 0c             	shl    eax,0xc
c0011e81:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e84:	c3                   	ret    

c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e85:	57                   	push   edi
c0011e86:	56                   	push   esi
c0011e87:	be 01 00 00 00       	mov    esi,0x1
c0011e8c:	53                   	push   ebx
c0011e8d:	83 ec 10             	sub    esp,0x10
c0011e90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e94:	c1 eb 0c             	shr    ebx,0xc
c0011e97:	eb 3f                	jmp    c0011ed8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e99:	e8 13 fe ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0011e9e:	83 ec 08             	sub    esp,0x8
c0011ea1:	57                   	push   edi
c0011ea2:	50                   	push   eax
c0011ea3:	e8 be ff ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ead:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011eb1:	f6 c4 04             	test   ah,0x4
c0011eb4:	75 5f                	jne    c0011f15 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eb6:	80 fa 04             	cmp    dl,0x4
c0011eb9:	74 78                	je     c0011f33 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ebb:	80 fa 02             	cmp    dl,0x2
c0011ebe:	0f 84 88 00 00 00    	je     c0011f4c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ec4:	80 fa 03             	cmp    dl,0x3
c0011ec7:	0f 84 ad 00 00 00    	je     c0011f7a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ecd:	fe ca                	dec    dl
c0011ecf:	0f 84 92 00 00 00    	je     c0011f67 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ed5:	43                   	inc    ebx
c0011ed6:	31 f6                	xor    esi,esi
c0011ed8:	53                   	push   ebx
c0011ed9:	e8 1f fc ff ff       	call   c0011afd <Virt::getPageState(unsigned long)>
c0011ede:	5f                   	pop    edi
c0011edf:	89 df                	mov    edi,ebx
c0011ee1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ee5:	c1 e7 0c             	shl    edi,0xc
c0011ee8:	84 c0                	test   al,al
c0011eea:	75 ad                	jne    c0011e99 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011eec:	83 ec 0c             	sub    esp,0xc
c0011eef:	68 74 a4 02 c0       	push   0xc002a474
c0011ef4:	e8 3e 83 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0011ef9:	e8 b3 fd ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0011efe:	5a                   	pop    edx
c0011eff:	59                   	pop    ecx
c0011f00:	57                   	push   edi
c0011f01:	50                   	push   eax
c0011f02:	e8 5f ff ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f0c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f10:	f6 c4 04             	test   ah,0x4
c0011f13:	74 c0                	je     c0011ed5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f15:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f1e:	83 ec 0c             	sub    esp,0xc
c0011f21:	50                   	push   eax
c0011f22:	e8 2e df ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2e:	80 fa 04             	cmp    dl,0x4
c0011f31:	75 88                	jne    c0011ebb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f33:	89 f0                	mov    eax,esi
c0011f35:	84 c0                	test   al,al
c0011f37:	75 47                	jne    c0011f80 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f39:	c7 44 24 20 28 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a228
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	5b                   	pop    ebx
c0011f45:	5e                   	pop    esi
c0011f46:	5f                   	pop    edi
c0011f47:	e9 eb 82 00 00       	jmp    c001a237 <Krnl::panic(char const*)>
c0011f4c:	89 f0                	mov    eax,esi
c0011f4e:	84 c0                	test   al,al
c0011f50:	75 15                	jne    c0011f67 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f52:	83 ec 0c             	sub    esp,0xc
c0011f55:	68 90 a4 02 c0       	push   0xc002a490
c0011f5a:	e8 d8 82 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	e9 6e ff ff ff       	jmp    c0011ed5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f67:	83 ec 08             	sub    esp,0x8
c0011f6a:	6a 00                	push   0x0
c0011f6c:	53                   	push   ebx
c0011f6d:	e8 56 fb ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f72:	83 c4 10             	add    esp,0x10
c0011f75:	e9 5b ff ff ff       	jmp    c0011ed5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f7a:	89 f0                	mov    eax,esi
c0011f7c:	84 c0                	test   al,al
c0011f7e:	75 15                	jne    c0011f95 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f80:	83 ec 08             	sub    esp,0x8
c0011f83:	6a 00                	push   0x0
c0011f85:	53                   	push   ebx
c0011f86:	e8 3d fb ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	5b                   	pop    ebx
c0011f92:	5e                   	pop    esi
c0011f93:	5f                   	pop    edi
c0011f94:	c3                   	ret    
c0011f95:	c7 44 24 20 ac a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a4ac
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	5b                   	pop    ebx
c0011fa1:	5e                   	pop    esi
c0011fa2:	5f                   	pop    edi
c0011fa3:	e9 8f 82 00 00       	jmp    c001a237 <Krnl::panic(char const*)>

c0011fa8 <VAS::freeAllocatedPages(unsigned long)>:
c0011fa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fb0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fb4:	74 09                	je     c0011fbf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fb6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fba:	e9 c6 fe ff ff       	jmp    c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fbf:	c7 44 24 04 4c a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a24c
c0011fc7:	e9 f0 0b 00 00       	jmp    c0012bbc <Dbg::kprintf(char const*, ...)>

c0011fcc <VAS::virtualToPhysical(unsigned long)>:
c0011fcc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd4:	e8 8d fe ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0011fd9:	5a                   	pop    edx
c0011fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fdc:	59                   	pop    ecx
c0011fdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe2:	c3                   	ret    
c0011fe3:	90                   	nop

c0011fe4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fe4:	55                   	push   ebp
c0011fe5:	57                   	push   edi
c0011fe6:	56                   	push   esi
c0011fe7:	53                   	push   ebx
c0011fe8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011fec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ff0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ff4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ff8:	85 db                	test   ebx,ebx
c0011ffa:	7e 22                	jle    c001201e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ffc:	c1 e3 0c             	shl    ebx,0xc
c0011fff:	01 f3                	add    ebx,esi
c0012001:	56                   	push   esi
c0012002:	81 c6 00 10 00 00    	add    esi,0x1000
c0012008:	55                   	push   ebp
c0012009:	e8 58 fe ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c001200e:	5a                   	pop    edx
c001200f:	59                   	pop    ecx
c0012010:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012012:	21 f9                	and    ecx,edi
c0012014:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012018:	39 f3                	cmp    ebx,esi
c001201a:	89 08                	mov    DWORD PTR [eax],ecx
c001201c:	75 e3                	jne    c0012001 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001201e:	5b                   	pop    ebx
c001201f:	5e                   	pop    esi
c0012020:	5f                   	pop    edi
c0012021:	5d                   	pop    ebp
c0012022:	c3                   	ret    
c0012023:	90                   	nop

c0012024 <VAS::setToWriteCombining(unsigned long, int)>:
c0012024:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0012029:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012036:	75 01                	jne    c0012039 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012038:	c3                   	ret    
c0012039:	68 80 00 00 00       	push   0x80
c001203e:	6a ff                	push   0xffffffff
c0012040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001204c:	e8 93 ff ff ff       	call   c0011fe4 <VAS::reflagRange(unsigned long, int, int, int)>
c0012051:	83 c4 14             	add    esp,0x14
c0012054:	c3                   	ret    
c0012055:	90                   	nop

c0012056 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012056:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001205b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001205f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012066:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012069:	19 c0                	sbb    eax,eax
c001206b:	83 ca 03             	or     edx,0x3
c001206e:	83 e0 fc             	and    eax,0xfffffffc
c0012071:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012078:	0f 20 d8             	mov    eax,cr3
c001207b:	0f 22 d8             	mov    cr3,eax
c001207e:	c3                   	ret    
c001207f:	90                   	nop

c0012080 <VAS::~VAS()>:
c0012080:	83 ec 2c             	sub    esp,0x2c
c0012083:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001208b:	e8 cc b9 00 00       	call   c001da5c <lockScheduler()>
c0012090:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012095:	8b 00                	mov    eax,DWORD PTR [eax]
c0012097:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001209a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120a0:	83 ec 04             	sub    esp,0x4
c00120a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120a7:	6a 01                	push   0x1
c00120a9:	50                   	push   eax
c00120aa:	e8 a7 ff ff ff       	call   c0012056 <VAS::mapOtherVASIn(bool, VAS*)>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ba:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120c2:	0f 8f d7 00 00 00    	jg     c001219f <VAS::~VAS()+0x11f>
c00120c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120d3:	c1 e2 02             	shl    edx,0x2
c00120d6:	01 d0                	add    eax,edx
c00120d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e2:	83 e0 01             	and    eax,0x1
c00120e5:	0f 84 ab 00 00 00    	je     c0012196 <VAS::~VAS()+0x116>
c00120eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120f3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120fb:	7f 75                	jg     c0012172 <VAS::~VAS()+0xf2>
c00120fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012101:	c1 e0 0a             	shl    eax,0xa
c0012104:	89 c2                	mov    edx,eax
c0012106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001210a:	01 d0                	add    eax,edx
c001210c:	c1 e0 0c             	shl    eax,0xc
c001210f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012113:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012118:	8b 00                	mov    eax,DWORD PTR [eax]
c001211a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012123:	83 ec 04             	sub    esp,0x4
c0012126:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001212a:	6a 01                	push   0x1
c001212c:	50                   	push   eax
c001212d:	e8 08 fd ff ff       	call   c0011e3a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012139:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001213d:	8b 00                	mov    eax,DWORD PTR [eax]
c001213f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012147:	25 01 04 00 00       	and    eax,0x401
c001214c:	3d 01 04 00 00       	cmp    eax,0x401
c0012151:	75 19                	jne    c001216c <VAS::~VAS()+0xec>
c0012153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012157:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215c:	83 ec 0c             	sub    esp,0xc
c001215f:	50                   	push   eax
c0012160:	e8 f0 dc ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001216c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012170:	eb 81                	jmp    c00120f3 <VAS::~VAS()+0x73>
c0012172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012176:	25 00 04 00 00       	and    eax,0x400
c001217b:	74 19                	je     c0012196 <VAS::~VAS()+0x116>
c001217d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012181:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	50                   	push   eax
c001218a:	e8 c6 dc ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c001218f:	83 c4 10             	add    esp,0x10
c0012192:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012196:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001219a:	e9 1b ff ff ff       	jmp    c00120ba <VAS::~VAS()+0x3a>
c001219f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121a6:	83 ec 0c             	sub    esp,0xc
c00121a9:	50                   	push   eax
c00121aa:	e8 d6 fc ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b9:	83 ec 0c             	sub    esp,0xc
c00121bc:	50                   	push   eax
c00121bd:	e8 93 dc ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c00121c2:	83 c4 10             	add    esp,0x10
c00121c5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121cd:	c1 e0 02             	shl    eax,0x2
c00121d0:	83 ec 08             	sub    esp,0x8
c00121d3:	50                   	push   eax
c00121d4:	68 70 a2 02 c0       	push   0xc002a270
c00121d9:	e8 de 09 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	e8 78 b8 00 00       	call   c001da5e <unlockScheduler()>
c00121e6:	90                   	nop
c00121e7:	83 c4 2c             	add    esp,0x2c
c00121ea:	c3                   	ret    
c00121eb:	90                   	nop

c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121ec:	55                   	push   ebp
c00121ed:	57                   	push   edi
c00121ee:	56                   	push   esi
c00121ef:	53                   	push   ebx
c00121f0:	83 ec 1c             	sub    esp,0x1c
c00121f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121fb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012201:	77 08                	ja     c001220b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012203:	0f 20 d8             	mov    eax,cr3
c0012206:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012209:	75 47                	jne    c0012252 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001220b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001220f:	09 d8                	or     eax,ebx
c0012211:	a9 ff 0f 00 00       	test   eax,0xfff
c0012216:	75 57                	jne    c001226f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012218:	89 de                	mov    esi,ebx
c001221a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001221d:	c1 ee 16             	shr    esi,0x16
c0012220:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012227:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001222b:	74 54                	je     c0012281 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001222d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012231:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012237:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001223b:	c1 e6 0c             	shl    esi,0xc
c001223e:	c1 eb 0a             	shr    ebx,0xa
c0012241:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012247:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001224a:	83 c4 1c             	add    esp,0x1c
c001224d:	5b                   	pop    ebx
c001224e:	5e                   	pop    esi
c001224f:	5f                   	pop    edi
c0012250:	5d                   	pop    ebp
c0012251:	c3                   	ret    
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	68 90 a2 02 c0       	push   0xc002a290
c001225a:	e8 5d 09 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012266:	09 d8                	or     eax,ebx
c0012268:	a9 ff 0f 00 00       	test   eax,0xfff
c001226d:	74 a9                	je     c0012218 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001226f:	83 ec 0c             	sub    esp,0xc
c0012272:	68 f8 a2 02 c0       	push   0xc002a2f8
c0012277:	e8 bb 7f 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001227c:	83 c4 10             	add    esp,0x10
c001227f:	eb 97                	jmp    c0012218 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012281:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012285:	e8 55 dc ff ff       	call   c000fedf <Phys::allocatePage()>
c001228a:	89 c5                	mov    ebp,eax
c001228c:	e8 20 fa ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012298:	6a 01                	push   0x1
c001229a:	e8 82 f8 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001229f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122a6:	6a 01                	push   0x1
c00122a8:	50                   	push   eax
c00122a9:	55                   	push   ebp
c00122aa:	81 cd 07 04 00 00    	or     ebp,0x407
c00122b0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b4:	51                   	push   ecx
c00122b5:	e8 26 02 00 00       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ba:	83 c4 1c             	add    esp,0x1c
c00122bd:	68 00 10 00 00       	push   0x1000
c00122c2:	6a 00                	push   0x0
c00122c4:	50                   	push   eax
c00122c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c9:	e8 aa e4 fe ff       	call   c0000778 <memset>
c00122ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122d5:	e8 ab fb ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c00122da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122de:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122e7:	e9 41 ff ff ff       	jmp    c001222d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122ec <VAS::allocatePages(int, int)>:
c00122ec:	55                   	push   ebp
c00122ed:	57                   	push   edi
c00122ee:	56                   	push   esi
c00122ef:	53                   	push   ebx
c00122f0:	83 ec 1c             	sub    esp,0x1c
c00122f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122f7:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00122fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012302:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012308:	83 e0 01             	and    eax,0x1
c001230b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001230f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012313:	0f 85 cc 00 00 00    	jne    c00123e5 <VAS::allocatePages(int, int)+0xf9>
c0012319:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001231c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012320:	85 c0                	test   eax,eax
c0012322:	0f 84 a1 00 00 00    	je     c00123c9 <VAS::allocatePages(int, int)+0xdd>
c0012328:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001232c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012330:	c1 e6 0c             	shl    esi,0xc
c0012333:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012337:	85 c0                	test   eax,eax
c0012339:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001233c:	7e 33                	jle    c0012371 <VAS::allocatePages(int, int)+0x85>
c001233e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012342:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012346:	81 cd 00 04 00 00    	or     ebp,0x400
c001234c:	e8 8e db ff ff       	call   c000fedf <Phys::allocatePage()>
c0012351:	55                   	push   ebp
c0012352:	53                   	push   ebx
c0012353:	50                   	push   eax
c0012354:	57                   	push   edi
c0012355:	e8 92 fe ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012362:	74 03                	je     c0012367 <VAS::allocatePages(int, int)+0x7b>
c0012364:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012367:	81 c3 00 10 00 00    	add    ebx,0x1000
c001236d:	39 de                	cmp    esi,ebx
c001236f:	75 db                	jne    c001234c <VAS::allocatePages(int, int)+0x60>
c0012371:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012376:	75 12                	jne    c001238a <VAS::allocatePages(int, int)+0x9e>
c0012378:	0f 20 d8             	mov    eax,cr3
c001237b:	0f 22 d8             	mov    cr3,eax
c001237e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012382:	83 c4 1c             	add    esp,0x1c
c0012385:	5b                   	pop    ebx
c0012386:	5e                   	pop    esi
c0012387:	5f                   	pop    edi
c0012388:	5d                   	pop    ebp
c0012389:	c3                   	ret    
c001238a:	c1 ee 0a             	shr    esi,0xa
c001238d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012391:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012397:	c1 eb 0a             	shr    ebx,0xa
c001239a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123a6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123ac:	39 c3                	cmp    ebx,eax
c00123ae:	77 ce                	ja     c001237e <VAS::allocatePages(int, int)+0x92>
c00123b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b9:	39 d8                	cmp    eax,ebx
c00123bb:	73 f3                	jae    c00123b0 <VAS::allocatePages(int, int)+0xc4>
c00123bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123c1:	83 c4 1c             	add    esp,0x1c
c00123c4:	5b                   	pop    ebx
c00123c5:	5e                   	pop    esi
c00123c6:	5f                   	pop    edi
c00123c7:	5d                   	pop    ebp
c00123c8:	c3                   	ret    
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	68 1c a3 02 c0       	push   0xc002a31c
c00123d1:	e8 61 7e 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00123d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123dd:	83 c4 10             	add    esp,0x10
c00123e0:	e9 43 ff ff ff       	jmp    c0012328 <VAS::allocatePages(int, int)+0x3c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ec:	e8 30 f7 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00123f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00123fd:	0f 87 9b 00 00 00    	ja     c001249e <VAS::allocatePages(int, int)+0x1b2>
c0012403:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012407:	85 d2                	test   edx,edx
c0012409:	7e 3c                	jle    c0012447 <VAS::allocatePages(int, int)+0x15b>
c001240b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001240f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012413:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012417:	c1 e5 0c             	shl    ebp,0xc
c001241a:	81 ce 00 04 00 00    	or     esi,0x400
c0012420:	01 dd                	add    ebp,ebx
c0012422:	e8 b8 da ff ff       	call   c000fedf <Phys::allocatePage()>
c0012427:	56                   	push   esi
c0012428:	53                   	push   ebx
c0012429:	50                   	push   eax
c001242a:	57                   	push   edi
c001242b:	e8 bc fd ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012438:	74 03                	je     c001243d <VAS::allocatePages(int, int)+0x151>
c001243a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012443:	39 dd                	cmp    ebp,ebx
c0012445:	75 db                	jne    c0012422 <VAS::allocatePages(int, int)+0x136>
c0012447:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001244c:	0f 84 26 ff ff ff    	je     c0012378 <VAS::allocatePages(int, int)+0x8c>
c0012452:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001245a:	89 d3                	mov    ebx,edx
c001245c:	c1 e0 0c             	shl    eax,0xc
c001245f:	c1 eb 0a             	shr    ebx,0xa
c0012462:	01 d0                	add    eax,edx
c0012464:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001246a:	c1 e8 0a             	shr    eax,0xa
c001246d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012473:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012478:	2d 00 00 40 00       	sub    eax,0x400000
c001247d:	39 c3                	cmp    ebx,eax
c001247f:	0f 87 f9 fe ff ff    	ja     c001237e <VAS::allocatePages(int, int)+0x92>
c0012485:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012488:	81 c3 00 10 00 00    	add    ebx,0x1000
c001248e:	39 d8                	cmp    eax,ebx
c0012490:	73 f3                	jae    c0012485 <VAS::allocatePages(int, int)+0x199>
c0012492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012496:	83 c4 1c             	add    esp,0x1c
c0012499:	5b                   	pop    ebx
c001249a:	5e                   	pop    esi
c001249b:	5f                   	pop    edi
c001249c:	5d                   	pop    ebp
c001249d:	c3                   	ret    
c001249e:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00124a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124b0:	0f 84 4d ff ff ff    	je     c0012403 <VAS::allocatePages(int, int)+0x117>
c00124b6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124be:	e9 40 ff ff ff       	jmp    c0012403 <VAS::allocatePages(int, int)+0x117>
c00124c3:	90                   	nop

c00124c4 <VAS::setCPUSpecific(unsigned long)>:
c00124c4:	83 ec 0c             	sub    esp,0xc
c00124c7:	6a 05                	push   0x5
c00124c9:	68 00 00 40 c2       	push   0xc2400000
c00124ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d6:	e8 11 fd ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00124db:	83 c4 1c             	add    esp,0x1c
c00124de:	c3                   	ret    
c00124df:	90                   	nop

c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124e0:	55                   	push   ebp
c00124e1:	57                   	push   edi
c00124e2:	56                   	push   esi
c00124e3:	53                   	push   ebx
c00124e4:	83 ec 1c             	sub    esp,0x1c
c00124e7:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00124ec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124fa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012500:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012504:	83 e0 01             	and    eax,0x1
c0012507:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001250b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001250f:	85 c0                	test   eax,eax
c0012511:	7e 39                	jle    c001254c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012513:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012517:	89 f3                	mov    ebx,esi
c0012519:	c1 e0 0c             	shl    eax,0xc
c001251c:	01 f0                	add    eax,esi
c001251e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012522:	55                   	push   ebp
c0012523:	53                   	push   ebx
c0012524:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012528:	29 f0                	sub    eax,esi
c001252a:	01 d8                	add    eax,ebx
c001252c:	50                   	push   eax
c001252d:	57                   	push   edi
c001252e:	e8 b9 fc ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001253b:	74 03                	je     c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001253d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012540:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012546:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001254a:	75 d6                	jne    c0012522 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001254c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012551:	75 10                	jne    c0012563 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012553:	0f 20 d8             	mov    eax,cr3
c0012556:	0f 22 d8             	mov    cr3,eax
c0012559:	83 c4 1c             	add    esp,0x1c
c001255c:	89 f0                	mov    eax,esi
c001255e:	5b                   	pop    ebx
c001255f:	5e                   	pop    esi
c0012560:	5f                   	pop    edi
c0012561:	5d                   	pop    ebp
c0012562:	c3                   	ret    
c0012563:	89 f3                	mov    ebx,esi
c0012565:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012569:	c1 eb 0a             	shr    ebx,0xa
c001256c:	c1 e0 0c             	shl    eax,0xc
c001256f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012575:	01 f0                	add    eax,esi
c0012577:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001257d:	c1 e8 0a             	shr    eax,0xa
c0012580:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012585:	2d 00 00 40 00       	sub    eax,0x400000
c001258a:	39 c3                	cmp    ebx,eax
c001258c:	77 cb                	ja     c0012559 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001258e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012591:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012597:	39 d8                	cmp    eax,ebx
c0012599:	73 f3                	jae    c001258e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001259b:	83 c4 1c             	add    esp,0x1c
c001259e:	89 f0                	mov    eax,esi
c00125a0:	5b                   	pop    ebx
c00125a1:	5e                   	pop    esi
c00125a2:	5f                   	pop    edi
c00125a3:	5d                   	pop    ebp
c00125a4:	c3                   	ret    
c00125a5:	90                   	nop

c00125a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125a6:	55                   	push   ebp
c00125a7:	57                   	push   edi
c00125a8:	56                   	push   esi
c00125a9:	53                   	push   ebx
c00125aa:	83 ec 1c             	sub    esp,0x1c
c00125ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125b5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125b9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125bd:	a9 ff 0f 00 00       	test   eax,0xfff
c00125c2:	75 4a                	jne    c001260e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125cb:	c1 eb 16             	shr    ebx,0x16
c00125ce:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125d5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125d9:	74 4d                	je     c0012628 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125df:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125e3:	c1 e8 0a             	shr    eax,0xa
c00125e6:	80 fa 01             	cmp    dl,0x1
c00125e9:	19 d2                	sbb    edx,edx
c00125eb:	c1 e3 0c             	shl    ebx,0xc
c00125ee:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125f2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125f8:	25 fc 0f 00 00       	and    eax,0xffc
c00125fd:	01 d8                	add    eax,ebx
c00125ff:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012606:	83 c4 1c             	add    esp,0x1c
c0012609:	5b                   	pop    ebx
c001260a:	5e                   	pop    esi
c001260b:	5f                   	pop    edi
c001260c:	5d                   	pop    ebp
c001260d:	c3                   	ret    
c001260e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012612:	83 ec 0c             	sub    esp,0xc
c0012615:	68 48 a3 02 c0       	push   0xc002a348
c001261a:	e8 18 7c 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012626:	eb 9c                	jmp    c00125c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012628:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001262c:	e8 ae d8 ff ff       	call   c000fedf <Phys::allocatePage()>
c0012631:	89 c5                	mov    ebp,eax
c0012633:	e8 79 f6 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0012638:	83 ec 0c             	sub    esp,0xc
c001263b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001263f:	6a 01                	push   0x1
c0012641:	e8 db f4 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0012646:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001264d:	6a 01                	push   0x1
c001264f:	50                   	push   eax
c0012650:	55                   	push   ebp
c0012651:	81 cd 07 04 00 00    	or     ebp,0x407
c0012657:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001265b:	51                   	push   ecx
c001265c:	e8 7f fe ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012661:	83 c4 1c             	add    esp,0x1c
c0012664:	68 00 10 00 00       	push   0x1000
c0012669:	6a 00                	push   0x0
c001266b:	50                   	push   eax
c001266c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012670:	e8 03 e1 fe ff       	call   c0000778 <memset>
c0012675:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012679:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001267c:	e8 04 f8 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c0012681:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001268a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001268e:	e9 48 ff ff ff       	jmp    c00125db <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012693:	90                   	nop

c0012694 <VAS::VAS(bool)>:
c0012694:	53                   	push   ebx
c0012695:	83 ec 28             	sub    esp,0x28
c0012698:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001269c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126af:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126b3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126b6:	e8 24 d8 ff ff       	call   c000fedf <Phys::allocatePage()>
c00126bb:	89 c2                	mov    edx,eax
c00126bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126c4:	e8 e8 f5 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c00126c9:	89 c3                	mov    ebx,eax
c00126cb:	83 ec 0c             	sub    esp,0xc
c00126ce:	6a 01                	push   0x1
c00126d0:	e8 4c f4 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	89 c2                	mov    edx,eax
c00126da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126e1:	83 ec 0c             	sub    esp,0xc
c00126e4:	6a 03                	push   0x3
c00126e6:	6a 01                	push   0x1
c00126e8:	52                   	push   edx
c00126e9:	50                   	push   eax
c00126ea:	53                   	push   ebx
c00126eb:	e8 f0 fd ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f0:	83 c4 20             	add    esp,0x20
c00126f3:	89 c2                	mov    edx,eax
c00126f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00126fc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012704:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001270c:	7f 1c                	jg     c001272a <VAS::VAS(bool)+0x96>
c001270e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012712:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012715:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012719:	c1 e2 02             	shl    edx,0x2
c001271c:	01 d0                	add    eax,edx
c001271e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012724:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012728:	eb da                	jmp    c0012704 <VAS::VAS(bool)+0x70>
c001272a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012732:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001273a:	7f 7a                	jg     c00127b6 <VAS::VAS(bool)+0x122>
c001273c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012740:	2d 00 02 00 00       	sub    eax,0x200
c0012745:	c1 e0 0c             	shl    eax,0xc
c0012748:	83 c8 03             	or     eax,0x3
c001274b:	89 c2                	mov    edx,eax
c001274d:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0012752:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012758:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001275e:	83 e0 10             	and    eax,0x10
c0012761:	84 c0                	test   al,al
c0012763:	74 07                	je     c001276c <VAS::VAS(bool)+0xd8>
c0012765:	b8 00 01 00 00       	mov    eax,0x100
c001276a:	eb 05                	jmp    c0012771 <VAS::VAS(bool)+0xdd>
c001276c:	b8 00 00 00 00       	mov    eax,0x0
c0012771:	09 d0                	or     eax,edx
c0012773:	89 c1                	mov    ecx,eax
c0012775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012779:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001277c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012780:	c1 e2 02             	shl    edx,0x2
c0012783:	01 d0                	add    eax,edx
c0012785:	89 ca                	mov    edx,ecx
c0012787:	89 10                	mov    DWORD PTR [eax],edx
c0012789:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001278d:	2d 40 03 00 00       	sub    eax,0x340
c0012792:	83 f8 7f             	cmp    eax,0x7f
c0012795:	77 16                	ja     c00127ad <VAS::VAS(bool)+0x119>
c0012797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001279e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a2:	c1 e2 02             	shl    edx,0x2
c00127a5:	01 d0                	add    eax,edx
c00127a7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127b1:	e9 7c ff ff ff       	jmp    c0012732 <VAS::VAS(bool)+0x9e>
c00127b6:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00127bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127c7:	83 e0 10             	and    eax,0x10
c00127ca:	84 c0                	test   al,al
c00127cc:	74 07                	je     c00127d5 <VAS::VAS(bool)+0x141>
c00127ce:	b8 03 41 00 00       	mov    eax,0x4103
c00127d3:	eb 05                	jmp    c00127da <VAS::VAS(bool)+0x146>
c00127d5:	b8 03 40 00 00       	mov    eax,0x4003
c00127da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127de:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127e7:	89 02                	mov    DWORD PTR [edx],eax
c00127e9:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00127ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127fa:	83 ec 08             	sub    esp,0x8
c00127fd:	50                   	push   eax
c00127fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012802:	e8 bd fc ff ff       	call   c00124c4 <VAS::setCPUSpecific(unsigned long)>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012811:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0012816:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001281c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012822:	83 e0 10             	and    eax,0x10
c0012825:	84 c0                	test   al,al
c0012827:	74 07                	je     c0012830 <VAS::VAS(bool)+0x19c>
c0012829:	b8 00 01 00 00       	mov    eax,0x100
c001282e:	eb 05                	jmp    c0012835 <VAS::VAS(bool)+0x1a1>
c0012830:	b8 00 00 00 00       	mov    eax,0x0
c0012835:	09 c2                	or     edx,eax
c0012837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001283e:	05 fc 0f 00 00       	add    eax,0xffc
c0012843:	83 ca 03             	or     edx,0x3
c0012846:	89 10                	mov    DWORD PTR [eax],edx
c0012848:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001284d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012853:	83 ec 0c             	sub    esp,0xc
c0012856:	50                   	push   eax
c0012857:	e8 72 1a 00 00       	call   c00142ce <Device::getName()>
c001285c:	83 c4 10             	add    esp,0x10
c001285f:	83 ec 08             	sub    esp,0x8
c0012862:	68 c6 a4 02 c0       	push   0xc002a4c6
c0012867:	50                   	push   eax
c0012868:	e8 53 e0 fe ff       	call   c00008c0 <strcmp>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	85 c0                	test   eax,eax
c0012872:	0f 94 c0             	sete   al
c0012875:	84 c0                	test   al,al
c0012877:	74 70                	je     c00128e9 <VAS::VAS(bool)+0x255>
c0012879:	e8 c1 b1 00 00       	call   c001da3f <disableIRQs()>
c001287e:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0012883:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012889:	05 7c 09 00 00       	add    eax,0x97c
c001288e:	83 ec 0c             	sub    esp,0xc
c0012891:	50                   	push   eax
c0012892:	e8 25 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001289f:	89 c3                	mov    ebx,eax
c00128a1:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00128a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ac:	05 7c 09 00 00       	add    eax,0x97c
c00128b1:	83 ec 0c             	sub    esp,0xc
c00128b4:	50                   	push   eax
c00128b5:	e8 02 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	83 ec 08             	sub    esp,0x8
c00128c0:	50                   	push   eax
c00128c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128c5:	e8 9c f5 ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c00128ca:	83 c4 10             	add    esp,0x10
c00128cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00128cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128d4:	6a 11                	push   0x11
c00128d6:	53                   	push   ebx
c00128d7:	50                   	push   eax
c00128d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128dc:	e8 0b f9 ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	e8 64 b1 00 00       	call   c001da4d <enableIRQs()>
c00128e9:	90                   	nop
c00128ea:	83 c4 28             	add    esp,0x28
c00128ed:	5b                   	pop    ebx
c00128ee:	c3                   	ret    
c00128ef:	90                   	nop

c00128f0 <VAS::scanForSwappable()>:
c00128f0:	55                   	push   ebp
c00128f1:	31 ed                	xor    ebp,ebp
c00128f3:	57                   	push   edi
c00128f4:	56                   	push   esi
c00128f5:	be 00 00 40 00       	mov    esi,0x400000
c00128fa:	53                   	push   ebx
c00128fb:	83 ec 18             	sub    esp,0x18
c00128fe:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012902:	68 6c a3 02 c0       	push   0xc002a36c
c0012907:	e8 b0 02 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	eb 11                	jmp    c0012922 <VAS::scanForSwappable()+0x32>
c0012911:	83 c5 04             	add    ebp,0x4
c0012914:	81 c6 00 00 40 00    	add    esi,0x400000
c001291a:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c0012920:	74 64                	je     c0012986 <VAS::scanForSwappable()+0x96>
c0012922:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012925:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012929:	74 e6                	je     c0012911 <VAS::scanForSwappable()+0x21>
c001292b:	8d 9e 00 00 c0 ff    	lea    ebx,[esi-0x400000]
c0012931:	eb 0a                	jmp    c001293d <VAS::scanForSwappable()+0x4d>
c0012933:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012939:	39 de                	cmp    esi,ebx
c001293b:	74 d4                	je     c0012911 <VAS::scanForSwappable()+0x21>
c001293d:	83 ec 08             	sub    esp,0x8
c0012940:	53                   	push   ebx
c0012941:	57                   	push   edi
c0012942:	e8 1f f5 ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	8b 00                	mov    eax,DWORD PTR [eax]
c001294c:	89 c2                	mov    edx,eax
c001294e:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012954:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001295a:	75 d7                	jne    c0012933 <VAS::scanForSwappable()+0x43>
c001295c:	a8 01                	test   al,0x1
c001295e:	74 13                	je     c0012973 <VAS::scanForSwappable()+0x83>
c0012960:	83 ec 08             	sub    esp,0x8
c0012963:	53                   	push   ebx
c0012964:	68 90 a3 02 c0       	push   0xc002a390
c0012969:	e8 4e 02 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001296e:	83 c4 10             	add    esp,0x10
c0012971:	eb c0                	jmp    c0012933 <VAS::scanForSwappable()+0x43>
c0012973:	83 ec 08             	sub    esp,0x8
c0012976:	53                   	push   ebx
c0012977:	68 bc a3 02 c0       	push   0xc002a3bc
c001297c:	e8 3b 02 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	eb ad                	jmp    c0012933 <VAS::scanForSwappable()+0x43>
c0012986:	83 c4 0c             	add    esp,0xc
c0012989:	5b                   	pop    ebx
c001298a:	5e                   	pop    esi
c001298b:	5f                   	pop    edi
c001298c:	5d                   	pop    ebp
c001298d:	c3                   	ret    

c001298e <mapVASFirstTime>:
c001298e:	55                   	push   ebp
c001298f:	57                   	push   edi
c0012990:	56                   	push   esi
c0012991:	53                   	push   ebx
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001299a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299d:	4a                   	dec    edx
c001299e:	0f 84 9a 00 00 00    	je     c0012a3e <mapVASFirstTime+0xb0>
c00129a4:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00129a7:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00129aa:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00129af:	c1 e5 15             	shl    ebp,0x15
c00129b2:	be 00 90 e7 01       	mov    esi,0x1e79000
c00129b7:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00129bd:	29 eb                	sub    ebx,ebp
c00129bf:	29 ee                	sub    esi,ebp
c00129c1:	e8 19 d5 ff ff       	call   c000fedf <Phys::allocatePage()>
c00129c6:	83 ec 0c             	sub    esp,0xc
c00129c9:	68 03 04 00 00       	push   0x403
c00129ce:	6a 01                	push   0x1
c00129d0:	53                   	push   ebx
c00129d1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00129d7:	50                   	push   eax
c00129d8:	57                   	push   edi
c00129d9:	e8 02 fb ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129de:	83 c4 20             	add    esp,0x20
c00129e1:	39 f3                	cmp    ebx,esi
c00129e3:	75 dc                	jne    c00129c1 <mapVASFirstTime+0x33>
c00129e5:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00129ea:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00129ef:	29 ee                	sub    esi,ebp
c00129f1:	29 e8                	sub    eax,ebp
c00129f3:	89 c5                	mov    ebp,eax
c00129f5:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00129f9:	19 db                	sbb    ebx,ebx
c00129fb:	e8 df d4 ff ff       	call   c000fedf <Phys::allocatePage()>
c0012a00:	83 e3 04             	and    ebx,0x4
c0012a03:	83 ec 0c             	sub    esp,0xc
c0012a06:	81 c3 03 04 00 00    	add    ebx,0x403
c0012a0c:	53                   	push   ebx
c0012a0d:	6a 01                	push   0x1
c0012a0f:	56                   	push   esi
c0012a10:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012a16:	50                   	push   eax
c0012a17:	57                   	push   edi
c0012a18:	e8 c3 fa ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a1d:	83 c4 20             	add    esp,0x20
c0012a20:	39 f5                	cmp    ebp,esi
c0012a22:	75 d1                	jne    c00129f5 <mapVASFirstTime+0x67>
c0012a24:	0f 20 d8             	mov    eax,cr3
c0012a27:	0f 22 d8             	mov    cr3,eax
c0012a2a:	83 ec 0c             	sub    esp,0xc
c0012a2d:	57                   	push   edi
c0012a2e:	e8 bd fe ff ff       	call   c00128f0 <VAS::scanForSwappable()>
c0012a33:	83 c4 10             	add    esp,0x10
c0012a36:	83 c4 0c             	add    esp,0xc
c0012a39:	5b                   	pop    ebx
c0012a3a:	5e                   	pop    esi
c0012a3b:	5f                   	pop    edi
c0012a3c:	5d                   	pop    ebp
c0012a3d:	c3                   	ret    
c0012a3e:	83 ec 0c             	sub    esp,0xc
c0012a41:	68 d4 a4 02 c0       	push   0xc002a4d4
c0012a46:	e8 71 01 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	83 c4 0c             	add    esp,0xc
c0012a51:	5b                   	pop    ebx
c0012a52:	5e                   	pop    esi
c0012a53:	5f                   	pop    edi
c0012a54:	5d                   	pop    ebp
c0012a55:	c3                   	ret    

c0012a56 <__cxa_atexit>:
c0012a56:	31 c0                	xor    eax,eax
c0012a58:	c3                   	ret    

c0012a59 <__cxa_finalize>:
c0012a59:	c3                   	ret    

c0012a5a <__stack_chk_fail>:
c0012a5a:	55                   	push   ebp
c0012a5b:	89 e5                	mov    ebp,esp
c0012a5d:	83 ec 14             	sub    esp,0x14
c0012a60:	68 ed a4 02 c0       	push   0xc002a4ed
c0012a65:	e8 52 01 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012a6a:	58                   	pop    eax
c0012a6b:	5a                   	pop    edx
c0012a6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012a6f:	68 3d a5 02 c0       	push   0xc002a53d
c0012a74:	e8 43 01 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012a79:	59                   	pop    ecx
c0012a7a:	58                   	pop    eax
c0012a7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a7e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a81:	68 3d a5 02 c0       	push   0xc002a53d
c0012a86:	e8 31 01 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012a8b:	5a                   	pop    edx
c0012a8c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a8f:	59                   	pop    ecx
c0012a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a92:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a95:	68 3d a5 02 c0       	push   0xc002a53d
c0012a9a:	e8 1d 01 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012a9f:	5a                   	pop    edx
c0012aa0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012aa3:	59                   	pop    ecx
c0012aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aa8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012aab:	68 3d a5 02 c0       	push   0xc002a53d
c0012ab0:	e8 07 01 00 00       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0012ab5:	c7 04 24 45 a5 02 c0 	mov    DWORD PTR [esp],0xc002a545
c0012abc:	e8 76 77 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0012ac1:	83 c4 10             	add    esp,0x10
c0012ac4:	c9                   	leave  
c0012ac5:	c3                   	ret    

c0012ac6 <__cxa_pure_virtual>:
c0012ac6:	83 ec 18             	sub    esp,0x18
c0012ac9:	68 5d a5 02 c0       	push   0xc002a55d
c0012ace:	e8 64 77 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0012ad3:	83 c4 1c             	add    esp,0x1c
c0012ad6:	c3                   	ret    

c0012ad7 <operator new[](unsigned long)>:
c0012ad7:	e9 64 cd ff ff       	jmp    c000f840 <malloc>

c0012adc <operator delete(void*, unsigned long)>:
c0012adc:	e9 7f cd ff ff       	jmp    c000f860 <rfree>

c0012ae1 <operator delete[](void*)>:
c0012ae1:	e9 7a cd ff ff       	jmp    c000f860 <rfree>

c0012ae6 <operator delete[](void*, unsigned long)>:
c0012ae6:	e9 75 cd ff ff       	jmp    c000f860 <rfree>

c0012aeb <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012aeb:	57                   	push   edi
c0012aec:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012af1:	56                   	push   esi
c0012af2:	be 70 a5 02 c0       	mov    esi,0xc002a570
c0012af7:	53                   	push   ebx
c0012af8:	83 ec 40             	sub    esp,0x40
c0012afb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012aff:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012b03:	fc                   	cld    
c0012b04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b06:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012b0a:	83 f9 3e             	cmp    ecx,0x3e
c0012b0d:	7e 05                	jle    c0012b14 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012b0f:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012b14:	89 df                	mov    edi,ebx
c0012b16:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012b1a:	eb 02                	jmp    c0012b1e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012b1c:	89 c7                	mov    edi,eax
c0012b1e:	31 d2                	xor    edx,edx
c0012b20:	46                   	inc    esi
c0012b21:	89 f8                	mov    eax,edi
c0012b23:	f7 f1                	div    ecx
c0012b25:	39 cf                	cmp    edi,ecx
c0012b27:	73 f3                	jae    c0012b1c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012b29:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012b2c:	eb 02                	jmp    c0012b30 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012b2e:	89 c3                	mov    ebx,eax
c0012b30:	31 d2                	xor    edx,edx
c0012b32:	4e                   	dec    esi
c0012b33:	89 d8                	mov    eax,ebx
c0012b35:	f7 f1                	div    ecx
c0012b37:	39 cb                	cmp    ebx,ecx
c0012b39:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012b3d:	88 16                	mov    BYTE PTR [esi],dl
c0012b3f:	73 ed                	jae    c0012b2e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012b41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012b45:	83 c4 40             	add    esp,0x40
c0012b48:	5b                   	pop    ebx
c0012b49:	5e                   	pop    esi
c0012b4a:	5f                   	pop    edi
c0012b4b:	c3                   	ret    

c0012b4c <Dbg::logc(char)>:
c0012b4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b50:	ba fd 03 00 00       	mov    edx,0x3fd
c0012b55:	ec                   	in     al,dx
c0012b56:	a8 20                	test   al,0x20
c0012b58:	74 fb                	je     c0012b55 <Dbg::logc(char)+0x9>
c0012b5a:	ba f8 03 00 00       	mov    edx,0x3f8
c0012b5f:	88 c8                	mov    al,cl
c0012b61:	ee                   	out    dx,al
c0012b62:	c3                   	ret    

c0012b63 <Dbg::logs(char*)>:
c0012b63:	53                   	push   ebx
c0012b64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012b68:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b6b:	84 c0                	test   al,al
c0012b6d:	74 0f                	je     c0012b7e <Dbg::logs(char*)+0x1b>
c0012b6f:	50                   	push   eax
c0012b70:	43                   	inc    ebx
c0012b71:	e8 d6 ff ff ff       	call   c0012b4c <Dbg::logc(char)>
c0012b76:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b79:	5a                   	pop    edx
c0012b7a:	84 c0                	test   al,al
c0012b7c:	75 f1                	jne    c0012b6f <Dbg::logs(char*)+0xc>
c0012b7e:	5b                   	pop    ebx
c0012b7f:	c3                   	ret    

c0012b80 <Dbg::logWriteInt(unsigned int)>:
c0012b80:	83 ec 10             	sub    esp,0x10
c0012b83:	6a 0a                	push   0xa
c0012b85:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b89:	50                   	push   eax
c0012b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b8e:	e8 58 ff ff ff       	call   c0012aeb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b93:	50                   	push   eax
c0012b94:	e8 ca ff ff ff       	call   c0012b63 <Dbg::logs(char*)>
c0012b99:	83 c4 20             	add    esp,0x20
c0012b9c:	c3                   	ret    

c0012b9d <Dbg::logWriteIntBase(unsigned int, int)>:
c0012b9d:	83 ec 10             	sub    esp,0x10
c0012ba0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ba4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ba8:	50                   	push   eax
c0012ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bad:	e8 39 ff ff ff       	call   c0012aeb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012bb2:	50                   	push   eax
c0012bb3:	e8 ab ff ff ff       	call   c0012b63 <Dbg::logs(char*)>
c0012bb8:	83 c4 20             	add    esp,0x20
c0012bbb:	c3                   	ret    

c0012bbc <Dbg::kprintf(char const*, ...)>:
c0012bbc:	55                   	push   ebp
c0012bbd:	57                   	push   edi
c0012bbe:	56                   	push   esi
c0012bbf:	53                   	push   ebx
c0012bc0:	83 ec 0c             	sub    esp,0xc
c0012bc3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012bc7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012bcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bcf:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012bd2:	84 c0                	test   al,al
c0012bd4:	74 4a                	je     c0012c20 <Dbg::kprintf(char const*, ...)+0x64>
c0012bd6:	31 db                	xor    ebx,ebx
c0012bd8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012bdb:	3c 25                	cmp    al,0x25
c0012bdd:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012be0:	0f 85 e4 00 00 00    	jne    c0012cca <Dbg::kprintf(char const*, ...)+0x10e>
c0012be6:	83 c3 02             	add    ebx,0x2
c0012be9:	8a 07                	mov    al,BYTE PTR [edi]
c0012beb:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012bee:	83 e8 25             	sub    eax,0x25
c0012bf1:	3c 53                	cmp    al,0x53
c0012bf3:	0f 87 ba 00 00 00    	ja     c0012cb3 <Dbg::kprintf(char const*, ...)+0xf7>
c0012bf9:	0f b6 c0             	movzx  eax,al
c0012bfc:	ff 24 85 b0 a5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5a50]
c0012c03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c07:	89 c8                	mov    eax,ecx
c0012c09:	83 c1 04             	add    ecx,0x4
c0012c0c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c10:	ff 30                	push   DWORD PTR [eax]
c0012c12:	e8 4c ff ff ff       	call   c0012b63 <Dbg::logs(char*)>
c0012c17:	58                   	pop    eax
c0012c18:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012c1c:	84 c0                	test   al,al
c0012c1e:	75 b8                	jne    c0012bd8 <Dbg::kprintf(char const*, ...)+0x1c>
c0012c20:	83 c4 0c             	add    esp,0xc
c0012c23:	5b                   	pop    ebx
c0012c24:	5e                   	pop    esi
c0012c25:	5f                   	pop    edi
c0012c26:	5d                   	pop    ebp
c0012c27:	c3                   	ret    
c0012c28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c2c:	89 d0                	mov    eax,edx
c0012c2e:	83 c2 04             	add    edx,0x4
c0012c31:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c35:	ff 30                	push   DWORD PTR [eax]
c0012c37:	e8 44 ff ff ff       	call   c0012b80 <Dbg::logWriteInt(unsigned int)>
c0012c3c:	58                   	pop    eax
c0012c3d:	eb d9                	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c3f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c43:	89 d0                	mov    eax,edx
c0012c45:	83 c2 04             	add    edx,0x4
c0012c48:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012c4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c4f:	50                   	push   eax
c0012c50:	e8 f7 fe ff ff       	call   c0012b4c <Dbg::logc(char)>
c0012c55:	58                   	pop    eax
c0012c56:	eb c0                	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c5c:	89 c8                	mov    eax,ecx
c0012c5e:	83 c1 04             	add    ecx,0x4
c0012c61:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c65:	ff 30                	push   DWORD PTR [eax]
c0012c67:	e8 14 ff ff ff       	call   c0012b80 <Dbg::logWriteInt(unsigned int)>
c0012c6c:	5f                   	pop    edi
c0012c6d:	eb a9                	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c73:	89 c8                	mov    eax,ecx
c0012c75:	83 c1 04             	add    ecx,0x4
c0012c78:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c7c:	6a 10                	push   0x10
c0012c7e:	ff 30                	push   DWORD PTR [eax]
c0012c80:	e8 18 ff ff ff       	call   c0012b9d <Dbg::logWriteIntBase(unsigned int, int)>
c0012c85:	59                   	pop    ecx
c0012c86:	5f                   	pop    edi
c0012c87:	eb 8f                	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c8d:	89 d0                	mov    eax,edx
c0012c8f:	83 c2 08             	add    edx,0x8
c0012c92:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c96:	6a 10                	push   0x10
c0012c98:	ff 30                	push   DWORD PTR [eax]
c0012c9a:	e8 fe fe ff ff       	call   c0012b9d <Dbg::logWriteIntBase(unsigned int, int)>
c0012c9f:	58                   	pop    eax
c0012ca0:	5a                   	pop    edx
c0012ca1:	e9 72 ff ff ff       	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ca6:	6a 25                	push   0x25
c0012ca8:	e8 9f fe ff ff       	call   c0012b4c <Dbg::logc(char)>
c0012cad:	58                   	pop    eax
c0012cae:	e9 65 ff ff ff       	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012cb3:	6a 25                	push   0x25
c0012cb5:	e8 92 fe ff ff       	call   c0012b4c <Dbg::logc(char)>
c0012cba:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012cbd:	50                   	push   eax
c0012cbe:	e8 89 fe ff ff       	call   c0012b4c <Dbg::logc(char)>
c0012cc3:	5a                   	pop    edx
c0012cc4:	59                   	pop    ecx
c0012cc5:	e9 4e ff ff ff       	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>
c0012cca:	50                   	push   eax
c0012ccb:	89 eb                	mov    ebx,ebp
c0012ccd:	e8 7a fe ff ff       	call   c0012b4c <Dbg::logc(char)>
c0012cd2:	89 fd                	mov    ebp,edi
c0012cd4:	58                   	pop    eax
c0012cd5:	e9 3e ff ff ff       	jmp    c0012c18 <Dbg::kprintf(char const*, ...)+0x5c>

c0012cda <File::read(unsigned long long, void*, int*)>:
c0012cda:	53                   	push   ebx
c0012cdb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ce3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cea:	3c 19                	cmp    al,0x19
c0012cec:	77 35                	ja     c0012d23 <File::read(unsigned long long, void*, int*)+0x49>
c0012cee:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0012cf5:	85 c0                	test   eax,eax
c0012cf7:	74 2a                	je     c0012d23 <File::read(unsigned long long, void*, int*)+0x49>
c0012cf9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cff:	85 c0                	test   eax,eax
c0012d01:	74 20                	je     c0012d23 <File::read(unsigned long long, void*, int*)+0x49>
c0012d03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d07:	74 21                	je     c0012d2a <File::read(unsigned long long, void*, int*)+0x50>
c0012d09:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d1d:	5b                   	pop    ebx
c0012d1e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012d21:	ff e0                	jmp    eax
c0012d23:	b8 0b 00 00 00       	mov    eax,0xb
c0012d28:	eb 05                	jmp    c0012d2f <File::read(unsigned long long, void*, int*)+0x55>
c0012d2a:	b8 05 00 00 00       	mov    eax,0x5
c0012d2f:	5b                   	pop    ebx
c0012d30:	c3                   	ret    
c0012d31:	90                   	nop

c0012d32 <File::write(unsigned long long, void*, int*)>:
c0012d32:	53                   	push   ebx
c0012d33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d3b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012d42:	3c 19                	cmp    al,0x19
c0012d44:	77 35                	ja     c0012d7b <File::write(unsigned long long, void*, int*)+0x49>
c0012d46:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0012d4d:	85 c0                	test   eax,eax
c0012d4f:	74 2a                	je     c0012d7b <File::write(unsigned long long, void*, int*)+0x49>
c0012d51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d57:	85 c0                	test   eax,eax
c0012d59:	74 20                	je     c0012d7b <File::write(unsigned long long, void*, int*)+0x49>
c0012d5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d5f:	74 21                	je     c0012d82 <File::write(unsigned long long, void*, int*)+0x50>
c0012d61:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d63:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d67:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d75:	5b                   	pop    ebx
c0012d76:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012d79:	ff e0                	jmp    eax
c0012d7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d80:	eb 05                	jmp    c0012d87 <File::write(unsigned long long, void*, int*)+0x55>
c0012d82:	b8 05 00 00 00       	mov    eax,0x5
c0012d87:	5b                   	pop    ebx
c0012d88:	c3                   	ret    
c0012d89:	90                   	nop

c0012d8a <Directory::read(unsigned long long, void*, int*)>:
c0012d8a:	53                   	push   ebx
c0012d8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d93:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012d9a:	3c 19                	cmp    al,0x19
c0012d9c:	77 35                	ja     c0012dd3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d9e:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0012da5:	85 c0                	test   eax,eax
c0012da7:	74 2a                	je     c0012dd3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012da9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012daf:	85 c0                	test   eax,eax
c0012db1:	74 20                	je     c0012dd3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012db3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012db7:	74 21                	je     c0012dda <Directory::read(unsigned long long, void*, int*)+0x50>
c0012db9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012dbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012dbf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012dc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012dc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012dcd:	5b                   	pop    ebx
c0012dce:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012dd1:	ff e0                	jmp    eax
c0012dd3:	b8 0b 00 00 00       	mov    eax,0xb
c0012dd8:	eb 05                	jmp    c0012ddf <Directory::read(unsigned long long, void*, int*)+0x55>
c0012dda:	b8 05 00 00 00       	mov    eax,0x5
c0012ddf:	5b                   	pop    ebx
c0012de0:	c3                   	ret    
c0012de1:	90                   	nop

c0012de2 <Directory::write(unsigned long long, void*, int*)>:
c0012de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012de6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ded:	b8 0b 00 00 00       	mov    eax,0xb
c0012df2:	80 fa 19             	cmp    dl,0x19
c0012df5:	77 18                	ja     c0012e0f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012df7:	8b 14 95 e0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1920]
c0012dfe:	85 d2                	test   edx,edx
c0012e00:	74 0d                	je     c0012e0f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012e02:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012e09:	19 c0                	sbb    eax,eax
c0012e0b:	83 e0 0a             	and    eax,0xa
c0012e0e:	40                   	inc    eax
c0012e0f:	c3                   	ret    

c0012e10 <File::isAtty()>:
c0012e10:	31 c0                	xor    eax,eax
c0012e12:	c3                   	ret    
c0012e13:	90                   	nop

c0012e14 <Directory::isAtty()>:
c0012e14:	31 c0                	xor    eax,eax
c0012e16:	c3                   	ret    
c0012e17:	90                   	nop

c0012e18 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012e18:	b8 0a 00 00 00       	mov    eax,0xa
c0012e1d:	c3                   	ret    

c0012e1e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012e1e:	b8 0a 00 00 00       	mov    eax,0xa
c0012e23:	c3                   	ret    

c0012e24 <File::~File()>:
c0012e24:	83 ec 0c             	sub    esp,0xc
c0012e27:	ba 6c a7 02 c0       	mov    edx,0xc002a76c
c0012e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e30:	89 10                	mov    DWORD PTR [eax],edx
c0012e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e36:	83 ec 0c             	sub    esp,0xc
c0012e39:	50                   	push   eax
c0012e3a:	e8 81 ea ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	90                   	nop
c0012e43:	83 c4 0c             	add    esp,0xc
c0012e46:	c3                   	ret    
c0012e47:	90                   	nop

c0012e48 <File::~File()>:
c0012e48:	83 ec 0c             	sub    esp,0xc
c0012e4b:	83 ec 0c             	sub    esp,0xc
c0012e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e52:	e8 cd ff ff ff       	call   c0012e24 <File::~File()>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	83 ec 08             	sub    esp,0x8
c0012e5d:	68 14 01 00 00       	push   0x114
c0012e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e66:	e8 71 fc ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0012e6b:	83 c4 10             	add    esp,0x10
c0012e6e:	83 c4 0c             	add    esp,0xc
c0012e71:	c3                   	ret    

c0012e72 <Directory::~Directory()>:
c0012e72:	83 ec 0c             	sub    esp,0xc
c0012e75:	ba 88 a7 02 c0       	mov    edx,0xc002a788
c0012e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7e:	89 10                	mov    DWORD PTR [eax],edx
c0012e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e84:	83 ec 0c             	sub    esp,0xc
c0012e87:	50                   	push   eax
c0012e88:	e8 33 ea ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	90                   	nop
c0012e91:	83 c4 0c             	add    esp,0xc
c0012e94:	c3                   	ret    
c0012e95:	90                   	nop

c0012e96 <Directory::~Directory()>:
c0012e96:	83 ec 0c             	sub    esp,0xc
c0012e99:	83 ec 0c             	sub    esp,0xc
c0012e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea0:	e8 cd ff ff ff       	call   c0012e72 <Directory::~Directory()>
c0012ea5:	83 c4 10             	add    esp,0x10
c0012ea8:	83 ec 08             	sub    esp,0x8
c0012eab:	68 14 01 00 00       	push   0x114
c0012eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb4:	e8 23 fc ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	83 c4 0c             	add    esp,0xc
c0012ebf:	c3                   	ret    

c0012ec0 <Filesystem::Filesystem()>:
c0012ec0:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0012ec5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ec9:	89 10                	mov    DWORD PTR [eax],edx
c0012ecb:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0012ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ed5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012edc:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c0012ee1:	90                   	nop
c0012ee2:	c3                   	ret    
c0012ee3:	90                   	nop

c0012ee4 <Filesystem::~Filesystem()>:
c0012ee4:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0012ee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012eed:	89 10                	mov    DWORD PTR [eax],edx
c0012eef:	90                   	nop
c0012ef0:	c3                   	ret    
c0012ef1:	90                   	nop

c0012ef2 <Filesystem::~Filesystem()>:
c0012ef2:	83 ec 0c             	sub    esp,0xc
c0012ef5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ef9:	e8 e6 ff ff ff       	call   c0012ee4 <Filesystem::~Filesystem()>
c0012efe:	83 c4 04             	add    esp,0x4
c0012f01:	83 ec 08             	sub    esp,0x8
c0012f04:	6a 08                	push   0x8
c0012f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f0a:	e8 cd fb ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	83 c4 0c             	add    esp,0xc
c0012f15:	c3                   	ret    

c0012f16 <Fs::getcwd(Process*, char*, int)>:
c0012f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f1a:	31 c0                	xor    eax,eax
c0012f1c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f1f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f23:	7d 15                	jge    c0012f3a <Fs::getcwd(Process*, char*, int)+0x24>
c0012f25:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f29:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f30:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f33:	84 c9                	test   cl,cl
c0012f35:	74 06                	je     c0012f3d <Fs::getcwd(Process*, char*, int)+0x27>
c0012f37:	40                   	inc    eax
c0012f38:	eb e2                	jmp    c0012f1c <Fs::getcwd(Process*, char*, int)+0x6>
c0012f3a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f3d:	31 c0                	xor    eax,eax
c0012f3f:	c3                   	ret    

c0012f40 <Fs::initVFS()>:
c0012f40:	83 ec 18             	sub    esp,0x18
c0012f43:	6a 08                	push   0x8
c0012f45:	e8 f6 c8 ff ff       	call   c000f840 <malloc>
c0012f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f4d:	e8 7e dc 00 00       	call   c0020bd0 <FAT::FAT()>
c0012f52:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012f59:	e8 e2 c8 ff ff       	call   c000f840 <malloc>
c0012f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f61:	e8 c2 ee 00 00       	call   c0021e28 <ISO9660::ISO9660()>
c0012f66:	83 c4 1c             	add    esp,0x1c
c0012f69:	c3                   	ret    

c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012f6a:	55                   	push   ebp
c0012f6b:	57                   	push   edi
c0012f6c:	56                   	push   esi
c0012f6d:	53                   	push   ebx
c0012f6e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012f74:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012f7b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012f82:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012f89:	68 00 04 00 00       	push   0x400
c0012f8e:	6a 00                	push   0x0
c0012f90:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012f94:	56                   	push   esi
c0012f95:	e8 de d7 fe ff       	call   c0000778 <memset>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012fa1:	75 0b                	jne    c0012fae <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012fa3:	50                   	push   eax
c0012fa4:	50                   	push   eax
c0012fa5:	57                   	push   edi
c0012fa6:	56                   	push   esi
c0012fa7:	e8 88 d8 fe ff       	call   c0000834 <strcpy>
c0012fac:	eb 41                	jmp    c0012fef <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012fae:	8a 07                	mov    al,BYTE PTR [edi]
c0012fb0:	3c 5c                	cmp    al,0x5c
c0012fb2:	74 04                	je     c0012fb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012fb4:	3c 2f                	cmp    al,0x2f
c0012fb6:	75 18                	jne    c0012fd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012fb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012fbb:	3c 60                	cmp    al,0x60
c0012fbd:	7e 03                	jle    c0012fc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012fbf:	83 e8 20             	sub    eax,0x20
c0012fc2:	88 04 24             	mov    BYTE PTR [esp],al
c0012fc5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012fcc:	50                   	push   eax
c0012fcd:	50                   	push   eax
c0012fce:	eb 18                	jmp    c0012fe8 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012fd0:	50                   	push   eax
c0012fd1:	50                   	push   eax
c0012fd2:	55                   	push   ebp
c0012fd3:	56                   	push   esi
c0012fd4:	e8 5b d8 fe ff       	call   c0000834 <strcpy>
c0012fd9:	5a                   	pop    edx
c0012fda:	59                   	pop    ecx
c0012fdb:	68 a1 be 02 c0       	push   0xc002bea1
c0012fe0:	56                   	push   esi
c0012fe1:	e8 8e d9 fe ff       	call   c0000974 <strcat>
c0012fe6:	5d                   	pop    ebp
c0012fe7:	58                   	pop    eax
c0012fe8:	57                   	push   edi
c0012fe9:	56                   	push   esi
c0012fea:	e8 85 d9 fe ff       	call   c0000974 <strcat>
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012ff5:	3c 60                	cmp    al,0x60
c0012ff7:	7e 03                	jle    c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012ff9:	83 e8 20             	sub    eax,0x20
c0012ffc:	88 04 24             	mov    BYTE PTR [esp],al
c0012fff:	88 03                	mov    BYTE PTR [ebx],al
c0013001:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013008:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001300e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013012:	bf 03 00 00 00       	mov    edi,0x3
c0013017:	b8 03 00 00 00       	mov    eax,0x3
c001301c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001301f:	84 d2                	test   dl,dl
c0013021:	0f 84 91 00 00 00    	je     c00130b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013027:	8d 4f 01             	lea    ecx,[edi+0x1]
c001302a:	80 fa 5c             	cmp    dl,0x5c
c001302d:	74 05                	je     c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001302f:	80 fa 2f             	cmp    dl,0x2f
c0013032:	75 12                	jne    c0013046 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013034:	89 c5                	mov    ebp,eax
c0013036:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001303b:	74 09                	je     c0013046 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001303d:	40                   	inc    eax
c001303e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013042:	89 cf                	mov    edi,ecx
c0013044:	eb d6                	jmp    c001301c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013046:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001304b:	75 5b                	jne    c00130a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001304d:	80 fa 2e             	cmp    dl,0x2e
c0013050:	75 56                	jne    c00130a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013052:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013056:	74 19                	je     c0013071 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013058:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001305d:	74 53                	je     c00130b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001305f:	89 f9                	mov    ecx,edi
c0013061:	41                   	inc    ecx
c0013062:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013065:	80 fa 2f             	cmp    dl,0x2f
c0013068:	74 f7                	je     c0013061 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001306a:	80 fa 5c             	cmp    dl,0x5c
c001306d:	74 f2                	je     c0013061 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001306f:	eb d1                	jmp    c0013042 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013071:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013076:	74 3a                	je     c00130b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013078:	83 f8 03             	cmp    eax,0x3
c001307b:	74 c5                	je     c0013042 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001307d:	41                   	inc    ecx
c001307e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013081:	80 fa 2f             	cmp    dl,0x2f
c0013084:	74 f7                	je     c001307d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013086:	80 fa 5c             	cmp    dl,0x5c
c0013089:	74 f2                	je     c001307d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001308b:	48                   	dec    eax
c001308c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013090:	75 06                	jne    c0013098 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013092:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013096:	eb f3                	jmp    c001308b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013098:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001309c:	74 07                	je     c00130a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001309e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00130a2:	48                   	dec    eax
c00130a3:	eb f3                	jmp    c0013098 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00130a5:	40                   	inc    eax
c00130a6:	eb 9a                	jmp    c0013042 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00130a8:	80 fa 2f             	cmp    dl,0x2f
c00130ab:	74 95                	je     c0013042 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00130ad:	80 fa 5c             	cmp    dl,0x5c
c00130b0:	74 90                	je     c0013042 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00130b2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00130b5:	40                   	inc    eax
c00130b6:	eb 8a                	jmp    c0013042 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00130b8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	53                   	push   ebx
c00130c0:	e8 cf d6 fe ff       	call   c0000794 <strlen>
c00130c5:	83 c4 10             	add    esp,0x10
c00130c8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00130cd:	75 26                	jne    c00130f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00130cf:	83 ec 0c             	sub    esp,0xc
c00130d2:	53                   	push   ebx
c00130d3:	e8 bc d6 fe ff       	call   c0000794 <strlen>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00130e0:	74 26                	je     c0013108 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00130e2:	83 ec 0c             	sub    esp,0xc
c00130e5:	53                   	push   ebx
c00130e6:	e8 a9 d6 fe ff       	call   c0000794 <strlen>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00130f3:	eb c7                	jmp    c00130bc <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00130f5:	83 ec 0c             	sub    esp,0xc
c00130f8:	53                   	push   ebx
c00130f9:	e8 96 d6 fe ff       	call   c0000794 <strlen>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013106:	74 c7                	je     c00130cf <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013108:	81 c4 0c 04 00 00    	add    esp,0x40c
c001310e:	5b                   	pop    ebx
c001310f:	5e                   	pop    esi
c0013110:	5f                   	pop    edi
c0013111:	5d                   	pop    ebp
c0013112:	c3                   	ret    
c0013113:	90                   	nop

c0013114 <File::File(char const*, Process*)>:
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311b:	83 ec 08             	sub    esp,0x8
c001311e:	6a 00                	push   0x0
c0013120:	50                   	push   eax
c0013121:	e8 b8 e5 ff ff       	call   c00116de <UnixFile::UnixFile(int)>
c0013126:	83 c4 10             	add    esp,0x10
c0013129:	ba 6c a7 02 c0       	mov    edx,0xc002a76c
c001312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013132:	89 10                	mov    DWORD PTR [eax],edx
c0013134:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013138:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001313e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013142:	83 c0 0d             	add    eax,0xd
c0013145:	83 ec 04             	sub    esp,0x4
c0013148:	52                   	push   edx
c0013149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001314d:	50                   	push   eax
c001314e:	e8 17 fe ff ff       	call   c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001315d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013164:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001316a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001316e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013172:	90                   	nop
c0013173:	83 c4 0c             	add    esp,0xc
c0013176:	c3                   	ret    
c0013177:	90                   	nop

c0013178 <File::open(FileOpenMode)>:
c0013178:	53                   	push   ebx
c0013179:	b8 0b 00 00 00       	mov    eax,0xb
c001317e:	83 ec 08             	sub    esp,0x8
c0013181:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013185:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001318c:	80 fa 19             	cmp    dl,0x19
c001318f:	77 40                	ja     c00131d1 <File::open(FileOpenMode)+0x59>
c0013191:	8b 14 95 e0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1920]
c0013198:	85 d2                	test   edx,edx
c001319a:	74 35                	je     c00131d1 <File::open(FileOpenMode)+0x59>
c001319c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131a2:	85 d2                	test   edx,edx
c00131a4:	74 2b                	je     c00131d1 <File::open(FileOpenMode)+0x59>
c00131a6:	b8 06 00 00 00       	mov    eax,0x6
c00131ab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00131af:	75 20                	jne    c00131d1 <File::open(FileOpenMode)+0x59>
c00131b1:	8b 02                	mov    eax,DWORD PTR [edx]
c00131b3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00131b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131bd:	51                   	push   ecx
c00131be:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00131c1:	51                   	push   ecx
c00131c2:	52                   	push   edx
c00131c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00131c6:	83 c4 10             	add    esp,0x10
c00131c9:	85 c0                	test   eax,eax
c00131cb:	75 04                	jne    c00131d1 <File::open(FileOpenMode)+0x59>
c00131cd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00131d1:	83 c4 08             	add    esp,0x8
c00131d4:	5b                   	pop    ebx
c00131d5:	c3                   	ret    

c00131d6 <File::close()>:
c00131d6:	53                   	push   ebx
c00131d7:	b8 0b 00 00 00       	mov    eax,0xb
c00131dc:	83 ec 08             	sub    esp,0x8
c00131df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131e3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131ea:	80 fa 19             	cmp    dl,0x19
c00131ed:	77 41                	ja     c0013230 <File::close()+0x5a>
c00131ef:	8b 1c 95 e0 e6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1920]
c00131f6:	85 db                	test   ebx,ebx
c00131f8:	74 36                	je     c0013230 <File::close()+0x5a>
c00131fa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013201:	74 2d                	je     c0013230 <File::close()+0x5a>
c0013203:	b8 05 00 00 00       	mov    eax,0x5
c0013208:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001320c:	74 22                	je     c0013230 <File::close()+0x5a>
c001320e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013212:	8b 04 95 e0 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1920]
c0013219:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001321f:	53                   	push   ebx
c0013220:	53                   	push   ebx
c0013221:	8b 10                	mov    edx,DWORD PTR [eax]
c0013223:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013229:	50                   	push   eax
c001322a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	83 c4 08             	add    esp,0x8
c0013233:	5b                   	pop    ebx
c0013234:	c3                   	ret    
c0013235:	90                   	nop

c0013236 <File::seek(unsigned long long)>:
c0013236:	56                   	push   esi
c0013237:	53                   	push   ebx
c0013238:	b8 0b 00 00 00       	mov    eax,0xb
c001323d:	51                   	push   ecx
c001323e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013242:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013246:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001324d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013251:	80 fa 19             	cmp    dl,0x19
c0013254:	77 31                	ja     c0013287 <File::seek(unsigned long long)+0x51>
c0013256:	8b 14 95 e0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1920]
c001325d:	85 d2                	test   edx,edx
c001325f:	74 26                	je     c0013287 <File::seek(unsigned long long)+0x51>
c0013261:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013267:	85 d2                	test   edx,edx
c0013269:	74 1c                	je     c0013287 <File::seek(unsigned long long)+0x51>
c001326b:	b8 05 00 00 00       	mov    eax,0x5
c0013270:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013274:	74 11                	je     c0013287 <File::seek(unsigned long long)+0x51>
c0013276:	8b 02                	mov    eax,DWORD PTR [edx]
c0013278:	53                   	push   ebx
c0013279:	51                   	push   ecx
c001327a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013280:	52                   	push   edx
c0013281:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	5a                   	pop    edx
c0013288:	5b                   	pop    ebx
c0013289:	5e                   	pop    esi
c001328a:	c3                   	ret    
c001328b:	90                   	nop

c001328c <File::tell(unsigned long long*)>:
c001328c:	83 ec 0c             	sub    esp,0xc
c001328f:	b8 0b 00 00 00       	mov    eax,0xb
c0013294:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013298:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001329f:	80 fa 19             	cmp    dl,0x19
c00132a2:	77 34                	ja     c00132d8 <File::tell(unsigned long long*)+0x4c>
c00132a4:	8b 14 95 e0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1920]
c00132ab:	85 d2                	test   edx,edx
c00132ad:	74 29                	je     c00132d8 <File::tell(unsigned long long*)+0x4c>
c00132af:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00132b5:	85 d2                	test   edx,edx
c00132b7:	74 1f                	je     c00132d8 <File::tell(unsigned long long*)+0x4c>
c00132b9:	b8 05 00 00 00       	mov    eax,0x5
c00132be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00132c2:	74 14                	je     c00132d8 <File::tell(unsigned long long*)+0x4c>
c00132c4:	50                   	push   eax
c00132c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00132c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132cb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132d1:	52                   	push   edx
c00132d2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	83 c4 0c             	add    esp,0xc
c00132db:	c3                   	ret    

c00132dc <File::rewind()>:
c00132dc:	83 ec 10             	sub    esp,0x10
c00132df:	6a 00                	push   0x0
c00132e1:	6a 00                	push   0x0
c00132e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e7:	e8 4a ff ff ff       	call   c0013236 <File::seek(unsigned long long)>
c00132ec:	83 c4 1c             	add    esp,0x1c
c00132ef:	c3                   	ret    

c00132f0 <File::unlink()>:
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	b8 0b 00 00 00       	mov    eax,0xb
c00132f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013303:	80 f9 19             	cmp    cl,0x19
c0013306:	77 2f                	ja     c0013337 <File::unlink()+0x47>
c0013308:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 24                	je     c0013337 <File::unlink()+0x47>
c0013313:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013319:	85 c9                	test   ecx,ecx
c001331b:	74 1a                	je     c0013337 <File::unlink()+0x47>
c001331d:	b8 06 00 00 00       	mov    eax,0x6
c0013322:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013326:	75 0f                	jne    c0013337 <File::unlink()+0x47>
c0013328:	83 c2 0d             	add    edx,0xd
c001332b:	50                   	push   eax
c001332c:	50                   	push   eax
c001332d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001332f:	52                   	push   edx
c0013330:	51                   	push   ecx
c0013331:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	83 c4 0c             	add    esp,0xc
c001333a:	c3                   	ret    
c001333b:	90                   	nop

c001333c <File::rename(char const*)>:
c001333c:	83 ec 0c             	sub    esp,0xc
c001333f:	b8 0b 00 00 00       	mov    eax,0xb
c0013344:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013348:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001334f:	80 f9 19             	cmp    cl,0x19
c0013352:	77 32                	ja     c0013386 <File::rename(char const*)+0x4a>
c0013354:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c001335b:	85 c9                	test   ecx,ecx
c001335d:	74 27                	je     c0013386 <File::rename(char const*)+0x4a>
c001335f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013365:	85 c9                	test   ecx,ecx
c0013367:	74 1d                	je     c0013386 <File::rename(char const*)+0x4a>
c0013369:	b8 06 00 00 00       	mov    eax,0x6
c001336e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013372:	75 12                	jne    c0013386 <File::rename(char const*)+0x4a>
c0013374:	83 c2 0d             	add    edx,0xd
c0013377:	50                   	push   eax
c0013378:	8b 01                	mov    eax,DWORD PTR [ecx]
c001337a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001337e:	52                   	push   edx
c001337f:	51                   	push   ecx
c0013380:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013383:	83 c4 10             	add    esp,0x10
c0013386:	83 c4 0c             	add    esp,0xc
c0013389:	c3                   	ret    

c001338a <File::chfatattr(unsigned char, unsigned char)>:
c001338a:	57                   	push   edi
c001338b:	b8 0b 00 00 00       	mov    eax,0xb
c0013390:	56                   	push   esi
c0013391:	53                   	push   ebx
c0013392:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013396:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001339a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00133a5:	80 f9 19             	cmp    cl,0x19
c00133a8:	77 37                	ja     c00133e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133aa:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c00133b1:	85 c9                	test   ecx,ecx
c00133b3:	74 2c                	je     c00133e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133bb:	85 c9                	test   ecx,ecx
c00133bd:	74 22                	je     c00133e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133bf:	b8 06 00 00 00       	mov    eax,0x6
c00133c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133c8:	75 17                	jne    c00133e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133ca:	8b 39                	mov    edi,DWORD PTR [ecx]
c00133cc:	89 f0                	mov    eax,esi
c00133ce:	83 c2 0d             	add    edx,0xd
c00133d1:	0f b6 f0             	movzx  esi,al
c00133d4:	0f b6 db             	movzx  ebx,bl
c00133d7:	56                   	push   esi
c00133d8:	53                   	push   ebx
c00133d9:	52                   	push   edx
c00133da:	51                   	push   ecx
c00133db:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	5b                   	pop    ebx
c00133e2:	5e                   	pop    esi
c00133e3:	5f                   	pop    edi
c00133e4:	c3                   	ret    
c00133e5:	90                   	nop

c00133e6 <File::exists()>:
c00133e6:	83 ec 0c             	sub    esp,0xc
c00133e9:	31 c0                	xor    eax,eax
c00133eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133f6:	80 f9 19             	cmp    cl,0x19
c00133f9:	77 24                	ja     c001341f <File::exists()+0x39>
c00133fb:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c0013402:	85 c9                	test   ecx,ecx
c0013404:	74 19                	je     c001341f <File::exists()+0x39>
c0013406:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001340c:	85 c9                	test   ecx,ecx
c001340e:	74 0f                	je     c001341f <File::exists()+0x39>
c0013410:	83 c2 0d             	add    edx,0xd
c0013413:	50                   	push   eax
c0013414:	50                   	push   eax
c0013415:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013417:	52                   	push   edx
c0013418:	51                   	push   ecx
c0013419:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	83 c4 0c             	add    esp,0xc
c0013422:	c3                   	ret    
c0013423:	90                   	nop

c0013424 <File::stat(unsigned long long*, bool*)>:
c0013424:	56                   	push   esi
c0013425:	53                   	push   ebx
c0013426:	50                   	push   eax
c0013427:	b8 0b 00 00 00       	mov    eax,0xb
c001342c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013430:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013434:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001343b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001343f:	80 f9 19             	cmp    cl,0x19
c0013442:	77 3d                	ja     c0013481 <File::stat(unsigned long long*, bool*)+0x5d>
c0013444:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c001344b:	85 c9                	test   ecx,ecx
c001344d:	74 32                	je     c0013481 <File::stat(unsigned long long*, bool*)+0x5d>
c001344f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013455:	85 c9                	test   ecx,ecx
c0013457:	74 28                	je     c0013481 <File::stat(unsigned long long*, bool*)+0x5d>
c0013459:	8b 01                	mov    eax,DWORD PTR [ecx]
c001345b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001345f:	74 13                	je     c0013474 <File::stat(unsigned long long*, bool*)+0x50>
c0013461:	83 ec 04             	sub    esp,0x4
c0013464:	56                   	push   esi
c0013465:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001346b:	51                   	push   ecx
c001346c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001346f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013472:	eb 0a                	jmp    c001347e <File::stat(unsigned long long*, bool*)+0x5a>
c0013474:	53                   	push   ebx
c0013475:	83 c2 0d             	add    edx,0xd
c0013478:	56                   	push   esi
c0013479:	52                   	push   edx
c001347a:	51                   	push   ecx
c001347b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001347e:	83 c4 10             	add    esp,0x10
c0013481:	5a                   	pop    edx
c0013482:	5b                   	pop    ebx
c0013483:	5e                   	pop    esi
c0013484:	c3                   	ret    

c0013485 <Fs::setcwd(Process*, char*)>:
c0013485:	55                   	push   ebp
c0013486:	57                   	push   edi
c0013487:	56                   	push   esi
c0013488:	53                   	push   ebx
c0013489:	81 ec 20 02 00 00    	sub    esp,0x220
c001348f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013496:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001349c:	57                   	push   edi
c001349d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00134a4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00134a8:	56                   	push   esi
c00134a9:	e8 bc fa ff ff       	call   c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)>
c00134ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00134b1:	e8 de d2 fe ff       	call   c0000794 <strlen>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	83 f8 02             	cmp    eax,0x2
c00134bc:	77 17                	ja     c00134d5 <Fs::setcwd(Process*, char*)+0x50>
c00134be:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00134c3:	83 e8 41             	sub    eax,0x41
c00134c6:	83 f8 19             	cmp    eax,0x19
c00134c9:	76 24                	jbe    c00134ef <Fs::setcwd(Process*, char*)+0x6a>
c00134cb:	b8 03 00 00 00       	mov    eax,0x3
c00134d0:	e9 e0 00 00 00       	jmp    c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c00134d5:	83 ec 0c             	sub    esp,0xc
c00134d8:	56                   	push   esi
c00134d9:	e8 b6 d2 fe ff       	call   c0000794 <strlen>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	83 f8 03             	cmp    eax,0x3
c00134e4:	75 34                	jne    c001351a <Fs::setcwd(Process*, char*)+0x95>
c00134e6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00134eb:	75 2d                	jne    c001351a <Fs::setcwd(Process*, char*)+0x95>
c00134ed:	eb cf                	jmp    c00134be <Fs::setcwd(Process*, char*)+0x39>
c00134ef:	8b 14 85 e0 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1920]
c00134f6:	b8 05 00 00 00       	mov    eax,0x5
c00134fb:	85 d2                	test   edx,edx
c00134fd:	0f 84 b2 00 00 00    	je     c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c0013503:	b8 06 00 00 00       	mov    eax,0x6
c0013508:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001350f:	0f 85 92 00 00 00    	jne    c00135a7 <Fs::setcwd(Process*, char*)+0x122>
c0013515:	e9 9b 00 00 00       	jmp    c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	68 14 01 00 00       	push   0x114
c0013522:	e8 19 c3 ff ff       	call   c000f840 <malloc>
c0013527:	83 c4 0c             	add    esp,0xc
c001352a:	89 c3                	mov    ebx,eax
c001352c:	55                   	push   ebp
c001352d:	56                   	push   esi
c001352e:	50                   	push   eax
c001352f:	e8 e0 fb ff ff       	call   c0013114 <File::File(char const*, Process*)>
c0013534:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013539:	83 c4 0c             	add    esp,0xc
c001353c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013540:	50                   	push   eax
c0013541:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013545:	50                   	push   eax
c0013546:	53                   	push   ebx
c0013547:	e8 d8 fe ff ff       	call   c0013424 <File::stat(unsigned long long*, bool*)>
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	83 f8 02             	cmp    eax,0x2
c0013552:	74 04                	je     c0013558 <Fs::setcwd(Process*, char*)+0xd3>
c0013554:	85 c0                	test   eax,eax
c0013556:	74 1c                	je     c0013574 <Fs::setcwd(Process*, char*)+0xef>
c0013558:	b8 01 00 00 00       	mov    eax,0x1
c001355d:	85 db                	test   ebx,ebx
c001355f:	74 54                	je     c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c0013561:	83 ec 0c             	sub    esp,0xc
c0013564:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013566:	53                   	push   ebx
c0013567:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	b8 01 00 00 00       	mov    eax,0x1
c0013572:	eb 41                	jmp    c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c0013574:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013579:	75 1c                	jne    c0013597 <Fs::setcwd(Process*, char*)+0x112>
c001357b:	b8 02 00 00 00       	mov    eax,0x2
c0013580:	85 db                	test   ebx,ebx
c0013582:	74 31                	je     c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c0013584:	83 ec 0c             	sub    esp,0xc
c0013587:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013589:	53                   	push   ebx
c001358a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001358d:	83 c4 10             	add    esp,0x10
c0013590:	b8 02 00 00 00       	mov    eax,0x2
c0013595:	eb 1e                	jmp    c00135b5 <Fs::setcwd(Process*, char*)+0x130>
c0013597:	85 db                	test   ebx,ebx
c0013599:	74 0c                	je     c00135a7 <Fs::setcwd(Process*, char*)+0x122>
c001359b:	83 ec 0c             	sub    esp,0xc
c001359e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135a0:	53                   	push   ebx
c00135a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	50                   	push   eax
c00135a8:	50                   	push   eax
c00135a9:	56                   	push   esi
c00135aa:	57                   	push   edi
c00135ab:	e8 84 d2 fe ff       	call   c0000834 <strcpy>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	31 c0                	xor    eax,eax
c00135b5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00135bb:	5b                   	pop    ebx
c00135bc:	5e                   	pop    esi
c00135bd:	5f                   	pop    edi
c00135be:	5d                   	pop    ebp
c00135bf:	c3                   	ret    

c00135c0 <Directory::Directory(char const*, Process*)>:
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c7:	83 ec 08             	sub    esp,0x8
c00135ca:	6a 00                	push   0x0
c00135cc:	50                   	push   eax
c00135cd:	e8 0c e1 ff ff       	call   c00116de <UnixFile::UnixFile(int)>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	ba 88 a7 02 c0       	mov    edx,0xc002a788
c00135da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135de:	89 10                	mov    DWORD PTR [eax],edx
c00135e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135e4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ee:	83 c0 0d             	add    eax,0xd
c00135f1:	83 ec 04             	sub    esp,0x4
c00135f4:	52                   	push   edx
c00135f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f9:	50                   	push   eax
c00135fa:	e8 6b f9 ff ff       	call   c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013606:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013609:	8d 50 bf             	lea    edx,[eax-0x41]
c001360c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013610:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001361e:	90                   	nop
c001361f:	83 c4 0c             	add    esp,0xc
c0013622:	c3                   	ret    
c0013623:	90                   	nop

c0013624 <Directory::open()>:
c0013624:	53                   	push   ebx
c0013625:	b8 0b 00 00 00       	mov    eax,0xb
c001362a:	83 ec 08             	sub    esp,0x8
c001362d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013631:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013638:	80 fa 19             	cmp    dl,0x19
c001363b:	77 3d                	ja     c001367a <Directory::open()+0x56>
c001363d:	8b 14 95 e0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1920]
c0013644:	85 d2                	test   edx,edx
c0013646:	74 32                	je     c001367a <Directory::open()+0x56>
c0013648:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001364e:	85 d2                	test   edx,edx
c0013650:	74 28                	je     c001367a <Directory::open()+0x56>
c0013652:	b8 06 00 00 00       	mov    eax,0x6
c0013657:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001365b:	75 1d                	jne    c001367a <Directory::open()+0x56>
c001365d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013663:	50                   	push   eax
c0013664:	8b 02                	mov    eax,DWORD PTR [edx]
c0013666:	51                   	push   ecx
c0013667:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001366a:	51                   	push   ecx
c001366b:	52                   	push   edx
c001366c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	85 c0                	test   eax,eax
c0013674:	75 04                	jne    c001367a <Directory::open()+0x56>
c0013676:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001367a:	83 c4 08             	add    esp,0x8
c001367d:	5b                   	pop    ebx
c001367e:	c3                   	ret    
c001367f:	90                   	nop

c0013680 <Directory::close()>:
c0013680:	53                   	push   ebx
c0013681:	b8 0b 00 00 00       	mov    eax,0xb
c0013686:	83 ec 08             	sub    esp,0x8
c0013689:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001368d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013694:	80 fa 19             	cmp    dl,0x19
c0013697:	77 41                	ja     c00136da <Directory::close()+0x5a>
c0013699:	8b 1c 95 e0 e6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1920]
c00136a0:	85 db                	test   ebx,ebx
c00136a2:	74 36                	je     c00136da <Directory::close()+0x5a>
c00136a4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00136ab:	74 2d                	je     c00136da <Directory::close()+0x5a>
c00136ad:	b8 05 00 00 00       	mov    eax,0x5
c00136b2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136b6:	74 22                	je     c00136da <Directory::close()+0x5a>
c00136b8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00136bc:	8b 04 95 e0 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1920]
c00136c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00136c9:	53                   	push   ebx
c00136ca:	53                   	push   ebx
c00136cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00136cd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136d3:	50                   	push   eax
c00136d4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00136d7:	83 c4 10             	add    esp,0x10
c00136da:	83 c4 08             	add    esp,0x8
c00136dd:	5b                   	pop    ebx
c00136de:	c3                   	ret    
c00136df:	90                   	nop

c00136e0 <Directory::unlink()>:
c00136e0:	83 ec 0c             	sub    esp,0xc
c00136e3:	b8 0b 00 00 00       	mov    eax,0xb
c00136e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136f3:	80 f9 19             	cmp    cl,0x19
c00136f6:	77 2f                	ja     c0013727 <Directory::unlink()+0x47>
c00136f8:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c00136ff:	85 c9                	test   ecx,ecx
c0013701:	74 24                	je     c0013727 <Directory::unlink()+0x47>
c0013703:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013709:	85 c9                	test   ecx,ecx
c001370b:	74 1a                	je     c0013727 <Directory::unlink()+0x47>
c001370d:	b8 06 00 00 00       	mov    eax,0x6
c0013712:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013716:	75 0f                	jne    c0013727 <Directory::unlink()+0x47>
c0013718:	83 c2 0d             	add    edx,0xd
c001371b:	50                   	push   eax
c001371c:	50                   	push   eax
c001371d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001371f:	52                   	push   edx
c0013720:	51                   	push   ecx
c0013721:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013724:	83 c4 10             	add    esp,0x10
c0013727:	83 c4 0c             	add    esp,0xc
c001372a:	c3                   	ret    
c001372b:	90                   	nop

c001372c <Directory::rename(char const*)>:
c001372c:	83 ec 0c             	sub    esp,0xc
c001372f:	b8 0b 00 00 00       	mov    eax,0xb
c0013734:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013738:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001373f:	80 f9 19             	cmp    cl,0x19
c0013742:	77 32                	ja     c0013776 <Directory::rename(char const*)+0x4a>
c0013744:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c001374b:	85 c9                	test   ecx,ecx
c001374d:	74 27                	je     c0013776 <Directory::rename(char const*)+0x4a>
c001374f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013755:	85 c9                	test   ecx,ecx
c0013757:	74 1d                	je     c0013776 <Directory::rename(char const*)+0x4a>
c0013759:	b8 06 00 00 00       	mov    eax,0x6
c001375e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013762:	75 12                	jne    c0013776 <Directory::rename(char const*)+0x4a>
c0013764:	83 c2 0d             	add    edx,0xd
c0013767:	50                   	push   eax
c0013768:	8b 01                	mov    eax,DWORD PTR [ecx]
c001376a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001376e:	52                   	push   edx
c001376f:	51                   	push   ecx
c0013770:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013773:	83 c4 10             	add    esp,0x10
c0013776:	83 c4 0c             	add    esp,0xc
c0013779:	c3                   	ret    

c001377a <Directory::exists()>:
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	31 c0                	xor    eax,eax
c001377f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013783:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001378a:	80 f9 19             	cmp    cl,0x19
c001378d:	77 24                	ja     c00137b3 <Directory::exists()+0x39>
c001378f:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c0013796:	85 c9                	test   ecx,ecx
c0013798:	74 19                	je     c00137b3 <Directory::exists()+0x39>
c001379a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137a0:	85 c9                	test   ecx,ecx
c00137a2:	74 0f                	je     c00137b3 <Directory::exists()+0x39>
c00137a4:	83 c2 0d             	add    edx,0xd
c00137a7:	50                   	push   eax
c00137a8:	50                   	push   eax
c00137a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137ab:	52                   	push   edx
c00137ac:	51                   	push   ecx
c00137ad:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 c4 0c             	add    esp,0xc
c00137b6:	c3                   	ret    
c00137b7:	90                   	nop

c00137b8 <Directory::read(dirent*)>:
c00137b8:	83 ec 1c             	sub    esp,0x1c
c00137bb:	b8 0b 00 00 00       	mov    eax,0xb
c00137c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00137c4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00137cb:	80 fa 19             	cmp    dl,0x19
c00137ce:	77 30                	ja     c0013800 <Directory::read(dirent*)+0x48>
c00137d0:	8b 14 95 e0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1920]
c00137d7:	85 d2                	test   edx,edx
c00137d9:	74 25                	je     c0013800 <Directory::read(dirent*)+0x48>
c00137db:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137e2:	74 1c                	je     c0013800 <Directory::read(dirent*)+0x48>
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00137ed:	52                   	push   edx
c00137ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00137f2:	6a 00                	push   0x0
c00137f4:	68 10 01 00 00       	push   0x110
c00137f9:	51                   	push   ecx
c00137fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137fd:	83 c4 20             	add    esp,0x20
c0013800:	83 c4 1c             	add    esp,0x1c
c0013803:	c3                   	ret    

c0013804 <Directory::create()>:
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	b8 0b 00 00 00       	mov    eax,0xb
c001380c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013817:	80 f9 19             	cmp    cl,0x19
c001381a:	77 2f                	ja     c001384b <Directory::create()+0x47>
c001381c:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c0013823:	85 c9                	test   ecx,ecx
c0013825:	74 24                	je     c001384b <Directory::create()+0x47>
c0013827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001382d:	85 c9                	test   ecx,ecx
c001382f:	74 1a                	je     c001384b <Directory::create()+0x47>
c0013831:	b8 06 00 00 00       	mov    eax,0x6
c0013836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001383a:	75 0f                	jne    c001384b <Directory::create()+0x47>
c001383c:	83 c2 0d             	add    edx,0xd
c001383f:	50                   	push   eax
c0013840:	50                   	push   eax
c0013841:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013843:	52                   	push   edx
c0013844:	51                   	push   ecx
c0013845:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	83 c4 0c             	add    esp,0xc
c001384e:	c3                   	ret    
c001384f:	90                   	nop

c0013850 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013850:	b8 0a 00 00 00       	mov    eax,0xa
c0013855:	c3                   	ret    

c0013856 <Bus::Bus(char const*)>:
c0013856:	83 ec 0c             	sub    esp,0xc
c0013859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385d:	83 ec 08             	sub    esp,0x8
c0013860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013864:	50                   	push   eax
c0013865:	e8 68 09 00 00       	call   c00141d2 <Device::Device(char const*)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	ba a4 a7 02 c0       	mov    edx,0xc002a7a4
c0013872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013876:	89 10                	mov    DWORD PTR [eax],edx
c0013878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013886:	90                   	nop
c0013887:	83 c4 0c             	add    esp,0xc
c001388a:	c3                   	ret    
c001388b:	90                   	nop

c001388c <Bus::~Bus()>:
c001388c:	83 ec 0c             	sub    esp,0xc
c001388f:	ba a4 a7 02 c0       	mov    edx,0xc002a7a4
c0013894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013898:	89 10                	mov    DWORD PTR [eax],edx
c001389a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389e:	83 ec 0c             	sub    esp,0xc
c00138a1:	50                   	push   eax
c00138a2:	e8 0d 06 00 00       	call   c0013eb4 <Device::~Device()>
c00138a7:	83 c4 10             	add    esp,0x10
c00138aa:	90                   	nop
c00138ab:	83 c4 0c             	add    esp,0xc
c00138ae:	c3                   	ret    
c00138af:	90                   	nop

c00138b0 <Bus::~Bus()>:
c00138b0:	83 ec 0c             	sub    esp,0xc
c00138b3:	83 ec 0c             	sub    esp,0xc
c00138b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ba:	e8 cd ff ff ff       	call   c001388c <Bus::~Bus()>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	83 ec 08             	sub    esp,0x8
c00138c5:	68 58 01 00 00       	push   0x158
c00138ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ce:	e8 09 f2 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00138d3:	83 c4 10             	add    esp,0x10
c00138d6:	83 c4 0c             	add    esp,0xc
c00138d9:	c3                   	ret    

c00138da <Buzzer::Buzzer(char const*)>:
c00138da:	83 ec 0c             	sub    esp,0xc
c00138dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e1:	83 ec 08             	sub    esp,0x8
c00138e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e8:	50                   	push   eax
c00138e9:	e8 e4 08 00 00       	call   c00141d2 <Device::Device(char const*)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	89 10                	mov    DWORD PTR [eax],edx
c00138fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013900:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001390a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013918:	90                   	nop
c0013919:	83 c4 0c             	add    esp,0xc
c001391c:	c3                   	ret    
c001391d:	90                   	nop

c001391e <Buzzer::~Buzzer()>:
c001391e:	83 ec 0c             	sub    esp,0xc
c0013921:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0013926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392a:	89 10                	mov    DWORD PTR [eax],edx
c001392c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	50                   	push   eax
c0013934:	e8 7b 05 00 00       	call   c0013eb4 <Device::~Device()>
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	90                   	nop
c001393d:	83 c4 0c             	add    esp,0xc
c0013940:	c3                   	ret    
c0013941:	90                   	nop

c0013942 <Buzzer::~Buzzer()>:
c0013942:	83 ec 0c             	sub    esp,0xc
c0013945:	83 ec 0c             	sub    esp,0xc
c0013948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394c:	e8 cd ff ff ff       	call   c001391e <Buzzer::~Buzzer()>
c0013951:	83 c4 10             	add    esp,0x10
c0013954:	83 ec 08             	sub    esp,0x8
c0013957:	68 5c 01 00 00       	push   0x15c
c001395c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013960:	e8 77 f1 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0013965:	83 c4 10             	add    esp,0x10
c0013968:	83 c4 0c             	add    esp,0xc
c001396b:	c3                   	ret    

c001396c <Buzzer::stop()>:
c001396c:	83 ec 14             	sub    esp,0x14
c001396f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013973:	8b 10                	mov    edx,DWORD PTR [eax]
c0013975:	6a 00                	push   0x0
c0013977:	50                   	push   eax
c0013978:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001397b:	83 c4 1c             	add    esp,0x1c
c001397e:	c3                   	ret    

c001397f <beepThread(void*)>:
c001397f:	53                   	push   ebx
c0013980:	83 ec 08             	sub    esp,0x8
c0013983:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013987:	e8 d2 a0 00 00       	call   c001da5e <unlockScheduler()>
c001398c:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013991:	52                   	push   edx
c0013992:	52                   	push   edx
c0013993:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013999:	52                   	push   edx
c001399a:	50                   	push   eax
c001399b:	e8 0c a6 00 00       	call   c001dfac <nanoSleep(unsigned long long)>
c00139a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139a3:	e8 c4 ff ff ff       	call   c001396c <Buzzer::stop()>
c00139a8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00139b0:	83 c4 18             	add    esp,0x18
c00139b3:	5b                   	pop    ebx
c00139b4:	e9 39 a5 00 00       	jmp    c001def2 <blockTask(TaskState)>
c00139b9:	90                   	nop

c00139ba <Buzzer::beep(int, int, bool)>:
c00139ba:	57                   	push   edi
c00139bb:	56                   	push   esi
c00139bc:	53                   	push   ebx
c00139bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139c1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00139c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00139c9:	52                   	push   edx
c00139ca:	52                   	push   edx
c00139cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00139cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d1:	56                   	push   esi
c00139d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00139d5:	83 c4 10             	add    esp,0x10
c00139d8:	89 f8                	mov    eax,edi
c00139da:	84 c0                	test   al,al
c00139dc:	74 1f                	je     c00139fd <Buzzer::beep(int, int, bool)+0x43>
c00139de:	50                   	push   eax
c00139df:	50                   	push   eax
c00139e0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00139e6:	99                   	cdq    
c00139e7:	52                   	push   edx
c00139e8:	50                   	push   eax
c00139e9:	e8 be a5 00 00       	call   c001dfac <nanoSleep(unsigned long long)>
c00139ee:	83 c4 10             	add    esp,0x10
c00139f1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139f5:	5b                   	pop    ebx
c00139f6:	5e                   	pop    esi
c00139f7:	5f                   	pop    edi
c00139f8:	e9 6f ff ff ff       	jmp    c001396c <Buzzer::stop()>
c00139fd:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013a03:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0013a08:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013a10:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013a14:	c7 44 24 14 7f 39 01 c0 	mov    DWORD PTR [esp+0x14],0xc001397f
c0013a1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013a20:	5b                   	pop    ebx
c0013a21:	5e                   	pop    esi
c0013a22:	5f                   	pop    edi
c0013a23:	e9 66 a1 00 00       	jmp    c001db8e <Process::createThread(void (*)(void*), void*, int)>

c0013a28 <User::loadClockSettings(int)>:
c0013a28:	53                   	push   ebx
c0013a29:	83 ec 14             	sub    esp,0x14
c0013a2c:	68 14 01 00 00       	push   0x114
c0013a31:	e8 0a be ff ff       	call   c000f840 <malloc>
c0013a36:	83 c4 0c             	add    esp,0xc
c0013a39:	89 c3                	mov    ebx,eax
c0013a3b:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c0013a41:	68 f8 a7 02 c0       	push   0xc002a7f8
c0013a46:	50                   	push   eax
c0013a47:	e8 c8 f6 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c0013a4c:	58                   	pop    eax
c0013a4d:	5a                   	pop    edx
c0013a4e:	6a 01                	push   0x1
c0013a50:	53                   	push   ebx
c0013a51:	e8 22 f7 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c0013a56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a59:	e8 78 f7 ff ff       	call   c00131d6 <File::close()>
c0013a5e:	83 c4 10             	add    esp,0x10
c0013a61:	85 db                	test   ebx,ebx
c0013a63:	74 0f                	je     c0013a74 <User::loadClockSettings(int)+0x4c>
c0013a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a67:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013a6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013a6e:	83 c4 08             	add    esp,0x8
c0013a71:	5b                   	pop    ebx
c0013a72:	ff e0                	jmp    eax
c0013a74:	83 c4 08             	add    esp,0x8
c0013a77:	5b                   	pop    ebx
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Clock::Clock(char const*)>:
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a81:	83 ec 08             	sub    esp,0x8
c0013a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a88:	50                   	push   eax
c0013a89:	e8 44 07 00 00       	call   c00141d2 <Device::Device(char const*)>
c0013a8e:	83 c4 10             	add    esp,0x10
c0013a91:	ba 20 a8 02 c0       	mov    edx,0xc002a820
c0013a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9a:	89 10                	mov    DWORD PTR [eax],edx
c0013a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013aaa:	90                   	nop
c0013aab:	83 c4 0c             	add    esp,0xc
c0013aae:	c3                   	ret    
c0013aaf:	90                   	nop

c0013ab0 <Clock::~Clock()>:
c0013ab0:	83 ec 0c             	sub    esp,0xc
c0013ab3:	ba 20 a8 02 c0       	mov    edx,0xc002a820
c0013ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013abc:	89 10                	mov    DWORD PTR [eax],edx
c0013abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac2:	83 ec 0c             	sub    esp,0xc
c0013ac5:	50                   	push   eax
c0013ac6:	e8 e9 03 00 00       	call   c0013eb4 <Device::~Device()>
c0013acb:	83 c4 10             	add    esp,0x10
c0013ace:	90                   	nop
c0013acf:	83 c4 0c             	add    esp,0xc
c0013ad2:	c3                   	ret    
c0013ad3:	90                   	nop

c0013ad4 <Clock::~Clock()>:
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ade:	e8 cd ff ff ff       	call   c0013ab0 <Clock::~Clock()>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	83 ec 08             	sub    esp,0x8
c0013ae9:	68 58 01 00 00       	push   0x158
c0013aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af2:	e8 e5 ef ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0013af7:	83 c4 10             	add    esp,0x10
c0013afa:	83 c4 0c             	add    esp,0xc
c0013afd:	c3                   	ret    

c0013afe <Clock::timeInSecondsLocal()>:
c0013afe:	53                   	push   ebx
c0013aff:	83 ec 14             	sub    esp,0x14
c0013b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b06:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b08:	50                   	push   eax
c0013b09:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b0c:	0f b6 0d 50 e2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e250
c0013b13:	03 0d 54 e2 02 c0    	add    ecx,DWORD PTR ds:0xc002e254
c0013b19:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b1f:	89 cb                	mov    ebx,ecx
c0013b21:	c1 fb 1f             	sar    ebx,0x1f
c0013b24:	01 c8                	add    eax,ecx
c0013b26:	11 da                	adc    edx,ebx
c0013b28:	83 c4 10             	add    esp,0x10
c0013b2b:	31 c9                	xor    ecx,ecx
c0013b2d:	80 3d 51 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e251,0x0
c0013b34:	74 05                	je     c0013b3b <Clock::timeInSecondsLocal()+0x3d>
c0013b36:	b9 08 07 00 00       	mov    ecx,0x708
c0013b3b:	31 db                	xor    ebx,ebx
c0013b3d:	01 c8                	add    eax,ecx
c0013b3f:	11 da                	adc    edx,ebx
c0013b41:	83 c4 08             	add    esp,0x8
c0013b44:	5b                   	pop    ebx
c0013b45:	c3                   	ret    

c0013b46 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013b46:	57                   	push   edi
c0013b47:	56                   	push   esi
c0013b48:	53                   	push   ebx
c0013b49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b53:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013b57:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013b5a:	0f b6 05 50 e2 02 c0 	movzx  eax,BYTE PTR ds:0xc002e250
c0013b61:	03 05 54 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e254
c0013b67:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013b6d:	99                   	cdq    
c0013b6e:	29 c6                	sub    esi,eax
c0013b70:	19 d7                	sbb    edi,edx
c0013b72:	89 f0                	mov    eax,esi
c0013b74:	89 fa                	mov    edx,edi
c0013b76:	31 f6                	xor    esi,esi
c0013b78:	80 3d 51 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e251,0x0
c0013b7f:	74 05                	je     c0013b86 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013b81:	be 08 07 00 00       	mov    esi,0x708
c0013b86:	31 ff                	xor    edi,edi
c0013b88:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013b8c:	29 f0                	sub    eax,esi
c0013b8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b92:	19 fa                	sbb    edx,edi
c0013b94:	89 d8                	mov    eax,ebx
c0013b96:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b9a:	5b                   	pop    ebx
c0013b9b:	5e                   	pop    esi
c0013b9c:	5f                   	pop    edi
c0013b9d:	ff e0                	jmp    eax

c0013b9f <datetimeToSeconds(datetime_t)>:
c0013b9f:	55                   	push   ebp
c0013ba0:	57                   	push   edi
c0013ba1:	56                   	push   esi
c0013ba2:	53                   	push   ebx
c0013ba3:	83 ec 14             	sub    esp,0x14
c0013ba6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013baa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013bae:	89 d3                	mov    ebx,edx
c0013bb0:	0f b6 c6             	movzx  eax,dh
c0013bb3:	c1 eb 10             	shr    ebx,0x10
c0013bb6:	48                   	dec    eax
c0013bb7:	66 81 eb 6c 07       	sub    bx,0x76c
c0013bbc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013bc0:	0f b6 f5             	movzx  esi,ch
c0013bc3:	89 cf                	mov    edi,ecx
c0013bc5:	6b f6 3c             	imul   esi,esi,0x3c
c0013bc8:	c1 ef 10             	shr    edi,0x10
c0013bcb:	0f b6 c9             	movzx  ecx,cl
c0013bce:	89 f8                	mov    eax,edi
c0013bd0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013bd6:	0f b6 f8             	movzx  edi,al
c0013bd9:	0f b6 d2             	movzx  edx,dl
c0013bdc:	01 fe                	add    esi,edi
c0013bde:	01 f1                	add    ecx,esi
c0013be0:	0f b7 f3             	movzx  esi,bx
c0013be3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013be7:	c1 f9 1f             	sar    ecx,0x1f
c0013bea:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013bef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013bf3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013bf8:	8b 0c 8d 60 a8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd57a0]
c0013bff:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013c03:	76 29                	jbe    c0013c2e <datetimeToSeconds(datetime_t)+0x8f>
c0013c05:	f6 c3 03             	test   bl,0x3
c0013c08:	75 24                	jne    c0013c2e <datetimeToSeconds(datetime_t)+0x8f>
c0013c0a:	31 d2                	xor    edx,edx
c0013c0c:	bf 64 00 00 00       	mov    edi,0x64
c0013c11:	89 d8                	mov    eax,ebx
c0013c13:	66 f7 f7             	div    di
c0013c16:	66 85 d2             	test   dx,dx
c0013c19:	75 12                	jne    c0013c2d <datetimeToSeconds(datetime_t)+0x8e>
c0013c1b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013c21:	bf 90 01 00 00       	mov    edi,0x190
c0013c26:	99                   	cdq    
c0013c27:	f7 ff                	idiv   edi
c0013c29:	85 d2                	test   edx,edx
c0013c2b:	75 01                	jne    c0013c2e <datetimeToSeconds(datetime_t)+0x8f>
c0013c2d:	41                   	inc    ecx
c0013c2e:	66 83 fb 46          	cmp    bx,0x46
c0013c32:	76 45                	jbe    c0013c79 <datetimeToSeconds(datetime_t)+0xda>
c0013c34:	bb 46 00 00 00       	mov    ebx,0x46
c0013c39:	bf 64 00 00 00       	mov    edi,0x64
c0013c3e:	bd 90 01 00 00       	mov    ebp,0x190
c0013c43:	b8 6d 01 00 00       	mov    eax,0x16d
c0013c48:	f6 c3 03             	test   bl,0x3
c0013c4b:	75 23                	jne    c0013c70 <datetimeToSeconds(datetime_t)+0xd1>
c0013c4d:	89 d8                	mov    eax,ebx
c0013c4f:	99                   	cdq    
c0013c50:	f7 ff                	idiv   edi
c0013c52:	b8 6e 01 00 00       	mov    eax,0x16e
c0013c57:	85 d2                	test   edx,edx
c0013c59:	75 15                	jne    c0013c70 <datetimeToSeconds(datetime_t)+0xd1>
c0013c5b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013c61:	99                   	cdq    
c0013c62:	f7 fd                	idiv   ebp
c0013c64:	83 fa 01             	cmp    edx,0x1
c0013c67:	19 c0                	sbb    eax,eax
c0013c69:	f7 d0                	not    eax
c0013c6b:	05 6e 01 00 00       	add    eax,0x16e
c0013c70:	01 c1                	add    ecx,eax
c0013c72:	43                   	inc    ebx
c0013c73:	39 f3                	cmp    ebx,esi
c0013c75:	7c cc                	jl     c0013c43 <datetimeToSeconds(datetime_t)+0xa4>
c0013c77:	eb 35                	jmp    c0013cae <datetimeToSeconds(datetime_t)+0x10f>
c0013c79:	74 33                	je     c0013cae <datetimeToSeconds(datetime_t)+0x10f>
c0013c7b:	b8 45 00 00 00       	mov    eax,0x45
c0013c80:	89 c2                	mov    edx,eax
c0013c82:	83 e2 03             	and    edx,0x3
c0013c85:	39 f0                	cmp    eax,esi
c0013c87:	7e 0f                	jle    c0013c98 <datetimeToSeconds(datetime_t)+0xf9>
c0013c89:	83 fa 01             	cmp    edx,0x1
c0013c8c:	19 d2                	sbb    edx,edx
c0013c8e:	48                   	dec    eax
c0013c8f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013c96:	eb e8                	jmp    c0013c80 <datetimeToSeconds(datetime_t)+0xe1>
c0013c98:	b8 6d 01 00 00       	mov    eax,0x16d
c0013c9d:	85 d2                	test   edx,edx
c0013c9f:	75 0b                	jne    c0013cac <datetimeToSeconds(datetime_t)+0x10d>
c0013ca1:	66 83 fb 01          	cmp    bx,0x1
c0013ca5:	19 c0                	sbb    eax,eax
c0013ca7:	05 6e 01 00 00       	add    eax,0x16e
c0013cac:	29 c1                	sub    ecx,eax
c0013cae:	b8 80 51 01 00       	mov    eax,0x15180
c0013cb3:	f7 e9                	imul   ecx
c0013cb5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013cb9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013cbd:	83 c4 14             	add    esp,0x14
c0013cc0:	5b                   	pop    ebx
c0013cc1:	5e                   	pop    esi
c0013cc2:	5f                   	pop    edi
c0013cc3:	5d                   	pop    ebp
c0013cc4:	c3                   	ret    
c0013cc5:	90                   	nop

c0013cc6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013cc6:	57                   	push   edi
c0013cc7:	56                   	push   esi
c0013cc8:	53                   	push   ebx
c0013cc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ccd:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ccf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013cd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cda:	e8 c0 fe ff ff       	call   c0013b9f <datetimeToSeconds(datetime_t)>
c0013cdf:	59                   	pop    ecx
c0013ce0:	0f b6 0d 50 e2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e250
c0013ce7:	5b                   	pop    ebx
c0013ce8:	03 0d 54 e2 02 c0    	add    ecx,DWORD PTR ds:0xc002e254
c0013cee:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013cf4:	89 cb                	mov    ebx,ecx
c0013cf6:	c1 fb 1f             	sar    ebx,0x1f
c0013cf9:	29 c8                	sub    eax,ecx
c0013cfb:	19 da                	sbb    edx,ebx
c0013cfd:	31 c9                	xor    ecx,ecx
c0013cff:	80 3d 51 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e251,0x0
c0013d06:	74 05                	je     c0013d0d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013d08:	b9 08 07 00 00       	mov    ecx,0x708
c0013d0d:	31 db                	xor    ebx,ebx
c0013d0f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d13:	29 c8                	sub    eax,ecx
c0013d15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d19:	19 da                	sbb    edx,ebx
c0013d1b:	89 f8                	mov    eax,edi
c0013d1d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d21:	5b                   	pop    ebx
c0013d22:	5e                   	pop    esi
c0013d23:	5f                   	pop    edi
c0013d24:	ff e0                	jmp    eax

c0013d26 <secondsToDatetime(unsigned long long)>:
c0013d26:	55                   	push   ebp
c0013d27:	57                   	push   edi
c0013d28:	56                   	push   esi
c0013d29:	53                   	push   ebx
c0013d2a:	83 ec 1c             	sub    esp,0x1c
c0013d2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013d31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013d35:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013d39:	6a 00                	push   0x0
c0013d3b:	68 80 51 01 00       	push   0x15180
c0013d40:	55                   	push   ebp
c0013d41:	57                   	push   edi
c0013d42:	e8 f5 28 01 00       	call   c002663c <__udivdi3>
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013d50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d54:	6a 00                	push   0x0
c0013d56:	68 80 51 01 00       	push   0x15180
c0013d5b:	55                   	push   ebp
c0013d5c:	57                   	push   edi
c0013d5d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013d62:	e8 d5 29 01 00       	call   c002673c <__umoddi3>
c0013d67:	83 c4 10             	add    esp,0x10
c0013d6a:	99                   	cdq    
c0013d6b:	f7 ff                	idiv   edi
c0013d6d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013d72:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013d75:	89 d0                	mov    eax,edx
c0013d77:	99                   	cdq    
c0013d78:	f7 ff                	idiv   edi
c0013d7a:	85 db                	test   ebx,ebx
c0013d7c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013d7f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013d82:	79 11                	jns    c0013d95 <secondsToDatetime(unsigned long long)+0x6f>
c0013d84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d88:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013d8e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d93:	eb 07                	jmp    c0013d9c <secondsToDatetime(unsigned long long)+0x76>
c0013d95:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d9a:	89 d8                	mov    eax,ebx
c0013d9c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013da1:	99                   	cdq    
c0013da2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013da7:	f7 f9                	idiv   ecx
c0013da9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013dae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013db2:	31 d2                	xor    edx,edx
c0013db4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013dbc:	01 c3                	add    ebx,eax
c0013dbe:	89 d8                	mov    eax,ebx
c0013dc0:	f7 f1                	div    ecx
c0013dc2:	31 d2                	xor    edx,edx
c0013dc4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013dc7:	89 d8                	mov    eax,ebx
c0013dc9:	f7 f7                	div    edi
c0013dcb:	31 d2                	xor    edx,edx
c0013dcd:	29 c1                	sub    ecx,eax
c0013dcf:	89 d8                	mov    eax,ebx
c0013dd1:	f7 f5                	div    ebp
c0013dd3:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013dd8:	29 c1                	sub    ecx,eax
c0013dda:	31 d2                	xor    edx,edx
c0013ddc:	89 c8                	mov    eax,ecx
c0013dde:	f7 f5                	div    ebp
c0013de0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013de9:	31 d2                	xor    edx,edx
c0013deb:	89 c8                	mov    eax,ecx
c0013ded:	f7 f5                	div    ebp
c0013def:	31 d2                	xor    edx,edx
c0013df1:	01 c3                	add    ebx,eax
c0013df3:	89 c8                	mov    eax,ecx
c0013df5:	f7 f7                	div    edi
c0013df7:	bf 99 00 00 00       	mov    edi,0x99
c0013dfc:	29 c3                	sub    ebx,eax
c0013dfe:	31 d2                	xor    edx,edx
c0013e00:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013e08:	29 c3                	sub    ebx,eax
c0013e0a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013e0d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013e10:	bb 05 00 00 00       	mov    ebx,0x5
c0013e15:	83 c1 02             	add    ecx,0x2
c0013e18:	89 c8                	mov    eax,ecx
c0013e1a:	f7 f7                	div    edi
c0013e1c:	31 d2                	xor    edx,edx
c0013e1e:	89 c7                	mov    edi,eax
c0013e20:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013e26:	83 c0 02             	add    eax,0x2
c0013e29:	f7 f3                	div    ebx
c0013e2b:	89 eb                	mov    ebx,ebp
c0013e2d:	29 c3                	sub    ebx,eax
c0013e2f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013e35:	88 1e                	mov    BYTE PTR [esi],bl
c0013e37:	19 c0                	sbb    eax,eax
c0013e39:	31 d2                	xor    edx,edx
c0013e3b:	83 e0 0c             	and    eax,0xc
c0013e3e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013e42:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013e4a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013e4e:	83 f9 01             	cmp    ecx,0x1
c0013e51:	0f 96 c2             	setbe  dl
c0013e54:	41                   	inc    ecx
c0013e55:	01 d0                	add    eax,edx
c0013e57:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013e5a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013e5e:	83 c4 1c             	add    esp,0x1c
c0013e61:	89 f0                	mov    eax,esi
c0013e63:	5b                   	pop    ebx
c0013e64:	5e                   	pop    esi
c0013e65:	5f                   	pop    edi
c0013e66:	5d                   	pop    ebp
c0013e67:	c2 04 00             	ret    0x4

c0013e6a <Clock::timeInDatetimeLocal()>:
c0013e6a:	53                   	push   ebx
c0013e6b:	83 ec 14             	sub    esp,0x14
c0013e6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e76:	e8 83 fc ff ff       	call   c0013afe <Clock::timeInSecondsLocal()>
c0013e7b:	83 c4 0c             	add    esp,0xc
c0013e7e:	52                   	push   edx
c0013e7f:	50                   	push   eax
c0013e80:	53                   	push   ebx
c0013e81:	e8 a0 fe ff ff       	call   c0013d26 <secondsToDatetime(unsigned long long)>
c0013e86:	89 d8                	mov    eax,ebx
c0013e88:	83 c4 14             	add    esp,0x14
c0013e8b:	5b                   	pop    ebx
c0013e8c:	c2 04 00             	ret    0x4
c0013e8f:	90                   	nop

c0013e90 <Device::hibernate()>:
c0013e90:	c3                   	ret    
c0013e91:	90                   	nop

c0013e92 <Device::wake()>:
c0013e92:	c3                   	ret    
c0013e93:	90                   	nop

c0013e94 <Device::detect()>:
c0013e94:	c3                   	ret    
c0013e95:	90                   	nop

c0013e96 <Device::disableLegacy()>:
c0013e96:	c3                   	ret    
c0013e97:	90                   	nop

c0013e98 <Device::powerSaving(PowerSavingLevel)>:
c0013e98:	c3                   	ret    
c0013e99:	90                   	nop

c0013e9a <DriverlessDevice::close(int, int, void*)>:
c0013e9a:	31 c0                	xor    eax,eax
c0013e9c:	c3                   	ret    
c0013e9d:	90                   	nop

c0013e9e <DriverlessDevice::detect()>:
c0013e9e:	c3                   	ret    
c0013e9f:	90                   	nop

c0013ea0 <DriverlessDevice::open(int, int, void*)>:
c0013ea0:	83 ec 18             	sub    esp,0x18
c0013ea3:	68 90 a8 02 c0       	push   0xc002a890
c0013ea8:	e8 8a 63 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0013ead:	83 c8 ff             	or     eax,0xffffffff
c0013eb0:	83 c4 1c             	add    esp,0x1c
c0013eb3:	c3                   	ret    

c0013eb4 <Device::~Device()>:
c0013eb4:	ba b8 a8 02 c0       	mov    edx,0xc002a8b8
c0013eb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ebd:	89 10                	mov    DWORD PTR [eax],edx
c0013ebf:	90                   	nop
c0013ec0:	c3                   	ret    
c0013ec1:	90                   	nop

c0013ec2 <Device::~Device()>:
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ec9:	e8 e6 ff ff ff       	call   c0013eb4 <Device::~Device()>
c0013ece:	83 c4 04             	add    esp,0x4
c0013ed1:	83 ec 08             	sub    esp,0x8
c0013ed4:	68 58 01 00 00       	push   0x158
c0013ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013edd:	e8 fa eb ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	83 c4 0c             	add    esp,0xc
c0013ee8:	c3                   	ret    
c0013ee9:	90                   	nop

c0013eea <Device::findAndLoadDriver()>:
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <Device::preOpenPCI(PCIDeviceInfo)>:
c0013eec:	57                   	push   edi
c0013eed:	b9 09 00 00 00       	mov    ecx,0x9
c0013ef2:	56                   	push   esi
c0013ef3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ef7:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013efb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013f05:	81 c7 18 01 00 00    	add    edi,0x118
c0013f0b:	fc                   	cld    
c0013f0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013f0e:	5e                   	pop    esi
c0013f0f:	5f                   	pop    edi
c0013f10:	c3                   	ret    
c0013f11:	90                   	nop

c0013f12 <Device::preOpenACPI(void*, char*, char*)>:
c0013f12:	56                   	push   esi
c0013f13:	53                   	push   ebx
c0013f14:	83 ec 08             	sub    esp,0x8
c0013f17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013f1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f1f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013f29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f2d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013f33:	6a 1e                	push   0x1e
c0013f35:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013f3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f3f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013f45:	50                   	push   eax
c0013f46:	e8 f9 c7 fe ff       	call   c0000744 <memcpy>
c0013f4b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013f4f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013f53:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013f5b:	83 c4 14             	add    esp,0x14
c0013f5e:	5b                   	pop    ebx
c0013f5f:	5e                   	pop    esi
c0013f60:	e9 df c7 fe ff       	jmp    c0000744 <memcpy>
c0013f65:	90                   	nop

c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f6a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f6f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f76:	75 0b                	jne    c0013f83 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013f78:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f7e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013f81:	eb 1e                	jmp    c0013fa1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013f83:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0013f88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f8e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f94:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f9e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013fa1:	ff e0                	jmp    eax
c0013fa3:	90                   	nop

c0013fa4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fa8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013fad:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013fb4:	75 0b                	jne    c0013fc1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013fb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fb8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013fbc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013fbf:	eb 1e                	jmp    c0013fdf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013fc1:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0013fc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013fcc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013fd2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013fd4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013fd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fdc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013fdf:	ff e0                	jmp    eax
c0013fe1:	90                   	nop

c0013fe2 <Device::addChild(Device*)>:
c0013fe2:	53                   	push   ebx
c0013fe3:	83 ec 08             	sub    esp,0x8
c0013fe6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fee:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013ff4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013ffa:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013ffc:	85 d2                	test   edx,edx
c0013ffe:	74 04                	je     c0014004 <Device::addChild(Device*)+0x22>
c0014000:	89 d3                	mov    ebx,edx
c0014002:	eb f6                	jmp    c0013ffa <Device::addChild(Device*)+0x18>
c0014004:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014007:	83 ec 0c             	sub    esp,0xc
c001400a:	6a 08                	push   0x8
c001400c:	e8 2f b8 ff ff       	call   c000f840 <malloc>
c0014011:	89 03                	mov    DWORD PTR [ebx],eax
c0014013:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014019:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014020:	83 c4 18             	add    esp,0x18
c0014023:	5b                   	pop    ebx
c0014024:	c3                   	ret    
c0014025:	90                   	nop

c0014026 <Device::removeAllChildren()>:
c0014026:	56                   	push   esi
c0014027:	53                   	push   ebx
c0014028:	52                   	push   edx
c0014029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001402d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014033:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014036:	74 17                	je     c001404f <Device::removeAllChildren()+0x29>
c0014038:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001403b:	85 c0                	test   eax,eax
c001403d:	74 0c                	je     c001404b <Device::removeAllChildren()+0x25>
c001403f:	83 ec 0c             	sub    esp,0xc
c0014042:	8b 10                	mov    edx,DWORD PTR [eax]
c0014044:	50                   	push   eax
c0014045:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014048:	83 c4 10             	add    esp,0x10
c001404b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001404d:	eb e4                	jmp    c0014033 <Device::removeAllChildren()+0xd>
c001404f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014055:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001405b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014061:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014068:	58                   	pop    eax
c0014069:	5b                   	pop    ebx
c001406a:	5e                   	pop    esi
c001406b:	c3                   	ret    

c001406c <Device::hibernateAll()>:
c001406c:	53                   	push   ebx
c001406d:	83 ec 14             	sub    esp,0x14
c0014070:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014074:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014076:	53                   	push   ebx
c0014077:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001407a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014080:	83 c4 10             	add    esp,0x10
c0014083:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014086:	74 0f                	je     c0014097 <Device::hibernateAll()+0x2b>
c0014088:	83 ec 0c             	sub    esp,0xc
c001408b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001408e:	e8 d9 ff ff ff       	call   c001406c <Device::hibernateAll()>
c0014093:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014095:	eb e9                	jmp    c0014080 <Device::hibernateAll()+0x14>
c0014097:	83 c4 08             	add    esp,0x8
c001409a:	5b                   	pop    ebx
c001409b:	c3                   	ret    

c001409c <Device::wakeAll()>:
c001409c:	53                   	push   ebx
c001409d:	83 ec 14             	sub    esp,0x14
c00140a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a6:	53                   	push   ebx
c00140a7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00140aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140b6:	74 0f                	je     c00140c7 <Device::wakeAll()+0x2b>
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140be:	e8 d9 ff ff ff       	call   c001409c <Device::wakeAll()>
c00140c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140c5:	eb e9                	jmp    c00140b0 <Device::wakeAll()+0x14>
c00140c7:	83 c4 08             	add    esp,0x8
c00140ca:	5b                   	pop    ebx
c00140cb:	c3                   	ret    

c00140cc <Device::detectAll()>:
c00140cc:	53                   	push   ebx
c00140cd:	83 ec 14             	sub    esp,0x14
c00140d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d6:	53                   	push   ebx
c00140d7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00140da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140e6:	74 0f                	je     c00140f7 <Device::detectAll()+0x2b>
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140ee:	e8 d9 ff ff ff       	call   c00140cc <Device::detectAll()>
c00140f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140f5:	eb e9                	jmp    c00140e0 <Device::detectAll()+0x14>
c00140f7:	83 c4 08             	add    esp,0x8
c00140fa:	5b                   	pop    ebx
c00140fb:	c3                   	ret    

c00140fc <Device::disableLegacyAll()>:
c00140fc:	53                   	push   ebx
c00140fd:	83 ec 14             	sub    esp,0x14
c0014100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014106:	53                   	push   ebx
c0014107:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001410a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014110:	83 c4 10             	add    esp,0x10
c0014113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014116:	74 0f                	je     c0014127 <Device::disableLegacyAll()+0x2b>
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001411e:	e8 d9 ff ff ff       	call   c00140fc <Device::disableLegacyAll()>
c0014123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014125:	eb e9                	jmp    c0014110 <Device::disableLegacyAll()+0x14>
c0014127:	83 c4 08             	add    esp,0x8
c001412a:	5b                   	pop    ebx
c001412b:	c3                   	ret    

c001412c <Device::loadDriversForAll()>:
c001412c:	53                   	push   ebx
c001412d:	83 ec 08             	sub    esp,0x8
c0014130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014134:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001413a:	8b 18                	mov    ebx,DWORD PTR [eax]
c001413c:	85 db                	test   ebx,ebx
c001413e:	74 12                	je     c0014152 <Device::loadDriversForAll()+0x26>
c0014140:	83 ec 0c             	sub    esp,0xc
c0014143:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014146:	e8 e1 ff ff ff       	call   c001412c <Device::loadDriversForAll()>
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	89 d8                	mov    eax,ebx
c0014150:	eb e8                	jmp    c001413a <Device::loadDriversForAll()+0xe>
c0014152:	83 c4 08             	add    esp,0x8
c0014155:	5b                   	pop    ebx
c0014156:	c3                   	ret    
c0014157:	90                   	nop

c0014158 <Device::closeAll()>:
c0014158:	53                   	push   ebx
c0014159:	83 ec 08             	sub    esp,0x8
c001415c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014160:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014162:	6a 00                	push   0x0
c0014164:	6a 00                	push   0x0
c0014166:	6a 00                	push   0x0
c0014168:	53                   	push   ebx
c0014169:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001416c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014172:	83 c4 10             	add    esp,0x10
c0014175:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014178:	74 0f                	je     c0014189 <Device::closeAll()+0x31>
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014180:	e8 d3 ff ff ff       	call   c0014158 <Device::closeAll()>
c0014185:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014187:	eb e9                	jmp    c0014172 <Device::closeAll()+0x1a>
c0014189:	83 c4 08             	add    esp,0x8
c001418c:	5b                   	pop    ebx
c001418d:	c3                   	ret    

c001418e <Device::powerSavingAll(PowerSavingLevel)>:
c001418e:	56                   	push   esi
c001418f:	53                   	push   ebx
c0014190:	83 ec 0c             	sub    esp,0xc
c0014193:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014197:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001419b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001419d:	56                   	push   esi
c001419e:	53                   	push   ebx
c001419f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00141a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00141a8:	83 c4 10             	add    esp,0x10
c00141ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00141ae:	74 0f                	je     c00141bf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00141b0:	52                   	push   edx
c00141b1:	52                   	push   edx
c00141b2:	56                   	push   esi
c00141b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00141b6:	e8 d3 ff ff ff       	call   c001418e <Device::powerSavingAll(PowerSavingLevel)>
c00141bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00141bd:	eb e9                	jmp    c00141a8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00141bf:	58                   	pop    eax
c00141c0:	5b                   	pop    ebx
c00141c1:	5e                   	pop    esi
c00141c2:	c3                   	ret    
c00141c3:	90                   	nop

c00141c4 <Device::setName(char const*)>:
c00141c4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00141cc:	e9 63 c6 fe ff       	jmp    c0000834 <strcpy>
c00141d1:	90                   	nop

c00141d2 <Device::Device(char const*)>:
c00141d2:	83 ec 1c             	sub    esp,0x1c
c00141d5:	ba b8 a8 02 c0       	mov    edx,0xc002a8b8
c00141da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141de:	89 10                	mov    DWORD PTR [eax],edx
c00141e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00141ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00141fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014200:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001420a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001420e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014218:	83 ec 08             	sub    esp,0x8
c001421b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001421f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014223:	e8 9c ff ff ff       	call   c00141c4 <Device::setName(char const*)>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014233:	83 ec 0c             	sub    esp,0xc
c0014236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001423a:	e8 01 b6 ff ff       	call   c000f840 <malloc>
c001423f:	83 c4 10             	add    esp,0x10
c0014242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014248:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001424f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014253:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001425d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014263:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001426d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014273:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001427a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001427e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014289:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014294:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001429e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142a2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00142ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00142ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142be:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00142c8:	90                   	nop
c00142c9:	83 c4 1c             	add    esp,0x1c
c00142cc:	c3                   	ret    
c00142cd:	90                   	nop

c00142ce <Device::getName()>:
c00142ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142d2:	05 d0 00 00 00       	add    eax,0xd0
c00142d7:	c3                   	ret    

c00142d8 <DriverlessDevice::DriverlessDevice(char const*)>:
c00142d8:	83 ec 0c             	sub    esp,0xc
c00142db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142df:	83 ec 08             	sub    esp,0x8
c00142e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142e6:	50                   	push   eax
c00142e7:	e8 e6 fe ff ff       	call   c00141d2 <Device::Device(char const*)>
c00142ec:	83 c4 10             	add    esp,0x10
c00142ef:	ba e4 a8 02 c0       	mov    edx,0xc002a8e4
c00142f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142f8:	89 10                	mov    DWORD PTR [eax],edx
c00142fa:	90                   	nop
c00142fb:	83 c4 0c             	add    esp,0xc
c00142fe:	c3                   	ret    
c00142ff:	90                   	nop

c0014300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014300:	57                   	push   edi
c0014301:	56                   	push   esi
c0014302:	53                   	push   ebx
c0014303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014307:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001430b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001430f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014315:	75 0c                	jne    c0014323 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014317:	52                   	push   edx
c0014318:	52                   	push   edx
c0014319:	53                   	push   ebx
c001431a:	56                   	push   esi
c001431b:	e8 5a 42 01 00       	call   c002857a <LinkedList<Device>::addElement(Device*)>
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001432c:	74 12                	je     c0014340 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001432e:	50                   	push   eax
c001432f:	57                   	push   edi
c0014330:	56                   	push   esi
c0014331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014334:	e8 c7 ff ff ff       	call   c0014300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	eb e9                	jmp    c0014329 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014340:	5b                   	pop    ebx
c0014341:	5e                   	pop    esi
c0014342:	5f                   	pop    edi
c0014343:	c3                   	ret    

c0014344 <getDevicesOfType(DeviceType)>:
c0014344:	53                   	push   ebx
c0014345:	83 ec 14             	sub    esp,0x14
c0014348:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001434c:	53                   	push   ebx
c001434d:	e8 04 43 01 00       	call   c0028656 <LinkedList<Device>::LinkedList()>
c0014352:	83 c4 0c             	add    esp,0xc
c0014355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014359:	53                   	push   ebx
c001435a:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c0014360:	e8 9b ff ff ff       	call   c0014300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014365:	89 d8                	mov    eax,ebx
c0014367:	83 c4 18             	add    esp,0x18
c001436a:	5b                   	pop    ebx
c001436b:	c2 04 00             	ret    0x4

c001436e <HardDiskController::HardDiskController(char const*)>:
c001436e:	83 ec 0c             	sub    esp,0xc
c0014371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014375:	83 ec 08             	sub    esp,0x8
c0014378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001437c:	50                   	push   eax
c001437d:	e8 50 fe ff ff       	call   c00141d2 <Device::Device(char const*)>
c0014382:	83 c4 10             	add    esp,0x10
c0014385:	ba 10 a9 02 c0       	mov    edx,0xc002a910
c001438a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438e:	89 10                	mov    DWORD PTR [eax],edx
c0014390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014394:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001439e:	90                   	nop
c001439f:	83 c4 0c             	add    esp,0xc
c00143a2:	c3                   	ret    
c00143a3:	90                   	nop

c00143a4 <HardDiskController::~HardDiskController()>:
c00143a4:	83 ec 0c             	sub    esp,0xc
c00143a7:	ba 10 a9 02 c0       	mov    edx,0xc002a910
c00143ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b0:	89 10                	mov    DWORD PTR [eax],edx
c00143b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b6:	83 ec 0c             	sub    esp,0xc
c00143b9:	50                   	push   eax
c00143ba:	e8 f5 fa ff ff       	call   c0013eb4 <Device::~Device()>
c00143bf:	83 c4 10             	add    esp,0x10
c00143c2:	90                   	nop
c00143c3:	83 c4 0c             	add    esp,0xc
c00143c6:	c3                   	ret    
c00143c7:	90                   	nop

c00143c8 <HardDiskController::~HardDiskController()>:
c00143c8:	83 ec 0c             	sub    esp,0xc
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143d2:	e8 cd ff ff ff       	call   c00143a4 <HardDiskController::~HardDiskController()>
c00143d7:	83 c4 10             	add    esp,0x10
c00143da:	83 ec 08             	sub    esp,0x8
c00143dd:	68 58 01 00 00       	push   0x158
c00143e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143e6:	e8 f1 e6 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	83 c4 0c             	add    esp,0xc
c00143f1:	c3                   	ret    

c00143f2 <PhysicalDisk::eject()>:
c00143f2:	83 ec 18             	sub    esp,0x18
c00143f5:	68 34 a9 02 c0       	push   0xc002a934
c00143fa:	e8 bd e7 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00143ff:	83 c8 ff             	or     eax,0xffffffff
c0014402:	83 c4 1c             	add    esp,0x1c
c0014405:	c3                   	ret    

c0014406 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440d:	83 ec 08             	sub    esp,0x8
c0014410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014414:	50                   	push   eax
c0014415:	e8 b8 fd ff ff       	call   c00141d2 <Device::Device(char const*)>
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	ba 64 a9 02 c0       	mov    edx,0xc002a964
c0014422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014426:	89 10                	mov    DWORD PTR [eax],edx
c0014428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001442c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014437:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001443e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014442:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001444c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014450:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014454:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014468:	90                   	nop
c0014469:	83 c4 0c             	add    esp,0xc
c001446c:	c3                   	ret    
c001446d:	90                   	nop

c001446e <PhysicalDisk::startCache()>:
c001446e:	56                   	push   esi
c001446f:	53                   	push   ebx
c0014470:	83 ec 10             	sub    esp,0x10
c0014473:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014477:	6a 44                	push   0x44
c0014479:	e8 c2 b3 ff ff       	call   c000f840 <malloc>
c001447e:	89 c6                	mov    esi,eax
c0014480:	58                   	pop    eax
c0014481:	5a                   	pop    edx
c0014482:	53                   	push   ebx
c0014483:	56                   	push   esi
c0014484:	e8 03 27 00 00       	call   c0016b8c <VCache::VCache(PhysicalDisk*)>
c0014489:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001448f:	83 c4 14             	add    esp,0x14
c0014492:	5b                   	pop    ebx
c0014493:	5e                   	pop    esi
c0014494:	c3                   	ret    
c0014495:	90                   	nop

c0014496 <PhysicalDisk::~PhysicalDisk()>:
c0014496:	83 ec 0c             	sub    esp,0xc
c0014499:	ba 64 a9 02 c0       	mov    edx,0xc002a964
c001449e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144a2:	89 10                	mov    DWORD PTR [eax],edx
c00144a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144a8:	83 ec 0c             	sub    esp,0xc
c00144ab:	50                   	push   eax
c00144ac:	e8 03 fa ff ff       	call   c0013eb4 <Device::~Device()>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	90                   	nop
c00144b5:	83 c4 0c             	add    esp,0xc
c00144b8:	c3                   	ret    
c00144b9:	90                   	nop

c00144ba <PhysicalDisk::~PhysicalDisk()>:
c00144ba:	83 ec 0c             	sub    esp,0xc
c00144bd:	83 ec 0c             	sub    esp,0xc
c00144c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c4:	e8 cd ff ff ff       	call   c0014496 <PhysicalDisk::~PhysicalDisk()>
c00144c9:	83 c4 10             	add    esp,0x10
c00144cc:	83 ec 08             	sub    esp,0x8
c00144cf:	68 6c 01 00 00       	push   0x16c
c00144d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144d8:	e8 ff e5 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00144dd:	83 c4 10             	add    esp,0x10
c00144e0:	83 c4 0c             	add    esp,0xc
c00144e3:	c3                   	ret    

c00144e4 <FPU::FPU(char const*)>:
c00144e4:	83 ec 0c             	sub    esp,0xc
c00144e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144eb:	83 ec 08             	sub    esp,0x8
c00144ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f2:	50                   	push   eax
c00144f3:	e8 da fc ff ff       	call   c00141d2 <Device::Device(char const*)>
c00144f8:	83 c4 10             	add    esp,0x10
c00144fb:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0014500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014504:	89 10                	mov    DWORD PTR [eax],edx
c0014506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001450a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014514:	90                   	nop
c0014515:	83 c4 0c             	add    esp,0xc
c0014518:	c3                   	ret    
c0014519:	90                   	nop

c001451a <FPU::~FPU()>:
c001451a:	83 ec 0c             	sub    esp,0xc
c001451d:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	89 10                	mov    DWORD PTR [eax],edx
c0014528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	50                   	push   eax
c0014530:	e8 7f f9 ff ff       	call   c0013eb4 <Device::~Device()>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	90                   	nop
c0014539:	83 c4 0c             	add    esp,0xc
c001453c:	c3                   	ret    
c001453d:	90                   	nop

c001453e <FPU::~FPU()>:
c001453e:	83 ec 0c             	sub    esp,0xc
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014548:	e8 cd ff ff ff       	call   c001451a <FPU::~FPU()>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	83 ec 08             	sub    esp,0x8
c0014553:	68 58 01 00 00       	push   0x158
c0014558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455c:	e8 7b e5 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0014561:	83 c4 10             	add    esp,0x10
c0014564:	83 c4 0c             	add    esp,0xc
c0014567:	c3                   	ret    

c0014568 <setupFPU()>:
c0014568:	53                   	push   ebx
c0014569:	83 ec 08             	sub    esp,0x8
c001456c:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c0014572:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014579:	74 19                	je     c0014594 <setupFPU()+0x2c>
c001457b:	83 ec 0c             	sub    esp,0xc
c001457e:	68 58 01 00 00       	push   0x158
c0014583:	e8 b8 b2 ff ff       	call   c000f840 <malloc>
c0014588:	89 c3                	mov    ebx,eax
c001458a:	89 04 24             	mov    DWORD PTR [esp],eax
c001458d:	e8 30 0c 01 00       	call   c00251c2 <AVX::AVX()>
c0014592:	eb 5b                	jmp    c00145ef <setupFPU()+0x87>
c0014594:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001459a:	84 c0                	test   al,al
c001459c:	79 19                	jns    c00145b7 <setupFPU()+0x4f>
c001459e:	83 ec 0c             	sub    esp,0xc
c00145a1:	68 58 01 00 00       	push   0x158
c00145a6:	e8 95 b2 ff ff       	call   c000f840 <malloc>
c00145ab:	89 c3                	mov    ebx,eax
c00145ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00145b0:	e8 33 0d 01 00       	call   c00252e8 <SSE::SSE()>
c00145b5:	eb 38                	jmp    c00145ef <setupFPU()+0x87>
c00145b7:	a8 20                	test   al,0x20
c00145b9:	74 19                	je     c00145d4 <setupFPU()+0x6c>
c00145bb:	83 ec 0c             	sub    esp,0xc
c00145be:	68 58 01 00 00       	push   0x158
c00145c3:	e8 78 b2 ff ff       	call   c000f840 <malloc>
c00145c8:	89 c3                	mov    ebx,eax
c00145ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00145cd:	e8 80 0c 01 00       	call   c0025252 <MMX::MMX()>
c00145d2:	eb 1b                	jmp    c00145ef <setupFPU()+0x87>
c00145d4:	a8 10                	test   al,0x10
c00145d6:	74 1c                	je     c00145f4 <setupFPU()+0x8c>
c00145d8:	83 ec 0c             	sub    esp,0xc
c00145db:	68 58 01 00 00       	push   0x158
c00145e0:	e8 5b b2 ff ff       	call   c000f840 <malloc>
c00145e5:	89 c3                	mov    ebx,eax
c00145e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00145ea:	e8 87 0d 01 00       	call   c0025376 <x87::x87()>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	eb 24                	jmp    c0014618 <setupFPU()+0xb0>
c00145f4:	83 e0 ef             	and    eax,0xffffffef
c00145f7:	83 ec 0c             	sub    esp,0xc
c00145fa:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014600:	68 94 a9 02 c0       	push   0xc002a994
c0014605:	e8 b2 e5 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001460a:	0f 20 c0             	mov    eax,cr0
c001460d:	83 c8 04             	or     eax,0x4
c0014610:	0f 22 c0             	mov    cr0,eax
c0014613:	31 db                	xor    ebx,ebx
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	89 d8                	mov    eax,ebx
c001461a:	83 c4 08             	add    esp,0x8
c001461d:	5b                   	pop    ebx
c001461e:	c3                   	ret    
c001461f:	90                   	nop

c0014620 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014628:	c1 e0 04             	shl    eax,0x4
c001462b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001462f:	8d 50 10             	lea    edx,[eax+0x10]
c0014632:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014638:	74 08                	je     c0014642 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001463a:	83 c0 04             	add    eax,0x4
c001463d:	39 d0                	cmp    eax,edx
c001463f:	75 f1                	jne    c0014632 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014641:	c3                   	ret    
c0014642:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001464c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014656:	eb e2                	jmp    c001463a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014658 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014658:	57                   	push   edi
c0014659:	31 c0                	xor    eax,eax
c001465b:	56                   	push   esi
c001465c:	53                   	push   ebx
c001465d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014661:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014665:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014669:	89 da                	mov    edx,ebx
c001466b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001466f:	c1 e2 04             	shl    edx,0x4
c0014672:	01 ca                	add    edx,ecx
c0014674:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001467c:	74 16                	je     c0014694 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001467e:	40                   	inc    eax
c001467f:	83 f8 04             	cmp    eax,0x4
c0014682:	75 f0                	jne    c0014674 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014684:	c7 44 24 10 d8 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a9d8
c001468c:	5b                   	pop    ebx
c001468d:	5e                   	pop    esi
c001468e:	5f                   	pop    edi
c001468f:	e9 a3 5b 00 00       	jmp    c001a237 <Krnl::panic(char const*)>
c0014694:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014697:	8d 04 81             	lea    eax,[ecx+eax*4]
c001469a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00146a0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00146a6:	5b                   	pop    ebx
c00146a7:	5e                   	pop    esi
c00146a8:	5f                   	pop    edi
c00146a9:	c3                   	ret    

c00146aa <doubleFault(regs*, void*)>:
c00146aa:	55                   	push   ebp
c00146ab:	89 e5                	mov    ebp,esp
c00146ad:	83 ec 08             	sub    esp,0x8
c00146b0:	83 ec 0c             	sub    esp,0xc
c00146b3:	68 13 aa 02 c0       	push   0xc002aa13
c00146b8:	e8 7a 5b 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	90                   	nop
c00146c1:	c9                   	leave  
c00146c2:	c3                   	ret    
c00146c3:	90                   	nop

c00146c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00146c4:	56                   	push   esi
c00146c5:	53                   	push   ebx
c00146c6:	50                   	push   eax
c00146c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00146cb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146cf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00146d4:	75 35                	jne    c001470b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00146d6:	8d 43 20             	lea    eax,[ebx+0x20]
c00146d9:	31 d2                	xor    edx,edx
c00146db:	89 c1                	mov    ecx,eax
c00146dd:	c1 e1 04             	shl    ecx,0x4
c00146e0:	01 f1                	add    ecx,esi
c00146e2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00146ea:	74 3e                	je     c001472a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00146ec:	42                   	inc    edx
c00146ed:	83 fa 04             	cmp    edx,0x4
c00146f0:	75 f0                	jne    c00146e2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	68 58 aa 02 c0       	push   0xc002aa58
c00146fa:	e8 38 5b 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014707:	5a                   	pop    edx
c0014708:	5b                   	pop    ebx
c0014709:	5e                   	pop    esi
c001470a:	c3                   	ret    
c001470b:	83 ec 0c             	sub    esp,0xc
c001470e:	56                   	push   esi
c001470f:	e8 ba fb ff ff       	call   c00142ce <Device::getName()>
c0014714:	83 c4 10             	add    esp,0x10
c0014717:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001471a:	75 ba                	jne    c00146d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001471c:	83 fb 0f             	cmp    ebx,0xf
c001471f:	7f 29                	jg     c001474a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014721:	0f b6 9b 20 d3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2ce0]
c0014728:	eb ac                	jmp    c00146d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001472a:	8d 04 82             	lea    eax,[edx+eax*4]
c001472d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014731:	8d 04 86             	lea    eax,[esi+eax*4]
c0014734:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001473a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001473e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014744:	89 d8                	mov    eax,ebx
c0014746:	5a                   	pop    edx
c0014747:	5b                   	pop    ebx
c0014748:	5e                   	pop    esi
c0014749:	c3                   	ret    
c001474a:	83 ec 0c             	sub    esp,0xc
c001474d:	68 20 aa 02 c0       	push   0xc002aa20
c0014752:	e8 e0 5a 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0014757:	83 c4 10             	add    esp,0x10
c001475a:	e9 77 ff ff ff       	jmp    c00146d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001475f:	90                   	nop

c0014760 <InterruptController::clearAllHandlers(int, bool)>:
c0014760:	56                   	push   esi
c0014761:	53                   	push   ebx
c0014762:	52                   	push   edx
c0014763:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014767:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001476b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014770:	75 61                	jne    c00147d3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014772:	8d 46 20             	lea    eax,[esi+0x20]
c0014775:	c1 e6 04             	shl    esi,0x4
c0014778:	c1 e0 04             	shl    eax,0x4
c001477b:	01 de                	add    esi,ebx
c001477d:	01 d8                	add    eax,ebx
c001477f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014789:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014793:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001479d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00147a7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00147b1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00147bb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00147c5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00147cf:	58                   	pop    eax
c00147d0:	5b                   	pop    ebx
c00147d1:	5e                   	pop    esi
c00147d2:	c3                   	ret    
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	53                   	push   ebx
c00147d7:	e8 f2 fa ff ff       	call   c00142ce <Device::getName()>
c00147dc:	83 c4 10             	add    esp,0x10
c00147df:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147e2:	75 8e                	jne    c0014772 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147e4:	83 fe 0f             	cmp    esi,0xf
c00147e7:	7f 09                	jg     c00147f2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00147e9:	0f b6 b6 20 d3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2ce0]
c00147f0:	eb 80                	jmp    c0014772 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147f2:	83 ec 0c             	sub    esp,0xc
c00147f5:	68 94 aa 02 c0       	push   0xc002aa94
c00147fa:	e8 38 5a 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	e9 6b ff ff ff       	jmp    c0014772 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014807:	90                   	nop

c0014808 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014808:	56                   	push   esi
c0014809:	53                   	push   ebx
c001480a:	52                   	push   edx
c001480b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001480f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014813:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014818:	75 3a                	jne    c0014854 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001481a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001481e:	8d 50 20             	lea    edx,[eax+0x20]
c0014821:	c1 e2 04             	shl    edx,0x4
c0014824:	8d 04 16             	lea    eax,[esi+edx*1]
c0014827:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001482b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014831:	74 0b                	je     c001483e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014833:	83 c0 04             	add    eax,0x4
c0014836:	39 d0                	cmp    eax,edx
c0014838:	75 f1                	jne    c001482b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001483a:	58                   	pop    eax
c001483b:	5b                   	pop    ebx
c001483c:	5e                   	pop    esi
c001483d:	c3                   	ret    
c001483e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014848:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014852:	eb df                	jmp    c0014833 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014854:	83 ec 0c             	sub    esp,0xc
c0014857:	56                   	push   esi
c0014858:	e8 71 fa ff ff       	call   c00142ce <Device::getName()>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014863:	75 b5                	jne    c001481a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014865:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001486a:	7f 11                	jg     c001487d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001486c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014870:	0f b6 80 20 d3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2ce0]
c0014877:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001487b:	eb 9d                	jmp    c001481a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001487d:	83 ec 0c             	sub    esp,0xc
c0014880:	68 94 aa 02 c0       	push   0xc002aa94
c0014885:	e8 ad 59 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001488a:	83 c4 10             	add    esp,0x10
c001488d:	eb 8b                	jmp    c001481a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001488f <nmiHandler(regs*, void*)>:
c001488f:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0014894:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014898:	e9 ef a6 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c001489d <int_handler>:
c001489d:	55                   	push   ebp
c001489e:	57                   	push   edi
c001489f:	56                   	push   esi
c00148a0:	53                   	push   ebx
c00148a1:	83 ec 0c             	sub    esp,0xc
c00148a4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00148a8:	80 3d 24 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c24,0x0
c00148af:	74 0b                	je     c00148bc <int_handler+0x1f>
c00148b1:	fa                   	cli    
c00148b2:	f4                   	hlt    
c00148b3:	80 3d 24 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c24,0x0
c00148ba:	75 f5                	jne    c00148b1 <int_handler+0x14>
c00148bc:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00148c1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00148c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00148ca:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00148d0:	8d 43 e0             	lea    eax,[ebx-0x20]
c00148d3:	83 f8 17             	cmp    eax,0x17
c00148d6:	77 13                	ja     c00148eb <int_handler+0x4e>
c00148d8:	83 ec 08             	sub    esp,0x8
c00148db:	8b 17                	mov    edx,DWORD PTR [edi]
c00148dd:	8d 43 e0             	lea    eax,[ebx-0x20]
c00148e0:	0f b6 c0             	movzx  eax,al
c00148e3:	50                   	push   eax
c00148e4:	57                   	push   edi
c00148e5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00148e8:	83 c4 10             	add    esp,0x10
c00148eb:	83 c3 15             	add    ebx,0x15
c00148ee:	c1 e3 04             	shl    ebx,0x4
c00148f1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00148f5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00148fc:	31 db                	xor    ebx,ebx
c00148fe:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014902:	85 c0                	test   eax,eax
c0014904:	74 13                	je     c0014919 <int_handler+0x7c>
c0014906:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014909:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001490d:	74 1c                	je     c001492b <int_handler+0x8e>
c001490f:	83 ec 08             	sub    esp,0x8
c0014912:	52                   	push   edx
c0014913:	56                   	push   esi
c0014914:	ff d0                	call   eax
c0014916:	83 c4 10             	add    esp,0x10
c0014919:	43                   	inc    ebx
c001491a:	83 fb 04             	cmp    ebx,0x4
c001491d:	75 df                	jne    c00148fe <int_handler+0x61>
c001491f:	83 c4 0c             	add    esp,0xc
c0014922:	31 c0                	xor    eax,eax
c0014924:	5b                   	pop    ebx
c0014925:	31 d2                	xor    edx,edx
c0014927:	5e                   	pop    esi
c0014928:	5f                   	pop    edi
c0014929:	5d                   	pop    ebp
c001492a:	c3                   	ret    
c001492b:	83 ec 08             	sub    esp,0x8
c001492e:	52                   	push   edx
c001492f:	56                   	push   esi
c0014930:	ff d0                	call   eax
c0014932:	83 c4 10             	add    esp,0x10
c0014935:	83 c4 0c             	add    esp,0xc
c0014938:	5b                   	pop    ebx
c0014939:	5e                   	pop    esi
c001493a:	5f                   	pop    edi
c001493b:	5d                   	pop    ebp
c001493c:	c3                   	ret    
c001493d:	90                   	nop

c001493e <InterruptController::InterruptController(char const*)>:
c001493e:	83 ec 1c             	sub    esp,0x1c
c0014941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014945:	83 ec 08             	sub    esp,0x8
c0014948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001494c:	50                   	push   eax
c001494d:	e8 80 f8 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0014952:	83 c4 10             	add    esp,0x10
c0014955:	ba 30 ad 02 c0       	mov    edx,0xc002ad30
c001495a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001495e:	89 10                	mov    DWORD PTR [eax],edx
c0014960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014964:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001496e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014976:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001497e:	7f 5e                	jg     c00149de <InterruptController::InterruptController(char const*)+0xa0>
c0014980:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014988:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001498d:	7f 49                	jg     c00149d8 <InterruptController::InterruptController(char const*)+0x9a>
c001498f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014993:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014997:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001499e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00149a2:	01 ca                	add    edx,ecx
c00149a4:	83 c2 54             	add    edx,0x54
c00149a7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00149af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00149b7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00149be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00149c2:	01 ca                	add    edx,ecx
c00149c4:	81 c2 54 04 00 00    	add    edx,0x454
c00149ca:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00149d2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00149d6:	eb b0                	jmp    c0014988 <InterruptController::InterruptController(char const*)+0x4a>
c00149d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00149dc:	eb 98                	jmp    c0014976 <InterruptController::InterruptController(char const*)+0x38>
c00149de:	90                   	nop
c00149df:	83 c4 1c             	add    esp,0x1c
c00149e2:	c3                   	ret    
c00149e3:	90                   	nop

c00149e4 <InterruptController::~InterruptController()>:
c00149e4:	83 ec 0c             	sub    esp,0xc
c00149e7:	ba 30 ad 02 c0       	mov    edx,0xc002ad30
c00149ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149f0:	89 10                	mov    DWORD PTR [eax],edx
c00149f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149f6:	83 ec 0c             	sub    esp,0xc
c00149f9:	50                   	push   eax
c00149fa:	e8 b5 f4 ff ff       	call   c0013eb4 <Device::~Device()>
c00149ff:	83 c4 10             	add    esp,0x10
c0014a02:	90                   	nop
c0014a03:	83 c4 0c             	add    esp,0xc
c0014a06:	c3                   	ret    
c0014a07:	90                   	nop

c0014a08 <InterruptController::~InterruptController()>:
c0014a08:	83 ec 0c             	sub    esp,0xc
c0014a0b:	83 ec 0c             	sub    esp,0xc
c0014a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a12:	e8 cd ff ff ff       	call   c00149e4 <InterruptController::~InterruptController()>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	83 ec 08             	sub    esp,0x8
c0014a1d:	68 58 21 00 00       	push   0x2158
c0014a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a26:	e8 b1 e0 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0014a2b:	83 c4 10             	add    esp,0x10
c0014a2e:	83 c4 0c             	add    esp,0xc
c0014a31:	c3                   	ret    

c0014a32 <displayDebugInfo(regs*)>:
c0014a32:	55                   	push   ebp
c0014a33:	57                   	push   edi
c0014a34:	56                   	push   esi
c0014a35:	53                   	push   ebx
c0014a36:	83 ec 24             	sub    esp,0x24
c0014a39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014a3d:	0f 20 c2             	mov    edx,cr0
c0014a40:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014a44:	0f 20 d7             	mov    edi,cr2
c0014a47:	0f 20 de             	mov    esi,cr3
c0014a4a:	0f 20 e5             	mov    ebp,cr4
c0014a4d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a50:	68 ce aa 02 c0       	push   0xc002aace
c0014a55:	e8 62 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014a5a:	59                   	pop    ecx
c0014a5b:	58                   	pop    eax
c0014a5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a5f:	68 d9 aa 02 c0       	push   0xc002aad9
c0014a64:	e8 53 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014a69:	58                   	pop    eax
c0014a6a:	5a                   	pop    edx
c0014a6b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014a6e:	68 e4 aa 02 c0       	push   0xc002aae4
c0014a73:	e8 44 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014a78:	59                   	pop    ecx
c0014a79:	58                   	pop    eax
c0014a7a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a7d:	68 ef aa 02 c0       	push   0xc002aaef
c0014a82:	e8 35 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014a87:	58                   	pop    eax
c0014a88:	5a                   	pop    edx
c0014a89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014a8c:	68 fa aa 02 c0       	push   0xc002aafa
c0014a91:	e8 26 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014a96:	59                   	pop    ecx
c0014a97:	58                   	pop    eax
c0014a98:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014a9b:	68 05 ab 02 c0       	push   0xc002ab05
c0014aa0:	e8 17 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014aa5:	58                   	pop    eax
c0014aa6:	5a                   	pop    edx
c0014aa7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014aaa:	68 10 ab 02 c0       	push   0xc002ab10
c0014aaf:	e8 08 e1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014ab4:	59                   	pop    ecx
c0014ab5:	58                   	pop    eax
c0014ab6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ab9:	68 1b ab 02 c0       	push   0xc002ab1b
c0014abe:	e8 f9 e0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014ac3:	58                   	pop    eax
c0014ac4:	5a                   	pop    edx
c0014ac5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ac8:	68 26 ab 02 c0       	push   0xc002ab26
c0014acd:	e8 ea e0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014ad2:	59                   	pop    ecx
c0014ad3:	58                   	pop    eax
c0014ad4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ad7:	68 35 ab 02 c0       	push   0xc002ab35
c0014adc:	e8 db e0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014ae1:	58                   	pop    eax
c0014ae2:	5a                   	pop    edx
c0014ae3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ae6:	68 40 ab 02 c0       	push   0xc002ab40
c0014aeb:	e8 cc e0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014af0:	59                   	pop    ecx
c0014af1:	58                   	pop    eax
c0014af2:	57                   	push   edi
c0014af3:	68 4b ab 02 c0       	push   0xc002ab4b
c0014af8:	e8 bf e0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014afd:	58                   	pop    eax
c0014afe:	5a                   	pop    edx
c0014aff:	56                   	push   esi
c0014b00:	68 56 ab 02 c0       	push   0xc002ab56
c0014b05:	e8 b2 e0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014b0a:	59                   	pop    ecx
c0014b0b:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014b10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b16:	e8 b8 c1 ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c0014b1b:	58                   	pop    eax
c0014b1c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b1f:	5a                   	pop    edx
c0014b20:	c1 e0 05             	shl    eax,0x5
c0014b23:	05 80 d0 02 c0       	add    eax,0xc002d080
c0014b28:	50                   	push   eax
c0014b29:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014b2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b34:	e8 b9 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b39:	59                   	pop    ecx
c0014b3a:	58                   	pop    eax
c0014b3b:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014b40:	68 61 ab 02 c0       	push   0xc002ab61
c0014b45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4b:	e8 a2 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b50:	58                   	pop    eax
c0014b51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b56:	5a                   	pop    edx
c0014b57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b5a:	83 c0 0c             	add    eax,0xc
c0014b5d:	50                   	push   eax
c0014b5e:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014b63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b69:	e8 84 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b6e:	59                   	pop    ecx
c0014b6f:	58                   	pop    eax
c0014b70:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014b75:	68 6a ab 02 c0       	push   0xc002ab6a
c0014b7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b80:	e8 6d c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b85:	58                   	pop    eax
c0014b86:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014b8b:	5a                   	pop    edx
c0014b8c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b95:	e8 7e c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014b9a:	59                   	pop    ecx
c0014b9b:	58                   	pop    eax
c0014b9c:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014ba1:	68 72 ab 02 c0       	push   0xc002ab72
c0014ba6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bac:	e8 41 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014bb1:	58                   	pop    eax
c0014bb2:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014bb7:	5a                   	pop    edx
c0014bb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014bbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc1:	e8 52 c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014bc6:	59                   	pop    ecx
c0014bc7:	58                   	pop    eax
c0014bc8:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014bcd:	68 7a ab 02 c0       	push   0xc002ab7a
c0014bd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd8:	e8 15 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014bdd:	58                   	pop    eax
c0014bde:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014be3:	5a                   	pop    edx
c0014be4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014be7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bed:	e8 26 c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014bf2:	59                   	pop    ecx
c0014bf3:	58                   	pop    eax
c0014bf4:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014bf9:	68 82 ab 02 c0       	push   0xc002ab82
c0014bfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c04:	e8 e9 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c09:	58                   	pop    eax
c0014c0a:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c0f:	5a                   	pop    edx
c0014c10:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014c13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c19:	e8 fa c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c1e:	59                   	pop    ecx
c0014c1f:	58                   	pop    eax
c0014c20:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c25:	68 8a ab 02 c0       	push   0xc002ab8a
c0014c2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c30:	e8 bd c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c35:	58                   	pop    eax
c0014c36:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c3b:	5a                   	pop    edx
c0014c3c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014c3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c45:	e8 ce c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c4a:	59                   	pop    ecx
c0014c4b:	58                   	pop    eax
c0014c4c:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c51:	68 92 ab 02 c0       	push   0xc002ab92
c0014c56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5c:	e8 91 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c61:	58                   	pop    eax
c0014c62:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c67:	5a                   	pop    edx
c0014c68:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014c6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c71:	e8 a2 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c76:	59                   	pop    ecx
c0014c77:	58                   	pop    eax
c0014c78:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c7d:	68 9a ab 02 c0       	push   0xc002ab9a
c0014c82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c88:	e8 65 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c8d:	58                   	pop    eax
c0014c8e:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014c93:	5a                   	pop    edx
c0014c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c98:	52                   	push   edx
c0014c99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9f:	e8 74 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014ca4:	59                   	pop    ecx
c0014ca5:	58                   	pop    eax
c0014ca6:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014cab:	68 a3 ab 02 c0       	push   0xc002aba3
c0014cb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb6:	e8 37 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014cbb:	58                   	pop    eax
c0014cbc:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014cc1:	5a                   	pop    edx
c0014cc2:	57                   	push   edi
c0014cc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc9:	e8 4a c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014cce:	59                   	pop    ecx
c0014ccf:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014cd4:	5f                   	pop    edi
c0014cd5:	68 ab ab 02 c0       	push   0xc002abab
c0014cda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce0:	e8 0d c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014ce5:	58                   	pop    eax
c0014ce6:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014ceb:	5a                   	pop    edx
c0014cec:	56                   	push   esi
c0014ced:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf3:	e8 20 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014cf8:	59                   	pop    ecx
c0014cf9:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014cfe:	5e                   	pop    esi
c0014cff:	68 b3 ab 02 c0       	push   0xc002abb3
c0014d04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0a:	e8 e3 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d0f:	5f                   	pop    edi
c0014d10:	58                   	pop    eax
c0014d11:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d16:	55                   	push   ebp
c0014d17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d1d:	e8 f6 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d22:	58                   	pop    eax
c0014d23:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d28:	5a                   	pop    edx
c0014d29:	68 bb ab 02 c0       	push   0xc002abbb
c0014d2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d34:	e8 b9 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d39:	0f 21 c0             	mov    eax,db0
c0014d3c:	59                   	pop    ecx
c0014d3d:	5e                   	pop    esi
c0014d3e:	50                   	push   eax
c0014d3f:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d4a:	e8 c9 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d4f:	5f                   	pop    edi
c0014d50:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d55:	5d                   	pop    ebp
c0014d56:	68 c4 ab 02 c0       	push   0xc002abc4
c0014d5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d61:	e8 8c c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d66:	0f 21 c8             	mov    eax,db1
c0014d69:	5a                   	pop    edx
c0014d6a:	59                   	pop    ecx
c0014d6b:	50                   	push   eax
c0014d6c:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d77:	e8 9c c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d7c:	5e                   	pop    esi
c0014d7d:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d82:	5f                   	pop    edi
c0014d83:	68 cc ab 02 c0       	push   0xc002abcc
c0014d88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8e:	e8 5f c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d93:	0f 21 d0             	mov    eax,db2
c0014d96:	5d                   	pop    ebp
c0014d97:	5a                   	pop    edx
c0014d98:	50                   	push   eax
c0014d99:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014d9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da4:	e8 6f c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014da9:	59                   	pop    ecx
c0014daa:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014daf:	5e                   	pop    esi
c0014db0:	68 d4 ab 02 c0       	push   0xc002abd4
c0014db5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dbb:	e8 32 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014dc0:	0f 21 d8             	mov    eax,db3
c0014dc3:	5f                   	pop    edi
c0014dc4:	5d                   	pop    ebp
c0014dc5:	50                   	push   eax
c0014dc6:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014dcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd1:	e8 42 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014dd6:	58                   	pop    eax
c0014dd7:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014ddc:	5a                   	pop    edx
c0014ddd:	68 dc ab 02 c0       	push   0xc002abdc
c0014de2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de8:	e8 05 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014ded:	0f 21 f0             	mov    eax,db6
c0014df0:	59                   	pop    ecx
c0014df1:	5e                   	pop    esi
c0014df2:	50                   	push   eax
c0014df3:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014df8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfe:	e8 15 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014e03:	5f                   	pop    edi
c0014e04:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014e09:	5d                   	pop    ebp
c0014e0a:	68 e4 ab 02 c0       	push   0xc002abe4
c0014e0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e15:	e8 d8 c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e1a:	0f 21 f8             	mov    eax,db7
c0014e1d:	5a                   	pop    edx
c0014e1e:	59                   	pop    ecx
c0014e1f:	50                   	push   eax
c0014e20:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014e25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2b:	e8 e8 c2 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014e30:	5e                   	pop    esi
c0014e31:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e34:	e8 2a 85 00 00       	call   c001d363 <Thr::getDriverNameFromAddress(unsigned long)>
c0014e39:	83 c4 10             	add    esp,0x10
c0014e3c:	85 c0                	test   eax,eax
c0014e3e:	74 7d                	je     c0014ebd <displayDebugInfo(regs*)+0x48b>
c0014e40:	89 c6                	mov    esi,eax
c0014e42:	50                   	push   eax
c0014e43:	50                   	push   eax
c0014e44:	56                   	push   esi
c0014e45:	68 ec ab 02 c0       	push   0xc002abec
c0014e4a:	e8 6d dd ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014e4f:	5a                   	pop    edx
c0014e50:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014e55:	59                   	pop    ecx
c0014e56:	68 fa ab 02 c0       	push   0xc002abfa
c0014e5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e61:	e8 8c c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e66:	5f                   	pop    edi
c0014e67:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014e6c:	5d                   	pop    ebp
c0014e6d:	56                   	push   esi
c0014e6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e74:	e8 79 c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e79:	58                   	pop    eax
c0014e7a:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014e7f:	5a                   	pop    edx
c0014e80:	68 06 ac 02 c0       	push   0xc002ac06
c0014e85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8b:	e8 62 c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e90:	59                   	pop    ecx
c0014e91:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0014e96:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014e9c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e9f:	e8 f6 84 00 00       	call   c001d39a <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014ea4:	5b                   	pop    ebx
c0014ea5:	5d                   	pop    ebp
c0014ea6:	50                   	push   eax
c0014ea7:	57                   	push   edi
c0014ea8:	e8 6b c2 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014ead:	58                   	pop    eax
c0014eae:	5a                   	pop    edx
c0014eaf:	56                   	push   esi
c0014eb0:	68 12 ac 02 c0       	push   0xc002ac12
c0014eb5:	e8 02 dd ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014eba:	83 c4 10             	add    esp,0x10
c0014ebd:	fa                   	cli    
c0014ebe:	f4                   	hlt    
c0014ebf:	eb fe                	jmp    c0014ebf <displayDebugInfo(regs*)+0x48d>

c0014ec1 <x87EmulHandler(regs*, void*)>:
c0014ec1:	53                   	push   ebx
c0014ec2:	83 ec 14             	sub    esp,0x14
c0014ec5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014ec9:	53                   	push   ebx
c0014eca:	e8 21 a8 00 00       	call   c001f6f0 <Vm::x87Handler(regs*)>
c0014ecf:	83 c4 10             	add    esp,0x10
c0014ed2:	84 c0                	test   al,al
c0014ed4:	74 05                	je     c0014edb <x87EmulHandler(regs*, void*)+0x1a>
c0014ed6:	83 c4 08             	add    esp,0x8
c0014ed9:	5b                   	pop    ebx
c0014eda:	c3                   	ret    
c0014edb:	83 ec 0c             	sub    esp,0xc
c0014ede:	68 22 ac 02 c0       	push   0xc002ac22
c0014ee3:	e8 d4 dc ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014ee8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eeb:	e8 42 fb ff ff       	call   c0014a32 <displayDebugInfo(regs*)>

c0014ef0 <gpFault(regs*, void*)>:
c0014ef0:	53                   	push   ebx
c0014ef1:	83 ec 14             	sub    esp,0x14
c0014ef4:	c7 05 70 e2 02 c0 6d ea 01 c0 	mov    DWORD PTR ds:0xc002e270,0xc001ea6d
c0014efe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014f02:	53                   	push   ebx
c0014f03:	e8 65 9b 00 00       	call   c001ea6d <Vm::faultHandler(regs*)>
c0014f08:	83 c4 10             	add    esp,0x10
c0014f0b:	84 c0                	test   al,al
c0014f0d:	74 05                	je     c0014f14 <gpFault(regs*, void*)+0x24>
c0014f0f:	83 c4 08             	add    esp,0x8
c0014f12:	5b                   	pop    ebx
c0014f13:	c3                   	ret    
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	68 38 ac 02 c0       	push   0xc002ac38
c0014f1c:	e8 9b dc ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014f21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f24:	e8 09 fb ff ff       	call   c0014a32 <displayDebugInfo(regs*)>

c0014f29 <pgFault(regs*, void*)>:
c0014f29:	83 ec 18             	sub    esp,0x18
c0014f2c:	68 53 ac 02 c0       	push   0xc002ac53
c0014f31:	e8 86 dc ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014f36:	58                   	pop    eax
c0014f37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f3b:	e8 f2 fa ff ff       	call   c0014a32 <displayDebugInfo(regs*)>

c0014f40 <otherISRHandler(regs*, void*)>:
c0014f40:	53                   	push   ebx
c0014f41:	83 ec 0c             	sub    esp,0xc
c0014f44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f48:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f4b:	50                   	push   eax
c0014f4c:	50                   	push   eax
c0014f4d:	68 60 ac 02 c0       	push   0xc002ac60
c0014f52:	e8 65 dc ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014f57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f5a:	e8 d3 fa ff ff       	call   c0014a32 <displayDebugInfo(regs*)>

c0014f5f <opcodeFault(regs*, void*)>:
c0014f5f:	55                   	push   ebp
c0014f60:	89 e5                	mov    ebp,esp
c0014f62:	56                   	push   esi
c0014f63:	53                   	push   ebx
c0014f64:	83 ec 40             	sub    esp,0x40
c0014f67:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0014f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f72:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014f78:	84 c0                	test   al,al
c0014f7a:	74 24                	je     c0014fa0 <opcodeFault(regs*, void*)+0x41>
c0014f7c:	83 ec 0c             	sub    esp,0xc
c0014f7f:	68 80 ac 02 c0       	push   0xc002ac80
c0014f84:	e8 33 dc ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f92:	8d 50 19             	lea    edx,[eax+0x19]
c0014f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f98:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f9b:	e9 be 05 00 00       	jmp    c001555e <opcodeFault(regs*, void*)+0x5ff>
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fa9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014fad:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014fba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fbd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fbf:	3c f0                	cmp    al,0xf0
c0014fc1:	75 17                	jne    c0014fda <opcodeFault(regs*, void*)+0x7b>
c0014fc3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fcc:	8d 50 01             	lea    edx,[eax+0x1]
c0014fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd5:	e9 da 00 00 00       	jmp    c00150b4 <opcodeFault(regs*, void*)+0x155>
c0014fda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdf:	3c f2                	cmp    al,0xf2
c0014fe1:	74 09                	je     c0014fec <opcodeFault(regs*, void*)+0x8d>
c0014fe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe8:	3c f3                	cmp    al,0xf3
c0014fea:	75 1b                	jne    c0015007 <opcodeFault(regs*, void*)+0xa8>
c0014fec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ff0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ff9:	8d 50 01             	lea    edx,[eax+0x1]
c0014ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015002:	e9 ad 00 00 00       	jmp    c00150b4 <opcodeFault(regs*, void*)+0x155>
c0015007:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500a:	8a 00                	mov    al,BYTE PTR [eax]
c001500c:	3c 66                	cmp    al,0x66
c001500e:	75 1f                	jne    c001502f <opcodeFault(regs*, void*)+0xd0>
c0015010:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015014:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015018:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001501b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015021:	8d 50 01             	lea    edx,[eax+0x1]
c0015024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015027:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001502a:	e9 85 00 00 00       	jmp    c00150b4 <opcodeFault(regs*, void*)+0x155>
c001502f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015032:	8a 00                	mov    al,BYTE PTR [eax]
c0015034:	3c 67                	cmp    al,0x67
c0015036:	75 18                	jne    c0015050 <opcodeFault(regs*, void*)+0xf1>
c0015038:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001503c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001503f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015042:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015045:	8d 50 01             	lea    edx,[eax+0x1]
c0015048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001504e:	eb 64                	jmp    c00150b4 <opcodeFault(regs*, void*)+0x155>
c0015050:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015053:	8a 00                	mov    al,BYTE PTR [eax]
c0015055:	3c 2e                	cmp    al,0x2e
c0015057:	74 09                	je     c0015062 <opcodeFault(regs*, void*)+0x103>
c0015059:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001505c:	8a 00                	mov    al,BYTE PTR [eax]
c001505e:	3c 3e                	cmp    al,0x3e
c0015060:	75 18                	jne    c001507a <opcodeFault(regs*, void*)+0x11b>
c0015062:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015066:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001506f:	8d 50 01             	lea    edx,[eax+0x1]
c0015072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015075:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015078:	eb 3a                	jmp    c00150b4 <opcodeFault(regs*, void*)+0x155>
c001507a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507d:	8a 00                	mov    al,BYTE PTR [eax]
c001507f:	3c 36                	cmp    al,0x36
c0015081:	74 1b                	je     c001509e <opcodeFault(regs*, void*)+0x13f>
c0015083:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015086:	8a 00                	mov    al,BYTE PTR [eax]
c0015088:	3c 26                	cmp    al,0x26
c001508a:	74 12                	je     c001509e <opcodeFault(regs*, void*)+0x13f>
c001508c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508f:	8a 00                	mov    al,BYTE PTR [eax]
c0015091:	3c 64                	cmp    al,0x64
c0015093:	74 09                	je     c001509e <opcodeFault(regs*, void*)+0x13f>
c0015095:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015098:	8a 00                	mov    al,BYTE PTR [eax]
c001509a:	3c 65                	cmp    al,0x65
c001509c:	75 16                	jne    c00150b4 <opcodeFault(regs*, void*)+0x155>
c001509e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00150a2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ab:	8d 50 01             	lea    edx,[eax+0x1]
c00150ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b7:	8a 00                	mov    al,BYTE PTR [eax]
c00150b9:	3c 0f                	cmp    al,0xf
c00150bb:	0f 85 ad 00 00 00    	jne    c001516e <opcodeFault(regs*, void*)+0x20f>
c00150c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c4:	40                   	inc    eax
c00150c5:	8a 00                	mov    al,BYTE PTR [eax]
c00150c7:	3c c2                	cmp    al,0xc2
c00150c9:	74 0e                	je     c00150d9 <opcodeFault(regs*, void*)+0x17a>
c00150cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ce:	40                   	inc    eax
c00150cf:	8a 00                	mov    al,BYTE PTR [eax]
c00150d1:	3c c3                	cmp    al,0xc3
c00150d3:	0f 85 95 00 00 00    	jne    c001516e <opcodeFault(regs*, void*)+0x20f>
c00150d9:	83 ec 0c             	sub    esp,0xc
c00150dc:	68 a3 ac 02 c0       	push   0xc002aca3
c00150e1:	e8 d6 da ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00150e6:	83 c4 10             	add    esp,0x10
c00150e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ef:	8d 50 01             	lea    edx,[eax+0x1]
c00150f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150f8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015100:	8d 50 fe             	lea    edx,[eax-0x2]
c0015103:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015106:	88 10                	mov    BYTE PTR [eax],dl
c0015108:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001510b:	50                   	push   eax
c001510c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001510f:	50                   	push   eax
c0015110:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015113:	50                   	push   eax
c0015114:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015117:	e8 e2 47 00 00       	call   c00198fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015122:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015125:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015128:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001512b:	01 d0                	add    eax,edx
c001512d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015133:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015136:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015139:	48                   	dec    eax
c001513a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001513d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015140:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015143:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015149:	83 ec 04             	sub    esp,0x4
c001514c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001514f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015152:	50                   	push   eax
c0015153:	e8 5c b0 fe ff       	call   c00001b4 <voodooXADD>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001515e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015161:	01 c2                	add    edx,eax
c0015163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015166:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015169:	e9 f0 03 00 00       	jmp    c001555e <opcodeFault(regs*, void*)+0x5ff>
c001516e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015171:	8a 00                	mov    al,BYTE PTR [eax]
c0015173:	3c 0f                	cmp    al,0xf
c0015175:	0f 85 8b 01 00 00    	jne    c0015306 <opcodeFault(regs*, void*)+0x3a7>
c001517b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001517e:	40                   	inc    eax
c001517f:	8a 00                	mov    al,BYTE PTR [eax]
c0015181:	3c c7                	cmp    al,0xc7
c0015183:	0f 86 7d 01 00 00    	jbe    c0015306 <opcodeFault(regs*, void*)+0x3a7>
c0015189:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518c:	40                   	inc    eax
c001518d:	8a 00                	mov    al,BYTE PTR [eax]
c001518f:	3c cf                	cmp    al,0xcf
c0015191:	0f 87 6f 01 00 00    	ja     c0015306 <opcodeFault(regs*, void*)+0x3a7>
c0015197:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519a:	40                   	inc    eax
c001519b:	8a 00                	mov    al,BYTE PTR [eax]
c001519d:	83 c0 38             	add    eax,0x38
c00151a0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00151a3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151a7:	75 0b                	jne    c00151b4 <opcodeFault(regs*, void*)+0x255>
c00151a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00151af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151b2:	eb 75                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c00151b4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151b8:	75 0b                	jne    c00151c5 <opcodeFault(regs*, void*)+0x266>
c00151ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00151c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c3:	eb 64                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c00151c5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151c9:	75 0b                	jne    c00151d6 <opcodeFault(regs*, void*)+0x277>
c00151cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00151d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151d4:	eb 53                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c00151d6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151da:	75 0b                	jne    c00151e7 <opcodeFault(regs*, void*)+0x288>
c00151dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151e5:	eb 42                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c00151e7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151eb:	75 0b                	jne    c00151f8 <opcodeFault(regs*, void*)+0x299>
c00151ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151f6:	eb 31                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c00151f8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151fc:	75 0b                	jne    c0015209 <opcodeFault(regs*, void*)+0x2aa>
c00151fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015201:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015204:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015207:	eb 20                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c0015209:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001520d:	75 0b                	jne    c001521a <opcodeFault(regs*, void*)+0x2bb>
c001520f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015212:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015215:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015218:	eb 0f                	jmp    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c001521a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001521e:	75 09                	jne    c0015229 <opcodeFault(regs*, void*)+0x2ca>
c0015220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015223:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015226:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015229:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001522d:	74 10                	je     c001523f <opcodeFault(regs*, void*)+0x2e0>
c001522f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015236:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001523d:	eb 2d                	jmp    c001526c <opcodeFault(regs*, void*)+0x30d>
c001523f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015242:	c1 e0 18             	shl    eax,0x18
c0015245:	89 c2                	mov    edx,eax
c0015247:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001524a:	c1 e0 08             	shl    eax,0x8
c001524d:	25 00 00 ff 00       	and    eax,0xff0000
c0015252:	09 c2                	or     edx,eax
c0015254:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015257:	c1 e8 08             	shr    eax,0x8
c001525a:	25 00 ff 00 00       	and    eax,0xff00
c001525f:	09 c2                	or     edx,eax
c0015261:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015264:	c1 e8 18             	shr    eax,0x18
c0015267:	09 d0                	or     eax,edx
c0015269:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001526c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015270:	75 0b                	jne    c001527d <opcodeFault(regs*, void*)+0x31e>
c0015272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015275:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015278:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001527b:	eb 75                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c001527d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015281:	75 0b                	jne    c001528e <opcodeFault(regs*, void*)+0x32f>
c0015283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015286:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015289:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001528c:	eb 64                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c001528e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015292:	75 0b                	jne    c001529f <opcodeFault(regs*, void*)+0x340>
c0015294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015297:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001529a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001529d:	eb 53                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c001529f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00152a3:	75 0b                	jne    c00152b0 <opcodeFault(regs*, void*)+0x351>
c00152a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152ab:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00152ae:	eb 42                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c00152b0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00152b4:	75 0b                	jne    c00152c1 <opcodeFault(regs*, void*)+0x362>
c00152b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152bc:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00152bf:	eb 31                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c00152c1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00152c5:	75 0b                	jne    c00152d2 <opcodeFault(regs*, void*)+0x373>
c00152c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152d0:	eb 20                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c00152d2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00152d6:	75 0b                	jne    c00152e3 <opcodeFault(regs*, void*)+0x384>
c00152d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152de:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00152e1:	eb 0f                	jmp    c00152f2 <opcodeFault(regs*, void*)+0x393>
c00152e3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00152e7:	75 09                	jne    c00152f2 <opcodeFault(regs*, void*)+0x393>
c00152e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152ef:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00152f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f8:	8d 50 02             	lea    edx,[eax+0x2]
c00152fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015301:	e9 58 02 00 00       	jmp    c001555e <opcodeFault(regs*, void*)+0x5ff>
c0015306:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015309:	8a 00                	mov    al,BYTE PTR [eax]
c001530b:	3c 0f                	cmp    al,0xf
c001530d:	0f 85 76 01 00 00    	jne    c0015489 <opcodeFault(regs*, void*)+0x52a>
c0015313:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015316:	40                   	inc    eax
c0015317:	8a 00                	mov    al,BYTE PTR [eax]
c0015319:	3c c7                	cmp    al,0xc7
c001531b:	0f 85 68 01 00 00    	jne    c0015489 <opcodeFault(regs*, void*)+0x52a>
c0015321:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015327:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532a:	8d 50 01             	lea    edx,[eax+0x1]
c001532d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015330:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015333:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015336:	50                   	push   eax
c0015337:	8d 45 bb             	lea    eax,[ebp-0x45]
c001533a:	50                   	push   eax
c001533b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001533e:	50                   	push   eax
c001533f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015342:	e8 b7 45 00 00       	call   c00198fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001534d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015350:	83 f0 01             	xor    eax,0x1
c0015353:	84 c0                	test   al,al
c0015355:	0f 84 2e 01 00 00    	je     c0015489 <opcodeFault(regs*, void*)+0x52a>
c001535b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001535e:	3c 01                	cmp    al,0x1
c0015360:	0f 85 23 01 00 00    	jne    c0015489 <opcodeFault(regs*, void*)+0x52a>
c0015366:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015369:	83 f0 01             	xor    eax,0x1
c001536c:	84 c0                	test   al,al
c001536e:	0f 84 15 01 00 00    	je     c0015489 <opcodeFault(regs*, void*)+0x52a>
c0015374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015377:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001537a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001537d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015384:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015387:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001538a:	89 c2                	mov    edx,eax
c001538c:	b8 00 00 00 00       	mov    eax,0x0
c0015391:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015394:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001539d:	ba 00 00 00 00       	mov    edx,0x0
c00153a2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00153a5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00153a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153ae:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00153b1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00153b8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153bb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153be:	89 c2                	mov    edx,eax
c00153c0:	b8 00 00 00 00       	mov    eax,0x0
c00153c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00153c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00153cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153d1:	ba 00 00 00 00       	mov    edx,0x0
c00153d6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00153d9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00153dc:	e8 7b 86 00 00       	call   c001da5c <lockScheduler()>
c00153e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00153e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00153e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e9:	89 c1                	mov    ecx,eax
c00153eb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00153ee:	89 cb                	mov    ebx,ecx
c00153f0:	89 d0                	mov    eax,edx
c00153f2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00153f5:	89 c6                	mov    esi,eax
c00153f7:	89 f0                	mov    eax,esi
c00153f9:	09 d8                	or     eax,ebx
c00153fb:	85 c0                	test   eax,eax
c00153fd:	75 21                	jne    c0015420 <opcodeFault(regs*, void*)+0x4c1>
c00153ff:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015402:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015405:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015408:	89 01                	mov    DWORD PTR [ecx],eax
c001540a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001540d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015410:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015413:	83 c8 40             	or     eax,0x40
c0015416:	89 c2                	mov    edx,eax
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001541e:	eb 3e                	jmp    c001545e <opcodeFault(regs*, void*)+0x4ff>
c0015420:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015423:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015426:	8b 00                	mov    eax,DWORD PTR [eax]
c0015428:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001542b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001542e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015434:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015437:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001543a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001543d:	89 d0                	mov    eax,edx
c001543f:	31 d2                	xor    edx,edx
c0015441:	89 c3                	mov    ebx,eax
c0015443:	89 d6                	mov    esi,edx
c0015445:	89 da                	mov    edx,ebx
c0015447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001544d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015450:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015453:	83 e0 bf             	and    eax,0xffffffbf
c0015456:	89 c2                	mov    edx,eax
c0015458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001545e:	e8 fb 85 00 00       	call   c001da5e <unlockScheduler()>
c0015463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015466:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015469:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001546c:	01 c2                	add    edx,eax
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	68 b2 ac 02 c0       	push   0xc002acb2
c001547c:	e8 3b d7 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	e9 d5 00 00 00       	jmp    c001555e <opcodeFault(regs*, void*)+0x5ff>
c0015489:	83 ec 0c             	sub    esp,0xc
c001548c:	68 c5 ac 02 c0       	push   0xc002acc5
c0015491:	e8 26 d7 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0015496:	83 c4 10             	add    esp,0x10
c0015499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001549f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154a5:	c1 e0 04             	shl    eax,0x4
c00154a8:	01 d0                	add    eax,edx
c00154aa:	83 c0 03             	add    eax,0x3
c00154ad:	8a 00                	mov    al,BYTE PTR [eax]
c00154af:	0f b6 d8             	movzx  ebx,al
c00154b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154be:	c1 e0 04             	shl    eax,0x4
c00154c1:	01 d0                	add    eax,edx
c00154c3:	83 c0 02             	add    eax,0x2
c00154c6:	8a 00                	mov    al,BYTE PTR [eax]
c00154c8:	0f b6 c8             	movzx  ecx,al
c00154cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ce:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154d7:	c1 e0 04             	shl    eax,0x4
c00154da:	01 d0                	add    eax,edx
c00154dc:	40                   	inc    eax
c00154dd:	8a 00                	mov    al,BYTE PTR [eax]
c00154df:	0f b6 d0             	movzx  edx,al
c00154e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00154e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154ee:	c1 e0 04             	shl    eax,0x4
c00154f1:	01 f0                	add    eax,esi
c00154f3:	8a 00                	mov    al,BYTE PTR [eax]
c00154f5:	0f b6 c0             	movzx  eax,al
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	53                   	push   ebx
c00154fc:	51                   	push   ecx
c00154fd:	52                   	push   edx
c00154fe:	50                   	push   eax
c00154ff:	68 d8 ac 02 c0       	push   0xc002acd8
c0015504:	e8 b3 d6 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0015509:	83 c4 20             	add    esp,0x20
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015512:	83 c0 03             	add    eax,0x3
c0015515:	8a 00                	mov    al,BYTE PTR [eax]
c0015517:	0f b6 d8             	movzx  ebx,al
c001551a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015520:	83 c0 02             	add    eax,0x2
c0015523:	8a 00                	mov    al,BYTE PTR [eax]
c0015525:	0f b6 c8             	movzx  ecx,al
c0015528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552e:	40                   	inc    eax
c001552f:	8a 00                	mov    al,BYTE PTR [eax]
c0015531:	0f b6 d0             	movzx  edx,al
c0015534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015537:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001553a:	8a 00                	mov    al,BYTE PTR [eax]
c001553c:	0f b6 c0             	movzx  eax,al
c001553f:	83 ec 0c             	sub    esp,0xc
c0015542:	53                   	push   ebx
c0015543:	51                   	push   ecx
c0015544:	52                   	push   edx
c0015545:	50                   	push   eax
c0015546:	68 00 ad 02 c0       	push   0xc002ad00
c001554b:	e8 6c d6 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0015550:	83 c4 20             	add    esp,0x20
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015559:	e8 d4 f4 ff ff       	call   c0014a32 <displayDebugInfo(regs*)>
c001555e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015561:	5b                   	pop    ebx
c0015562:	5e                   	pop    esi
c0015563:	5d                   	pop    ebp
c0015564:	c3                   	ret    

c0015565 <displayProgramFault(char const*)>:
c0015565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001556d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015573:	85 c0                	test   eax,eax
c0015575:	74 15                	je     c001558c <displayProgramFault(char const*)+0x27>
c0015577:	83 ec 0c             	sub    esp,0xc
c001557a:	6a 04                	push   0x4
c001557c:	6a 0f                	push   0xf
c001557e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015582:	50                   	push   eax
c0015583:	e8 2c b8 ff ff       	call   c0010db4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015588:	83 c4 1c             	add    esp,0x1c
c001558b:	c3                   	ret    
c001558c:	c3                   	ret    

c001558d <setupInterruptController()>:
c001558d:	55                   	push   ebp
c001558e:	89 e5                	mov    ebp,esp
c0015590:	53                   	push   ebx
c0015591:	83 ec 24             	sub    esp,0x24
c0015594:	b8 00 00 00 00       	mov    eax,0x0
c0015599:	85 c0                	test   eax,eax
c001559b:	0f 95 c0             	setne  al
c001559e:	84 c0                	test   al,al
c00155a0:	74 5b                	je     c00155fd <setupInterruptController()+0x70>
c00155a2:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00155a9:	83 ec 0c             	sub    esp,0xc
c00155ac:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00155af:	e8 8c a2 ff ff       	call   c000f840 <malloc>
c00155b4:	83 c4 10             	add    esp,0x10
c00155b7:	89 c3                	mov    ebx,eax
c00155b9:	83 ec 0c             	sub    esp,0xc
c00155bc:	53                   	push   ebx
c00155bd:	e8 f2 ff 00 00       	call   c00255b4 <APIC::APIC()>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00155c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00155cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d0:	83 c0 08             	add    eax,0x8
c00155d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d5:	6a 00                	push   0x0
c00155d7:	6a 00                	push   0x0
c00155d9:	6a 00                	push   0x0
c00155db:	52                   	push   edx
c00155dc:	ff d0                	call   eax
c00155de:	83 c4 10             	add    esp,0x10
c00155e1:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00155e6:	83 ec 08             	sub    esp,0x8
c00155e9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155ec:	50                   	push   eax
c00155ed:	e8 f0 e9 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c00155f2:	83 c4 10             	add    esp,0x10
c00155f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155f8:	e9 52 03 00 00       	jmp    c001594f <setupInterruptController()+0x3c2>
c00155fd:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0015602:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015608:	83 e0 01             	and    eax,0x1
c001560b:	84 c0                	test   al,al
c001560d:	0f 95 c0             	setne  al
c0015610:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015613:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001561a:	83 ec 0c             	sub    esp,0xc
c001561d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015620:	e8 1b a2 ff ff       	call   c000f840 <malloc>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	89 c3                	mov    ebx,eax
c001562a:	83 ec 0c             	sub    esp,0xc
c001562d:	53                   	push   ebx
c001562e:	e8 d9 04 01 00       	call   c0025b0c <PIC::PIC()>
c0015633:	83 c4 10             	add    esp,0x10
c0015636:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015639:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001563c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015641:	83 c0 08             	add    eax,0x8
c0015644:	8b 00                	mov    eax,DWORD PTR [eax]
c0015646:	6a 00                	push   0x0
c0015648:	6a 00                	push   0x0
c001564a:	6a 00                	push   0x0
c001564c:	52                   	push   edx
c001564d:	ff d0                	call   eax
c001564f:	83 c4 10             	add    esp,0x10
c0015652:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015656:	74 73                	je     c00156cb <setupInterruptController()+0x13e>
c0015658:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001565b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015660:	83 c0 0c             	add    eax,0xc
c0015663:	8b 00                	mov    eax,DWORD PTR [eax]
c0015665:	6a 00                	push   0x0
c0015667:	6a 00                	push   0x0
c0015669:	6a 00                	push   0x0
c001566b:	52                   	push   edx
c001566c:	ff d0                	call   eax
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015675:	74 15                	je     c001568c <setupInterruptController()+0xff>
c0015677:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567a:	8b 00                	mov    eax,DWORD PTR [eax]
c001567c:	83 c0 04             	add    eax,0x4
c001567f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015681:	83 ec 0c             	sub    esp,0xc
c0015684:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015687:	ff d0                	call   eax
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015693:	83 ec 0c             	sub    esp,0xc
c0015696:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015699:	e8 a2 a1 ff ff       	call   c000f840 <malloc>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	89 c3                	mov    ebx,eax
c00156a3:	83 ec 0c             	sub    esp,0xc
c00156a6:	53                   	push   ebx
c00156a7:	e8 08 ff 00 00       	call   c00255b4 <APIC::APIC()>
c00156ac:	83 c4 10             	add    esp,0x10
c00156af:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00156b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00156b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ba:	83 c0 08             	add    eax,0x8
c00156bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bf:	6a 00                	push   0x0
c00156c1:	6a 00                	push   0x0
c00156c3:	6a 00                	push   0x0
c00156c5:	52                   	push   edx
c00156c6:	ff d0                	call   eax
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00156d0:	83 ec 08             	sub    esp,0x8
c00156d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d6:	50                   	push   eax
c00156d7:	e8 06 e9 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e4:	83 c0 24             	add    eax,0x24
c00156e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e9:	6a 00                	push   0x0
c00156eb:	68 40 4f 01 c0       	push   0xc0014f40
c00156f0:	6a 00                	push   0x0
c00156f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f5:	ff d0                	call   eax
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ff:	83 c0 24             	add    eax,0x24
c0015702:	8b 00                	mov    eax,DWORD PTR [eax]
c0015704:	6a 00                	push   0x0
c0015706:	68 40 4f 01 c0       	push   0xc0014f40
c001570b:	6a 01                	push   0x1
c001570d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015710:	ff d0                	call   eax
c0015712:	83 c4 10             	add    esp,0x10
c0015715:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015718:	8b 00                	mov    eax,DWORD PTR [eax]
c001571a:	83 c0 24             	add    eax,0x24
c001571d:	8b 00                	mov    eax,DWORD PTR [eax]
c001571f:	6a 00                	push   0x0
c0015721:	68 8f 48 01 c0       	push   0xc001488f
c0015726:	6a 02                	push   0x2
c0015728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001572b:	ff d0                	call   eax
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015733:	8b 00                	mov    eax,DWORD PTR [eax]
c0015735:	83 c0 24             	add    eax,0x24
c0015738:	8b 00                	mov    eax,DWORD PTR [eax]
c001573a:	6a 00                	push   0x0
c001573c:	68 40 4f 01 c0       	push   0xc0014f40
c0015741:	6a 03                	push   0x3
c0015743:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015746:	ff d0                	call   eax
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015750:	83 c0 24             	add    eax,0x24
c0015753:	8b 00                	mov    eax,DWORD PTR [eax]
c0015755:	6a 00                	push   0x0
c0015757:	68 40 4f 01 c0       	push   0xc0014f40
c001575c:	6a 04                	push   0x4
c001575e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015761:	ff d0                	call   eax
c0015763:	83 c4 10             	add    esp,0x10
c0015766:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015769:	8b 00                	mov    eax,DWORD PTR [eax]
c001576b:	83 c0 24             	add    eax,0x24
c001576e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015770:	6a 00                	push   0x0
c0015772:	68 40 4f 01 c0       	push   0xc0014f40
c0015777:	6a 05                	push   0x5
c0015779:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001577c:	ff d0                	call   eax
c001577e:	83 c4 10             	add    esp,0x10
c0015781:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015784:	8b 00                	mov    eax,DWORD PTR [eax]
c0015786:	83 c0 24             	add    eax,0x24
c0015789:	8b 00                	mov    eax,DWORD PTR [eax]
c001578b:	6a 00                	push   0x0
c001578d:	68 5f 4f 01 c0       	push   0xc0014f5f
c0015792:	6a 06                	push   0x6
c0015794:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015797:	ff d0                	call   eax
c0015799:	83 c4 10             	add    esp,0x10
c001579c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579f:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a1:	83 c0 24             	add    eax,0x24
c00157a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a6:	6a 00                	push   0x0
c00157a8:	68 c1 4e 01 c0       	push   0xc0014ec1
c00157ad:	6a 07                	push   0x7
c00157af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b2:	ff d0                	call   eax
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bc:	83 c0 24             	add    eax,0x24
c00157bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c1:	6a 00                	push   0x0
c00157c3:	68 aa 46 01 c0       	push   0xc00146aa
c00157c8:	6a 08                	push   0x8
c00157ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157cd:	ff d0                	call   eax
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d7:	83 c0 24             	add    eax,0x24
c00157da:	8b 00                	mov    eax,DWORD PTR [eax]
c00157dc:	6a 00                	push   0x0
c00157de:	68 40 4f 01 c0       	push   0xc0014f40
c00157e3:	6a 09                	push   0x9
c00157e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e8:	ff d0                	call   eax
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f2:	83 c0 24             	add    eax,0x24
c00157f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f7:	6a 00                	push   0x0
c00157f9:	68 40 4f 01 c0       	push   0xc0014f40
c00157fe:	6a 0a                	push   0xa
c0015800:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015803:	ff d0                	call   eax
c0015805:	83 c4 10             	add    esp,0x10
c0015808:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001580b:	8b 00                	mov    eax,DWORD PTR [eax]
c001580d:	83 c0 24             	add    eax,0x24
c0015810:	8b 00                	mov    eax,DWORD PTR [eax]
c0015812:	6a 00                	push   0x0
c0015814:	68 40 4f 01 c0       	push   0xc0014f40
c0015819:	6a 0b                	push   0xb
c001581b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001581e:	ff d0                	call   eax
c0015820:	83 c4 10             	add    esp,0x10
c0015823:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015826:	8b 00                	mov    eax,DWORD PTR [eax]
c0015828:	83 c0 24             	add    eax,0x24
c001582b:	8b 00                	mov    eax,DWORD PTR [eax]
c001582d:	6a 00                	push   0x0
c001582f:	68 40 4f 01 c0       	push   0xc0014f40
c0015834:	6a 0c                	push   0xc
c0015836:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015839:	ff d0                	call   eax
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015841:	8b 00                	mov    eax,DWORD PTR [eax]
c0015843:	83 c0 24             	add    eax,0x24
c0015846:	8b 00                	mov    eax,DWORD PTR [eax]
c0015848:	6a 00                	push   0x0
c001584a:	68 f0 4e 01 c0       	push   0xc0014ef0
c001584f:	6a 0d                	push   0xd
c0015851:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015854:	ff d0                	call   eax
c0015856:	83 c4 10             	add    esp,0x10
c0015859:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001585c:	8b 00                	mov    eax,DWORD PTR [eax]
c001585e:	83 c0 24             	add    eax,0x24
c0015861:	8b 00                	mov    eax,DWORD PTR [eax]
c0015863:	6a 00                	push   0x0
c0015865:	68 29 4f 01 c0       	push   0xc0014f29
c001586a:	6a 0e                	push   0xe
c001586c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001586f:	ff d0                	call   eax
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015877:	8b 00                	mov    eax,DWORD PTR [eax]
c0015879:	83 c0 24             	add    eax,0x24
c001587c:	8b 00                	mov    eax,DWORD PTR [eax]
c001587e:	6a 00                	push   0x0
c0015880:	68 40 4f 01 c0       	push   0xc0014f40
c0015885:	6a 0f                	push   0xf
c0015887:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001588a:	ff d0                	call   eax
c001588c:	83 c4 10             	add    esp,0x10
c001588f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015892:	8b 00                	mov    eax,DWORD PTR [eax]
c0015894:	83 c0 24             	add    eax,0x24
c0015897:	8b 00                	mov    eax,DWORD PTR [eax]
c0015899:	6a 00                	push   0x0
c001589b:	68 40 4f 01 c0       	push   0xc0014f40
c00158a0:	6a 10                	push   0x10
c00158a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158a5:	ff d0                	call   eax
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00158af:	83 c0 24             	add    eax,0x24
c00158b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b4:	6a 00                	push   0x0
c00158b6:	68 40 4f 01 c0       	push   0xc0014f40
c00158bb:	6a 11                	push   0x11
c00158bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158c0:	ff d0                	call   eax
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ca:	83 c0 24             	add    eax,0x24
c00158cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00158cf:	6a 00                	push   0x0
c00158d1:	68 40 4f 01 c0       	push   0xc0014f40
c00158d6:	6a 12                	push   0x12
c00158d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158db:	ff d0                	call   eax
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e5:	83 c0 24             	add    eax,0x24
c00158e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ea:	6a 00                	push   0x0
c00158ec:	68 40 4f 01 c0       	push   0xc0014f40
c00158f1:	6a 13                	push   0x13
c00158f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158f6:	ff d0                	call   eax
c00158f8:	83 c4 10             	add    esp,0x10
c00158fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015900:	83 c0 24             	add    eax,0x24
c0015903:	8b 00                	mov    eax,DWORD PTR [eax]
c0015905:	6a 00                	push   0x0
c0015907:	68 40 4f 01 c0       	push   0xc0014f40
c001590c:	6a 14                	push   0x14
c001590e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015911:	ff d0                	call   eax
c0015913:	83 c4 10             	add    esp,0x10
c0015916:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015919:	8b 00                	mov    eax,DWORD PTR [eax]
c001591b:	83 c0 24             	add    eax,0x24
c001591e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015920:	6a 00                	push   0x0
c0015922:	68 40 4f 01 c0       	push   0xc0014f40
c0015927:	6a 1e                	push   0x1e
c0015929:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001592c:	ff d0                	call   eax
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015934:	8b 00                	mov    eax,DWORD PTR [eax]
c0015936:	83 c0 24             	add    eax,0x24
c0015939:	8b 00                	mov    eax,DWORD PTR [eax]
c001593b:	6a 00                	push   0x0
c001593d:	68 0b c4 01 c0       	push   0xc001c40b
c0015942:	6a 60                	push   0x60
c0015944:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015947:	ff d0                	call   eax
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001594f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015952:	c9                   	leave  
c0015953:	c3                   	ret    

c0015954 <InterruptController::convertLegacyIRQNumber(int)>:
c0015954:	55                   	push   ebp
c0015955:	89 e5                	mov    ebp,esp
c0015957:	83 ec 08             	sub    esp,0x8
c001595a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	50                   	push   eax
c0015961:	e8 68 e9 ff ff       	call   c00142ce <Device::getName()>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	8a 00                	mov    al,BYTE PTR [eax]
c001596b:	3c 41                	cmp    al,0x41
c001596d:	0f 94 c0             	sete   al
c0015970:	84 c0                	test   al,al
c0015972:	74 28                	je     c001599c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015974:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015978:	7f 12                	jg     c001598c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001597a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001597d:	05 20 d3 02 c0       	add    eax,0xc002d320
c0015982:	8a 00                	mov    al,BYTE PTR [eax]
c0015984:	0f b6 c0             	movzx  eax,al
c0015987:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001598a:	eb 10                	jmp    c001599c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001598c:	83 ec 0c             	sub    esp,0xc
c001598f:	68 20 aa 02 c0       	push   0xc002aa20
c0015994:	e8 9e 48 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0015999:	83 c4 10             	add    esp,0x10
c001599c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001599f:	c9                   	leave  
c00159a0:	c3                   	ret    
c00159a1:	90                   	nop

c00159a2 <startGUI(void*)>:
c00159a2:	55                   	push   ebp
c00159a3:	89 e5                	mov    ebp,esp
c00159a5:	53                   	push   ebx
c00159a6:	83 ec 04             	sub    esp,0x4
c00159a9:	e8 b0 80 00 00       	call   c001da5e <unlockScheduler()>
c00159ae:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c00159b4:	83 ec 08             	sub    esp,0x8
c00159b7:	6a 01                	push   0x1
c00159b9:	68 70 ad 02 c0       	push   0xc002ad70
c00159be:	e8 f1 79 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	83 ec 08             	sub    esp,0x8
c00159c9:	53                   	push   ebx
c00159ca:	50                   	push   eax
c00159cb:	e8 18 7c 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c00159d0:	83 c4 10             	add    esp,0x10
c00159d3:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c00159d9:	83 ec 08             	sub    esp,0x8
c00159dc:	6a 01                	push   0x1
c00159de:	68 8a ad 02 c0       	push   0xc002ad8a
c00159e3:	e8 cc 79 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c00159e8:	83 c4 10             	add    esp,0x10
c00159eb:	83 ec 08             	sub    esp,0x8
c00159ee:	53                   	push   ebx
c00159ef:	50                   	push   eax
c00159f0:	e8 f3 7b 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c00159f5:	83 c4 10             	add    esp,0x10
c00159f8:	90                   	nop
c00159f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159fc:	c9                   	leave  
c00159fd:	c3                   	ret    

c00159fe <startGUIVESA(void*)>:
c00159fe:	55                   	push   ebp
c00159ff:	89 e5                	mov    ebp,esp
c0015a01:	53                   	push   ebx
c0015a02:	83 ec 04             	sub    esp,0x4
c0015a05:	e8 54 80 00 00       	call   c001da5e <unlockScheduler()>
c0015a0a:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c0015a10:	83 ec 08             	sub    esp,0x8
c0015a13:	6a 01                	push   0x1
c0015a15:	68 a4 ad 02 c0       	push   0xc002ada4
c0015a1a:	e8 95 79 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	83 ec 08             	sub    esp,0x8
c0015a25:	53                   	push   ebx
c0015a26:	50                   	push   eax
c0015a27:	e8 bc 7b 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c0015a35:	83 ec 08             	sub    esp,0x8
c0015a38:	6a 01                	push   0x1
c0015a3a:	68 8a ad 02 c0       	push   0xc002ad8a
c0015a3f:	e8 70 79 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	83 ec 08             	sub    esp,0x8
c0015a4a:	53                   	push   ebx
c0015a4b:	50                   	push   eax
c0015a4c:	e8 97 7b 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	90                   	nop
c0015a55:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a58:	c9                   	leave  
c0015a59:	c3                   	ret    

c0015a5a <sendKeyToTerminal(unsigned char)>:
c0015a5a:	55                   	push   ebp
c0015a5b:	89 e5                	mov    ebp,esp
c0015a5d:	83 ec 28             	sub    esp,0x28
c0015a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a63:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015a66:	a1 a4 e1 02 c0       	mov    eax,ds:0xc002e1a4
c0015a6b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015a6f:	83 ec 08             	sub    esp,0x8
c0015a72:	52                   	push   edx
c0015a73:	50                   	push   eax
c0015a74:	e8 77 b8 ff ff       	call   c00112f0 <VgaText::receiveKey(unsigned char)>
c0015a79:	83 c4 10             	add    esp,0x10
c0015a7c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015a80:	75 41                	jne    c0015ac3 <sendKeyToTerminal(unsigned char)+0x69>
c0015a82:	e8 fc 7f 00 00       	call   c001da83 <lockStuff()>
c0015a87:	a1 80 e2 02 c0       	mov    eax,ds:0xc002e280
c0015a8c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a8f:	c7 05 80 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e280,0x0
c0015a99:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a9d:	74 1f                	je     c0015abe <sendKeyToTerminal(unsigned char)+0x64>
c0015a9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015aa5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015aa8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015aab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015aae:	83 ec 0c             	sub    esp,0xc
c0015ab1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ab4:	e8 bb 85 00 00       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c0015ab9:	83 c4 10             	add    esp,0x10
c0015abc:	eb db                	jmp    c0015a99 <sendKeyToTerminal(unsigned char)+0x3f>
c0015abe:	e8 5a 83 00 00       	call   c001de1d <unlockStuff()>
c0015ac3:	90                   	nop
c0015ac4:	c9                   	leave  
c0015ac5:	c3                   	ret    

c0015ac6 <sendKeyboardToken(KeyboardToken)>:
c0015ac6:	55                   	push   ebp
c0015ac7:	89 e5                	mov    ebp,esp
c0015ac9:	83 ec 18             	sub    esp,0x18
c0015acc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad2:	0f b7 c0             	movzx  eax,ax
c0015ad5:	83 f2 01             	xor    edx,0x1
c0015ad8:	88 90 a0 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1d60],dl
c0015ade:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0015ae3:	85 c0                	test   eax,eax
c0015ae5:	74 24                	je     c0015b0b <sendKeyboardToken(KeyboardToken)+0x45>
c0015ae7:	8b 0d 88 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e288
c0015aed:	83 ec 04             	sub    esp,0x4
c0015af0:	68 a0 e2 02 c0       	push   0xc002e2a0
c0015af5:	83 ec 08             	sub    esp,0x8
c0015af8:	89 e2                	mov    edx,esp
c0015afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afd:	89 02                	mov    DWORD PTR [edx],eax
c0015aff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b02:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015b06:	ff d1                	call   ecx
c0015b08:	83 c4 10             	add    esp,0x10
c0015b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0e:	66 3d 03 02          	cmp    ax,0x203
c0015b12:	75 07                	jne    c0015b1b <sendKeyboardToken(KeyboardToken)+0x55>
c0015b14:	a0 a0 e3 02 c0       	mov    al,ds:0xc002e3a0
c0015b19:	84 c0                	test   al,al
c0015b1b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015b1f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015b22:	a0 a8 e6 02 c0       	mov    al,ds:0xc002e6a8
c0015b27:	38 c2                	cmp    dl,al
c0015b29:	74 1c                	je     c0015b47 <sendKeyboardToken(KeyboardToken)+0x81>
c0015b2b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015b2e:	a2 a8 e6 02 c0       	mov    ds:0xc002e6a8,al
c0015b33:	a0 a8 e6 02 c0       	mov    al,ds:0xc002e6a8
c0015b38:	0f b6 c0             	movzx  eax,al
c0015b3b:	83 ec 0c             	sub    esp,0xc
c0015b3e:	50                   	push   eax
c0015b3f:	e8 0c aa ff ff       	call   c0010550 <setTerminalScrollLock(bool)>
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015b4a:	84 c0                	test   al,al
c0015b4c:	0f 84 ae 00 00 00    	je     c0015c00 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b55:	66 3d 10 03          	cmp    ax,0x310
c0015b59:	75 06                	jne    c0015b61 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015b5b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b64:	66 3d 11 03          	cmp    ax,0x311
c0015b68:	75 06                	jne    c0015b70 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015b6a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b73:	66 3d 12 03          	cmp    ax,0x312
c0015b77:	75 06                	jne    c0015b7f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b79:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b82:	66 3d 13 03          	cmp    ax,0x313
c0015b86:	75 06                	jne    c0015b8e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015b88:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b91:	66 3d 14 03          	cmp    ax,0x314
c0015b95:	75 06                	jne    c0015b9d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015b97:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba0:	66 3d 15 03          	cmp    ax,0x315
c0015ba4:	75 06                	jne    c0015bac <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ba6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015baf:	66 3d 16 03          	cmp    ax,0x316
c0015bb3:	75 06                	jne    c0015bbb <sendKeyboardToken(KeyboardToken)+0xf5>
c0015bb5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbe:	66 3d 17 03          	cmp    ax,0x317
c0015bc2:	75 06                	jne    c0015bca <sendKeyboardToken(KeyboardToken)+0x104>
c0015bc4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcd:	66 3d 18 03          	cmp    ax,0x318
c0015bd1:	75 06                	jne    c0015bd9 <sendKeyboardToken(KeyboardToken)+0x113>
c0015bd3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdc:	66 3d 19 03          	cmp    ax,0x319
c0015be0:	75 06                	jne    c0015be8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015be2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015beb:	66 3d 1a 03          	cmp    ax,0x31a
c0015bef:	0f 85 c9 00 00 00    	jne    c0015cbe <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bf5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015bfb:	e9 be 00 00 00       	jmp    c0015cbe <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c03:	66 3d 10 03          	cmp    ax,0x310
c0015c07:	75 0a                	jne    c0015c13 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015c09:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015c0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c16:	66 3d 11 03          	cmp    ax,0x311
c0015c1a:	75 0a                	jne    c0015c26 <sendKeyboardToken(KeyboardToken)+0x160>
c0015c1c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015c22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c29:	66 3d 12 03          	cmp    ax,0x312
c0015c2d:	75 0a                	jne    c0015c39 <sendKeyboardToken(KeyboardToken)+0x173>
c0015c2f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015c35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3c:	66 3d 13 03          	cmp    ax,0x313
c0015c40:	75 0a                	jne    c0015c4c <sendKeyboardToken(KeyboardToken)+0x186>
c0015c42:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015c48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4f:	66 3d 14 03          	cmp    ax,0x314
c0015c53:	75 0a                	jne    c0015c5f <sendKeyboardToken(KeyboardToken)+0x199>
c0015c55:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015c5b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c62:	66 3d 15 03          	cmp    ax,0x315
c0015c66:	75 0a                	jne    c0015c72 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015c68:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c75:	66 3d 16 03          	cmp    ax,0x316
c0015c79:	75 0a                	jne    c0015c85 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c7b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c81:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c88:	66 3d 17 03          	cmp    ax,0x317
c0015c8c:	75 0a                	jne    c0015c98 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015c8e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015c94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9b:	66 3d 18 03          	cmp    ax,0x318
c0015c9f:	75 0a                	jne    c0015cab <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ca1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015ca7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cae:	66 3d 19 03          	cmp    ax,0x319
c0015cb2:	75 0a                	jne    c0015cbe <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015cb4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015cba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc1:	66 3d 00 02          	cmp    ax,0x200
c0015cc5:	75 2c                	jne    c0015cf3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015cc7:	a0 a0 e6 02 c0       	mov    al,ds:0xc002e6a0
c0015ccc:	83 f0 01             	xor    eax,0x1
c0015ccf:	84 c0                	test   al,al
c0015cd1:	74 20                	je     c0015cf3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015cd3:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0015cd8:	6a 01                	push   0x1
c0015cda:	6a 00                	push   0x0
c0015cdc:	68 a2 59 01 c0       	push   0xc00159a2
c0015ce1:	50                   	push   eax
c0015ce2:	e8 a7 7e 00 00       	call   c001db8e <Process::createThread(void (*)(void*), void*, int)>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	c6 05 a0 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6a0,0x1
c0015cf1:	eb 33                	jmp    c0015d26 <sendKeyboardToken(KeyboardToken)+0x260>
c0015cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf6:	66 3d 01 02          	cmp    ax,0x201
c0015cfa:	75 2a                	jne    c0015d26 <sendKeyboardToken(KeyboardToken)+0x260>
c0015cfc:	a0 a0 e6 02 c0       	mov    al,ds:0xc002e6a0
c0015d01:	83 f0 01             	xor    eax,0x1
c0015d04:	84 c0                	test   al,al
c0015d06:	74 1e                	je     c0015d26 <sendKeyboardToken(KeyboardToken)+0x260>
c0015d08:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c0015d0d:	6a 01                	push   0x1
c0015d0f:	6a 00                	push   0x0
c0015d11:	68 fe 59 01 c0       	push   0xc00159fe
c0015d16:	50                   	push   eax
c0015d17:	e8 72 7e 00 00       	call   c001db8e <Process::createThread(void (*)(void*), void*, int)>
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	c6 05 a0 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6a0,0x1
c0015d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d29:	66 3d 1d 03          	cmp    ax,0x31d
c0015d2d:	75 06                	jne    c0015d35 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015d2f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d38:	66 3d 1c 03          	cmp    ax,0x31c
c0015d3c:	75 06                	jne    c0015d44 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015d3e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d47:	66 3d 1b 03          	cmp    ax,0x31b
c0015d4b:	75 06                	jne    c0015d53 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015d4d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015d53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d56:	66 3d 1e 03          	cmp    ax,0x31e
c0015d5a:	75 06                	jne    c0015d62 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015d5c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d65:	66 3d 1f 03          	cmp    ax,0x31f
c0015d69:	75 06                	jne    c0015d71 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015d6b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d74:	66 3d 1a 03          	cmp    ax,0x31a
c0015d78:	75 06                	jne    c0015d80 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d7a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d80:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d84:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d87:	83 f0 01             	xor    eax,0x1
c0015d8a:	84 c0                	test   al,al
c0015d8c:	74 77                	je     c0015e05 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015d8e:	a0 a1 e3 02 c0       	mov    al,ds:0xc002e3a1
c0015d93:	84 c0                	test   al,al
c0015d95:	74 41                	je     c0015dd8 <sendKeyboardToken(KeyboardToken)+0x312>
c0015d97:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d9b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d9f:	74 2b                	je     c0015dcc <sendKeyboardToken(KeyboardToken)+0x306>
c0015da1:	8b 15 a4 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a4
c0015da7:	89 d0                	mov    eax,edx
c0015da9:	c1 e0 02             	shl    eax,0x2
c0015dac:	01 d0                	add    eax,edx
c0015dae:	01 c0                	add    eax,eax
c0015db0:	a3 a4 e6 02 c0       	mov    ds:0xc002e6a4,eax
c0015db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db8:	0f b7 c0             	movzx  eax,ax
c0015dbb:	8d 50 d0             	lea    edx,[eax-0x30]
c0015dbe:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015dc3:	01 d0                	add    eax,edx
c0015dc5:	a3 a4 e6 02 c0       	mov    ds:0xc002e6a4,eax
c0015dca:	eb 6d                	jmp    c0015e39 <sendKeyboardToken(KeyboardToken)+0x373>
c0015dcc:	c7 05 a4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a4,0x0
c0015dd6:	eb 61                	jmp    c0015e39 <sendKeyboardToken(KeyboardToken)+0x373>
c0015dd8:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015ddd:	85 c0                	test   eax,eax
c0015ddf:	74 18                	je     c0015df9 <sendKeyboardToken(KeyboardToken)+0x333>
c0015de1:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015de6:	0f b6 c0             	movzx  eax,al
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	50                   	push   eax
c0015ded:	e8 68 fc ff ff       	call   c0015a5a <sendKeyToTerminal(unsigned char)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015df9:	c7 05 a4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a4,0x0
c0015e03:	eb 34                	jmp    c0015e39 <sendKeyboardToken(KeyboardToken)+0x373>
c0015e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e08:	66 3d 01 01          	cmp    ax,0x101
c0015e0c:	75 2b                	jne    c0015e39 <sendKeyboardToken(KeyboardToken)+0x373>
c0015e0e:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015e13:	85 c0                	test   eax,eax
c0015e15:	74 18                	je     c0015e2f <sendKeyboardToken(KeyboardToken)+0x369>
c0015e17:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015e1c:	0f b6 c0             	movzx  eax,al
c0015e1f:	83 ec 0c             	sub    esp,0xc
c0015e22:	50                   	push   eax
c0015e23:	e8 32 fc ff ff       	call   c0015a5a <sendKeyToTerminal(unsigned char)>
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e2f:	c7 05 a4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a4,0x0
c0015e39:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e3c:	83 f0 01             	xor    eax,0x1
c0015e3f:	84 c0                	test   al,al
c0015e41:	74 4c                	je     c0015e8f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e43:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e46:	83 f0 01             	xor    eax,0x1
c0015e49:	84 c0                	test   al,al
c0015e4b:	74 42                	je     c0015e8f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e4d:	a0 a0 e3 02 c0       	mov    al,ds:0xc002e3a0
c0015e52:	83 f0 01             	xor    eax,0x1
c0015e55:	84 c0                	test   al,al
c0015e57:	74 36                	je     c0015e8f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5c:	66 83 f8 1f          	cmp    ax,0x1f
c0015e60:	76 09                	jbe    c0015e6b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e65:	66 83 f8 7e          	cmp    ax,0x7e
c0015e69:	76 12                	jbe    c0015e7d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6e:	66 83 f8 0a          	cmp    ax,0xa
c0015e72:	74 09                	je     c0015e7d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e77:	66 83 f8 08          	cmp    ax,0x8
c0015e7b:	75 12                	jne    c0015e8f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e80:	0f b6 c0             	movzx  eax,al
c0015e83:	83 ec 0c             	sub    esp,0xc
c0015e86:	50                   	push   eax
c0015e87:	e8 ce fb ff ff       	call   c0015a5a <sendKeyToTerminal(unsigned char)>
c0015e8c:	83 c4 10             	add    esp,0x10
c0015e8f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e92:	83 f0 01             	xor    eax,0x1
c0015e95:	84 c0                	test   al,al
c0015e97:	74 4f                	je     c0015ee8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e99:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e9c:	83 f0 01             	xor    eax,0x1
c0015e9f:	84 c0                	test   al,al
c0015ea1:	74 45                	je     c0015ee8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ea3:	a0 a0 e3 02 c0       	mov    al,ds:0xc002e3a0
c0015ea8:	84 c0                	test   al,al
c0015eaa:	74 3c                	je     c0015ee8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eaf:	66 83 f8 3f          	cmp    ax,0x3f
c0015eb3:	76 33                	jbe    c0015ee8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb8:	66 83 f8 7f          	cmp    ax,0x7f
c0015ebc:	77 2a                	ja     c0015ee8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec1:	88 c2                	mov    dl,al
c0015ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec6:	66 83 f8 5f          	cmp    ax,0x5f
c0015eca:	76 04                	jbe    c0015ed0 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015ecc:	b0 20                	mov    al,0x20
c0015ece:	eb 02                	jmp    c0015ed2 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015ed0:	b0 00                	mov    al,0x0
c0015ed2:	29 c2                	sub    edx,eax
c0015ed4:	88 d0                	mov    al,dl
c0015ed6:	83 e8 40             	sub    eax,0x40
c0015ed9:	0f b6 c0             	movzx  eax,al
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	50                   	push   eax
c0015ee0:	e8 75 fb ff ff       	call   c0015a5a <sendKeyToTerminal(unsigned char)>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eeb:	66 3d 00 03          	cmp    ax,0x300
c0015eef:	75 0f                	jne    c0015f00 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ef1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ef4:	83 f0 01             	xor    eax,0x1
c0015ef7:	84 c0                	test   al,al
c0015ef9:	74 05                	je     c0015f00 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015efb:	e8 85 ae ff ff       	call   c0010d85 <doTerminalCycle()>
c0015f00:	90                   	nop
c0015f01:	c9                   	leave  
c0015f02:	c3                   	ret    

c0015f03 <clearInternalKeybuffer(VgaText*)>:
c0015f03:	55                   	push   ebp
c0015f04:	89 e5                	mov    ebp,esp
c0015f06:	83 ec 08             	sub    esp,0x8
c0015f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0c:	05 34 11 00 00       	add    eax,0x1134
c0015f11:	83 ec 0c             	sub    esp,0xc
c0015f14:	50                   	push   eax
c0015f15:	e8 7a a8 fe ff       	call   c0000794 <strlen>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f20:	81 c2 34 11 00 00    	add    edx,0x1134
c0015f26:	83 ec 04             	sub    esp,0x4
c0015f29:	50                   	push   eax
c0015f2a:	6a 00                	push   0x0
c0015f2c:	52                   	push   edx
c0015f2d:	e8 46 a8 fe ff       	call   c0000778 <memset>
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	90                   	nop
c0015f36:	c9                   	leave  
c0015f37:	c3                   	ret    

c0015f38 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015f38:	55                   	push   ebp
c0015f39:	89 e5                	mov    ebp,esp
c0015f3b:	83 ec 18             	sub    esp,0x18
c0015f3e:	fb                   	sti    
c0015f3f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015f46:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015f4a:	0f 84 8a 00 00 00    	je     c0015fda <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f53:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015f59:	84 c0                	test   al,al
c0015f5b:	75 11                	jne    c0015f6e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015f5d:	e8 fa 7a 00 00       	call   c001da5c <lockScheduler()>
c0015f62:	e8 31 7e 00 00       	call   c001dd98 <schedule()>
c0015f67:	e8 f2 7a 00 00       	call   c001da5e <unlockScheduler()>
c0015f6c:	eb e2                	jmp    c0015f50 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015f6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f71:	8d 50 01             	lea    edx,[eax+0x1]
c0015f74:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f7a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015f80:	88 10                	mov    BYTE PTR [eax],dl
c0015f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f85:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015f8b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	05 34 11 00 00       	add    eax,0x1134
c0015f96:	83 ec 0c             	sub    esp,0xc
c0015f99:	50                   	push   eax
c0015f9a:	e8 f5 a7 fe ff       	call   c0000794 <strlen>
c0015f9f:	83 c4 10             	add    esp,0x10
c0015fa2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fa5:	81 c2 34 11 00 00    	add    edx,0x1134
c0015fab:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015fae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fb1:	81 c2 34 11 00 00    	add    edx,0x1134
c0015fb7:	83 ec 04             	sub    esp,0x4
c0015fba:	50                   	push   eax
c0015fbb:	51                   	push   ecx
c0015fbc:	52                   	push   edx
c0015fbd:	e8 ba a6 fe ff       	call   c000067c <memmove>
c0015fc2:	83 c4 10             	add    esp,0x10
c0015fc5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015fc8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015fcb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015fcf:	0f 85 71 ff ff ff    	jne    c0015f46 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015fd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fd8:	eb 03                	jmp    c0015fdd <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015fda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fdd:	c9                   	leave  
c0015fde:	c3                   	ret    
c0015fdf:	90                   	nop

c0015fe0 <Keyboard::Keyboard(char const*)>:
c0015fe0:	83 ec 0c             	sub    esp,0xc
c0015fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe7:	83 ec 08             	sub    esp,0x8
c0015fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fee:	50                   	push   eax
c0015fef:	e8 de e1 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0015ff4:	83 c4 10             	add    esp,0x10
c0015ff7:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c0015ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016000:	89 10                	mov    DWORD PTR [eax],edx
c0016002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016006:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016010:	c6 05 84 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e284,0x1
c0016017:	90                   	nop
c0016018:	83 c4 0c             	add    esp,0xc
c001601b:	c3                   	ret    

c001601c <Keyboard::~Keyboard()>:
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c0016024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016028:	89 10                	mov    DWORD PTR [eax],edx
c001602a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602e:	83 ec 0c             	sub    esp,0xc
c0016031:	50                   	push   eax
c0016032:	e8 7d de ff ff       	call   c0013eb4 <Device::~Device()>
c0016037:	83 c4 10             	add    esp,0x10
c001603a:	90                   	nop
c001603b:	83 c4 0c             	add    esp,0xc
c001603e:	c3                   	ret    
c001603f:	90                   	nop

c0016040 <Keyboard::~Keyboard()>:
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	83 ec 0c             	sub    esp,0xc
c0016046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001604a:	e8 cd ff ff ff       	call   c001601c <Keyboard::~Keyboard()>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	83 ec 08             	sub    esp,0x8
c0016055:	68 5c 01 00 00       	push   0x15c
c001605a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001605e:	e8 79 ca ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0016063:	83 c4 10             	add    esp,0x10
c0016066:	83 c4 0c             	add    esp,0xc
c0016069:	c3                   	ret    

c001606a <LogicalDisk::close(int, int, void*)>:
c001606a:	83 c8 ff             	or     eax,0xffffffff
c001606d:	c3                   	ret    

c001606e <LogicalDisk::~LogicalDisk()>:
c001606e:	83 ec 0c             	sub    esp,0xc
c0016071:	ba 78 ae 02 c0       	mov    edx,0xc002ae78
c0016076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607a:	89 10                	mov    DWORD PTR [eax],edx
c001607c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016080:	83 ec 0c             	sub    esp,0xc
c0016083:	50                   	push   eax
c0016084:	e8 2b de ff ff       	call   c0013eb4 <Device::~Device()>
c0016089:	83 c4 10             	add    esp,0x10
c001608c:	90                   	nop
c001608d:	83 c4 0c             	add    esp,0xc
c0016090:	c3                   	ret    
c0016091:	90                   	nop

c0016092 <LogicalDisk::~LogicalDisk()>:
c0016092:	83 ec 0c             	sub    esp,0xc
c0016095:	83 ec 0c             	sub    esp,0xc
c0016098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001609c:	e8 cd ff ff ff       	call   c001606e <LogicalDisk::~LogicalDisk()>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	83 ec 08             	sub    esp,0x8
c00160a7:	68 74 01 00 00       	push   0x174
c00160ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160b0:	e8 27 ca ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00160b5:	83 c4 10             	add    esp,0x10
c00160b8:	83 c4 0c             	add    esp,0xc
c00160bb:	c3                   	ret    

c00160bc <LogicalDisk::open(int, int, void*)>:
c00160bc:	83 ec 18             	sub    esp,0x18
c00160bf:	68 f4 ad 02 c0       	push   0xc002adf4
c00160c4:	e8 6e 41 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00160c9:	83 c8 ff             	or     eax,0xffffffff
c00160cc:	83 c4 1c             	add    esp,0x1c
c00160cf:	c3                   	ret    

c00160d0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00160d0:	53                   	push   ebx
c00160d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00160d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160dd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00160e3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00160e9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00160ef:	77 10                	ja     c0016101 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00160f1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00160f7:	89 d3                	mov    ebx,edx
c00160f9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00160ff:	72 05                	jb     c0016106 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016101:	83 c8 ff             	or     eax,0xffffffff
c0016104:	89 c2                	mov    edx,eax
c0016106:	5b                   	pop    ebx
c0016107:	c3                   	ret    

c0016108 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016108:	56                   	push   esi
c0016109:	83 c8 ff             	or     eax,0xffffffff
c001610c:	53                   	push   ebx
c001610d:	89 c2                	mov    edx,eax
c001610f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016113:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016117:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001611b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016121:	77 27                	ja     c001614a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016123:	89 d8                	mov    eax,ebx
c0016125:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001612b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016131:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016136:	89 c2                	mov    edx,eax
c0016138:	73 10                	jae    c001614a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001613a:	89 c8                	mov    eax,ecx
c001613c:	89 da                	mov    edx,ebx
c001613e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016144:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001614a:	5b                   	pop    ebx
c001614b:	5e                   	pop    esi
c001614c:	c3                   	ret    
c001614d:	90                   	nop

c001614e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001614e:	83 ec 1c             	sub    esp,0x1c
c0016151:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016155:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001615d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016161:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016165:	89 04 24             	mov    DWORD PTR [esp],eax
c0016168:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001616c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016174:	83 ec 08             	sub    esp,0x8
c0016177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617b:	50                   	push   eax
c001617c:	e8 51 e0 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0016181:	83 c4 10             	add    esp,0x10
c0016184:	ba 78 ae 02 c0       	mov    edx,0xc002ae78
c0016189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001618d:	89 10                	mov    DWORD PTR [eax],edx
c001618f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016193:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001619a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001619e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00161a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00161b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161bf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00161c5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00161cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00161d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161d6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00161dc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00161e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161ea:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00161f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161fe:	90                   	nop
c00161ff:	83 c4 1c             	add    esp,0x1c
c0016202:	c3                   	ret    
c0016203:	90                   	nop

c0016204 <LogicalDisk::assignDriveLetter()>:
c0016204:	55                   	push   ebp
c0016205:	57                   	push   edi
c0016206:	56                   	push   esi
c0016207:	53                   	push   ebx
c0016208:	83 ec 14             	sub    esp,0x14
c001620b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001620f:	8b 3d c0 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e6c0
c0016215:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001621b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001621f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016225:	8b 3d c4 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e6c4
c001622b:	3c 01                	cmp    al,0x1
c001622d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016231:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016235:	19 c0                	sbb    eax,eax
c0016237:	83 e0 02             	and    eax,0x2
c001623a:	83 c0 41             	add    eax,0x41
c001623d:	0f be e8             	movsx  ebp,al
c0016240:	3c 43                	cmp    al,0x43
c0016242:	75 10                	jne    c0016254 <LogicalDisk::assignDriveLetter()+0x50>
c0016244:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001624b:	75 5d                	jne    c00162aa <LogicalDisk::assignDriveLetter()+0xa6>
c001624d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016252:	75 56                	jne    c00162aa <LogicalDisk::assignDriveLetter()+0xa6>
c0016254:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016257:	ba 01 00 00 00       	mov    edx,0x1
c001625c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016260:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016264:	d3 e2                	shl    edx,cl
c0016266:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001626a:	89 d7                	mov    edi,edx
c001626c:	89 d6                	mov    esi,edx
c001626e:	c1 ff 1f             	sar    edi,0x1f
c0016271:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016275:	21 f9                	and    ecx,edi
c0016277:	09 d1                	or     ecx,edx
c0016279:	75 2f                	jne    c00162aa <LogicalDisk::assignDriveLetter()+0xa6>
c001627b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001627f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016283:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016289:	09 f2                	or     edx,esi
c001628b:	89 15 c0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c0,edx
c0016291:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016295:	09 fa                	or     edx,edi
c0016297:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001629b:	89 15 c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,edx
c00162a1:	89 1c bd e0 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1920],ebx
c00162a8:	eb 08                	jmp    c00162b2 <LogicalDisk::assignDriveLetter()+0xae>
c00162aa:	45                   	inc    ebp
c00162ab:	40                   	inc    eax
c00162ac:	3c 5b                	cmp    al,0x5b
c00162ae:	75 90                	jne    c0016240 <LogicalDisk::assignDriveLetter()+0x3c>
c00162b0:	31 c0                	xor    eax,eax
c00162b2:	83 c4 14             	add    esp,0x14
c00162b5:	5b                   	pop    ebx
c00162b6:	5e                   	pop    esi
c00162b7:	5f                   	pop    edi
c00162b8:	5d                   	pop    ebp
c00162b9:	c3                   	ret    

c00162ba <LogicalDisk::mount()>:
c00162ba:	56                   	push   esi
c00162bb:	53                   	push   ebx
c00162bc:	51                   	push   ecx
c00162bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162c1:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c00162c7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00162d1:	85 db                	test   ebx,ebx
c00162d3:	74 50                	je     c0016325 <LogicalDisk::mount()+0x6b>
c00162d5:	e8 6d 77 00 00       	call   c001da47 <getIRQNestingLevel()>
c00162da:	52                   	push   edx
c00162db:	52                   	push   edx
c00162dc:	50                   	push   eax
c00162dd:	68 18 ae 02 c0       	push   0xc002ae18
c00162e2:	e8 d5 c8 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00162e7:	83 c4 0c             	add    esp,0xc
c00162ea:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162f3:	83 e8 41             	sub    eax,0x41
c00162f6:	50                   	push   eax
c00162f7:	56                   	push   esi
c00162f8:	53                   	push   ebx
c00162f9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	84 c0                	test   al,al
c0016301:	74 08                	je     c001630b <LogicalDisk::mount()+0x51>
c0016303:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016309:	eb 1c                	jmp    c0016327 <LogicalDisk::mount()+0x6d>
c001630b:	e8 37 77 00 00       	call   c001da47 <getIRQNestingLevel()>
c0016310:	51                   	push   ecx
c0016311:	51                   	push   ecx
c0016312:	50                   	push   eax
c0016313:	68 33 ae 02 c0       	push   0xc002ae33
c0016318:	e8 9f c8 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001631d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016320:	83 c4 10             	add    esp,0x10
c0016323:	eb ac                	jmp    c00162d1 <LogicalDisk::mount()+0x17>
c0016325:	31 c0                	xor    eax,eax
c0016327:	5a                   	pop    edx
c0016328:	5b                   	pop    ebx
c0016329:	5e                   	pop    esi
c001632a:	c3                   	ret    
c001632b:	90                   	nop

c001632c <LogicalDisk::unmount()>:
c001632c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016330:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001633a:	c3                   	ret    
c001633b:	90                   	nop

c001633c <LogicalDisk::eject()>:
c001633c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016340:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016346:	8b 10                	mov    edx,DWORD PTR [eax]
c0016348:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001634c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001634f:	90                   	nop

c0016350 <LogicalDisk::unassignDriveLetter()>:
c0016350:	57                   	push   edi
c0016351:	56                   	push   esi
c0016352:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016356:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001635d:	84 c9                	test   cl,cl
c001635f:	75 0f                	jne    c0016370 <LogicalDisk::unassignDriveLetter()+0x20>
c0016361:	c7 44 24 0c 4e ae 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ae4e
c0016369:	5e                   	pop    esi
c001636a:	5f                   	pop    edi
c001636b:	e9 c7 3e 00 00       	jmp    c001a237 <Krnl::panic(char const*)>
c0016370:	83 e9 41             	sub    ecx,0x41
c0016373:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001637a:	b8 01 00 00 00       	mov    eax,0x1
c001637f:	c7 04 8d e0 e6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1920],0x0
c001638a:	d3 e0                	shl    eax,cl
c001638c:	89 c7                	mov    edi,eax
c001638e:	f7 d0                	not    eax
c0016390:	c1 ff 1f             	sar    edi,0x1f
c0016393:	21 05 c0 e6 02 c0    	and    DWORD PTR ds:0xc002e6c0,eax
c0016399:	89 fe                	mov    esi,edi
c001639b:	f7 d6                	not    esi
c001639d:	21 35 c4 e6 02 c0    	and    DWORD PTR ds:0xc002e6c4,esi
c00163a3:	5e                   	pop    esi
c00163a4:	5f                   	pop    edi
c00163a5:	c3                   	ret    

c00163a6 <LogicalDisk::read(unsigned long long, int, void*)>:
c00163a6:	57                   	push   edi
c00163a7:	56                   	push   esi
c00163a8:	53                   	push   ebx
c00163a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00163ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163b1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163b9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163bf:	77 41                	ja     c0016402 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00163c1:	99                   	cdq    
c00163c2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163c8:	01 c8                	add    eax,ecx
c00163ca:	11 da                	adc    edx,ebx
c00163cc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163d2:	19 d7                	sbb    edi,edx
c00163d4:	72 33                	jb     c0016409 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00163d6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163dc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163e6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163ea:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163fa:	5b                   	pop    ebx
c00163fb:	5e                   	pop    esi
c00163fc:	5f                   	pop    edi
c00163fd:	e9 b0 0a 00 00       	jmp    c0016eb2 <VCache::read(unsigned long long, int, void*)>
c0016402:	b8 05 00 00 00       	mov    eax,0x5
c0016407:	eb 05                	jmp    c001640e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016409:	b8 07 00 00 00       	mov    eax,0x7
c001640e:	5b                   	pop    ebx
c001640f:	5e                   	pop    esi
c0016410:	5f                   	pop    edi
c0016411:	c3                   	ret    

c0016412 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016412:	57                   	push   edi
c0016413:	56                   	push   esi
c0016414:	53                   	push   ebx
c0016415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016419:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001641d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016421:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016425:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001642b:	77 41                	ja     c001646e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001642d:	99                   	cdq    
c001642e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016434:	01 c8                	add    eax,ecx
c0016436:	11 da                	adc    edx,ebx
c0016438:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001643e:	19 d7                	sbb    edi,edx
c0016440:	72 33                	jb     c0016475 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016442:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016448:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001644e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016452:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016456:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001645c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016466:	5b                   	pop    ebx
c0016467:	5e                   	pop    esi
c0016468:	5f                   	pop    edi
c0016469:	e9 4e 09 00 00       	jmp    c0016dbc <VCache::write(unsigned long long, int, void*)>
c001646e:	b8 05 00 00 00       	mov    eax,0x5
c0016473:	eb 05                	jmp    c001647a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016475:	b8 07 00 00 00       	mov    eax,0x7
c001647a:	5b                   	pop    ebx
c001647b:	5e                   	pop    esi
c001647c:	5f                   	pop    edi
c001647d:	c3                   	ret    

c001647e <Mouse::Mouse(char const*)>:
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016485:	83 ec 08             	sub    esp,0x8
c0016488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648c:	50                   	push   eax
c001648d:	e8 40 dd ff ff       	call   c00141d2 <Device::Device(char const*)>
c0016492:	83 c4 10             	add    esp,0x10
c0016495:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c001649a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649e:	89 10                	mov    DWORD PTR [eax],edx
c00164a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00164ae:	90                   	nop
c00164af:	83 c4 0c             	add    esp,0xc
c00164b2:	c3                   	ret    
c00164b3:	90                   	nop

c00164b4 <Mouse::~Mouse()>:
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c00164bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c0:	89 10                	mov    DWORD PTR [eax],edx
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	83 ec 0c             	sub    esp,0xc
c00164c9:	50                   	push   eax
c00164ca:	e8 e5 d9 ff ff       	call   c0013eb4 <Device::~Device()>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	90                   	nop
c00164d3:	83 c4 0c             	add    esp,0xc
c00164d6:	c3                   	ret    
c00164d7:	90                   	nop

c00164d8 <Mouse::~Mouse()>:
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	83 ec 0c             	sub    esp,0xc
c00164de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e2:	e8 cd ff ff ff       	call   c00164b4 <Mouse::~Mouse()>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	83 ec 08             	sub    esp,0x8
c00164ed:	68 58 01 00 00       	push   0x158
c00164f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f6:	e8 e1 c5 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00164fb:	83 c4 10             	add    esp,0x10
c00164fe:	83 c4 0c             	add    esp,0xc
c0016501:	c3                   	ret    

c0016502 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016502:	55                   	push   ebp
c0016503:	57                   	push   edi
c0016504:	56                   	push   esi
c0016505:	53                   	push   ebx
c0016506:	81 ec 28 01 00 00    	sub    esp,0x128
c001650c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016513:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001651a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016521:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016528:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001652c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016530:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016537:	e8 92 dd ff ff       	call   c00142ce <Device::getName()>
c001653c:	5a                   	pop    edx
c001653d:	59                   	pop    ecx
c001653e:	50                   	push   eax
c001653f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016543:	55                   	push   ebp
c0016544:	e8 eb a2 fe ff       	call   c0000834 <strcpy>
c0016549:	5b                   	pop    ebx
c001654a:	58                   	pop    eax
c001654b:	68 c8 ae 02 c0       	push   0xc002aec8
c0016550:	55                   	push   ebp
c0016551:	e8 1e a4 fe ff       	call   c0000974 <strcat>
c0016556:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001655d:	e8 de 92 ff ff       	call   c000f840 <malloc>
c0016562:	83 c4 0c             	add    esp,0xc
c0016565:	89 c3                	mov    ebx,eax
c0016567:	57                   	push   edi
c0016568:	56                   	push   esi
c0016569:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001656d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016571:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016578:	55                   	push   ebp
c0016579:	50                   	push   eax
c001657a:	e8 cf fb ff ff       	call   c001614e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001657f:	83 c4 14             	add    esp,0x14
c0016582:	53                   	push   ebx
c0016583:	e8 7c fc ff ff       	call   c0016204 <LogicalDisk::assignDriveLetter()>
c0016588:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001658b:	89 c6                	mov    esi,eax
c001658d:	e8 28 fd ff ff       	call   c00162ba <LogicalDisk::mount()>
c0016592:	58                   	pop    eax
c0016593:	5a                   	pop    edx
c0016594:	53                   	push   ebx
c0016595:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001659c:	e8 41 da ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c00165a1:	59                   	pop    ecx
c00165a2:	89 f0                	mov    eax,esi
c00165a4:	5b                   	pop    ebx
c00165a5:	0f be f0             	movsx  esi,al
c00165a8:	56                   	push   esi
c00165a9:	68 d3 ae 02 c0       	push   0xc002aed3
c00165ae:	e8 09 c6 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00165b3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00165b9:	5b                   	pop    ebx
c00165ba:	5e                   	pop    esi
c00165bb:	5f                   	pop    edi
c00165bc:	5d                   	pop    ebp
c00165bd:	c3                   	ret    

c00165be <createPartitionsForDisk(PhysicalDisk*)>:
c00165be:	55                   	push   ebp
c00165bf:	57                   	push   edi
c00165c0:	56                   	push   esi
c00165c1:	53                   	push   ebx
c00165c2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00165c8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00165cf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00165d5:	3d 00 02 00 00       	cmp    eax,0x200
c00165da:	74 27                	je     c0016603 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00165dc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00165e2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00165e8:	83 ec 10             	sub    esp,0x10
c00165eb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00165ef:	99                   	cdq    
c00165f0:	c1 e6 0a             	shl    esi,0xa
c00165f3:	52                   	push   edx
c00165f4:	89 fd                	mov    ebp,edi
c00165f6:	50                   	push   eax
c00165f7:	55                   	push   ebp
c00165f8:	56                   	push   esi
c00165f9:	e8 3e 00 01 00       	call   c002663c <__udivdi3>
c00165fe:	e9 b1 00 00 00       	jmp    c00166b4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016603:	83 ec 0c             	sub    esp,0xc
c0016606:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016608:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001660c:	56                   	push   esi
c001660d:	6a 01                	push   0x1
c001660f:	6a 00                	push   0x0
c0016611:	6a 00                	push   0x0
c0016613:	53                   	push   ebx
c0016614:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016617:	83 c4 20             	add    esp,0x20
c001661a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016622:	75 0a                	jne    c001662e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016624:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001662c:	74 2c                	je     c001665a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001662e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016634:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001663a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016640:	83 ec 10             	sub    esp,0x10
c0016643:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016647:	89 f7                	mov    edi,esi
c0016649:	c1 e0 0a             	shl    eax,0xa
c001664c:	c1 ff 1f             	sar    edi,0x1f
c001664f:	57                   	push   edi
c0016650:	56                   	push   esi
c0016651:	52                   	push   edx
c0016652:	50                   	push   eax
c0016653:	e8 e4 ff 00 00       	call   c002663c <__udivdi3>
c0016658:	eb 5a                	jmp    c00166b4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001665a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016661:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016668:	83 e1 7f             	and    ecx,0x7f
c001666b:	83 e0 7f             	and    eax,0x7f
c001666e:	01 c1                	add    ecx,eax
c0016670:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016677:	83 e0 7f             	and    eax,0x7f
c001667a:	01 c1                	add    ecx,eax
c001667c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016683:	83 e0 7f             	and    eax,0x7f
c0016686:	00 c1                	add    cl,al
c0016688:	74 41                	je     c00166cb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001668a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016690:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016696:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001669c:	83 ec 10             	sub    esp,0x10
c001669f:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166a3:	89 f7                	mov    edi,esi
c00166a5:	c1 e0 0a             	shl    eax,0xa
c00166a8:	c1 ff 1f             	sar    edi,0x1f
c00166ab:	57                   	push   edi
c00166ac:	56                   	push   esi
c00166ad:	52                   	push   edx
c00166ae:	50                   	push   eax
c00166af:	e8 88 ff 00 00       	call   c002663c <__udivdi3>
c00166b4:	83 c4 14             	add    esp,0x14
c00166b7:	52                   	push   edx
c00166b8:	50                   	push   eax
c00166b9:	6a 00                	push   0x0
c00166bb:	6a 00                	push   0x0
c00166bd:	53                   	push   ebx
c00166be:	e8 3f fe ff ff       	call   c0016502 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00166c3:	83 c4 20             	add    esp,0x20
c00166c6:	e9 79 01 00 00       	jmp    c0016844 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00166cb:	89 f0                	mov    eax,esi
c00166cd:	31 f6                	xor    esi,esi
c00166cf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00166d6:	75 02                	jne    c00166da <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00166d8:	89 f1                	mov    ecx,esi
c00166da:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00166e1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00166e8:	c1 e2 08             	shl    edx,0x8
c00166eb:	c1 e7 10             	shl    edi,0x10
c00166ee:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00166f6:	09 fa                	or     edx,edi
c00166f8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016700:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016707:	83 c0 10             	add    eax,0x10
c001670a:	09 fa                	or     edx,edi
c001670c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016713:	c1 e7 18             	shl    edi,0x18
c0016716:	09 fa                	or     edx,edi
c0016718:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001671f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016723:	c1 e7 10             	shl    edi,0x10
c0016726:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001672d:	c1 e2 08             	shl    edx,0x8
c0016730:	09 fa                	or     edx,edi
c0016732:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016739:	09 fa                	or     edx,edi
c001673b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016742:	c1 e7 18             	shl    edi,0x18
c0016745:	09 fa                	or     edx,edi
c0016747:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001674b:	46                   	inc    esi
c001674c:	83 fe 04             	cmp    esi,0x4
c001674f:	0f 85 7a ff ff ff    	jne    c00166cf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016759:	83 f0 01             	xor    eax,0x1
c001675c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016760:	75 57                	jne    c00167b9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016766:	83 f0 01             	xor    eax,0x1
c0016769:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001676d:	75 4a                	jne    c00167b9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001676f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016773:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001677b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016783:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016789:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001678f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016795:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016799:	89 f7                	mov    edi,esi
c001679b:	c1 e0 0a             	shl    eax,0xa
c001679e:	c1 ff 1f             	sar    edi,0x1f
c00167a1:	57                   	push   edi
c00167a2:	56                   	push   esi
c00167a3:	52                   	push   edx
c00167a4:	50                   	push   eax
c00167a5:	e8 92 fe 00 00       	call   c002663c <__udivdi3>
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167b5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00167b9:	84 c9                	test   cl,cl
c00167bb:	74 53                	je     c0016810 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00167bd:	0f b6 c9             	movzx  ecx,cl
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00167c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167cc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00167d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00167d8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00167dc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00167e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00167e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167f0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00167f4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00167f8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00167fc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016800:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016804:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016808:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001680c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016810:	31 ed                	xor    ebp,ebp
c0016812:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016816:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001681a:	89 f8                	mov    eax,edi
c001681c:	09 f0                	or     eax,esi
c001681e:	74 1e                	je     c001683e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016820:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016824:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016828:	89 d1                	mov    ecx,edx
c001682a:	09 c1                	or     ecx,eax
c001682c:	74 10                	je     c001683e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001682e:	83 ec 0c             	sub    esp,0xc
c0016831:	57                   	push   edi
c0016832:	56                   	push   esi
c0016833:	52                   	push   edx
c0016834:	50                   	push   eax
c0016835:	53                   	push   ebx
c0016836:	e8 c7 fc ff ff       	call   c0016502 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001683b:	83 c4 20             	add    esp,0x20
c001683e:	45                   	inc    ebp
c001683f:	83 fd 04             	cmp    ebp,0x4
c0016842:	75 ce                	jne    c0016812 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016844:	81 c4 5c 02 00 00    	add    esp,0x25c
c001684a:	5b                   	pop    ebx
c001684b:	5e                   	pop    esi
c001684c:	5f                   	pop    edi
c001684d:	5d                   	pop    ebp
c001684e:	c3                   	ret    
c001684f:	90                   	nop

c0016850 <Serial::Serial(char const*)>:
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016857:	83 ec 08             	sub    esp,0x8
c001685a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001685e:	50                   	push   eax
c001685f:	e8 6e d9 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0016864:	83 c4 10             	add    esp,0x10
c0016867:	ba 00 af 02 c0       	mov    edx,0xc002af00
c001686c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016870:	89 10                	mov    DWORD PTR [eax],edx
c0016872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016876:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016880:	90                   	nop
c0016881:	83 c4 0c             	add    esp,0xc
c0016884:	c3                   	ret    
c0016885:	90                   	nop

c0016886 <Serial::~Serial()>:
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	ba 00 af 02 c0       	mov    edx,0xc002af00
c001688e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016892:	89 10                	mov    DWORD PTR [eax],edx
c0016894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	50                   	push   eax
c001689c:	e8 13 d6 ff ff       	call   c0013eb4 <Device::~Device()>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	90                   	nop
c00168a5:	83 c4 0c             	add    esp,0xc
c00168a8:	c3                   	ret    
c00168a9:	90                   	nop

c00168aa <Serial::~Serial()>:
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	83 ec 0c             	sub    esp,0xc
c00168b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b4:	e8 cd ff ff ff       	call   c0016886 <Serial::~Serial()>
c00168b9:	83 c4 10             	add    esp,0x10
c00168bc:	83 ec 08             	sub    esp,0x8
c00168bf:	68 58 01 00 00       	push   0x158
c00168c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c8:	e8 0f c2 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	83 c4 0c             	add    esp,0xc
c00168d3:	c3                   	ret    

c00168d4 <Timer::Timer(char const*)>:
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168db:	83 ec 08             	sub    esp,0x8
c00168de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e2:	50                   	push   eax
c00168e3:	e8 ea d8 ff ff       	call   c00141d2 <Device::Device(char const*)>
c00168e8:	83 c4 10             	add    esp,0x10
c00168eb:	ba 44 af 02 c0       	mov    edx,0xc002af44
c00168f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f4:	89 10                	mov    DWORD PTR [eax],edx
c00168f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fa:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016904:	90                   	nop
c0016905:	83 c4 0c             	add    esp,0xc
c0016908:	c3                   	ret    
c0016909:	90                   	nop

c001690a <Timer::~Timer()>:
c001690a:	83 ec 0c             	sub    esp,0xc
c001690d:	ba 44 af 02 c0       	mov    edx,0xc002af44
c0016912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016916:	89 10                	mov    DWORD PTR [eax],edx
c0016918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	50                   	push   eax
c0016920:	e8 8f d5 ff ff       	call   c0013eb4 <Device::~Device()>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	90                   	nop
c0016929:	83 c4 0c             	add    esp,0xc
c001692c:	c3                   	ret    
c001692d:	90                   	nop

c001692e <Timer::~Timer()>:
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	83 ec 0c             	sub    esp,0xc
c0016934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016938:	e8 cd ff ff ff       	call   c001690a <Timer::~Timer()>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	83 ec 08             	sub    esp,0x8
c0016943:	68 5c 01 00 00       	push   0x15c
c0016948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694c:	e8 8b c1 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	83 c4 0c             	add    esp,0xc
c0016957:	c3                   	ret    

c0016958 <Timer::read()>:
c0016958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001695c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016962:	c3                   	ret    

c0016963 <timerHandler(unsigned long long)>:
c0016963:	55                   	push   ebp
c0016964:	57                   	push   edi
c0016965:	56                   	push   esi
c0016966:	53                   	push   ebx
c0016967:	83 ec 0c             	sub    esp,0xc
c001696a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001696e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016972:	01 35 50 e7 02 c0    	add    DWORD PTR ds:0xc002e750,esi
c0016978:	11 3d 54 e7 02 c0    	adc    DWORD PTR ds:0xc002e754,edi
c001697e:	80 3d cd e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cd,0x0
c0016985:	0f 84 07 01 00 00    	je     c0016a92 <timerHandler(unsigned long long)+0x12f>
c001698b:	e8 f3 70 00 00       	call   c001da83 <lockStuff()>
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	68 1c 16 03 c0       	push   0xc003161c
c0016998:	e8 11 1d 01 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001699d:	c7 04 24 1c 16 03 c0 	mov    DWORD PTR [esp],0xc003161c
c00169a4:	89 c3                	mov    ebx,eax
c00169a6:	e8 0b 1d 01 00       	call   c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	84 c0                	test   al,al
c00169b0:	74 60                	je     c0016a12 <timerHandler(unsigned long long)+0xaf>
c00169b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00169b8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00169bb:	85 c0                	test   eax,eax
c00169bd:	0f 85 91 00 00 00    	jne    c0016a54 <timerHandler(unsigned long long)+0xf1>
c00169c3:	e9 be 00 00 00       	jmp    c0016a86 <timerHandler(unsigned long long)+0x123>
c00169c8:	83 ec 0c             	sub    esp,0xc
c00169cb:	55                   	push   ebp
c00169cc:	e8 a3 76 00 00       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	39 eb                	cmp    ebx,ebp
c00169d6:	75 12                	jne    c00169ea <timerHandler(unsigned long long)+0x87>
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	68 1c 16 03 c0       	push   0xc003161c
c00169e0:	e8 c9 1c 01 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169e5:	89 c3                	mov    ebx,eax
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	83 ec 0c             	sub    esp,0xc
c00169ed:	68 1c 16 03 c0       	push   0xc003161c
c00169f2:	e8 bf 1c 01 00       	call   c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169f7:	83 c4 10             	add    esp,0x10
c00169fa:	84 c0                	test   al,al
c00169fc:	75 b4                	jne    c00169b2 <timerHandler(unsigned long long)+0x4f>
c00169fe:	83 ec 0c             	sub    esp,0xc
c0016a01:	68 1c 16 03 c0       	push   0xc003161c
c0016a06:	e8 a3 1c 01 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a0b:	83 c4 10             	add    esp,0x10
c0016a0e:	39 d8                	cmp    eax,ebx
c0016a10:	74 a0                	je     c00169b2 <timerHandler(unsigned long long)+0x4f>
c0016a12:	83 ec 0c             	sub    esp,0xc
c0016a15:	68 1c 16 03 c0       	push   0xc003161c
c0016a1a:	e8 8f 1c 01 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a1f:	c7 04 24 1c 16 03 c0 	mov    DWORD PTR [esp],0xc003161c
c0016a26:	89 c5                	mov    ebp,eax
c0016a28:	e8 a5 1c 01 00       	call   c00286d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a2d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016a30:	83 c4 10             	add    esp,0x10
c0016a33:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016a36:	39 15 50 e7 02 c0    	cmp    DWORD PTR ds:0xc002e750,edx
c0016a3c:	a1 54 e7 02 c0       	mov    eax,ds:0xc002e754
c0016a41:	19 c8                	sbb    eax,ecx
c0016a43:	73 83                	jae    c00169c8 <timerHandler(unsigned long long)+0x65>
c0016a45:	50                   	push   eax
c0016a46:	50                   	push   eax
c0016a47:	55                   	push   ebp
c0016a48:	68 1c 16 03 c0       	push   0xc003161c
c0016a4d:	e8 2e 1d 01 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a52:	eb 93                	jmp    c00169e7 <timerHandler(unsigned long long)+0x84>
c0016a54:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c0016a5b:	74 29                	je     c0016a86 <timerHandler(unsigned long long)+0x123>
c0016a5d:	39 c6                	cmp    esi,eax
c0016a5f:	bb 00 00 00 00       	mov    ebx,0x0
c0016a64:	19 df                	sbb    edi,ebx
c0016a66:	72 19                	jb     c0016a81 <timerHandler(unsigned long long)+0x11e>
c0016a68:	e8 ef 6f 00 00       	call   c001da5c <lockScheduler()>
c0016a6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a72:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a75:	e8 1e 73 00 00       	call   c001dd98 <schedule()>
c0016a7a:	e8 df 6f 00 00       	call   c001da5e <unlockScheduler()>
c0016a7f:	eb 05                	jmp    c0016a86 <timerHandler(unsigned long long)+0x123>
c0016a81:	29 f0                	sub    eax,esi
c0016a83:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016a86:	83 c4 0c             	add    esp,0xc
c0016a89:	5b                   	pop    ebx
c0016a8a:	5e                   	pop    esi
c0016a8b:	5f                   	pop    edi
c0016a8c:	5d                   	pop    ebp
c0016a8d:	e9 8b 73 00 00       	jmp    c001de1d <unlockStuff()>
c0016a92:	83 c4 0c             	add    esp,0xc
c0016a95:	5b                   	pop    ebx
c0016a96:	5e                   	pop    esi
c0016a97:	5f                   	pop    edi
c0016a98:	5d                   	pop    ebp
c0016a99:	c3                   	ret    

c0016a9a <setupTimer(int)>:
c0016a9a:	57                   	push   edi
c0016a9b:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0016aa0:	56                   	push   esi
c0016aa1:	53                   	push   ebx
c0016aa2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016aa6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ab5:	e8 14 d8 ff ff       	call   c00142ce <Device::getName()>
c0016aba:	83 c4 10             	add    esp,0x10
c0016abd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ac0:	0f 85 8d 00 00 00    	jne    c0016b53 <setupTimer(int)+0xb9>
c0016ac6:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0016acb:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ad2:	74 7f                	je     c0016b53 <setupTimer(int)+0xb9>
c0016ad4:	83 ec 0c             	sub    esp,0xc
c0016ad7:	68 5c 01 00 00       	push   0x15c
c0016adc:	e8 5f 8d ff ff       	call   c000f840 <malloc>
c0016ae1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ae4:	89 c3                	mov    ebx,eax
c0016ae6:	e8 2b f7 00 00       	call   c0026216 <PIT::PIT()>
c0016aeb:	59                   	pop    ecx
c0016aec:	5f                   	pop    edi
c0016aed:	53                   	push   ebx
c0016aee:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c0016af4:	e8 e9 d4 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c0016af9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016afb:	6a 00                	push   0x0
c0016afd:	6a 00                	push   0x0
c0016aff:	56                   	push   esi
c0016b00:	53                   	push   ebx
c0016b01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b04:	83 c4 14             	add    esp,0x14
c0016b07:	68 60 01 00 00       	push   0x160
c0016b0c:	e8 2f 8d ff ff       	call   c000f840 <malloc>
c0016b11:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b14:	89 c7                	mov    edi,eax
c0016b16:	e8 ab f5 00 00       	call   c00260c6 <APICTimer::APICTimer()>
c0016b1b:	6a 00                	push   0x0
c0016b1d:	6a 00                	push   0x0
c0016b1f:	56                   	push   esi
c0016b20:	57                   	push   edi
c0016b21:	e8 a2 f4 00 00       	call   c0025fc8 <APICTimer::open(int, int, void*)>
c0016b26:	83 c4 20             	add    esp,0x20
c0016b29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b2b:	6a 00                	push   0x0
c0016b2d:	6a 00                	push   0x0
c0016b2f:	6a 00                	push   0x0
c0016b31:	53                   	push   ebx
c0016b32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b35:	58                   	pop    eax
c0016b36:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0016b3b:	5a                   	pop    edx
c0016b3c:	57                   	push   edi
c0016b3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b43:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b49:	e8 94 d4 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	eb 33                	jmp    c0016b86 <setupTimer(int)+0xec>
c0016b53:	83 ec 0c             	sub    esp,0xc
c0016b56:	68 5c 01 00 00       	push   0x15c
c0016b5b:	e8 e0 8c ff ff       	call   c000f840 <malloc>
c0016b60:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b63:	89 c3                	mov    ebx,eax
c0016b65:	e8 ac f6 00 00       	call   c0026216 <PIT::PIT()>
c0016b6a:	58                   	pop    eax
c0016b6b:	5a                   	pop    edx
c0016b6c:	53                   	push   ebx
c0016b6d:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c0016b73:	e8 6a d4 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c0016b78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b7a:	6a 00                	push   0x0
c0016b7c:	6a 00                	push   0x0
c0016b7e:	56                   	push   esi
c0016b7f:	53                   	push   ebx
c0016b80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b83:	83 c4 20             	add    esp,0x20
c0016b86:	89 d8                	mov    eax,ebx
c0016b88:	5b                   	pop    ebx
c0016b89:	5e                   	pop    esi
c0016b8a:	5f                   	pop    edi
c0016b8b:	c3                   	ret    

c0016b8c <VCache::VCache(PhysicalDisk*)>:
c0016b8c:	53                   	push   ebx
c0016b8d:	83 ec 18             	sub    esp,0x18
c0016b90:	ba 74 af 02 c0       	mov    edx,0xc002af74
c0016b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b99:	89 10                	mov    DWORD PTR [eax],edx
c0016b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016baa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016bbc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016bce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016bf3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bfe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c06:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c16:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c1d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016c25:	83 ec 0c             	sub    esp,0xc
c0016c28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c2c:	e8 0f 8c ff ff       	call   c000f840 <malloc>
c0016c31:	83 c4 10             	add    esp,0x10
c0016c34:	89 c3                	mov    ebx,eax
c0016c36:	83 ec 0c             	sub    esp,0xc
c0016c39:	53                   	push   ebx
c0016c3a:	e8 3d 6f 00 00       	call   c001db7c <Mutex::Mutex()>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c46:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c58:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c63:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c74:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c84:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c87:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c8e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c9c:	05 00 01 00 00       	add    eax,0x100
c0016ca1:	c1 e0 04             	shl    eax,0x4
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	50                   	push   eax
c0016ca8:	e8 93 8b ff ff       	call   c000f840 <malloc>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	89 c2                	mov    edx,eax
c0016cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ccc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cd0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cd6:	c1 e0 07             	shl    eax,0x7
c0016cd9:	83 ec 0c             	sub    esp,0xc
c0016cdc:	50                   	push   eax
c0016cdd:	e8 5e 8b ff ff       	call   c000f840 <malloc>
c0016ce2:	83 c4 10             	add    esp,0x10
c0016ce5:	89 c2                	mov    edx,eax
c0016ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ceb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016cee:	90                   	nop
c0016cef:	83 c4 18             	add    esp,0x18
c0016cf2:	5b                   	pop    ebx
c0016cf3:	c3                   	ret    

c0016cf4 <VCache::invalidateReadBuffer()>:
c0016cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cf8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016cfe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016d02:	c3                   	ret    
c0016d03:	90                   	nop

c0016d04 <VCache::writeWriteBuffer()>:
c0016d04:	53                   	push   ebx
c0016d05:	83 ec 14             	sub    esp,0x14
c0016d08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016d0c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d11:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d14:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d17:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016d1a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016d1d:	50                   	push   eax
c0016d1e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d21:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016d28:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016d2f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016d33:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016d3a:	83 c4 28             	add    esp,0x28
c0016d3d:	5b                   	pop    ebx
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <VCache::~VCache()>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	ba 74 af 02 c0       	mov    edx,0xc002af74
c0016d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4c:	89 10                	mov    DWORD PTR [eax],edx
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d55:	84 c0                	test   al,al
c0016d57:	74 0f                	je     c0016d68 <VCache::~VCache()+0x28>
c0016d59:	83 ec 0c             	sub    esp,0xc
c0016d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d60:	e8 9f ff ff ff       	call   c0016d04 <VCache::writeWriteBuffer()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d6f:	83 ec 0c             	sub    esp,0xc
c0016d72:	50                   	push   eax
c0016d73:	e8 d8 8a ff ff       	call   c000f850 <free>
c0016d78:	83 c4 10             	add    esp,0x10
c0016d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	50                   	push   eax
c0016d86:	e8 c5 8a ff ff       	call   c000f850 <free>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	90                   	nop
c0016d8f:	83 c4 0c             	add    esp,0xc
c0016d92:	c3                   	ret    
c0016d93:	90                   	nop

c0016d94 <VCache::~VCache()>:
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	83 ec 0c             	sub    esp,0xc
c0016d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9e:	e8 9d ff ff ff       	call   c0016d40 <VCache::~VCache()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	83 ec 08             	sub    esp,0x8
c0016da9:	6a 44                	push   0x44
c0016dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016daf:	e8 28 bd ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0016db4:	83 c4 10             	add    esp,0x10
c0016db7:	83 c4 0c             	add    esp,0xc
c0016dba:	c3                   	ret    
c0016dbb:	90                   	nop

c0016dbc <VCache::write(unsigned long long, int, void*)>:
c0016dbc:	55                   	push   ebp
c0016dbd:	57                   	push   edi
c0016dbe:	56                   	push   esi
c0016dbf:	53                   	push   ebx
c0016dc0:	83 ec 28             	sub    esp,0x28
c0016dc3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016dc7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016dcb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dcf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016dd3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dd6:	e8 03 72 00 00       	call   c001dfde <Semaphore::acquire()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016de2:	74 0c                	je     c0016df0 <VCache::write(unsigned long long, int, void*)+0x34>
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	53                   	push   ebx
c0016de8:	e8 07 ff ff ff       	call   c0016cf4 <VCache::invalidateReadBuffer()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016df4:	74 66                	je     c0016e5c <VCache::write(unsigned long long, int, void*)+0xa0>
c0016df6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016df9:	99                   	cdq    
c0016dfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dfe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016e01:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016e04:	89 c1                	mov    ecx,eax
c0016e06:	89 d0                	mov    eax,edx
c0016e08:	31 f1                	xor    ecx,esi
c0016e0a:	31 f8                	xor    eax,edi
c0016e0c:	89 ca                	mov    edx,ecx
c0016e0e:	09 c2                	or     edx,eax
c0016e10:	75 3e                	jne    c0016e50 <VCache::write(unsigned long long, int, void*)+0x94>
c0016e12:	83 fd 01             	cmp    ebp,0x1
c0016e15:	75 39                	jne    c0016e50 <VCache::write(unsigned long long, int, void*)+0x94>
c0016e17:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e1a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e20:	51                   	push   ecx
c0016e21:	50                   	push   eax
c0016e22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016e2a:	0f af c8             	imul   ecx,eax
c0016e2d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016e30:	51                   	push   ecx
c0016e31:	e8 0e 99 fe ff       	call   c0000744 <memcpy>
c0016e36:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e39:	83 c4 10             	add    esp,0x10
c0016e3c:	40                   	inc    eax
c0016e3d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016e40:	83 c0 80             	add    eax,0xffffff80
c0016e43:	75 57                	jne    c0016e9c <VCache::write(unsigned long long, int, void*)+0xe0>
c0016e45:	83 ec 0c             	sub    esp,0xc
c0016e48:	53                   	push   ebx
c0016e49:	e8 b6 fe ff ff       	call   c0016d04 <VCache::writeWriteBuffer()>
c0016e4e:	eb 34                	jmp    c0016e84 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	53                   	push   ebx
c0016e54:	e8 ab fe ff ff       	call   c0016d04 <VCache::writeWriteBuffer()>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e5f:	83 fd 7f             	cmp    ebp,0x7f
c0016e62:	7f 25                	jg     c0016e89 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016e64:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e67:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e6a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e6d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e71:	52                   	push   edx
c0016e72:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016e78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e7c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016e7f:	e8 c0 98 fe ff       	call   c0000744 <memcpy>
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	eb 13                	jmp    c0016e9c <VCache::write(unsigned long long, int, void*)+0xe0>
c0016e89:	83 ec 0c             	sub    esp,0xc
c0016e8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e92:	55                   	push   ebp
c0016e93:	57                   	push   edi
c0016e94:	56                   	push   esi
c0016e95:	50                   	push   eax
c0016e96:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e99:	83 c4 20             	add    esp,0x20
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ea2:	e8 e5 76 00 00       	call   c001e58c <Semaphore::release()>
c0016ea7:	83 c4 2c             	add    esp,0x2c
c0016eaa:	31 c0                	xor    eax,eax
c0016eac:	5b                   	pop    ebx
c0016ead:	5e                   	pop    esi
c0016eae:	5f                   	pop    edi
c0016eaf:	5d                   	pop    ebp
c0016eb0:	c3                   	ret    
c0016eb1:	90                   	nop

c0016eb2 <VCache::read(unsigned long long, int, void*)>:
c0016eb2:	55                   	push   ebp
c0016eb3:	57                   	push   edi
c0016eb4:	56                   	push   esi
c0016eb5:	53                   	push   ebx
c0016eb6:	83 ec 28             	sub    esp,0x28
c0016eb9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ebd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ec1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ecd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016ed1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016ed5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ed8:	e8 01 71 00 00       	call   c001dfde <Semaphore::acquire()>
c0016edd:	83 c4 10             	add    esp,0x10
c0016ee0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ee4:	74 0c                	je     c0016ef2 <VCache::read(unsigned long long, int, void*)+0x40>
c0016ee6:	83 ec 0c             	sub    esp,0xc
c0016ee9:	53                   	push   ebx
c0016eea:	e8 15 fe ff ff       	call   c0016d04 <VCache::writeWriteBuffer()>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	83 fe 01             	cmp    esi,0x1
c0016ef5:	0f 85 80 00 00 00    	jne    c0016f7b <VCache::read(unsigned long long, int, void*)+0xc9>
c0016efb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016efe:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016f05:	75 74                	jne    c0016f7b <VCache::read(unsigned long long, int, void*)+0xc9>
c0016f07:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f0a:	89 d1                	mov    ecx,edx
c0016f0c:	f7 d9                	neg    ecx
c0016f0e:	89 cf                	mov    edi,ecx
c0016f10:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f14:	c1 ff 1f             	sar    edi,0x1f
c0016f17:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016f1a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f1e:	89 ce                	mov    esi,ecx
c0016f20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f24:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f28:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f2c:	89 cf                	mov    edi,ecx
c0016f2e:	74 0a                	je     c0016f3a <VCache::read(unsigned long long, int, void*)+0x88>
c0016f30:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f33:	75 05                	jne    c0016f3a <VCache::read(unsigned long long, int, void*)+0x88>
c0016f35:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f38:	74 1c                	je     c0016f56 <VCache::read(unsigned long long, int, void*)+0xa4>
c0016f3a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f3e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016f41:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016f44:	83 ec 0c             	sub    esp,0xc
c0016f47:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f49:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f4c:	52                   	push   edx
c0016f4d:	57                   	push   edi
c0016f4e:	56                   	push   esi
c0016f4f:	50                   	push   eax
c0016f50:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f53:	83 c4 20             	add    esp,0x20
c0016f56:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f59:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f5f:	50                   	push   eax
c0016f60:	52                   	push   edx
c0016f61:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f64:	48                   	dec    eax
c0016f65:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016f69:	0f af c2             	imul   eax,edx
c0016f6c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016f6f:	50                   	push   eax
c0016f70:	55                   	push   ebp
c0016f71:	e8 ce 97 fe ff       	call   c0000744 <memcpy>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	eb 21                	jmp    c0016f9c <VCache::read(unsigned long long, int, void*)+0xea>
c0016f7b:	83 ec 0c             	sub    esp,0xc
c0016f7e:	53                   	push   ebx
c0016f7f:	e8 70 fd ff ff       	call   c0016cf4 <VCache::invalidateReadBuffer()>
c0016f84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f87:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f8c:	56                   	push   esi
c0016f8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f95:	50                   	push   eax
c0016f96:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f99:	83 c4 20             	add    esp,0x20
c0016f9c:	83 ec 0c             	sub    esp,0xc
c0016f9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fa2:	e8 e5 75 00 00       	call   c001e58c <Semaphore::release()>
c0016fa7:	83 c4 2c             	add    esp,0x2c
c0016faa:	31 c0                	xor    eax,eax
c0016fac:	5b                   	pop    ebx
c0016fad:	5e                   	pop    esi
c0016fae:	5f                   	pop    edi
c0016faf:	5d                   	pop    ebp
c0016fb0:	c3                   	ret    
c0016fb1:	90                   	nop

c0016fb2 <Video::putrect(int, int, int, int, unsigned int)>:
c0016fb2:	55                   	push   ebp
c0016fb3:	57                   	push   edi
c0016fb4:	56                   	push   esi
c0016fb5:	53                   	push   ebx
c0016fb6:	83 ec 1c             	sub    esp,0x1c
c0016fb9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fc1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016fc5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016fc9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd1:	01 df                	add    edi,ebx
c0016fd3:	39 fb                	cmp    ebx,edi
c0016fd5:	7d 1f                	jge    c0016ff6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016fd7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fdb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016fdf:	7d 12                	jge    c0016ff3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016fe1:	8b 16                	mov    edx,DWORD PTR [esi]
c0016fe3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016fe7:	53                   	push   ebx
c0016fe8:	55                   	push   ebp
c0016fe9:	45                   	inc    ebp
c0016fea:	56                   	push   esi
c0016feb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	eb e8                	jmp    c0016fdb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ff3:	43                   	inc    ebx
c0016ff4:	eb dd                	jmp    c0016fd3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ff6:	83 c4 1c             	add    esp,0x1c
c0016ff9:	5b                   	pop    ebx
c0016ffa:	5e                   	pop    esi
c0016ffb:	5f                   	pop    edi
c0016ffc:	5d                   	pop    ebp
c0016ffd:	c3                   	ret    

c0016ffe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ffe:	55                   	push   ebp
c0016fff:	57                   	push   edi
c0017000:	31 ff                	xor    edi,edi
c0017002:	56                   	push   esi
c0017003:	53                   	push   ebx
c0017004:	83 ec 1c             	sub    esp,0x1c
c0017007:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001700b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001700f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017016:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001701b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001701f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017023:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017027:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001702a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001702e:	01 f9                	add    ecx,edi
c0017030:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017034:	7d 2f                	jge    c0017065 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017036:	31 f6                	xor    esi,esi
c0017038:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001703c:	01 f2                	add    edx,esi
c001703e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017042:	7d 1a                	jge    c001705e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017044:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017047:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001704a:	46                   	inc    esi
c001704b:	51                   	push   ecx
c001704c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017050:	52                   	push   edx
c0017051:	55                   	push   ebp
c0017052:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001705c:	eb da                	jmp    c0017038 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001705e:	47                   	inc    edi
c001705f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017063:	eb c5                	jmp    c001702a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017065:	83 c4 1c             	add    esp,0x1c
c0017068:	5b                   	pop    ebx
c0017069:	5e                   	pop    esi
c001706a:	5f                   	pop    edi
c001706b:	5d                   	pop    ebp
c001706c:	c3                   	ret    
c001706d:	90                   	nop

c001706e <Video::blit(unsigned int*, int, int, int, int)>:
c001706e:	55                   	push   ebp
c001706f:	57                   	push   edi
c0017070:	56                   	push   esi
c0017071:	53                   	push   ebx
c0017072:	83 ec 1c             	sub    esp,0x1c
c0017075:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017079:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001707d:	85 c0                	test   eax,eax
c001707f:	79 02                	jns    c0017083 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017081:	31 c0                	xor    eax,eax
c0017083:	c1 e0 02             	shl    eax,0x2
c0017086:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001708a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001708e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017092:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017096:	39 d8                	cmp    eax,ebx
c0017098:	7e 49                	jle    c00170e3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001709a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170a0:	7c 41                	jl     c00170e3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00170a2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00170a6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170ae:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00170b2:	39 f9                	cmp    ecx,edi
c00170b4:	7e 22                	jle    c00170d8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00170b6:	83 c5 04             	add    ebp,0x4
c00170b9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170bf:	7c 14                	jl     c00170d5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00170c1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170c3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00170c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170ce:	56                   	push   esi
c00170cf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	47                   	inc    edi
c00170d6:	eb d2                	jmp    c00170aa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00170d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170dc:	43                   	inc    ebx
c00170dd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00170e1:	eb ab                	jmp    c001708e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00170e3:	83 c4 1c             	add    esp,0x1c
c00170e6:	5b                   	pop    ebx
c00170e7:	5e                   	pop    esi
c00170e8:	5f                   	pop    edi
c00170e9:	5d                   	pop    ebp
c00170ea:	c3                   	ret    
c00170eb:	90                   	nop

c00170ec <Video::clearScreen(unsigned int)>:
c00170ec:	57                   	push   edi
c00170ed:	56                   	push   esi
c00170ee:	53                   	push   ebx
c00170ef:	31 db                	xor    ebx,ebx
c00170f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170f5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170fb:	7e 1f                	jle    c001711c <Video::clearScreen(unsigned int)+0x30>
c00170fd:	31 ff                	xor    edi,edi
c00170ff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017105:	7e 12                	jle    c0017119 <Video::clearScreen(unsigned int)+0x2d>
c0017107:	8b 06                	mov    eax,DWORD PTR [esi]
c0017109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001710d:	53                   	push   ebx
c001710e:	57                   	push   edi
c001710f:	47                   	inc    edi
c0017110:	56                   	push   esi
c0017111:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017114:	83 c4 10             	add    esp,0x10
c0017117:	eb e6                	jmp    c00170ff <Video::clearScreen(unsigned int)+0x13>
c0017119:	43                   	inc    ebx
c001711a:	eb d9                	jmp    c00170f5 <Video::clearScreen(unsigned int)+0x9>
c001711c:	5b                   	pop    ebx
c001711d:	5e                   	pop    esi
c001711e:	5f                   	pop    edi
c001711f:	c3                   	ret    

c0017120 <Video::putpixel(int, int, unsigned int)>:
c0017120:	c7 44 24 04 7c af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002af7c
c0017128:	e9 0a 31 00 00       	jmp    c001a237 <Krnl::panic(char const*)>
c001712d:	90                   	nop

c001712e <Video::Video(char const*)>:
c001712e:	83 ec 0c             	sub    esp,0xc
c0017131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017135:	83 ec 08             	sub    esp,0x8
c0017138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001713c:	50                   	push   eax
c001713d:	e8 90 d0 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0017142:	83 c4 10             	add    esp,0x10
c0017145:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c001714a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001714e:	89 10                	mov    DWORD PTR [eax],edx
c0017150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017154:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001715e:	90                   	nop
c001715f:	83 c4 0c             	add    esp,0xc
c0017162:	c3                   	ret    
c0017163:	90                   	nop

c0017164 <Video::~Video()>:
c0017164:	83 ec 0c             	sub    esp,0xc
c0017167:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c001716c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017170:	89 10                	mov    DWORD PTR [eax],edx
c0017172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017176:	83 ec 0c             	sub    esp,0xc
c0017179:	50                   	push   eax
c001717a:	e8 35 cd ff ff       	call   c0013eb4 <Device::~Device()>
c001717f:	83 c4 10             	add    esp,0x10
c0017182:	90                   	nop
c0017183:	83 c4 0c             	add    esp,0xc
c0017186:	c3                   	ret    
c0017187:	90                   	nop

c0017188 <Video::~Video()>:
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	83 ec 0c             	sub    esp,0xc
c001718e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017192:	e8 cd ff ff ff       	call   c0017164 <Video::~Video()>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	83 ec 08             	sub    esp,0x8
c001719d:	68 64 01 00 00       	push   0x164
c00171a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a6:	e8 31 b9 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00171ab:	83 c4 10             	add    esp,0x10
c00171ae:	83 c4 0c             	add    esp,0xc
c00171b1:	c3                   	ret    

c00171b2 <Video::isMonochrome()>:
c00171b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00171bc:	c3                   	ret    
c00171bd:	90                   	nop

c00171be <Video::getWidth()>:
c00171be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00171c8:	c3                   	ret    
c00171c9:	90                   	nop

c00171ca <Video::getHeight()>:
c00171ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171d4:	c3                   	ret    
c00171d5:	90                   	nop

c00171d6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00171d6:	55                   	push   ebp
c00171d7:	57                   	push   edi
c00171d8:	56                   	push   esi
c00171d9:	53                   	push   ebx
c00171da:	83 ec 2c             	sub    esp,0x2c
c00171dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171e5:	83 f8 01             	cmp    eax,0x1
c00171e8:	19 c9                	sbb    ecx,ecx
c00171ea:	31 db                	xor    ebx,ebx
c00171ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00171f0:	89 cd                	mov    ebp,ecx
c00171f2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00171fa:	f7 d5                	not    ebp
c00171fc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017202:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017206:	01 d8                	add    eax,ebx
c0017208:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001720c:	56                   	push   esi
c001720d:	e8 b8 ff ff ff       	call   c00171ca <Video::getHeight()>
c0017212:	59                   	pop    ecx
c0017213:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017217:	7e 70                	jle    c0017289 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017219:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001721d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017221:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017224:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017228:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001722c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017233:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017237:	89 f8                	mov    eax,edi
c0017239:	83 c0 20             	add    eax,0x20
c001723c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017240:	56                   	push   esi
c0017241:	e8 78 ff ff ff       	call   c00171be <Video::getWidth()>
c0017246:	5a                   	pop    edx
c0017247:	39 c7                	cmp    edi,eax
c0017249:	7d 34                	jge    c001727f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001724b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017250:	74 05                	je     c0017257 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017252:	8b 06                	mov    eax,DWORD PTR [esi]
c0017254:	55                   	push   ebp
c0017255:	eb 0d                	jmp    c0017264 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017257:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001725c:	74 12                	je     c0017270 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001725e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017264:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017268:	57                   	push   edi
c0017269:	56                   	push   esi
c001726a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001726d:	83 c4 10             	add    esp,0x10
c0017270:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017274:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017278:	47                   	inc    edi
c0017279:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001727d:	75 c1                	jne    c0017240 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001727f:	43                   	inc    ebx
c0017280:	83 fb 20             	cmp    ebx,0x20
c0017283:	0f 85 79 ff ff ff    	jne    c0017202 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017289:	83 c4 2c             	add    esp,0x2c
c001728c:	5b                   	pop    ebx
c001728d:	5e                   	pop    esi
c001728e:	5f                   	pop    edi
c001728f:	5d                   	pop    ebp
c0017290:	c3                   	ret    
c0017291:	90                   	nop

c0017292 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017292:	55                   	push   ebp
c0017293:	57                   	push   edi
c0017294:	56                   	push   esi
c0017295:	53                   	push   ebx
c0017296:	83 ec 28             	sub    esp,0x28
c0017299:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001729d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00172a1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00172a5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00172a9:	c1 e7 08             	shl    edi,0x8
c00172ac:	01 c7                	add    edi,eax
c00172ae:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00172b2:	c1 e0 08             	shl    eax,0x8
c00172b5:	01 d0                	add    eax,edx
c00172b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172bf:	0f af c7             	imul   eax,edi
c00172c2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00172c9:	50                   	push   eax
c00172ca:	e8 71 85 ff ff       	call   c000f840 <malloc>
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	89 c5                	mov    ebp,eax
c00172d4:	85 c0                	test   eax,eax
c00172d6:	75 15                	jne    c00172ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	68 9d af 02 c0       	push   0xc002af9d
c00172e0:	e8 d7 b8 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00172e5:	83 c4 10             	add    esp,0x10
c00172e8:	e9 1c 01 00 00       	jmp    c0017409 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172ed:	be 12 00 00 00       	mov    esi,0x12
c00172f2:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00172f6:	74 11                	je     c0017309 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00172f8:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00172fc:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017300:	c1 fe 03             	sar    esi,0x3
c0017303:	0f af f0             	imul   esi,eax
c0017306:	83 c6 12             	add    esi,0x12
c0017309:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001730d:	74 04                	je     c0017313 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001730f:	85 ff                	test   edi,edi
c0017311:	75 12                	jne    c0017325 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017313:	83 ec 0c             	sub    esp,0xc
c0017316:	68 b4 af 02 c0       	push   0xc002afb4
c001731b:	e8 9c b8 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0017320:	e9 ce 00 00 00       	jmp    c00173f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017325:	52                   	push   edx
c0017326:	52                   	push   edx
c0017327:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001732b:	50                   	push   eax
c001732c:	68 c9 af 02 c0       	push   0xc002afc9
c0017331:	e8 86 b8 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0017336:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	80 fa 02             	cmp    dl,0x2
c0017340:	0f 85 98 00 00 00    	jne    c00173de <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017346:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001734b:	75 10                	jne    c001735d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001734d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017351:	75 0a                	jne    c001735d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017353:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017356:	83 e8 18             	sub    eax,0x18
c0017359:	a8 f7                	test   al,0xf7
c001735b:	74 0a                	je     c0017367 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001735d:	83 ec 0c             	sub    esp,0xc
c0017360:	68 d6 af 02 c0       	push   0xc002afd6
c0017365:	eb 7f                	jmp    c00173e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017367:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001736f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017377:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001737b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017383:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017387:	75 0c                	jne    c0017395 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017389:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001738e:	c1 e0 18             	shl    eax,0x18
c0017391:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017395:	41                   	inc    ecx
c0017396:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001739b:	c1 e2 10             	shl    edx,0x10
c001739e:	89 d0                	mov    eax,edx
c00173a0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00173a5:	c1 e2 08             	shl    edx,0x8
c00173a8:	09 c2                	or     edx,eax
c00173aa:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00173ae:	09 c2                	or     edx,eax
c00173b0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00173b4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00173b8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00173bc:	c1 f8 03             	sar    eax,0x3
c00173bf:	01 c6                	add    esi,eax
c00173c1:	89 c8                	mov    eax,ecx
c00173c3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00173c7:	39 c7                	cmp    edi,eax
c00173c9:	7f b0                	jg     c001737b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00173cb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173d3:	39 14 24             	cmp    DWORD PTR [esp],edx
c00173d6:	7e 22                	jle    c00173fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00173d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00173dc:	eb 99                	jmp    c0017377 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00173de:	50                   	push   eax
c00173df:	50                   	push   eax
c00173e0:	52                   	push   edx
c00173e1:	68 e4 af 02 c0       	push   0xc002afe4
c00173e6:	e8 d1 b7 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00173eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173ee:	e8 5d 84 ff ff       	call   c000f850 <free>
c00173f3:	83 c4 10             	add    esp,0x10
c00173f6:	31 ed                	xor    ebp,ebp
c00173f8:	eb 0f                	jmp    c0017409 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00173fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173fe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017401:	89 38                	mov    DWORD PTR [eax],edi
c0017403:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017407:	89 08                	mov    DWORD PTR [eax],ecx
c0017409:	83 c4 1c             	add    esp,0x1c
c001740c:	89 e8                	mov    eax,ebp
c001740e:	5b                   	pop    ebx
c001740f:	5e                   	pop    esi
c0017410:	5f                   	pop    edi
c0017411:	5d                   	pop    ebp
c0017412:	c3                   	ret    
c0017413:	90                   	nop

c0017414 <Video::putTGA(int, int, unsigned char*, int)>:
c0017414:	55                   	push   ebp
c0017415:	57                   	push   edi
c0017416:	56                   	push   esi
c0017417:	53                   	push   ebx
c0017418:	83 ec 28             	sub    esp,0x28
c001741b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001741f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017423:	50                   	push   eax
c0017424:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017428:	50                   	push   eax
c0017429:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001742d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017431:	56                   	push   esi
c0017432:	e8 5b fe ff ff       	call   c0017292 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017437:	83 c4 20             	add    esp,0x20
c001743a:	85 c0                	test   eax,eax
c001743c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017440:	74 35                	je     c0017477 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017442:	89 c7                	mov    edi,eax
c0017444:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017448:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001744c:	39 d8                	cmp    eax,ebx
c001744e:	7e 27                	jle    c0017477 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017450:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017454:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017458:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001745c:	39 e8                	cmp    eax,ebp
c001745e:	7e 14                	jle    c0017474 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017460:	8b 06                	mov    eax,DWORD PTR [esi]
c0017462:	83 c7 04             	add    edi,0x4
c0017465:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017468:	53                   	push   ebx
c0017469:	55                   	push   ebp
c001746a:	45                   	inc    ebp
c001746b:	56                   	push   esi
c001746c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001746f:	83 c4 10             	add    esp,0x10
c0017472:	eb e0                	jmp    c0017454 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017474:	43                   	inc    ebx
c0017475:	eb cd                	jmp    c0017444 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017477:	83 c4 1c             	add    esp,0x1c
c001747a:	5b                   	pop    ebx
c001747b:	5e                   	pop    esi
c001747c:	5f                   	pop    edi
c001747d:	5d                   	pop    ebp
c001747e:	c3                   	ret    
c001747f:	90                   	nop

c0017480 <ACPI::close(int, int, void*)>:
c0017480:	83 ec 1c             	sub    esp,0x1c
c0017483:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001748b:	74 0a                	je     c0017497 <ACPI::close(int, int, void*)+0x17>
c001748d:	b8 00 00 00 00       	mov    eax,0x0
c0017492:	e9 9a 00 00 00       	jmp    c0017531 <ACPI::close(int, int, void*)+0xb1>
c0017497:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001749c:	75 37                	jne    c00174d5 <ACPI::close(int, int, void*)+0x55>
c001749e:	83 ec 0c             	sub    esp,0xc
c00174a1:	68 40 b0 02 c0       	push   0xc002b040
c00174a6:	e8 11 b7 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	a1 88 07 03 c0       	mov    eax,ds:0xc0030788
c00174b3:	85 c0                	test   eax,eax
c00174b5:	74 07                	je     c00174be <ACPI::close(int, int, void*)+0x3e>
c00174b7:	a1 88 07 03 c0       	mov    eax,ds:0xc0030788
c00174bc:	ff d0                	call   eax
c00174be:	83 ec 0c             	sub    esp,0xc
c00174c1:	68 64 b1 02 c0       	push   0xc002b164
c00174c6:	e8 6c 2d 00 00       	call   c001a237 <Krnl::panic(char const*)>
c00174cb:	83 c4 10             	add    esp,0x10
c00174ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174d3:	eb 5c                	jmp    c0017531 <ACPI::close(int, int, void*)+0xb1>
c00174d5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174da:	75 50                	jne    c001752c <ACPI::close(int, int, void*)+0xac>
c00174dc:	a1 84 07 03 c0       	mov    eax,ds:0xc0030784
c00174e1:	85 c0                	test   eax,eax
c00174e3:	74 07                	je     c00174ec <ACPI::close(int, int, void*)+0x6c>
c00174e5:	a1 84 07 03 c0       	mov    eax,ds:0xc0030784
c00174ea:	ff d0                	call   eax
c00174ec:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00174f1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00174f6:	83 e0 02             	and    eax,0x2
c00174f9:	74 1c                	je     c0017517 <ACPI::close(int, int, void*)+0x97>
c00174fb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017502:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017506:	89 c2                	mov    edx,eax
c0017508:	ec                   	in     al,dx
c0017509:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001750d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017511:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017515:	eb da                	jmp    c00174f1 <ACPI::close(int, int, void*)+0x71>
c0017517:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001751e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017523:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017527:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001752b:	ee                   	out    dx,al
c001752c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017531:	83 c4 1c             	add    esp,0x1c
c0017534:	c3                   	ret    

c0017535 <findRSDP()>:
c0017535:	83 ec 1c             	sub    esp,0x1c
c0017538:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001753d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017543:	83 e0 04             	and    eax,0x4
c0017546:	84 c0                	test   al,al
c0017548:	75 07                	jne    c0017551 <findRSDP()+0x1c>
c001754a:	b8 00 00 00 00       	mov    eax,0x0
c001754f:	eb 6a                	jmp    c00175bb <findRSDP()+0x86>
c0017551:	a1 10 e1 02 c0       	mov    eax,ds:0xc002e110
c0017556:	3d ff 07 00 00       	cmp    eax,0x7ff
c001755b:	7f 1b                	jg     c0017578 <findRSDP()+0x43>
c001755d:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0017562:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017568:	83 e2 fb             	and    edx,0xfffffffb
c001756b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017571:	b8 00 00 00 00       	mov    eax,0x0
c0017576:	eb 43                	jmp    c00175bb <findRSDP()+0x86>
c0017578:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017580:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017588:	77 2c                	ja     c00175b6 <findRSDP()+0x81>
c001758a:	83 ec 04             	sub    esp,0x4
c001758d:	6a 08                	push   0x8
c001758f:	68 4d b0 02 c0       	push   0xc002b04d
c0017594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017598:	e8 a3 90 fe ff       	call   c0000640 <memcmp>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	85 c0                	test   eax,eax
c00175a2:	0f 94 c0             	sete   al
c00175a5:	84 c0                	test   al,al
c00175a7:	74 06                	je     c00175af <findRSDP()+0x7a>
c00175a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ad:	eb 0c                	jmp    c00175bb <findRSDP()+0x86>
c00175af:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00175b4:	eb ca                	jmp    c0017580 <findRSDP()+0x4b>
c00175b6:	b8 00 00 00 00       	mov    eax,0x0
c00175bb:	83 c4 1c             	add    esp,0x1c
c00175be:	c3                   	ret    

c00175bf <loadACPITables(unsigned char*)>:
c00175bf:	56                   	push   esi
c00175c0:	53                   	push   ebx
c00175c1:	83 ec 44             	sub    esp,0x44
c00175c4:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00175c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175cf:	83 e0 04             	and    eax,0x4
c00175d2:	84 c0                	test   al,al
c00175d4:	0f 84 05 02 00 00    	je     c00177df <loadACPITables(unsigned char*)+0x220>
c00175da:	a0 a0 09 03 c0       	mov    al,ds:0xc00309a0
c00175df:	84 c0                	test   al,al
c00175e1:	74 75                	je     c0017658 <loadACPITables(unsigned char*)+0x99>
c00175e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175f2:	83 e8 24             	sub    eax,0x24
c00175f5:	c1 e8 03             	shr    eax,0x3
c00175f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175fc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017604:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017608:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001760c:	0f 8d b2 00 00 00    	jge    c00176c4 <loadACPITables(unsigned char*)+0x105>
c0017612:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017616:	83 c0 24             	add    eax,0x24
c0017619:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001761d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017621:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017625:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017629:	c1 e0 03             	shl    eax,0x3
c001762c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017630:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017634:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017637:	8b 00                	mov    eax,DWORD PTR [eax]
c0017639:	89 c1                	mov    ecx,eax
c001763b:	a1 8c 07 03 c0       	mov    eax,ds:0xc003078c
c0017640:	8d 50 01             	lea    edx,[eax+0x1]
c0017643:	89 15 8c 07 03 c0    	mov    DWORD PTR ds:0xc003078c,edx
c0017649:	89 ca                	mov    edx,ecx
c001764b:	89 14 c5 a4 07 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf85c],edx
c0017652:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017656:	eb ac                	jmp    c0017604 <loadACPITables(unsigned char*)+0x45>
c0017658:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001765c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017667:	83 e8 24             	sub    eax,0x24
c001766a:	c1 e8 02             	shr    eax,0x2
c001766d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017671:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017679:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001767d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017681:	7d 41                	jge    c00176c4 <loadACPITables(unsigned char*)+0x105>
c0017683:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017687:	83 c0 24             	add    eax,0x24
c001768a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017692:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017696:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001769a:	c1 e0 02             	shl    eax,0x2
c001769d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00176a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176a7:	a1 8c 07 03 c0       	mov    eax,ds:0xc003078c
c00176ac:	8d 50 01             	lea    edx,[eax+0x1]
c00176af:	89 15 8c 07 03 c0    	mov    DWORD PTR ds:0xc003078c,edx
c00176b5:	89 ca                	mov    edx,ecx
c00176b7:	89 14 c5 a4 07 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf85c],edx
c00176be:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00176c2:	eb b5                	jmp    c0017679 <loadACPITables(unsigned char*)+0xba>
c00176c4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00176cc:	a1 8c 07 03 c0       	mov    eax,ds:0xc003078c
c00176d1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00176d5:	0f 8d 05 01 00 00    	jge    c00177e0 <loadACPITables(unsigned char*)+0x221>
c00176db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176df:	8b 04 c5 a4 07 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf85c]
c00176e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176f6:	25 ff 0f 00 00       	and    eax,0xfff
c00176fb:	89 c6                	mov    esi,eax
c00176fd:	e8 af a5 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017702:	89 c3                	mov    ebx,eax
c0017704:	83 ec 0c             	sub    esp,0xc
c0017707:	6a 01                	push   0x1
c0017709:	e8 13 a4 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017715:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001771b:	83 ec 0c             	sub    esp,0xc
c001771e:	6a 01                	push   0x1
c0017720:	6a 01                	push   0x1
c0017722:	50                   	push   eax
c0017723:	52                   	push   edx
c0017724:	53                   	push   ebx
c0017725:	e8 b6 ad ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001772a:	83 c4 20             	add    esp,0x20
c001772d:	09 f0                	or     eax,esi
c001772f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017733:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017737:	c1 e0 03             	shl    eax,0x3
c001773a:	05 a0 07 03 c0       	add    eax,0xc00307a0
c001773f:	83 ec 04             	sub    esp,0x4
c0017742:	6a 04                	push   0x4
c0017744:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017748:	50                   	push   eax
c0017749:	e8 f6 8f fe ff       	call   c0000744 <memcpy>
c001774e:	83 c4 10             	add    esp,0x10
c0017751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017755:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017758:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001775c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017760:	05 00 10 00 00       	add    eax,0x1000
c0017765:	c1 e8 0c             	shr    eax,0xc
c0017768:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001776c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017770:	89 04 24             	mov    DWORD PTR [esp],eax
c0017773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017777:	25 ff 0f 00 00       	and    eax,0xfff
c001777c:	89 c6                	mov    esi,eax
c001777e:	e8 2e a5 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017783:	89 c3                	mov    ebx,eax
c0017785:	83 ec 0c             	sub    esp,0xc
c0017788:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001778c:	e8 90 a3 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0017791:	83 c4 10             	add    esp,0x10
c0017794:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017798:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001779e:	83 ec 0c             	sub    esp,0xc
c00177a1:	6a 01                	push   0x1
c00177a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177a7:	50                   	push   eax
c00177a8:	52                   	push   edx
c00177a9:	53                   	push   ebx
c00177aa:	e8 31 ad ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177af:	83 c4 20             	add    esp,0x20
c00177b2:	09 f0                	or     eax,esi
c00177b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	50                   	push   eax
c00177bf:	e8 c1 a6 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00177cf:	89 14 c5 a4 07 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf85c],edx
c00177d6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00177da:	e9 ed fe ff ff       	jmp    c00176cc <loadACPITables(unsigned char*)+0x10d>
c00177df:	90                   	nop
c00177e0:	83 c4 44             	add    esp,0x44
c00177e3:	5b                   	pop    ebx
c00177e4:	5e                   	pop    esi
c00177e5:	c3                   	ret    

c00177e6 <findRSDT(unsigned char*)>:
c00177e6:	56                   	push   esi
c00177e7:	53                   	push   ebx
c00177e8:	83 ec 44             	sub    esp,0x44
c00177eb:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00177f0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177f6:	83 e0 04             	and    eax,0x4
c00177f9:	84 c0                	test   al,al
c00177fb:	75 0a                	jne    c0017807 <findRSDT(unsigned char*)+0x21>
c00177fd:	b8 00 00 00 00       	mov    eax,0x0
c0017802:	e9 f7 00 00 00       	jmp    c00178fe <findRSDT(unsigned char*)+0x118>
c0017807:	83 ec 04             	sub    esp,0x4
c001780a:	6a 24                	push   0x24
c001780c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017810:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017814:	50                   	push   eax
c0017815:	e8 2a 8f fe ff       	call   c0000744 <memcpy>
c001781a:	83 c4 10             	add    esp,0x10
c001781d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017821:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017825:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001782d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017831:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017835:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001783d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017845:	25 ff 0f 00 00       	and    eax,0xfff
c001784a:	89 c6                	mov    esi,eax
c001784c:	e8 60 a4 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017851:	89 c3                	mov    ebx,eax
c0017853:	83 ec 0c             	sub    esp,0xc
c0017856:	6a 02                	push   0x2
c0017858:	e8 c4 a2 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001785d:	83 c4 10             	add    esp,0x10
c0017860:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017864:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001786a:	83 ec 0c             	sub    esp,0xc
c001786d:	6a 01                	push   0x1
c001786f:	6a 02                	push   0x2
c0017871:	50                   	push   eax
c0017872:	52                   	push   edx
c0017873:	53                   	push   ebx
c0017874:	e8 67 ac ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017879:	83 c4 20             	add    esp,0x20
c001787c:	09 f0                	or     eax,esi
c001787e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017882:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017886:	25 ff 0f 00 00       	and    eax,0xfff
c001788b:	89 c6                	mov    esi,eax
c001788d:	e8 1f a4 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017892:	89 c3                	mov    ebx,eax
c0017894:	83 ec 0c             	sub    esp,0xc
c0017897:	6a 02                	push   0x2
c0017899:	e8 83 a2 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00178a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	6a 01                	push   0x1
c00178b0:	6a 02                	push   0x2
c00178b2:	50                   	push   eax
c00178b3:	52                   	push   edx
c00178b4:	53                   	push   ebx
c00178b5:	e8 26 ac ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00178ba:	83 c4 20             	add    esp,0x20
c00178bd:	09 f0                	or     eax,esi
c00178bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178c3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00178c8:	75 11                	jne    c00178db <findRSDT(unsigned char*)+0xf5>
c00178ca:	c6 05 a0 09 03 c0 00 	mov    BYTE PTR ds:0xc00309a0,0x0
c00178d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178d9:	eb 1f                	jmp    c00178fa <findRSDT(unsigned char*)+0x114>
c00178db:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00178e0:	75 11                	jne    c00178f3 <findRSDT(unsigned char*)+0x10d>
c00178e2:	c6 05 a0 09 03 c0 01 	mov    BYTE PTR ds:0xc00309a0,0x1
c00178e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178f1:	eb 07                	jmp    c00178fa <findRSDT(unsigned char*)+0x114>
c00178f3:	b8 00 00 00 00       	mov    eax,0x0
c00178f8:	eb 04                	jmp    c00178fe <findRSDT(unsigned char*)+0x118>
c00178fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178fe:	83 c4 44             	add    esp,0x44
c0017901:	5b                   	pop    ebx
c0017902:	5e                   	pop    esi
c0017903:	c3                   	ret    

c0017904 <findDataTable(unsigned char*, char*)>:
c0017904:	83 ec 1c             	sub    esp,0x1c
c0017907:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001790c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017912:	83 e0 04             	and    eax,0x4
c0017915:	84 c0                	test   al,al
c0017917:	75 07                	jne    c0017920 <findDataTable(unsigned char*, char*)+0x1c>
c0017919:	b8 00 00 00 00       	mov    eax,0x0
c001791e:	eb 7c                	jmp    c001799c <findDataTable(unsigned char*, char*)+0x98>
c0017920:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017928:	a1 8c 07 03 c0       	mov    eax,ds:0xc003078c
c001792d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017931:	7d 3a                	jge    c001796d <findDataTable(unsigned char*, char*)+0x69>
c0017933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017937:	c1 e0 03             	shl    eax,0x3
c001793a:	05 a0 07 03 c0       	add    eax,0xc00307a0
c001793f:	83 ec 04             	sub    esp,0x4
c0017942:	6a 04                	push   0x4
c0017944:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017948:	50                   	push   eax
c0017949:	e8 f2 8c fe ff       	call   c0000640 <memcmp>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	85 c0                	test   eax,eax
c0017953:	0f 94 c0             	sete   al
c0017956:	84 c0                	test   al,al
c0017958:	74 0d                	je     c0017967 <findDataTable(unsigned char*, char*)+0x63>
c001795a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001795e:	8b 04 c5 a4 07 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf85c]
c0017965:	eb 35                	jmp    c001799c <findDataTable(unsigned char*, char*)+0x98>
c0017967:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001796b:	eb bb                	jmp    c0017928 <findDataTable(unsigned char*, char*)+0x24>
c001796d:	a0 a0 09 03 c0       	mov    al,ds:0xc00309a0
c0017972:	84 c0                	test   al,al
c0017974:	74 07                	je     c001797d <findDataTable(unsigned char*, char*)+0x79>
c0017976:	b8 58 00 00 00       	mov    eax,0x58
c001797b:	eb 05                	jmp    c0017982 <findDataTable(unsigned char*, char*)+0x7e>
c001797d:	b8 52 00 00 00       	mov    eax,0x52
c0017982:	83 ec 04             	sub    esp,0x4
c0017985:	50                   	push   eax
c0017986:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001798a:	68 88 b1 02 c0       	push   0xc002b188
c001798f:	e8 28 b2 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0017994:	83 c4 10             	add    esp,0x10
c0017997:	b8 00 00 00 00       	mov    eax,0x0
c001799c:	83 c4 1c             	add    esp,0x1c
c001799f:	c3                   	ret    

c00179a0 <scanMADT()>:
c00179a0:	53                   	push   ebx
c00179a1:	83 ec 38             	sub    esp,0x38
c00179a4:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00179a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179af:	83 e0 04             	and    eax,0x4
c00179b2:	84 c0                	test   al,al
c00179b4:	0f 84 63 04 00 00    	je     c0017e1d <scanMADT()+0x47d>
c00179ba:	e8 76 fb ff ff       	call   c0017535 <findRSDP()>
c00179bf:	a3 ac 09 03 c0       	mov    ds:0xc00309ac,eax
c00179c4:	a1 ac 09 03 c0       	mov    eax,ds:0xc00309ac
c00179c9:	85 c0                	test   eax,eax
c00179cb:	75 19                	jne    c00179e6 <scanMADT()+0x46>
c00179cd:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00179d2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179d8:	83 e2 fb             	and    edx,0xfffffffb
c00179db:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179e1:	e9 3b 04 00 00       	jmp    c0017e21 <scanMADT()+0x481>
c00179e6:	a1 ac 09 03 c0       	mov    eax,ds:0xc00309ac
c00179eb:	83 ec 0c             	sub    esp,0xc
c00179ee:	50                   	push   eax
c00179ef:	e8 f2 fd ff ff       	call   c00177e6 <findRSDT(unsigned char*)>
c00179f4:	83 c4 10             	add    esp,0x10
c00179f7:	a3 a8 09 03 c0       	mov    ds:0xc00309a8,eax
c00179fc:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c0017a01:	85 c0                	test   eax,eax
c0017a03:	75 19                	jne    c0017a1e <scanMADT()+0x7e>
c0017a05:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0017a0a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a10:	83 e2 fb             	and    edx,0xfffffffb
c0017a13:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a19:	e9 03 04 00 00       	jmp    c0017e21 <scanMADT()+0x481>
c0017a1e:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	50                   	push   eax
c0017a27:	e8 93 fb ff ff       	call   c00175bf <loadACPITables(unsigned char*)>
c0017a2c:	83 c4 10             	add    esp,0x10
c0017a2f:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c0017a34:	83 ec 08             	sub    esp,0x8
c0017a37:	68 56 b0 02 c0       	push   0xc002b056
c0017a3c:	50                   	push   eax
c0017a3d:	e8 c2 fe ff ff       	call   c0017904 <findDataTable(unsigned char*, char*)>
c0017a42:	83 c4 10             	add    esp,0x10
c0017a45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a49:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a4e:	75 19                	jne    c0017a69 <scanMADT()+0xc9>
c0017a50:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0017a55:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a5b:	83 e2 fe             	and    edx,0xfffffffe
c0017a5e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a64:	e9 b8 03 00 00       	jmp    c0017e21 <scanMADT()+0x481>
c0017a69:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a78:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a7c:	0f 87 9f 03 00 00    	ja     c0017e21 <scanMADT()+0x481>
c0017a82:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a8a:	0f 87 91 03 00 00    	ja     c0017e21 <scanMADT()+0x481>
c0017a90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aa3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aa7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017aab:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017aaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab3:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017abe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ac2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ac6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017acb:	0f 86 4f 03 00 00    	jbe    c0017e20 <scanMADT()+0x480>
c0017ad1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ad6:	75 57                	jne    c0017b2f <scanMADT()+0x18f>
c0017ad8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017adc:	8d 50 01             	lea    edx,[eax+0x1]
c0017adf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ae3:	8a 15 a0 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030ba0
c0017ae9:	0f b6 d2             	movzx  edx,dl
c0017aec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017af0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017af4:	88 82 e0 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf420],al
c0017afa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017afe:	8d 50 01             	lea    edx,[eax+0x1]
c0017b01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b05:	8a 15 a0 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030ba0
c0017b0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017b0e:	88 0d a0 0b 03 c0    	mov    BYTE PTR ds:0xc0030ba0,cl
c0017b14:	0f b6 d2             	movzx  edx,dl
c0017b17:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b1b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b1f:	88 82 c0 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf440],al
c0017b25:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b2a:	e9 da 02 00 00       	jmp    c0017e09 <scanMADT()+0x469>
c0017b2f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017b34:	0f 85 14 01 00 00    	jne    c0017c4e <scanMADT()+0x2ae>
c0017b3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3e:	8d 50 01             	lea    edx,[eax+0x1]
c0017b41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b45:	8a 15 60 0a 03 c0    	mov    dl,BYTE PTR ds:0xc0030a60
c0017b4b:	0f b6 d2             	movzx  edx,dl
c0017b4e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b52:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b56:	88 82 80 0a 03 c0    	mov    BYTE PTR [edx-0x3ffcf580],al
c0017b5c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b68:	01 d0                	add    eax,edx
c0017b6a:	83 c0 2c             	add    eax,0x2c
c0017b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0017b6f:	0f b6 d0             	movzx  edx,al
c0017b72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b76:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b81:	0f b6 c0             	movzx  eax,al
c0017b84:	c1 e0 08             	shl    eax,0x8
c0017b87:	89 d1                	mov    ecx,edx
c0017b89:	09 c1                	or     ecx,eax
c0017b8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b8f:	8d 50 02             	lea    edx,[eax+0x2]
c0017b92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b96:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b9a:	0f b6 c0             	movzx  eax,al
c0017b9d:	c1 e0 10             	shl    eax,0x10
c0017ba0:	09 c1                	or     ecx,eax
c0017ba2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba6:	8d 50 03             	lea    edx,[eax+0x3]
c0017ba9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bb1:	0f b6 c0             	movzx  eax,al
c0017bb4:	c1 e0 18             	shl    eax,0x18
c0017bb7:	09 c1                	or     ecx,eax
c0017bb9:	89 ca                	mov    edx,ecx
c0017bbb:	a0 60 0a 03 c0       	mov    al,ds:0xc0030a60
c0017bc0:	0f b6 c0             	movzx  eax,al
c0017bc3:	89 14 85 a0 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf560],edx
c0017bca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd7:	01 d0                	add    eax,edx
c0017bd9:	83 c0 2c             	add    eax,0x2c
c0017bdc:	8a 00                	mov    al,BYTE PTR [eax]
c0017bde:	0f b6 d0             	movzx  edx,al
c0017be1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017be8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bec:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bf0:	0f b6 c0             	movzx  eax,al
c0017bf3:	c1 e0 08             	shl    eax,0x8
c0017bf6:	89 d1                	mov    ecx,edx
c0017bf8:	09 c1                	or     ecx,eax
c0017bfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bfe:	8d 50 02             	lea    edx,[eax+0x2]
c0017c01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c05:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c09:	0f b6 c0             	movzx  eax,al
c0017c0c:	c1 e0 10             	shl    eax,0x10
c0017c0f:	09 c1                	or     ecx,eax
c0017c11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c15:	8d 50 03             	lea    edx,[eax+0x3]
c0017c18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c1c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c20:	0f b6 c0             	movzx  eax,al
c0017c23:	c1 e0 18             	shl    eax,0x18
c0017c26:	09 c1                	or     ecx,eax
c0017c28:	89 ca                	mov    edx,ecx
c0017c2a:	a0 60 0a 03 c0       	mov    al,ds:0xc0030a60
c0017c2f:	0f b6 c0             	movzx  eax,al
c0017c32:	89 14 85 20 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf4e0],edx
c0017c39:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c3e:	a0 60 0a 03 c0       	mov    al,ds:0xc0030a60
c0017c43:	40                   	inc    eax
c0017c44:	a2 60 0a 03 c0       	mov    ds:0xc0030a60,al
c0017c49:	e9 bb 01 00 00       	jmp    c0017e09 <scanMADT()+0x469>
c0017c4e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c53:	0f 85 e9 00 00 00    	jne    c0017d42 <scanMADT()+0x3a2>
c0017c59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c5d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c60:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c68:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c6c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c74:	8d 50 01             	lea    edx,[eax+0x1]
c0017c77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c7f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c83:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c8f:	01 d0                	add    eax,edx
c0017c91:	83 c0 2c             	add    eax,0x2c
c0017c94:	8a 00                	mov    al,BYTE PTR [eax]
c0017c96:	0f b6 d0             	movzx  edx,al
c0017c99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ca0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ca8:	0f b6 c0             	movzx  eax,al
c0017cab:	c1 e0 08             	shl    eax,0x8
c0017cae:	89 d1                	mov    ecx,edx
c0017cb0:	09 c1                	or     ecx,eax
c0017cb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb6:	8d 50 02             	lea    edx,[eax+0x2]
c0017cb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cbd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cc1:	0f b6 c0             	movzx  eax,al
c0017cc4:	c1 e0 10             	shl    eax,0x10
c0017cc7:	09 c1                	or     ecx,eax
c0017cc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ccd:	8d 50 03             	lea    edx,[eax+0x3]
c0017cd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cd8:	0f b6 c0             	movzx  eax,al
c0017cdb:	c1 e0 18             	shl    eax,0x18
c0017cde:	09 c8                	or     eax,ecx
c0017ce0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ce4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ce9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ced:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf1:	01 d0                	add    eax,edx
c0017cf3:	83 c0 2c             	add    eax,0x2c
c0017cf6:	8a 00                	mov    al,BYTE PTR [eax]
c0017cf8:	0f b6 c0             	movzx  eax,al
c0017cfb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cff:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d06:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017d0a:	0f b6 d2             	movzx  edx,dl
c0017d0d:	c1 e2 08             	shl    edx,0x8
c0017d10:	09 d0                	or     eax,edx
c0017d12:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017d17:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d1c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017d21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d25:	88 90 20 d3 02 c0    	mov    BYTE PTR [eax-0x3ffd2ce0],dl
c0017d2b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017d30:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017d35:	66 89 84 12 40 0a 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf5c0],ax
c0017d3d:	e9 c7 00 00 00       	jmp    c0017e09 <scanMADT()+0x469>
c0017d42:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017d47:	0f 85 b0 00 00 00    	jne    c0017dfd <scanMADT()+0x45d>
c0017d4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d51:	8d 50 01             	lea    edx,[eax+0x1]
c0017d54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d60:	0f b6 c0             	movzx  eax,al
c0017d63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d6f:	01 d0                	add    eax,edx
c0017d71:	83 c0 2c             	add    eax,0x2c
c0017d74:	8a 00                	mov    al,BYTE PTR [eax]
c0017d76:	0f b6 d0             	movzx  edx,al
c0017d79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d7d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d84:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d88:	0f b6 c0             	movzx  eax,al
c0017d8b:	c1 e0 08             	shl    eax,0x8
c0017d8e:	09 d0                	or     eax,edx
c0017d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d94:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0017da0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017da4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017da8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dac:	0f b6 c0             	movzx  eax,al
c0017daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db7:	c1 e0 08             	shl    eax,0x8
c0017dba:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017dbe:	89 c1                	mov    ecx,eax
c0017dc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dc4:	c1 e0 18             	shl    eax,0x18
c0017dc7:	89 c3                	mov    ebx,eax
c0017dc9:	a1 b0 09 03 c0       	mov    eax,ds:0xc00309b0
c0017dce:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd1:	89 15 b0 09 03 c0    	mov    DWORD PTR ds:0xc00309b0,edx
c0017dd7:	09 d9                	or     ecx,ebx
c0017dd9:	89 ca                	mov    edx,ecx
c0017ddb:	89 14 85 c0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf640],edx
c0017de2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dee:	68 b8 b1 02 c0       	push   0xc002b1b8
c0017df3:	e8 c4 ad ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	eb 0c                	jmp    c0017e09 <scanMADT()+0x469>
c0017dfd:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017e02:	75 05                	jne    c0017e09 <scanMADT()+0x469>
c0017e04:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017e09:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017e0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e12:	01 d0                	add    eax,edx
c0017e14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017e18:	e9 54 fc ff ff       	jmp    c0017a71 <scanMADT()+0xd1>
c0017e1d:	90                   	nop
c0017e1e:	eb 01                	jmp    c0017e21 <scanMADT()+0x481>
c0017e20:	90                   	nop
c0017e21:	83 c4 38             	add    esp,0x38
c0017e24:	5b                   	pop    ebx
c0017e25:	c3                   	ret    

c0017e26 <ACPI::ACPI()>:
c0017e26:	83 ec 0c             	sub    esp,0xc
c0017e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e2d:	83 ec 08             	sub    esp,0x8
c0017e30:	68 5b b0 02 c0       	push   0xc002b05b
c0017e35:	50                   	push   eax
c0017e36:	e8 97 c3 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	ba 2c b2 02 c0       	mov    edx,0xc002b22c
c0017e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e47:	89 10                	mov    DWORD PTR [eax],edx
c0017e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e4d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e58:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e66:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e74:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e7f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e86:	e8 15 fb ff ff       	call   c00179a0 <scanMADT()>
c0017e8b:	90                   	nop
c0017e8c:	83 c4 0c             	add    esp,0xc
c0017e8f:	c3                   	ret    

c0017e90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e90:	83 ec 2c             	sub    esp,0x2c
c0017e93:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e9b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e9f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017ea3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017ea8:	88 d0                	mov    al,dl
c0017eaa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017eae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017eb3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ebf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ec5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017ec9:	0f 8d 97 00 00 00    	jge    c0017f66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017ecf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ed3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ed7:	83 c2 2a             	add    edx,0x2a
c0017eda:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017ede:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017ee3:	75 78                	jne    c0017f5d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ee5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ee9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017eed:	83 c2 2a             	add    edx,0x2a
c0017ef0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017ef4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017ef8:	75 63                	jne    c0017f5d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017efa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017eff:	74 3a                	je     c0017f3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017f01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f09:	83 c2 2a             	add    edx,0x2a
c0017f0c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017f10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f17:	39 c2                	cmp    edx,eax
c0017f19:	74 10                	je     c0017f2b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017f1b:	83 ec 0c             	sub    esp,0xc
c0017f1e:	68 f4 b1 02 c0       	push   0xc002b1f4
c0017f23:	e8 0f 23 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0017f28:	83 c4 10             	add    esp,0x10
c0017f2b:	83 ec 0c             	sub    esp,0xc
c0017f2e:	68 60 b0 02 c0       	push   0xc002b060
c0017f33:	e8 ff 22 00 00       	call   c001a237 <Krnl::panic(char const*)>
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f47:	83 c2 2a             	add    edx,0x2a
c0017f4a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f4e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f50:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f53:	89 01                	mov    DWORD PTR [ecx],eax
c0017f55:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f58:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f5d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f61:	e9 55 ff ff ff       	jmp    c0017ebb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017f66:	90                   	nop
c0017f67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f6b:	83 c4 2c             	add    esp,0x2c
c0017f6e:	c2 04 00             	ret    0x4
c0017f71:	90                   	nop

c0017f72 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017f72:	83 ec 1c             	sub    esp,0x1c
c0017f75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f79:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f81:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f86:	88 c8                	mov    al,cl
c0017f88:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f8c:	88 d0                	mov    al,dl
c0017f8e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f96:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017fa3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017fa7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017faf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fb9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fc0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fcf:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017fd3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fda:	83 c2 2a             	add    edx,0x2a
c0017fdd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fef:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ff2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017ff6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffe:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018004:	8d 50 01             	lea    edx,[eax+0x1]
c0018007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001800b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018015:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001801b:	3d 00 02 00 00       	cmp    eax,0x200
c0018020:	75 10                	jne    c0018032 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018022:	83 ec 0c             	sub    esp,0xc
c0018025:	68 6f b0 02 c0       	push   0xc002b06f
c001802a:	e8 08 22 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001802f:	83 c4 10             	add    esp,0x10
c0018032:	90                   	nop
c0018033:	83 c4 1c             	add    esp,0x1c
c0018036:	c3                   	ret    
c0018037:	90                   	nop

c0018038 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018038:	b8 00 00 00 00       	mov    eax,0x0
c001803d:	c3                   	ret    

c001803e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001803e:	83 ec 1c             	sub    esp,0x1c
c0018041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018045:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018048:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001804c:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0018051:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018056:	83 ec 08             	sub    esp,0x8
c0018059:	52                   	push   edx
c001805a:	50                   	push   eax
c001805b:	e8 f8 6d ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018060:	83 c4 10             	add    esp,0x10
c0018063:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018067:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001806c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018071:	83 ec 04             	sub    esp,0x4
c0018074:	6a 01                	push   0x1
c0018076:	52                   	push   edx
c0018077:	50                   	push   eax
c0018078:	e8 f1 6e ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	90                   	nop
c0018081:	83 c4 1c             	add    esp,0x1c
c0018084:	c3                   	ret    
c0018085:	90                   	nop

c0018086 <ACPI::open(int, int, void*)>:
c0018086:	53                   	push   ebx
c0018087:	83 ec 28             	sub    esp,0x28
c001808a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001808e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018095:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018099:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00180a0:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00180a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00180ab:	83 e0 04             	and    eax,0x4
c00180ae:	84 c0                	test   al,al
c00180b0:	74 47                	je     c00180f9 <ACPI::open(int, int, void*)+0x73>
c00180b2:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c00180b7:	83 ec 08             	sub    esp,0x8
c00180ba:	68 8c b0 02 c0       	push   0xc002b08c
c00180bf:	50                   	push   eax
c00180c0:	e8 3f f8 ff ff       	call   c0017904 <findDataTable(unsigned char*, char*)>
c00180c5:	83 c4 10             	add    esp,0x10
c00180c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180cc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00180d1:	74 26                	je     c00180f9 <ACPI::open(int, int, void*)+0x73>
c00180d3:	83 ec 0c             	sub    esp,0xc
c00180d6:	68 91 b0 02 c0       	push   0xc002b091
c00180db:	e8 dc aa ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00180e0:	83 c4 10             	add    esp,0x10
c00180e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180f2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180f9:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018105:	8a 00                	mov    al,BYTE PTR [eax]
c0018107:	3c 01                	cmp    al,0x1
c0018109:	75 28                	jne    c0018133 <ACPI::open(int, int, void*)+0xad>
c001810b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001810f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001811a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018121:	83 ec 0c             	sub    esp,0xc
c0018124:	68 a2 b0 02 c0       	push   0xc002b0a2
c0018129:	e8 8e aa ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001812e:	83 c4 10             	add    esp,0x10
c0018131:	eb 25                	jmp    c0018158 <ACPI::open(int, int, void*)+0xd2>
c0018133:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018137:	8a 00                	mov    al,BYTE PTR [eax]
c0018139:	3c 02                	cmp    al,0x2
c001813b:	75 1b                	jne    c0018158 <ACPI::open(int, int, void*)+0xd2>
c001813d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018141:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018148:	83 ec 0c             	sub    esp,0xc
c001814b:	68 aa b0 02 c0       	push   0xc002b0aa
c0018150:	e8 67 aa ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018155:	83 c4 10             	add    esp,0x10
c0018158:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001815c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018162:	83 f0 01             	xor    eax,0x1
c0018165:	84 c0                	test   al,al
c0018167:	74 6a                	je     c00181d3 <ACPI::open(int, int, void*)+0x14d>
c0018169:	83 ec 0c             	sub    esp,0xc
c001816c:	68 b2 b0 02 c0       	push   0xc002b0b2
c0018171:	e8 46 aa ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018176:	83 c4 10             	add    esp,0x10
c0018179:	e8 d2 7f fe ff       	call   c0000150 <manualPCIProbe>
c001817e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018182:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018187:	75 28                	jne    c00181b1 <ACPI::open(int, int, void*)+0x12b>
c0018189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001818d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018194:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018198:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001819f:	83 ec 0c             	sub    esp,0xc
c00181a2:	68 c0 b0 02 c0       	push   0xc002b0c0
c00181a7:	e8 10 aa ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	eb 22                	jmp    c00181d3 <ACPI::open(int, int, void*)+0x14d>
c00181b1:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00181b6:	75 1b                	jne    c00181d3 <ACPI::open(int, int, void*)+0x14d>
c00181b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181bc:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00181c3:	83 ec 0c             	sub    esp,0xc
c00181c6:	68 ca b0 02 c0       	push   0xc002b0ca
c00181cb:	e8 ec a9 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181d7:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00181dd:	84 c0                	test   al,al
c00181df:	74 13                	je     c00181f4 <ACPI::open(int, int, void*)+0x16e>
c00181e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181e5:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00181eb:	83 f0 01             	xor    eax,0x1
c00181ee:	0f b6 c0             	movzx  eax,al
c00181f1:	40                   	inc    eax
c00181f2:	eb 05                	jmp    c00181f9 <ACPI::open(int, int, void*)+0x173>
c00181f4:	b8 00 00 00 00       	mov    eax,0x0
c00181f9:	83 ec 08             	sub    esp,0x8
c00181fc:	50                   	push   eax
c00181fd:	68 d4 b0 02 c0       	push   0xc002b0d4
c0018202:	e8 b5 a9 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001820e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018214:	84 c0                	test   al,al
c0018216:	74 67                	je     c001827f <ACPI::open(int, int, void*)+0x1f9>
c0018218:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018220:	83 ec 0c             	sub    esp,0xc
c0018223:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018227:	e8 14 76 ff ff       	call   c000f840 <malloc>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	89 c3                	mov    ebx,eax
c0018231:	83 ec 0c             	sub    esp,0xc
c0018234:	53                   	push   ebx
c0018235:	e8 26 a3 00 00       	call   c0022560 <PCI::PCI()>
c001823a:	83 c4 10             	add    esp,0x10
c001823d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018245:	83 ec 08             	sub    esp,0x8
c0018248:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001824c:	50                   	push   eax
c001824d:	e8 90 bd ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c0018252:	83 c4 10             	add    esp,0x10
c0018255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018259:	8b 00                	mov    eax,DWORD PTR [eax]
c001825b:	83 c0 08             	add    eax,0x8
c001825e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018260:	6a 00                	push   0x0
c0018262:	6a 00                	push   0x0
c0018264:	6a 00                	push   0x0
c0018266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001826a:	ff d0                	call   eax
c001826c:	83 c4 10             	add    esp,0x10
c001826f:	83 ec 0c             	sub    esp,0xc
c0018272:	68 dd b0 02 c0       	push   0xc002b0dd
c0018277:	e8 40 a9 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	83 ec 0c             	sub    esp,0xc
c0018282:	68 e8 b0 02 c0       	push   0xc002b0e8
c0018287:	e8 cb 46 00 00       	call   c001c957 <Thr::loadKernelSymbolTable(char const*)>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c0018295:	83 ec 08             	sub    esp,0x8
c0018298:	6a 01                	push   0x1
c001829a:	68 06 b1 02 c0       	push   0xc002b106
c001829f:	e8 10 51 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	83 ec 08             	sub    esp,0x8
c00182aa:	53                   	push   ebx
c00182ab:	50                   	push   eax
c00182ac:	e8 37 53 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c00182b1:	83 c4 10             	add    esp,0x10
c00182b4:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c00182ba:	83 ec 08             	sub    esp,0x8
c00182bd:	6a 01                	push   0x1
c00182bf:	68 23 b1 02 c0       	push   0xc002b123
c00182c4:	e8 eb 50 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c00182c9:	83 c4 10             	add    esp,0x10
c00182cc:	83 ec 08             	sub    esp,0x8
c00182cf:	53                   	push   ebx
c00182d0:	50                   	push   eax
c00182d1:	e8 12 53 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c00182d6:	83 c4 10             	add    esp,0x10
c00182d9:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00182de:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182e4:	83 e0 04             	and    eax,0x4
c00182e7:	84 c0                	test   al,al
c00182e9:	0f 84 d2 00 00 00    	je     c00183c1 <ACPI::open(int, int, void*)+0x33b>
c00182ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182fd:	e8 3e 75 ff ff       	call   c000f840 <malloc>
c0018302:	83 c4 10             	add    esp,0x10
c0018305:	89 c3                	mov    ebx,eax
c0018307:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001830c:	83 ec 04             	sub    esp,0x4
c001830f:	50                   	push   eax
c0018310:	68 40 b1 02 c0       	push   0xc002b140
c0018315:	53                   	push   ebx
c0018316:	e8 f9 ad ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018322:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018327:	74 17                	je     c0018340 <ACPI::open(int, int, void*)+0x2ba>
c0018329:	83 ec 0c             	sub    esp,0xc
c001832c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018330:	e8 b1 b0 ff ff       	call   c00133e6 <File::exists()>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	84 c0                	test   al,al
c001833a:	74 04                	je     c0018340 <ACPI::open(int, int, void*)+0x2ba>
c001833c:	b0 01                	mov    al,0x1
c001833e:	eb 02                	jmp    c0018342 <ACPI::open(int, int, void*)+0x2bc>
c0018340:	b0 00                	mov    al,0x0
c0018342:	84 c0                	test   al,al
c0018344:	74 22                	je     c0018368 <ACPI::open(int, int, void*)+0x2e2>
c0018346:	83 ec 08             	sub    esp,0x8
c0018349:	6a 01                	push   0x1
c001834b:	68 40 b1 02 c0       	push   0xc002b140
c0018350:	e8 5f 50 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c0018355:	83 c4 10             	add    esp,0x10
c0018358:	83 ec 08             	sub    esp,0x8
c001835b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001835f:	50                   	push   eax
c0018360:	e8 83 52 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001836d:	74 1e                	je     c001838d <ACPI::open(int, int, void*)+0x307>
c001836f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018374:	74 17                	je     c001838d <ACPI::open(int, int, void*)+0x307>
c0018376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001837a:	8b 00                	mov    eax,DWORD PTR [eax]
c001837c:	83 c0 08             	add    eax,0x8
c001837f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018381:	83 ec 0c             	sub    esp,0xc
c0018384:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018388:	ff d0                	call   eax
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c0018392:	83 ec 08             	sub    esp,0x8
c0018395:	68 5d b1 02 c0       	push   0xc002b15d
c001839a:	50                   	push   eax
c001839b:	e8 64 f5 ff ff       	call   c0017904 <findDataTable(unsigned char*, char*)>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183a7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00183ac:	74 13                	je     c00183c1 <ACPI::open(int, int, void*)+0x33b>
c00183ae:	83 ec 08             	sub    esp,0x8
c00183b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00183b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00183b9:	e8 80 fc ff ff       	call   c001803e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00183be:	83 c4 10             	add    esp,0x10
c00183c1:	b8 00 00 00 00       	mov    eax,0x0
c00183c6:	83 c4 28             	add    esp,0x28
c00183c9:	5b                   	pop    ebx
c00183ca:	c3                   	ret    
c00183cb:	90                   	nop

c00183cc <ACPI::sleep()>:
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	a1 80 07 03 c0       	mov    eax,ds:0xc0030780
c00183d4:	85 c0                	test   eax,eax
c00183d6:	74 07                	je     c00183df <ACPI::sleep()+0x13>
c00183d8:	a1 80 07 03 c0       	mov    eax,ds:0xc0030780
c00183dd:	ff d0                	call   eax
c00183df:	90                   	nop
c00183e0:	83 c4 0c             	add    esp,0xc
c00183e3:	c3                   	ret    

c00183e4 <CPU::close(int, int, void*)>:
c00183e4:	31 c0                	xor    eax,eax
c00183e6:	c3                   	ret    
c00183e7:	90                   	nop

c00183e8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00183e8:	55                   	push   ebp
c00183e9:	57                   	push   edi
c00183ea:	56                   	push   esi
c00183eb:	53                   	push   ebx
c00183ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00183f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f4:	89 ce                	mov    esi,ecx
c00183f6:	89 d5                	mov    ebp,edx
c00183f8:	80 f9 04             	cmp    cl,0x4
c00183fb:	75 28                	jne    c0018425 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00183fd:	8d 42 f9             	lea    eax,[edx-0x7]
c0018400:	3c 03                	cmp    al,0x3
c0018402:	0f 86 63 01 00 00    	jbe    c001856b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018408:	80 fa 03             	cmp    dl,0x3
c001840b:	0f 84 5a 01 00 00    	je     c001856b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018411:	8d 7a f2             	lea    edi,[edx-0xe]
c0018414:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c0018419:	89 fb                	mov    ebx,edi
c001841b:	80 fb 01             	cmp    bl,0x1
c001841e:	77 4e                	ja     c001846e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018420:	e9 52 01 00 00       	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018425:	80 f9 05             	cmp    cl,0x5
c0018428:	75 4d                	jne    c0018477 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001842a:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c001842f:	80 fa 03             	cmp    dl,0x3
c0018432:	0f 86 3f 01 00 00    	jbe    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018438:	8d 7a fa             	lea    edi,[edx-0x6]
c001843b:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018440:	89 fb                	mov    ebx,edi
c0018442:	80 fb 01             	cmp    bl,0x1
c0018445:	0f 86 2c 01 00 00    	jbe    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844b:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018450:	80 fa 08             	cmp    dl,0x8
c0018453:	0f 84 1e 01 00 00    	je     c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018459:	89 d7                	mov    edi,edx
c001845b:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018460:	83 e7 fb             	and    edi,0xfffffffb
c0018463:	89 fb                	mov    ebx,edi
c0018465:	80 fb 09             	cmp    bl,0x9
c0018468:	0f 84 09 01 00 00    	je     c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846e:	31 c0                	xor    eax,eax
c0018470:	89 eb                	mov    ebx,ebp
c0018472:	0f b6 fb             	movzx  edi,bl
c0018475:	eb 30                	jmp    c00184a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018477:	31 c0                	xor    eax,eax
c0018479:	80 f9 06             	cmp    cl,0x6
c001847c:	75 f2                	jne    c0018470 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001847e:	80 fa 0a             	cmp    dl,0xa
c0018481:	77 ed                	ja     c0018470 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018483:	bf de 05 00 00       	mov    edi,0x5de
c0018488:	0f a3 d7             	bt     edi,edx
c001848b:	73 e3                	jae    c0018470 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001848d:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c0018492:	e9 e0 00 00 00       	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018497:	39 c7                	cmp    edi,eax
c0018499:	0f 84 d3 00 00 00    	je     c0018572 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001849f:	40                   	inc    eax
c00184a0:	3d d0 00 00 00       	cmp    eax,0xd0
c00184a5:	74 09                	je     c00184b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00184a7:	89 f3                	mov    ebx,esi
c00184a9:	80 fb 0f             	cmp    bl,0xf
c00184ac:	75 f1                	jne    c001849f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00184ae:	eb e7                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00184b0:	80 f9 10             	cmp    cl,0x10
c00184b3:	75 14                	jne    c00184c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00184b5:	8d 42 fc             	lea    eax,[edx-0x4]
c00184b8:	83 e0 fb             	and    eax,0xfffffffb
c00184bb:	3c 02                	cmp    al,0x2
c00184bd:	76 34                	jbe    c00184f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00184bf:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00184c4:	80 fa 02             	cmp    dl,0x2
c00184c7:	eb 24                	jmp    c00184ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00184c9:	80 f9 11             	cmp    cl,0x11
c00184cc:	75 13                	jne    c00184e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00184ce:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00184d3:	80 fa 03             	cmp    dl,0x3
c00184d6:	0f 85 9b 00 00 00    	jne    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184dc:	e9 91 00 00 00       	jmp    c0018572 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00184e1:	80 f9 12             	cmp    cl,0x12
c00184e4:	75 14                	jne    c00184fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00184e6:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00184eb:	fe ca                	dec    dl
c00184ed:	0f 85 84 00 00 00    	jne    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f3:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00184f8:	eb 7d                	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184fa:	80 f9 14             	cmp    cl,0x14
c00184fd:	75 12                	jne    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00184ff:	4a                   	dec    edx
c0018500:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c0018505:	80 fa 01             	cmp    dl,0x1
c0018508:	77 6d                	ja     c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001850a:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c001850f:	eb 66                	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018511:	80 f9 15             	cmp    cl,0x15
c0018514:	75 31                	jne    c0018547 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018516:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c001851b:	80 fa 01             	cmp    dl,0x1
c001851e:	74 57                	je     c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018520:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c0018525:	80 fa 13             	cmp    dl,0x13
c0018528:	76 0c                	jbe    c0018536 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001852a:	80 fa 30             	cmp    dl,0x30
c001852d:	75 48                	jne    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001852f:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0018534:	eb 41                	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018536:	b9 04 00 09 00       	mov    ecx,0x90004
c001853b:	0f a3 d1             	bt     ecx,edx
c001853e:	73 37                	jae    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018540:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018545:	eb 30                	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018547:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c001854c:	80 f9 16             	cmp    cl,0x16
c001854f:	75 26                	jne    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018551:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018556:	84 d2                	test   dl,dl
c0018558:	74 1d                	je     c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855a:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c001855f:	80 fa 30             	cmp    dl,0x30
c0018562:	75 13                	jne    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018564:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018569:	eb 0c                	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001856b:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0018570:	eb 05                	jmp    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018572:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c0018577:	5b                   	pop    ebx
c0018578:	5e                   	pop    esi
c0018579:	5f                   	pop    edi
c001857a:	5d                   	pop    ebp
c001857b:	c3                   	ret    

c001857c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001857c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018580:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018584:	80 f9 04             	cmp    cl,0x4
c0018587:	75 6b                	jne    c00185f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018589:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c001858e:	80 fa 01             	cmp    dl,0x1
c0018591:	0f 86 92 02 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018597:	b8 50 d3 02 c0       	mov    eax,0xc002d350
c001859c:	80 fa 02             	cmp    dl,0x2
c001859f:	0f 84 84 02 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a5:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c00185aa:	80 fa 03             	cmp    dl,0x3
c00185ad:	0f 84 76 02 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b3:	b8 70 d3 02 c0       	mov    eax,0xc002d370
c00185b8:	80 fa 04             	cmp    dl,0x4
c00185bb:	0f 84 68 02 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c1:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00185c6:	80 fa 05             	cmp    dl,0x5
c00185c9:	0f 84 5a 02 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cf:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c00185d4:	80 fa 07             	cmp    dl,0x7
c00185d7:	0f 84 4c 02 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185dd:	83 ea 08             	sub    edx,0x8
c00185e0:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00185e5:	80 fa 01             	cmp    dl,0x1
c00185e8:	0f 87 3b 02 00 00    	ja     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ee:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c00185f3:	c3                   	ret    
c00185f4:	80 f9 05             	cmp    cl,0x5
c00185f7:	75 45                	jne    c001863e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00185f9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00185fc:	b8 a0 d3 02 c0       	mov    eax,0xc002d3a0
c0018601:	80 f9 02             	cmp    cl,0x2
c0018604:	0f 86 1f 02 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860a:	80 fa 04             	cmp    dl,0x4
c001860d:	0f 84 f3 01 00 00    	je     c0018806 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018613:	80 fa 07             	cmp    dl,0x7
c0018616:	0f 84 0d 02 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861c:	b8 b0 d3 02 c0       	mov    eax,0xc002d3b0
c0018621:	80 fa 08             	cmp    dl,0x8
c0018624:	0f 84 ff 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862a:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c001862f:	80 fa 09             	cmp    dl,0x9
c0018632:	0f 85 f1 01 00 00    	jne    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018638:	b8 c0 d3 02 c0       	mov    eax,0xc002d3c0
c001863d:	c3                   	ret    
c001863e:	80 f9 06             	cmp    cl,0x6
c0018641:	0f 85 85 01 00 00    	jne    c00187cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018647:	b8 d0 d3 02 c0       	mov    eax,0xc002d3d0
c001864c:	80 fa 01             	cmp    dl,0x1
c001864f:	0f 84 d4 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018655:	8d 42 fb             	lea    eax,[edx-0x5]
c0018658:	3c 01                	cmp    al,0x1
c001865a:	0f 86 ac 01 00 00    	jbe    c001880c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018660:	80 fa 03             	cmp    dl,0x3
c0018663:	0f 84 a3 01 00 00    	je     c001880c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018669:	8d 4a f9             	lea    ecx,[edx-0x7]
c001866c:	b8 f0 d3 02 c0       	mov    eax,0xc002d3f0
c0018671:	80 f9 01             	cmp    cl,0x1
c0018674:	0f 86 af 01 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867a:	80 fa 09             	cmp    dl,0x9
c001867d:	0f 84 8f 01 00 00    	je     c0018812 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018683:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018686:	80 f9 01             	cmp    cl,0x1
c0018689:	0f 86 9a 01 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868f:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c0018694:	80 fa 0d             	cmp    dl,0xd
c0018697:	0f 84 8c 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869d:	b8 10 d4 02 c0       	mov    eax,0xc002d410
c00186a2:	80 fa 0e             	cmp    dl,0xe
c00186a5:	0f 84 7e 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ab:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c00186b0:	80 fa 0f             	cmp    dl,0xf
c00186b3:	0f 84 70 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b9:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c00186be:	80 fa 15             	cmp    dl,0x15
c00186c1:	0f 84 62 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00186ca:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c00186cf:	80 f9 01             	cmp    cl,0x1
c00186d2:	0f 86 51 01 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d8:	80 fa 1a             	cmp    dl,0x1a
c00186db:	0f 84 37 01 00 00    	je     c0018818 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00186e1:	80 fa 1c             	cmp    dl,0x1c
c00186e4:	0f 84 34 01 00 00    	je     c001881e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00186ea:	80 fa 1d             	cmp    dl,0x1d
c00186ed:	0f 84 36 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f3:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c00186f8:	80 fa 25             	cmp    dl,0x25
c00186fb:	0f 84 28 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018701:	8d 4a da             	lea    ecx,[edx-0x26]
c0018704:	b8 40 d4 02 c0       	mov    eax,0xc002d440
c0018709:	80 f9 01             	cmp    cl,0x1
c001870c:	0f 86 17 01 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018712:	b8 60 d4 02 c0       	mov    eax,0xc002d460
c0018717:	80 fa 2a             	cmp    dl,0x2a
c001871a:	0f 84 09 01 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018720:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c0018725:	80 fa 2c             	cmp    dl,0x2c
c0018728:	0f 84 fb 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872e:	b8 60 d4 02 c0       	mov    eax,0xc002d460
c0018733:	80 fa 2d             	cmp    dl,0x2d
c0018736:	0f 84 ed 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873c:	b8 30 d4 02 c0       	mov    eax,0xc002d430
c0018741:	80 fa 2e             	cmp    dl,0x2e
c0018744:	0f 84 df 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874a:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c001874f:	80 fa 2f             	cmp    dl,0x2f
c0018752:	0f 84 d1 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018758:	8d 4a cb             	lea    ecx,[edx-0x35]
c001875b:	b8 40 d4 02 c0       	mov    eax,0xc002d440
c0018760:	80 f9 01             	cmp    cl,0x1
c0018763:	0f 86 c0 00 00 00    	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018769:	b8 70 d4 02 c0       	mov    eax,0xc002d470
c001876e:	80 fa 37             	cmp    dl,0x37
c0018771:	0f 84 b2 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018777:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c001877c:	80 fa 3a             	cmp    dl,0x3a
c001877f:	0f 84 a4 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018785:	b8 90 d4 02 c0       	mov    eax,0xc002d490
c001878a:	80 fa 3c             	cmp    dl,0x3c
c001878d:	0f 84 96 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018793:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c0018798:	80 fa 3d             	cmp    dl,0x3d
c001879b:	0f 84 88 00 00 00    	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a1:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00187a6:	80 fa 3e             	cmp    dl,0x3e
c00187a9:	74 7e                	je     c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ab:	8d 42 bb             	lea    eax,[edx-0x45]
c00187ae:	3c 01                	cmp    al,0x1
c00187b0:	76 72                	jbe    c0018824 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187b2:	80 fa 3f             	cmp    dl,0x3f
c00187b5:	74 6d                	je     c0018824 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187b7:	80 fa 4a             	cmp    dl,0x4a
c00187ba:	74 0a                	je     c00187c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00187bc:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00187c1:	80 fa 4d             	cmp    dl,0x4d
c00187c4:	75 63                	jne    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c6:	b8 70 d4 02 c0       	mov    eax,0xc002d470
c00187cb:	c3                   	ret    
c00187cc:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00187d1:	80 f9 0b             	cmp    cl,0xb
c00187d4:	75 0a                	jne    c00187e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00187d6:	fe ca                	dec    dl
c00187d8:	75 4f                	jne    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187da:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c00187df:	c3                   	ret    
c00187e0:	80 f9 0f             	cmp    cl,0xf
c00187e3:	75 44                	jne    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e5:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00187ea:	80 fa 02             	cmp    dl,0x2
c00187ed:	76 3a                	jbe    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ef:	8d 42 fd             	lea    eax,[edx-0x3]
c00187f2:	3c 01                	cmp    al,0x1
c00187f4:	76 0a                	jbe    c0018800 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00187f6:	b8 42 b5 02 c0       	mov    eax,0xc002b542
c00187fb:	80 fa 06             	cmp    dl,0x6
c00187fe:	75 29                	jne    c0018829 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018800:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c0018805:	c3                   	ret    
c0018806:	b8 b0 d3 02 c0       	mov    eax,0xc002d3b0
c001880b:	c3                   	ret    
c001880c:	b8 e0 d3 02 c0       	mov    eax,0xc002d3e0
c0018811:	c3                   	ret    
c0018812:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c0018817:	c3                   	ret    
c0018818:	b8 30 d4 02 c0       	mov    eax,0xc002d430
c001881d:	c3                   	ret    
c001881e:	b8 40 d4 02 c0       	mov    eax,0xc002d440
c0018823:	c3                   	ret    
c0018824:	b8 90 d4 02 c0       	mov    eax,0xc002d490
c0018829:	c3                   	ret    

c001882a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001882a:	60                   	pusha  
c001882b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001882f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018833:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018837:	9c                   	pushf  
c0018838:	fa                   	cli    
c0018839:	0f 09                	wbinvd 
c001883b:	0f 30                	wrmsr  
c001883d:	9d                   	popf   
c001883e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018842:	89 02                	mov    DWORD PTR [edx],eax
c0018844:	61                   	popa   
c0018845:	c3                   	ret    

c0018846 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018846:	60                   	pusha  
c0018847:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001884b:	9c                   	pushf  
c001884c:	fa                   	cli    
c001884d:	0f 09                	wbinvd 
c001884f:	31 c0                	xor    eax,eax
c0018851:	31 d2                	xor    edx,edx
c0018853:	0f 32                	rdmsr  
c0018855:	9d                   	popf   
c0018856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001885a:	89 02                	mov    DWORD PTR [edx],eax
c001885c:	61                   	popa   
c001885d:	c3                   	ret    

c001885e <CPU::AMD_K6_writeback(int, int, int)>:
c001885e:	56                   	push   esi
c001885f:	53                   	push   ebx
c0018860:	83 ec 10             	sub    esp,0x10
c0018863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018867:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001886c:	75 5d                	jne    c00188cb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001886e:	83 f8 08             	cmp    eax,0x8
c0018871:	75 09                	jne    c001887c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018873:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018878:	7e 13                	jle    c001888d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001887a:	eb 30                	jmp    c00188ac <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001887c:	83 f8 06             	cmp    eax,0x6
c001887f:	7c 4a                	jl     c00188cb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018881:	83 f8 07             	cmp    eax,0x7
c0018884:	7e 07                	jle    c001888d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018886:	83 f8 09             	cmp    eax,0x9
c0018889:	74 21                	je     c00188ac <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001888b:	eb 3e                	jmp    c00188cb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001888d:	89 e6                	mov    esi,esp
c001888f:	8b 1d 04 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e104
c0018895:	56                   	push   esi
c0018896:	c1 eb 15             	shr    ebx,0x15
c0018899:	68 82 00 00 c0       	push   0xc0000082
c001889e:	83 e3 7e             	and    ebx,0x7e
c00188a1:	e8 a0 ff ff ff       	call   c0018846 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188a6:	56                   	push   esi
c00188a7:	6a 00                	push   0x0
c00188a9:	53                   	push   ebx
c00188aa:	eb 12                	jmp    c00188be <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00188ac:	89 e3                	mov    ebx,esp
c00188ae:	53                   	push   ebx
c00188af:	68 82 00 00 c0       	push   0xc0000082
c00188b4:	e8 8d ff ff ff       	call   c0018846 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188b9:	53                   	push   ebx
c00188ba:	6a 00                	push   0x0
c00188bc:	6a 00                	push   0x0
c00188be:	68 82 00 00 c0       	push   0xc0000082
c00188c3:	e8 62 ff ff ff       	call   c001882a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00188c8:	83 c4 18             	add    esp,0x18
c00188cb:	83 c4 10             	add    esp,0x10
c00188ce:	5b                   	pop    ebx
c00188cf:	5e                   	pop    esi
c00188d0:	c3                   	ret    
c00188d1:	90                   	nop

c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00188d2:	55                   	push   ebp
c00188d3:	57                   	push   edi
c00188d4:	56                   	push   esi
c00188d5:	53                   	push   ebx
c00188d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00188de:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00188e2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00188e6:	39 05 e0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5e0,eax
c00188ec:	75 23                	jne    c0018911 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00188ee:	a1 0c 0c 03 c0       	mov    eax,ds:0xc0030c0c
c00188f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00188f7:	89 06                	mov    DWORD PTR [esi],eax
c00188f9:	a1 08 0c 03 c0       	mov    eax,ds:0xc0030c08
c00188fe:	89 07                	mov    DWORD PTR [edi],eax
c0018900:	a1 04 0c 03 c0       	mov    eax,ds:0xc0030c04
c0018905:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018908:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001890d:	89 02                	mov    DWORD PTR [edx],eax
c001890f:	eb 3f                	jmp    c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018911:	31 c9                	xor    ecx,ecx
c0018913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018917:	0f a2                	cpuid  
c0018919:	89 06                	mov    DWORD PTR [esi],eax
c001891b:	89 1f                	mov    DWORD PTR [edi],ebx
c001891d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018921:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018924:	89 10                	mov    DWORD PTR [eax],edx
c0018926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001892a:	a3 e0 d5 02 c0       	mov    ds:0xc002d5e0,eax
c001892f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018931:	a3 0c 0c 03 c0       	mov    ds:0xc0030c0c,eax
c0018936:	8b 07                	mov    eax,DWORD PTR [edi]
c0018938:	a3 08 0c 03 c0       	mov    ds:0xc0030c08,eax
c001893d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018940:	a3 04 0c 03 c0       	mov    ds:0xc0030c04,eax
c0018945:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018949:	8b 00                	mov    eax,DWORD PTR [eax]
c001894b:	a3 00 0c 03 c0       	mov    ds:0xc0030c00,eax
c0018950:	5b                   	pop    ebx
c0018951:	5e                   	pop    esi
c0018952:	5f                   	pop    edi
c0018953:	5d                   	pop    ebp
c0018954:	c3                   	ret    
c0018955:	90                   	nop

c0018956 <CPU::cpuidCheckEDX(unsigned int)>:
c0018956:	83 ec 10             	sub    esp,0x10
c0018959:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001895d:	50                   	push   eax
c001895e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018962:	50                   	push   eax
c0018963:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018967:	50                   	push   eax
c0018968:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001896c:	50                   	push   eax
c001896d:	6a 01                	push   0x1
c001896f:	e8 5e ff ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018974:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018978:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001897c:	0f 95 c0             	setne  al
c001897f:	83 c4 24             	add    esp,0x24
c0018982:	c3                   	ret    
c0018983:	90                   	nop

c0018984 <CPU::cpuidCheckECX(unsigned int)>:
c0018984:	83 ec 10             	sub    esp,0x10
c0018987:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001898b:	50                   	push   eax
c001898c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018990:	50                   	push   eax
c0018991:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018995:	50                   	push   eax
c0018996:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001899a:	50                   	push   eax
c001899b:	6a 01                	push   0x1
c001899d:	e8 30 ff ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189a6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00189aa:	0f 95 c0             	setne  al
c00189ad:	83 c4 24             	add    esp,0x24
c00189b0:	c3                   	ret    
c00189b1:	90                   	nop

c00189b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00189b2:	83 ec 10             	sub    esp,0x10
c00189b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189b9:	50                   	push   eax
c00189ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189be:	50                   	push   eax
c00189bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189c3:	50                   	push   eax
c00189c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189c8:	50                   	push   eax
c00189c9:	6a 07                	push   0x7
c00189cb:	e8 02 ff ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189d4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00189d8:	0f 95 c0             	setne  al
c00189db:	83 c4 24             	add    esp,0x24
c00189de:	c3                   	ret    
c00189df:	90                   	nop

c00189e0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00189e0:	83 ec 10             	sub    esp,0x10
c00189e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e7:	50                   	push   eax
c00189e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ec:	50                   	push   eax
c00189ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189f1:	50                   	push   eax
c00189f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189f6:	50                   	push   eax
c00189f7:	6a 07                	push   0x7
c00189f9:	e8 d4 fe ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a02:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a06:	0f 95 c0             	setne  al
c0018a09:	83 c4 24             	add    esp,0x24
c0018a0c:	c3                   	ret    
c0018a0d:	90                   	nop

c0018a0e <CPU::CPU()>:
c0018a0e:	83 ec 0c             	sub    esp,0xc
c0018a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a15:	83 ec 08             	sub    esp,0x8
c0018a18:	68 42 b5 02 c0       	push   0xc002b542
c0018a1d:	50                   	push   eax
c0018a1e:	e8 af b7 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0018a23:	83 c4 10             	add    esp,0x10
c0018a26:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c0018a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a2f:	89 10                	mov    DWORD PTR [eax],edx
c0018a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a35:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a43:	05 78 01 00 00       	add    eax,0x178
c0018a48:	83 ec 0c             	sub    esp,0xc
c0018a4b:	50                   	push   eax
c0018a4c:	e8 07 66 ff ff       	call   c000f058 <GDT::GDT()>
c0018a51:	83 c4 10             	add    esp,0x10
c0018a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a58:	05 7c 09 00 00       	add    eax,0x97c
c0018a5d:	83 ec 0c             	sub    esp,0xc
c0018a60:	50                   	push   eax
c0018a61:	e8 54 68 ff ff       	call   c000f2ba <IDT::IDT()>
c0018a66:	83 c4 10             	add    esp,0x10
c0018a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a6d:	05 7c 11 00 00       	add    eax,0x117c
c0018a72:	83 ec 0c             	sub    esp,0xc
c0018a75:	50                   	push   eax
c0018a76:	e8 d7 89 ff ff       	call   c0011452 <TSS::TSS()>
c0018a7b:	83 c4 10             	add    esp,0x10
c0018a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a82:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a8d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018a97:	90                   	nop
c0018a98:	83 c4 0c             	add    esp,0xc
c0018a9b:	c3                   	ret    

c0018a9c <CPU::displayFeatures()>:
c0018a9c:	53                   	push   ebx
c0018a9d:	83 ec 10             	sub    esp,0x10
c0018aa0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018aa4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018aaa:	68 50 b2 02 c0       	push   0xc002b250
c0018aaf:	e8 08 a1 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018ab4:	59                   	pop    ecx
c0018ab5:	58                   	pop    eax
c0018ab6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018abc:	50                   	push   eax
c0018abd:	68 61 b2 02 c0       	push   0xc002b261
c0018ac2:	e8 f5 a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018ac7:	58                   	pop    eax
c0018ac8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ace:	5a                   	pop    edx
c0018acf:	c1 e8 0e             	shr    eax,0xe
c0018ad2:	0f b6 c0             	movzx  eax,al
c0018ad5:	50                   	push   eax
c0018ad6:	68 72 b2 02 c0       	push   0xc002b272
c0018adb:	e8 dc a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018ae0:	59                   	pop    ecx
c0018ae1:	58                   	pop    eax
c0018ae2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ae8:	66 c1 e8 06          	shr    ax,0x6
c0018aec:	0f b6 c0             	movzx  eax,al
c0018aef:	50                   	push   eax
c0018af0:	68 83 b2 02 c0       	push   0xc002b283
c0018af5:	e8 c2 a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018afa:	c7 04 24 30 b7 02 c0 	mov    DWORD PTR [esp],0xc002b730
c0018b01:	e8 b6 a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018b06:	83 c4 10             	add    esp,0x10
c0018b09:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b0e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018b15:	74 05                	je     c0018b1c <CPU::displayFeatures()+0x80>
c0018b17:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b1c:	52                   	push   edx
c0018b1d:	52                   	push   edx
c0018b1e:	50                   	push   eax
c0018b1f:	68 94 b2 02 c0       	push   0xc002b294
c0018b24:	e8 93 a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018b29:	83 c4 10             	add    esp,0x10
c0018b2c:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b31:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018b38:	78 05                	js     c0018b3f <CPU::displayFeatures()+0xa3>
c0018b3a:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b3f:	51                   	push   ecx
c0018b40:	51                   	push   ecx
c0018b41:	50                   	push   eax
c0018b42:	68 ab b2 02 c0       	push   0xc002b2ab
c0018b47:	e8 70 a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b54:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018b5b:	75 05                	jne    c0018b62 <CPU::displayFeatures()+0xc6>
c0018b5d:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b62:	52                   	push   edx
c0018b63:	52                   	push   edx
c0018b64:	50                   	push   eax
c0018b65:	68 c2 b2 02 c0       	push   0xc002b2c2
c0018b6a:	e8 4d a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018b6f:	83 c4 10             	add    esp,0x10
c0018b72:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b77:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018b7e:	75 05                	jne    c0018b85 <CPU::displayFeatures()+0xe9>
c0018b80:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b85:	51                   	push   ecx
c0018b86:	51                   	push   ecx
c0018b87:	50                   	push   eax
c0018b88:	68 d9 b2 02 c0       	push   0xc002b2d9
c0018b8d:	e8 2a a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b9a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ba1:	75 05                	jne    c0018ba8 <CPU::displayFeatures()+0x10c>
c0018ba3:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018ba8:	52                   	push   edx
c0018ba9:	52                   	push   edx
c0018baa:	50                   	push   eax
c0018bab:	68 f0 b2 02 c0       	push   0xc002b2f0
c0018bb0:	e8 07 a0 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018bb5:	83 c4 10             	add    esp,0x10
c0018bb8:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018bbd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018bc4:	75 05                	jne    c0018bcb <CPU::displayFeatures()+0x12f>
c0018bc6:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018bcb:	51                   	push   ecx
c0018bcc:	51                   	push   ecx
c0018bcd:	50                   	push   eax
c0018bce:	68 07 b3 02 c0       	push   0xc002b307
c0018bd3:	e8 e4 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018bd8:	83 c4 10             	add    esp,0x10
c0018bdb:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018be0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018be7:	75 05                	jne    c0018bee <CPU::displayFeatures()+0x152>
c0018be9:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018bee:	52                   	push   edx
c0018bef:	52                   	push   edx
c0018bf0:	50                   	push   eax
c0018bf1:	68 1e b3 02 c0       	push   0xc002b31e
c0018bf6:	e8 c1 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018bfb:	83 c4 10             	add    esp,0x10
c0018bfe:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c03:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018c0a:	75 05                	jne    c0018c11 <CPU::displayFeatures()+0x175>
c0018c0c:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c11:	51                   	push   ecx
c0018c12:	51                   	push   ecx
c0018c13:	50                   	push   eax
c0018c14:	68 35 b3 02 c0       	push   0xc002b335
c0018c19:	e8 9e 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c26:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018c2d:	75 05                	jne    c0018c34 <CPU::displayFeatures()+0x198>
c0018c2f:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c34:	52                   	push   edx
c0018c35:	52                   	push   edx
c0018c36:	50                   	push   eax
c0018c37:	68 4c b3 02 c0       	push   0xc002b34c
c0018c3c:	e8 7b 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c49:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018c50:	75 05                	jne    c0018c57 <CPU::displayFeatures()+0x1bb>
c0018c52:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c57:	51                   	push   ecx
c0018c58:	51                   	push   ecx
c0018c59:	50                   	push   eax
c0018c5a:	68 63 b3 02 c0       	push   0xc002b363
c0018c5f:	e8 58 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c6c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018c73:	75 05                	jne    c0018c7a <CPU::displayFeatures()+0x1de>
c0018c75:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c7a:	52                   	push   edx
c0018c7b:	52                   	push   edx
c0018c7c:	50                   	push   eax
c0018c7d:	68 7a b3 02 c0       	push   0xc002b37a
c0018c82:	e8 35 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c8f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018c96:	75 05                	jne    c0018c9d <CPU::displayFeatures()+0x201>
c0018c98:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c9d:	51                   	push   ecx
c0018c9e:	51                   	push   ecx
c0018c9f:	50                   	push   eax
c0018ca0:	68 91 b3 02 c0       	push   0xc002b391
c0018ca5:	e8 12 9f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018caa:	83 c4 10             	add    esp,0x10
c0018cad:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018cb2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018cb9:	75 05                	jne    c0018cc0 <CPU::displayFeatures()+0x224>
c0018cbb:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018cc0:	52                   	push   edx
c0018cc1:	52                   	push   edx
c0018cc2:	50                   	push   eax
c0018cc3:	68 a8 b3 02 c0       	push   0xc002b3a8
c0018cc8:	e8 ef 9e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018cd5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018cdc:	78 05                	js     c0018ce3 <CPU::displayFeatures()+0x247>
c0018cde:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018ce3:	51                   	push   ecx
c0018ce4:	51                   	push   ecx
c0018ce5:	50                   	push   eax
c0018ce6:	68 bf b3 02 c0       	push   0xc002b3bf
c0018ceb:	e8 cc 9e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018cf8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018cff:	75 05                	jne    c0018d06 <CPU::displayFeatures()+0x26a>
c0018d01:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018d06:	52                   	push   edx
c0018d07:	52                   	push   edx
c0018d08:	50                   	push   eax
c0018d09:	68 d6 b3 02 c0       	push   0xc002b3d6
c0018d0e:	e8 a9 9e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0018d13:	83 c4 18             	add    esp,0x18
c0018d16:	5b                   	pop    ebx
c0018d17:	c3                   	ret    

c0018d18 <CPU::detectFeatures()>:
c0018d18:	55                   	push   ebp
c0018d19:	57                   	push   edi
c0018d1a:	56                   	push   esi
c0018d1b:	53                   	push   ebx
c0018d1c:	83 ec 50             	sub    esp,0x50
c0018d1f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018d23:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018d2d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018d34:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018d3a:	6a 0d                	push   0xd
c0018d3c:	6a 00                	push   0x0
c0018d3e:	57                   	push   edi
c0018d3f:	e8 34 7a fe ff       	call   c0000778 <memset>
c0018d44:	83 c4 10             	add    esp,0x10
c0018d47:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0018d4c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018d53:	0f 84 20 09 00 00    	je     c0019679 <CPU::detectFeatures()+0x961>
c0018d59:	83 ec 0c             	sub    esp,0xc
c0018d5c:	6a 10                	push   0x10
c0018d5e:	e8 f3 fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018d63:	83 e0 01             	and    eax,0x1
c0018d66:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d6f:	83 e0 fd             	and    eax,0xfffffffd
c0018d72:	09 d0                	or     eax,edx
c0018d74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d7a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018d81:	e8 d0 fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018d86:	83 e0 01             	and    eax,0x1
c0018d89:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d90:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d96:	83 e0 fb             	and    eax,0xfffffffb
c0018d99:	09 d0                	or     eax,edx
c0018d9b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018da1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018da8:	e8 a9 fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018dad:	83 e0 01             	and    eax,0x1
c0018db0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018db7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dbd:	83 e0 f7             	and    eax,0xfffffff7
c0018dc0:	09 d0                	or     eax,edx
c0018dc2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dc8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018dcf:	e8 82 fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018dd4:	83 e0 01             	and    eax,0x1
c0018dd7:	c1 e0 04             	shl    eax,0x4
c0018dda:	88 c2                	mov    dl,al
c0018ddc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018de2:	83 e0 ef             	and    eax,0xffffffef
c0018de5:	09 d0                	or     eax,edx
c0018de7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ded:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018df4:	e8 5d fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018df9:	83 e0 01             	and    eax,0x1
c0018dfc:	c1 e0 05             	shl    eax,0x5
c0018dff:	88 c2                	mov    dl,al
c0018e01:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e07:	83 e0 df             	and    eax,0xffffffdf
c0018e0a:	09 d0                	or     eax,edx
c0018e0c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e12:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018e19:	e8 38 fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018e1e:	83 e0 01             	and    eax,0x1
c0018e21:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e24:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e2a:	83 e0 fd             	and    eax,0xfffffffd
c0018e2d:	09 d0                	or     eax,edx
c0018e2f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e35:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018e3c:	e8 15 fb ff ff       	call   c0018956 <CPU::cpuidCheckEDX(unsigned int)>
c0018e41:	83 e0 01             	and    eax,0x1
c0018e44:	c1 e0 06             	shl    eax,0x6
c0018e47:	88 c2                	mov    dl,al
c0018e49:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e4f:	83 e0 bf             	and    eax,0xffffffbf
c0018e52:	09 d0                	or     eax,edx
c0018e54:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e5a:	58                   	pop    eax
c0018e5b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e5f:	56                   	push   esi
c0018e60:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e64:	55                   	push   ebp
c0018e65:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e69:	50                   	push   eax
c0018e6a:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018e6e:	52                   	push   edx
c0018e6f:	6a 00                	push   0x0
c0018e71:	e8 5c fa ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e76:	83 c4 1c             	add    esp,0x1c
c0018e79:	6a 04                	push   0x4
c0018e7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e7f:	50                   	push   eax
c0018e80:	57                   	push   edi
c0018e81:	e8 be 78 fe ff       	call   c0000744 <memcpy>
c0018e86:	83 c4 0c             	add    esp,0xc
c0018e89:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018e8f:	6a 04                	push   0x4
c0018e91:	56                   	push   esi
c0018e92:	50                   	push   eax
c0018e93:	e8 ac 78 fe ff       	call   c0000744 <memcpy>
c0018e98:	83 c4 0c             	add    esp,0xc
c0018e9b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018ea1:	6a 04                	push   0x4
c0018ea3:	55                   	push   ebp
c0018ea4:	50                   	push   eax
c0018ea5:	e8 9a 78 fe ff       	call   c0000744 <memcpy>
c0018eaa:	58                   	pop    eax
c0018eab:	5a                   	pop    edx
c0018eac:	68 ed b3 02 c0       	push   0xc002b3ed
c0018eb1:	57                   	push   edi
c0018eb2:	e8 09 7a fe ff       	call   c00008c0 <strcmp>
c0018eb7:	83 c4 10             	add    esp,0x10
c0018eba:	85 c0                	test   eax,eax
c0018ebc:	75 0f                	jne    c0018ecd <CPU::detectFeatures()+0x1b5>
c0018ebe:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018ec8:	e9 22 02 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018ecd:	50                   	push   eax
c0018ece:	50                   	push   eax
c0018ecf:	68 fa b3 02 c0       	push   0xc002b3fa
c0018ed4:	57                   	push   edi
c0018ed5:	e8 e6 79 fe ff       	call   c00008c0 <strcmp>
c0018eda:	83 c4 10             	add    esp,0x10
c0018edd:	85 c0                	test   eax,eax
c0018edf:	74 dd                	je     c0018ebe <CPU::detectFeatures()+0x1a6>
c0018ee1:	51                   	push   ecx
c0018ee2:	51                   	push   ecx
c0018ee3:	68 07 b4 02 c0       	push   0xc002b407
c0018ee8:	57                   	push   edi
c0018ee9:	e8 d2 79 fe ff       	call   c00008c0 <strcmp>
c0018eee:	83 c4 10             	add    esp,0x10
c0018ef1:	85 c0                	test   eax,eax
c0018ef3:	74 2a                	je     c0018f1f <CPU::detectFeatures()+0x207>
c0018ef5:	52                   	push   edx
c0018ef6:	52                   	push   edx
c0018ef7:	68 14 b4 02 c0       	push   0xc002b414
c0018efc:	57                   	push   edi
c0018efd:	e8 be 79 fe ff       	call   c00008c0 <strcmp>
c0018f02:	83 c4 10             	add    esp,0x10
c0018f05:	85 c0                	test   eax,eax
c0018f07:	74 16                	je     c0018f1f <CPU::detectFeatures()+0x207>
c0018f09:	50                   	push   eax
c0018f0a:	50                   	push   eax
c0018f0b:	68 21 b4 02 c0       	push   0xc002b421
c0018f10:	57                   	push   edi
c0018f11:	e8 aa 79 fe ff       	call   c00008c0 <strcmp>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	85 c0                	test   eax,eax
c0018f1b:	74 48                	je     c0018f65 <CPU::detectFeatures()+0x24d>
c0018f1d:	eb 0f                	jmp    c0018f2e <CPU::detectFeatures()+0x216>
c0018f1f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018f29:	e9 c1 01 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018f2e:	50                   	push   eax
c0018f2f:	50                   	push   eax
c0018f30:	68 2e b4 02 c0       	push   0xc002b42e
c0018f35:	57                   	push   edi
c0018f36:	e8 85 79 fe ff       	call   c00008c0 <strcmp>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	85 c0                	test   eax,eax
c0018f40:	74 23                	je     c0018f65 <CPU::detectFeatures()+0x24d>
c0018f42:	50                   	push   eax
c0018f43:	50                   	push   eax
c0018f44:	68 3b b4 02 c0       	push   0xc002b43b
c0018f49:	57                   	push   edi
c0018f4a:	e8 71 79 fe ff       	call   c00008c0 <strcmp>
c0018f4f:	83 c4 10             	add    esp,0x10
c0018f52:	85 c0                	test   eax,eax
c0018f54:	75 1e                	jne    c0018f74 <CPU::detectFeatures()+0x25c>
c0018f56:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018f60:	e9 8a 01 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018f65:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018f6f:	e9 7b 01 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018f74:	50                   	push   eax
c0018f75:	50                   	push   eax
c0018f76:	68 48 b4 02 c0       	push   0xc002b448
c0018f7b:	57                   	push   edi
c0018f7c:	e8 3f 79 fe ff       	call   c00008c0 <strcmp>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	85 c0                	test   eax,eax
c0018f86:	75 0f                	jne    c0018f97 <CPU::detectFeatures()+0x27f>
c0018f88:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018f92:	e9 58 01 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018f97:	50                   	push   eax
c0018f98:	50                   	push   eax
c0018f99:	68 07 b4 02 c0       	push   0xc002b407
c0018f9e:	57                   	push   edi
c0018f9f:	e8 1c 79 fe ff       	call   c00008c0 <strcmp>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	85 c0                	test   eax,eax
c0018fa9:	75 0f                	jne    c0018fba <CPU::detectFeatures()+0x2a2>
c0018fab:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018fb5:	e9 35 01 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018fba:	50                   	push   eax
c0018fbb:	50                   	push   eax
c0018fbc:	68 55 b4 02 c0       	push   0xc002b455
c0018fc1:	57                   	push   edi
c0018fc2:	e8 f9 78 fe ff       	call   c00008c0 <strcmp>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	85 c0                	test   eax,eax
c0018fcc:	75 0f                	jne    c0018fdd <CPU::detectFeatures()+0x2c5>
c0018fce:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018fd8:	e9 12 01 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0018fdd:	51                   	push   ecx
c0018fde:	51                   	push   ecx
c0018fdf:	68 62 b4 02 c0       	push   0xc002b462
c0018fe4:	57                   	push   edi
c0018fe5:	e8 d6 78 fe ff       	call   c00008c0 <strcmp>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	85 c0                	test   eax,eax
c0018fef:	75 0f                	jne    c0019000 <CPU::detectFeatures()+0x2e8>
c0018ff1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018ffb:	e9 ef 00 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0019000:	52                   	push   edx
c0019001:	52                   	push   edx
c0019002:	68 6f b4 02 c0       	push   0xc002b46f
c0019007:	57                   	push   edi
c0019008:	e8 b3 78 fe ff       	call   c00008c0 <strcmp>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	85 c0                	test   eax,eax
c0019012:	75 0f                	jne    c0019023 <CPU::detectFeatures()+0x30b>
c0019014:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001901e:	e9 cc 00 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0019023:	50                   	push   eax
c0019024:	50                   	push   eax
c0019025:	68 7c b4 02 c0       	push   0xc002b47c
c001902a:	57                   	push   edi
c001902b:	e8 90 78 fe ff       	call   c00008c0 <strcmp>
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	85 c0                	test   eax,eax
c0019035:	75 0f                	jne    c0019046 <CPU::detectFeatures()+0x32e>
c0019037:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019041:	e9 a9 00 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0019046:	50                   	push   eax
c0019047:	50                   	push   eax
c0019048:	68 89 b4 02 c0       	push   0xc002b489
c001904d:	57                   	push   edi
c001904e:	e8 6d 78 fe ff       	call   c00008c0 <strcmp>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	85 c0                	test   eax,eax
c0019058:	75 0f                	jne    c0019069 <CPU::detectFeatures()+0x351>
c001905a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019064:	e9 86 00 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0019069:	50                   	push   eax
c001906a:	50                   	push   eax
c001906b:	68 96 b4 02 c0       	push   0xc002b496
c0019070:	57                   	push   edi
c0019071:	e8 4a 78 fe ff       	call   c00008c0 <strcmp>
c0019076:	83 c4 10             	add    esp,0x10
c0019079:	85 c0                	test   eax,eax
c001907b:	75 0c                	jne    c0019089 <CPU::detectFeatures()+0x371>
c001907d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019087:	eb 66                	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c0019089:	50                   	push   eax
c001908a:	50                   	push   eax
c001908b:	68 a3 b4 02 c0       	push   0xc002b4a3
c0019090:	57                   	push   edi
c0019091:	e8 2a 78 fe ff       	call   c00008c0 <strcmp>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	85 c0                	test   eax,eax
c001909b:	75 0c                	jne    c00190a9 <CPU::detectFeatures()+0x391>
c001909d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00190a7:	eb 46                	jmp    c00190ef <CPU::detectFeatures()+0x3d7>
c00190a9:	50                   	push   eax
c00190aa:	50                   	push   eax
c00190ab:	68 b0 b4 02 c0       	push   0xc002b4b0
c00190b0:	57                   	push   edi
c00190b1:	e8 0a 78 fe ff       	call   c00008c0 <strcmp>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	85 c0                	test   eax,eax
c00190bb:	74 e0                	je     c001909d <CPU::detectFeatures()+0x385>
c00190bd:	50                   	push   eax
c00190be:	50                   	push   eax
c00190bf:	68 bd b4 02 c0       	push   0xc002b4bd
c00190c4:	57                   	push   edi
c00190c5:	e8 f6 77 fe ff       	call   c00008c0 <strcmp>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	85 c0                	test   eax,eax
c00190cf:	74 cc                	je     c001909d <CPU::detectFeatures()+0x385>
c00190d1:	51                   	push   ecx
c00190d2:	51                   	push   ecx
c00190d3:	68 ca b4 02 c0       	push   0xc002b4ca
c00190d8:	57                   	push   edi
c00190d9:	e8 e2 77 fe ff       	call   c00008c0 <strcmp>
c00190de:	83 c4 10             	add    esp,0x10
c00190e1:	85 c0                	test   eax,eax
c00190e3:	74 b8                	je     c001909d <CPU::detectFeatures()+0x385>
c00190e5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00190ef:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00190f4:	0f 86 be 00 00 00    	jbe    c00191b8 <CPU::detectFeatures()+0x4a0>
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	68 80 00 00 00       	push   0x80
c0019102:	e8 ab f8 ff ff       	call   c00189b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019107:	83 e0 01             	and    eax,0x1
c001910a:	c1 e0 06             	shl    eax,0x6
c001910d:	88 c2                	mov    dl,al
c001910f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019115:	83 e0 bf             	and    eax,0xffffffbf
c0019118:	09 d0                	or     eax,edx
c001911a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019120:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019127:	e8 86 f8 ff ff       	call   c00189b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001912c:	83 e0 01             	and    eax,0x1
c001912f:	c1 e0 04             	shl    eax,0x4
c0019132:	88 c2                	mov    dl,al
c0019134:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001913a:	83 e0 ef             	and    eax,0xffffffef
c001913d:	09 d0                	or     eax,edx
c001913f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019145:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001914c:	e8 61 f8 ff ff       	call   c00189b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019151:	c1 e0 07             	shl    eax,0x7
c0019154:	88 c2                	mov    dl,al
c0019156:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915c:	83 e0 7f             	and    eax,0x7f
c001915f:	09 d0                	or     eax,edx
c0019161:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019167:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001916e:	e8 6d f8 ff ff       	call   c00189e0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019173:	83 e0 01             	and    eax,0x1
c0019176:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001917d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019183:	83 e0 f7             	and    eax,0xfffffff7
c0019186:	09 d0                	or     eax,edx
c0019188:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001918e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019195:	e8 46 f8 ff ff       	call   c00189e0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001919a:	83 c4 10             	add    esp,0x10
c001919d:	83 e0 01             	and    eax,0x1
c00191a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191a7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191ad:	83 e0 fb             	and    eax,0xfffffffb
c00191b0:	09 d0                	or     eax,edx
c00191b2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	56                   	push   esi
c00191bc:	55                   	push   ebp
c00191bd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00191c1:	57                   	push   edi
c00191c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191c6:	50                   	push   eax
c00191c7:	6a 01                	push   0x1
c00191c9:	e8 04 f7 ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191ce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00191d2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191d8:	88 ca                	mov    dl,cl
c00191da:	83 e0 f0             	and    eax,0xfffffff0
c00191dd:	83 e2 0f             	and    edx,0xf
c00191e0:	09 d0                	or     eax,edx
c00191e2:	88 ca                	mov    dl,cl
c00191e4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00191ea:	c0 ea 04             	shr    dl,0x4
c00191ed:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00191f1:	0f b6 c2             	movzx  eax,dl
c00191f4:	83 c4 20             	add    esp,0x20
c00191f7:	c1 e0 06             	shl    eax,0x6
c00191fa:	89 c5                	mov    ebp,eax
c00191fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019202:	66 25 3f c0          	and    ax,0xc03f
c0019206:	09 e8                	or     eax,ebp
c0019208:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001920f:	89 c8                	mov    eax,ecx
c0019211:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019217:	c1 e8 08             	shr    eax,0x8
c001921a:	83 e2 3f             	and    edx,0x3f
c001921d:	83 e0 0f             	and    eax,0xf
c0019220:	89 c5                	mov    ebp,eax
c0019222:	c1 e5 06             	shl    ebp,0x6
c0019225:	09 d5                	or     ebp,edx
c0019227:	89 ea                	mov    edx,ebp
c0019229:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001922f:	88 c2                	mov    dl,al
c0019231:	c0 ea 02             	shr    dl,0x2
c0019234:	89 d5                	mov    ebp,edx
c0019236:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001923c:	83 e2 c0             	and    edx,0xffffffc0
c001923f:	09 d5                	or     ebp,edx
c0019241:	89 ea                	mov    edx,ebp
c0019243:	89 cd                	mov    ebp,ecx
c0019245:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001924b:	c1 ed 0c             	shr    ebp,0xc
c001924e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019254:	83 e5 03             	and    ebp,0x3
c0019257:	83 e2 cf             	and    edx,0xffffffcf
c001925a:	c1 e5 04             	shl    ebp,0x4
c001925d:	09 d5                	or     ebp,edx
c001925f:	3c 06                	cmp    al,0x6
c0019261:	89 ea                	mov    edx,ebp
c0019263:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019269:	74 04                	je     c001926f <CPU::detectFeatures()+0x557>
c001926b:	3c 0f                	cmp    al,0xf
c001926d:	75 5c                	jne    c00192cb <CPU::detectFeatures()+0x5b3>
c001926f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019273:	89 cd                	mov    ebp,ecx
c0019275:	c1 ed 10             	shr    ebp,0x10
c0019278:	c1 e5 04             	shl    ebp,0x4
c001927b:	09 ea                	or     edx,ebp
c001927d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019283:	0f b6 d2             	movzx  edx,dl
c0019286:	66 81 e5 3f c0       	and    bp,0xc03f
c001928b:	c1 e2 06             	shl    edx,0x6
c001928e:	09 ea                	or     edx,ebp
c0019290:	3c 0f                	cmp    al,0xf
c0019292:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019299:	75 30                	jne    c00192cb <CPU::detectFeatures()+0x5b3>
c001929b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00192a1:	c1 e9 14             	shr    ecx,0x14
c00192a4:	83 e0 3f             	and    eax,0x3f
c00192a7:	83 c1 0f             	add    ecx,0xf
c00192aa:	88 ca                	mov    dl,cl
c00192ac:	c0 e9 02             	shr    cl,0x2
c00192af:	c1 e2 06             	shl    edx,0x6
c00192b2:	09 d0                	or     eax,edx
c00192b4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00192ba:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00192c0:	83 e0 c0             	and    eax,0xffffffc0
c00192c3:	09 c1                	or     ecx,eax
c00192c5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00192cb:	83 ec 0c             	sub    esp,0xc
c00192ce:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00192d5:	56                   	push   esi
c00192d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192da:	50                   	push   eax
c00192db:	57                   	push   edi
c00192dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192e0:	55                   	push   ebp
c00192e1:	68 00 00 00 80       	push   0x80000000
c00192e6:	e8 e7 f5 ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192eb:	83 c4 20             	add    esp,0x20
c00192ee:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00192f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192fa:	76 1e                	jbe    c001931a <CPU::detectFeatures()+0x602>
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	56                   	push   esi
c0019300:	50                   	push   eax
c0019301:	57                   	push   edi
c0019302:	55                   	push   ebp
c0019303:	68 01 00 00 80       	push   0x80000001
c0019308:	e8 c5 f5 ff ff       	call   c00188d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001930d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019317:	83 c4 20             	add    esp,0x20
c001931a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019320:	83 f8 01             	cmp    eax,0x1
c0019323:	75 6f                	jne    c0019394 <CPU::detectFeatures()+0x67c>
c0019325:	51                   	push   ecx
c0019326:	51                   	push   ecx
c0019327:	68 d6 b4 02 c0       	push   0xc002b4d6
c001932c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019330:	56                   	push   esi
c0019331:	e8 fe 74 fe ff       	call   c0000834 <strcpy>
c0019336:	5f                   	pop    edi
c0019337:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001933d:	5d                   	pop    ebp
c001933e:	66 c1 e8 06          	shr    ax,0x6
c0019342:	0f b6 c0             	movzx  eax,al
c0019345:	50                   	push   eax
c0019346:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001934c:	c1 e8 0e             	shr    eax,0xe
c001934f:	0f b6 c0             	movzx  eax,al
c0019352:	50                   	push   eax
c0019353:	e8 24 f2 ff ff       	call   c001857c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019358:	5a                   	pop    edx
c0019359:	59                   	pop    ecx
c001935a:	50                   	push   eax
c001935b:	56                   	push   esi
c001935c:	e8 13 76 fe ff       	call   c0000974 <strcat>
c0019361:	5f                   	pop    edi
c0019362:	5d                   	pop    ebp
c0019363:	56                   	push   esi
c0019364:	53                   	push   ebx
c0019365:	e8 5a ae ff ff       	call   c00141c4 <Device::setName(char const*)>
c001936a:	58                   	pop    eax
c001936b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019371:	5a                   	pop    edx
c0019372:	68 dd b4 02 c0       	push   0xc002b4dd
c0019377:	50                   	push   eax
c0019378:	e8 43 75 fe ff       	call   c00008c0 <strcmp>
c001937d:	83 c4 10             	add    esp,0x10
c0019380:	85 c0                	test   eax,eax
c0019382:	0f 85 71 03 00 00    	jne    c00196f9 <CPU::detectFeatures()+0x9e1>
c0019388:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001938f:	e9 65 03 00 00       	jmp    c00196f9 <CPU::detectFeatures()+0x9e1>
c0019394:	83 f8 02             	cmp    eax,0x2
c0019397:	0f 85 b5 00 00 00    	jne    c0019452 <CPU::detectFeatures()+0x73a>
c001939d:	57                   	push   edi
c001939e:	57                   	push   edi
c001939f:	68 ef b4 02 c0       	push   0xc002b4ef
c00193a4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00193a8:	56                   	push   esi
c00193a9:	e8 86 74 fe ff       	call   c0000834 <strcpy>
c00193ae:	5d                   	pop    ebp
c00193af:	58                   	pop    eax
c00193b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193b6:	66 c1 e8 06          	shr    ax,0x6
c00193ba:	0f b6 c0             	movzx  eax,al
c00193bd:	50                   	push   eax
c00193be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193c4:	c1 e8 0e             	shr    eax,0xe
c00193c7:	0f b6 c0             	movzx  eax,al
c00193ca:	50                   	push   eax
c00193cb:	e8 18 f0 ff ff       	call   c00183e8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00193d0:	5a                   	pop    edx
c00193d1:	59                   	pop    ecx
c00193d2:	50                   	push   eax
c00193d3:	56                   	push   esi
c00193d4:	e8 9b 75 fe ff       	call   c0000974 <strcat>
c00193d9:	5f                   	pop    edi
c00193da:	5d                   	pop    ebp
c00193db:	56                   	push   esi
c00193dc:	53                   	push   ebx
c00193dd:	e8 e2 ad ff ff       	call   c00141c4 <Device::setName(char const*)>
c00193e2:	58                   	pop    eax
c00193e3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00193e9:	5a                   	pop    edx
c00193ea:	68 f4 b4 02 c0       	push   0xc002b4f4
c00193ef:	50                   	push   eax
c00193f0:	e8 cb 74 fe ff       	call   c00008c0 <strcmp>
c00193f5:	83 c4 10             	add    esp,0x10
c00193f8:	85 c0                	test   eax,eax
c00193fa:	75 20                	jne    c001941c <CPU::detectFeatures()+0x704>
c00193fc:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c0019402:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019408:	a8 01                	test   al,0x1
c001940a:	74 10                	je     c001941c <CPU::detectFeatures()+0x704>
c001940c:	83 e0 fe             	and    eax,0xfffffffe
c001940f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019415:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001941c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019422:	c1 e8 0e             	shr    eax,0xe
c0019425:	3c 05                	cmp    al,0x5
c0019427:	0f 85 cc 02 00 00    	jne    c00196f9 <CPU::detectFeatures()+0x9e1>
c001942d:	56                   	push   esi
c001942e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019434:	83 e0 0f             	and    eax,0xf
c0019437:	50                   	push   eax
c0019438:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001943e:	66 c1 e8 06          	shr    ax,0x6
c0019442:	0f b6 c0             	movzx  eax,al
c0019445:	50                   	push   eax
c0019446:	6a 05                	push   0x5
c0019448:	e8 11 f4 ff ff       	call   c001885e <CPU::AMD_K6_writeback(int, int, int)>
c001944d:	e9 1f 02 00 00       	jmp    c0019671 <CPU::detectFeatures()+0x959>
c0019452:	8d 50 fd             	lea    edx,[eax-0x3]
c0019455:	83 fa 01             	cmp    edx,0x1
c0019458:	76 09                	jbe    c0019463 <CPU::detectFeatures()+0x74b>
c001945a:	83 f8 06             	cmp    eax,0x6
c001945d:	0f 85 91 01 00 00    	jne    c00195f4 <CPU::detectFeatures()+0x8dc>
c0019463:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019469:	c1 ea 0e             	shr    edx,0xe
c001946c:	80 fa 05             	cmp    dl,0x5
c001946f:	75 7b                	jne    c00194ec <CPU::detectFeatures()+0x7d4>
c0019471:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019477:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001947c:	66 81 fa 00 01       	cmp    dx,0x100
c0019481:	75 0c                	jne    c001948f <CPU::detectFeatures()+0x777>
c0019483:	51                   	push   ecx
c0019484:	51                   	push   ecx
c0019485:	68 fb b4 02 c0       	push   0xc002b4fb
c001948a:	e9 dc 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c001948f:	66 81 fa 00 02       	cmp    dx,0x200
c0019494:	75 0c                	jne    c00194a2 <CPU::detectFeatures()+0x78a>
c0019496:	52                   	push   edx
c0019497:	52                   	push   edx
c0019498:	68 0e b5 02 c0       	push   0xc002b50e
c001949d:	e9 c9 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c00194a2:	66 81 fa 40 02       	cmp    dx,0x240
c00194a7:	75 0c                	jne    c00194b5 <CPU::detectFeatures()+0x79d>
c00194a9:	50                   	push   eax
c00194aa:	50                   	push   eax
c00194ab:	68 20 b5 02 c0       	push   0xc002b520
c00194b0:	e9 b6 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c00194b5:	83 f8 06             	cmp    eax,0x6
c00194b8:	75 0c                	jne    c00194c6 <CPU::detectFeatures()+0x7ae>
c00194ba:	50                   	push   eax
c00194bb:	50                   	push   eax
c00194bc:	68 32 b5 02 c0       	push   0xc002b532
c00194c1:	e9 a5 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c00194c6:	83 f8 04             	cmp    eax,0x4
c00194c9:	75 0c                	jne    c00194d7 <CPU::detectFeatures()+0x7bf>
c00194cb:	50                   	push   eax
c00194cc:	50                   	push   eax
c00194cd:	68 3e b5 02 c0       	push   0xc002b53e
c00194d2:	e9 94 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c00194d7:	83 f8 03             	cmp    eax,0x3
c00194da:	0f 85 19 02 00 00    	jne    c00196f9 <CPU::detectFeatures()+0x9e1>
c00194e0:	50                   	push   eax
c00194e1:	50                   	push   eax
c00194e2:	68 46 b5 02 c0       	push   0xc002b546
c00194e7:	e9 7f 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c00194ec:	80 fa 06             	cmp    dl,0x6
c00194ef:	0f 85 db 00 00 00    	jne    c00195d0 <CPU::detectFeatures()+0x8b8>
c00194f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194fb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019500:	66 81 fa 80 01       	cmp    dx,0x180
c0019505:	75 0c                	jne    c0019513 <CPU::detectFeatures()+0x7fb>
c0019507:	50                   	push   eax
c0019508:	50                   	push   eax
c0019509:	68 51 b5 02 c0       	push   0xc002b551
c001950e:	e9 58 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019513:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019519:	66 f7 c1 80 ff       	test   cx,0xff80
c001951e:	75 0c                	jne    c001952c <CPU::detectFeatures()+0x814>
c0019520:	50                   	push   eax
c0019521:	50                   	push   eax
c0019522:	68 61 b5 02 c0       	push   0xc002b561
c0019527:	e9 3f 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c001952c:	66 81 fa 40 02       	cmp    dx,0x240
c0019531:	75 0c                	jne    c001953f <CPU::detectFeatures()+0x827>
c0019533:	55                   	push   ebp
c0019534:	55                   	push   ebp
c0019535:	68 68 b5 02 c0       	push   0xc002b568
c001953a:	e9 2c 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c001953f:	66 81 fa 80 02       	cmp    dx,0x280
c0019544:	75 0c                	jne    c0019552 <CPU::detectFeatures()+0x83a>
c0019546:	57                   	push   edi
c0019547:	57                   	push   edi
c0019548:	68 71 b5 02 c0       	push   0xc002b571
c001954d:	e9 19 01 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019552:	66 81 fa 40 03       	cmp    dx,0x340
c0019557:	74 ed                	je     c0019546 <CPU::detectFeatures()+0x82e>
c0019559:	66 81 fa c0 03       	cmp    dx,0x3c0
c001955e:	75 0c                	jne    c001956c <CPU::detectFeatures()+0x854>
c0019560:	56                   	push   esi
c0019561:	56                   	push   esi
c0019562:	68 78 b5 02 c0       	push   0xc002b578
c0019567:	e9 ff 00 00 00       	jmp    c001966b <CPU::detectFeatures()+0x953>
c001956c:	83 f8 06             	cmp    eax,0x6
c001956f:	0f 84 45 ff ff ff    	je     c00194ba <CPU::detectFeatures()+0x7a2>
c0019575:	83 f8 04             	cmp    eax,0x4
c0019578:	0f 84 4d ff ff ff    	je     c00194cb <CPU::detectFeatures()+0x7b3>
c001957e:	83 f8 03             	cmp    eax,0x3
c0019581:	0f 85 72 01 00 00    	jne    c00196f9 <CPU::detectFeatures()+0x9e1>
c0019587:	51                   	push   ecx
c0019588:	51                   	push   ecx
c0019589:	68 81 b5 02 c0       	push   0xc002b581
c001958e:	53                   	push   ebx
c001958f:	e8 30 ac ff ff       	call   c00141c4 <Device::setName(char const*)>
c0019594:	b1 c1                	mov    cl,0xc1
c0019596:	88 c8                	mov    al,cl
c0019598:	e6 22                	out    0x22,al
c001959a:	e4 23                	in     al,0x23
c001959c:	88 c2                	mov    dl,al
c001959e:	88 c8                	mov    al,cl
c00195a0:	e6 22                	out    0x22,al
c00195a2:	88 d0                	mov    al,dl
c00195a4:	83 c8 10             	or     eax,0x10
c00195a7:	e6 23                	out    0x23,al
c00195a9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195b0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195b3:	89 d0                	mov    eax,edx
c00195b5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00195bb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00195bf:	40                   	inc    eax
c00195c0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195cb:	e9 a1 00 00 00       	jmp    c0019671 <CPU::detectFeatures()+0x959>
c00195d0:	83 f8 06             	cmp    eax,0x6
c00195d3:	0f 84 e1 fe ff ff    	je     c00194ba <CPU::detectFeatures()+0x7a2>
c00195d9:	83 f8 04             	cmp    eax,0x4
c00195dc:	0f 84 e9 fe ff ff    	je     c00194cb <CPU::detectFeatures()+0x7b3>
c00195e2:	83 f8 03             	cmp    eax,0x3
c00195e5:	0f 85 0e 01 00 00    	jne    c00196f9 <CPU::detectFeatures()+0x9e1>
c00195eb:	52                   	push   edx
c00195ec:	52                   	push   edx
c00195ed:	68 8c b5 02 c0       	push   0xc002b58c
c00195f2:	eb 77                	jmp    c001966b <CPU::detectFeatures()+0x953>
c00195f4:	83 f8 07             	cmp    eax,0x7
c00195f7:	75 09                	jne    c0019602 <CPU::detectFeatures()+0x8ea>
c00195f9:	50                   	push   eax
c00195fa:	50                   	push   eax
c00195fb:	68 96 b5 02 c0       	push   0xc002b596
c0019600:	eb 69                	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019602:	83 f8 0a             	cmp    eax,0xa
c0019605:	75 09                	jne    c0019610 <CPU::detectFeatures()+0x8f8>
c0019607:	50                   	push   eax
c0019608:	50                   	push   eax
c0019609:	68 a1 b5 02 c0       	push   0xc002b5a1
c001960e:	eb 5b                	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019610:	83 f8 0b             	cmp    eax,0xb
c0019613:	75 09                	jne    c001961e <CPU::detectFeatures()+0x906>
c0019615:	50                   	push   eax
c0019616:	50                   	push   eax
c0019617:	68 a9 b5 02 c0       	push   0xc002b5a9
c001961c:	eb 4d                	jmp    c001966b <CPU::detectFeatures()+0x953>
c001961e:	83 f8 08             	cmp    eax,0x8
c0019621:	75 09                	jne    c001962c <CPU::detectFeatures()+0x914>
c0019623:	50                   	push   eax
c0019624:	50                   	push   eax
c0019625:	68 b2 b5 02 c0       	push   0xc002b5b2
c001962a:	eb 3f                	jmp    c001966b <CPU::detectFeatures()+0x953>
c001962c:	83 f8 09             	cmp    eax,0x9
c001962f:	75 09                	jne    c001963a <CPU::detectFeatures()+0x922>
c0019631:	50                   	push   eax
c0019632:	50                   	push   eax
c0019633:	68 ba b5 02 c0       	push   0xc002b5ba
c0019638:	eb 31                	jmp    c001966b <CPU::detectFeatures()+0x953>
c001963a:	83 f8 05             	cmp    eax,0x5
c001963d:	75 09                	jne    c0019648 <CPU::detectFeatures()+0x930>
c001963f:	50                   	push   eax
c0019640:	50                   	push   eax
c0019641:	68 c2 b5 02 c0       	push   0xc002b5c2
c0019646:	eb 23                	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019648:	83 f8 0c             	cmp    eax,0xc
c001964b:	75 09                	jne    c0019656 <CPU::detectFeatures()+0x93e>
c001964d:	55                   	push   ebp
c001964e:	55                   	push   ebp
c001964f:	68 d0 b5 02 c0       	push   0xc002b5d0
c0019654:	eb 15                	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019656:	83 f8 0d             	cmp    eax,0xd
c0019659:	75 09                	jne    c0019664 <CPU::detectFeatures()+0x94c>
c001965b:	57                   	push   edi
c001965c:	57                   	push   edi
c001965d:	68 db b5 02 c0       	push   0xc002b5db
c0019662:	eb 07                	jmp    c001966b <CPU::detectFeatures()+0x953>
c0019664:	56                   	push   esi
c0019665:	56                   	push   esi
c0019666:	68 ef b5 02 c0       	push   0xc002b5ef
c001966b:	53                   	push   ebx
c001966c:	e8 53 ab ff ff       	call   c00141c4 <Device::setName(char const*)>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	e9 80 00 00 00       	jmp    c00196f9 <CPU::detectFeatures()+0x9e1>
c0019679:	51                   	push   ecx
c001967a:	51                   	push   ecx
c001967b:	68 3b b4 02 c0       	push   0xc002b43b
c0019680:	57                   	push   edi
c0019681:	e8 ae 71 fe ff       	call   c0000834 <strcpy>
c0019686:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019690:	e8 19 6c fe ff       	call   c00002ae <is486>
c0019695:	83 c4 10             	add    esp,0x10
c0019698:	85 c0                	test   eax,eax
c001969a:	74 2b                	je     c00196c7 <CPU::detectFeatures()+0x9af>
c001969c:	52                   	push   edx
c001969d:	52                   	push   edx
c001969e:	68 fb b5 02 c0       	push   0xc002b5fb
c00196a3:	53                   	push   ebx
c00196a4:	e8 1b ab ff ff       	call   c00141c4 <Device::setName(char const*)>
c00196a9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196b0:	0f 20 c0             	mov    eax,cr0
c00196b3:	83 e0 14             	and    eax,0x14
c00196b6:	83 c4 10             	add    esp,0x10
c00196b9:	83 f8 04             	cmp    eax,0x4
c00196bc:	75 1f                	jne    c00196dd <CPU::detectFeatures()+0x9c5>
c00196be:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00196c5:	eb 32                	jmp    c00196f9 <CPU::detectFeatures()+0x9e1>
c00196c7:	50                   	push   eax
c00196c8:	50                   	push   eax
c00196c9:	68 06 b6 02 c0       	push   0xc002b606
c00196ce:	53                   	push   ebx
c00196cf:	e8 f0 aa ff ff       	call   c00141c4 <Device::setName(char const*)>
c00196d4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00196db:	eb d3                	jmp    c00196b0 <CPU::detectFeatures()+0x998>
c00196dd:	e8 a7 6b fe ff       	call   c0000289 <hasLegacyFPU>
c00196e2:	83 e0 01             	and    eax,0x1
c00196e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00196e8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00196ee:	83 e0 fd             	and    eax,0xfffffffd
c00196f1:	09 d0                	or     eax,edx
c00196f3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00196f9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019700:	83 c4 4c             	add    esp,0x4c
c0019703:	5b                   	pop    ebx
c0019704:	5e                   	pop    esi
c0019705:	5f                   	pop    edi
c0019706:	5d                   	pop    ebp
c0019707:	c3                   	ret    

c0019708 <CPU::setupSMEP()>:
c0019708:	0f 20 e0             	mov    eax,cr4
c001970b:	0d 00 00 10 00       	or     eax,0x100000
c0019710:	0f 22 e0             	mov    cr4,eax
c0019713:	c3                   	ret    

c0019714 <CPU::setupUMIP()>:
c0019714:	0f 20 e0             	mov    eax,cr4
c0019717:	80 cc 08             	or     ah,0x8
c001971a:	0f 22 e0             	mov    cr4,eax
c001971d:	c3                   	ret    

c001971e <CPU::setupTSC()>:
c001971e:	0f 20 e0             	mov    eax,cr4
c0019721:	83 c8 04             	or     eax,0x4
c0019724:	0f 22 e0             	mov    cr4,eax
c0019727:	c3                   	ret    

c0019728 <CPU::setupLargePages()>:
c0019728:	0f 20 e0             	mov    eax,cr4
c001972b:	83 c8 10             	or     eax,0x10
c001972e:	0f 22 e0             	mov    cr4,eax
c0019731:	c3                   	ret    

c0019732 <CPU::setupPAT()>:
c0019732:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0019737:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001973e:	74 2c                	je     c001976c <CPU::setupPAT()+0x3a>
c0019740:	53                   	push   ebx
c0019741:	83 ec 10             	sub    esp,0x10
c0019744:	68 77 02 00 00       	push   0x277
c0019749:	50                   	push   eax
c001974a:	e8 99 56 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c001974f:	83 e2 f8             	and    edx,0xfffffff8
c0019752:	83 ca 01             	or     edx,0x1
c0019755:	52                   	push   edx
c0019756:	50                   	push   eax
c0019757:	68 77 02 00 00       	push   0x277
c001975c:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c0019762:	e8 ad 56 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019767:	83 c4 28             	add    esp,0x28
c001976a:	5b                   	pop    ebx
c001976b:	c3                   	ret    
c001976c:	c3                   	ret    
c001976d:	90                   	nop

c001976e <CPU::setupMTRR()>:
c001976e:	c3                   	ret    
c001976f:	90                   	nop

c0019770 <CPU::setupGlobalPages()>:
c0019770:	0f 20 e0             	mov    eax,cr4
c0019773:	0c 80                	or     al,0x80
c0019775:	0f 22 e0             	mov    cr4,eax
c0019778:	c3                   	ret    
c0019779:	90                   	nop

c001977a <CPU::allowUsermodeDataAccess()>:
c001977a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001977e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019785:	74 03                	je     c001978a <CPU::allowUsermodeDataAccess()+0x10>
c0019787:	0f 01 cb             	stac   
c001978a:	c3                   	ret    
c001978b:	90                   	nop

c001978c <CPU::prohibitUsermodeDataAccess()>:
c001978c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019790:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019797:	74 03                	je     c001979c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019799:	0f 01 ca             	clac   
c001979c:	c3                   	ret    
c001979d:	90                   	nop

c001979e <CPU::setupSMAP()>:
c001979e:	0f 20 e0             	mov    eax,cr4
c00197a1:	0d 00 00 20 00       	or     eax,0x200000
c00197a6:	0f 22 e0             	mov    cr4,eax
c00197a9:	eb e1                	jmp    c001978c <CPU::prohibitUsermodeDataAccess()>
c00197ab:	90                   	nop

c00197ac <CPU::setupFeatures()>:
c00197ac:	83 ec 0c             	sub    esp,0xc
c00197af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197b3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00197ba:	74 07                	je     c00197c3 <CPU::setupFeatures()+0x17>
c00197bc:	52                   	push   edx
c00197bd:	e8 46 ff ff ff       	call   c0019708 <CPU::setupSMEP()>
c00197c2:	58                   	pop    eax
c00197c3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00197ca:	74 07                	je     c00197d3 <CPU::setupFeatures()+0x27>
c00197cc:	52                   	push   edx
c00197cd:	e8 cc ff ff ff       	call   c001979e <CPU::setupSMAP()>
c00197d2:	58                   	pop    eax
c00197d3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00197da:	74 07                	je     c00197e3 <CPU::setupFeatures()+0x37>
c00197dc:	52                   	push   edx
c00197dd:	e8 32 ff ff ff       	call   c0019714 <CPU::setupUMIP()>
c00197e2:	58                   	pop    eax
c00197e3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00197ea:	74 07                	je     c00197f3 <CPU::setupFeatures()+0x47>
c00197ec:	52                   	push   edx
c00197ed:	e8 2c ff ff ff       	call   c001971e <CPU::setupTSC()>
c00197f2:	58                   	pop    eax
c00197f3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00197fa:	74 07                	je     c0019803 <CPU::setupFeatures()+0x57>
c00197fc:	52                   	push   edx
c00197fd:	e8 26 ff ff ff       	call   c0019728 <CPU::setupLargePages()>
c0019802:	59                   	pop    ecx
c0019803:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001980a:	74 07                	je     c0019813 <CPU::setupFeatures()+0x67>
c001980c:	52                   	push   edx
c001980d:	e8 5e ff ff ff       	call   c0019770 <CPU::setupGlobalPages()>
c0019812:	58                   	pop    eax
c0019813:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001981a:	74 0c                	je     c0019828 <CPU::setupFeatures()+0x7c>
c001981c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019820:	83 c4 0c             	add    esp,0xc
c0019823:	e9 0a ff ff ff       	jmp    c0019732 <CPU::setupPAT()>
c0019828:	83 c4 0c             	add    esp,0xc
c001982b:	c3                   	ret    

c001982c <CPU::open(int, int, void*)>:
c001982c:	57                   	push   edi
c001982d:	56                   	push   esi
c001982e:	53                   	push   ebx
c001982f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019833:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019837:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001983d:	83 ec 0c             	sub    esp,0xc
c0019840:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019846:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001984c:	50                   	push   eax
c001984d:	e8 82 58 ff ff       	call   c000f0d4 <GDT::setup()>
c0019852:	83 c4 0c             	add    esp,0xc
c0019855:	6a 00                	push   0x0
c0019857:	68 ef be ad de       	push   0xdeadbeef
c001985c:	57                   	push   edi
c001985d:	e8 30 7c ff ff       	call   c0011492 <TSS::setup(unsigned long, unsigned long)>
c0019862:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019865:	e8 08 7c ff ff       	call   c0011472 <TSS::flush()>
c001986a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019870:	89 04 24             	mov    DWORD PTR [esp],eax
c0019873:	e8 b8 5a ff ff       	call   c000f330 <IDT::setup()>
c0019878:	b8 00 04 00 00       	mov    eax,0x400
c001987d:	0f 23 f8             	mov    db7,eax
c0019880:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001988a:	e8 50 66 ff ff       	call   c000fedf <Phys::allocatePage()>
c001988f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019895:	89 30                	mov    DWORD PTR [eax],esi
c0019897:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001989d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00198a0:	58                   	pop    eax
c00198a1:	5a                   	pop    edx
c00198a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00198a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198ac:	e8 13 8c ff ff       	call   c00124c4 <VAS::setCPUSpecific(unsigned long)>
c00198b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198b4:	e8 5f f4 ff ff       	call   c0018d18 <CPU::detectFeatures()>
c00198b9:	e8 cf bc ff ff       	call   c001558d <setupInterruptController()>
c00198be:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00198c4:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c00198c9:	83 e0 10             	and    eax,0x10
c00198cc:	83 f8 01             	cmp    eax,0x1
c00198cf:	19 c0                	sbb    eax,eax
c00198d1:	83 e0 46             	and    eax,0x46
c00198d4:	83 c0 1e             	add    eax,0x1e
c00198d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00198da:	e8 bb d1 ff ff       	call   c0016a9a <setupTimer(int)>
c00198df:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00198e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198e8:	e8 bf fe ff ff       	call   c00197ac <CPU::setupFeatures()>
c00198ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198f0:	e8 a7 f1 ff ff       	call   c0018a9c <CPU::displayFeatures()>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	31 c0                	xor    eax,eax
c00198fa:	5b                   	pop    ebx
c00198fb:	5e                   	pop    esi
c00198fc:	5f                   	pop    edi
c00198fd:	c3                   	ret    

c00198fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00198fe:	57                   	push   edi
c00198ff:	56                   	push   esi
c0019900:	53                   	push   ebx
c0019901:	51                   	push   ecx
c0019902:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019906:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019909:	0f 02 c0             	lar    eax,ax
c001990c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001990f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019913:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019916:	88 ca                	mov    dl,cl
c0019918:	c0 ea 06             	shr    dl,0x6
c001991b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001991f:	89 ca                	mov    edx,ecx
c0019921:	66 c1 ea 03          	shr    dx,0x3
c0019925:	83 e2 07             	and    edx,0x7
c0019928:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001992d:	88 17                	mov    BYTE PTR [edi],dl
c001992f:	0f 84 a6 01 00 00    	je     c0019adb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019935:	83 e1 07             	and    ecx,0x7
c0019938:	80 f9 04             	cmp    cl,0x4
c001993b:	0f 84 98 00 00 00    	je     c00199d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019941:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019946:	0f 95 c0             	setne  al
c0019949:	80 f9 05             	cmp    cl,0x5
c001994c:	0f 95 c2             	setne  dl
c001994f:	08 c2                	or     dl,al
c0019951:	74 79                	je     c00199cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019953:	84 c9                	test   cl,cl
c0019955:	75 05                	jne    c001995c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019957:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001995a:	eb 3c                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001995c:	80 f9 01             	cmp    cl,0x1
c001995f:	75 05                	jne    c0019966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019961:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019964:	eb 32                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019966:	80 f9 02             	cmp    cl,0x2
c0019969:	75 05                	jne    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001996b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001996e:	eb 28                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019970:	31 c0                	xor    eax,eax
c0019972:	80 f9 03             	cmp    cl,0x3
c0019975:	75 05                	jne    c001997c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019977:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001997a:	eb 1c                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001997c:	80 f9 05             	cmp    cl,0x5
c001997f:	75 05                	jne    c0019986 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019981:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019984:	eb 12                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019986:	80 f9 06             	cmp    cl,0x6
c0019989:	75 05                	jne    c0019990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001998b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001998e:	eb 08                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019990:	80 f9 07             	cmp    cl,0x7
c0019993:	75 03                	jne    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019995:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019998:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001999d:	75 10                	jne    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001999f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00199a3:	b9 03 00 00 00       	mov    ecx,0x3
c00199a8:	01 d0                	add    eax,edx
c00199aa:	e9 37 01 00 00       	jmp    c0019ae6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199af:	b9 02 00 00 00       	mov    ecx,0x2
c00199b4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00199b9:	0f 85 27 01 00 00    	jne    c0019ae6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199bf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00199c2:	b9 06 00 00 00       	mov    ecx,0x6
c00199c7:	e9 1a 01 00 00       	jmp    c0019ae6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199cc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00199cf:	b9 06 00 00 00       	mov    ecx,0x6
c00199d4:	e9 0f 01 00 00       	jmp    c0019ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199d9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00199dc:	88 ca                	mov    dl,cl
c00199de:	c0 ea 06             	shr    dl,0x6
c00199e1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00199e5:	89 ca                	mov    edx,ecx
c00199e7:	66 c1 ea 03          	shr    dx,0x3
c00199eb:	83 e2 07             	and    edx,0x7
c00199ee:	80 e1 07             	and    cl,0x7
c00199f1:	75 05                	jne    c00199f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00199f3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00199f6:	eb 4c                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199f8:	80 f9 01             	cmp    cl,0x1
c00199fb:	75 05                	jne    c0019a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00199fd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019a00:	eb 42                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a02:	80 f9 02             	cmp    cl,0x2
c0019a05:	75 05                	jne    c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019a07:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019a0a:	eb 38                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a0c:	80 f9 03             	cmp    cl,0x3
c0019a0f:	75 05                	jne    c0019a16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019a11:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019a14:	eb 2e                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a16:	80 f9 04             	cmp    cl,0x4
c0019a19:	75 12                	jne    c0019a2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019a1b:	f6 c4 60             	test   ah,0x60
c0019a1e:	75 08                	jne    c0019a28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019a20:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019a23:	8d 78 14             	lea    edi,[eax+0x14]
c0019a26:	eb 1c                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a28:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019a2b:	eb 17                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a2d:	80 f9 05             	cmp    cl,0x5
c0019a30:	75 05                	jne    c0019a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019a32:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019a35:	eb 0d                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a37:	80 f9 06             	cmp    cl,0x6
c0019a3a:	75 05                	jne    c0019a41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019a3c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019a3f:	eb 03                	jmp    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a41:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019a44:	84 d2                	test   dl,dl
c0019a46:	75 05                	jne    c0019a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019a48:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a4b:	eb 3c                	jmp    c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a4d:	80 fa 01             	cmp    dl,0x1
c0019a50:	75 05                	jne    c0019a57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019a52:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a55:	eb 32                	jmp    c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a57:	80 fa 02             	cmp    dl,0x2
c0019a5a:	75 05                	jne    c0019a61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019a5c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a5f:	eb 28                	jmp    c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a61:	80 fa 03             	cmp    dl,0x3
c0019a64:	75 05                	jne    c0019a6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019a66:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a69:	eb 1e                	jmp    c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a6b:	31 c0                	xor    eax,eax
c0019a6d:	80 fa 04             	cmp    dl,0x4
c0019a70:	74 17                	je     c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a72:	80 fa 05             	cmp    dl,0x5
c0019a75:	75 05                	jne    c0019a7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019a77:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a7a:	eb 0d                	jmp    c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a7c:	80 fa 06             	cmp    dl,0x6
c0019a7f:	75 05                	jne    c0019a86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019a81:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a84:	eb 03                	jmp    c0019a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a86:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a89:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a8e:	0f 94 c2             	sete   dl
c0019a91:	80 f9 05             	cmp    cl,0x5
c0019a94:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019a98:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019a9d:	d3 e0                	shl    eax,cl
c0019a9f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019aa3:	74 0a                	je     c0019aaf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019aa5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019aa8:	b9 07 00 00 00       	mov    ecx,0x7
c0019aad:	eb 37                	jmp    c0019ae6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aaf:	01 f8                	add    eax,edi
c0019ab1:	b9 03 00 00 00       	mov    ecx,0x3
c0019ab6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019abb:	74 2b                	je     c0019ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019abd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ac2:	75 0d                	jne    c0019ad1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ac4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ac8:	01 c8                	add    eax,ecx
c0019aca:	b9 04 00 00 00       	mov    ecx,0x4
c0019acf:	eb 17                	jmp    c0019ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ad1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ad4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ad9:	eb 0d                	jmp    c0019ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019adb:	b9 02 00 00 00       	mov    ecx,0x2
c0019ae0:	b2 01                	mov    dl,0x1
c0019ae2:	31 c0                	xor    eax,eax
c0019ae4:	eb 02                	jmp    c0019ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ae6:	31 d2                	xor    edx,edx
c0019ae8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019aec:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019aee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019af2:	88 11                	mov    BYTE PTR [ecx],dl
c0019af4:	5a                   	pop    edx
c0019af5:	5b                   	pop    ebx
c0019af6:	5e                   	pop    esi
c0019af7:	5f                   	pop    edi
c0019af8:	c3                   	ret    

c0019af9 <Krnl::smpEntry()>:
c0019af9:	eb fe                	jmp    c0019af9 <Krnl::smpEntry()>

c0019afb <Krnl::startCPU(int)>:
c0019afb:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0019b00:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b07:	0f 84 36 01 00 00    	je     c0019c43 <Krnl::startCPU(int)+0x148>
c0019b0d:	53                   	push   ebx
c0019b0e:	83 ec 08             	sub    esp,0x8
c0019b11:	e8 46 3f 00 00       	call   c001da5c <lockScheduler()>
c0019b16:	52                   	push   edx
c0019b17:	52                   	push   edx
c0019b18:	6a 1b                	push   0x1b
c0019b1a:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c0019b20:	e8 c3 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b25:	59                   	pop    ecx
c0019b26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019b2b:	89 c3                	mov    ebx,eax
c0019b2d:	58                   	pop    eax
c0019b2e:	53                   	push   ebx
c0019b2f:	68 40 b6 02 c0       	push   0xc002b640
c0019b34:	e8 83 90 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0019b39:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b47:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b51:	c1 e0 18             	shl    eax,0x18
c0019b54:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019b5a:	83 c4 10             	add    esp,0x10
c0019b5d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019b63:	09 c2                	or     edx,eax
c0019b65:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019b6b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019b71:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b77:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b7d:	80 cd c5             	or     ch,0xc5
c0019b80:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b86:	f3 90                	pause  
c0019b88:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b8a:	0f ba e1 0c          	bt     ecx,0xc
c0019b8e:	72 f6                	jb     c0019b86 <Krnl::startCPU(int)+0x8b>
c0019b90:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b96:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b9c:	09 c1                	or     ecx,eax
c0019b9e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ba4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019baa:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bb0:	80 cd 85             	or     ch,0x85
c0019bb3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bb9:	f3 90                	pause  
c0019bbb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bbd:	0f ba e1 0c          	bt     ecx,0xc
c0019bc1:	72 f6                	jb     c0019bb9 <Krnl::startCPU(int)+0xbe>
c0019bc3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bcd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019bd3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019bd9:	09 c1                	or     ecx,eax
c0019bdb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019be1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019be7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019bed:	81 c9 02 06 00 00    	or     ecx,0x602
c0019bf3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bf9:	f3 90                	pause  
c0019bfb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bfd:	0f ba e1 0c          	bt     ecx,0xc
c0019c01:	72 f6                	jb     c0019bf9 <Krnl::startCPU(int)+0xfe>
c0019c03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c0d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c13:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c19:	09 c8                	or     eax,ecx
c0019c1b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019c21:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019c27:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019c2c:	0d 02 06 00 00       	or     eax,0x602
c0019c31:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019c37:	f3 90                	pause  
c0019c39:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c3b:	0f ba e0 0c          	bt     eax,0xc
c0019c3f:	72 f6                	jb     c0019c37 <Krnl::startCPU(int)+0x13c>
c0019c41:	eb fe                	jmp    c0019c41 <Krnl::startCPU(int)+0x146>
c0019c43:	c3                   	ret    

c0019c44 <Krnl::startCPUs()>:
c0019c44:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0019c49:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019c4f:	88 c2                	mov    dl,al
c0019c51:	83 e2 0a             	and    edx,0xa
c0019c54:	80 fa 0a             	cmp    dl,0xa
c0019c57:	75 09                	jne    c0019c62 <Krnl::startCPUs()+0x1e>
c0019c59:	a8 01                	test   al,0x1
c0019c5b:	74 05                	je     c0019c62 <Krnl::startCPUs()+0x1e>
c0019c5d:	e9 39 65 fe ff       	jmp    c000019b <prepareTramp>
c0019c62:	c3                   	ret    
c0019c63:	90                   	nop

c0019c64 <EnvVarContainer::getEnv(char const*)>:
c0019c64:	57                   	push   edi
c0019c65:	56                   	push   esi
c0019c66:	53                   	push   ebx
c0019c67:	31 db                	xor    ebx,ebx
c0019c69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c6d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019c6f:	7e 2b                	jle    c0019c9c <EnvVarContainer::getEnv(char const*)+0x38>
c0019c71:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019c78:	50                   	push   eax
c0019c79:	50                   	push   eax
c0019c7a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c7d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019c80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c84:	e8 37 6c fe ff       	call   c00008c0 <strcmp>
c0019c89:	83 c4 10             	add    esp,0x10
c0019c8c:	85 c0                	test   eax,eax
c0019c8e:	75 09                	jne    c0019c99 <EnvVarContainer::getEnv(char const*)+0x35>
c0019c90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c93:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019c97:	eb 05                	jmp    c0019c9e <EnvVarContainer::getEnv(char const*)+0x3a>
c0019c99:	43                   	inc    ebx
c0019c9a:	eb d1                	jmp    c0019c6d <EnvVarContainer::getEnv(char const*)+0x9>
c0019c9c:	31 c0                	xor    eax,eax
c0019c9e:	5b                   	pop    ebx
c0019c9f:	5e                   	pop    esi
c0019ca0:	5f                   	pop    edi
c0019ca1:	c3                   	ret    

c0019ca2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ca2:	57                   	push   edi
c0019ca3:	56                   	push   esi
c0019ca4:	53                   	push   ebx
c0019ca5:	83 ec 1c             	sub    esp,0x1c
c0019ca8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019cac:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019cb0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019cb4:	57                   	push   edi
c0019cb5:	e8 da 6a fe ff       	call   c0000794 <strlen>
c0019cba:	40                   	inc    eax
c0019cbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cbe:	e8 7d 5b ff ff       	call   c000f840 <malloc>
c0019cc3:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019cca:	e8 c5 6a fe ff       	call   c0000794 <strlen>
c0019ccf:	40                   	inc    eax
c0019cd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cd3:	e8 68 5b ff ff       	call   c000f840 <malloc>
c0019cd8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cdf:	e8 b0 6a fe ff       	call   c0000794 <strlen>
c0019ce4:	83 c4 0c             	add    esp,0xc
c0019ce7:	40                   	inc    eax
c0019ce8:	50                   	push   eax
c0019ce9:	6a 00                	push   0x0
c0019ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019cef:	e8 84 6a fe ff       	call   c0000778 <memset>
c0019cf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cf7:	e8 98 6a fe ff       	call   c0000794 <strlen>
c0019cfc:	83 c4 0c             	add    esp,0xc
c0019cff:	40                   	inc    eax
c0019d00:	50                   	push   eax
c0019d01:	57                   	push   edi
c0019d02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d06:	e8 39 6a fe ff       	call   c0000744 <memcpy>
c0019d0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d0e:	e8 81 6a fe ff       	call   c0000794 <strlen>
c0019d13:	83 c4 0c             	add    esp,0xc
c0019d16:	40                   	inc    eax
c0019d17:	50                   	push   eax
c0019d18:	6a 00                	push   0x0
c0019d1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d1e:	e8 55 6a fe ff       	call   c0000778 <memset>
c0019d23:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d26:	e8 69 6a fe ff       	call   c0000794 <strlen>
c0019d2b:	83 c4 0c             	add    esp,0xc
c0019d2e:	40                   	inc    eax
c0019d2f:	50                   	push   eax
c0019d30:	56                   	push   esi
c0019d31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d35:	e8 0a 6a fe ff       	call   c0000744 <memcpy>
c0019d3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d3c:	40                   	inc    eax
c0019d3d:	89 03                	mov    DWORD PTR [ebx],eax
c0019d3f:	c1 e0 03             	shl    eax,0x3
c0019d42:	5a                   	pop    edx
c0019d43:	59                   	pop    ecx
c0019d44:	50                   	push   eax
c0019d45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019d48:	e8 df 5a ff ff       	call   c000f82c <realloc>
c0019d4d:	83 c4 0c             	add    esp,0xc
c0019d50:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d53:	6a 08                	push   0x8
c0019d55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d59:	52                   	push   edx
c0019d5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019d5c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019d60:	50                   	push   eax
c0019d61:	e8 de 69 fe ff       	call   c0000744 <memcpy>
c0019d66:	83 c4 20             	add    esp,0x20
c0019d69:	5b                   	pop    ebx
c0019d6a:	5e                   	pop    esi
c0019d6b:	5f                   	pop    edi
c0019d6c:	c3                   	ret    
c0019d6d:	90                   	nop

c0019d6e <EnvVarContainer::deleteEnv(char const*)>:
c0019d6e:	c3                   	ret    
c0019d6f:	90                   	nop

c0019d70 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019d70:	55                   	push   ebp
c0019d71:	57                   	push   edi
c0019d72:	56                   	push   esi
c0019d73:	53                   	push   ebx
c0019d74:	81 ec 38 01 00 00    	sub    esp,0x138
c0019d7a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019d81:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019d88:	68 14 01 00 00       	push   0x114
c0019d8d:	e8 ae 5a ff ff       	call   c000f840 <malloc>
c0019d92:	83 c4 0c             	add    esp,0xc
c0019d95:	89 c7                	mov    edi,eax
c0019d97:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019d9a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019da1:	50                   	push   eax
c0019da2:	e8 6d 93 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c0019da7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019daa:	e8 37 96 ff ff       	call   c00133e6 <File::exists()>
c0019daf:	83 c4 10             	add    esp,0x10
c0019db2:	84 c0                	test   al,al
c0019db4:	75 31                	jne    c0019de7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019db6:	51                   	push   ecx
c0019db7:	51                   	push   ecx
c0019db8:	6a 12                	push   0x12
c0019dba:	57                   	push   edi
c0019dbb:	e8 b8 93 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c0019dc0:	8b 07                	mov    eax,DWORD PTR [edi]
c0019dc2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019dc5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019dc8:	e8 c7 69 fe ff       	call   c0000794 <strlen>
c0019dcd:	5a                   	pop    edx
c0019dce:	31 d2                	xor    edx,edx
c0019dd0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019dd4:	51                   	push   ecx
c0019dd5:	55                   	push   ebp
c0019dd6:	52                   	push   edx
c0019dd7:	50                   	push   eax
c0019dd8:	57                   	push   edi
c0019dd9:	ff d3                	call   ebx
c0019ddb:	83 c4 14             	add    esp,0x14
c0019dde:	57                   	push   edi
c0019ddf:	e8 f2 93 ff ff       	call   c00131d6 <File::close()>
c0019de4:	83 c4 10             	add    esp,0x10
c0019de7:	31 db                	xor    ebx,ebx
c0019de9:	50                   	push   eax
c0019dea:	31 ed                	xor    ebp,ebp
c0019dec:	68 00 01 00 00       	push   0x100
c0019df1:	6a 00                	push   0x0
c0019df3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019df7:	50                   	push   eax
c0019df8:	e8 7b 69 fe ff       	call   c0000778 <memset>
c0019dfd:	58                   	pop    eax
c0019dfe:	5a                   	pop    edx
c0019dff:	6a 01                	push   0x1
c0019e01:	57                   	push   edi
c0019e02:	e8 71 93 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c0019e07:	83 c4 10             	add    esp,0x10
c0019e0a:	83 ec 0c             	sub    esp,0xc
c0019e0d:	8b 07                	mov    eax,DWORD PTR [edi]
c0019e0f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e13:	51                   	push   ecx
c0019e14:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019e18:	52                   	push   edx
c0019e19:	6a 00                	push   0x0
c0019e1b:	6a 01                	push   0x1
c0019e1d:	57                   	push   edi
c0019e1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e21:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019e25:	83 c4 20             	add    esp,0x20
c0019e28:	3c 0d                	cmp    al,0xd
c0019e2a:	0f 84 12 01 00 00    	je     c0019f42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019e30:	85 db                	test   ebx,ebx
c0019e32:	0f 84 fd 00 00 00    	je     c0019f35 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019e38:	3c 0a                	cmp    al,0xa
c0019e3a:	74 13                	je     c0019e4f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019e3c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e41:	74 0c                	je     c0019e4f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019e43:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019e49:	0f 8e e6 00 00 00    	jle    c0019f35 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019e4f:	83 ec 0c             	sub    esp,0xc
c0019e52:	8d 53 01             	lea    edx,[ebx+0x1]
c0019e55:	29 dd                	sub    ebp,ebx
c0019e57:	52                   	push   edx
c0019e58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019e5c:	e8 df 59 ff ff       	call   c000f840 <malloc>
c0019e61:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019e64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019e68:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019e6b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019e6f:	e8 cc 59 ff ff       	call   c000f840 <malloc>
c0019e74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e7f:	52                   	push   edx
c0019e80:	6a 00                	push   0x0
c0019e82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e86:	e8 ed 68 fe ff       	call   c0000778 <memset>
c0019e8b:	83 c4 0c             	add    esp,0xc
c0019e8e:	53                   	push   ebx
c0019e8f:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019e93:	55                   	push   ebp
c0019e94:	01 eb                	add    ebx,ebp
c0019e96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e9a:	e8 a5 68 fe ff       	call   c0000744 <memcpy>
c0019e9f:	83 c4 0c             	add    esp,0xc
c0019ea2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ea6:	51                   	push   ecx
c0019ea7:	6a 00                	push   0x0
c0019ea9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ead:	e8 c6 68 fe ff       	call   c0000778 <memset>
c0019eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eb5:	e8 da 68 fe ff       	call   c0000794 <strlen>
c0019eba:	83 c4 0c             	add    esp,0xc
c0019ebd:	50                   	push   eax
c0019ebe:	53                   	push   ebx
c0019ebf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ec3:	e8 7c 68 fe ff       	call   c0000744 <memcpy>
c0019ec8:	5b                   	pop    ebx
c0019ec9:	58                   	pop    eax
c0019eca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ece:	68 51 b6 02 c0       	push   0xc002b651
c0019ed3:	e8 e4 8c ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0019ed8:	8b 06                	mov    eax,DWORD PTR [esi]
c0019eda:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019edd:	40                   	inc    eax
c0019ede:	83 c4 10             	add    esp,0x10
c0019ee1:	89 06                	mov    DWORD PTR [esi],eax
c0019ee3:	85 d2                	test   edx,edx
c0019ee5:	75 0c                	jne    c0019ef3 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019ee7:	83 ec 0c             	sub    esp,0xc
c0019eea:	6a 08                	push   0x8
c0019eec:	e8 4f 59 ff ff       	call   c000f840 <malloc>
c0019ef1:	eb 0c                	jmp    c0019eff <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019ef3:	c1 e0 03             	shl    eax,0x3
c0019ef6:	51                   	push   ecx
c0019ef7:	51                   	push   ecx
c0019ef8:	50                   	push   eax
c0019ef9:	52                   	push   edx
c0019efa:	e8 2d 59 ff ff       	call   c000f82c <realloc>
c0019eff:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	31 db                	xor    ebx,ebx
c0019f07:	52                   	push   edx
c0019f08:	6a 08                	push   0x8
c0019f0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019f0e:	50                   	push   eax
c0019f0f:	8b 16                	mov    edx,DWORD PTR [esi]
c0019f11:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f14:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019f18:	50                   	push   eax
c0019f19:	e8 26 68 fe ff       	call   c0000744 <memcpy>
c0019f1e:	83 c4 0c             	add    esp,0xc
c0019f21:	68 00 01 00 00       	push   0x100
c0019f26:	6a 00                	push   0x0
c0019f28:	55                   	push   ebp
c0019f29:	31 ed                	xor    ebp,ebp
c0019f2b:	e8 48 68 fe ff       	call   c0000778 <memset>
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	eb 0d                	jmp    c0019f42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019f35:	3c 3d                	cmp    al,0x3d
c0019f37:	74 07                	je     c0019f40 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019f39:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019f3d:	45                   	inc    ebp
c0019f3e:	eb 02                	jmp    c0019f42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019f40:	89 eb                	mov    ebx,ebp
c0019f42:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f47:	0f 85 bd fe ff ff    	jne    c0019e0a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019f4d:	50                   	push   eax
c0019f4e:	50                   	push   eax
c0019f4f:	ff 36                	push   DWORD PTR [esi]
c0019f51:	68 5f b6 02 c0       	push   0xc002b65f
c0019f56:	e8 61 8c ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0019f5b:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019f61:	5b                   	pop    ebx
c0019f62:	5e                   	pop    esi
c0019f63:	5f                   	pop    edi
c0019f64:	5d                   	pop    ebp
c0019f65:	c3                   	ret    

c0019f66 <EnvVarContainer::__loadSystem()>:
c0019f66:	83 ec 10             	sub    esp,0x10
c0019f69:	68 00 d6 02 c0       	push   0xc002d600
c0019f6e:	68 8a b6 02 c0       	push   0xc002b68a
c0019f73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f77:	e8 f4 fd ff ff       	call   c0019d70 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019f7c:	83 c4 1c             	add    esp,0x1c
c0019f7f:	c3                   	ret    

c0019f80 <EnvVarContainer::__loadUser()>:
c0019f80:	c3                   	ret    
c0019f81:	90                   	nop

c0019f82 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f94:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019f97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019fa2:	90                   	nop
c0019fa3:	c3                   	ret    

c0019fa4 <EnvVarContainer::~EnvVarContainer()>:
c0019fa4:	83 ec 0c             	sub    esp,0xc
c0019fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fae:	85 c0                	test   eax,eax
c0019fb0:	74 1d                	je     c0019fcf <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fb8:	85 c0                	test   eax,eax
c0019fba:	74 13                	je     c0019fcf <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fc3:	83 ec 0c             	sub    esp,0xc
c0019fc6:	50                   	push   eax
c0019fc7:	e8 84 58 ff ff       	call   c000f850 <free>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	90                   	nop
c0019fd0:	83 c4 0c             	add    esp,0xc
c0019fd3:	c3                   	ret    

c0019fd4 <Krnl::getEnv(Process*, char const*)>:
c0019fd4:	53                   	push   ebx
c0019fd5:	83 ec 08             	sub    esp,0x8
c0019fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fdc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019fe0:	39 05 34 16 03 c0    	cmp    DWORD PTR ds:0xc0031634,eax
c0019fe6:	74 04                	je     c0019fec <Krnl::getEnv(Process*, char const*)+0x18>
c0019fe8:	85 c0                	test   eax,eax
c0019fea:	75 0b                	jne    c0019ff7 <Krnl::getEnv(Process*, char const*)+0x23>
c0019fec:	a1 14 0c 03 c0       	mov    eax,ds:0xc0030c14
c0019ff1:	85 c0                	test   eax,eax
c0019ff3:	75 19                	jne    c001a00e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019ff5:	eb 27                	jmp    c001a01e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019ff7:	52                   	push   edx
c0019ff8:	52                   	push   edx
c0019ff9:	53                   	push   ebx
c0019ffa:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a000:	e8 5f fc ff ff       	call   c0019c64 <EnvVarContainer::getEnv(char const*)>
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	85 c0                	test   eax,eax
c001a00a:	75 28                	jne    c001a034 <Krnl::getEnv(Process*, char const*)+0x60>
c001a00c:	eb de                	jmp    c0019fec <Krnl::getEnv(Process*, char const*)+0x18>
c001a00e:	52                   	push   edx
c001a00f:	52                   	push   edx
c001a010:	53                   	push   ebx
c001a011:	50                   	push   eax
c001a012:	e8 4d fc ff ff       	call   c0019c64 <EnvVarContainer::getEnv(char const*)>
c001a017:	83 c4 10             	add    esp,0x10
c001a01a:	85 c0                	test   eax,eax
c001a01c:	75 16                	jne    c001a034 <Krnl::getEnv(Process*, char const*)+0x60>
c001a01e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a022:	a1 18 0c 03 c0       	mov    eax,ds:0xc0030c18
c001a027:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a02b:	83 c4 08             	add    esp,0x8
c001a02e:	5b                   	pop    ebx
c001a02f:	e9 30 fc ff ff       	jmp    c0019c64 <EnvVarContainer::getEnv(char const*)>
c001a034:	83 c4 08             	add    esp,0x8
c001a037:	5b                   	pop    ebx
c001a038:	c3                   	ret    

c001a039 <Krnl::setEnvSystem(char const*, char const*)>:
c001a039:	83 ec 10             	sub    esp,0x10
c001a03c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a040:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a044:	ff 35 18 0c 03 c0    	push   DWORD PTR ds:0xc0030c18
c001a04a:	e8 53 fc ff ff       	call   c0019ca2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a04f:	83 c4 1c             	add    esp,0x1c
c001a052:	c3                   	ret    

c001a053 <Krnl::setEnvUser(char const*, char const*)>:
c001a053:	a1 14 0c 03 c0       	mov    eax,ds:0xc0030c14
c001a058:	85 c0                	test   eax,eax
c001a05a:	74 15                	je     c001a071 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a05c:	83 ec 10             	sub    esp,0x10
c001a05f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a063:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a067:	50                   	push   eax
c001a068:	e8 35 fc ff ff       	call   c0019ca2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a06d:	83 c4 1c             	add    esp,0x1c
c001a070:	c3                   	ret    
c001a071:	c3                   	ret    

c001a072 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a076:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a07c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a080:	e9 1d fc ff ff       	jmp    c0019ca2 <EnvVarContainer::setEnv(char const*, char const*)>

c001a085 <Krnl::deleteEnvSystem(char const*)>:
c001a085:	c3                   	ret    

c001a086 <Krnl::deleteEnvUser(char const*)>:
c001a086:	c3                   	ret    

c001a087 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a087:	c3                   	ret    

c001a088 <Krnl::newProcessEnv(Process*)>:
c001a088:	83 ec 28             	sub    esp,0x28
c001a08b:	6a 0c                	push   0xc
c001a08d:	e8 ae 57 ff ff       	call   c000f840 <malloc>
c001a092:	5a                   	pop    edx
c001a093:	59                   	pop    ecx
c001a094:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a098:	50                   	push   eax
c001a099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a09d:	e8 e0 fe ff ff       	call   c0019f82 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0a6:	83 c4 2c             	add    esp,0x2c
c001a0a9:	c3                   	ret    

c001a0aa <Krnl::copyProcessEnv(Process*, Process*)>:
c001a0aa:	56                   	push   esi
c001a0ab:	53                   	push   ebx
c001a0ac:	83 ec 10             	sub    esp,0x10
c001a0af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0b3:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a0b9:	6a 0c                	push   0xc
c001a0bb:	e8 80 57 ff ff       	call   c000f840 <malloc>
c001a0c0:	89 c3                	mov    ebx,eax
c001a0c2:	58                   	pop    eax
c001a0c3:	5a                   	pop    edx
c001a0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0c8:	53                   	push   ebx
c001a0c9:	e8 b4 fe ff ff       	call   c0019f82 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0ce:	8b 06                	mov    eax,DWORD PTR [esi]
c001a0d0:	89 03                	mov    DWORD PTR [ebx],eax
c001a0d2:	c1 e0 03             	shl    eax,0x3
c001a0d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0d8:	e8 63 57 ff ff       	call   c000f840 <malloc>
c001a0dd:	83 c4 0c             	add    esp,0xc
c001a0e0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0e3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a0e5:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a0ec:	52                   	push   edx
c001a0ed:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0f0:	50                   	push   eax
c001a0f1:	e8 4e 66 fe ff       	call   c0000744 <memcpy>
c001a0f6:	89 d8                	mov    eax,ebx
c001a0f8:	83 c4 14             	add    esp,0x14
c001a0fb:	5b                   	pop    ebx
c001a0fc:	5e                   	pop    esi
c001a0fd:	c3                   	ret    

c001a0fe <Krnl::loadSystemEnv()>:
c001a0fe:	53                   	push   ebx
c001a0ff:	83 ec 14             	sub    esp,0x14
c001a102:	6a 0c                	push   0xc
c001a104:	e8 37 57 ff ff       	call   c000f840 <malloc>
c001a109:	89 c3                	mov    ebx,eax
c001a10b:	58                   	pop    eax
c001a10c:	5a                   	pop    edx
c001a10d:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c001a113:	53                   	push   ebx
c001a114:	e8 69 fe ff ff       	call   c0019f82 <EnvVarContainer::EnvVarContainer(Process*)>
c001a119:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a11c:	89 1d 18 0c 03 c0    	mov    DWORD PTR ds:0xc0030c18,ebx
c001a122:	e8 3f fe ff ff       	call   c0019f66 <EnvVarContainer::__loadSystem()>
c001a127:	83 c4 18             	add    esp,0x18
c001a12a:	5b                   	pop    ebx
c001a12b:	c3                   	ret    

c001a12c <Krnl::loadUserEnv()>:
c001a12c:	53                   	push   ebx
c001a12d:	83 ec 14             	sub    esp,0x14
c001a130:	6a 0c                	push   0xc
c001a132:	e8 09 57 ff ff       	call   c000f840 <malloc>
c001a137:	89 c3                	mov    ebx,eax
c001a139:	58                   	pop    eax
c001a13a:	5a                   	pop    edx
c001a13b:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c001a141:	53                   	push   ebx
c001a142:	e8 3b fe ff ff       	call   c0019f82 <EnvVarContainer::EnvVarContainer(Process*)>
c001a147:	89 1d 14 0c 03 c0    	mov    DWORD PTR ds:0xc0030c14,ebx
c001a14d:	83 c4 18             	add    esp,0x18
c001a150:	5b                   	pop    ebx
c001a151:	c3                   	ret    

c001a152 <Krnl::flushEnv()>:
c001a152:	c3                   	ret    

c001a153 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a157:	8b 15 14 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c14
c001a15d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a163:	a1 18 0c 03 c0       	mov    eax,ds:0xc0030c18
c001a168:	8b 00                	mov    eax,DWORD PTR [eax]
c001a16a:	03 01                	add    eax,DWORD PTR [ecx]
c001a16c:	85 d2                	test   edx,edx
c001a16e:	74 02                	je     c001a172 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a170:	03 02                	add    eax,DWORD PTR [edx]
c001a172:	c3                   	ret    

c001a173 <Krnl::getProcessEnvPair(Process*, int)>:
c001a173:	57                   	push   edi
c001a174:	8b 0d 14 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c14
c001a17a:	56                   	push   esi
c001a17b:	85 c9                	test   ecx,ecx
c001a17d:	53                   	push   ebx
c001a17e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a182:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a186:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a18c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a190:	8b 02                	mov    eax,DWORD PTR [edx]
c001a192:	75 47                	jne    c001a1db <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a194:	39 c3                	cmp    ebx,eax
c001a196:	7c 47                	jl     c001a1df <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a198:	8b 15 18 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c18
c001a19e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1a0:	01 c1                	add    ecx,eax
c001a1a2:	39 d9                	cmp    ecx,ebx
c001a1a4:	7e 6c                	jle    c001a212 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a1a6:	51                   	push   ecx
c001a1a7:	89 d9                	mov    ecx,ebx
c001a1a9:	29 c1                	sub    ecx,eax
c001a1ab:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a1ae:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a1b2:	53                   	push   ebx
c001a1b3:	68 ac b6 02 c0       	push   0xc002b6ac
c001a1b8:	e8 ff 89 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001a1bd:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a1c3:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a1c5:	a1 18 0c 03 c0       	mov    eax,ds:0xc0030c18
c001a1ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1cd:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a1d1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a1d4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a1d7:	89 06                	mov    DWORD PTR [esi],eax
c001a1d9:	eb 51                	jmp    c001a22c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a1db:	39 c3                	cmp    ebx,eax
c001a1dd:	7d 05                	jge    c001a1e4 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a1df:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a1e2:	eb 20                	jmp    c001a204 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a1e4:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a1e6:	8d 14 07             	lea    edx,[edi+eax*1]
c001a1e9:	39 da                	cmp    edx,ebx
c001a1eb:	7e 04                	jle    c001a1f1 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a1ed:	29 c3                	sub    ebx,eax
c001a1ef:	eb 10                	jmp    c001a201 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a1f1:	8b 0d 18 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c18
c001a1f7:	03 11                	add    edx,DWORD PTR [ecx]
c001a1f9:	39 da                	cmp    edx,ebx
c001a1fb:	7e 15                	jle    c001a212 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a1fd:	29 c3                	sub    ebx,eax
c001a1ff:	29 fb                	sub    ebx,edi
c001a201:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a204:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a208:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a20b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a20e:	89 06                	mov    DWORD PTR [esi],eax
c001a210:	eb 1d                	jmp    c001a22f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a212:	83 ec 0c             	sub    esp,0xc
c001a215:	68 c0 b6 02 c0       	push   0xc002b6c0
c001a21a:	e8 18 00 00 00       	call   c001a237 <Krnl::panic(char const*)>
c001a21f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a225:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a22c:	83 c4 10             	add    esp,0x10
c001a22f:	89 f0                	mov    eax,esi
c001a231:	5b                   	pop    ebx
c001a232:	5e                   	pop    esi
c001a233:	5f                   	pop    edi
c001a234:	c2 04 00             	ret    0x4

c001a237 <Krnl::panic(char const*)>:
c001a237:	55                   	push   ebp
c001a238:	89 e5                	mov    ebp,esp
c001a23a:	53                   	push   ebx
c001a23b:	83 ec 0c             	sub    esp,0xc
c001a23e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a241:	fa                   	cli    
c001a242:	c6 05 24 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c24,0x1
c001a249:	53                   	push   ebx
c001a24a:	c6 05 04 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d004,0x0
c001a251:	68 da b6 02 c0       	push   0xc002b6da
c001a256:	e8 61 89 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001a25b:	58                   	pop    eax
c001a25c:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a261:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a267:	e8 67 6a ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c001a26c:	83 c4 0c             	add    esp,0xc
c001a26f:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a274:	6a 01                	push   0x1
c001a276:	6a 0f                	push   0xf
c001a278:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27e:	e8 81 64 ff ff       	call   c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a283:	58                   	pop    eax
c001a284:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a289:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28f:	e8 e0 6c ff ff       	call   c0010f74 <VgaText::clearScreen()>
c001a294:	58                   	pop    eax
c001a295:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a29a:	5a                   	pop    edx
c001a29b:	68 f3 b6 02 c0       	push   0xc002b6f3
c001a2a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a6:	e8 47 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2ab:	59                   	pop    ecx
c001a2ac:	58                   	pop    eax
c001a2ad:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a2b2:	68 98 b7 02 c0       	push   0xc002b798
c001a2b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2bd:	e8 30 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2c2:	58                   	pop    eax
c001a2c3:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a2c8:	5a                   	pop    edx
c001a2c9:	68 0f b7 02 c0       	push   0xc002b70f
c001a2ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d4:	e8 19 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2d9:	59                   	pop    ecx
c001a2da:	58                   	pop    eax
c001a2db:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a2e0:	53                   	push   ebx
c001a2e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2e7:	e8 06 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2ec:	58                   	pop    eax
c001a2ed:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a2f2:	5a                   	pop    edx
c001a2f3:	68 2f b7 02 c0       	push   0xc002b72f
c001a2f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2fe:	e8 ef 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a303:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	85 c0                	test   eax,eax
c001a30d:	74 02                	je     c001a311 <Krnl::panic(char const*)+0xda>
c001a30f:	ff d0                	call   eax
c001a311:	83 ec 0c             	sub    esp,0xc
c001a314:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a317:	e8 47 30 00 00       	call   c001d363 <Thr::getDriverNameFromAddress(unsigned long)>
c001a31c:	83 c4 10             	add    esp,0x10
c001a31f:	89 c3                	mov    ebx,eax
c001a321:	85 c0                	test   eax,eax
c001a323:	0f 84 50 02 00 00    	je     c001a579 <Krnl::panic(char const*)+0x342>
c001a329:	83 ec 08             	sub    esp,0x8
c001a32c:	8b 15 34 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031634
c001a332:	68 d4 b7 02 c0       	push   0xc002b7d4
c001a337:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a33d:	e8 b0 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a342:	58                   	pop    eax
c001a343:	5a                   	pop    edx
c001a344:	8b 15 34 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031634
c001a34a:	68 0f b7 02 c0       	push   0xc002b70f
c001a34f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a355:	e8 98 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a35a:	59                   	pop    ecx
c001a35b:	58                   	pop    eax
c001a35c:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a361:	53                   	push   ebx
c001a362:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a368:	e8 85 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a36d:	83 c4 10             	add    esp,0x10
c001a370:	83 ec 08             	sub    esp,0x8
c001a373:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a378:	68 2e b7 02 c0       	push   0xc002b72e
c001a37d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a383:	e8 6a 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a388:	58                   	pop    eax
c001a389:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a38e:	5a                   	pop    edx
c001a38f:	68 2c b8 02 c0       	push   0xc002b82c
c001a394:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a39a:	e8 53 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a39f:	59                   	pop    ecx
c001a3a0:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a3a5:	5b                   	pop    ebx
c001a3a6:	68 6c b8 02 c0       	push   0xc002b86c
c001a3ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b1:	e8 3c 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a3b6:	58                   	pop    eax
c001a3b7:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a3bc:	5a                   	pop    edx
c001a3bd:	68 1a b7 02 c0       	push   0xc002b71a
c001a3c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3c8:	e8 25 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a3cd:	59                   	pop    ecx
c001a3ce:	5b                   	pop    ebx
c001a3cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3d2:	68 32 b7 02 c0       	push   0xc002b732
c001a3d7:	e8 e0 87 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001a3dc:	58                   	pop    eax
c001a3dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3e0:	5a                   	pop    edx
c001a3e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3e4:	68 3b b7 02 c0       	push   0xc002b73b
c001a3e9:	e8 ce 87 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001a3ee:	59                   	pop    ecx
c001a3ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3f2:	5b                   	pop    ebx
c001a3f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3f8:	68 44 b7 02 c0       	push   0xc002b744
c001a3fd:	e8 ba 87 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001a402:	58                   	pop    eax
c001a403:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a408:	5a                   	pop    edx
c001a409:	68 b0 b8 02 c0       	push   0xc002b8b0
c001a40e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a414:	e8 d9 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a419:	59                   	pop    ecx
c001a41a:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a41f:	5b                   	pop    ebx
c001a420:	68 4d b7 02 c0       	push   0xc002b74d
c001a425:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a42b:	e8 c2 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a430:	0f 20 c0             	mov    eax,cr0
c001a433:	5a                   	pop    edx
c001a434:	59                   	pop    ecx
c001a435:	50                   	push   eax
c001a436:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a43b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a441:	e8 d2 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a446:	5b                   	pop    ebx
c001a447:	58                   	pop    eax
c001a448:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a44d:	68 57 b7 02 c0       	push   0xc002b757
c001a452:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a458:	e8 95 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a45d:	0f 20 d0             	mov    eax,cr2
c001a460:	5a                   	pop    edx
c001a461:	59                   	pop    ecx
c001a462:	50                   	push   eax
c001a463:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a468:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a46e:	e8 a5 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a473:	5b                   	pop    ebx
c001a474:	58                   	pop    eax
c001a475:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a47a:	68 61 b7 02 c0       	push   0xc002b761
c001a47f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a485:	e8 68 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a48a:	0f 20 d8             	mov    eax,cr3
c001a48d:	5a                   	pop    edx
c001a48e:	59                   	pop    ecx
c001a48f:	50                   	push   eax
c001a490:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a495:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a49b:	e8 78 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a4a0:	5b                   	pop    ebx
c001a4a1:	58                   	pop    eax
c001a4a2:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a4a7:	68 74 b7 02 c0       	push   0xc002b774
c001a4ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4b2:	e8 3b 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a4b7:	0f 20 e0             	mov    eax,cr4
c001a4ba:	5a                   	pop    edx
c001a4bb:	59                   	pop    ecx
c001a4bc:	50                   	push   eax
c001a4bd:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a4c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4c8:	e8 4b 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a4cd:	5b                   	pop    ebx
c001a4ce:	58                   	pop    eax
c001a4cf:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a4d4:	68 7e b7 02 c0       	push   0xc002b77e
c001a4d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4df:	e8 0e 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a4e4:	5a                   	pop    edx
c001a4e5:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a4ea:	59                   	pop    ecx
c001a4eb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4f4:	50                   	push   eax
c001a4f5:	e8 1e 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a4fa:	5b                   	pop    ebx
c001a4fb:	58                   	pop    eax
c001a4fc:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a501:	68 95 b7 02 c0       	push   0xc002b795
c001a506:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a50c:	e8 e1 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a511:	5a                   	pop    edx
c001a512:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a517:	59                   	pop    ecx
c001a518:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a51e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a521:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a524:	50                   	push   eax
c001a525:	e8 ee 6b ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a52a:	5b                   	pop    ebx
c001a52b:	58                   	pop    eax
c001a52c:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a531:	68 95 b7 02 c0       	push   0xc002b795
c001a536:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a53c:	e8 b1 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a541:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a546:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a549:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a54f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a551:	59                   	pop    ecx
c001a552:	5b                   	pop    ebx
c001a553:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a556:	50                   	push   eax
c001a557:	e8 bc 6b ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a55c:	83 c4 10             	add    esp,0x10
c001a55f:	b2 fe                	mov    dl,0xfe
c001a561:	e4 60                	in     al,0x60
c001a563:	3c 1c                	cmp    al,0x1c
c001a565:	74 04                	je     c001a56b <Krnl::panic(char const*)+0x334>
c001a567:	3c 5a                	cmp    al,0x5a
c001a569:	75 f6                	jne    c001a561 <Krnl::panic(char const*)+0x32a>
c001a56b:	e4 64                	in     al,0x64
c001a56d:	a8 02                	test   al,0x2
c001a56f:	75 fa                	jne    c001a56b <Krnl::panic(char const*)+0x334>
c001a571:	88 d0                	mov    al,dl
c001a573:	e6 64                	out    0x64,al
c001a575:	fa                   	cli    
c001a576:	f4                   	hlt    
c001a577:	eb e8                	jmp    c001a561 <Krnl::panic(char const*)+0x32a>
c001a579:	50                   	push   eax
c001a57a:	50                   	push   eax
c001a57b:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a580:	68 00 b8 02 c0       	push   0xc002b800
c001a585:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a58b:	e8 62 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a590:	58                   	pop    eax
c001a591:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a596:	5a                   	pop    edx
c001a597:	68 0f b7 02 c0       	push   0xc002b70f
c001a59c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a2:	e8 4b 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a5a7:	59                   	pop    ecx
c001a5a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5ad:	5b                   	pop    ebx
c001a5ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5b1:	83 c0 0c             	add    eax,0xc
c001a5b4:	50                   	push   eax
c001a5b5:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001a5ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c0:	e8 2d 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a5c5:	83 c4 10             	add    esp,0x10
c001a5c8:	e9 a3 fd ff ff       	jmp    c001a370 <Krnl::panic(char const*)+0x139>

c001a5cd <Net::switchEndian16(unsigned short)>:
c001a5cd:	83 ec 04             	sub    esp,0x4
c001a5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5d4:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a5d8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5dc:	c1 f8 08             	sar    eax,0x8
c001a5df:	89 c2                	mov    edx,eax
c001a5e1:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5e5:	c1 e0 08             	shl    eax,0x8
c001a5e8:	09 d0                	or     eax,edx
c001a5ea:	83 c4 04             	add    esp,0x4
c001a5ed:	c3                   	ret    

c001a5ee <Net::switchEndian32(unsigned int)>:
c001a5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f2:	c1 e8 18             	shr    eax,0x18
c001a5f5:	89 c2                	mov    edx,eax
c001a5f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5fb:	c1 e0 08             	shl    eax,0x8
c001a5fe:	25 00 00 ff 00       	and    eax,0xff0000
c001a603:	09 c2                	or     edx,eax
c001a605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a609:	c1 e8 08             	shr    eax,0x8
c001a60c:	25 00 ff 00 00       	and    eax,0xff00
c001a611:	09 c2                	or     edx,eax
c001a613:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a617:	c1 e0 18             	shl    eax,0x18
c001a61a:	09 d0                	or     eax,edx
c001a61c:	c3                   	ret    

c001a61d <Net::crc32Calc(unsigned char*, int)>:
c001a61d:	83 ec 10             	sub    esp,0x10
c001a620:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a625:	75 07                	jne    c001a62e <Net::crc32Calc(unsigned char*, int)+0x11>
c001a627:	b8 00 00 00 00       	mov    eax,0x0
c001a62c:	eb 7c                	jmp    c001a6aa <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a62e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a633:	7f 07                	jg     c001a63c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a635:	b8 00 00 00 00       	mov    eax,0x0
c001a63a:	eb 6e                	jmp    c001a6aa <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a63c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a644:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a64c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a650:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a654:	7d 4e                	jge    c001a6a4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a656:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a65a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a65e:	01 d0                	add    eax,edx
c001a660:	8a 00                	mov    al,BYTE PTR [eax]
c001a662:	0f b6 c0             	movzx  eax,al
c001a665:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a669:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a671:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a676:	7f 26                	jg     c001a69e <Net::crc32Calc(unsigned char*, int)+0x81>
c001a678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a67c:	83 e0 01             	and    eax,0x1
c001a67f:	74 0d                	je     c001a68e <Net::crc32Calc(unsigned char*, int)+0x71>
c001a681:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a685:	d1 e8                	shr    eax,1
c001a687:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a68c:	eb 06                	jmp    c001a694 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a68e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a692:	d1 e8                	shr    eax,1
c001a694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a698:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a69c:	eb d3                	jmp    c001a671 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a69e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a6a2:	eb a8                	jmp    c001a64c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a6a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6a8:	f7 d0                	not    eax
c001a6aa:	83 c4 10             	add    esp,0x10
c001a6ad:	c3                   	ret    

c001a6ae <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a6ae:	83 ec 1c             	sub    esp,0x1c
c001a6b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6c1:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a6c6:	7f 14                	jg     c001a6dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a6c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6cc:	8d 50 01             	lea    edx,[eax+0x1]
c001a6cf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a6d3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a6d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a6da:	eb e5                	jmp    c001a6c1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a6dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a6e7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a6ea:	83 ec 04             	sub    esp,0x4
c001a6ed:	6a 06                	push   0x6
c001a6ef:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a6f3:	50                   	push   eax
c001a6f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a6f8:	e8 47 60 fe ff       	call   c0000744 <memcpy>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a705:	83 ec 04             	sub    esp,0x4
c001a708:	6a 06                	push   0x6
c001a70a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a70e:	50                   	push   eax
c001a70f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a713:	e8 2c 60 fe ff       	call   c0000744 <memcpy>
c001a718:	83 c4 10             	add    esp,0x10
c001a71b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a720:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a724:	0f b7 c0             	movzx  eax,ax
c001a727:	c1 f8 08             	sar    eax,0x8
c001a72a:	89 c1                	mov    ecx,eax
c001a72c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a730:	8d 50 01             	lea    edx,[eax+0x1]
c001a733:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a737:	88 ca                	mov    dl,cl
c001a739:	88 10                	mov    BYTE PTR [eax],dl
c001a73b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a73f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a743:	8d 48 01             	lea    ecx,[eax+0x1]
c001a746:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a74a:	88 10                	mov    BYTE PTR [eax],dl
c001a74c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a754:	83 ec 04             	sub    esp,0x4
c001a757:	52                   	push   edx
c001a758:	50                   	push   eax
c001a759:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a75d:	e8 e2 5f fe ff       	call   c0000744 <memcpy>
c001a762:	83 c4 10             	add    esp,0x10
c001a765:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a769:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a76d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a771:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a775:	83 ec 08             	sub    esp,0x8
c001a778:	50                   	push   eax
c001a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a77d:	e8 9b fe ff ff       	call   c001a61d <Net::crc32Calc(unsigned char*, int)>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78d:	c1 e8 18             	shr    eax,0x18
c001a790:	89 c1                	mov    ecx,eax
c001a792:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a796:	8d 50 01             	lea    edx,[eax+0x1]
c001a799:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a79d:	88 ca                	mov    dl,cl
c001a79f:	88 10                	mov    BYTE PTR [eax],dl
c001a7a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a5:	c1 e8 10             	shr    eax,0x10
c001a7a8:	89 c1                	mov    ecx,eax
c001a7aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7ae:	8d 50 01             	lea    edx,[eax+0x1]
c001a7b1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a7b5:	88 ca                	mov    dl,cl
c001a7b7:	88 10                	mov    BYTE PTR [eax],dl
c001a7b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7bd:	c1 e8 08             	shr    eax,0x8
c001a7c0:	89 c1                	mov    ecx,eax
c001a7c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7c6:	8d 50 01             	lea    edx,[eax+0x1]
c001a7c9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a7cd:	88 ca                	mov    dl,cl
c001a7cf:	88 10                	mov    BYTE PTR [eax],dl
c001a7d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7d5:	8d 50 01             	lea    edx,[eax+0x1]
c001a7d8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a7dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7e0:	88 10                	mov    BYTE PTR [eax],dl
c001a7e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7e6:	83 c4 1c             	add    esp,0x1c
c001a7e9:	c3                   	ret    

c001a7ea <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a7ea:	83 ec 2c             	sub    esp,0x2c
c001a7ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7f5:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a7fa:	83 ec 04             	sub    esp,0x4
c001a7fd:	6a 06                	push   0x6
c001a7ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a803:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a807:	83 c0 0e             	add    eax,0xe
c001a80a:	50                   	push   eax
c001a80b:	e8 34 5f fe ff       	call   c0000744 <memcpy>
c001a810:	83 c4 10             	add    esp,0x10
c001a813:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a818:	83 ec 04             	sub    esp,0x4
c001a81b:	6a 06                	push   0x6
c001a81d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a821:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a825:	83 c0 08             	add    eax,0x8
c001a828:	50                   	push   eax
c001a829:	e8 16 5f fe ff       	call   c0000744 <memcpy>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a836:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a83a:	8d 50 01             	lea    edx,[eax+0x1]
c001a83d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a841:	8a 00                	mov    al,BYTE PTR [eax]
c001a843:	0f b6 c0             	movzx  eax,al
c001a846:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a84b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a84f:	8d 50 01             	lea    edx,[eax+0x1]
c001a852:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a856:	8a 00                	mov    al,BYTE PTR [eax]
c001a858:	0f b6 c0             	movzx  eax,al
c001a85b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a860:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a865:	c1 e0 08             	shl    eax,0x8
c001a868:	89 c2                	mov    edx,eax
c001a86a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a86e:	09 d0                	or     eax,edx
c001a870:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a874:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a878:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a87d:	75 3a                	jne    c001a8b9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a87f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a883:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a886:	66 3d dc 05          	cmp    ax,0x5dc
c001a88a:	77 10                	ja     c001a89c <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a88c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a890:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a893:	0f b7 c0             	movzx  eax,ax
c001a896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a89a:	eb 1d                	jmp    c001a8b9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a89c:	83 ec 0c             	sub    esp,0xc
c001a89f:	68 d8 b8 02 c0       	push   0xc002b8d8
c001a8a4:	e8 13 83 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8b0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a8b4:	e9 c0 00 00 00       	jmp    c001a979 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a8b9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a8bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8c3:	83 ec 04             	sub    esp,0x4
c001a8c6:	52                   	push   edx
c001a8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a8cb:	50                   	push   eax
c001a8cc:	e8 73 5e fe ff       	call   c0000744 <memcpy>
c001a8d1:	83 c4 10             	add    esp,0x10
c001a8d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8d8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a8dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a8e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8e7:	8a 00                	mov    al,BYTE PTR [eax]
c001a8e9:	0f b6 c0             	movzx  eax,al
c001a8ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a8f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8fb:	8a 00                	mov    al,BYTE PTR [eax]
c001a8fd:	0f b6 c0             	movzx  eax,al
c001a900:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a904:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a908:	8d 50 01             	lea    edx,[eax+0x1]
c001a90b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a90f:	8a 00                	mov    al,BYTE PTR [eax]
c001a911:	0f b6 c0             	movzx  eax,al
c001a914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a91c:	8d 50 01             	lea    edx,[eax+0x1]
c001a91f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a923:	8a 00                	mov    al,BYTE PTR [eax]
c001a925:	0f b6 c0             	movzx  eax,al
c001a928:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a92c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a930:	c1 e0 18             	shl    eax,0x18
c001a933:	89 c2                	mov    edx,eax
c001a935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a939:	c1 e0 10             	shl    eax,0x10
c001a93c:	09 c2                	or     edx,eax
c001a93e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a942:	c1 e0 08             	shl    eax,0x8
c001a945:	09 d0                	or     eax,edx
c001a947:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a94b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a94f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a953:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a957:	83 e8 04             	sub    eax,0x4
c001a95a:	83 ec 08             	sub    esp,0x8
c001a95d:	50                   	push   eax
c001a95e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a962:	e8 b6 fc ff ff       	call   c001a61d <Net::crc32Calc(unsigned char*, int)>
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a96e:	0f 94 c2             	sete   dl
c001a971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a975:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a978:	90                   	nop
c001a979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a97d:	83 c4 2c             	add    esp,0x2c
c001a980:	c2 04 00             	ret    0x4

c001a983 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a983:	55                   	push   ebp
c001a984:	57                   	push   edi
c001a985:	56                   	push   esi
c001a986:	53                   	push   ebx
c001a987:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a98d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a994:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a996:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a999:	80 fb 40             	cmp    bl,0x40
c001a99c:	75 1b                	jne    c001a9b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a99e:	8a 16                	mov    dl,BYTE PTR [esi]
c001a9a0:	84 d2                	test   dl,dl
c001a9a2:	0f 84 f1 00 00 00    	je     c001aa99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9a8:	8d 46 01             	lea    eax,[esi+0x1]
c001a9ab:	80 fa 3a             	cmp    dl,0x3a
c001a9ae:	74 04                	je     c001a9b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a9b0:	89 c6                	mov    esi,eax
c001a9b2:	eb ea                	jmp    c001a99e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a9b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a9b7:	89 c6                	mov    esi,eax
c001a9b9:	50                   	push   eax
c001a9ba:	6a 40                	push   0x40
c001a9bc:	6a 00                	push   0x0
c001a9be:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9c2:	50                   	push   eax
c001a9c3:	e8 b0 5d fe ff       	call   c0000778 <memset>
c001a9c8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a9cf:	31 c0                	xor    eax,eax
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a9d6:	84 c9                	test   cl,cl
c001a9d8:	0f 84 bb 00 00 00    	je     c001aa99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9de:	3d c7 00 00 00       	cmp    eax,0xc7
c001a9e3:	0f 8f b0 00 00 00    	jg     c001aa99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9e9:	80 f9 0a             	cmp    cl,0xa
c001a9ec:	0f 85 98 00 00 00    	jne    c001aa8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a9f2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a9f7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a9fb:	a8 df                	test   al,0xdf
c001a9fd:	0f 94 c1             	sete   cl
c001aa00:	3c 23                	cmp    al,0x23
c001aa02:	0f 94 c2             	sete   dl
c001aa05:	08 d1                	or     cl,dl
c001aa07:	75 4a                	jne    c001aa53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa09:	8d 50 f7             	lea    edx,[eax-0x9]
c001aa0c:	80 fa 01             	cmp    dl,0x1
c001aa0f:	76 42                	jbe    c001aa53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa11:	3c 5b                	cmp    al,0x5b
c001aa13:	75 42                	jne    c001aa57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aa15:	80 fb 40             	cmp    bl,0x40
c001aa18:	75 39                	jne    c001aa53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa1a:	83 ec 0c             	sub    esp,0xc
c001aa1d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aa21:	52                   	push   edx
c001aa22:	e8 6d 5d fe ff       	call   c0000794 <strlen>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	83 f8 3f             	cmp    eax,0x3f
c001aa2d:	77 6a                	ja     c001aa99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa2f:	50                   	push   eax
c001aa30:	50                   	push   eax
c001aa31:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aa35:	52                   	push   edx
c001aa36:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa3a:	52                   	push   edx
c001aa3b:	e8 f4 5d fe ff       	call   c0000834 <strcpy>
c001aa40:	58                   	pop    eax
c001aa41:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa45:	52                   	push   edx
c001aa46:	e8 49 5d fe ff       	call   c0000794 <strlen>
c001aa4b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	31 d2                	xor    edx,edx
c001aa55:	eb 3a                	jmp    c001aa91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aa57:	80 fb 40             	cmp    bl,0x40
c001aa5a:	74 06                	je     c001aa62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aa5c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aa60:	eb 20                	jmp    c001aa82 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aa62:	50                   	push   eax
c001aa63:	50                   	push   eax
c001aa64:	55                   	push   ebp
c001aa65:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa69:	50                   	push   eax
c001aa6a:	e8 51 5e fe ff       	call   c00008c0 <strcmp>
c001aa6f:	83 c4 10             	add    esp,0x10
c001aa72:	85 c0                	test   eax,eax
c001aa74:	75 dd                	jne    c001aa53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa76:	eb e4                	jmp    c001aa5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aa78:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7b:	80 f9 3d             	cmp    cl,0x3d
c001aa7e:	74 1d                	je     c001aa9d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aa80:	89 d0                	mov    eax,edx
c001aa82:	8a 08                	mov    cl,BYTE PTR [eax]
c001aa84:	84 c9                	test   cl,cl
c001aa86:	75 f0                	jne    c001aa78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aa88:	eb 0f                	jmp    c001aa99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa8a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa8d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aa91:	47                   	inc    edi
c001aa92:	89 d0                	mov    eax,edx
c001aa94:	e9 3b ff ff ff       	jmp    c001a9d4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aa99:	31 c0                	xor    eax,eax
c001aa9b:	eb 33                	jmp    c001aad0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aa9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aaa1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aaa4:	50                   	push   eax
c001aaa5:	50                   	push   eax
c001aaa6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aaaa:	50                   	push   eax
c001aaab:	56                   	push   esi
c001aaac:	e8 0f 5e fe ff       	call   c00008c0 <strcmp>
c001aab1:	83 c4 10             	add    esp,0x10
c001aab4:	85 c0                	test   eax,eax
c001aab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aaba:	75 97                	jne    c001aa53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aabc:	51                   	push   ecx
c001aabd:	51                   	push   ecx
c001aabe:	52                   	push   edx
c001aabf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aac6:	e8 69 5d fe ff       	call   c0000834 <strcpy>
c001aacb:	83 c4 10             	add    esp,0x10
c001aace:	b0 01                	mov    al,0x1
c001aad0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aad6:	5b                   	pop    ebx
c001aad7:	5e                   	pop    esi
c001aad8:	5f                   	pop    edi
c001aad9:	5d                   	pop    ebp
c001aada:	c3                   	ret    

c001aadb <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aadb:	57                   	push   edi
c001aadc:	56                   	push   esi
c001aadd:	53                   	push   ebx
c001aade:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aae4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aaeb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aaf2:	53                   	push   ebx
c001aaf3:	e8 9c 5c fe ff       	call   c0000794 <strlen>
c001aaf8:	89 34 24             	mov    DWORD PTR [esp],esi
c001aafb:	89 c7                	mov    edi,eax
c001aafd:	e8 92 5c fe ff       	call   c0000794 <strlen>
c001ab02:	83 c4 10             	add    esp,0x10
c001ab05:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ab09:	3d ff 00 00 00       	cmp    eax,0xff
c001ab0e:	0f 87 d3 00 00 00    	ja     c001abe7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab14:	57                   	push   edi
c001ab15:	57                   	push   edi
c001ab16:	56                   	push   esi
c001ab17:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ab1b:	56                   	push   esi
c001ab1c:	e8 13 5d fe ff       	call   c0000834 <strcpy>
c001ab21:	58                   	pop    eax
c001ab22:	5a                   	pop    edx
c001ab23:	68 a1 be 02 c0       	push   0xc002bea1
c001ab28:	56                   	push   esi
c001ab29:	e8 46 5e fe ff       	call   c0000974 <strcat>
c001ab2e:	59                   	pop    ecx
c001ab2f:	5f                   	pop    edi
c001ab30:	53                   	push   ebx
c001ab31:	56                   	push   esi
c001ab32:	e8 3d 5e fe ff       	call   c0000974 <strcat>
c001ab37:	58                   	pop    eax
c001ab38:	5a                   	pop    edx
c001ab39:	68 24 b9 02 c0       	push   0xc002b924
c001ab3e:	56                   	push   esi
c001ab3f:	e8 30 5e fe ff       	call   c0000974 <strcat>
c001ab44:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ab4b:	e8 f0 4c ff ff       	call   c000f840 <malloc>
c001ab50:	83 c4 0c             	add    esp,0xc
c001ab53:	89 c3                	mov    ebx,eax
c001ab55:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c001ab5b:	56                   	push   esi
c001ab5c:	50                   	push   eax
c001ab5d:	e8 b2 85 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	85 db                	test   ebx,ebx
c001ab67:	74 7e                	je     c001abe7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab69:	51                   	push   ecx
c001ab6a:	51                   	push   ecx
c001ab6b:	6a 01                	push   0x1
c001ab6d:	53                   	push   ebx
c001ab6e:	e8 05 86 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	85 c0                	test   eax,eax
c001ab78:	74 08                	je     c001ab82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ab7a:	83 ec 0c             	sub    esp,0xc
c001ab7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab7f:	53                   	push   ebx
c001ab80:	eb 5f                	jmp    c001abe1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ab82:	52                   	push   edx
c001ab83:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ab87:	50                   	push   eax
c001ab88:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab8c:	50                   	push   eax
c001ab8d:	53                   	push   ebx
c001ab8e:	e8 91 88 ff ff       	call   c0013424 <File::stat(unsigned long long*, bool*)>
c001ab93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	89 c1                	mov    ecx,eax
c001ab9c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aba0:	74 31                	je     c001abd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aba2:	83 ec 0c             	sub    esp,0xc
c001aba5:	50                   	push   eax
c001aba6:	e8 95 4c ff ff       	call   c000f840 <malloc>
c001abab:	89 c6                	mov    esi,eax
c001abad:	58                   	pop    eax
c001abae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abb0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001abb4:	52                   	push   edx
c001abb5:	56                   	push   esi
c001abb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abbe:	53                   	push   ebx
c001abbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abc2:	83 c4 20             	add    esp,0x20
c001abc5:	85 c0                	test   eax,eax
c001abc7:	75 0a                	jne    c001abd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001abc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abcd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001abd1:	74 18                	je     c001abeb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001abd3:	83 ec 0c             	sub    esp,0xc
c001abd6:	53                   	push   ebx
c001abd7:	e8 fa 85 ff ff       	call   c00131d6 <File::close()>
c001abdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	31 c0                	xor    eax,eax
c001abe9:	eb 3b                	jmp    c001ac26 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001abeb:	83 ec 0c             	sub    esp,0xc
c001abee:	53                   	push   ebx
c001abef:	e8 e2 85 ff ff       	call   c00131d6 <File::close()>
c001abf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abf9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abfc:	83 c4 0c             	add    esp,0xc
c001abff:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ac06:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ac0d:	56                   	push   esi
c001ac0e:	e8 70 fd ff ff       	call   c001a983 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ac13:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac16:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ac1a:	e8 31 4c ff ff       	call   c000f850 <free>
c001ac1f:	83 c4 10             	add    esp,0x10
c001ac22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac26:	81 c4 20 01 00 00    	add    esp,0x120
c001ac2c:	5b                   	pop    ebx
c001ac2d:	5e                   	pop    esi
c001ac2e:	5f                   	pop    edi
c001ac2f:	c3                   	ret    

c001ac30 <Reg::getLine(char*, char*, char*)>:
c001ac30:	57                   	push   edi
c001ac31:	56                   	push   esi
c001ac32:	53                   	push   ebx
c001ac33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac3b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac3f:	57                   	push   edi
c001ac40:	56                   	push   esi
c001ac41:	53                   	push   ebx
c001ac42:	68 29 b9 02 c0       	push   0xc002b929
c001ac47:	e8 8f fe ff ff       	call   c001aadb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac4c:	83 c4 10             	add    esp,0x10
c001ac4f:	84 c0                	test   al,al
c001ac51:	75 10                	jne    c001ac63 <Reg::getLine(char*, char*, char*)+0x33>
c001ac53:	57                   	push   edi
c001ac54:	56                   	push   esi
c001ac55:	53                   	push   ebx
c001ac56:	68 4e b9 02 c0       	push   0xc002b94e
c001ac5b:	e8 7b fe ff ff       	call   c001aadb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac60:	83 c4 10             	add    esp,0x10
c001ac63:	5b                   	pop    ebx
c001ac64:	5e                   	pop    esi
c001ac65:	5f                   	pop    edi
c001ac66:	c3                   	ret    

c001ac67 <Reg::readInt(char*, char*, int*)>:
c001ac67:	55                   	push   ebp
c001ac68:	57                   	push   edi
c001ac69:	56                   	push   esi
c001ac6a:	53                   	push   ebx
c001ac6b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ac71:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ac75:	57                   	push   edi
c001ac76:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac7d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac84:	e8 a7 ff ff ff       	call   c001ac30 <Reg::getLine(char*, char*, char*)>
c001ac89:	83 c4 10             	add    esp,0x10
c001ac8c:	84 c0                	test   al,al
c001ac8e:	0f 84 b3 00 00 00    	je     c001ad47 <Reg::readInt(char*, char*, int*)+0xe0>
c001ac94:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ac98:	80 fa 2b             	cmp    dl,0x2b
c001ac9b:	74 0c                	je     c001aca9 <Reg::readInt(char*, char*, int*)+0x42>
c001ac9d:	80 fa 2d             	cmp    dl,0x2d
c001aca0:	75 0e                	jne    c001acb0 <Reg::readInt(char*, char*, int*)+0x49>
c001aca2:	ba 01 00 00 00       	mov    edx,0x1
c001aca7:	eb 0b                	jmp    c001acb4 <Reg::readInt(char*, char*, int*)+0x4d>
c001aca9:	ba 01 00 00 00       	mov    edx,0x1
c001acae:	eb 02                	jmp    c001acb2 <Reg::readInt(char*, char*, int*)+0x4b>
c001acb0:	31 d2                	xor    edx,edx
c001acb2:	31 c0                	xor    eax,eax
c001acb4:	be 0a 00 00 00       	mov    esi,0xa
c001acb9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001acbe:	75 20                	jne    c001ace0 <Reg::readInt(char*, char*, int*)+0x79>
c001acc0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001acc4:	80 f9 78             	cmp    cl,0x78
c001acc7:	75 0a                	jne    c001acd3 <Reg::readInt(char*, char*, int*)+0x6c>
c001acc9:	83 c2 02             	add    edx,0x2
c001accc:	be 10 00 00 00       	mov    esi,0x10
c001acd1:	eb 0d                	jmp    c001ace0 <Reg::readInt(char*, char*, int*)+0x79>
c001acd3:	80 f9 62             	cmp    cl,0x62
c001acd6:	75 08                	jne    c001ace0 <Reg::readInt(char*, char*, int*)+0x79>
c001acd8:	83 c2 02             	add    edx,0x2
c001acdb:	be 02 00 00 00       	mov    esi,0x2
c001ace0:	01 d7                	add    edi,edx
c001ace2:	31 d2                	xor    edx,edx
c001ace4:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ace6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001acea:	80 fb 0d             	cmp    bl,0xd
c001aced:	0f 94 c3             	sete   bl
c001acf0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001acf5:	0f 94 c1             	sete   cl
c001acf8:	08 cb                	or     bl,cl
c001acfa:	75 3a                	jne    c001ad36 <Reg::readInt(char*, char*, int*)+0xcf>
c001acfc:	0f af d6             	imul   edx,esi
c001acff:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ad04:	83 fe 10             	cmp    esi,0x10
c001ad07:	75 26                	jne    c001ad2f <Reg::readInt(char*, char*, int*)+0xc8>
c001ad09:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ad0d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ad10:	89 e9                	mov    ecx,ebp
c001ad12:	80 f9 05             	cmp    cl,0x5
c001ad15:	77 06                	ja     c001ad1d <Reg::readInt(char*, char*, int*)+0xb6>
c001ad17:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ad1b:	eb 16                	jmp    c001ad33 <Reg::readInt(char*, char*, int*)+0xcc>
c001ad1d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ad21:	83 e9 61             	sub    ecx,0x61
c001ad24:	80 f9 05             	cmp    cl,0x5
c001ad27:	77 06                	ja     c001ad2f <Reg::readInt(char*, char*, int*)+0xc8>
c001ad29:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ad2d:	eb 04                	jmp    c001ad33 <Reg::readInt(char*, char*, int*)+0xcc>
c001ad2f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ad33:	47                   	inc    edi
c001ad34:	eb ae                	jmp    c001ace4 <Reg::readInt(char*, char*, int*)+0x7d>
c001ad36:	84 c0                	test   al,al
c001ad38:	74 02                	je     c001ad3c <Reg::readInt(char*, char*, int*)+0xd5>
c001ad3a:	f7 da                	neg    edx
c001ad3c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ad43:	89 10                	mov    DWORD PTR [eax],edx
c001ad45:	88 d8                	mov    al,bl
c001ad47:	81 c4 ec 00 00 00    	add    esp,0xec
c001ad4d:	5b                   	pop    ebx
c001ad4e:	5e                   	pop    esi
c001ad4f:	5f                   	pop    edi
c001ad50:	5d                   	pop    ebp
c001ad51:	c3                   	ret    

c001ad52 <Reg::readString(char*, char*, char*, int)>:
c001ad52:	57                   	push   edi
c001ad53:	56                   	push   esi
c001ad54:	53                   	push   ebx
c001ad55:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ad5b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ad62:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ad66:	57                   	push   edi
c001ad67:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad6e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad75:	e8 b6 fe ff ff       	call   c001ac30 <Reg::getLine(char*, char*, char*)>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	89 c6                	mov    esi,eax
c001ad7f:	84 c0                	test   al,al
c001ad81:	74 44                	je     c001adc7 <Reg::readString(char*, char*, char*, int)+0x75>
c001ad83:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ad8a:	31 c0                	xor    eax,eax
c001ad8c:	4a                   	dec    edx
c001ad8d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ad90:	84 c9                	test   cl,cl
c001ad92:	74 0f                	je     c001ada3 <Reg::readString(char*, char*, char*, int)+0x51>
c001ad94:	39 c2                	cmp    edx,eax
c001ad96:	7e 0b                	jle    c001ada3 <Reg::readString(char*, char*, char*, int)+0x51>
c001ad98:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ad9b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ada0:	40                   	inc    eax
c001ada1:	eb ea                	jmp    c001ad8d <Reg::readString(char*, char*, char*, int)+0x3b>
c001ada3:	83 ec 0c             	sub    esp,0xc
c001ada6:	53                   	push   ebx
c001ada7:	e8 e8 59 fe ff       	call   c0000794 <strlen>
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001adb4:	75 11                	jne    c001adc7 <Reg::readString(char*, char*, char*, int)+0x75>
c001adb6:	83 ec 0c             	sub    esp,0xc
c001adb9:	53                   	push   ebx
c001adba:	e8 d5 59 fe ff       	call   c0000794 <strlen>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001adc7:	81 c4 d0 00 00 00    	add    esp,0xd0
c001adcd:	89 f0                	mov    eax,esi
c001adcf:	5b                   	pop    ebx
c001add0:	5e                   	pop    esi
c001add1:	5f                   	pop    edi
c001add2:	c3                   	ret    

c001add3 <Reg::readBool(char*, char*, bool*)>:
c001add3:	83 ec 20             	sub    esp,0x20
c001add6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adda:	50                   	push   eax
c001addb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001addf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ade3:	e8 7f fe ff ff       	call   c001ac67 <Reg::readInt(char*, char*, int*)>
c001ade8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aded:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001adf1:	0f 95 02             	setne  BYTE PTR [edx]
c001adf4:	83 c4 2c             	add    esp,0x2c
c001adf7:	c3                   	ret    

c001adf8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001adf8:	53                   	push   ebx
c001adf9:	83 ec 1c             	sub    esp,0x1c
c001adfc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ae00:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ae04:	50                   	push   eax
c001ae05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae0d:	e8 c1 ff ff ff       	call   c001add3 <Reg::readBool(char*, char*, bool*)>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	84 c0                	test   al,al
c001ae17:	74 04                	je     c001ae1d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ae19:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ae1d:	88 d8                	mov    al,bl
c001ae1f:	83 c4 18             	add    esp,0x18
c001ae22:	5b                   	pop    ebx
c001ae23:	c3                   	ret    

c001ae24 <Reg::readIntWithDefault(char*, char*, int)>:
c001ae24:	53                   	push   ebx
c001ae25:	83 ec 1c             	sub    esp,0x1c
c001ae28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ae30:	50                   	push   eax
c001ae31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae39:	e8 29 fe ff ff       	call   c001ac67 <Reg::readInt(char*, char*, int*)>
c001ae3e:	83 c4 10             	add    esp,0x10
c001ae41:	84 c0                	test   al,al
c001ae43:	74 04                	je     c001ae49 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ae45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ae49:	89 d8                	mov    eax,ebx
c001ae4b:	83 c4 18             	add    esp,0x18
c001ae4e:	5b                   	pop    ebx
c001ae4f:	c3                   	ret    

c001ae50 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ae50:	57                   	push   edi
c001ae51:	56                   	push   esi
c001ae52:	53                   	push   ebx
c001ae53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae57:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ae5b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae5f:	56                   	push   esi
c001ae60:	53                   	push   ebx
c001ae61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae69:	e8 e4 fe ff ff       	call   c001ad52 <Reg::readString(char*, char*, char*, int)>
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	84 c0                	test   al,al
c001ae73:	75 1b                	jne    c001ae90 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001ae75:	50                   	push   eax
c001ae76:	56                   	push   esi
c001ae77:	4e                   	dec    esi
c001ae78:	6a 00                	push   0x0
c001ae7a:	53                   	push   ebx
c001ae7b:	e8 f8 58 fe ff       	call   c0000778 <memset>
c001ae80:	83 c4 0c             	add    esp,0xc
c001ae83:	56                   	push   esi
c001ae84:	57                   	push   edi
c001ae85:	53                   	push   ebx
c001ae86:	89 fb                	mov    ebx,edi
c001ae88:	e8 b7 58 fe ff       	call   c0000744 <memcpy>
c001ae8d:	83 c4 10             	add    esp,0x10
c001ae90:	89 d8                	mov    eax,ebx
c001ae92:	5b                   	pop    ebx
c001ae93:	5e                   	pop    esi
c001ae94:	5f                   	pop    edi
c001ae95:	c3                   	ret    

c001ae96 <Sys::eject(regs*)>:
c001ae96:	83 ec 0c             	sub    esp,0xc
c001ae99:	83 ca ff             	or     edx,0xffffffff
c001ae9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aea3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aea8:	83 e9 41             	sub    ecx,0x41
c001aeab:	83 f9 19             	cmp    ecx,0x19
c001aeae:	77 18                	ja     c001aec8 <Sys::eject(regs*)+0x32>
c001aeb0:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c001aeb7:	85 c9                	test   ecx,ecx
c001aeb9:	74 0d                	je     c001aec8 <Sys::eject(regs*)+0x32>
c001aebb:	83 ec 0c             	sub    esp,0xc
c001aebe:	51                   	push   ecx
c001aebf:	e8 78 b4 ff ff       	call   c001633c <LogicalDisk::eject()>
c001aec4:	83 c4 10             	add    esp,0x10
c001aec7:	99                   	cdq    
c001aec8:	83 c4 0c             	add    esp,0xc
c001aecb:	c3                   	ret    

c001aecc <Sys::exit(regs*)>:
c001aecc:	83 ec 18             	sub    esp,0x18
c001aecf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aed3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aed6:	e8 c4 35 00 00       	call   c001e49f <terminateTask(int)>
c001aedb:	83 c8 ff             	or     eax,0xffffffff
c001aede:	83 c4 1c             	add    esp,0x1c
c001aee1:	89 c2                	mov    edx,eax
c001aee3:	c3                   	ret    

c001aee4 <Sys::getCwd(regs*)>:
c001aee4:	83 ec 10             	sub    esp,0x10
c001aee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeeb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aeee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aef6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aef9:	e8 18 80 ff ff       	call   c0012f16 <Fs::getcwd(Process*, char*, int)>
c001aefe:	83 c4 1c             	add    esp,0x1c
c001af01:	99                   	cdq    
c001af02:	c3                   	ret    

c001af03 <Sys::getPID(regs*)>:
c001af03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001af0d:	99                   	cdq    
c001af0e:	c3                   	ret    

c001af0f <Sys::getRAMData(regs*)>:
c001af0f:	8b 0d 10 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e110
c001af15:	6b 05 0c e1 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e10c,0x64
c001af1c:	99                   	cdq    
c001af1d:	f7 f9                	idiv   ecx
c001af1f:	c1 e0 18             	shl    eax,0x18
c001af22:	09 c8                	or     eax,ecx
c001af24:	99                   	cdq    
c001af25:	c3                   	ret    

c001af26 <Sys::loadDLL(regs*)>:
c001af26:	56                   	push   esi
c001af27:	53                   	push   ebx
c001af28:	31 d2                	xor    edx,edx
c001af2a:	51                   	push   ecx
c001af2b:	b8 01 00 00 00       	mov    eax,0x1
c001af30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af34:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001af38:	0f 84 8c 00 00 00    	je     c001afca <Sys::loadDLL(regs*)+0xa4>
c001af3e:	83 ec 0c             	sub    esp,0xc
c001af41:	68 14 01 00 00       	push   0x114
c001af46:	e8 f5 48 ff ff       	call   c000f840 <malloc>
c001af4b:	83 c4 0c             	add    esp,0xc
c001af4e:	89 c3                	mov    ebx,eax
c001af50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af58:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af5b:	53                   	push   ebx
c001af5c:	e8 b3 81 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001af61:	83 c4 10             	add    esp,0x10
c001af64:	31 d2                	xor    edx,edx
c001af66:	b8 02 00 00 00       	mov    eax,0x2
c001af6b:	85 db                	test   ebx,ebx
c001af6d:	74 5b                	je     c001afca <Sys::loadDLL(regs*)+0xa4>
c001af6f:	83 ec 0c             	sub    esp,0xc
c001af72:	53                   	push   ebx
c001af73:	e8 6e 84 ff ff       	call   c00133e6 <File::exists()>
c001af78:	83 c4 10             	add    esp,0x10
c001af7b:	84 c0                	test   al,al
c001af7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7f:	75 11                	jne    c001af92 <Sys::loadDLL(regs*)+0x6c>
c001af81:	83 ec 0c             	sub    esp,0xc
c001af84:	53                   	push   ebx
c001af85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af88:	83 c4 10             	add    esp,0x10
c001af8b:	b8 03 00 00 00       	mov    eax,0x3
c001af90:	eb 36                	jmp    c001afc8 <Sys::loadDLL(regs*)+0xa2>
c001af92:	83 ec 0c             	sub    esp,0xc
c001af95:	53                   	push   ebx
c001af96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af99:	58                   	pop    eax
c001af9a:	5a                   	pop    edx
c001af9b:	6a 00                	push   0x0
c001af9d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001afa0:	e8 0f 24 00 00       	call   c001d3b4 <Thr::loadDLL(char const*, bool)>
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	89 c1                	mov    ecx,eax
c001afaa:	31 d2                	xor    edx,edx
c001afac:	b8 04 00 00 00       	mov    eax,0x4
c001afb1:	85 c9                	test   ecx,ecx
c001afb3:	74 15                	je     c001afca <Sys::loadDLL(regs*)+0xa4>
c001afb5:	53                   	push   ebx
c001afb6:	53                   	push   ebx
c001afb7:	ff 35 c8 e0 02 c0    	push   DWORD PTR ds:0xc002e0c8
c001afbd:	51                   	push   ecx
c001afbe:	e8 25 26 00 00       	call   c001d5e8 <Thr::executeDLL(unsigned long, void*)>
c001afc3:	83 c4 10             	add    esp,0x10
c001afc6:	31 c0                	xor    eax,eax
c001afc8:	31 d2                	xor    edx,edx
c001afca:	59                   	pop    ecx
c001afcb:	5b                   	pop    ebx
c001afcc:	5e                   	pop    esi
c001afcd:	c3                   	ret    

c001afce <Sys::read(regs*)>:
c001afce:	57                   	push   edi
c001afcf:	56                   	push   esi
c001afd0:	53                   	push   ebx
c001afd1:	83 ec 10             	sub    esp,0x10
c001afd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afd8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afdb:	83 f8 02             	cmp    eax,0x2
c001afde:	77 10                	ja     c001aff0 <Sys::read(regs*)+0x22>
c001afe0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afe8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afee:	eb 0e                	jmp    c001affe <Sys::read(regs*)+0x30>
c001aff0:	83 ec 0c             	sub    esp,0xc
c001aff3:	50                   	push   eax
c001aff4:	e8 d2 69 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	89 c1                	mov    ecx,eax
c001affe:	83 c8 ff             	or     eax,0xffffffff
c001b001:	85 c9                	test   ecx,ecx
c001b003:	89 c2                	mov    edx,eax
c001b005:	74 28                	je     c001b02f <Sys::read(regs*)+0x61>
c001b007:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b00f:	31 ff                	xor    edi,edi
c001b011:	83 ec 0c             	sub    esp,0xc
c001b014:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b016:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b01a:	52                   	push   edx
c001b01b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b01e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b021:	57                   	push   edi
c001b022:	56                   	push   esi
c001b023:	51                   	push   ecx
c001b024:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b027:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b02b:	83 c4 20             	add    esp,0x20
c001b02e:	99                   	cdq    
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	5b                   	pop    ebx
c001b033:	5e                   	pop    esi
c001b034:	5f                   	pop    edi
c001b035:	c3                   	ret    

c001b036 <Sys::sbrk(regs*)>:
c001b036:	56                   	push   esi
c001b037:	53                   	push   ebx
c001b038:	83 ec 0c             	sub    esp,0xc
c001b03b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b03f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b044:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b047:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b04d:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b050:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b053:	68 69 b9 02 c0       	push   0xc002b969
c001b058:	e8 5f 7b ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b05d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b060:	83 c4 10             	add    esp,0x10
c001b063:	85 c0                	test   eax,eax
c001b065:	75 0a                	jne    c001b071 <Sys::sbrk(regs*)+0x3b>
c001b067:	50                   	push   eax
c001b068:	50                   	push   eax
c001b069:	53                   	push   ebx
c001b06a:	68 85 b9 02 c0       	push   0xc002b985
c001b06f:	eb 54                	jmp    c001b0c5 <Sys::sbrk(regs*)+0x8f>
c001b071:	79 0a                	jns    c001b07d <Sys::sbrk(regs*)+0x47>
c001b073:	56                   	push   esi
c001b074:	56                   	push   esi
c001b075:	53                   	push   ebx
c001b076:	68 98 b9 02 c0       	push   0xc002b998
c001b07b:	eb 48                	jmp    c001b0c5 <Sys::sbrk(regs*)+0x8f>
c001b07d:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b082:	76 17                	jbe    c001b09b <Sys::sbrk(regs*)+0x65>
c001b084:	51                   	push   ecx
c001b085:	51                   	push   ecx
c001b086:	53                   	push   ebx
c001b087:	68 aa b9 02 c0       	push   0xc002b9aa
c001b08c:	e8 2b 7b ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b091:	83 c8 ff             	or     eax,0xffffffff
c001b094:	83 c4 10             	add    esp,0x10
c001b097:	89 c2                	mov    edx,eax
c001b099:	eb 36                	jmp    c001b0d1 <Sys::sbrk(regs*)+0x9b>
c001b09b:	05 ff 0f 00 00       	add    eax,0xfff
c001b0a0:	56                   	push   esi
c001b0a1:	c1 e8 0c             	shr    eax,0xc
c001b0a4:	68 07 04 00 00       	push   0x407
c001b0a9:	50                   	push   eax
c001b0aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0b2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b0b8:	e8 2f 72 ff ff       	call   c00122ec <VAS::allocatePages(int, int)>
c001b0bd:	58                   	pop    eax
c001b0be:	5a                   	pop    edx
c001b0bf:	53                   	push   ebx
c001b0c0:	68 c3 b9 02 c0       	push   0xc002b9c3
c001b0c5:	e8 f2 7a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b0ca:	89 d8                	mov    eax,ebx
c001b0cc:	31 d2                	xor    edx,edx
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	59                   	pop    ecx
c001b0d2:	5b                   	pop    ebx
c001b0d3:	5e                   	pop    esi
c001b0d4:	c3                   	ret    

c001b0d5 <Sys::setCwd(regs*)>:
c001b0d5:	83 ec 14             	sub    esp,0x14
c001b0d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0dc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0e7:	e8 99 83 ff ff       	call   c0013485 <Fs::setcwd(Process*, char*)>
c001b0ec:	83 c4 1c             	add    esp,0x1c
c001b0ef:	99                   	cdq    
c001b0f0:	c3                   	ret    

c001b0f1 <Sys::setTime(regs*)>:
c001b0f1:	55                   	push   ebp
c001b0f2:	31 d2                	xor    edx,edx
c001b0f4:	57                   	push   edi
c001b0f5:	bf 18 00 00 00       	mov    edi,0x18
c001b0fa:	56                   	push   esi
c001b0fb:	53                   	push   ebx
c001b0fc:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b101:	83 ec 30             	sub    esp,0x30
c001b104:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b108:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b10b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b10e:	f7 f3                	div    ebx
c001b110:	89 d6                	mov    esi,edx
c001b112:	31 d2                	xor    edx,edx
c001b114:	f7 f3                	div    ebx
c001b116:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b119:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b11d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b122:	31 d2                	xor    edx,edx
c001b124:	f7 f3                	div    ebx
c001b126:	31 d2                	xor    edx,edx
c001b128:	bb 0c 00 00 00       	mov    ebx,0xc
c001b12d:	f7 f7                	div    edi
c001b12f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b132:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b136:	0f b7 cd             	movzx  ecx,bp
c001b139:	56                   	push   esi
c001b13a:	89 c7                	mov    edi,eax
c001b13c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b140:	c1 e6 10             	shl    esi,0x10
c001b143:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b147:	83 e7 1f             	and    edi,0x1f
c001b14a:	51                   	push   ecx
c001b14b:	47                   	inc    edi
c001b14c:	c1 e8 05             	shr    eax,0x5
c001b14f:	31 d2                	xor    edx,edx
c001b151:	f7 f3                	div    ebx
c001b153:	31 db                	xor    ebx,ebx
c001b155:	52                   	push   edx
c001b156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b15a:	57                   	push   edi
c001b15b:	68 e9 b9 02 c0       	push   0xc002b9e9
c001b160:	e8 57 7a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b165:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b169:	89 f8                	mov    eax,edi
c001b16b:	31 c9                	xor    ecx,ecx
c001b16d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b171:	88 c1                	mov    cl,al
c001b173:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b179:	88 d5                	mov    ch,dl
c001b17b:	c1 e0 10             	shl    eax,0x10
c001b17e:	0f b7 d1             	movzx  edx,cx
c001b181:	09 c2                	or     edx,eax
c001b183:	89 d8                	mov    eax,ebx
c001b185:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b18a:	09 f0                	or     eax,esi
c001b18c:	89 c3                	mov    ebx,eax
c001b18e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b192:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b196:	83 c4 18             	add    esp,0x18
c001b199:	53                   	push   ebx
c001b19a:	52                   	push   edx
c001b19b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b19f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b1a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b1a7:	e8 f3 89 ff ff       	call   c0013b9f <datetimeToSeconds(datetime_t)>
c001b1ac:	83 c4 0c             	add    esp,0xc
c001b1af:	52                   	push   edx
c001b1b0:	50                   	push   eax
c001b1b1:	56                   	push   esi
c001b1b2:	e8 6f 8b ff ff       	call   c0013d26 <secondsToDatetime(unsigned long long)>
c001b1b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1bf:	51                   	push   ecx
c001b1c0:	89 d6                	mov    esi,edx
c001b1c2:	51                   	push   ecx
c001b1c3:	c1 ee 10             	shr    esi,0x10
c001b1c6:	89 f3                	mov    ebx,esi
c001b1c8:	0f b6 f3             	movzx  esi,bl
c001b1cb:	56                   	push   esi
c001b1cc:	0f b6 f6             	movzx  esi,dh
c001b1cf:	0f b6 d2             	movzx  edx,dl
c001b1d2:	56                   	push   esi
c001b1d3:	52                   	push   edx
c001b1d4:	89 c2                	mov    edx,eax
c001b1d6:	c1 ea 10             	shr    edx,0x10
c001b1d9:	52                   	push   edx
c001b1da:	0f b6 d4             	movzx  edx,ah
c001b1dd:	0f b6 c0             	movzx  eax,al
c001b1e0:	52                   	push   edx
c001b1e1:	50                   	push   eax
c001b1e2:	68 05 ba 02 c0       	push   0xc002ba05
c001b1e7:	e8 d0 79 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b1ec:	83 c4 2c             	add    esp,0x2c
c001b1ef:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001b1f4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b1f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b1fc:	53                   	push   ebx
c001b1fd:	51                   	push   ecx
c001b1fe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b204:	e8 bd 8a ff ff       	call   c0013cc6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b209:	83 f0 01             	xor    eax,0x1
c001b20c:	31 d2                	xor    edx,edx
c001b20e:	0f b6 c0             	movzx  eax,al
c001b211:	83 c4 3c             	add    esp,0x3c
c001b214:	5b                   	pop    ebx
c001b215:	5e                   	pop    esi
c001b216:	5f                   	pop    edi
c001b217:	5d                   	pop    ebp
c001b218:	c3                   	ret    

c001b219 <Sys::timezone(regs*)>:
c001b219:	53                   	push   ebx
c001b21a:	83 ec 08             	sub    esp,0x8
c001b21d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b221:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b225:	75 17                	jne    c001b23e <Sys::timezone(regs*)+0x25>
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	68 21 ba 02 c0       	push   0xc002ba21
c001b22f:	e8 88 79 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b234:	83 c8 ff             	or     eax,0xffffffff
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	89 c2                	mov    edx,eax
c001b23c:	eb 20                	jmp    c001b25e <Sys::timezone(regs*)+0x45>
c001b23e:	83 ec 0c             	sub    esp,0xc
c001b241:	68 59 ba 02 c0       	push   0xc002ba59
c001b246:	e8 71 79 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b24b:	58                   	pop    eax
c001b24c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b24f:	e8 d4 87 ff ff       	call   c0013a28 <User::loadClockSettings(int)>
c001b254:	83 c4 10             	add    esp,0x10
c001b257:	b8 01 00 00 00       	mov    eax,0x1
c001b25c:	31 d2                	xor    edx,edx
c001b25e:	83 c4 08             	add    esp,0x8
c001b261:	5b                   	pop    ebx
c001b262:	c3                   	ret    

c001b263 <Sys::write(regs*)>:
c001b263:	57                   	push   edi
c001b264:	56                   	push   esi
c001b265:	53                   	push   ebx
c001b266:	83 ec 10             	sub    esp,0x10
c001b269:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b26d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b270:	83 f8 02             	cmp    eax,0x2
c001b273:	77 10                	ja     c001b285 <Sys::write(regs*)+0x22>
c001b275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b27a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b27d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b283:	eb 0e                	jmp    c001b293 <Sys::write(regs*)+0x30>
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	50                   	push   eax
c001b289:	e8 3d 67 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b28e:	83 c4 10             	add    esp,0x10
c001b291:	89 c1                	mov    ecx,eax
c001b293:	83 c8 ff             	or     eax,0xffffffff
c001b296:	85 c9                	test   ecx,ecx
c001b298:	89 c2                	mov    edx,eax
c001b29a:	74 28                	je     c001b2c4 <Sys::write(regs*)+0x61>
c001b29c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2a4:	31 ff                	xor    edi,edi
c001b2a6:	83 ec 0c             	sub    esp,0xc
c001b2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b2ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b2af:	52                   	push   edx
c001b2b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2b3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b2b6:	57                   	push   edi
c001b2b7:	56                   	push   esi
c001b2b8:	51                   	push   ecx
c001b2b9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b2bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2c0:	83 c4 20             	add    esp,0x20
c001b2c3:	99                   	cdq    
c001b2c4:	83 c4 10             	add    esp,0x10
c001b2c7:	5b                   	pop    ebx
c001b2c8:	5e                   	pop    esi
c001b2c9:	5f                   	pop    edi
c001b2ca:	c3                   	ret    

c001b2cb <Sys::wsbe(regs*)>:
c001b2cb:	57                   	push   edi
c001b2cc:	b9 0b 00 00 00       	mov    ecx,0xb
c001b2d1:	56                   	push   esi
c001b2d2:	be 98 ba 02 c0       	mov    esi,0xc002ba98
c001b2d7:	53                   	push   ebx
c001b2d8:	83 ec 30             	sub    esp,0x30
c001b2db:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2df:	fc                   	cld    
c001b2e0:	83 ec 0c             	sub    esp,0xc
c001b2e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2e5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b2e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2f1:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b2f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2f9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b2fc:	57                   	push   edi
c001b2fd:	e8 92 54 fe ff       	call   c0000794 <strlen>
c001b302:	5a                   	pop    edx
c001b303:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b307:	52                   	push   edx
c001b308:	31 d2                	xor    edx,edx
c001b30a:	57                   	push   edi
c001b30b:	52                   	push   edx
c001b30c:	50                   	push   eax
c001b30d:	56                   	push   esi
c001b30e:	ff d3                	call   ebx
c001b310:	83 c4 14             	add    esp,0x14
c001b313:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b317:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b31a:	e8 80 31 00 00       	call   c001e49f <terminateTask(int)>
c001b31f:	83 c4 40             	add    esp,0x40
c001b322:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b327:	5b                   	pop    ebx
c001b328:	31 d2                	xor    edx,edx
c001b32a:	5e                   	pop    esi
c001b32b:	5f                   	pop    edi
c001b32c:	c3                   	ret    

c001b32d <Sys::yield(regs*)>:
c001b32d:	57                   	push   edi
c001b32e:	56                   	push   esi
c001b32f:	53                   	push   ebx
c001b330:	e8 27 27 00 00       	call   c001da5c <lockScheduler()>
c001b335:	e8 5e 2a 00 00       	call   c001dd98 <schedule()>
c001b33a:	e8 1f 27 00 00       	call   c001da5e <unlockScheduler()>
c001b33f:	8b 35 50 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e750
c001b345:	8b 3d 54 e7 02 c0    	mov    edi,DWORD PTR ds:0xc002e754
c001b34b:	89 f0                	mov    eax,esi
c001b34d:	89 fb                	mov    ebx,edi
c001b34f:	89 f1                	mov    ecx,esi
c001b351:	c1 e0 07             	shl    eax,0x7
c001b354:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b358:	25 80 30 0f 00       	and    eax,0xf3080
c001b35d:	c1 eb 17             	shr    ebx,0x17
c001b360:	31 c8                	xor    eax,ecx
c001b362:	89 da                	mov    edx,ebx
c001b364:	5b                   	pop    ebx
c001b365:	5e                   	pop    esi
c001b366:	5f                   	pop    edi
c001b367:	c3                   	ret    

c001b368 <sysCallSeekDir(regs*)>:
c001b368:	31 c0                	xor    eax,eax
c001b36a:	31 d2                	xor    edx,edx
c001b36c:	c3                   	ret    

c001b36d <sysCallTellDir(regs*)>:
c001b36d:	31 c0                	xor    eax,eax
c001b36f:	31 d2                	xor    edx,edx
c001b371:	c3                   	ret    

c001b372 <sysCallVerify(regs*)>:
c001b372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b376:	31 d2                	xor    edx,edx
c001b378:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b37b:	c3                   	ret    

c001b37c <sysFormatDisk(regs*)>:
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	53                   	push   ebx
c001b37f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b383:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c001b389:	eb 25                	jmp    c001b3b0 <sysFormatDisk(regs*)+0x34>
c001b38b:	83 ec 0c             	sub    esp,0xc
c001b38e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b391:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b393:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b396:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b399:	50                   	push   eax
c001b39a:	ff 34 85 e0 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1920]
c001b3a1:	53                   	push   ebx
c001b3a2:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b3a5:	83 c4 20             	add    esp,0x20
c001b3a8:	83 f8 08             	cmp    eax,0x8
c001b3ab:	75 12                	jne    c001b3bf <sysFormatDisk(regs*)+0x43>
c001b3ad:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b3b0:	85 db                	test   ebx,ebx
c001b3b2:	75 d7                	jne    c001b38b <sysFormatDisk(regs*)+0xf>
c001b3b4:	59                   	pop    ecx
c001b3b5:	b8 03 00 00 00       	mov    eax,0x3
c001b3ba:	31 d2                	xor    edx,edx
c001b3bc:	5b                   	pop    ebx
c001b3bd:	5e                   	pop    esi
c001b3be:	c3                   	ret    
c001b3bf:	85 c0                	test   eax,eax
c001b3c1:	74 1b                	je     c001b3de <sysFormatDisk(regs*)+0x62>
c001b3c3:	83 f8 09             	cmp    eax,0x9
c001b3c6:	74 0b                	je     c001b3d3 <sysFormatDisk(regs*)+0x57>
c001b3c8:	59                   	pop    ecx
c001b3c9:	b8 02 00 00 00       	mov    eax,0x2
c001b3ce:	31 d2                	xor    edx,edx
c001b3d0:	5b                   	pop    ebx
c001b3d1:	5e                   	pop    esi
c001b3d2:	c3                   	ret    
c001b3d3:	59                   	pop    ecx
c001b3d4:	b8 01 00 00 00       	mov    eax,0x1
c001b3d9:	31 d2                	xor    edx,edx
c001b3db:	5b                   	pop    ebx
c001b3dc:	5e                   	pop    esi
c001b3dd:	c3                   	ret    
c001b3de:	59                   	pop    ecx
c001b3df:	31 c0                	xor    eax,eax
c001b3e1:	31 d2                	xor    edx,edx
c001b3e3:	5b                   	pop    ebx
c001b3e4:	5e                   	pop    esi
c001b3e5:	c3                   	ret    

c001b3e6 <sysSetDiskVolumeLabel(regs*)>:
c001b3e6:	56                   	push   esi
c001b3e7:	53                   	push   ebx
c001b3e8:	53                   	push   ebx
c001b3e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3ed:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b3f0:	83 f8 19             	cmp    eax,0x19
c001b3f3:	77 29                	ja     c001b41e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3f5:	8b 0c 85 e0 e6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1920]
c001b3fc:	85 c9                	test   ecx,ecx
c001b3fe:	74 1e                	je     c001b41e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b400:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b403:	85 d2                	test   edx,edx
c001b405:	74 17                	je     c001b41e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b407:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b40d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b40f:	52                   	push   edx
c001b410:	50                   	push   eax
c001b411:	51                   	push   ecx
c001b412:	53                   	push   ebx
c001b413:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	99                   	cdq    
c001b41a:	59                   	pop    ecx
c001b41b:	5b                   	pop    ebx
c001b41c:	5e                   	pop    esi
c001b41d:	c3                   	ret    
c001b41e:	59                   	pop    ecx
c001b41f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b424:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b429:	5b                   	pop    ebx
c001b42a:	5e                   	pop    esi
c001b42b:	c3                   	ret    

c001b42c <sysGetDiskVolumeLabel(regs*)>:
c001b42c:	57                   	push   edi
c001b42d:	56                   	push   esi
c001b42e:	53                   	push   ebx
c001b42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b433:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b436:	83 fa 19             	cmp    edx,0x19
c001b439:	77 34                	ja     c001b46f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b43b:	8b 0c 95 e0 e6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1920]
c001b442:	85 c9                	test   ecx,ecx
c001b444:	74 29                	je     c001b46f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b446:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b449:	85 db                	test   ebx,ebx
c001b44b:	74 22                	je     c001b46f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b44d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b450:	85 c0                	test   eax,eax
c001b452:	74 1b                	je     c001b46f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b454:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b45a:	83 ec 0c             	sub    esp,0xc
c001b45d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b45f:	50                   	push   eax
c001b460:	53                   	push   ebx
c001b461:	52                   	push   edx
c001b462:	51                   	push   ecx
c001b463:	56                   	push   esi
c001b464:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b467:	83 c4 20             	add    esp,0x20
c001b46a:	99                   	cdq    
c001b46b:	5b                   	pop    ebx
c001b46c:	5e                   	pop    esi
c001b46d:	5f                   	pop    edi
c001b46e:	c3                   	ret    
c001b46f:	5b                   	pop    ebx
c001b470:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b475:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b47a:	5e                   	pop    esi
c001b47b:	5f                   	pop    edi
c001b47c:	c3                   	ret    

c001b47d <sysShutdown(regs*)>:
c001b47d:	83 ec 0c             	sub    esp,0xc
c001b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b484:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b487:	85 c0                	test   eax,eax
c001b489:	74 18                	je     c001b4a3 <sysShutdown(regs*)+0x26>
c001b48b:	83 f8 01             	cmp    eax,0x1
c001b48e:	74 38                	je     c001b4c8 <sysShutdown(regs*)+0x4b>
c001b490:	83 f8 02             	cmp    eax,0x2
c001b493:	74 24                	je     c001b4b9 <sysShutdown(regs*)+0x3c>
c001b495:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b49a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b49f:	83 c4 0c             	add    esp,0xc
c001b4a2:	c3                   	ret    
c001b4a3:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001b4a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4aa:	6a 00                	push   0x0
c001b4ac:	6a 00                	push   0x0
c001b4ae:	6a 00                	push   0x0
c001b4b0:	50                   	push   eax
c001b4b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b4b4:	83 c4 10             	add    esp,0x10
c001b4b7:	eb dc                	jmp    c001b495 <sysShutdown(regs*)+0x18>
c001b4b9:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001b4be:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4c0:	6a 00                	push   0x0
c001b4c2:	6a 00                	push   0x0
c001b4c4:	6a 01                	push   0x1
c001b4c6:	eb e8                	jmp    c001b4b0 <sysShutdown(regs*)+0x33>
c001b4c8:	a1 80 07 03 c0       	mov    eax,ds:0xc0030780
c001b4cd:	85 c0                	test   eax,eax
c001b4cf:	74 02                	je     c001b4d3 <sysShutdown(regs*)+0x56>
c001b4d1:	ff d0                	call   eax
c001b4d3:	31 c0                	xor    eax,eax
c001b4d5:	31 d2                	xor    edx,edx
c001b4d7:	83 c4 0c             	add    esp,0xc
c001b4da:	c3                   	ret    

c001b4db <sysCallRealpath(regs*)>:
c001b4db:	83 ec 0c             	sub    esp,0xc
c001b4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b4e5:	85 d2                	test   edx,edx
c001b4e7:	74 07                	je     c001b4f0 <sysCallRealpath(regs*)+0x15>
c001b4e9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b4ec:	85 c0                	test   eax,eax
c001b4ee:	75 0b                	jne    c001b4fb <sysCallRealpath(regs*)+0x20>
c001b4f0:	b8 01 00 00 00       	mov    eax,0x1
c001b4f5:	31 d2                	xor    edx,edx
c001b4f7:	83 c4 0c             	add    esp,0xc
c001b4fa:	c3                   	ret    
c001b4fb:	51                   	push   ecx
c001b4fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b502:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b505:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b50b:	51                   	push   ecx
c001b50c:	52                   	push   edx
c001b50d:	50                   	push   eax
c001b50e:	e8 57 7a ff ff       	call   c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)>
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	31 c0                	xor    eax,eax
c001b518:	31 d2                	xor    edx,edx
c001b51a:	83 c4 0c             	add    esp,0xc
c001b51d:	c3                   	ret    

c001b51e <sysCallGetArgc(regs*)>:
c001b51e:	83 ec 14             	sub    esp,0x14
c001b521:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b526:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b529:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b52f:	68 c4 ba 02 c0       	push   0xc002bac4
c001b534:	e8 83 76 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b539:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b53e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b541:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b547:	83 c4 1c             	add    esp,0x1c
c001b54a:	99                   	cdq    
c001b54b:	c3                   	ret    

c001b54c <sysCallReadDir(regs*)>:
c001b54c:	53                   	push   ebx
c001b54d:	83 ec 18             	sub    esp,0x18
c001b550:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b554:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b557:	83 f8 02             	cmp    eax,0x2
c001b55a:	76 53                	jbe    c001b5af <sysCallReadDir(regs*)+0x63>
c001b55c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b55f:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b565:	77 4f                	ja     c001b5b6 <sysCallReadDir(regs*)+0x6a>
c001b567:	83 ec 0c             	sub    esp,0xc
c001b56a:	50                   	push   eax
c001b56b:	e8 5b 64 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b570:	83 c4 10             	add    esp,0x10
c001b573:	85 c0                	test   eax,eax
c001b575:	74 50                	je     c001b5c7 <sysCallReadDir(regs*)+0x7b>
c001b577:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b57f:	83 ec 0c             	sub    esp,0xc
c001b582:	8b 10                	mov    edx,DWORD PTR [eax]
c001b584:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b588:	51                   	push   ecx
c001b589:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b58c:	6a 00                	push   0x0
c001b58e:	68 10 01 00 00       	push   0x110
c001b593:	50                   	push   eax
c001b594:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b597:	83 c4 20             	add    esp,0x20
c001b59a:	85 c0                	test   eax,eax
c001b59c:	74 38                	je     c001b5d6 <sysCallReadDir(regs*)+0x8a>
c001b59e:	83 f8 07             	cmp    eax,0x7
c001b5a1:	74 0c                	je     c001b5af <sysCallReadDir(regs*)+0x63>
c001b5a3:	b8 02 00 00 00       	mov    eax,0x2
c001b5a8:	31 d2                	xor    edx,edx
c001b5aa:	83 c4 18             	add    esp,0x18
c001b5ad:	5b                   	pop    ebx
c001b5ae:	c3                   	ret    
c001b5af:	b8 01 00 00 00       	mov    eax,0x1
c001b5b4:	eb f2                	jmp    c001b5a8 <sysCallReadDir(regs*)+0x5c>
c001b5b6:	83 ec 08             	sub    esp,0x8
c001b5b9:	52                   	push   edx
c001b5ba:	68 dc bb 02 c0       	push   0xc002bbdc
c001b5bf:	e8 f8 75 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5d1:	83 c4 18             	add    esp,0x18
c001b5d4:	5b                   	pop    ebx
c001b5d5:	c3                   	ret    
c001b5d6:	31 c0                	xor    eax,eax
c001b5d8:	eb ce                	jmp    c001b5a8 <sysCallReadDir(regs*)+0x5c>

c001b5da <sysCallIsATTY(regs*)>:
c001b5da:	83 ec 0c             	sub    esp,0xc
c001b5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5e4:	83 f8 02             	cmp    eax,0x2
c001b5e7:	76 07                	jbe    c001b5f0 <sysCallIsATTY(regs*)+0x16>
c001b5e9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b5ee:	75 26                	jne    c001b616 <sysCallIsATTY(regs*)+0x3c>
c001b5f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5f8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b5fe:	85 c0                	test   eax,eax
c001b600:	74 24                	je     c001b626 <sysCallIsATTY(regs*)+0x4c>
c001b602:	83 ec 0c             	sub    esp,0xc
c001b605:	8b 10                	mov    edx,DWORD PTR [eax]
c001b607:	50                   	push   eax
c001b608:	ff 12                	call   DWORD PTR [edx]
c001b60a:	31 d2                	xor    edx,edx
c001b60c:	0f b6 c0             	movzx  eax,al
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	83 c4 0c             	add    esp,0xc
c001b615:	c3                   	ret    
c001b616:	83 ec 0c             	sub    esp,0xc
c001b619:	50                   	push   eax
c001b61a:	e8 ac 63 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b61f:	83 c4 10             	add    esp,0x10
c001b622:	85 c0                	test   eax,eax
c001b624:	75 dc                	jne    c001b602 <sysCallIsATTY(regs*)+0x28>
c001b626:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b62b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b630:	83 c4 0c             	add    esp,0xc
c001b633:	c3                   	ret    

c001b634 <sysCallSeek(regs*)>:
c001b634:	53                   	push   ebx
c001b635:	83 ec 08             	sub    esp,0x8
c001b638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b63c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b63f:	83 f8 02             	cmp    eax,0x2
c001b642:	76 4a                	jbe    c001b68e <sysCallSeek(regs*)+0x5a>
c001b644:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b649:	77 32                	ja     c001b67d <sysCallSeek(regs*)+0x49>
c001b64b:	83 ec 0c             	sub    esp,0xc
c001b64e:	50                   	push   eax
c001b64f:	e8 77 63 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b654:	83 c4 0c             	add    esp,0xc
c001b657:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b65a:	31 db                	xor    ebx,ebx
c001b65c:	53                   	push   ebx
c001b65d:	51                   	push   ecx
c001b65e:	50                   	push   eax
c001b65f:	e8 d2 7b ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	85 c0                	test   eax,eax
c001b669:	0f 95 c0             	setne  al
c001b66c:	31 d2                	xor    edx,edx
c001b66e:	0f b6 c0             	movzx  eax,al
c001b671:	f7 d8                	neg    eax
c001b673:	83 d2 00             	adc    edx,0x0
c001b676:	83 c4 08             	add    esp,0x8
c001b679:	f7 da                	neg    edx
c001b67b:	5b                   	pop    ebx
c001b67c:	c3                   	ret    
c001b67d:	83 ec 08             	sub    esp,0x8
c001b680:	50                   	push   eax
c001b681:	68 cf ba 02 c0       	push   0xc002bacf
c001b686:	e8 31 75 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b68b:	83 c4 10             	add    esp,0x10
c001b68e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b693:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b698:	83 c4 08             	add    esp,0x8
c001b69b:	5b                   	pop    ebx
c001b69c:	c3                   	ret    

c001b69d <sysCallTell(regs*)>:
c001b69d:	53                   	push   ebx
c001b69e:	83 ec 08             	sub    esp,0x8
c001b6a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6a8:	83 f8 02             	cmp    eax,0x2
c001b6ab:	76 5e                	jbe    c001b70b <sysCallTell(regs*)+0x6e>
c001b6ad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b6b2:	77 2d                	ja     c001b6e1 <sysCallTell(regs*)+0x44>
c001b6b4:	83 ec 0c             	sub    esp,0xc
c001b6b7:	50                   	push   eax
c001b6b8:	e8 0e 63 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b6bd:	5a                   	pop    edx
c001b6be:	59                   	pop    ecx
c001b6bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b6c2:	50                   	push   eax
c001b6c3:	e8 c4 7b ff ff       	call   c001328c <File::tell(unsigned long long*)>
c001b6c8:	83 c4 10             	add    esp,0x10
c001b6cb:	85 c0                	test   eax,eax
c001b6cd:	0f 95 c0             	setne  al
c001b6d0:	31 d2                	xor    edx,edx
c001b6d2:	0f b6 c0             	movzx  eax,al
c001b6d5:	f7 d8                	neg    eax
c001b6d7:	83 d2 00             	adc    edx,0x0
c001b6da:	83 c4 08             	add    esp,0x8
c001b6dd:	f7 da                	neg    edx
c001b6df:	5b                   	pop    ebx
c001b6e0:	c3                   	ret    
c001b6e1:	83 ec 08             	sub    esp,0x8
c001b6e4:	50                   	push   eax
c001b6e5:	68 e9 ba 02 c0       	push   0xc002bae9
c001b6ea:	e8 cd 74 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b6ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b6f2:	83 c4 10             	add    esp,0x10
c001b6f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b702:	31 d2                	xor    edx,edx
c001b704:	31 c0                	xor    eax,eax
c001b706:	83 c4 08             	add    esp,0x8
c001b709:	5b                   	pop    ebx
c001b70a:	c3                   	ret    
c001b70b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b710:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b715:	83 c4 08             	add    esp,0x8
c001b718:	5b                   	pop    ebx
c001b719:	c3                   	ret    

c001b71a <sysCallSize(regs*)>:
c001b71a:	53                   	push   ebx
c001b71b:	83 ec 18             	sub    esp,0x18
c001b71e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b722:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b725:	83 f8 02             	cmp    eax,0x2
c001b728:	76 64                	jbe    c001b78e <sysCallSize(regs*)+0x74>
c001b72a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b72f:	77 33                	ja     c001b764 <sysCallSize(regs*)+0x4a>
c001b731:	83 ec 0c             	sub    esp,0xc
c001b734:	50                   	push   eax
c001b735:	e8 91 62 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b73a:	83 c4 0c             	add    esp,0xc
c001b73d:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b741:	52                   	push   edx
c001b742:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b745:	50                   	push   eax
c001b746:	e8 d9 7c ff ff       	call   c0013424 <File::stat(unsigned long long*, bool*)>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	85 c0                	test   eax,eax
c001b750:	0f 95 c0             	setne  al
c001b753:	31 d2                	xor    edx,edx
c001b755:	0f b6 c0             	movzx  eax,al
c001b758:	f7 d8                	neg    eax
c001b75a:	83 d2 00             	adc    edx,0x0
c001b75d:	83 c4 18             	add    esp,0x18
c001b760:	f7 da                	neg    edx
c001b762:	5b                   	pop    ebx
c001b763:	c3                   	ret    
c001b764:	83 ec 08             	sub    esp,0x8
c001b767:	50                   	push   eax
c001b768:	68 03 bb 02 c0       	push   0xc002bb03
c001b76d:	e8 4a 74 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b772:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b77e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b785:	31 d2                	xor    edx,edx
c001b787:	31 c0                	xor    eax,eax
c001b789:	83 c4 18             	add    esp,0x18
c001b78c:	5b                   	pop    ebx
c001b78d:	c3                   	ret    
c001b78e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b793:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b798:	83 c4 18             	add    esp,0x18
c001b79b:	5b                   	pop    ebx
c001b79c:	c3                   	ret    

c001b79d <sysCallSizeFromFilename(regs*)>:
c001b79d:	57                   	push   edi
c001b79e:	56                   	push   esi
c001b79f:	53                   	push   ebx
c001b7a0:	83 ec 20             	sub    esp,0x20
c001b7a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b7a7:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b7aa:	83 fb 02             	cmp    ebx,0x2
c001b7ad:	0f 86 99 00 00 00    	jbe    c001b84c <sysCallSizeFromFilename(regs*)+0xaf>
c001b7b3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b7b9:	77 65                	ja     c001b820 <sysCallSizeFromFilename(regs*)+0x83>
c001b7bb:	83 ec 0c             	sub    esp,0xc
c001b7be:	68 14 01 00 00       	push   0x114
c001b7c3:	e8 78 40 ff ff       	call   c000f840 <malloc>
c001b7c8:	83 c4 0c             	add    esp,0xc
c001b7cb:	89 c6                	mov    esi,eax
c001b7cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7d5:	53                   	push   ebx
c001b7d6:	56                   	push   esi
c001b7d7:	e8 38 79 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001b7dc:	83 c4 0c             	add    esp,0xc
c001b7df:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b7e3:	50                   	push   eax
c001b7e4:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b7e7:	56                   	push   esi
c001b7e8:	e8 37 7c ff ff       	call   c0013424 <File::stat(unsigned long long*, bool*)>
c001b7ed:	83 c4 10             	add    esp,0x10
c001b7f0:	85 f6                	test   esi,esi
c001b7f2:	74 14                	je     c001b808 <sysCallSizeFromFilename(regs*)+0x6b>
c001b7f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7f8:	8b 16                	mov    edx,DWORD PTR [esi]
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	56                   	push   esi
c001b7fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b801:	83 c4 10             	add    esp,0x10
c001b804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b808:	85 c0                	test   eax,eax
c001b80a:	0f 95 c0             	setne  al
c001b80d:	31 d2                	xor    edx,edx
c001b80f:	0f b6 c0             	movzx  eax,al
c001b812:	f7 d8                	neg    eax
c001b814:	83 d2 00             	adc    edx,0x0
c001b817:	83 c4 20             	add    esp,0x20
c001b81a:	f7 da                	neg    edx
c001b81c:	5b                   	pop    ebx
c001b81d:	5e                   	pop    esi
c001b81e:	5f                   	pop    edi
c001b81f:	c3                   	ret    
c001b820:	83 ec 08             	sub    esp,0x8
c001b823:	53                   	push   ebx
c001b824:	68 03 bb 02 c0       	push   0xc002bb03
c001b829:	e8 8e 73 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b82e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b831:	83 c4 10             	add    esp,0x10
c001b834:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b83a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b841:	31 d2                	xor    edx,edx
c001b843:	83 c4 20             	add    esp,0x20
c001b846:	31 c0                	xor    eax,eax
c001b848:	5b                   	pop    ebx
c001b849:	5e                   	pop    esi
c001b84a:	5f                   	pop    edi
c001b84b:	c3                   	ret    
c001b84c:	83 c4 20             	add    esp,0x20
c001b84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b854:	5b                   	pop    ebx
c001b855:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b85a:	5e                   	pop    esi
c001b85b:	5f                   	pop    edi
c001b85c:	c3                   	ret    

c001b85d <sysCallClose(regs*)>:
c001b85d:	53                   	push   ebx
c001b85e:	83 ec 08             	sub    esp,0x8
c001b861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b865:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b868:	83 f8 02             	cmp    eax,0x2
c001b86b:	76 50                	jbe    c001b8bd <sysCallClose(regs*)+0x60>
c001b86d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b872:	74 58                	je     c001b8cc <sysCallClose(regs*)+0x6f>
c001b874:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b879:	74 60                	je     c001b8db <sysCallClose(regs*)+0x7e>
c001b87b:	77 2f                	ja     c001b8ac <sysCallClose(regs*)+0x4f>
c001b87d:	83 ec 0c             	sub    esp,0xc
c001b880:	50                   	push   eax
c001b881:	e8 45 61 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b886:	89 c3                	mov    ebx,eax
c001b888:	89 04 24             	mov    DWORD PTR [esp],eax
c001b88b:	e8 46 79 ff ff       	call   c00131d6 <File::close()>
c001b890:	83 c4 10             	add    esp,0x10
c001b893:	85 db                	test   ebx,ebx
c001b895:	74 0c                	je     c001b8a3 <sysCallClose(regs*)+0x46>
c001b897:	83 ec 0c             	sub    esp,0xc
c001b89a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b89c:	53                   	push   ebx
c001b89d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8a0:	83 c4 10             	add    esp,0x10
c001b8a3:	31 c0                	xor    eax,eax
c001b8a5:	31 d2                	xor    edx,edx
c001b8a7:	83 c4 08             	add    esp,0x8
c001b8aa:	5b                   	pop    ebx
c001b8ab:	c3                   	ret    
c001b8ac:	83 ec 08             	sub    esp,0x8
c001b8af:	50                   	push   eax
c001b8b0:	68 00 bc 02 c0       	push   0xc002bc00
c001b8b5:	e8 02 73 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8c7:	83 c4 08             	add    esp,0x8
c001b8ca:	5b                   	pop    ebx
c001b8cb:	c3                   	ret    
c001b8cc:	83 ec 0c             	sub    esp,0xc
c001b8cf:	68 1e bb 02 c0       	push   0xc002bb1e
c001b8d4:	e8 e3 72 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b8d9:	eb c5                	jmp    c001b8a0 <sysCallClose(regs*)+0x43>
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	68 2c bb 02 c0       	push   0xc002bb2c
c001b8e3:	eb ef                	jmp    c001b8d4 <sysCallClose(regs*)+0x77>

c001b8e5 <sysCallOpenDir(regs*)>:
c001b8e5:	56                   	push   esi
c001b8e6:	53                   	push   ebx
c001b8e7:	53                   	push   ebx
c001b8e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b8ef:	85 f6                	test   esi,esi
c001b8f1:	74 59                	je     c001b94c <sysCallOpenDir(regs*)+0x67>
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	68 14 01 00 00       	push   0x114
c001b8fb:	e8 40 3f ff ff       	call   c000f840 <malloc>
c001b900:	83 c4 0c             	add    esp,0xc
c001b903:	89 c6                	mov    esi,eax
c001b905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b90d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b910:	56                   	push   esi
c001b911:	e8 aa 7c ff ff       	call   c00135c0 <Directory::Directory(char const*, Process*)>
c001b916:	83 c4 10             	add    esp,0x10
c001b919:	85 f6                	test   esi,esi
c001b91b:	74 2f                	je     c001b94c <sysCallOpenDir(regs*)+0x67>
c001b91d:	83 ec 0c             	sub    esp,0xc
c001b920:	56                   	push   esi
c001b921:	e8 fe 7c ff ff       	call   c0013624 <Directory::open()>
c001b926:	83 c4 10             	add    esp,0x10
c001b929:	85 c0                	test   eax,eax
c001b92b:	75 1f                	jne    c001b94c <sysCallOpenDir(regs*)+0x67>
c001b92d:	83 ec 0c             	sub    esp,0xc
c001b930:	56                   	push   esi
c001b931:	e8 a0 5d ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001b936:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	89 02                	mov    DWORD PTR [edx],eax
c001b93e:	c1 f8 1f             	sar    eax,0x1f
c001b941:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b944:	31 c0                	xor    eax,eax
c001b946:	59                   	pop    ecx
c001b947:	31 d2                	xor    edx,edx
c001b949:	5b                   	pop    ebx
c001b94a:	5e                   	pop    esi
c001b94b:	c3                   	ret    
c001b94c:	59                   	pop    ecx
c001b94d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b952:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b957:	5b                   	pop    ebx
c001b958:	5e                   	pop    esi
c001b959:	c3                   	ret    

c001b95a <sysCallCloseDir(regs*)>:
c001b95a:	53                   	push   ebx
c001b95b:	83 ec 08             	sub    esp,0x8
c001b95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b962:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b965:	83 f8 02             	cmp    eax,0x2
c001b968:	76 47                	jbe    c001b9b1 <sysCallCloseDir(regs*)+0x57>
c001b96a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b96f:	77 2f                	ja     c001b9a0 <sysCallCloseDir(regs*)+0x46>
c001b971:	83 ec 0c             	sub    esp,0xc
c001b974:	50                   	push   eax
c001b975:	e8 51 60 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b97a:	89 c3                	mov    ebx,eax
c001b97c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b97f:	e8 fc 7c ff ff       	call   c0013680 <Directory::close()>
c001b984:	83 c4 10             	add    esp,0x10
c001b987:	85 db                	test   ebx,ebx
c001b989:	74 0c                	je     c001b997 <sysCallCloseDir(regs*)+0x3d>
c001b98b:	83 ec 0c             	sub    esp,0xc
c001b98e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b990:	53                   	push   ebx
c001b991:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	31 c0                	xor    eax,eax
c001b999:	31 d2                	xor    edx,edx
c001b99b:	83 c4 08             	add    esp,0x8
c001b99e:	5b                   	pop    ebx
c001b99f:	c3                   	ret    
c001b9a0:	83 ec 08             	sub    esp,0x8
c001b9a3:	50                   	push   eax
c001b9a4:	68 28 bc 02 c0       	push   0xc002bc28
c001b9a9:	e8 0e 72 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001b9ae:	83 c4 10             	add    esp,0x10
c001b9b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9bb:	83 c4 08             	add    esp,0x8
c001b9be:	5b                   	pop    ebx
c001b9bf:	c3                   	ret    

c001b9c0 <sysCallMakeDir(regs*)>:
c001b9c0:	56                   	push   esi
c001b9c1:	53                   	push   ebx
c001b9c2:	83 ec 10             	sub    esp,0x10
c001b9c5:	68 14 01 00 00       	push   0x114
c001b9ca:	e8 71 3e ff ff       	call   c000f840 <malloc>
c001b9cf:	83 c4 0c             	add    esp,0xc
c001b9d2:	89 c3                	mov    ebx,eax
c001b9d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9e3:	53                   	push   ebx
c001b9e4:	e8 d7 7b ff ff       	call   c00135c0 <Directory::Directory(char const*, Process*)>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	85 db                	test   ebx,ebx
c001b9ee:	74 32                	je     c001ba22 <sysCallMakeDir(regs*)+0x62>
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	53                   	push   ebx
c001b9f4:	e8 0b 7e ff ff       	call   c0013804 <Directory::create()>
c001b9f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9fc:	89 c6                	mov    esi,eax
c001b9fe:	e8 7d 7c ff ff       	call   c0013680 <Directory::close()>
c001ba03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba0b:	83 c4 10             	add    esp,0x10
c001ba0e:	31 c0                	xor    eax,eax
c001ba10:	59                   	pop    ecx
c001ba11:	85 f6                	test   esi,esi
c001ba13:	5b                   	pop    ebx
c001ba14:	0f 95 c0             	setne  al
c001ba17:	5e                   	pop    esi
c001ba18:	31 d2                	xor    edx,edx
c001ba1a:	f7 d8                	neg    eax
c001ba1c:	83 d2 00             	adc    edx,0x0
c001ba1f:	f7 da                	neg    edx
c001ba21:	c3                   	ret    
c001ba22:	59                   	pop    ecx
c001ba23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba28:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba2d:	5b                   	pop    ebx
c001ba2e:	5e                   	pop    esi
c001ba2f:	c3                   	ret    

c001ba30 <sysCallWait(regs*)>:
c001ba30:	83 ec 10             	sub    esp,0x10
c001ba33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba37:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ba3a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba3d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ba40:	e8 ce 24 00 00       	call   c001df13 <waitTask(int, int*, int)>
c001ba45:	83 c4 1c             	add    esp,0x1c
c001ba48:	99                   	cdq    
c001ba49:	c3                   	ret    

c001ba4a <sysCallNotImpl(regs*)>:
c001ba4a:	83 ec 18             	sub    esp,0x18
c001ba4d:	68 3a bb 02 c0       	push   0xc002bb3a
c001ba52:	e8 e0 e7 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001ba57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba61:	83 c4 1c             	add    esp,0x1c
c001ba64:	c3                   	ret    

c001ba65 <sysPanic(regs*)>:
c001ba65:	83 ec 18             	sub    esp,0x18
c001ba68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba6c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba6f:	e8 c3 e7 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001ba74:	c7 04 24 54 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb54
c001ba7b:	e8 b7 e7 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001ba80:	b8 01 00 00 00       	mov    eax,0x1
c001ba85:	31 d2                	xor    edx,edx
c001ba87:	83 c4 1c             	add    esp,0x1c
c001ba8a:	c3                   	ret    

c001ba8b <sysCallRmdir(regs*)>:
c001ba8b:	56                   	push   esi
c001ba8c:	53                   	push   ebx
c001ba8d:	83 ec 20             	sub    esp,0x20
c001ba90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba94:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba97:	68 14 01 00 00       	push   0x114
c001ba9c:	e8 9f 3d ff ff       	call   c000f840 <malloc>
c001baa1:	83 c4 0c             	add    esp,0xc
c001baa4:	89 c3                	mov    ebx,eax
c001baa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baae:	56                   	push   esi
c001baaf:	53                   	push   ebx
c001bab0:	e8 5f 76 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001bab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bab8:	e8 33 78 ff ff       	call   c00132f0 <File::unlink()>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	85 db                	test   ebx,ebx
c001bac2:	74 14                	je     c001bad8 <sysCallRmdir(regs*)+0x4d>
c001bac4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bac8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001baca:	83 ec 0c             	sub    esp,0xc
c001bacd:	53                   	push   ebx
c001bace:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bad8:	85 c0                	test   eax,eax
c001bada:	0f 95 c0             	setne  al
c001badd:	31 d2                	xor    edx,edx
c001badf:	0f b6 c0             	movzx  eax,al
c001bae2:	f7 d8                	neg    eax
c001bae4:	83 d2 00             	adc    edx,0x0
c001bae7:	83 c4 14             	add    esp,0x14
c001baea:	f7 da                	neg    edx
c001baec:	5b                   	pop    ebx
c001baed:	5e                   	pop    esi
c001baee:	c3                   	ret    

c001baef <sysCallUnlink(regs*)>:
c001baef:	56                   	push   esi
c001baf0:	53                   	push   ebx
c001baf1:	83 ec 20             	sub    esp,0x20
c001baf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001baf8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bafb:	68 14 01 00 00       	push   0x114
c001bb00:	e8 3b 3d ff ff       	call   c000f840 <malloc>
c001bb05:	83 c4 0c             	add    esp,0xc
c001bb08:	89 c3                	mov    ebx,eax
c001bb0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb0f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb12:	56                   	push   esi
c001bb13:	53                   	push   ebx
c001bb14:	e8 fb 75 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001bb19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb1c:	e8 cf 77 ff ff       	call   c00132f0 <File::unlink()>
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	85 db                	test   ebx,ebx
c001bb26:	74 14                	je     c001bb3c <sysCallUnlink(regs*)+0x4d>
c001bb28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	53                   	push   ebx
c001bb32:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb35:	83 c4 10             	add    esp,0x10
c001bb38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb3c:	85 c0                	test   eax,eax
c001bb3e:	0f 95 c0             	setne  al
c001bb41:	31 d2                	xor    edx,edx
c001bb43:	0f b6 c0             	movzx  eax,al
c001bb46:	f7 d8                	neg    eax
c001bb48:	83 d2 00             	adc    edx,0x0
c001bb4b:	83 c4 14             	add    esp,0x14
c001bb4e:	f7 da                	neg    edx
c001bb50:	5b                   	pop    ebx
c001bb51:	5e                   	pop    esi
c001bb52:	c3                   	ret    

c001bb53 <sysCallGetArgv(regs*)>:
c001bb53:	83 ec 0c             	sub    esp,0xc
c001bb56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb5a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bb5d:	85 c0                	test   eax,eax
c001bb5f:	78 2b                	js     c001bb8c <sysCallGetArgv(regs*)+0x39>
c001bb61:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb67:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb6a:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bb70:	7d 1a                	jge    c001bb8c <sysCallGetArgv(regs*)+0x39>
c001bb72:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bb79:	85 c0                	test   eax,eax
c001bb7b:	74 17                	je     c001bb94 <sysCallGetArgv(regs*)+0x41>
c001bb7d:	83 ec 08             	sub    esp,0x8
c001bb80:	50                   	push   eax
c001bb81:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bb84:	e8 ab 4c fe ff       	call   c0000834 <strcpy>
c001bb89:	83 c4 10             	add    esp,0x10
c001bb8c:	31 c0                	xor    eax,eax
c001bb8e:	31 d2                	xor    edx,edx
c001bb90:	83 c4 0c             	add    esp,0xc
c001bb93:	c3                   	ret    
c001bb94:	b8 01 00 00 00       	mov    eax,0x1
c001bb99:	31 d2                	xor    edx,edx
c001bb9b:	83 c4 0c             	add    esp,0xc
c001bb9e:	c3                   	ret    

c001bb9f <sysCallTTYName(regs*)>:
c001bb9f:	56                   	push   esi
c001bba0:	53                   	push   ebx
c001bba1:	53                   	push   ebx
c001bba2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bba6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bba9:	85 c0                	test   eax,eax
c001bbab:	74 5f                	je     c001bc0c <sysCallTTYName(regs*)+0x6d>
c001bbad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bbb0:	83 f8 02             	cmp    eax,0x2
c001bbb3:	77 3e                	ja     c001bbf3 <sysCallTTYName(regs*)+0x54>
c001bbb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbbd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bbc3:	85 db                	test   ebx,ebx
c001bbc5:	74 45                	je     c001bc0c <sysCallTTYName(regs*)+0x6d>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbcc:	53                   	push   ebx
c001bbcd:	ff 10                	call   DWORD PTR [eax]
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	84 c0                	test   al,al
c001bbd4:	74 41                	je     c001bc17 <sysCallTTYName(regs*)+0x78>
c001bbd6:	83 ec 08             	sub    esp,0x8
c001bbd9:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bbdf:	53                   	push   ebx
c001bbe0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bbe3:	e8 4c 4c fe ff       	call   c0000834 <strcpy>
c001bbe8:	83 c4 10             	add    esp,0x10
c001bbeb:	31 c0                	xor    eax,eax
c001bbed:	59                   	pop    ecx
c001bbee:	31 d2                	xor    edx,edx
c001bbf0:	5b                   	pop    ebx
c001bbf1:	5e                   	pop    esi
c001bbf2:	c3                   	ret    
c001bbf3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbf8:	74 bb                	je     c001bbb5 <sysCallTTYName(regs*)+0x16>
c001bbfa:	83 ec 0c             	sub    esp,0xc
c001bbfd:	50                   	push   eax
c001bbfe:	e8 c8 5d ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	89 c3                	mov    ebx,eax
c001bc08:	85 db                	test   ebx,ebx
c001bc0a:	75 bb                	jne    c001bbc7 <sysCallTTYName(regs*)+0x28>
c001bc0c:	59                   	pop    ecx
c001bc0d:	b8 01 00 00 00       	mov    eax,0x1
c001bc12:	31 d2                	xor    edx,edx
c001bc14:	5b                   	pop    ebx
c001bc15:	5e                   	pop    esi
c001bc16:	c3                   	ret    
c001bc17:	59                   	pop    ecx
c001bc18:	b8 02 00 00 00       	mov    eax,0x2
c001bc1d:	31 d2                	xor    edx,edx
c001bc1f:	5b                   	pop    ebx
c001bc20:	5e                   	pop    esi
c001bc21:	c3                   	ret    

c001bc22 <sysCallUSleep(regs*)>:
c001bc22:	83 ec 14             	sub    esp,0x14
c001bc25:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bc2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc2e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bc35:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bc38:	01 ca                	add    edx,ecx
c001bc3a:	52                   	push   edx
c001bc3b:	50                   	push   eax
c001bc3c:	e8 6b 23 00 00       	call   c001dfac <nanoSleep(unsigned long long)>
c001bc41:	31 c0                	xor    eax,eax
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	83 c4 1c             	add    esp,0x1c
c001bc48:	c3                   	ret    

c001bc49 <sysCallSpawn(regs*)>:
c001bc49:	56                   	push   esi
c001bc4a:	53                   	push   ebx
c001bc4b:	53                   	push   ebx
c001bc4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc50:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bc53:	85 f6                	test   esi,esi
c001bc55:	75 08                	jne    c001bc5f <sysCallSpawn(regs*)+0x16>
c001bc57:	59                   	pop    ecx
c001bc58:	31 c0                	xor    eax,eax
c001bc5a:	31 d2                	xor    edx,edx
c001bc5c:	5b                   	pop    ebx
c001bc5d:	5e                   	pop    esi
c001bc5e:	c3                   	ret    
c001bc5f:	83 ec 0c             	sub    esp,0xc
c001bc62:	68 3f 07 00 00       	push   0x73f
c001bc67:	e8 d4 3b ff ff       	call   c000f840 <malloc>
c001bc6c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bc6f:	89 c6                	mov    esi,eax
c001bc71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc76:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc7c:	56                   	push   esi
c001bc7d:	e8 2a 1a 00 00       	call   c001d6ac <Process::Process(char const*, Process*, char**)>
c001bc82:	83 c4 20             	add    esp,0x20
c001bc85:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bc8c:	75 c9                	jne    c001bc57 <sysCallSpawn(regs*)+0xe>
c001bc8e:	83 ec 0c             	sub    esp,0xc
c001bc91:	56                   	push   esi
c001bc92:	e8 db 1f 00 00       	call   c001dc72 <Process::createUserThread()>
c001bc97:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	99                   	cdq    
c001bc9d:	59                   	pop    ecx
c001bc9e:	5b                   	pop    ebx
c001bc9f:	5e                   	pop    esi
c001bca0:	c3                   	ret    

c001bca1 <sysCallGetEnv(regs*)>:
c001bca1:	55                   	push   ebp
c001bca2:	57                   	push   edi
c001bca3:	56                   	push   esi
c001bca4:	53                   	push   ebx
c001bca5:	83 ec 28             	sub    esp,0x28
c001bca8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bcac:	68 63 bb 02 c0       	push   0xc002bb63
c001bcb1:	e8 06 6f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bcb6:	5f                   	pop    edi
c001bcb7:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bcba:	5d                   	pop    ebp
c001bcbb:	53                   	push   ebx
c001bcbc:	68 92 be 02 c0       	push   0xc002be92
c001bcc1:	e8 f6 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bcc6:	58                   	pop    eax
c001bcc7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bcca:	5a                   	pop    edx
c001bccb:	57                   	push   edi
c001bccc:	68 6c bb 02 c0       	push   0xc002bb6c
c001bcd1:	e8 e6 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bcd6:	59                   	pop    ecx
c001bcd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcdc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcdf:	e8 6f e4 ff ff       	call   c001a153 <Krnl::getProcessTotalEnvCount(Process*)>
c001bce4:	5a                   	pop    edx
c001bce5:	89 c5                	mov    ebp,eax
c001bce7:	59                   	pop    ecx
c001bce8:	50                   	push   eax
c001bce9:	68 76 bb 02 c0       	push   0xc002bb76
c001bcee:	e8 c9 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	39 ef                	cmp    edi,ebp
c001bcf8:	7c 15                	jl     c001bd0f <sysCallGetEnv(regs*)+0x6e>
c001bcfa:	85 db                	test   ebx,ebx
c001bcfc:	75 0c                	jne    c001bd0a <sysCallGetEnv(regs*)+0x69>
c001bcfe:	83 c4 1c             	add    esp,0x1c
c001bd01:	31 c0                	xor    eax,eax
c001bd03:	5b                   	pop    ebx
c001bd04:	31 d2                	xor    edx,edx
c001bd06:	5e                   	pop    esi
c001bd07:	5f                   	pop    edi
c001bd08:	5d                   	pop    ebp
c001bd09:	c3                   	ret    
c001bd0a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bd0d:	eb ef                	jmp    c001bcfe <sysCallGetEnv(regs*)+0x5d>
c001bd0f:	83 ec 0c             	sub    esp,0xc
c001bd12:	68 82 bb 02 c0       	push   0xc002bb82
c001bd17:	e8 a0 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bd1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd20:	83 c4 0c             	add    esp,0xc
c001bd23:	57                   	push   edi
c001bd24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd2a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bd2d:	50                   	push   eax
c001bd2e:	e8 40 e4 ff ff       	call   c001a173 <Krnl::getProcessEnvPair(Process*, int)>
c001bd33:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bd37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bd3b:	68 11 bf 02 c0       	push   0xc002bf11
c001bd40:	e8 77 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bd45:	83 c4 10             	add    esp,0x10
c001bd48:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bd4b:	85 f6                	test   esi,esi
c001bd4d:	75 47                	jne    c001bd96 <sysCallGetEnv(regs*)+0xf5>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	55                   	push   ebp
c001bd53:	e8 3c 4a fe ff       	call   c0000794 <strlen>
c001bd58:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd5b:	89 c3                	mov    ebx,eax
c001bd5d:	e8 32 4a fe ff       	call   c0000794 <strlen>
c001bd62:	5a                   	pop    edx
c001bd63:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bd67:	59                   	pop    ecx
c001bd68:	50                   	push   eax
c001bd69:	68 85 bb 02 c0       	push   0xc002bb85
c001bd6e:	e8 49 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bd73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd76:	e8 19 4a fe ff       	call   c0000794 <strlen>
c001bd7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd7e:	89 c3                	mov    ebx,eax
c001bd80:	e8 0f 4a fe ff       	call   c0000794 <strlen>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bd8c:	83 c4 1c             	add    esp,0x1c
c001bd8f:	31 d2                	xor    edx,edx
c001bd91:	5b                   	pop    ebx
c001bd92:	5e                   	pop    esi
c001bd93:	5f                   	pop    edi
c001bd94:	5d                   	pop    ebp
c001bd95:	c3                   	ret    
c001bd96:	83 ec 0c             	sub    esp,0xc
c001bd99:	68 2b bf 02 c0       	push   0xc002bf2b
c001bd9e:	e8 19 6e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bda3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bda6:	58                   	pop    eax
c001bda7:	5a                   	pop    edx
c001bda8:	55                   	push   ebp
c001bda9:	53                   	push   ebx
c001bdaa:	e8 85 4a fe ff       	call   c0000834 <strcpy>
c001bdaf:	59                   	pop    ecx
c001bdb0:	5e                   	pop    esi
c001bdb1:	68 8f bb 02 c0       	push   0xc002bb8f
c001bdb6:	53                   	push   ebx
c001bdb7:	e8 b8 4b fe ff       	call   c0000974 <strcat>
c001bdbc:	5d                   	pop    ebp
c001bdbd:	58                   	pop    eax
c001bdbe:	57                   	push   edi
c001bdbf:	53                   	push   ebx
c001bdc0:	e8 af 4b fe ff       	call   c0000974 <strcat>
c001bdc5:	c7 04 24 45 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf45
c001bdcc:	e8 eb 6d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	e9 25 ff ff ff       	jmp    c001bcfe <sysCallGetEnv(regs*)+0x5d>

c001bdd9 <sysAppSettings(regs*)>:
c001bdd9:	53                   	push   ebx
c001bdda:	83 ec 08             	sub    esp,0x8
c001bddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bde4:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bdea:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bdef:	66 3d c0 09          	cmp    ax,0x9c0
c001bdf3:	75 2f                	jne    c001be24 <sysAppSettings(regs*)+0x4b>
c001bdf5:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bdfb:	83 e0 1f             	and    eax,0x1f
c001bdfe:	3c 01                	cmp    al,0x1
c001be00:	74 2e                	je     c001be30 <sysAppSettings(regs*)+0x57>
c001be02:	3c 07                	cmp    al,0x7
c001be04:	0f 84 bd 00 00 00    	je     c001bec7 <sysAppSettings(regs*)+0xee>
c001be0a:	84 c0                	test   al,al
c001be0c:	0f 84 dc 00 00 00    	je     c001beee <sysAppSettings(regs*)+0x115>
c001be12:	3c 08                	cmp    al,0x8
c001be14:	74 6d                	je     c001be83 <sysAppSettings(regs*)+0xaa>
c001be16:	0f b6 c0             	movzx  eax,al
c001be19:	83 c4 08             	add    esp,0x8
c001be1c:	05 e8 03 00 00       	add    eax,0x3e8
c001be21:	5b                   	pop    ebx
c001be22:	99                   	cdq    
c001be23:	c3                   	ret    
c001be24:	b8 01 00 00 00       	mov    eax,0x1
c001be29:	31 d2                	xor    edx,edx
c001be2b:	83 c4 08             	add    esp,0x8
c001be2e:	5b                   	pop    ebx
c001be2f:	c3                   	ret    
c001be30:	51                   	push   ecx
c001be31:	68 00 01 00 00       	push   0x100
c001be36:	6a 00                	push   0x0
c001be38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be40:	83 c0 0c             	add    eax,0xc
c001be43:	50                   	push   eax
c001be44:	e8 2f 49 fe ff       	call   c0000778 <memset>
c001be49:	83 c4 0c             	add    esp,0xc
c001be4c:	68 ff 00 00 00       	push   0xff
c001be51:	53                   	push   ebx
c001be52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be5a:	83 c0 0c             	add    eax,0xc
c001be5d:	50                   	push   eax
c001be5e:	e8 e1 48 fe ff       	call   c0000744 <memcpy>
c001be63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be68:	5b                   	pop    ebx
c001be69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be6c:	5a                   	pop    edx
c001be6d:	8d 50 0c             	lea    edx,[eax+0xc]
c001be70:	52                   	push   edx
c001be71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be77:	e8 ca 4c ff ff       	call   c0010b46 <VgaText::setTitle(char*)>
c001be7c:	83 c4 10             	add    esp,0x10
c001be7f:	31 c0                	xor    eax,eax
c001be81:	eb a6                	jmp    c001be29 <sysAppSettings(regs*)+0x50>
c001be83:	83 ec 08             	sub    esp,0x8
c001be86:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001be8c:	83 e0 0f             	and    eax,0xf
c001be8f:	50                   	push   eax
c001be90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be9e:	e8 93 4c ff ff       	call   c0010b36 <VgaText::setTitleColour(VgaColour)>
c001bea3:	58                   	pop    eax
c001bea4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001beaa:	5a                   	pop    edx
c001beab:	c1 e8 04             	shr    eax,0x4
c001beae:	83 e0 0f             	and    eax,0xf
c001beb1:	50                   	push   eax
c001beb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bec0:	e8 61 4c ff ff       	call   c0010b26 <VgaText::setTitleTextColour(VgaColour)>
c001bec5:	eb b5                	jmp    c001be7c <sysAppSettings(regs*)+0xa3>
c001bec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001becc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001becf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bed5:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001bedb:	c0 e8 06             	shr    al,0x6
c001bede:	83 e0 01             	and    eax,0x1
c001bee1:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bee7:	31 c0                	xor    eax,eax
c001bee9:	e9 3b ff ff ff       	jmp    c001be29 <sysAppSettings(regs*)+0x50>
c001beee:	b8 02 00 00 00       	mov    eax,0x2
c001bef3:	e9 31 ff ff ff       	jmp    c001be29 <sysAppSettings(regs*)+0x50>

c001bef8 <sysSetFatAttrib(regs*)>:
c001bef8:	57                   	push   edi
c001bef9:	56                   	push   esi
c001befa:	53                   	push   ebx
c001befb:	83 ec 1c             	sub    esp,0x1c
c001befe:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bf02:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bf05:	68 14 01 00 00       	push   0x114
c001bf0a:	e8 31 39 ff ff       	call   c000f840 <malloc>
c001bf0f:	83 c4 0c             	add    esp,0xc
c001bf12:	89 c3                	mov    ebx,eax
c001bf14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf19:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf1c:	57                   	push   edi
c001bf1d:	53                   	push   ebx
c001bf1e:	e8 f1 71 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001bf23:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bf26:	83 c4 0c             	add    esp,0xc
c001bf29:	0f b6 d4             	movzx  edx,ah
c001bf2c:	0f b6 c0             	movzx  eax,al
c001bf2f:	52                   	push   edx
c001bf30:	50                   	push   eax
c001bf31:	53                   	push   ebx
c001bf32:	e8 53 74 ff ff       	call   c001338a <File::chfatattr(unsigned char, unsigned char)>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	85 db                	test   ebx,ebx
c001bf3c:	74 14                	je     c001bf52 <sysSetFatAttrib(regs*)+0x5a>
c001bf3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf42:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf44:	83 ec 0c             	sub    esp,0xc
c001bf47:	53                   	push   ebx
c001bf48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf52:	85 c0                	test   eax,eax
c001bf54:	0f 95 c0             	setne  al
c001bf57:	31 d2                	xor    edx,edx
c001bf59:	0f b6 c0             	movzx  eax,al
c001bf5c:	f7 d8                	neg    eax
c001bf5e:	83 d2 00             	adc    edx,0x0
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	f7 da                	neg    edx
c001bf66:	5b                   	pop    ebx
c001bf67:	5e                   	pop    esi
c001bf68:	5f                   	pop    edi
c001bf69:	c3                   	ret    

c001bf6a <sysPipe(regs*)>:
c001bf6a:	57                   	push   edi
c001bf6b:	56                   	push   esi
c001bf6c:	53                   	push   ebx
c001bf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf71:	83 ec 0c             	sub    esp,0xc
c001bf74:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bf77:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bf7a:	6a 20                	push   0x20
c001bf7c:	e8 bf 38 ff ff       	call   c000f840 <malloc>
c001bf81:	89 c3                	mov    ebx,eax
c001bf83:	58                   	pop    eax
c001bf84:	5a                   	pop    edx
c001bf85:	68 00 50 00 00       	push   0x5000
c001bf8a:	53                   	push   ebx
c001bf8b:	e8 e6 44 ff ff       	call   c0010476 <Pipe::Pipe(int)>
c001bf90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf93:	e8 3e 57 ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001bf98:	89 07                	mov    DWORD PTR [edi],eax
c001bf9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf9d:	e8 34 57 ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001bfa2:	83 c4 10             	add    esp,0x10
c001bfa5:	89 06                	mov    DWORD PTR [esi],eax
c001bfa7:	31 d2                	xor    edx,edx
c001bfa9:	5b                   	pop    ebx
c001bfaa:	31 c0                	xor    eax,eax
c001bfac:	5e                   	pop    esi
c001bfad:	5f                   	pop    edi
c001bfae:	c3                   	ret    

c001bfaf <sysGetUnixTime(regs*)>:
c001bfaf:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001bfb4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfbe:	e9 3b 7b ff ff       	jmp    c0013afe <Clock::timeInSecondsLocal()>

c001bfc3 <string_ends_with(char const*, char const*)>:
c001bfc3:	57                   	push   edi
c001bfc4:	56                   	push   esi
c001bfc5:	53                   	push   ebx
c001bfc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bfce:	83 ec 0c             	sub    esp,0xc
c001bfd1:	53                   	push   ebx
c001bfd2:	e8 bd 47 fe ff       	call   c0000794 <strlen>
c001bfd7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfda:	89 c6                	mov    esi,eax
c001bfdc:	e8 b3 47 fe ff       	call   c0000794 <strlen>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	39 c6                	cmp    esi,eax
c001bfe6:	7d 06                	jge    c001bfee <string_ends_with(char const*, char const*)+0x2b>
c001bfe8:	5b                   	pop    ebx
c001bfe9:	31 c0                	xor    eax,eax
c001bfeb:	5e                   	pop    esi
c001bfec:	5f                   	pop    edi
c001bfed:	c3                   	ret    
c001bfee:	83 ec 08             	sub    esp,0x8
c001bff1:	29 c6                	sub    esi,eax
c001bff3:	57                   	push   edi
c001bff4:	01 f3                	add    ebx,esi
c001bff6:	53                   	push   ebx
c001bff7:	e8 c4 48 fe ff       	call   c00008c0 <strcmp>
c001bffc:	83 c4 10             	add    esp,0x10
c001bfff:	85 c0                	test   eax,eax
c001c001:	5b                   	pop    ebx
c001c002:	0f 94 c0             	sete   al
c001c005:	5e                   	pop    esi
c001c006:	0f b6 c0             	movzx  eax,al
c001c009:	5f                   	pop    edi
c001c00a:	c3                   	ret    

c001c00b <sysCallOpen(regs*)>:
c001c00b:	56                   	push   esi
c001c00c:	53                   	push   ebx
c001c00d:	81 ec 04 01 00 00    	sub    esp,0x104
c001c013:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c01a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c01d:	85 c9                	test   ecx,ecx
c001c01f:	0f 84 b3 00 00 00    	je     c001c0d8 <sysCallOpen(regs*)+0xcd>
c001c025:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c028:	85 c0                	test   eax,eax
c001c02a:	0f 84 a8 00 00 00    	je     c001c0d8 <sysCallOpen(regs*)+0xcd>
c001c030:	52                   	push   edx
c001c031:	68 91 bb 02 c0       	push   0xc002bb91
c001c036:	50                   	push   eax
c001c037:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c03b:	56                   	push   esi
c001c03c:	e8 29 6f ff ff       	call   c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)>
c001c041:	89 34 24             	mov    DWORD PTR [esp],esi
c001c044:	e8 4b 47 fe ff       	call   c0000794 <strlen>
c001c049:	83 c4 10             	add    esp,0x10
c001c04c:	48                   	dec    eax
c001c04d:	74 1d                	je     c001c06c <sysCallOpen(regs*)+0x61>
c001c04f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c052:	eb 0f                	jmp    c001c063 <sysCallOpen(regs*)+0x58>
c001c054:	80 fa 3a             	cmp    dl,0x3a
c001c057:	74 0f                	je     c001c068 <sysCallOpen(regs*)+0x5d>
c001c059:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c05d:	48                   	dec    eax
c001c05e:	74 0c                	je     c001c06c <sysCallOpen(regs*)+0x61>
c001c060:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c063:	80 fa 2e             	cmp    dl,0x2e
c001c066:	75 ec                	jne    c001c054 <sysCallOpen(regs*)+0x49>
c001c068:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c06c:	83 ec 08             	sub    esp,0x8
c001c06f:	68 95 bb 02 c0       	push   0xc002bb95
c001c074:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c077:	e8 47 ff ff ff       	call   c001bfc3 <string_ends_with(char const*, char const*)>
c001c07c:	83 c4 10             	add    esp,0x10
c001c07f:	85 c0                	test   eax,eax
c001c081:	75 17                	jne    c001c09a <sysCallOpen(regs*)+0x8f>
c001c083:	83 ec 08             	sub    esp,0x8
c001c086:	68 b6 bb 02 c0       	push   0xc002bbb6
c001c08b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c08e:	e8 30 ff ff ff       	call   c001bfc3 <string_ends_with(char const*, char const*)>
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	85 c0                	test   eax,eax
c001c098:	74 51                	je     c001c0eb <sysCallOpen(regs*)+0xe0>
c001c09a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c09d:	83 ec 08             	sub    esp,0x8
c001c0a0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c0a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c0b0:	ff 30                	push   DWORD PTR [eax]
c001c0b2:	68 9a bb 02 c0       	push   0xc002bb9a
c001c0b7:	e8 00 6b ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c0bc:	c7 04 24 a9 bb 02 c0 	mov    DWORD PTR [esp],0xc002bba9
c001c0c3:	e8 f4 6a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c0c8:	83 c4 10             	add    esp,0x10
c001c0cb:	81 c4 04 01 00 00    	add    esp,0x104
c001c0d1:	31 c0                	xor    eax,eax
c001c0d3:	31 d2                	xor    edx,edx
c001c0d5:	5b                   	pop    ebx
c001c0d6:	5e                   	pop    esi
c001c0d7:	c3                   	ret    
c001c0d8:	81 c4 04 01 00 00    	add    esp,0x104
c001c0de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0e8:	5b                   	pop    ebx
c001c0e9:	5e                   	pop    esi
c001c0ea:	c3                   	ret    
c001c0eb:	83 ec 08             	sub    esp,0x8
c001c0ee:	68 96 bb 02 c0       	push   0xc002bb96
c001c0f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0f6:	e8 c5 47 fe ff       	call   c00008c0 <strcmp>
c001c0fb:	83 c4 10             	add    esp,0x10
c001c0fe:	85 c0                	test   eax,eax
c001c100:	74 98                	je     c001c09a <sysCallOpen(regs*)+0x8f>
c001c102:	83 ec 08             	sub    esp,0x8
c001c105:	68 95 bb 02 c0       	push   0xc002bb95
c001c10a:	56                   	push   esi
c001c10b:	e8 b3 fe ff ff       	call   c001bfc3 <string_ends_with(char const*, char const*)>
c001c110:	83 c4 10             	add    esp,0x10
c001c113:	85 c0                	test   eax,eax
c001c115:	75 83                	jne    c001c09a <sysCallOpen(regs*)+0x8f>
c001c117:	83 ec 08             	sub    esp,0x8
c001c11a:	68 bb bb 02 c0       	push   0xc002bbbb
c001c11f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c122:	e8 9c fe ff ff       	call   c001bfc3 <string_ends_with(char const*, char const*)>
c001c127:	83 c4 10             	add    esp,0x10
c001c12a:	85 c0                	test   eax,eax
c001c12c:	0f 85 d9 00 00 00    	jne    c001c20b <sysCallOpen(regs*)+0x200>
c001c132:	83 ec 08             	sub    esp,0x8
c001c135:	68 c0 bb 02 c0       	push   0xc002bbc0
c001c13a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c13d:	e8 81 fe ff ff       	call   c001bfc3 <string_ends_with(char const*, char const*)>
c001c142:	83 c4 10             	add    esp,0x10
c001c145:	85 c0                	test   eax,eax
c001c147:	0f 85 be 00 00 00    	jne    c001c20b <sysCallOpen(regs*)+0x200>
c001c14d:	83 ec 08             	sub    esp,0x8
c001c150:	68 bc bb 02 c0       	push   0xc002bbbc
c001c155:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c158:	e8 63 47 fe ff       	call   c00008c0 <strcmp>
c001c15d:	83 c4 10             	add    esp,0x10
c001c160:	85 c0                	test   eax,eax
c001c162:	0f 84 a3 00 00 00    	je     c001c20b <sysCallOpen(regs*)+0x200>
c001c168:	83 ec 08             	sub    esp,0x8
c001c16b:	68 bb bb 02 c0       	push   0xc002bbbb
c001c170:	56                   	push   esi
c001c171:	e8 4d fe ff ff       	call   c001bfc3 <string_ends_with(char const*, char const*)>
c001c176:	83 c4 10             	add    esp,0x10
c001c179:	85 c0                	test   eax,eax
c001c17b:	0f 85 8a 00 00 00    	jne    c001c20b <sysCallOpen(regs*)+0x200>
c001c181:	83 ec 0c             	sub    esp,0xc
c001c184:	68 14 01 00 00       	push   0x114
c001c189:	e8 b2 36 ff ff       	call   c000f840 <malloc>
c001c18e:	83 c4 0c             	add    esp,0xc
c001c191:	89 c6                	mov    esi,eax
c001c193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c198:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c19b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c19e:	56                   	push   esi
c001c19f:	e8 70 6f ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001c1a4:	83 c4 10             	add    esp,0x10
c001c1a7:	85 f6                	test   esi,esi
c001c1a9:	0f 84 29 ff ff ff    	je     c001c0d8 <sysCallOpen(regs*)+0xcd>
c001c1af:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c1b2:	0f b6 c2             	movzx  eax,dl
c001c1b5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c1b8:	89 d0                	mov    eax,edx
c001c1ba:	83 e0 01             	and    eax,0x1
c001c1bd:	f6 c2 02             	test   dl,0x2
c001c1c0:	74 03                	je     c001c1c5 <sysCallOpen(regs*)+0x1ba>
c001c1c2:	83 c8 02             	or     eax,0x2
c001c1c5:	f6 c2 04             	test   dl,0x4
c001c1c8:	74 03                	je     c001c1cd <sysCallOpen(regs*)+0x1c2>
c001c1ca:	83 c8 04             	or     eax,0x4
c001c1cd:	f6 c2 08             	test   dl,0x8
c001c1d0:	74 03                	je     c001c1d5 <sysCallOpen(regs*)+0x1ca>
c001c1d2:	83 c8 0a             	or     eax,0xa
c001c1d5:	83 e2 10             	and    edx,0x10
c001c1d8:	74 03                	je     c001c1dd <sysCallOpen(regs*)+0x1d2>
c001c1da:	83 c8 12             	or     eax,0x12
c001c1dd:	83 ec 08             	sub    esp,0x8
c001c1e0:	50                   	push   eax
c001c1e1:	56                   	push   esi
c001c1e2:	e8 91 6f ff ff       	call   c0013178 <File::open(FileOpenMode)>
c001c1e7:	83 c4 10             	add    esp,0x10
c001c1ea:	85 c0                	test   eax,eax
c001c1ec:	0f 85 e6 fe ff ff    	jne    c001c0d8 <sysCallOpen(regs*)+0xcd>
c001c1f2:	83 ec 0c             	sub    esp,0xc
c001c1f5:	56                   	push   esi
c001c1f6:	e8 db 54 ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001c1fb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1fe:	89 02                	mov    DWORD PTR [edx],eax
c001c200:	c1 f8 1f             	sar    eax,0x1f
c001c203:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c206:	e9 bd fe ff ff       	jmp    c001c0c8 <sysCallOpen(regs*)+0xbd>
c001c20b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c20e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c214:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c21b:	e9 ab fe ff ff       	jmp    c001c0cb <sysCallOpen(regs*)+0xc0>

c001c220 <Sys::loadSyscalls()>:
c001c220:	c7 05 40 0c 03 c0 2d b3 01 c0 	mov    DWORD PTR ds:0xc0030c40,0xc001b32d
c001c22a:	c7 05 44 0c 03 c0 cc ae 01 c0 	mov    DWORD PTR ds:0xc0030c44,0xc001aecc
c001c234:	c7 05 48 0c 03 c0 36 b0 01 c0 	mov    DWORD PTR ds:0xc0030c48,0xc001b036
c001c23e:	c7 05 4c 0c 03 c0 63 b2 01 c0 	mov    DWORD PTR ds:0xc0030c4c,0xc001b263
c001c248:	c7 05 50 0c 03 c0 ce af 01 c0 	mov    DWORD PTR ds:0xc0030c50,0xc001afce
c001c252:	c7 05 54 0c 03 c0 03 af 01 c0 	mov    DWORD PTR ds:0xc0030c54,0xc001af03
c001c25c:	c7 05 58 0c 03 c0 e4 ae 01 c0 	mov    DWORD PTR ds:0xc0030c58,0xc001aee4
c001c266:	c7 05 5c 0c 03 c0 d5 b0 01 c0 	mov    DWORD PTR ds:0xc0030c5c,0xc001b0d5
c001c270:	c7 05 64 0c 03 c0 5d b8 01 c0 	mov    DWORD PTR ds:0xc0030c64,0xc001b85d
c001c27a:	c7 05 60 0c 03 c0 0b c0 01 c0 	mov    DWORD PTR ds:0xc0030c60,0xc001c00b
c001c284:	c7 05 68 0c 03 c0 e5 b8 01 c0 	mov    DWORD PTR ds:0xc0030c68,0xc001b8e5
c001c28e:	c7 05 6c 0c 03 c0 4c b5 01 c0 	mov    DWORD PTR ds:0xc0030c6c,0xc001b54c
c001c298:	c7 05 70 0c 03 c0 68 b3 01 c0 	mov    DWORD PTR ds:0xc0030c70,0xc001b368
c001c2a2:	c7 05 74 0c 03 c0 6d b3 01 c0 	mov    DWORD PTR ds:0xc0030c74,0xc001b36d
c001c2ac:	c7 05 78 0c 03 c0 c0 b9 01 c0 	mov    DWORD PTR ds:0xc0030c78,0xc001b9c0
c001c2b6:	c7 05 7c 0c 03 c0 5a b9 01 c0 	mov    DWORD PTR ds:0xc0030c7c,0xc001b95a
c001c2c0:	c7 05 80 0c 03 c0 34 b6 01 c0 	mov    DWORD PTR ds:0xc0030c80,0xc001b634
c001c2ca:	c7 05 84 0c 03 c0 9d b6 01 c0 	mov    DWORD PTR ds:0xc0030c84,0xc001b69d
c001c2d4:	c7 05 88 0c 03 c0 1a b7 01 c0 	mov    DWORD PTR ds:0xc0030c88,0xc001b71a
c001c2de:	c7 05 8c 0c 03 c0 72 b3 01 c0 	mov    DWORD PTR ds:0xc0030c8c,0xc001b372
c001c2e8:	c7 05 90 0c 03 c0 30 ba 01 c0 	mov    DWORD PTR ds:0xc0030c90,0xc001ba30
c001c2f2:	c7 05 94 0c 03 c0 4a ba 01 c0 	mov    DWORD PTR ds:0xc0030c94,0xc001ba4a
c001c2fc:	c7 05 98 0c 03 c0 4a ba 01 c0 	mov    DWORD PTR ds:0xc0030c98,0xc001ba4a
c001c306:	c7 05 9c 0c 03 c0 8b ba 01 c0 	mov    DWORD PTR ds:0xc0030c9c,0xc001ba8b
c001c310:	c7 05 a0 0c 03 c0 ef ba 01 c0 	mov    DWORD PTR ds:0xc0030ca0,0xc001baef
c001c31a:	c7 05 a4 0c 03 c0 1e b5 01 c0 	mov    DWORD PTR ds:0xc0030ca4,0xc001b51e
c001c324:	c7 05 a8 0c 03 c0 53 bb 01 c0 	mov    DWORD PTR ds:0xc0030ca8,0xc001bb53
c001c32e:	c7 05 ac 0c 03 c0 db b4 01 c0 	mov    DWORD PTR ds:0xc0030cac,0xc001b4db
c001c338:	c7 05 b0 0c 03 c0 9f bb 01 c0 	mov    DWORD PTR ds:0xc0030cb0,0xc001bb9f
c001c342:	c7 05 b4 0c 03 c0 da b5 01 c0 	mov    DWORD PTR ds:0xc0030cb4,0xc001b5da
c001c34c:	c7 05 b8 0c 03 c0 22 bc 01 c0 	mov    DWORD PTR ds:0xc0030cb8,0xc001bc22
c001c356:	c7 05 bc 0c 03 c0 9d b7 01 c0 	mov    DWORD PTR ds:0xc0030cbc,0xc001b79d
c001c360:	c7 05 c0 0c 03 c0 49 bc 01 c0 	mov    DWORD PTR ds:0xc0030cc0,0xc001bc49
c001c36a:	c7 05 c4 0c 03 c0 a1 bc 01 c0 	mov    DWORD PTR ds:0xc0030cc4,0xc001bca1
c001c374:	c7 05 c8 0c 03 c0 d9 bd 01 c0 	mov    DWORD PTR ds:0xc0030cc8,0xc001bdd9
c001c37e:	c7 05 cc 0c 03 c0 7c b3 01 c0 	mov    DWORD PTR ds:0xc0030ccc,0xc001b37c
c001c388:	c7 05 d0 0c 03 c0 e6 b3 01 c0 	mov    DWORD PTR ds:0xc0030cd0,0xc001b3e6
c001c392:	c7 05 d4 0c 03 c0 2c b4 01 c0 	mov    DWORD PTR ds:0xc0030cd4,0xc001b42c
c001c39c:	c7 05 d8 0c 03 c0 f8 be 01 c0 	mov    DWORD PTR ds:0xc0030cd8,0xc001bef8
c001c3a6:	c7 05 dc 0c 03 c0 65 ba 01 c0 	mov    DWORD PTR ds:0xc0030cdc,0xc001ba65
c001c3b0:	c7 05 e0 0c 03 c0 7d b4 01 c0 	mov    DWORD PTR ds:0xc0030ce0,0xc001b47d
c001c3ba:	c7 05 e4 0c 03 c0 6a bf 01 c0 	mov    DWORD PTR ds:0xc0030ce4,0xc001bf6a
c001c3c4:	c7 05 e8 0c 03 c0 af bf 01 c0 	mov    DWORD PTR ds:0xc0030ce8,0xc001bfaf
c001c3ce:	c7 05 ec 0c 03 c0 26 af 01 c0 	mov    DWORD PTR ds:0xc0030cec,0xc001af26
c001c3d8:	c7 05 f0 0c 03 c0 f1 b0 01 c0 	mov    DWORD PTR ds:0xc0030cf0,0xc001b0f1
c001c3e2:	c7 05 f4 0c 03 c0 19 b2 01 c0 	mov    DWORD PTR ds:0xc0030cf4,0xc001b219
c001c3ec:	c7 05 f8 0c 03 c0 96 ae 01 c0 	mov    DWORD PTR ds:0xc0030cf8,0xc001ae96
c001c3f6:	c7 05 fc 0c 03 c0 cb b2 01 c0 	mov    DWORD PTR ds:0xc0030cfc,0xc001b2cb
c001c400:	c7 05 00 0d 03 c0 0f af 01 c0 	mov    DWORD PTR ds:0xc0030d00,0xc001af0f
c001c40a:	c3                   	ret    

c001c40b <Sys::systemCall(regs*, void*)>:
c001c40b:	53                   	push   ebx
c001c40c:	83 ec 08             	sub    esp,0x8
c001c40f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c413:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c416:	83 f8 7f             	cmp    eax,0x7f
c001c419:	77 16                	ja     c001c431 <Sys::systemCall(regs*, void*)+0x26>
c001c41b:	8b 14 85 40 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf3c0]
c001c422:	85 d2                	test   edx,edx
c001c424:	74 0b                	je     c001c431 <Sys::systemCall(regs*, void*)+0x26>
c001c426:	83 ec 0c             	sub    esp,0xc
c001c429:	53                   	push   ebx
c001c42a:	ff d2                	call   edx
c001c42c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c42f:	eb 0d                	jmp    c001c43e <Sys::systemCall(regs*, void*)+0x33>
c001c431:	52                   	push   edx
c001c432:	52                   	push   edx
c001c433:	50                   	push   eax
c001c434:	68 c5 bb 02 c0       	push   0xc002bbc5
c001c439:	e8 7e 67 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c446:	31 d2                	xor    edx,edx
c001c448:	83 c4 08             	add    esp,0x8
c001c44b:	5b                   	pop    ebx
c001c44c:	c3                   	ret    

c001c44d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c44d:	55                   	push   ebp
c001c44e:	57                   	push   edi
c001c44f:	56                   	push   esi
c001c450:	53                   	push   ebx
c001c451:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c457:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c45e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c465:	85 c0                	test   eax,eax
c001c467:	0f 95 c1             	setne  cl
c001c46a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c472:	0f 94 c2             	sete   dl
c001c475:	84 d1                	test   cl,dl
c001c477:	74 23                	je     c001c49c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c479:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c47f:	74 1b                	je     c001c49c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c481:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c487:	89 da                	mov    edx,ebx
c001c489:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c48f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c495:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c49c:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c4a3:	05 ff 0f 00 00       	add    eax,0xfff
c001c4a8:	83 ec 0c             	sub    esp,0xc
c001c4ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4af:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c4b5:	c1 e8 0c             	shr    eax,0xc
c001c4b8:	89 ef                	mov    edi,ebp
c001c4ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4be:	c1 ef 0c             	shr    edi,0xc
c001c4c1:	6a 01                	push   0x1
c001c4c3:	e8 59 56 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001c4c8:	89 c6                	mov    esi,eax
c001c4ca:	58                   	pop    eax
c001c4cb:	5a                   	pop    edx
c001c4cc:	57                   	push   edi
c001c4cd:	68 4b bc 02 c0       	push   0xc002bc4b
c001c4d2:	e8 e5 66 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c4d7:	59                   	pop    ecx
c001c4d8:	58                   	pop    eax
c001c4d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c4dd:	68 5d bc 02 c0       	push   0xc002bc5d
c001c4e2:	e8 d5 66 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c4e7:	83 c4 10             	add    esp,0x10
c001c4ea:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c4f0:	0f 86 24 01 00 00    	jbe    c001c61a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c4f6:	c1 e7 0c             	shl    edi,0xc
c001c4f9:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c4fc:	89 df                	mov    edi,ebx
c001c4fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c502:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c509:	01 dd                	add    ebp,ebx
c001c50b:	29 fd                	sub    ebp,edi
c001c50d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c511:	0f 84 01 01 00 00    	je     c001c618 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c517:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c51d:	76 05                	jbe    c001c524 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c51f:	bd 00 10 00 00       	mov    ebp,0x1000
c001c524:	83 ec 0c             	sub    esp,0xc
c001c527:	31 d2                	xor    edx,edx
c001c529:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c530:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c532:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c536:	50                   	push   eax
c001c537:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c53b:	50                   	push   eax
c001c53c:	52                   	push   edx
c001c53d:	55                   	push   ebp
c001c53e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c545:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c548:	83 c4 20             	add    esp,0x20
c001c54b:	85 c0                	test   eax,eax
c001c54d:	74 0a                	je     c001c559 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c54f:	53                   	push   ebx
c001c550:	53                   	push   ebx
c001c551:	50                   	push   eax
c001c552:	68 6f bc 02 c0       	push   0xc002bc6f
c001c557:	eb 0f                	jmp    c001c568 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c559:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c55d:	74 20                	je     c001c57f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c55f:	51                   	push   ecx
c001c560:	51                   	push   ecx
c001c561:	6a 00                	push   0x0
c001c563:	68 9a bc 02 c0       	push   0xc002bc9a
c001c568:	e8 4f 66 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c56d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c570:	e8 10 59 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c001c575:	83 c4 10             	add    esp,0x10
c001c578:	31 c0                	xor    eax,eax
c001c57a:	e9 55 01 00 00       	jmp    c001c6d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c57f:	e8 d8 14 00 00       	call   c001da5c <lockScheduler()>
c001c584:	e8 56 39 ff ff       	call   c000fedf <Phys::allocatePage()>
c001c589:	6a 07                	push   0x7
c001c58b:	89 c5                	mov    ebp,eax
c001c58d:	56                   	push   esi
c001c58e:	50                   	push   eax
c001c58f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c594:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c597:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c59d:	e8 4a 5c ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001c5a2:	83 c4 0c             	add    esp,0xc
c001c5a5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c5ac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5b2:	6a 00                	push   0x0
c001c5b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5c2:	e8 8f 5a ff ff       	call   c0012056 <VAS::mapOtherVASIn(bool, VAS*)>
c001c5c7:	58                   	pop    eax
c001c5c8:	5a                   	pop    edx
c001c5c9:	68 07 0c 00 00       	push   0xc07
c001c5ce:	57                   	push   edi
c001c5cf:	81 c7 00 10 00 00    	add    edi,0x1000
c001c5d5:	55                   	push   ebp
c001c5d6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c5dd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5e3:	6a 00                	push   0x0
c001c5e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5ed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5f3:	e8 ae 5f ff ff       	call   c00125a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c5f8:	83 c4 1c             	add    esp,0x1c
c001c5fb:	68 00 10 00 00       	push   0x1000
c001c600:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c604:	50                   	push   eax
c001c605:	56                   	push   esi
c001c606:	e8 39 41 fe ff       	call   c0000744 <memcpy>
c001c60b:	e8 4e 14 00 00       	call   c001da5e <unlockScheduler()>
c001c610:	83 c4 10             	add    esp,0x10
c001c613:	e9 ea fe ff ff       	jmp    c001c502 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c618:	89 fb                	mov    ebx,edi
c001c61a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c622:	0f 86 9e 00 00 00    	jbe    c001c6c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c628:	e8 2f 14 00 00       	call   c001da5c <lockScheduler()>
c001c62d:	51                   	push   ecx
c001c62e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c635:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c63b:	6a 00                	push   0x0
c001c63d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c642:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c645:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c64b:	e8 06 5a ff ff       	call   c0012056 <VAS::mapOtherVASIn(bool, VAS*)>
c001c650:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c654:	c1 e7 0c             	shl    edi,0xc
c001c657:	01 df                	add    edi,ebx
c001c659:	83 c4 10             	add    esp,0x10
c001c65c:	39 fb                	cmp    ebx,edi
c001c65e:	74 61                	je     c001c6c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c660:	e8 7a 38 ff ff       	call   c000fedf <Phys::allocatePage()>
c001c665:	6a 07                	push   0x7
c001c667:	89 c5                	mov    ebp,eax
c001c669:	56                   	push   esi
c001c66a:	50                   	push   eax
c001c66b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c670:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c673:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c679:	e8 6e 5b ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001c67e:	58                   	pop    eax
c001c67f:	5a                   	pop    edx
c001c680:	68 07 0c 00 00       	push   0xc07
c001c685:	53                   	push   ebx
c001c686:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c68c:	55                   	push   ebp
c001c68d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c694:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c69a:	6a 00                	push   0x0
c001c69c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6aa:	e8 f7 5e ff ff       	call   c00125a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c6af:	83 c4 1c             	add    esp,0x1c
c001c6b2:	68 00 10 00 00       	push   0x1000
c001c6b7:	6a 00                	push   0x0
c001c6b9:	56                   	push   esi
c001c6ba:	e8 b9 40 fe ff       	call   c0000778 <memset>
c001c6bf:	eb 98                	jmp    c001c659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c6c1:	e8 98 13 00 00       	call   c001da5e <unlockScheduler()>
c001c6c6:	83 ec 0c             	sub    esp,0xc
c001c6c9:	56                   	push   esi
c001c6ca:	e8 b6 57 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	b0 01                	mov    al,0x1
c001c6d4:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c6da:	5b                   	pop    ebx
c001c6db:	5e                   	pop    esi
c001c6dc:	5f                   	pop    edi
c001c6dd:	5d                   	pop    ebp
c001c6de:	c3                   	ret    

c001c6df <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c6df:	55                   	push   ebp
c001c6e0:	57                   	push   edi
c001c6e1:	56                   	push   esi
c001c6e2:	53                   	push   ebx
c001c6e3:	83 ec 48             	sub    esp,0x48
c001c6e6:	68 14 01 00 00       	push   0x114
c001c6eb:	e8 50 31 ff ff       	call   c000f840 <malloc>
c001c6f0:	83 c4 0c             	add    esp,0xc
c001c6f3:	89 c6                	mov    esi,eax
c001c6f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c6f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c6fd:	50                   	push   eax
c001c6fe:	e8 11 6a ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001c703:	58                   	pop    eax
c001c704:	5a                   	pop    edx
c001c705:	6a 01                	push   0x1
c001c707:	56                   	push   esi
c001c708:	e8 6b 6a ff ff       	call   c0013178 <File::open(FileOpenMode)>
c001c70d:	83 c4 10             	add    esp,0x10
c001c710:	85 c0                	test   eax,eax
c001c712:	0f 85 47 01 00 00    	jne    c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c718:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c720:	83 ec 0c             	sub    esp,0xc
c001c723:	6a 34                	push   0x34
c001c725:	e8 16 31 ff ff       	call   c000f840 <malloc>
c001c72a:	89 c3                	mov    ebx,eax
c001c72c:	58                   	pop    eax
c001c72d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c72f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c733:	57                   	push   edi
c001c734:	53                   	push   ebx
c001c735:	6a 00                	push   0x0
c001c737:	6a 34                	push   0x34
c001c739:	56                   	push   esi
c001c73a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c73d:	83 c4 20             	add    esp,0x20
c001c740:	85 c0                	test   eax,eax
c001c742:	0f 85 17 01 00 00    	jne    c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c748:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c74e:	0f 85 0b 01 00 00    	jne    c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c754:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c757:	85 c0                	test   eax,eax
c001c759:	0f 84 00 01 00 00    	je     c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c75f:	31 d2                	xor    edx,edx
c001c761:	55                   	push   ebp
c001c762:	52                   	push   edx
c001c763:	50                   	push   eax
c001c764:	56                   	push   esi
c001c765:	e8 cc 6a ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001c76a:	83 c4 10             	add    esp,0x10
c001c76d:	85 c0                	test   eax,eax
c001c76f:	0f 85 ea 00 00 00    	jne    c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c775:	83 ec 0c             	sub    esp,0xc
c001c778:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c77b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c783:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c787:	0f af c2             	imul   eax,edx
c001c78a:	50                   	push   eax
c001c78b:	e8 b0 30 ff ff       	call   c000f840 <malloc>
c001c790:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c792:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c796:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c799:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c79d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c7a1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c7a5:	0f af c2             	imul   eax,edx
c001c7a8:	99                   	cdq    
c001c7a9:	52                   	push   edx
c001c7aa:	50                   	push   eax
c001c7ab:	56                   	push   esi
c001c7ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c7b2:	83 c4 20             	add    esp,0x20
c001c7b5:	85 c0                	test   eax,eax
c001c7b7:	0f 84 a2 00 00 00    	je     c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7bd:	31 d2                	xor    edx,edx
c001c7bf:	51                   	push   ecx
c001c7c0:	52                   	push   edx
c001c7c1:	50                   	push   eax
c001c7c2:	56                   	push   esi
c001c7c3:	e8 6e 6a ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	85 c0                	test   eax,eax
c001c7cd:	0f 85 8c 00 00 00    	jne    c001c85f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7d3:	83 ec 0c             	sub    esp,0xc
c001c7d6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7da:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7de:	31 ed                	xor    ebp,ebp
c001c7e0:	0f af c2             	imul   eax,edx
c001c7e3:	50                   	push   eax
c001c7e4:	e8 57 30 ff ff       	call   c000f840 <malloc>
c001c7e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c7eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7fa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7fe:	0f af c2             	imul   eax,edx
c001c801:	99                   	cdq    
c001c802:	52                   	push   edx
c001c803:	50                   	push   eax
c001c804:	56                   	push   esi
c001c805:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c808:	83 c4 20             	add    esp,0x20
c001c80b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c813:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c817:	0f 86 80 00 00 00    	jbe    c001c89d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c81d:	0f b7 fd             	movzx  edi,bp
c001c820:	c1 e7 05             	shl    edi,0x5
c001c823:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c827:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c82a:	75 6b                	jne    c001c897 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c82c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c82f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c833:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c836:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c83a:	52                   	push   edx
c001c83b:	31 d2                	xor    edx,edx
c001c83d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c840:	52                   	push   edx
c001c841:	50                   	push   eax
c001c842:	56                   	push   esi
c001c843:	e8 ee 69 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	85 c0                	test   eax,eax
c001c84d:	74 17                	je     c001c866 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c84f:	83 ec 0c             	sub    esp,0xc
c001c852:	68 c6 bc 02 c0       	push   0xc002bcc6
c001c857:	e8 60 63 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c85c:	83 c4 10             	add    esp,0x10
c001c85f:	31 c0                	xor    eax,eax
c001c861:	e9 87 00 00 00       	jmp    c001c8ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c866:	83 ec 0c             	sub    esp,0xc
c001c869:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c86c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c86f:	50                   	push   eax
c001c870:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c878:	56                   	push   esi
c001c879:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c87d:	e8 cb fb ff ff       	call   c001c44d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c882:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c886:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c88a:	83 c4 20             	add    esp,0x20
c001c88d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c891:	73 04                	jae    c001c897 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c893:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c897:	45                   	inc    ebp
c001c898:	e9 76 ff ff ff       	jmp    c001c813 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c89d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c8a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8a9:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c8b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c8bd:	05 00 10 00 00       	add    eax,0x1000
c001c8c2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8c9:	e8 82 2f ff ff       	call   c000f850 <free>
c001c8ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8d1:	e8 7a 2f ff ff       	call   c000f850 <free>
c001c8d6:	58                   	pop    eax
c001c8d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8db:	e8 70 2f ff ff       	call   c000f850 <free>
c001c8e0:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8e3:	e8 ee 68 ff ff       	call   c00131d6 <File::close()>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	b0 01                	mov    al,0x1
c001c8ed:	83 c4 3c             	add    esp,0x3c
c001c8f0:	5b                   	pop    ebx
c001c8f1:	5e                   	pop    esi
c001c8f2:	5f                   	pop    edi
c001c8f3:	5d                   	pop    ebp
c001c8f4:	c3                   	ret    

c001c8f5 <Thr::runtimeReferenceHelper()>:
c001c8f5:	83 ec 18             	sub    esp,0x18
c001c8f8:	68 ce bc 02 c0       	push   0xc002bcce
c001c8fd:	e8 ba 62 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001c902:	fa                   	cli    
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	eb fe                	jmp    c001c906 <Thr::runtimeReferenceHelper()+0x11>

c001c908 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c908:	57                   	push   edi
c001c909:	56                   	push   esi
c001c90a:	53                   	push   ebx
c001c90b:	31 db                	xor    ebx,ebx
c001c90d:	39 1d e0 15 03 c0    	cmp    DWORD PTR ds:0xc00315e0,ebx
c001c913:	7e 3c                	jle    c001c951 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c915:	8b 34 9d 60 15 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffceaa0]
c001c91c:	31 ff                	xor    edi,edi
c001c91e:	39 3c 9d 60 14 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffceba0],edi
c001c925:	7e 27                	jle    c001c94e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c927:	50                   	push   eax
c001c928:	50                   	push   eax
c001c929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c92d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c92f:	03 04 9d e0 14 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffceb20]
c001c936:	50                   	push   eax
c001c937:	e8 84 3f fe ff       	call   c00008c0 <strcmp>
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	85 c0                	test   eax,eax
c001c941:	75 05                	jne    c001c948 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c943:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c946:	eb 0b                	jmp    c001c953 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c948:	83 c6 10             	add    esi,0x10
c001c94b:	47                   	inc    edi
c001c94c:	eb d0                	jmp    c001c91e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c94e:	43                   	inc    ebx
c001c94f:	eb bc                	jmp    c001c90d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c951:	31 c0                	xor    eax,eax
c001c953:	5b                   	pop    ebx
c001c954:	5e                   	pop    esi
c001c955:	5f                   	pop    edi
c001c956:	c3                   	ret    

c001c957 <Thr::loadKernelSymbolTable(char const*)>:
c001c957:	55                   	push   ebp
c001c958:	57                   	push   edi
c001c959:	56                   	push   esi
c001c95a:	53                   	push   ebx
c001c95b:	83 ec 68             	sub    esp,0x68
c001c95e:	8b 35 34 16 03 c0    	mov    esi,DWORD PTR ds:0xc0031634
c001c964:	68 14 01 00 00       	push   0x114
c001c969:	e8 d2 2e ff ff       	call   c000f840 <malloc>
c001c96e:	83 c4 0c             	add    esp,0xc
c001c971:	89 c3                	mov    ebx,eax
c001c973:	56                   	push   esi
c001c974:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c978:	50                   	push   eax
c001c979:	e8 96 67 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001c97e:	5e                   	pop    esi
c001c97f:	5f                   	pop    edi
c001c980:	6a 01                	push   0x1
c001c982:	53                   	push   ebx
c001c983:	e8 f0 67 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	85 c0                	test   eax,eax
c001c98d:	74 0a                	je     c001c999 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c98f:	83 ec 0c             	sub    esp,0xc
c001c992:	68 f0 bc 02 c0       	push   0xc002bcf0
c001c997:	eb 34                	jmp    c001c9cd <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c999:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c9a1:	83 ec 0c             	sub    esp,0xc
c001c9a4:	6a 34                	push   0x34
c001c9a6:	e8 95 2e ff ff       	call   c000f840 <malloc>
c001c9ab:	59                   	pop    ecx
c001c9ac:	89 c7                	mov    edi,eax
c001c9ae:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c9b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9b4:	56                   	push   esi
c001c9b5:	57                   	push   edi
c001c9b6:	6a 00                	push   0x0
c001c9b8:	6a 34                	push   0x34
c001c9ba:	53                   	push   ebx
c001c9bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9be:	83 c4 20             	add    esp,0x20
c001c9c1:	85 c0                	test   eax,eax
c001c9c3:	74 17                	je     c001c9dc <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c9c5:	83 ec 0c             	sub    esp,0xc
c001c9c8:	68 07 bd 02 c0       	push   0xc002bd07
c001c9cd:	e8 65 d8 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001c9d2:	83 c4 10             	add    esp,0x10
c001c9d5:	31 c0                	xor    eax,eax
c001c9d7:	e9 31 02 00 00       	jmp    c001cc0d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c9dc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c9e2:	75 e1                	jne    c001c9c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9e4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c9e7:	85 c0                	test   eax,eax
c001c9e9:	74 da                	je     c001c9c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9eb:	52                   	push   edx
c001c9ec:	31 d2                	xor    edx,edx
c001c9ee:	52                   	push   edx
c001c9ef:	50                   	push   eax
c001c9f0:	53                   	push   ebx
c001c9f1:	e8 40 68 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	85 c0                	test   eax,eax
c001c9fb:	75 c8                	jne    c001c9c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9fd:	83 ec 0c             	sub    esp,0xc
c001ca00:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca04:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca08:	31 ed                	xor    ebp,ebp
c001ca0a:	0f af c2             	imul   eax,edx
c001ca0d:	50                   	push   eax
c001ca0e:	e8 2d 2e ff ff       	call   c000f840 <malloc>
c001ca13:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ca15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca19:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca20:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca24:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca28:	0f af c2             	imul   eax,edx
c001ca2b:	99                   	cdq    
c001ca2c:	52                   	push   edx
c001ca2d:	50                   	push   eax
c001ca2e:	53                   	push   ebx
c001ca2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca32:	83 c4 20             	add    esp,0x20
c001ca35:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca3d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca55:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ca59:	0f 86 aa 00 00 00    	jbe    c001cb09 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ca5f:	0f b7 f5             	movzx  esi,bp
c001ca62:	6b f6 28             	imul   esi,esi,0x28
c001ca65:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca69:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca70:	50                   	push   eax
c001ca71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca75:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ca79:	8b 16                	mov    edx,DWORD PTR [esi]
c001ca7b:	6b c0 28             	imul   eax,eax,0x28
c001ca7e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ca82:	89 d0                	mov    eax,edx
c001ca84:	31 d2                	xor    edx,edx
c001ca86:	52                   	push   edx
c001ca87:	50                   	push   eax
c001ca88:	53                   	push   ebx
c001ca89:	e8 a8 67 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001ca8e:	83 c4 0c             	add    esp,0xc
c001ca91:	6a 20                	push   0x20
c001ca93:	6a 00                	push   0x0
c001ca95:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ca99:	52                   	push   edx
c001ca9a:	e8 d9 3c fe ff       	call   c0000778 <memset>
c001ca9f:	58                   	pop    eax
c001caa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001caa2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001caa6:	51                   	push   ecx
c001caa7:	8d 54 24 40          	lea    edx,[esp+0x40]
c001caab:	52                   	push   edx
c001caac:	6a 00                	push   0x0
c001caae:	6a 1f                	push   0x1f
c001cab0:	53                   	push   ebx
c001cab1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cab4:	83 c4 18             	add    esp,0x18
c001cab7:	68 1e bd 02 c0       	push   0xc002bd1e
c001cabc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cac0:	52                   	push   edx
c001cac1:	e8 fa 3d fe ff       	call   c00008c0 <strcmp>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	85 c0                	test   eax,eax
c001cacb:	75 0f                	jne    c001cadc <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cacd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cad0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cad4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cad8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cadc:	50                   	push   eax
c001cadd:	50                   	push   eax
c001cade:	68 26 bd 02 c0       	push   0xc002bd26
c001cae3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cae7:	50                   	push   eax
c001cae8:	e8 d3 3d fe ff       	call   c00008c0 <strcmp>
c001caed:	83 c4 10             	add    esp,0x10
c001caf0:	85 c0                	test   eax,eax
c001caf2:	75 0f                	jne    c001cb03 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001caf4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caf7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cafb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb03:	45                   	inc    ebp
c001cb04:	e9 4c ff ff ff       	jmp    c001ca55 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cb09:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb0e:	75 10                	jne    c001cb20 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cb10:	83 ec 0c             	sub    esp,0xc
c001cb13:	68 2e bd 02 c0       	push   0xc002bd2e
c001cb18:	e8 1a d7 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001cb1d:	83 c4 10             	add    esp,0x10
c001cb20:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cb25:	75 10                	jne    c001cb37 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cb27:	83 ec 0c             	sub    esp,0xc
c001cb2a:	68 2e bd 02 c0       	push   0xc002bd2e
c001cb2f:	e8 03 d7 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001cb34:	83 c4 10             	add    esp,0x10
c001cb37:	31 d2                	xor    edx,edx
c001cb39:	50                   	push   eax
c001cb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3e:	52                   	push   edx
c001cb3f:	50                   	push   eax
c001cb40:	53                   	push   ebx
c001cb41:	e8 f0 66 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001cb46:	5a                   	pop    edx
c001cb47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb4b:	e8 f0 2c ff ff       	call   c000f840 <malloc>
c001cb50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb58:	31 c9                	xor    ecx,ecx
c001cb5a:	5e                   	pop    esi
c001cb5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb5d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cb61:	55                   	push   ebp
c001cb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb66:	51                   	push   ecx
c001cb67:	52                   	push   edx
c001cb68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb6c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cb70:	53                   	push   ebx
c001cb71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb74:	83 c4 14             	add    esp,0x14
c001cb77:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb7b:	e8 c0 2c ff ff       	call   c000f840 <malloc>
c001cb80:	89 c6                	mov    esi,eax
c001cb82:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb87:	56                   	push   esi
c001cb88:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb8c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cb90:	51                   	push   ecx
c001cb91:	52                   	push   edx
c001cb92:	53                   	push   ebx
c001cb93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb9a:	8b 15 e0 15 03 c0    	mov    edx,DWORD PTR ds:0xc00315e0
c001cba0:	83 c4 1c             	add    esp,0x1c
c001cba3:	c1 e8 04             	shr    eax,0x4
c001cba6:	89 04 95 60 14 03 c0 	mov    DWORD PTR [edx*4-0x3ffceba0],eax
c001cbad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbb1:	31 d2                	xor    edx,edx
c001cbb3:	52                   	push   edx
c001cbb4:	50                   	push   eax
c001cbb5:	53                   	push   ebx
c001cbb6:	e8 7b 66 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001cbbb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbbd:	31 d2                	xor    edx,edx
c001cbbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbc2:	56                   	push   esi
c001cbc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbc7:	52                   	push   edx
c001cbc8:	50                   	push   eax
c001cbc9:	53                   	push   ebx
c001cbca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbcd:	83 c4 14             	add    esp,0x14
c001cbd0:	53                   	push   ebx
c001cbd1:	e8 00 66 ff ff       	call   c00131d6 <File::close()>
c001cbd6:	5d                   	pop    ebp
c001cbd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbdb:	e8 70 2c ff ff       	call   c000f850 <free>
c001cbe0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbe3:	e8 68 2c ff ff       	call   c000f850 <free>
c001cbe8:	a1 e0 15 03 c0       	mov    eax,ds:0xc00315e0
c001cbed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cbf1:	8d 50 01             	lea    edx,[eax+0x1]
c001cbf4:	89 0c 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],ecx
c001cbfb:	89 34 85 e0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb20],esi
c001cc02:	89 15 e0 15 03 c0    	mov    DWORD PTR ds:0xc00315e0,edx
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	b0 01                	mov    al,0x1
c001cc0d:	83 c4 5c             	add    esp,0x5c
c001cc10:	5b                   	pop    ebx
c001cc11:	5e                   	pop    esi
c001cc12:	5f                   	pop    edi
c001cc13:	5d                   	pop    ebp
c001cc14:	c3                   	ret    

c001cc15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cc15:	55                   	push   ebp
c001cc16:	57                   	push   edi
c001cc17:	56                   	push   esi
c001cc18:	53                   	push   ebx
c001cc19:	81 ec 68 03 00 00    	sub    esp,0x368
c001cc1f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cc26:	8b 1d 34 16 03 c0    	mov    ebx,DWORD PTR ds:0xc0031634
c001cc2c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cc30:	68 14 01 00 00       	push   0x114
c001cc35:	e8 06 2c ff ff       	call   c000f840 <malloc>
c001cc3a:	83 c4 0c             	add    esp,0xc
c001cc3d:	89 c5                	mov    ebp,eax
c001cc3f:	53                   	push   ebx
c001cc40:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cc47:	50                   	push   eax
c001cc48:	e8 c7 64 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001cc4d:	5e                   	pop    esi
c001cc4e:	5f                   	pop    edi
c001cc4f:	6a 01                	push   0x1
c001cc51:	55                   	push   ebp
c001cc52:	e8 21 65 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	85 c0                	test   eax,eax
c001cc5c:	0f 85 8d 06 00 00    	jne    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc62:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc6a:	83 ec 0c             	sub    esp,0xc
c001cc6d:	6a 34                	push   0x34
c001cc6f:	e8 cc 2b ff ff       	call   c000f840 <malloc>
c001cc74:	5b                   	pop    ebx
c001cc75:	89 c7                	mov    edi,eax
c001cc77:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc7e:	53                   	push   ebx
c001cc7f:	57                   	push   edi
c001cc80:	6a 00                	push   0x0
c001cc82:	6a 34                	push   0x34
c001cc84:	55                   	push   ebp
c001cc85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc88:	83 c4 20             	add    esp,0x20
c001cc8b:	85 c0                	test   eax,eax
c001cc8d:	0f 85 5c 06 00 00    	jne    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc93:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc99:	0f 85 50 06 00 00    	jne    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc9f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cca2:	85 c0                	test   eax,eax
c001cca4:	0f 84 45 06 00 00    	je     c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ccaa:	31 d2                	xor    edx,edx
c001ccac:	51                   	push   ecx
c001ccad:	52                   	push   edx
c001ccae:	50                   	push   eax
c001ccaf:	55                   	push   ebp
c001ccb0:	e8 81 65 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001ccb5:	83 c4 10             	add    esp,0x10
c001ccb8:	85 c0                	test   eax,eax
c001ccba:	0f 85 2f 06 00 00    	jne    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ccc6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ccce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccd2:	0f af c2             	imul   eax,edx
c001ccd5:	50                   	push   eax
c001ccd6:	e8 65 2b ff ff       	call   c000f840 <malloc>
c001ccdb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cce2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cce5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cce9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cced:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf1:	0f af c2             	imul   eax,edx
c001ccf4:	99                   	cdq    
c001ccf5:	52                   	push   edx
c001ccf6:	50                   	push   eax
c001ccf7:	55                   	push   ebp
c001ccf8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccfb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ccfe:	83 c4 20             	add    esp,0x20
c001cd01:	85 c0                	test   eax,eax
c001cd03:	0f 84 e6 05 00 00    	je     c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd09:	52                   	push   edx
c001cd0a:	31 d2                	xor    edx,edx
c001cd0c:	52                   	push   edx
c001cd0d:	50                   	push   eax
c001cd0e:	55                   	push   ebp
c001cd0f:	e8 22 65 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001cd14:	83 c4 10             	add    esp,0x10
c001cd17:	85 c0                	test   eax,eax
c001cd19:	0f 85 d0 05 00 00    	jne    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd26:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd2a:	31 f6                	xor    esi,esi
c001cd2c:	0f af c2             	imul   eax,edx
c001cd2f:	50                   	push   eax
c001cd30:	e8 0b 2b ff ff       	call   c000f840 <malloc>
c001cd35:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd43:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd47:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd4b:	0f af c2             	imul   eax,edx
c001cd4e:	99                   	cdq    
c001cd4f:	52                   	push   edx
c001cd50:	50                   	push   eax
c001cd51:	55                   	push   ebp
c001cd52:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd55:	83 c4 20             	add    esp,0x20
c001cd58:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cd5c:	0f 86 8a 00 00 00    	jbe    c001cdec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cd62:	0f b7 de             	movzx  ebx,si
c001cd65:	c1 e3 05             	shl    ebx,0x5
c001cd68:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cd6c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cd6f:	75 75                	jne    c001cde6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cd71:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cd74:	31 d2                	xor    edx,edx
c001cd76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cd7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd81:	50                   	push   eax
c001cd82:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cd85:	52                   	push   edx
c001cd86:	50                   	push   eax
c001cd87:	55                   	push   ebp
c001cd88:	e8 a9 64 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	85 c0                	test   eax,eax
c001cd92:	0f 85 57 05 00 00    	jne    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd98:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cd9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cda2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cda6:	31 d2                	xor    edx,edx
c001cda8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdb3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdba:	50                   	push   eax
c001cdbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdc3:	52                   	push   edx
c001cdc4:	50                   	push   eax
c001cdc5:	55                   	push   ebp
c001cdc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdc9:	83 c4 1c             	add    esp,0x1c
c001cdcc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cdcf:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cdd2:	50                   	push   eax
c001cdd3:	6a 00                	push   0x0
c001cdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cddd:	50                   	push   eax
c001cdde:	e8 95 39 fe ff       	call   c0000778 <memset>
c001cde3:	83 c4 10             	add    esp,0x10
c001cde6:	46                   	inc    esi
c001cde7:	e9 6c ff ff ff       	jmp    c001cd58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cdec:	53                   	push   ebx
c001cded:	31 db                	xor    ebx,ebx
c001cdef:	68 00 01 00 00       	push   0x100
c001cdf4:	6a 00                	push   0x0
c001cdf6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cdfa:	50                   	push   eax
c001cdfb:	e8 78 39 fe ff       	call   c0000778 <memset>
c001ce00:	83 c4 0c             	add    esp,0xc
c001ce03:	68 00 01 00 00       	push   0x100
c001ce08:	6a 00                	push   0x0
c001ce0a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ce11:	50                   	push   eax
c001ce12:	e8 61 39 fe ff       	call   c0000778 <memset>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce22:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce2a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ce32:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce3a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ce42:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ce46:	0f 86 30 01 00 00    	jbe    c001cf7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ce4c:	0f b7 f3             	movzx  esi,bx
c001ce4f:	6b f6 28             	imul   esi,esi,0x28
c001ce52:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce5d:	52                   	push   edx
c001ce5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce62:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ce66:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce68:	6b d2 28             	imul   edx,edx,0x28
c001ce6b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ce6f:	31 d2                	xor    edx,edx
c001ce71:	52                   	push   edx
c001ce72:	50                   	push   eax
c001ce73:	55                   	push   ebp
c001ce74:	e8 bd 63 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001ce79:	83 c4 0c             	add    esp,0xc
c001ce7c:	6a 20                	push   0x20
c001ce7e:	6a 00                	push   0x0
c001ce80:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ce87:	51                   	push   ecx
c001ce88:	e8 eb 38 fe ff       	call   c0000778 <memset>
c001ce8d:	59                   	pop    ecx
c001ce8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce91:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ce95:	52                   	push   edx
c001ce96:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ce9d:	51                   	push   ecx
c001ce9e:	6a 00                	push   0x0
c001cea0:	6a 1f                	push   0x1f
c001cea2:	55                   	push   ebp
c001cea3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cea6:	83 c4 1c             	add    esp,0x1c
c001cea9:	6a 09                	push   0x9
c001ceab:	68 48 bd 02 c0       	push   0xc002bd48
c001ceb0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ceb7:	51                   	push   ecx
c001ceb8:	e8 83 37 fe ff       	call   c0000640 <memcmp>
c001cebd:	83 c4 10             	add    esp,0x10
c001cec0:	85 c0                	test   eax,eax
c001cec2:	75 21                	jne    c001cee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cecc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ced0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ced4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ced7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cede:	89 d0                	mov    eax,edx
c001cee0:	40                   	inc    eax
c001cee1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cee5:	50                   	push   eax
c001cee6:	6a 09                	push   0x9
c001cee8:	68 52 bd 02 c0       	push   0xc002bd52
c001ceed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cef4:	50                   	push   eax
c001cef5:	e8 46 37 fe ff       	call   c0000640 <memcmp>
c001cefa:	83 c4 10             	add    esp,0x10
c001cefd:	85 c0                	test   eax,eax
c001ceff:	75 21                	jne    c001cf22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cf01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf09:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cf0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf14:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf1b:	89 d0                	mov    eax,edx
c001cf1d:	40                   	inc    eax
c001cf1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf22:	50                   	push   eax
c001cf23:	50                   	push   eax
c001cf24:	68 1e bd 02 c0       	push   0xc002bd1e
c001cf29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf30:	50                   	push   eax
c001cf31:	e8 8a 39 fe ff       	call   c00008c0 <strcmp>
c001cf36:	83 c4 10             	add    esp,0x10
c001cf39:	85 c0                	test   eax,eax
c001cf3b:	75 0f                	jne    c001cf4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cf3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf4c:	50                   	push   eax
c001cf4d:	50                   	push   eax
c001cf4e:	68 26 bd 02 c0       	push   0xc002bd26
c001cf53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf5a:	50                   	push   eax
c001cf5b:	e8 60 39 fe ff       	call   c00008c0 <strcmp>
c001cf60:	83 c4 10             	add    esp,0x10
c001cf63:	85 c0                	test   eax,eax
c001cf65:	75 0f                	jne    c001cf76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cf67:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cf76:	43                   	inc    ebx
c001cf77:	e9 c6 fe ff ff       	jmp    c001ce42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cf7c:	31 d2                	xor    edx,edx
c001cf7e:	50                   	push   eax
c001cf7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf83:	52                   	push   edx
c001cf84:	50                   	push   eax
c001cf85:	55                   	push   ebp
c001cf86:	e8 ab 62 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001cf8b:	58                   	pop    eax
c001cf8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf90:	e8 ab 28 ff ff       	call   c000f840 <malloc>
c001cf95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf98:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cf9c:	31 d2                	xor    edx,edx
c001cf9e:	58                   	pop    eax
c001cf9f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfa3:	53                   	push   ebx
c001cfa4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cfa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfac:	52                   	push   edx
c001cfad:	50                   	push   eax
c001cfae:	55                   	push   ebp
c001cfaf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfb2:	83 c4 14             	add    esp,0x14
c001cfb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfb9:	e8 82 28 ff ff       	call   c000f840 <malloc>
c001cfbe:	31 d2                	xor    edx,edx
c001cfc0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cfc4:	83 c4 0c             	add    esp,0xc
c001cfc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfcb:	52                   	push   edx
c001cfcc:	50                   	push   eax
c001cfcd:	55                   	push   ebp
c001cfce:	e8 63 62 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001cfd3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfd6:	31 d2                	xor    edx,edx
c001cfd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfdb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cfdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cfe3:	52                   	push   edx
c001cfe4:	50                   	push   eax
c001cfe5:	55                   	push   ebp
c001cfe6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfe9:	83 c4 20             	add    esp,0x20
c001cfec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cff4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cff8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cffc:	0f 84 f1 02 00 00    	je     c001d2f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d002:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d009:	31 d2                	xor    edx,edx
c001d00b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d00f:	c1 e8 03             	shr    eax,0x3
c001d012:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d016:	51                   	push   ecx
c001d017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d01b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d01f:	52                   	push   edx
c001d020:	50                   	push   eax
c001d021:	55                   	push   ebp
c001d022:	e8 0f 62 ff ff       	call   c0013236 <File::seek(unsigned long long)>
c001d027:	5b                   	pop    ebx
c001d028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d02c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d033:	e8 08 28 ff ff       	call   c000f840 <malloc>
c001d038:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d03b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d03f:	31 d2                	xor    edx,edx
c001d041:	5e                   	pop    esi
c001d042:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d046:	50                   	push   eax
c001d047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d04b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d04f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d056:	52                   	push   edx
c001d057:	50                   	push   eax
c001d058:	55                   	push   ebp
c001d059:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d05c:	83 c4 20             	add    esp,0x20
c001d05f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d067:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d06b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d06f:	0f 8d 62 02 00 00    	jge    c001d2d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d075:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d07d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d082:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d085:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d08d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d091:	89 d8                	mov    eax,ebx
c001d093:	c1 e8 08             	shr    eax,0x8
c001d096:	89 c6                	mov    esi,eax
c001d098:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d09c:	c1 e6 04             	shl    esi,0x4
c001d09f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d0a3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d0a6:	85 d2                	test   edx,edx
c001d0a8:	0f 85 bf 00 00 00    	jne    c001d16d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0ae:	83 ec 0c             	sub    esp,0xc
c001d0b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0b5:	03 06                	add    eax,DWORD PTR [esi]
c001d0b7:	50                   	push   eax
c001d0b8:	e8 4b f8 ff ff       	call   c001c908 <Thr::getAddressOfKernelSymbol(char const*)>
c001d0bd:	83 c4 10             	add    esp,0x10
c001d0c0:	89 c2                	mov    edx,eax
c001d0c2:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d0c7:	85 c0                	test   eax,eax
c001d0c9:	0f 85 9e 00 00 00    	jne    c001d16d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0cf:	83 ec 0c             	sub    esp,0xc
c001d0d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0d6:	03 06                	add    eax,DWORD PTR [esi]
c001d0d8:	50                   	push   eax
c001d0d9:	e8 17 14 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	89 c2                	mov    edx,eax
c001d0e3:	85 c0                	test   eax,eax
c001d0e5:	0f 85 82 00 00 00    	jne    c001d16d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0eb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d0ef:	50                   	push   eax
c001d0f0:	50                   	push   eax
c001d0f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f5:	03 06                	add    eax,DWORD PTR [esi]
c001d0f7:	50                   	push   eax
c001d0f8:	68 5c bd 02 c0       	push   0xc002bd5c
c001d0fd:	e8 ba 5a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001d102:	58                   	pop    eax
c001d103:	5a                   	pop    edx
c001d104:	68 76 bd 02 c0       	push   0xc002bd76
c001d109:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d110:	50                   	push   eax
c001d111:	e8 1e 37 fe ff       	call   c0000834 <strcpy>
c001d116:	59                   	pop    ecx
c001d117:	58                   	pop    eax
c001d118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d11c:	03 06                	add    eax,DWORD PTR [esi]
c001d11e:	50                   	push   eax
c001d11f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d126:	50                   	push   eax
c001d127:	e8 48 38 fe ff       	call   c0000974 <strcat>
c001d12c:	58                   	pop    eax
c001d12d:	5a                   	pop    edx
c001d12e:	68 0c be 02 c0       	push   0xc002be0c
c001d133:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d13a:	50                   	push   eax
c001d13b:	e8 34 38 fe ff       	call   c0000974 <strcat>
c001d140:	83 c4 10             	add    esp,0x10
c001d143:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d148:	0f 84 43 01 00 00    	je     c001d291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d14e:	83 ec 0c             	sub    esp,0xc
c001d151:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d158:	50                   	push   eax
c001d159:	e8 d9 d0 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d15e:	83 c4 10             	add    esp,0x10
c001d161:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d165:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d169:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d16d:	80 fb 01             	cmp    bl,0x1
c001d170:	75 7d                	jne    c001d1ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d172:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d179:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d17d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d181:	01 ce                	add    esi,ecx
c001d183:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d189:	0f 94 c0             	sete   al
c001d18c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d192:	0f 94 c3             	sete   bl
c001d195:	09 c3                	or     ebx,eax
c001d197:	8b 06                	mov    eax,DWORD PTR [esi]
c001d199:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d19e:	74 36                	je     c001d1d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d1a0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d1a3:	84 db                	test   bl,bl
c001d1a5:	75 0a                	jne    c001d1b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d1a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1ab:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1af:	76 37                	jbe    c001d1e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1b1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d1b5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1ba:	0f 84 d1 00 00 00    	je     c001d291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d1c0:	83 ec 0c             	sub    esp,0xc
c001d1c3:	68 8d bd 02 c0       	push   0xc002bd8d
c001d1c8:	e8 6a d0 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d1cd:	83 c4 10             	add    esp,0x10
c001d1d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d1d4:	eb 12                	jmp    c001d1e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1d6:	01 c1                	add    ecx,eax
c001d1d8:	84 db                	test   bl,bl
c001d1da:	75 0c                	jne    c001d1e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1dc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1e0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1e4:	77 02                	ja     c001d1e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1e6:	01 d1                	add    ecx,edx
c001d1e8:	89 0e                	mov    DWORD PTR [esi],ecx
c001d1ea:	e9 df 00 00 00       	jmp    c001d2ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d1ef:	80 fb 02             	cmp    bl,0x2
c001d1f2:	75 71                	jne    c001d265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d1f4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d1fb:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d1ff:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d203:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d209:	74 15                	je     c001d220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d20b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d211:	74 0d                	je     c001d220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d213:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d217:	83 e8 04             	sub    eax,0x4
c001d21a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d21e:	76 1f                	jbe    c001d23f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d220:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d224:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d229:	74 66                	je     c001d291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d22b:	83 ec 0c             	sub    esp,0xc
c001d22e:	68 a9 bd 02 c0       	push   0xc002bda9
c001d233:	e8 ff cf ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d23f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d241:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d246:	74 13                	je     c001d25b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d248:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d24c:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d253:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d257:	01 c8                	add    eax,ecx
c001d259:	eb 04                	jmp    c001d25f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d25b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d25f:	01 c2                	add    edx,eax
c001d261:	89 16                	mov    DWORD PTR [esi],edx
c001d263:	eb 69                	jmp    c001d2ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d265:	0f b6 db             	movzx  ebx,bl
c001d268:	50                   	push   eax
c001d269:	50                   	push   eax
c001d26a:	53                   	push   ebx
c001d26b:	68 c5 bd 02 c0       	push   0xc002bdc5
c001d270:	e8 47 59 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d27d:	74 12                	je     c001d291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d27f:	83 ec 0c             	sub    esp,0xc
c001d282:	68 d0 bd 02 c0       	push   0xc002bdd0
c001d287:	e8 ab cf ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d28c:	83 c4 10             	add    esp,0x10
c001d28f:	eb 3d                	jmp    c001d2ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d291:	83 ec 0c             	sub    esp,0xc
c001d294:	55                   	push   ebp
c001d295:	e8 3c 5f ff ff       	call   c00131d6 <File::close()>
c001d29a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d29d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2a3:	59                   	pop    ecx
c001d2a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2a8:	e8 a3 25 ff ff       	call   c000f850 <free>
c001d2ad:	5b                   	pop    ebx
c001d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2b2:	e8 99 25 ff ff       	call   c000f850 <free>
c001d2b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2ba:	e8 91 25 ff ff       	call   c000f850 <free>
c001d2bf:	5e                   	pop    esi
c001d2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2c4:	e8 87 25 ff ff       	call   c000f850 <free>
c001d2c9:	83 c4 10             	add    esp,0x10
c001d2cc:	eb 21                	jmp    c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d2ce:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d2d2:	e9 90 fd ff ff       	jmp    c001d067 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d2d7:	83 ec 0c             	sub    esp,0xc
c001d2da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2de:	e8 6d 25 ff ff       	call   c000f850 <free>
c001d2e3:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d2e7:	83 c4 10             	add    esp,0x10
c001d2ea:	e9 05 fd ff ff       	jmp    c001cff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d2ef:	31 c0                	xor    eax,eax
c001d2f1:	eb 33                	jmp    c001d326 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d2f3:	83 ec 0c             	sub    esp,0xc
c001d2f6:	55                   	push   ebp
c001d2f7:	e8 da 5e ff ff       	call   c00131d6 <File::close()>
c001d2fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d302:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d305:	58                   	pop    eax
c001d306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d30a:	e8 41 25 ff ff       	call   c000f850 <free>
c001d30f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d312:	e8 39 25 ff ff       	call   c000f850 <free>
c001d317:	5a                   	pop    edx
c001d318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d31c:	e8 2f 25 ff ff       	call   c000f850 <free>
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	b0 01                	mov    al,0x1
c001d326:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d32c:	5b                   	pop    ebx
c001d32d:	5e                   	pop    esi
c001d32e:	5f                   	pop    edi
c001d32f:	5d                   	pop    ebp
c001d330:	c3                   	ret    

c001d331 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d331:	56                   	push   esi
c001d332:	31 d2                	xor    edx,edx
c001d334:	53                   	push   ebx
c001d335:	8b 1d 40 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e40
c001d33b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d33f:	39 d3                	cmp    ebx,edx
c001d341:	7e 1b                	jle    c001d35e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d343:	8b 04 95 60 10 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcefa0]
c001d34a:	39 c8                	cmp    eax,ecx
c001d34c:	77 0d                	ja     c001d35b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d34e:	8b 34 95 60 0e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf1a0]
c001d355:	01 c6                	add    esi,eax
c001d357:	39 ce                	cmp    esi,ecx
c001d359:	77 05                	ja     c001d360 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d35b:	42                   	inc    edx
c001d35c:	eb e1                	jmp    c001d33f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d35e:	31 c0                	xor    eax,eax
c001d360:	5b                   	pop    ebx
c001d361:	5e                   	pop    esi
c001d362:	c3                   	ret    

c001d363 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d363:	53                   	push   ebx
c001d364:	31 c0                	xor    eax,eax
c001d366:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d36a:	8b 1d 40 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e40
c001d370:	39 c3                	cmp    ebx,eax
c001d372:	7e 22                	jle    c001d396 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d374:	8b 14 85 60 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefa0]
c001d37b:	39 ca                	cmp    edx,ecx
c001d37d:	77 14                	ja     c001d393 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d37f:	03 14 85 60 0e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf1a0]
c001d386:	39 ca                	cmp    edx,ecx
c001d388:	76 09                	jbe    c001d393 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d38a:	8b 04 85 60 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceda0]
c001d391:	eb 05                	jmp    c001d398 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d393:	40                   	inc    eax
c001d394:	eb da                	jmp    c001d370 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d396:	31 c0                	xor    eax,eax
c001d398:	5b                   	pop    ebx
c001d399:	c3                   	ret    

c001d39a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d39a:	53                   	push   ebx
c001d39b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d39f:	53                   	push   ebx
c001d3a0:	e8 8c ff ff ff       	call   c001d331 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d3a5:	5a                   	pop    edx
c001d3a6:	31 d2                	xor    edx,edx
c001d3a8:	85 c0                	test   eax,eax
c001d3aa:	74 04                	je     c001d3b0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d3ac:	89 da                	mov    edx,ebx
c001d3ae:	29 c2                	sub    edx,eax
c001d3b0:	89 d0                	mov    eax,edx
c001d3b2:	5b                   	pop    ebx
c001d3b3:	c3                   	ret    

c001d3b4 <Thr::loadDLL(char const*, bool)>:
c001d3b4:	55                   	push   ebp
c001d3b5:	57                   	push   edi
c001d3b6:	56                   	push   esi
c001d3b7:	53                   	push   ebx
c001d3b8:	81 ec 34 01 00 00    	sub    esp,0x134
c001d3be:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d3c5:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d3cc:	56                   	push   esi
c001d3cd:	68 e8 bd 02 c0       	push   0xc002bde8
c001d3d2:	e8 e5 57 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001d3d7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d3de:	e8 5d 24 ff ff       	call   c000f840 <malloc>
c001d3e3:	83 c4 0c             	add    esp,0xc
c001d3e6:	89 c3                	mov    ebx,eax
c001d3e8:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c001d3ee:	56                   	push   esi
c001d3ef:	50                   	push   eax
c001d3f0:	e8 1f 5d ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	85 db                	test   ebx,ebx
c001d3fa:	75 3c                	jne    c001d438 <Thr::loadDLL(char const*, bool)+0x84>
c001d3fc:	89 e8                	mov    eax,ebp
c001d3fe:	84 c0                	test   al,al
c001d400:	0f 84 d5 01 00 00    	je     c001d5db <Thr::loadDLL(char const*, bool)+0x227>
c001d406:	57                   	push   edi
c001d407:	57                   	push   edi
c001d408:	68 f9 bd 02 c0       	push   0xc002bdf9
c001d40d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d411:	57                   	push   edi
c001d412:	e8 1d 34 fe ff       	call   c0000834 <strcpy>
c001d417:	58                   	pop    eax
c001d418:	5a                   	pop    edx
c001d419:	56                   	push   esi
c001d41a:	57                   	push   edi
c001d41b:	e8 54 35 fe ff       	call   c0000974 <strcat>
c001d420:	59                   	pop    ecx
c001d421:	58                   	pop    eax
c001d422:	68 0c be 02 c0       	push   0xc002be0c
c001d427:	57                   	push   edi
c001d428:	e8 47 35 fe ff       	call   c0000974 <strcat>
c001d42d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d430:	e8 02 ce ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d435:	83 c4 10             	add    esp,0x10
c001d438:	51                   	push   ecx
c001d439:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d43d:	50                   	push   eax
c001d43e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d442:	50                   	push   eax
c001d443:	53                   	push   ebx
c001d444:	e8 db 5f ff ff       	call   c0013424 <File::stat(unsigned long long*, bool*)>
c001d449:	83 c4 10             	add    esp,0x10
c001d44c:	85 db                	test   ebx,ebx
c001d44e:	74 0c                	je     c001d45c <Thr::loadDLL(char const*, bool)+0xa8>
c001d450:	83 ec 0c             	sub    esp,0xc
c001d453:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d455:	53                   	push   ebx
c001d456:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d459:	83 c4 10             	add    esp,0x10
c001d45c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d461:	75 0a                	jne    c001d46d <Thr::loadDLL(char const*, bool)+0xb9>
c001d463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d467:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d46b:	75 3c                	jne    c001d4a9 <Thr::loadDLL(char const*, bool)+0xf5>
c001d46d:	89 e8                	mov    eax,ebp
c001d46f:	84 c0                	test   al,al
c001d471:	0f 84 4c 01 00 00    	je     c001d5c3 <Thr::loadDLL(char const*, bool)+0x20f>
c001d477:	51                   	push   ecx
c001d478:	51                   	push   ecx
c001d479:	68 f9 bd 02 c0       	push   0xc002bdf9
c001d47e:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d482:	53                   	push   ebx
c001d483:	e8 ac 33 fe ff       	call   c0000834 <strcpy>
c001d488:	5f                   	pop    edi
c001d489:	58                   	pop    eax
c001d48a:	56                   	push   esi
c001d48b:	53                   	push   ebx
c001d48c:	e8 e3 34 fe ff       	call   c0000974 <strcat>
c001d491:	58                   	pop    eax
c001d492:	5a                   	pop    edx
c001d493:	68 0c be 02 c0       	push   0xc002be0c
c001d498:	53                   	push   ebx
c001d499:	e8 d6 34 fe ff       	call   c0000974 <strcat>
c001d49e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4a1:	e8 91 cd ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d4a6:	83 c4 10             	add    esp,0x10
c001d4a9:	e8 03 48 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c001d4ae:	51                   	push   ecx
c001d4af:	6a 03                	push   0x3
c001d4b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d4b5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d4b9:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d4bf:	83 d3 00             	adc    ebx,0x0
c001d4c2:	89 ca                	mov    edx,ecx
c001d4c4:	89 d1                	mov    ecx,edx
c001d4c6:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d4ca:	51                   	push   ecx
c001d4cb:	50                   	push   eax
c001d4cc:	e8 1b 4e ff ff       	call   c00122ec <VAS::allocatePages(int, int)>
c001d4d1:	5f                   	pop    edi
c001d4d2:	89 c3                	mov    ebx,eax
c001d4d4:	58                   	pop    eax
c001d4d5:	53                   	push   ebx
c001d4d6:	68 0e be 02 c0       	push   0xc002be0e
c001d4db:	e8 dc 56 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001d4e0:	89 34 24             	mov    DWORD PTR [esp],esi
c001d4e3:	e8 ac 32 fe ff       	call   c0000794 <strlen>
c001d4e8:	8b 3d 40 0e 03 c0    	mov    edi,DWORD PTR ds:0xc0030e40
c001d4ee:	40                   	inc    eax
c001d4ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4f2:	e8 49 23 ff ff       	call   c000f840 <malloc>
c001d4f7:	89 04 bd 60 12 03 c0 	mov    DWORD PTR [edi*4-0x3ffceda0],eax
c001d4fe:	58                   	pop    eax
c001d4ff:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001d504:	5a                   	pop    edx
c001d505:	56                   	push   esi
c001d506:	ff 34 85 60 12 03 c0 	push   DWORD PTR [eax*4-0x3ffceda0]
c001d50d:	e8 22 33 fe ff       	call   c0000834 <strcpy>
c001d512:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001d517:	8d 50 01             	lea    edx,[eax+0x1]
c001d51a:	89 1c 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],ebx
c001d521:	89 15 40 0e 03 c0    	mov    DWORD PTR ds:0xc0030e40,edx
c001d527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d52b:	83 c4 0c             	add    esp,0xc
c001d52e:	89 14 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],edx
c001d535:	6a 01                	push   0x1
c001d537:	53                   	push   ebx
c001d538:	56                   	push   esi
c001d539:	e8 d7 f6 ff ff       	call   c001cc15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	89 c7                	mov    edi,eax
c001d543:	84 c0                	test   al,al
c001d545:	0f 85 8c 00 00 00    	jne    c001d5d7 <Thr::loadDLL(char const*, bool)+0x223>
c001d54b:	89 e8                	mov    eax,ebp
c001d54d:	84 c0                	test   al,al
c001d54f:	74 76                	je     c001d5c7 <Thr::loadDLL(char const*, bool)+0x213>
c001d551:	83 ec 0c             	sub    esp,0xc
c001d554:	68 1b be 02 c0       	push   0xc002be1b
c001d559:	e8 d9 cc ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d55e:	83 c4 10             	add    esp,0x10
c001d561:	eb 64                	jmp    c001d5c7 <Thr::loadDLL(char const*, bool)+0x213>
c001d563:	e8 49 47 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c001d568:	89 f5                	mov    ebp,esi
c001d56a:	c1 e5 0c             	shl    ebp,0xc
c001d56d:	52                   	push   edx
c001d56e:	01 dd                	add    ebp,ebx
c001d570:	52                   	push   edx
c001d571:	55                   	push   ebp
c001d572:	50                   	push   eax
c001d573:	e8 ee 48 ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d57e:	75 0c                	jne    c001d58c <Thr::loadDLL(char const*, bool)+0x1d8>
c001d580:	83 ec 0c             	sub    esp,0xc
c001d583:	55                   	push   ebp
c001d584:	e8 cc 28 ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c001d589:	83 c4 10             	add    esp,0x10
c001d58c:	46                   	inc    esi
c001d58d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d591:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d595:	05 ff 0f 00 00       	add    eax,0xfff
c001d59a:	83 d2 00             	adc    edx,0x0
c001d59d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d5a1:	c1 ea 0c             	shr    edx,0xc
c001d5a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d5a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d5ac:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d5b0:	ba 00 00 00 00       	mov    edx,0x0
c001d5b5:	89 d0                	mov    eax,edx
c001d5b7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d5bb:	72 a6                	jb     c001d563 <Thr::loadDLL(char const*, bool)+0x1af>
c001d5bd:	89 f8                	mov    eax,edi
c001d5bf:	84 c0                	test   al,al
c001d5c1:	75 18                	jne    c001d5db <Thr::loadDLL(char const*, bool)+0x227>
c001d5c3:	31 db                	xor    ebx,ebx
c001d5c5:	eb 14                	jmp    c001d5db <Thr::loadDLL(char const*, bool)+0x227>
c001d5c7:	83 ec 0c             	sub    esp,0xc
c001d5ca:	68 3a be 02 c0       	push   0xc002be3a
c001d5cf:	e8 63 cc ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d5d4:	83 c4 10             	add    esp,0x10
c001d5d7:	31 f6                	xor    esi,esi
c001d5d9:	eb b2                	jmp    c001d58d <Thr::loadDLL(char const*, bool)+0x1d9>
c001d5db:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d5e1:	89 d8                	mov    eax,ebx
c001d5e3:	5b                   	pop    ebx
c001d5e4:	5e                   	pop    esi
c001d5e5:	5f                   	pop    edi
c001d5e6:	5d                   	pop    ebp
c001d5e7:	c3                   	ret    

c001d5e8 <Thr::executeDLL(unsigned long, void*)>:
c001d5e8:	56                   	push   esi
c001d5e9:	53                   	push   ebx
c001d5ea:	52                   	push   edx
c001d5eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d5f3:	85 db                	test   ebx,ebx
c001d5f5:	75 10                	jne    c001d607 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d5f7:	83 ec 0c             	sub    esp,0xc
c001d5fa:	68 56 be 02 c0       	push   0xc002be56
c001d5ff:	e8 33 cc ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001d604:	83 c4 10             	add    esp,0x10
c001d607:	50                   	push   eax
c001d608:	50                   	push   eax
c001d609:	53                   	push   ebx
c001d60a:	68 80 be 02 c0       	push   0xc002be80
c001d60f:	e8 a8 55 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001d614:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d618:	89 d8                	mov    eax,ebx
c001d61a:	83 c4 14             	add    esp,0x14
c001d61d:	5b                   	pop    ebx
c001d61e:	5e                   	pop    esi
c001d61f:	ff e0                	jmp    eax
c001d621:	90                   	nop

c001d622 <changeTSS>:
c001d622:	83 ec 14             	sub    esp,0x14
c001d625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d62a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d62d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d632:	c1 e2 15             	shl    edx,0x15
c001d635:	29 d0                	sub    eax,edx
c001d637:	50                   	push   eax
c001d638:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001d63d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d643:	05 7c 11 00 00       	add    eax,0x117c
c001d648:	50                   	push   eax
c001d649:	e8 12 3e ff ff       	call   c0011460 <TSS::setESP(unsigned long)>
c001d64e:	83 c4 1c             	add    esp,0x1c
c001d651:	c3                   	ret    

c001d652 <Process::addArgs(char**)>:
c001d652:	57                   	push   edi
c001d653:	56                   	push   esi
c001d654:	53                   	push   ebx
c001d655:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d659:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d65d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d667:	85 ff                	test   edi,edi
c001d669:	74 3d                	je     c001d6a8 <Process::addArgs(char**)+0x56>
c001d66b:	8b 07                	mov    eax,DWORD PTR [edi]
c001d66d:	85 c0                	test   eax,eax
c001d66f:	74 37                	je     c001d6a8 <Process::addArgs(char**)+0x56>
c001d671:	31 db                	xor    ebx,ebx
c001d673:	83 ec 0c             	sub    esp,0xc
c001d676:	50                   	push   eax
c001d677:	e8 18 31 fe ff       	call   c0000794 <strlen>
c001d67c:	40                   	inc    eax
c001d67d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d680:	e8 bb 21 ff ff       	call   c000f840 <malloc>
c001d685:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d68c:	5a                   	pop    edx
c001d68d:	59                   	pop    ecx
c001d68e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d691:	43                   	inc    ebx
c001d692:	50                   	push   eax
c001d693:	e8 9c 31 fe ff       	call   c0000834 <strcpy>
c001d698:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d6a4:	85 c0                	test   eax,eax
c001d6a6:	75 cb                	jne    c001d673 <Process::addArgs(char**)+0x21>
c001d6a8:	5b                   	pop    ebx
c001d6a9:	5e                   	pop    esi
c001d6aa:	5f                   	pop    edi
c001d6ab:	c3                   	ret    

c001d6ac <Process::Process(char const*, Process*, char**)>:
c001d6ac:	56                   	push   esi
c001d6ad:	53                   	push   ebx
c001d6ae:	83 ec 14             	sub    esp,0x14
c001d6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b5:	05 0c 02 00 00       	add    eax,0x20c
c001d6ba:	bb 07 00 00 00       	mov    ebx,0x7
c001d6bf:	89 c6                	mov    esi,eax
c001d6c1:	85 db                	test   ebx,ebx
c001d6c3:	78 12                	js     c001d6d7 <Process::Process(char const*, Process*, char**)+0x2b>
c001d6c5:	83 ec 0c             	sub    esp,0xc
c001d6c8:	56                   	push   esi
c001d6c9:	e8 24 b2 00 00       	call   c00288f2 <ThreadControlBlock::ThreadControlBlock()>
c001d6ce:	83 c4 10             	add    esp,0x10
c001d6d1:	83 c6 63             	add    esi,0x63
c001d6d4:	4b                   	dec    ebx
c001d6d5:	eb ea                	jmp    c001d6c1 <Process::Process(char const*, Process*, char**)+0x15>
c001d6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6db:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d6e2:	83 ec 0c             	sub    esp,0xc
c001d6e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6e9:	e8 9a c9 ff ff       	call   c001a088 <Krnl::newProcessEnv(Process*)>
c001d6ee:	83 c4 10             	add    esp,0x10
c001d6f1:	89 c2                	mov    edx,eax
c001d6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6f7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d701:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d70a:	a1 50 d6 02 c0       	mov    eax,ds:0xc002d650
c001d70f:	8d 50 01             	lea    edx,[eax+0x1]
c001d712:	89 15 50 d6 02 c0    	mov    DWORD PTR ds:0xc002d650,edx
c001d718:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d71c:	89 02                	mov    DWORD PTR [edx],eax
c001d71e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d726:	83 ec 0c             	sub    esp,0xc
c001d729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d72d:	e8 0e 21 ff ff       	call   c000f840 <malloc>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	89 c3                	mov    ebx,eax
c001d737:	83 ec 08             	sub    esp,0x8
c001d73a:	6a 00                	push   0x0
c001d73c:	53                   	push   ebx
c001d73d:	e8 52 4f ff ff       	call   c0012694 <VAS::VAS(bool)>
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d749:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d753:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d761:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d765:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d76b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d775:	85 c0                	test   eax,eax
c001d777:	74 42                	je     c001d7bb <Process::Process(char const*, Process*, char**)+0x10f>
c001d779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d77d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d783:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d78d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d797:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d79d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7a7:	05 0c 01 00 00       	add    eax,0x10c
c001d7ac:	83 ec 08             	sub    esp,0x8
c001d7af:	52                   	push   edx
c001d7b0:	50                   	push   eax
c001d7b1:	e8 7e 30 fe ff       	call   c0000834 <strcpy>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	eb 63                	jmp    c001d81e <Process::Process(char const*, Process*, char**)+0x172>
c001d7bb:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d7c3:	83 ec 0c             	sub    esp,0xc
c001d7c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7ca:	e8 71 20 ff ff       	call   c000f840 <malloc>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	89 c3                	mov    ebx,eax
c001d7d4:	83 ec 08             	sub    esp,0x8
c001d7d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7db:	53                   	push   ebx
c001d7dc:	e8 7d 39 ff ff       	call   c001115e <VgaText::VgaText(char const*)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7e8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7f8:	83 ec 0c             	sub    esp,0xc
c001d7fb:	50                   	push   eax
c001d7fc:	e8 50 2d ff ff       	call   c0010551 <addToTerminalCycle(VgaText*)>
c001d801:	83 c4 10             	add    esp,0x10
c001d804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d808:	05 0c 01 00 00       	add    eax,0x10c
c001d80d:	83 ec 08             	sub    esp,0x8
c001d810:	68 9f be 02 c0       	push   0xc002be9f
c001d815:	50                   	push   eax
c001d816:	e8 19 30 fe ff       	call   c0000834 <strcpy>
c001d81b:	83 c4 10             	add    esp,0x10
c001d81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d822:	83 c0 0c             	add    eax,0xc
c001d825:	83 ec 08             	sub    esp,0x8
c001d828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d82c:	50                   	push   eax
c001d82d:	e8 02 30 fe ff       	call   c0000834 <strcpy>
c001d832:	83 c4 10             	add    esp,0x10
c001d835:	83 ec 08             	sub    esp,0x8
c001d838:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d83c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d840:	e8 0d fe ff ff       	call   c001d652 <Process::addArgs(char**)>
c001d845:	83 c4 10             	add    esp,0x10
c001d848:	83 ec 08             	sub    esp,0x8
c001d84b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d84f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d853:	e8 87 ee ff ff       	call   c001c6df <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d858:	83 c4 10             	add    esp,0x10
c001d85b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d85f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d863:	83 f0 01             	xor    eax,0x1
c001d866:	88 c2                	mov    dl,al
c001d868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d86c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d872:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d877:	83 ec 08             	sub    esp,0x8
c001d87a:	50                   	push   eax
c001d87b:	68 9c bf 02 c0       	push   0xc002bf9c
c001d880:	e8 37 53 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001d885:	83 c4 10             	add    esp,0x10
c001d888:	90                   	nop
c001d889:	83 c4 14             	add    esp,0x14
c001d88c:	5b                   	pop    ebx
c001d88d:	5e                   	pop    esi
c001d88e:	c3                   	ret    
c001d88f:	90                   	nop

c001d890 <Process::Process(bool, char const*, Process*, char**)>:
c001d890:	56                   	push   esi
c001d891:	53                   	push   ebx
c001d892:	83 ec 24             	sub    esp,0x24
c001d895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d899:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d89d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8a1:	05 0c 02 00 00       	add    eax,0x20c
c001d8a6:	bb 07 00 00 00       	mov    ebx,0x7
c001d8ab:	89 c6                	mov    esi,eax
c001d8ad:	85 db                	test   ebx,ebx
c001d8af:	78 12                	js     c001d8c3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d8b1:	83 ec 0c             	sub    esp,0xc
c001d8b4:	56                   	push   esi
c001d8b5:	e8 38 b0 00 00       	call   c00288f2 <ThreadControlBlock::ThreadControlBlock()>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	83 c6 63             	add    esi,0x63
c001d8c0:	4b                   	dec    ebx
c001d8c1:	eb ea                	jmp    c001d8ad <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d8c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8c7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d8ce:	83 ec 0c             	sub    esp,0xc
c001d8d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8d5:	e8 ae c7 ff ff       	call   c001a088 <Krnl::newProcessEnv(Process*)>
c001d8da:	83 c4 10             	add    esp,0x10
c001d8dd:	89 c2                	mov    edx,eax
c001d8df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8e3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d8e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8ed:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d8f6:	a1 50 d6 02 c0       	mov    eax,ds:0xc002d650
c001d8fb:	8d 50 01             	lea    edx,[eax+0x1]
c001d8fe:	89 15 50 d6 02 c0    	mov    DWORD PTR ds:0xc002d650,edx
c001d904:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d908:	89 02                	mov    DWORD PTR [edx],eax
c001d90a:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d912:	83 ec 0c             	sub    esp,0xc
c001d915:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d919:	e8 22 1f ff ff       	call   c000f840 <malloc>
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	89 c3                	mov    ebx,eax
c001d923:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d928:	83 ec 08             	sub    esp,0x8
c001d92b:	50                   	push   eax
c001d92c:	53                   	push   ebx
c001d92d:	e8 62 4d ff ff       	call   c0012694 <VAS::VAS(bool)>
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d939:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d93f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d943:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d94d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d951:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d955:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d95b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d95f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d965:	85 c0                	test   eax,eax
c001d967:	74 42                	je     c001d9ab <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d96d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d973:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d97d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d987:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d98d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d997:	05 0c 01 00 00       	add    eax,0x10c
c001d99c:	83 ec 08             	sub    esp,0x8
c001d99f:	52                   	push   edx
c001d9a0:	50                   	push   eax
c001d9a1:	e8 8e 2e fe ff       	call   c0000834 <strcpy>
c001d9a6:	83 c4 10             	add    esp,0x10
c001d9a9:	eb 63                	jmp    c001da0e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d9ab:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d9b3:	83 ec 0c             	sub    esp,0xc
c001d9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d9ba:	e8 81 1e ff ff       	call   c000f840 <malloc>
c001d9bf:	83 c4 10             	add    esp,0x10
c001d9c2:	89 c3                	mov    ebx,eax
c001d9c4:	83 ec 08             	sub    esp,0x8
c001d9c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d9cb:	53                   	push   ebx
c001d9cc:	e8 8d 37 ff ff       	call   c001115e <VgaText::VgaText(char const*)>
c001d9d1:	83 c4 10             	add    esp,0x10
c001d9d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9d8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d9de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9e2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d9e8:	83 ec 0c             	sub    esp,0xc
c001d9eb:	50                   	push   eax
c001d9ec:	e8 60 2b ff ff       	call   c0010551 <addToTerminalCycle(VgaText*)>
c001d9f1:	83 c4 10             	add    esp,0x10
c001d9f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9f8:	05 0c 01 00 00       	add    eax,0x10c
c001d9fd:	83 ec 08             	sub    esp,0x8
c001da00:	68 9f be 02 c0       	push   0xc002be9f
c001da05:	50                   	push   eax
c001da06:	e8 29 2e fe ff       	call   c0000834 <strcpy>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da12:	83 c0 0c             	add    eax,0xc
c001da15:	83 ec 08             	sub    esp,0x8
c001da18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001da1c:	50                   	push   eax
c001da1d:	e8 12 2e fe ff       	call   c0000834 <strcpy>
c001da22:	83 c4 10             	add    esp,0x10
c001da25:	83 ec 08             	sub    esp,0x8
c001da28:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001da2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da30:	e8 1d fc ff ff       	call   c001d652 <Process::addArgs(char**)>
c001da35:	83 c4 10             	add    esp,0x10
c001da38:	90                   	nop
c001da39:	83 c4 24             	add    esp,0x24
c001da3c:	5b                   	pop    ebx
c001da3d:	5e                   	pop    esi
c001da3e:	c3                   	ret    

c001da3f <disableIRQs()>:
c001da3f:	fa                   	cli    
c001da40:	ff 05 0c 16 03 c0    	inc    DWORD PTR ds:0xc003160c
c001da46:	c3                   	ret    

c001da47 <getIRQNestingLevel()>:
c001da47:	a1 0c 16 03 c0       	mov    eax,ds:0xc003160c
c001da4c:	c3                   	ret    

c001da4d <enableIRQs()>:
c001da4d:	a1 0c 16 03 c0       	mov    eax,ds:0xc003160c
c001da52:	48                   	dec    eax
c001da53:	a3 0c 16 03 c0       	mov    ds:0xc003160c,eax
c001da58:	75 01                	jne    c001da5b <enableIRQs()+0xe>
c001da5a:	fb                   	sti    
c001da5b:	c3                   	ret    

c001da5c <lockScheduler()>:
c001da5c:	eb e1                	jmp    c001da3f <disableIRQs()>

c001da5e <unlockScheduler()>:
c001da5e:	eb ed                	jmp    c001da4d <enableIRQs()>

c001da60 <userModeEntryPoint(void*)>:
c001da60:	83 ec 0c             	sub    esp,0xc
c001da63:	e8 f6 ff ff ff       	call   c001da5e <unlockScheduler()>
c001da68:	fb                   	sti    
c001da69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001da71:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001da77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001da7b:	83 c4 0c             	add    esp,0xc
c001da7e:	e9 a7 28 fe ff       	jmp    c000032a <goToUsermode>

c001da83 <lockStuff()>:
c001da83:	e8 b7 ff ff ff       	call   c001da3f <disableIRQs()>
c001da88:	ff 05 08 16 03 c0    	inc    DWORD PTR ds:0xc0031608
c001da8e:	c3                   	ret    

c001da8f <taskStartupFunction>:
c001da8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da94:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001da97:	c3                   	ret    

c001da98 <updateTimeUsed()>:
c001da98:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001da9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001daa3:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001daaa:	74 50                	je     c001dafc <updateTimeUsed()+0x64>
c001daac:	57                   	push   edi
c001daad:	56                   	push   esi
c001daae:	53                   	push   ebx
c001daaf:	0f 31                	rdtsc  
c001dab1:	89 c1                	mov    ecx,eax
c001dab3:	a3 48 16 03 c0       	mov    ds:0xc0031648,eax
c001dab8:	2b 0d 38 16 03 c0    	sub    ecx,DWORD PTR ds:0xc0031638
c001dabe:	89 d3                	mov    ebx,edx
c001dac0:	89 0d 40 16 03 c0    	mov    DWORD PTR ds:0xc0031640,ecx
c001dac6:	1b 1d 3c 16 03 c0    	sbb    ebx,DWORD PTR ds:0xc003163c
c001dacc:	a3 38 16 03 c0       	mov    ds:0xc0031638,eax
c001dad1:	89 1d 44 16 03 c0    	mov    DWORD PTR ds:0xc0031644,ebx
c001dad7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dadc:	89 15 4c 16 03 c0    	mov    DWORD PTR ds:0xc003164c,edx
c001dae2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dae5:	89 15 3c 16 03 c0    	mov    DWORD PTR ds:0xc003163c,edx
c001daeb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001daee:	01 f1                	add    ecx,esi
c001daf0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001daf3:	11 fb                	adc    ebx,edi
c001daf5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001daf8:	5b                   	pop    ebx
c001daf9:	5e                   	pop    esi
c001dafa:	5f                   	pop    edi
c001dafb:	c3                   	ret    
c001dafc:	c3                   	ret    

c001dafd <switchToThread(ThreadControlBlock*)>:
c001dafd:	53                   	push   ebx
c001dafe:	83 ec 08             	sub    esp,0x8
c001db01:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c001db06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db0a:	85 c0                	test   eax,eax
c001db0c:	75 30                	jne    c001db3e <switchToThread(ThreadControlBlock*)+0x41>
c001db0e:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001db11:	3c ff                	cmp    al,0xff
c001db13:	74 25                	je     c001db3a <switchToThread(ThreadControlBlock*)+0x3d>
c001db15:	0f b6 d0             	movzx  edx,al
c001db18:	b8 84 03 00 00       	mov    eax,0x384
c001db1d:	29 d0                	sub    eax,edx
c001db1f:	c1 e0 10             	shl    eax,0x10
c001db22:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001db25:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001db28:	e8 6b ff ff ff       	call   c001da98 <updateTimeUsed()>
c001db2d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001db31:	83 c4 08             	add    esp,0x8
c001db34:	5b                   	pop    ebx
c001db35:	e9 28 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001db3a:	31 c0                	xor    eax,eax
c001db3c:	eb e7                	jmp    c001db25 <switchToThread(ThreadControlBlock*)+0x28>
c001db3e:	c7 05 04 16 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031604,0x1
c001db48:	83 c4 08             	add    esp,0x8
c001db4b:	5b                   	pop    ebx
c001db4c:	c3                   	ret    
c001db4d:	90                   	nop

c001db4e <Semaphore::Semaphore(int)>:
c001db4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db56:	89 10                	mov    DWORD PTR [eax],edx
c001db58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db5c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db72:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db79:	90                   	nop
c001db7a:	c3                   	ret    
c001db7b:	90                   	nop

c001db7c <Mutex::Mutex()>:
c001db7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db80:	6a 01                	push   0x1
c001db82:	50                   	push   eax
c001db83:	e8 c6 ff ff ff       	call   c001db4e <Semaphore::Semaphore(int)>
c001db88:	83 c4 08             	add    esp,0x8
c001db8b:	90                   	nop
c001db8c:	c3                   	ret    
c001db8d:	90                   	nop

c001db8e <Process::createThread(void (*)(void*), void*, int)>:
c001db8e:	55                   	push   ebp
c001db8f:	31 c9                	xor    ecx,ecx
c001db91:	57                   	push   edi
c001db92:	56                   	push   esi
c001db93:	53                   	push   ebx
c001db94:	83 ec 1c             	sub    esp,0x1c
c001db97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db9b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dba2:	89 f2                	mov    edx,esi
c001dba4:	0f b7 c2             	movzx  eax,dx
c001dba7:	83 e2 01             	and    edx,0x1
c001dbaa:	74 14                	je     c001dbc0 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dbac:	d1 f8                	sar    eax,1
c001dbae:	41                   	inc    ecx
c001dbaf:	89 c2                	mov    edx,eax
c001dbb1:	83 f9 10             	cmp    ecx,0x10
c001dbb4:	75 ee                	jne    c001dba4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dbb6:	83 c4 1c             	add    esp,0x1c
c001dbb9:	31 c0                	xor    eax,eax
c001dbbb:	5b                   	pop    ebx
c001dbbc:	5e                   	pop    esi
c001dbbd:	5f                   	pop    edi
c001dbbe:	5d                   	pop    ebp
c001dbbf:	c3                   	ret    
c001dbc0:	83 ec 08             	sub    esp,0x8
c001dbc3:	b8 01 00 00 00       	mov    eax,0x1
c001dbc8:	d3 e0                	shl    eax,cl
c001dbca:	09 c6                	or     esi,eax
c001dbcc:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dbd2:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dbd9:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dbdc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dbdf:	01 ce                	add    esi,ecx
c001dbe1:	89 f0                	mov    eax,esi
c001dbe3:	c1 e0 05             	shl    eax,0x5
c001dbe6:	01 c6                	add    esi,eax
c001dbe8:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dbeb:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dbf1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dbf7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dbfb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dc01:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dc07:	89 ca                	mov    edx,ecx
c001dc09:	f7 da                	neg    edx
c001dc0b:	c1 e2 15             	shl    edx,0x15
c001dc0e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dc14:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dc1a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dc1e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dc28:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dc2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc32:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dc38:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dc42:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dc4c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dc53:	50                   	push   eax
c001dc54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc58:	68 28 16 03 c0       	push   0xc0031628
c001dc5d:	e8 1e ab 00 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc62:	83 c4 10             	add    esp,0x10
c001dc65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc69:	83 c4 1c             	add    esp,0x1c
c001dc6c:	5b                   	pop    ebx
c001dc6d:	5e                   	pop    esi
c001dc6e:	5f                   	pop    edi
c001dc6f:	5d                   	pop    ebp
c001dc70:	c3                   	ret    
c001dc71:	90                   	nop

c001dc72 <Process::createUserThread()>:
c001dc72:	83 ec 0c             	sub    esp,0xc
c001dc75:	68 80 00 00 00       	push   0x80
c001dc7a:	6a 00                	push   0x0
c001dc7c:	68 60 da 01 c0       	push   0xc001da60
c001dc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc85:	e8 04 ff ff ff       	call   c001db8e <Process::createThread(void (*)(void*), void*, int)>
c001dc8a:	83 c4 1c             	add    esp,0x1c
c001dc8d:	c3                   	ret    

c001dc8e <setupMultitasking(void (*)())>:
c001dc8e:	56                   	push   esi
c001dc8f:	53                   	push   ebx
c001dc90:	53                   	push   ebx
c001dc91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc95:	eb 10                	jmp    c001dca7 <setupMultitasking(void (*)())+0x19>
c001dc97:	83 ec 0c             	sub    esp,0xc
c001dc9a:	68 28 16 03 c0       	push   0xc0031628
c001dc9f:	e8 2e aa 00 00       	call   c00286d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dca4:	83 c4 10             	add    esp,0x10
c001dca7:	83 ec 0c             	sub    esp,0xc
c001dcaa:	68 28 16 03 c0       	push   0xc0031628
c001dcaf:	e8 02 aa 00 00       	call   c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	84 c0                	test   al,al
c001dcb9:	74 dc                	je     c001dc97 <setupMultitasking(void (*)())+0x9>
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	68 3f 07 00 00       	push   0x73f
c001dcc3:	e8 78 1b ff ff       	call   c000f840 <malloc>
c001dcc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dccf:	89 c3                	mov    ebx,eax
c001dcd1:	6a 00                	push   0x0
c001dcd3:	68 a3 be 02 c0       	push   0xc002bea3
c001dcd8:	6a 01                	push   0x1
c001dcda:	50                   	push   eax
c001dcdb:	e8 b0 fb ff ff       	call   c001d890 <Process::Process(bool, char const*, Process*, char**)>
c001dce0:	83 c4 18             	add    esp,0x18
c001dce3:	89 1d 34 16 03 c0    	mov    DWORD PTR ds:0xc0031634,ebx
c001dce9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dcef:	68 c4 bf 02 c0       	push   0xc002bfc4
c001dcf4:	e8 c3 4e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001dcf9:	58                   	pop    eax
c001dcfa:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dd00:	e8 ce 2f ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c001dd05:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dd0d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd16:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dd20:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dd26:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dd2c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dd36:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dd40:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dd4a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dd50:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dd56:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dd60:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dd66:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dd70:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dd76:	5a                   	pop    edx
c001dd77:	59                   	pop    ecx
c001dd78:	68 9f be 02 c0       	push   0xc002be9f
c001dd7d:	50                   	push   eax
c001dd7e:	e8 b1 2a fe ff       	call   c0000834 <strcpy>
c001dd83:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dd8a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd8e:	83 c4 14             	add    esp,0x14
c001dd91:	5b                   	pop    ebx
c001dd92:	5e                   	pop    esi
c001dd93:	e9 bc 25 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dd98 <schedule()>:
c001dd98:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c001dd9d:	85 c0                	test   eax,eax
c001dd9f:	74 0b                	je     c001ddac <schedule()+0x14>
c001dda1:	c7 05 04 16 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031604,0x1
c001ddab:	c3                   	ret    
c001ddac:	53                   	push   ebx
c001ddad:	83 ec 14             	sub    esp,0x14
c001ddb0:	68 28 16 03 c0       	push   0xc0031628
c001ddb5:	e8 fc a8 00 00       	call   c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	84 c0                	test   al,al
c001ddbf:	75 38                	jne    c001ddf9 <schedule()+0x61>
c001ddc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddc6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ddc9:	4a                   	dec    edx
c001ddca:	74 32                	je     c001ddfe <schedule()+0x66>
c001ddcc:	83 ec 0c             	sub    esp,0xc
c001ddcf:	68 28 16 03 c0       	push   0xc0031628
c001ddd4:	e8 d5 a8 00 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddd9:	c7 04 24 28 16 03 c0 	mov    DWORD PTR [esp],0xc0031628
c001dde0:	89 c3                	mov    ebx,eax
c001dde2:	e8 eb a8 00 00       	call   c00286d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dde7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001ddee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddf1:	e8 07 fd ff ff       	call   c001dafd <switchToThread(ThreadControlBlock*)>
c001ddf6:	83 c4 10             	add    esp,0x10
c001ddf9:	83 c4 08             	add    esp,0x8
c001ddfc:	5b                   	pop    ebx
c001ddfd:	c3                   	ret    
c001ddfe:	83 ec 08             	sub    esp,0x8
c001de01:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001de08:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001de0e:	68 28 16 03 c0       	push   0xc0031628
c001de13:	e8 68 a9 00 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de18:	83 c4 10             	add    esp,0x10
c001de1b:	eb af                	jmp    c001ddcc <schedule()+0x34>

c001de1d <unlockStuff()>:
c001de1d:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c001de22:	48                   	dec    eax
c001de23:	a3 08 16 03 c0       	mov    ds:0xc0031608,eax
c001de28:	75 09                	jne    c001de33 <unlockStuff()+0x16>
c001de2a:	a1 04 16 03 c0       	mov    eax,ds:0xc0031604
c001de2f:	85 c0                	test   eax,eax
c001de31:	75 05                	jne    c001de38 <unlockStuff()+0x1b>
c001de33:	e9 15 fc ff ff       	jmp    c001da4d <enableIRQs()>
c001de38:	83 ec 0c             	sub    esp,0xc
c001de3b:	c7 05 04 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031604,0x0
c001de45:	e8 4e ff ff ff       	call   c001dd98 <schedule()>
c001de4a:	83 c4 0c             	add    esp,0xc
c001de4d:	e9 fb fb ff ff       	jmp    c001da4d <enableIRQs()>

c001de52 <Semaphore::tryAcquire()>:
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de59:	e8 25 fc ff ff       	call   c001da83 <lockStuff()>
c001de5e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001de61:	3b 10                	cmp    edx,DWORD PTR [eax]
c001de63:	7c 0b                	jl     c001de70 <Semaphore::tryAcquire()+0x1e>
c001de65:	e8 b3 ff ff ff       	call   c001de1d <unlockStuff()>
c001de6a:	31 c0                	xor    eax,eax
c001de6c:	83 c4 0c             	add    esp,0xc
c001de6f:	c3                   	ret    
c001de70:	42                   	inc    edx
c001de71:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001de74:	e8 a4 ff ff ff       	call   c001de1d <unlockStuff()>
c001de79:	b0 01                	mov    al,0x1
c001de7b:	83 c4 0c             	add    esp,0xc
c001de7e:	c3                   	ret    
c001de7f:	90                   	nop

c001de80 <Semaphore::assertLocked(char const*)>:
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de8b:	e8 f3 fb ff ff       	call   c001da83 <lockStuff()>
c001de90:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de92:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001de95:	7c 05                	jl     c001de9c <Semaphore::assertLocked(char const*)+0x1c>
c001de97:	83 c4 0c             	add    esp,0xc
c001de9a:	eb 81                	jmp    c001de1d <unlockStuff()>
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	52                   	push   edx
c001dea0:	e8 92 c3 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001dea5:	83 c4 10             	add    esp,0x10
c001dea8:	83 c4 0c             	add    esp,0xc
c001deab:	e9 6d ff ff ff       	jmp    c001de1d <unlockStuff()>

c001deb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001deb0:	83 ec 0c             	sub    esp,0xc
c001deb3:	e8 8f fb ff ff       	call   c001da47 <getIRQNestingLevel()>
c001deb8:	83 ec 08             	sub    esp,0x8
c001debb:	50                   	push   eax
c001debc:	68 f8 bf 02 c0       	push   0xc002bff8
c001dec1:	e8 f6 4c ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001dec6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001deca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001decf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ded2:	e8 c1 fe ff ff       	call   c001dd98 <schedule()>
c001ded7:	e8 82 fb ff ff       	call   c001da5e <unlockScheduler()>
c001dedc:	e8 66 fb ff ff       	call   c001da47 <getIRQNestingLevel()>
c001dee1:	5a                   	pop    edx
c001dee2:	59                   	pop    ecx
c001dee3:	50                   	push   eax
c001dee4:	68 2c c0 02 c0       	push   0xc002c02c
c001dee9:	e8 ce 4c ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001deee:	83 c4 1c             	add    esp,0x1c
c001def1:	c3                   	ret    

c001def2 <blockTask(TaskState)>:
c001def2:	83 ec 0c             	sub    esp,0xc
c001def5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001def9:	e8 5e fb ff ff       	call   c001da5c <lockScheduler()>
c001defe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df03:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df06:	e8 8d fe ff ff       	call   c001dd98 <schedule()>
c001df0b:	83 c4 0c             	add    esp,0xc
c001df0e:	e9 4b fb ff ff       	jmp    c001da5e <unlockScheduler()>

c001df13 <waitTask(int, int*, int)>:
c001df13:	83 ec 18             	sub    esp,0x18
c001df16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df1f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001df22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df2b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001df2e:	6a 07                	push   0x7
c001df30:	e8 bd ff ff ff       	call   c001def2 <blockTask(TaskState)>
c001df35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df3a:	83 c4 10             	add    esp,0x10
c001df3d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001df40:	85 d2                	test   edx,edx
c001df42:	74 0a                	je     c001df4e <waitTask(int, int*, int)+0x3b>
c001df44:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001df47:	89 02                	mov    DWORD PTR [edx],eax
c001df49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df4e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001df51:	83 c4 0c             	add    esp,0xc
c001df54:	c3                   	ret    

c001df55 <nanoSleepUntil(unsigned long long)>:
c001df55:	83 ec 0c             	sub    esp,0xc
c001df58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df60:	3b 05 50 e7 02 c0    	cmp    eax,DWORD PTR ds:0xc002e750
c001df66:	89 d1                	mov    ecx,edx
c001df68:	1b 0d 54 e7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e754
c001df6e:	73 04                	jae    c001df74 <nanoSleepUntil(unsigned long long)+0x1f>
c001df70:	83 c4 0c             	add    esp,0xc
c001df73:	c3                   	ret    
c001df74:	e8 0a fb ff ff       	call   c001da83 <lockStuff()>
c001df79:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001df7f:	83 ec 08             	sub    esp,0x8
c001df82:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001df85:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001df88:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001df8e:	68 1c 16 03 c0       	push   0xc003161c
c001df93:	e8 e8 a7 00 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df98:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001df9f:	e8 4e ff ff ff       	call   c001def2 <blockTask(TaskState)>
c001dfa4:	83 c4 1c             	add    esp,0x1c
c001dfa7:	e9 71 fe ff ff       	jmp    c001de1d <unlockStuff()>

c001dfac <nanoSleep(unsigned long long)>:
c001dfac:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c001dfb1:	8b 15 54 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e754
c001dfb7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dfbb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dfbf:	eb 94                	jmp    c001df55 <nanoSleepUntil(unsigned long long)>

c001dfc1 <sleep(unsigned long long)>:
c001dfc1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dfc9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dfce:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dfd2:	01 ca                	add    edx,ecx
c001dfd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfd8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dfdc:	eb ce                	jmp    c001dfac <nanoSleep(unsigned long long)>

c001dfde <Semaphore::acquire()>:
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe5:	e8 99 fa ff ff       	call   c001da83 <lockStuff()>
c001dfea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfed:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dfef:	7d 0c                	jge    c001dffd <Semaphore::acquire()+0x1f>
c001dff1:	42                   	inc    edx
c001dff2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dff5:	83 c4 0c             	add    esp,0xc
c001dff8:	e9 20 fe ff ff       	jmp    c001de1d <unlockStuff()>
c001dffd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e003:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e00a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e00d:	85 d2                	test   edx,edx
c001e00f:	74 2a                	je     c001e03b <Semaphore::acquire()+0x5d>
c001e011:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e014:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e01a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e01d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e023:	83 ec 0c             	sub    esp,0xc
c001e026:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e029:	6a 05                	push   0x5
c001e02b:	e8 c2 fe ff ff       	call   c001def2 <blockTask(TaskState)>
c001e030:	83 c4 10             	add    esp,0x10
c001e033:	83 c4 0c             	add    esp,0xc
c001e036:	e9 e2 fd ff ff       	jmp    c001de1d <unlockStuff()>
c001e03b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e041:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e044:	eb d7                	jmp    c001e01d <Semaphore::acquire()+0x3f>

c001e046 <taskReturned>:
c001e046:	83 ec 18             	sub    esp,0x18
c001e049:	68 60 c0 02 c0       	push   0xc002c060
c001e04e:	e8 e4 c1 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001e053:	83 c4 10             	add    esp,0x10
c001e056:	83 ec 0c             	sub    esp,0xc
c001e059:	6a 02                	push   0x2
c001e05b:	e8 92 fe ff ff       	call   c001def2 <blockTask(TaskState)>
c001e060:	e8 f7 f9 ff ff       	call   c001da5c <lockScheduler()>
c001e065:	e8 2e fd ff ff       	call   c001dd98 <schedule()>
c001e06a:	e8 ef f9 ff ff       	call   c001da5e <unlockScheduler()>
c001e06f:	83 c4 10             	add    esp,0x10
c001e072:	eb e2                	jmp    c001e056 <taskReturned+0x10>

c001e074 <unblockTask(ThreadControlBlock*)>:
c001e074:	53                   	push   ebx
c001e075:	83 ec 08             	sub    esp,0x8
c001e078:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e07c:	e8 db f9 ff ff       	call   c001da5c <lockScheduler()>
c001e081:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e084:	85 c0                	test   eax,eax
c001e086:	74 5c                	je     c001e0e4 <unblockTask(ThreadControlBlock*)+0x70>
c001e088:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e08b:	48                   	dec    eax
c001e08c:	74 31                	je     c001e0bf <unblockTask(ThreadControlBlock*)+0x4b>
c001e08e:	83 ec 0c             	sub    esp,0xc
c001e091:	68 28 16 03 c0       	push   0xc0031628
c001e096:	e8 13 a6 00 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e09b:	83 c4 10             	add    esp,0x10
c001e09e:	85 c0                	test   eax,eax
c001e0a0:	75 17                	jne    c001e0b9 <unblockTask(ThreadControlBlock*)+0x45>
c001e0a2:	eb 65                	jmp    c001e109 <unblockTask(ThreadControlBlock*)+0x95>
c001e0a4:	83 ec 08             	sub    esp,0x8
c001e0a7:	50                   	push   eax
c001e0a8:	68 28 16 03 c0       	push   0xc0031628
c001e0ad:	e8 d6 a8 00 00       	call   c0028988 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	85 c0                	test   eax,eax
c001e0b7:	74 50                	je     c001e109 <unblockTask(ThreadControlBlock*)+0x95>
c001e0b9:	39 c3                	cmp    ebx,eax
c001e0bb:	75 e7                	jne    c001e0a4 <unblockTask(ThreadControlBlock*)+0x30>
c001e0bd:	eb 1c                	jmp    c001e0db <unblockTask(ThreadControlBlock*)+0x67>
c001e0bf:	83 ec 0c             	sub    esp,0xc
c001e0c2:	68 50 c1 02 c0       	push   0xc002c150
c001e0c7:	e8 f0 4a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e0cc:	c7 04 24 dc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0dc
c001e0d3:	e8 e4 4a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	83 c4 08             	add    esp,0x8
c001e0de:	5b                   	pop    ebx
c001e0df:	e9 7a f9 ff ff       	jmp    c001da5e <unlockScheduler()>
c001e0e4:	83 ec 0c             	sub    esp,0xc
c001e0e7:	68 94 c0 02 c0       	push   0xc002c094
c001e0ec:	e8 cb 4a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e0f1:	c7 04 24 dc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0dc
c001e0f8:	e8 bf 4a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e0fd:	83 c4 10             	add    esp,0x10
c001e100:	83 c4 08             	add    esp,0x8
c001e103:	5b                   	pop    ebx
c001e104:	e9 55 f9 ff ff       	jmp    c001da5e <unlockScheduler()>
c001e109:	83 ec 08             	sub    esp,0x8
c001e10c:	53                   	push   ebx
c001e10d:	68 28 16 03 c0       	push   0xc0031628
c001e112:	e8 69 a6 00 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e117:	83 c4 10             	add    esp,0x10
c001e11a:	83 c4 08             	add    esp,0x8
c001e11d:	5b                   	pop    ebx
c001e11e:	e9 3b f9 ff ff       	jmp    c001da5e <unlockScheduler()>

c001e123 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e123:	55                   	push   ebp
c001e124:	57                   	push   edi
c001e125:	56                   	push   esi
c001e126:	53                   	push   ebx
c001e127:	83 ec 1c             	sub    esp,0x1c
c001e12a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e12e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e131:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e137:	85 ff                	test   edi,edi
c001e139:	7e 20                	jle    c001e15b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e13b:	31 f6                	xor    esi,esi
c001e13d:	83 ec 0c             	sub    esp,0xc
c001e140:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e147:	46                   	inc    esi
c001e148:	e8 03 17 ff ff       	call   c000f850 <free>
c001e14d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e150:	83 c4 10             	add    esp,0x10
c001e153:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e159:	7f e2                	jg     c001e13d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e15b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e165:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e16a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e16d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e170:	d3 c0                	rol    eax,cl
c001e172:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e179:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e17c:	89 f7                	mov    edi,esi
c001e17e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e186:	0f 85 74 01 00 00    	jne    c001e300 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e18c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e192:	85 ed                	test   ebp,ebp
c001e194:	74 1b                	je     c001e1b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e196:	83 ec 0c             	sub    esp,0xc
c001e199:	55                   	push   ebp
c001e19a:	e8 05 be ff ff       	call   c0019fa4 <EnvVarContainer::~EnvVarContainer()>
c001e19f:	59                   	pop    ecx
c001e1a0:	5e                   	pop    esi
c001e1a1:	6a 0c                	push   0xc
c001e1a3:	55                   	push   ebp
c001e1a4:	e8 33 49 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c001e1a9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e1ac:	83 c4 10             	add    esp,0x10
c001e1af:	89 f7                	mov    edi,esi
c001e1b1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e1b7:	85 c0                	test   eax,eax
c001e1b9:	0f 84 aa 00 00 00    	je     c001e269 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e1bf:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e1c2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e1c6:	31 c9                	xor    ecx,ecx
c001e1c8:	eb 10                	jmp    c001e1da <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e1ca:	41                   	inc    ecx
c001e1cb:	83 f9 10             	cmp    ecx,0x10
c001e1ce:	0f 84 95 00 00 00    	je     c001e269 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e1d4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e1da:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e1e1:	d3 fa                	sar    edx,cl
c001e1e3:	83 e2 01             	and    edx,0x1
c001e1e6:	74 e2                	je     c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1e8:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e1eb:	01 ca                	add    edx,ecx
c001e1ed:	89 d5                	mov    ebp,edx
c001e1ef:	c1 e5 05             	shl    ebp,0x5
c001e1f2:	01 ea                	add    edx,ebp
c001e1f4:	01 d0                	add    eax,edx
c001e1f6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e1fc:	83 fd 07             	cmp    ebp,0x7
c001e1ff:	75 c9                	jne    c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e201:	05 40 02 00 00       	add    eax,0x240
c001e206:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e209:	83 fd ff             	cmp    ebp,0xffffffff
c001e20c:	0f 8c 08 01 00 00    	jl     c001e31a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e212:	0f 84 b9 01 00 00    	je     c001e3d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e218:	85 ed                	test   ebp,ebp
c001e21a:	0f 84 a0 01 00 00    	je     c001e3c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e220:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e222:	75 a6                	jne    c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e224:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e22a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e22e:	01 d0                	add    eax,edx
c001e230:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e234:	83 ec 0c             	sub    esp,0xc
c001e237:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e23d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e240:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e246:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e24d:	50                   	push   eax
c001e24e:	e8 21 fe ff ff       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e25d:	89 f7                	mov    edi,esi
c001e25f:	41                   	inc    ecx
c001e260:	83 f9 10             	cmp    ecx,0x10
c001e263:	0f 85 6b ff ff ff    	jne    c001e1d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e269:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e26f:	85 c0                	test   eax,eax
c001e271:	74 5d                	je     c001e2d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e273:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e279:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e27f:	74 4f                	je     c001e2d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e281:	83 ec 0c             	sub    esp,0xc
c001e284:	68 28 16 03 c0       	push   0xc0031628
c001e289:	e8 20 a4 00 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e28e:	c7 04 24 28 16 03 c0 	mov    DWORD PTR [esp],0xc0031628
c001e295:	89 c7                	mov    edi,eax
c001e297:	e8 1a a4 00 00       	call   c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e29c:	83 c4 10             	add    esp,0x10
c001e29f:	84 c0                	test   al,al
c001e2a1:	0f 84 e4 00 00 00    	je     c001e38b <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e2a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2aa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e2b0:	85 d2                	test   edx,edx
c001e2b2:	74 0f                	je     c001e2c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	8b 02                	mov    eax,DWORD PTR [edx]
c001e2b9:	52                   	push   edx
c001e2ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e2bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e2cd:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e2d0:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e2d6:	85 db                	test   ebx,ebx
c001e2d8:	74 16                	je     c001e2f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e2da:	83 ec 0c             	sub    esp,0xc
c001e2dd:	53                   	push   ebx
c001e2de:	e8 9d 3d ff ff       	call   c0012080 <VAS::~VAS()>
c001e2e3:	58                   	pop    eax
c001e2e4:	5a                   	pop    edx
c001e2e5:	6a 10                	push   0x10
c001e2e7:	53                   	push   ebx
c001e2e8:	e8 ef 47 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c001e2ed:	83 c4 10             	add    esp,0x10
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	68 aa be 02 c0       	push   0xc002beaa
c001e2f8:	e8 bf 48 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e2fd:	83 c4 10             	add    esp,0x10
c001e300:	83 ec 08             	sub    esp,0x8
c001e303:	68 3f 07 00 00       	push   0x73f
c001e308:	68 b8 be 02 c0       	push   0xc002beb8
c001e30d:	e8 aa 48 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e312:	83 c4 2c             	add    esp,0x2c
c001e315:	5b                   	pop    ebx
c001e316:	5e                   	pop    esi
c001e317:	5f                   	pop    edi
c001e318:	5d                   	pop    ebp
c001e319:	c3                   	ret    
c001e31a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	68 94 c1 02 c0       	push   0xc002c194
c001e326:	e8 0c bf ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001e32b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e32e:	83 c4 10             	add    esp,0x10
c001e331:	89 f7                	mov    edi,esi
c001e333:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e337:	e9 8e fe ff ff       	jmp    c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e33c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e342:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e348:	75 1c                	jne    c001e366 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e34a:	83 ec 0c             	sub    esp,0xc
c001e34d:	68 fc c1 02 c0       	push   0xc002c1fc
c001e352:	e8 65 48 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e357:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e35e:	e8 8f fb ff ff       	call   c001def2 <blockTask(TaskState)>
c001e363:	83 c4 10             	add    esp,0x10
c001e366:	83 ec 08             	sub    esp,0x8
c001e369:	56                   	push   esi
c001e36a:	68 28 16 03 c0       	push   0xc0031628
c001e36f:	e8 0c a4 00 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e374:	c7 04 24 28 16 03 c0 	mov    DWORD PTR [esp],0xc0031628
c001e37b:	e8 2e a3 00 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e380:	83 c4 10             	add    esp,0x10
c001e383:	39 f8                	cmp    eax,edi
c001e385:	0f 84 1c ff ff ff    	je     c001e2a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e38b:	83 ec 0c             	sub    esp,0xc
c001e38e:	68 28 16 03 c0       	push   0xc0031628
c001e393:	e8 16 a3 00 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e398:	c7 04 24 28 16 03 c0 	mov    DWORD PTR [esp],0xc0031628
c001e39f:	89 c6                	mov    esi,eax
c001e3a1:	e8 2c a3 00 00       	call   c00286d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e3a6:	83 c4 10             	add    esp,0x10
c001e3a9:	39 f3                	cmp    ebx,esi
c001e3ab:	74 b9                	je     c001e366 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e3ad:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e3b0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3b3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e3b9:	75 ab                	jne    c001e366 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e3bb:	e9 7c ff ff ff       	jmp    c001e33c <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e3c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3c4:	83 ec 0c             	sub    esp,0xc
c001e3c7:	68 c8 c1 02 c0       	push   0xc002c1c8
c001e3cc:	e9 55 ff ff ff       	jmp    c001e326 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e3d1:	8b 36                	mov    esi,DWORD PTR [esi]
c001e3d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3d7:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e3da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3dd:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e3e3:	01 d7                	add    edi,edx
c001e3e5:	89 f8                	mov    eax,edi
c001e3e7:	e9 44 fe ff ff       	jmp    c001e230 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e3ec <cleanerTaskFunction(void*)>:
c001e3ec:	53                   	push   ebx
c001e3ed:	83 ec 08             	sub    esp,0x8
c001e3f0:	e8 69 f6 ff ff       	call   c001da5e <unlockScheduler()>
c001e3f5:	e8 62 f6 ff ff       	call   c001da5c <lockScheduler()>
c001e3fa:	80 3d ec 15 03 c0 00 	cmp    BYTE PTR ds:0xc00315ec,0x0
c001e401:	0f 85 8e 00 00 00    	jne    c001e495 <cleanerTaskFunction(void*)+0xa9>
c001e407:	83 ec 0c             	sub    esp,0xc
c001e40a:	6a 02                	push   0x2
c001e40c:	e8 9f fa ff ff       	call   c001deb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e411:	83 c4 10             	add    esp,0x10
c001e414:	c6 05 ec 15 03 c0 00 	mov    BYTE PTR ds:0xc00315ec,0x0
c001e41b:	e8 63 f6 ff ff       	call   c001da83 <lockStuff()>
c001e420:	e8 37 f6 ff ff       	call   c001da5c <lockScheduler()>
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	68 10 16 03 c0       	push   0xc0031610
c001e42d:	e8 84 a2 00 00       	call   c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e432:	83 c4 10             	add    esp,0x10
c001e435:	84 c0                	test   al,al
c001e437:	75 40                	jne    c001e479 <cleanerTaskFunction(void*)+0x8d>
c001e439:	83 ec 0c             	sub    esp,0xc
c001e43c:	68 10 16 03 c0       	push   0xc0031610
c001e441:	e8 68 a2 00 00       	call   c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e446:	c7 04 24 10 16 03 c0 	mov    DWORD PTR [esp],0xc0031610
c001e44d:	89 c3                	mov    ebx,eax
c001e44f:	e8 7e a2 00 00       	call   c00286d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e454:	c7 04 24 ce be 02 c0 	mov    DWORD PTR [esp],0xc002bece
c001e45b:	e8 5c 47 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e463:	e8 bb fc ff ff       	call   c001e123 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e468:	c7 04 24 e7 be 02 c0 	mov    DWORD PTR [esp],0xc002bee7
c001e46f:	e8 48 47 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e474:	83 c4 10             	add    esp,0x10
c001e477:	eb ac                	jmp    c001e425 <cleanerTaskFunction(void*)+0x39>
c001e479:	e8 e0 f5 ff ff       	call   c001da5e <unlockScheduler()>
c001e47e:	e8 9a f9 ff ff       	call   c001de1d <unlockStuff()>
c001e483:	e8 d4 f5 ff ff       	call   c001da5c <lockScheduler()>
c001e488:	80 3d ec 15 03 c0 00 	cmp    BYTE PTR ds:0xc00315ec,0x0
c001e48f:	0f 84 72 ff ff ff    	je     c001e407 <cleanerTaskFunction(void*)+0x1b>
c001e495:	e8 c4 f5 ff ff       	call   c001da5e <unlockScheduler()>
c001e49a:	e9 75 ff ff ff       	jmp    c001e414 <cleanerTaskFunction(void*)+0x28>

c001e49f <terminateTask(int)>:
c001e49f:	83 ec 14             	sub    esp,0x14
c001e4a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e4aa:	83 c0 0c             	add    eax,0xc
c001e4ad:	50                   	push   eax
c001e4ae:	68 24 c2 02 c0       	push   0xc002c224
c001e4b3:	e8 04 47 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e4b8:	e8 c6 f5 ff ff       	call   c001da83 <lockStuff()>
c001e4bd:	e8 9a f5 ff ff       	call   c001da5c <lockScheduler()>
c001e4c2:	c7 04 24 fa be 02 c0 	mov    DWORD PTR [esp],0xc002befa
c001e4c9:	e8 ee 46 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e4ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e4d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4d7:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e4da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4df:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e4e2:	5a                   	pop    edx
c001e4e3:	59                   	pop    ecx
c001e4e4:	50                   	push   eax
c001e4e5:	68 10 16 03 c0       	push   0xc0031610
c001e4ea:	e8 91 a2 00 00       	call   c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4f4:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e4fb:	c7 04 24 14 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf14
c001e502:	e8 b5 46 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e507:	83 c4 10             	add    esp,0x10
c001e50a:	a1 e8 15 03 c0       	mov    eax,ds:0xc00315e8
c001e50f:	85 c0                	test   eax,eax
c001e511:	74 5a                	je     c001e56d <terminateTask(int)+0xce>
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	68 2e bf 02 c0       	push   0xc002bf2e
c001e51b:	e8 9c 46 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e520:	58                   	pop    eax
c001e521:	c6 05 ec 15 03 c0 01 	mov    BYTE PTR ds:0xc00315ec,0x1
c001e528:	ff 35 e8 15 03 c0    	push   DWORD PTR ds:0xc00315e8
c001e52e:	e8 41 fb ff ff       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c001e533:	c7 04 24 48 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf48
c001e53a:	e8 7d 46 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e53f:	83 c4 10             	add    esp,0x10
c001e542:	e8 17 f5 ff ff       	call   c001da5e <unlockScheduler()>
c001e547:	e8 d1 f8 ff ff       	call   c001de1d <unlockStuff()>
c001e54c:	83 ec 0c             	sub    esp,0xc
c001e54f:	68 80 bf 02 c0       	push   0xc002bf80
c001e554:	e8 63 46 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	e8 fb f4 ff ff       	call   c001da5c <lockScheduler()>
c001e561:	e8 32 f8 ff ff       	call   c001dd98 <schedule()>
c001e566:	e8 f3 f4 ff ff       	call   c001da5e <unlockScheduler()>
c001e56b:	eb ef                	jmp    c001e55c <terminateTask(int)+0xbd>
c001e56d:	83 ec 0c             	sub    esp,0xc
c001e570:	68 62 bf 02 c0       	push   0xc002bf62
c001e575:	e8 42 46 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	eb c3                	jmp    c001e542 <terminateTask(int)+0xa3>

c001e57f <Thr::terminateFromIRQ(int)>:
c001e57f:	83 ec 18             	sub    esp,0x18
c001e582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e586:	e8 14 ff ff ff       	call   c001e49f <terminateTask(int)>
c001e58b:	90                   	nop

c001e58c <Semaphore::release()>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e593:	e8 eb f4 ff ff       	call   c001da83 <lockStuff()>
c001e598:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e59b:	85 d2                	test   edx,edx
c001e59d:	74 1a                	je     c001e5b9 <Semaphore::release()+0x2d>
c001e59f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e5a2:	83 ec 0c             	sub    esp,0xc
c001e5a5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e5a8:	52                   	push   edx
c001e5a9:	e8 c6 fa ff ff       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c001e5ae:	83 c4 10             	add    esp,0x10
c001e5b1:	83 c4 0c             	add    esp,0xc
c001e5b4:	e9 64 f8 ff ff       	jmp    c001de1d <unlockStuff()>
c001e5b9:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e5bc:	83 c4 0c             	add    esp,0xc
c001e5bf:	e9 59 f8 ff ff       	jmp    c001de1d <unlockStuff()>

c001e5c4 <__static_initialization_and_destruction_0(int, int)>:
c001e5c4:	83 ec 0c             	sub    esp,0xc
c001e5c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e5cc:	0f 85 88 00 00 00    	jne    c001e65a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e5d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e5da:	75 7e                	jne    c001e65a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e5dc:	83 ec 0c             	sub    esp,0xc
c001e5df:	68 28 16 03 c0       	push   0xc0031628
c001e5e4:	e8 47 a3 00 00       	call   c0028930 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5e9:	83 c4 10             	add    esp,0x10
c001e5ec:	83 ec 04             	sub    esp,0x4
c001e5ef:	68 dc cf 02 c0       	push   0xc002cfdc
c001e5f4:	68 28 16 03 c0       	push   0xc0031628
c001e5f9:	68 f0 88 02 c0       	push   0xc00288f0
c001e5fe:	e8 53 44 ff ff       	call   c0012a56 <__cxa_atexit>
c001e603:	83 c4 10             	add    esp,0x10
c001e606:	83 ec 0c             	sub    esp,0xc
c001e609:	68 1c 16 03 c0       	push   0xc003161c
c001e60e:	e8 1d a3 00 00       	call   c0028930 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e613:	83 c4 10             	add    esp,0x10
c001e616:	83 ec 04             	sub    esp,0x4
c001e619:	68 dc cf 02 c0       	push   0xc002cfdc
c001e61e:	68 1c 16 03 c0       	push   0xc003161c
c001e623:	68 f0 88 02 c0       	push   0xc00288f0
c001e628:	e8 29 44 ff ff       	call   c0012a56 <__cxa_atexit>
c001e62d:	83 c4 10             	add    esp,0x10
c001e630:	83 ec 0c             	sub    esp,0xc
c001e633:	68 10 16 03 c0       	push   0xc0031610
c001e638:	e8 f3 a2 00 00       	call   c0028930 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e63d:	83 c4 10             	add    esp,0x10
c001e640:	83 ec 04             	sub    esp,0x4
c001e643:	68 dc cf 02 c0       	push   0xc002cfdc
c001e648:	68 10 16 03 c0       	push   0xc0031610
c001e64d:	68 f0 88 02 c0       	push   0xc00288f0
c001e652:	e8 ff 43 ff ff       	call   c0012a56 <__cxa_atexit>
c001e657:	83 c4 10             	add    esp,0x10
c001e65a:	90                   	nop
c001e65b:	83 c4 0c             	add    esp,0xc
c001e65e:	c3                   	ret    

c001e65f <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e65f:	83 ec 0c             	sub    esp,0xc
c001e662:	83 ec 08             	sub    esp,0x8
c001e665:	68 ff ff 00 00       	push   0xffff
c001e66a:	6a 01                	push   0x1
c001e66c:	e8 53 ff ff ff       	call   c001e5c4 <__static_initialization_and_destruction_0(int, int)>
c001e671:	83 c4 10             	add    esp,0x10
c001e674:	83 c4 0c             	add    esp,0xc
c001e677:	c3                   	ret    

c001e678 <Vm::inbv(unsigned short)>:
c001e678:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e67c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e681:	75 06                	jne    c001e689 <Vm::inbv(unsigned short)+0x11>
c001e683:	a0 6c 16 03 c0       	mov    al,ds:0xc003166c
c001e688:	c3                   	ret    
c001e689:	ec                   	in     al,dx
c001e68a:	c3                   	ret    

c001e68b <Vm::outbv(unsigned short, unsigned char)>:
c001e68b:	53                   	push   ebx
c001e68c:	83 ec 08             	sub    esp,0x8
c001e68f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e693:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e697:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e69c:	75 38                	jne    c001e6d6 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e69e:	0f b6 c3             	movzx  eax,bl
c001e6a1:	51                   	push   ecx
c001e6a2:	51                   	push   ecx
c001e6a3:	50                   	push   eax
c001e6a4:	68 43 c2 02 c0       	push   0xc002c243
c001e6a9:	e8 0e 45 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001e6ae:	8b 15 6c 16 03 c0    	mov    edx,DWORD PTR ds:0xc003166c
c001e6b4:	83 c4 10             	add    esp,0x10
c001e6b7:	8d 42 01             	lea    eax,[edx+0x1]
c001e6ba:	88 9a 80 16 03 c0    	mov    BYTE PTR [edx-0x3ffce980],bl
c001e6c0:	a3 6c 16 03 c0       	mov    ds:0xc003166c,eax
c001e6c5:	83 f8 20             	cmp    eax,0x20
c001e6c8:	75 0f                	jne    c001e6d9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e6ca:	c7 05 6c 16 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003166c,0x1f
c001e6d4:	eb 03                	jmp    c001e6d9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e6d6:	88 d8                	mov    al,bl
c001e6d8:	ee                   	out    dx,al
c001e6d9:	83 c4 08             	add    esp,0x8
c001e6dc:	5b                   	pop    ebx
c001e6dd:	c3                   	ret    

c001e6de <Vm::realToLinear(unsigned short, unsigned short)>:
c001e6de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6e8:	c1 e0 04             	shl    eax,0x4
c001e6eb:	01 d0                	add    eax,edx
c001e6ed:	c3                   	ret    

c001e6ee <Vm::getSegment(unsigned int)>:
c001e6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f2:	c1 e8 10             	shr    eax,0x10
c001e6f5:	c3                   	ret    

c001e6f6 <Vm::getOffset(unsigned int)>:
c001e6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6fa:	c3                   	ret    

c001e6fb <Vm::mainloop2()>:
c001e6fb:	83 ec 0c             	sub    esp,0xc
c001e6fe:	e8 59 f3 ff ff       	call   c001da5c <lockScheduler()>
c001e703:	83 ec 0c             	sub    esp,0xc
c001e706:	c6 05 65 16 03 c0 01 	mov    BYTE PTR ds:0xc0031665,0x1
c001e70d:	6a 02                	push   0x2
c001e70f:	e8 9c f7 ff ff       	call   c001deb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e719:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e71d:	52                   	push   edx
c001e71e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e722:	52                   	push   edx
c001e723:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e727:	52                   	push   edx
c001e728:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e72c:	50                   	push   eax
c001e72d:	e8 c8 1b fe ff       	call   c00002fa <goToVM86>
c001e732:	83 c4 2c             	add    esp,0x2c
c001e735:	c3                   	ret    

c001e736 <Vm::mainVm8086Loop(void*)>:
c001e736:	83 ec 0c             	sub    esp,0xc
c001e739:	e8 20 f3 ff ff       	call   c001da5e <unlockScheduler()>
c001e73e:	83 c4 0c             	add    esp,0xc
c001e741:	eb b8                	jmp    c001e6fb <Vm::mainloop2()>

c001e743 <Vm::mainloop3(unsigned long)>:
c001e743:	53                   	push   ebx
c001e744:	83 ec 08             	sub    esp,0x8
c001e747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e74b:	e8 0c f3 ff ff       	call   c001da5c <lockScheduler()>
c001e750:	83 ec 0c             	sub    esp,0xc
c001e753:	89 1d 60 16 03 c0    	mov    DWORD PTR ds:0xc0031660,ebx
c001e759:	6a 02                	push   0x2
c001e75b:	c6 05 64 16 03 c0 01 	mov    BYTE PTR ds:0xc0031664,0x1
c001e762:	e8 49 f7 ff ff       	call   c001deb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e767:	83 c4 18             	add    esp,0x18
c001e76a:	5b                   	pop    ebx
c001e76b:	eb 8e                	jmp    c001e6fb <Vm::mainloop2()>

c001e76d <Vm::initialise8086()>:
c001e76d:	83 ec 0c             	sub    esp,0xc
c001e770:	68 80 00 00 00       	push   0x80
c001e775:	6a 00                	push   0x0
c001e777:	68 36 e7 01 c0       	push   0xc001e736
c001e77c:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c001e782:	e8 07 f4 ff ff       	call   c001db8e <Process::createThread(void (*)(void*), void*, int)>
c001e787:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e78e:	a3 68 16 03 c0       	mov    ds:0xc0031668,eax
c001e793:	68 00 01 00 00       	push   0x100
c001e798:	a1 34 16 03 c0       	mov    eax,ds:0xc0031634
c001e79d:	6a 00                	push   0x0
c001e79f:	6a 00                	push   0x0
c001e7a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e7a7:	e8 34 3d ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e7ac:	83 c4 2c             	add    esp,0x2c
c001e7af:	c3                   	ret    

c001e7b0 <Vm::finish8086()>:
c001e7b0:	53                   	push   ebx
c001e7b1:	83 ec 08             	sub    esp,0x8
c001e7b4:	e8 a3 f2 ff ff       	call   c001da5c <lockScheduler()>
c001e7b9:	80 3d 64 16 03 c0 00 	cmp    BYTE PTR ds:0xc0031664,0x0
c001e7c0:	75 0c                	jne    c001e7ce <Vm::finish8086()+0x1e>
c001e7c2:	e8 d1 f5 ff ff       	call   c001dd98 <schedule()>
c001e7c7:	e8 92 f2 ff ff       	call   c001da5e <unlockScheduler()>
c001e7cc:	eb e6                	jmp    c001e7b4 <Vm::finish8086()+0x4>
c001e7ce:	83 ec 0c             	sub    esp,0xc
c001e7d1:	8b 1d 60 16 03 c0    	mov    ebx,DWORD PTR ds:0xc0031660
c001e7d7:	ff 35 68 16 03 c0    	push   DWORD PTR ds:0xc0031668
c001e7dd:	c6 05 64 16 03 c0 00 	mov    BYTE PTR ds:0xc0031664,0x0
c001e7e4:	e8 8b f8 ff ff       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c001e7e9:	e8 70 f2 ff ff       	call   c001da5e <unlockScheduler()>
c001e7ee:	89 d8                	mov    eax,ebx
c001e7f0:	83 c4 18             	add    esp,0x18
c001e7f3:	5b                   	pop    ebx
c001e7f4:	c3                   	ret    

c001e7f5 <Vm::getOutput8086(unsigned char*)>:
c001e7f5:	83 ec 10             	sub    esp,0x10
c001e7f8:	ff 35 6c 16 03 c0    	push   DWORD PTR ds:0xc003166c
c001e7fe:	68 80 16 03 c0       	push   0xc0031680
c001e803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e807:	e8 38 1f fe ff       	call   c0000744 <memcpy>
c001e80c:	a1 6c 16 03 c0       	mov    eax,ds:0xc003166c
c001e811:	c7 05 6c 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003166c,0x0
c001e81b:	83 c4 1c             	add    esp,0x1c
c001e81e:	c3                   	ret    

c001e81f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e81f:	55                   	push   ebp
c001e820:	57                   	push   edi
c001e821:	56                   	push   esi
c001e822:	53                   	push   ebx
c001e823:	83 ec 2c             	sub    esp,0x2c
c001e826:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e82a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e82e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e832:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e836:	e8 21 f2 ff ff       	call   c001da5c <lockScheduler()>
c001e83b:	a0 65 16 03 c0       	mov    al,ds:0xc0031665
c001e840:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e844:	84 c0                	test   al,al
c001e846:	75 0c                	jne    c001e854 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e848:	e8 4b f5 ff ff       	call   c001dd98 <schedule()>
c001e84d:	e8 0c f2 ff ff       	call   c001da5e <unlockScheduler()>
c001e852:	eb e2                	jmp    c001e836 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e854:	a1 68 16 03 c0       	mov    eax,ds:0xc0031668
c001e859:	c7 05 6c 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003166c,0x0
c001e863:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e867:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e86b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e86f:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e873:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e877:	50                   	push   eax
c001e878:	6a 20                	push   0x20
c001e87a:	6a 00                	push   0x0
c001e87c:	68 80 16 03 c0       	push   0xc0031680
c001e881:	e8 f2 1e fe ff       	call   c0000778 <memset>
c001e886:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e88d:	e8 ae 0f ff ff       	call   c000f840 <malloc>
c001e892:	83 c4 0c             	add    esp,0xc
c001e895:	89 c7                	mov    edi,eax
c001e897:	ff 35 34 16 03 c0    	push   DWORD PTR ds:0xc0031634
c001e89d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e8a1:	50                   	push   eax
c001e8a2:	e8 6d 48 ff ff       	call   c0013114 <File::File(char const*, Process*)>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	85 ff                	test   edi,edi
c001e8ac:	75 0a                	jne    c001e8b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e8ae:	83 ec 0c             	sub    esp,0xc
c001e8b1:	68 5f c2 02 c0       	push   0xc002c25f
c001e8b6:	eb 27                	jmp    c001e8df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e8b8:	50                   	push   eax
c001e8b9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e8bd:	50                   	push   eax
c001e8be:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e8c2:	50                   	push   eax
c001e8c3:	57                   	push   edi
c001e8c4:	e8 5b 4b ff ff       	call   c0013424 <File::stat(unsigned long long*, bool*)>
c001e8c9:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	89 e8                	mov    eax,ebp
c001e8d3:	84 c0                	test   al,al
c001e8d5:	74 19                	je     c001e8f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e8d7:	83 ec 0c             	sub    esp,0xc
c001e8da:	68 73 c2 02 c0       	push   0xc002c273
c001e8df:	e8 53 b9 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001e8e4:	31 ed                	xor    ebp,ebp
c001e8e6:	e8 73 f1 ff ff       	call   c001da5e <unlockScheduler()>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	eb 75                	jmp    c001e965 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e8f0:	50                   	push   eax
c001e8f1:	50                   	push   eax
c001e8f2:	6a 01                	push   0x1
c001e8f4:	57                   	push   edi
c001e8f5:	e8 7e 48 ff ff       	call   c0013178 <File::open(FileOpenMode)>
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	85 c0                	test   eax,eax
c001e8ff:	74 17                	je     c001e918 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e901:	83 ec 0c             	sub    esp,0xc
c001e904:	68 8c c2 02 c0       	push   0xc002c28c
c001e909:	e8 29 b9 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001e90e:	e8 4b f1 ff ff       	call   c001da5e <unlockScheduler()>
c001e913:	83 c4 10             	add    esp,0x10
c001e916:	eb 4d                	jmp    c001e965 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e918:	0f b7 f6             	movzx  esi,si
c001e91b:	50                   	push   eax
c001e91c:	0f b7 db             	movzx  ebx,bx
c001e91f:	50                   	push   eax
c001e920:	56                   	push   esi
c001e921:	53                   	push   ebx
c001e922:	e8 b7 fd ff ff       	call   c001e6de <Vm::realToLinear(unsigned short, unsigned short)>
c001e927:	5a                   	pop    edx
c001e928:	8b 17                	mov    edx,DWORD PTR [edi]
c001e92a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e92e:	51                   	push   ecx
c001e92f:	50                   	push   eax
c001e930:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e934:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e938:	57                   	push   edi
c001e939:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e93c:	83 c4 14             	add    esp,0x14
c001e93f:	57                   	push   edi
c001e940:	e8 91 48 ff ff       	call   c00131d6 <File::close()>
c001e945:	c6 05 65 16 03 c0 00 	mov    BYTE PTR ds:0xc0031665,0x0
c001e94c:	e8 0d f1 ff ff       	call   c001da5e <unlockScheduler()>
c001e951:	59                   	pop    ecx
c001e952:	ff 35 68 16 03 c0    	push   DWORD PTR ds:0xc0031668
c001e958:	e8 17 f7 ff ff       	call   c001e074 <unblockTask(ThreadControlBlock*)>
c001e95d:	83 c4 10             	add    esp,0x10
c001e960:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e965:	83 c4 2c             	add    esp,0x2c
c001e968:	89 e8                	mov    eax,ebp
c001e96a:	5b                   	pop    ebx
c001e96b:	5e                   	pop    esi
c001e96c:	5f                   	pop    edi
c001e96d:	5d                   	pop    ebp
c001e96e:	c3                   	ret    

c001e96f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e96f:	57                   	push   edi
c001e970:	56                   	push   esi
c001e971:	53                   	push   ebx
c001e972:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e97a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e97e:	83 e8 06             	sub    eax,0x6
c001e981:	0f b7 c0             	movzx  eax,ax
c001e984:	50                   	push   eax
c001e985:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e98a:	50                   	push   eax
c001e98b:	e8 4e fd ff ff       	call   c001e6de <Vm::realToLinear(unsigned short, unsigned short)>
c001e990:	5a                   	pop    edx
c001e991:	5e                   	pop    esi
c001e992:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e995:	8d 56 fa             	lea    edx,[esi-0x6]
c001e998:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e99e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e9a1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e9a4:	83 c2 02             	add    edx,0x2
c001e9a7:	66 89 10             	mov    WORD PTR [eax],dx
c001e9aa:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e9ad:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e9b1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e9b4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e9b8:	89 d6                	mov    esi,edx
c001e9ba:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e9c0:	66 81 e6 ff fd       	and    si,0xfdff
c001e9c5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e9c9:	74 07                	je     c001e9d2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e9cb:	89 d6                	mov    esi,edx
c001e9cd:	66 81 ce 00 02       	or     si,0x200
c001e9d2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e9d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9db:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9df:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e9e7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e9ea:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e9f2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e9f5:	5b                   	pop    ebx
c001e9f6:	5e                   	pop    esi
c001e9f7:	5f                   	pop    edi
c001e9f8:	c3                   	ret    

c001e9f9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e9f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea03:	c1 e0 04             	shl    eax,0x4
c001ea06:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ea09:	c3                   	ret    

c001ea0a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ea0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea14:	c1 e0 04             	shl    eax,0x4
c001ea17:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ea1b:	c3                   	ret    

c001ea1c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ea1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea26:	c1 e0 04             	shl    eax,0x4
c001ea29:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ea2c:	c3                   	ret    

c001ea2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ea2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea37:	c1 e0 04             	shl    eax,0x4
c001ea3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea3e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ea41:	c3                   	ret    

c001ea42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ea42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea4c:	c1 e0 04             	shl    eax,0x4
c001ea4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea53:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ea57:	c3                   	ret    

c001ea58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ea58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea62:	c1 e0 04             	shl    eax,0x4
c001ea65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea69:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ea6c:	c3                   	ret    

c001ea6d <Vm::faultHandler(regs*)>:
c001ea6d:	55                   	push   ebp
c001ea6e:	57                   	push   edi
c001ea6f:	56                   	push   esi
c001ea70:	53                   	push   ebx
c001ea71:	83 ec 1c             	sub    esp,0x1c
c001ea74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea78:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ea7b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ea7e:	0f b7 c1             	movzx  eax,cx
c001ea81:	50                   	push   eax
c001ea82:	0f b7 c3             	movzx  eax,bx
c001ea85:	c1 e3 04             	shl    ebx,0x4
c001ea88:	50                   	push   eax
c001ea89:	e8 50 fc ff ff       	call   c001e6de <Vm::realToLinear(unsigned short, unsigned short)>
c001ea8e:	5a                   	pop    edx
c001ea8f:	89 c5                	mov    ebp,eax
c001ea91:	5e                   	pop    esi
c001ea92:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ea96:	50                   	push   eax
c001ea97:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea9b:	50                   	push   eax
c001ea9c:	e8 3d fc ff ff       	call   c001e6de <Vm::realToLinear(unsigned short, unsigned short)>
c001eaa1:	01 cb                	add    ebx,ecx
c001eaa3:	89 c6                	mov    esi,eax
c001eaa5:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eaa9:	50                   	push   eax
c001eaaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eaae:	50                   	push   eax
c001eaaf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eab3:	50                   	push   eax
c001eab4:	55                   	push   ebp
c001eab5:	53                   	push   ebx
c001eab6:	b3 06                	mov    bl,0x6
c001eab8:	68 a5 c2 02 c0       	push   0xc002c2a5
c001eabd:	e8 fa 40 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001eac2:	83 c4 20             	add    esp,0x20
c001eac5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eaca:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eacf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ead3:	3c 9d                	cmp    al,0x9d
c001ead5:	0f 84 d7 02 00 00    	je     c001edb2 <Vm::faultHandler(regs*)+0x345>
c001eadb:	0f 87 a3 00 00 00    	ja     c001eb84 <Vm::faultHandler(regs*)+0x117>
c001eae1:	3c 66                	cmp    al,0x66
c001eae3:	0f 84 15 02 00 00    	je     c001ecfe <Vm::faultHandler(regs*)+0x291>
c001eae9:	77 5f                	ja     c001eb4a <Vm::faultHandler(regs*)+0xdd>
c001eaeb:	3c 36                	cmp    al,0x36
c001eaed:	0f 84 f1 01 00 00    	je     c001ece4 <Vm::faultHandler(regs*)+0x277>
c001eaf3:	77 28                	ja     c001eb1d <Vm::faultHandler(regs*)+0xb0>
c001eaf5:	3c 26                	cmp    al,0x26
c001eaf7:	0f 84 99 01 00 00    	je     c001ec96 <Vm::faultHandler(regs*)+0x229>
c001eafd:	3c 2e                	cmp    al,0x2e
c001eaff:	0f 85 3b 07 00 00    	jne    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001eb05:	83 ec 0c             	sub    esp,0xc
c001eb08:	31 db                	xor    ebx,ebx
c001eb0a:	68 ba c2 02 c0       	push   0xc002c2ba
c001eb0f:	e8 a8 40 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001eb14:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb17:	83 c4 10             	add    esp,0x10
c001eb1a:	45                   	inc    ebp
c001eb1b:	eb b2                	jmp    c001eacf <Vm::faultHandler(regs*)+0x62>
c001eb1d:	3c 64                	cmp    al,0x64
c001eb1f:	0f 84 8b 01 00 00    	je     c001ecb0 <Vm::faultHandler(regs*)+0x243>
c001eb25:	0f 87 9f 01 00 00    	ja     c001ecca <Vm::faultHandler(regs*)+0x25d>
c001eb2b:	3c 3e                	cmp    al,0x3e
c001eb2d:	0f 85 0d 07 00 00    	jne    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	b3 01                	mov    bl,0x1
c001eb38:	68 be c2 02 c0       	push   0xc002c2be
c001eb3d:	e8 7a 40 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001eb42:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	eb d0                	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001eb4a:	3c 6d                	cmp    al,0x6d
c001eb4c:	0f 84 af 03 00 00    	je     c001ef01 <Vm::faultHandler(regs*)+0x494>
c001eb52:	77 15                	ja     c001eb69 <Vm::faultHandler(regs*)+0xfc>
c001eb54:	3c 67                	cmp    al,0x67
c001eb56:	0f 84 bf 01 00 00    	je     c001ed1b <Vm::faultHandler(regs*)+0x2ae>
c001eb5c:	3c 6c                	cmp    al,0x6c
c001eb5e:	0f 84 3f 03 00 00    	je     c001eea3 <Vm::faultHandler(regs*)+0x436>
c001eb64:	e9 d7 06 00 00       	jmp    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001eb69:	3c 6f                	cmp    al,0x6f
c001eb6b:	0f 84 a4 04 00 00    	je     c001f015 <Vm::faultHandler(regs*)+0x5a8>
c001eb71:	0f 82 11 04 00 00    	jb     c001ef88 <Vm::faultHandler(regs*)+0x51b>
c001eb77:	3c 9c                	cmp    al,0x9c
c001eb79:	0f 84 ba 01 00 00    	je     c001ed39 <Vm::faultHandler(regs*)+0x2cc>
c001eb7f:	e9 bc 06 00 00       	jmp    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001eb84:	3c ec                	cmp    al,0xec
c001eb86:	0f 84 24 06 00 00    	je     c001f1b0 <Vm::faultHandler(regs*)+0x743>
c001eb8c:	0f 87 93 00 00 00    	ja     c001ec25 <Vm::faultHandler(regs*)+0x1b8>
c001eb92:	3c e4                	cmp    al,0xe4
c001eb94:	0f 84 5c 05 00 00    	je     c001f0f6 <Vm::faultHandler(regs*)+0x689>
c001eb9a:	77 6a                	ja     c001ec06 <Vm::faultHandler(regs*)+0x199>
c001eb9c:	3c cd                	cmp    al,0xcd
c001eb9e:	0f 84 7e 02 00 00    	je     c001ee22 <Vm::faultHandler(regs*)+0x3b5>
c001eba4:	3c cf                	cmp    al,0xcf
c001eba6:	0f 85 94 06 00 00    	jne    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001ebac:	83 ec 0c             	sub    esp,0xc
c001ebaf:	68 02 c3 02 c0       	push   0xc002c302
c001ebb4:	e8 03 40 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ebb9:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ebbc:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ebbf:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ebc3:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ebc6:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ebca:	0d 00 02 02 00       	or     eax,0x20200
c001ebcf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ebd2:	56                   	push   esi
c001ebd3:	53                   	push   ebx
c001ebd4:	52                   	push   edx
c001ebd5:	68 08 c3 02 c0       	push   0xc002c308
c001ebda:	e8 dd 3f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ebdf:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ebe3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebe9:	66 c1 e8 09          	shr    ax,0x9
c001ebed:	83 e0 01             	and    eax,0x1
c001ebf0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebf3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ebf6:	83 c0 06             	add    eax,0x6
c001ebf9:	25 ff ff 00 00       	and    eax,0xffff
c001ebfe:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ec01:	e9 95 02 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x42e>
c001ec06:	3c e6                	cmp    al,0xe6
c001ec08:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ec0c:	0f 84 4e 05 00 00    	je     c001f160 <Vm::faultHandler(regs*)+0x6f3>
c001ec12:	0f 82 0a 05 00 00    	jb     c001f122 <Vm::faultHandler(regs*)+0x6b5>
c001ec18:	3c e7                	cmp    al,0xe7
c001ec1a:	0f 84 69 05 00 00    	je     c001f189 <Vm::faultHandler(regs*)+0x71c>
c001ec20:	e9 1b 06 00 00       	jmp    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001ec25:	3c ef                	cmp    al,0xef
c001ec27:	0f 84 e6 05 00 00    	je     c001f213 <Vm::faultHandler(regs*)+0x7a6>
c001ec2d:	77 37                	ja     c001ec66 <Vm::faultHandler(regs*)+0x1f9>
c001ec2f:	3c ed                	cmp    al,0xed
c001ec31:	0f 84 a3 05 00 00    	je     c001f1da <Vm::faultHandler(regs*)+0x76d>
c001ec37:	3c ee                	cmp    al,0xee
c001ec39:	0f 85 01 06 00 00    	jne    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001ec3f:	52                   	push   edx
c001ec40:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec43:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec46:	68 a3 c3 02 c0       	push   0xc002c3a3
c001ec4b:	e8 6c 3f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ec50:	59                   	pop    ecx
c001ec51:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ec55:	5b                   	pop    ebx
c001ec56:	50                   	push   eax
c001ec57:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec5b:	50                   	push   eax
c001ec5c:	e8 2a fa ff ff       	call   c001e68b <Vm::outbv(unsigned short, unsigned char)>
c001ec61:	e9 a5 05 00 00       	jmp    c001f20b <Vm::faultHandler(regs*)+0x79e>
c001ec66:	3c fa                	cmp    al,0xfa
c001ec68:	0f 84 f7 01 00 00    	je     c001ee65 <Vm::faultHandler(regs*)+0x3f8>
c001ec6e:	3c fb                	cmp    al,0xfb
c001ec70:	0f 84 0a 02 00 00    	je     c001ee80 <Vm::faultHandler(regs*)+0x413>
c001ec76:	3c f3                	cmp    al,0xf3
c001ec78:	0f 85 c2 05 00 00    	jne    c001f240 <Vm::faultHandler(regs*)+0x7d3>
c001ec7e:	83 ec 0c             	sub    esp,0xc
c001ec81:	68 db c2 02 c0       	push   0xc002c2db
c001ec86:	e8 31 3f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ec8b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec8e:	83 c4 10             	add    esp,0x10
c001ec91:	e9 84 fe ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ec96:	83 ec 0c             	sub    esp,0xc
c001ec99:	b3 02                	mov    bl,0x2
c001ec9b:	68 b6 c2 02 c0       	push   0xc002c2b6
c001eca0:	e8 17 3f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001eca5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	e9 6a fe ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ecb0:	83 ec 0c             	sub    esp,0xc
c001ecb3:	b3 03                	mov    bl,0x3
c001ecb5:	68 c2 c2 02 c0       	push   0xc002c2c2
c001ecba:	e8 fd 3e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ecbf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecc2:	83 c4 10             	add    esp,0x10
c001ecc5:	e9 50 fe ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ecca:	83 ec 0c             	sub    esp,0xc
c001eccd:	b3 04                	mov    bl,0x4
c001eccf:	68 c6 c2 02 c0       	push   0xc002c2c6
c001ecd4:	e8 e3 3e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ecd9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecdc:	83 c4 10             	add    esp,0x10
c001ecdf:	e9 36 fe ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ece4:	83 ec 0c             	sub    esp,0xc
c001ece7:	b3 05                	mov    bl,0x5
c001ece9:	68 ca c2 02 c0       	push   0xc002c2ca
c001ecee:	e8 c9 3e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ecf3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecf6:	83 c4 10             	add    esp,0x10
c001ecf9:	e9 1c fe ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ecfe:	83 ec 0c             	sub    esp,0xc
c001ed01:	68 ce c2 02 c0       	push   0xc002c2ce
c001ed06:	e8 b1 3e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ed0b:	83 c4 10             	add    esp,0x10
c001ed0e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed11:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ed16:	e9 ff fd ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ed1b:	50                   	push   eax
c001ed1c:	50                   	push   eax
c001ed1d:	6a 01                	push   0x1
c001ed1f:	68 d3 c2 02 c0       	push   0xc002c2d3
c001ed24:	e8 93 3e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ed29:	83 c4 10             	add    esp,0x10
c001ed2c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed2f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ed34:	e9 e1 fd ff ff       	jmp    c001eb1a <Vm::faultHandler(regs*)+0xad>
c001ed39:	83 ec 0c             	sub    esp,0xc
c001ed3c:	68 e1 c2 02 c0       	push   0xc002c2e1
c001ed41:	e8 76 3e ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ed46:	83 c4 10             	add    esp,0x10
c001ed49:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ed4c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed51:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ed54:	74 2f                	je     c001ed85 <Vm::faultHandler(regs*)+0x318>
c001ed56:	83 ea 04             	sub    edx,0x4
c001ed59:	25 ff 0d 00 00       	and    eax,0xdff
c001ed5e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed64:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ed67:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ed6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed70:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ed74:	0f 84 bf 04 00 00    	je     c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001ed7a:	80 cc 02             	or     ah,0x2
c001ed7d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ed80:	e9 b4 04 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001ed85:	83 ea 02             	sub    edx,0x2
c001ed88:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed8e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ed91:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ed95:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed9b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ed9f:	74 05                	je     c001eda6 <Vm::faultHandler(regs*)+0x339>
c001eda1:	80 cc 02             	or     ah,0x2
c001eda4:	eb 03                	jmp    c001eda9 <Vm::faultHandler(regs*)+0x33c>
c001eda6:	80 e4 fd             	and    ah,0xfd
c001eda9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001edad:	e9 87 04 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001edb2:	83 ec 0c             	sub    esp,0xc
c001edb5:	68 e8 c2 02 c0       	push   0xc002c2e8
c001edba:	e8 fd 3d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001edc7:	74 28                	je     c001edf1 <Vm::faultHandler(regs*)+0x384>
c001edc9:	8b 06                	mov    eax,DWORD PTR [esi]
c001edcb:	25 ff 0d 00 00       	and    eax,0xdff
c001edd0:	0d 00 02 02 00       	or     eax,0x20200
c001edd5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edd8:	8b 06                	mov    eax,DWORD PTR [esi]
c001edda:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ede0:	c1 e8 09             	shr    eax,0x9
c001ede3:	83 e0 01             	and    eax,0x1
c001ede6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ede9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001edec:	83 c0 04             	add    eax,0x4
c001edef:	eb 24                	jmp    c001ee15 <Vm::faultHandler(regs*)+0x3a8>
c001edf1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001edf4:	0d 00 02 02 00       	or     eax,0x20200
c001edf9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edfc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001edff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee05:	66 c1 e8 09          	shr    ax,0x9
c001ee09:	83 e0 01             	and    eax,0x1
c001ee0c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee0f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee12:	83 c0 02             	add    eax,0x2
c001ee15:	25 ff ff 00 00       	and    eax,0xffff
c001ee1a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee1d:	e9 17 04 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001ee22:	53                   	push   ebx
c001ee23:	53                   	push   ebx
c001ee24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee28:	50                   	push   eax
c001ee29:	68 ee c2 02 c0       	push   0xc002c2ee
c001ee2e:	e8 89 3d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ee33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	3c ee                	cmp    al,0xee
c001ee3c:	75 10                	jne    c001ee4e <Vm::faultHandler(regs*)+0x3e1>
c001ee3e:	83 ec 0c             	sub    esp,0xc
c001ee41:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee44:	e8 fa f8 ff ff       	call   c001e743 <Vm::mainloop3(unsigned long)>
c001ee49:	e9 c0 03 00 00       	jmp    c001f20e <Vm::faultHandler(regs*)+0x7a1>
c001ee4e:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001ee52:	83 ec 0c             	sub    esp,0xc
c001ee55:	53                   	push   ebx
c001ee56:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001ee5a:	53                   	push   ebx
c001ee5b:	55                   	push   ebp
c001ee5c:	50                   	push   eax
c001ee5d:	57                   	push   edi
c001ee5e:	e8 0c fb ff ff       	call   c001e96f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ee63:	eb 36                	jmp    c001ee9b <Vm::faultHandler(regs*)+0x42e>
c001ee65:	83 ec 0c             	sub    esp,0xc
c001ee68:	68 f8 c2 02 c0       	push   0xc002c2f8
c001ee6d:	e8 4a 3d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ee72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee77:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee7b:	e9 8b 03 00 00       	jmp    c001f20b <Vm::faultHandler(regs*)+0x79e>
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	68 fd c2 02 c0       	push   0xc002c2fd
c001ee88:	e8 2f 3d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ee8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee92:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ee96:	e9 70 03 00 00       	jmp    c001f20b <Vm::faultHandler(regs*)+0x79e>
c001ee9b:	83 c4 20             	add    esp,0x20
c001ee9e:	e9 99 03 00 00       	jmp    c001f23c <Vm::faultHandler(regs*)+0x7cf>
c001eea3:	83 ec 0c             	sub    esp,0xc
c001eea6:	68 3b c3 02 c0       	push   0xc002c33b
c001eeab:	e8 0c 3d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001eeb0:	83 c4 10             	add    esp,0x10
c001eeb3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eeb6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eebb:	74 0d                	je     c001eeca <Vm::faultHandler(regs*)+0x45d>
c001eebd:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eec4:	0f 87 9e 01 00 00    	ja     c001f068 <Vm::faultHandler(regs*)+0x5fb>
c001eeca:	83 ec 0c             	sub    esp,0xc
c001eecd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eed1:	0f b7 db             	movzx  ebx,bx
c001eed4:	50                   	push   eax
c001eed5:	e8 9e f7 ff ff       	call   c001e678 <Vm::inbv(unsigned short)>
c001eeda:	83 c4 0c             	add    esp,0xc
c001eedd:	0f b6 c0             	movzx  eax,al
c001eee0:	50                   	push   eax
c001eee1:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001eee5:	50                   	push   eax
c001eee6:	53                   	push   ebx
c001eee7:	e8 41 fb ff ff       	call   c001ea2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eeec:	83 c4 10             	add    esp,0x10
c001eeef:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eef2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eef6:	74 03                	je     c001eefb <Vm::faultHandler(regs*)+0x48e>
c001eef8:	48                   	dec    eax
c001eef9:	eb 01                	jmp    c001eefc <Vm::faultHandler(regs*)+0x48f>
c001eefb:	40                   	inc    eax
c001eefc:	0f b7 c0             	movzx  eax,ax
c001eeff:	eb 7f                	jmp    c001ef80 <Vm::faultHandler(regs*)+0x513>
c001ef01:	83 ec 0c             	sub    esp,0xc
c001ef04:	68 6d c3 02 c0       	push   0xc002c36d
c001ef09:	e8 ae 3c ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001ef14:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ef19:	74 0d                	je     c001ef28 <Vm::faultHandler(regs*)+0x4bb>
c001ef1b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001ef22:	0f 87 40 01 00 00    	ja     c001f068 <Vm::faultHandler(regs*)+0x5fb>
c001ef28:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ef2b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001ef2f:	0f b7 db             	movzx  ebx,bx
c001ef32:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef37:	74 20                	je     c001ef59 <Vm::faultHandler(regs*)+0x4ec>
c001ef39:	ed                   	in     eax,dx
c001ef3a:	51                   	push   ecx
c001ef3b:	50                   	push   eax
c001ef3c:	56                   	push   esi
c001ef3d:	53                   	push   ebx
c001ef3e:	e8 15 fb ff ff       	call   c001ea58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ef49:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ef4d:	74 05                	je     c001ef54 <Vm::faultHandler(regs*)+0x4e7>
c001ef4f:	83 e8 04             	sub    eax,0x4
c001ef52:	eb 27                	jmp    c001ef7b <Vm::faultHandler(regs*)+0x50e>
c001ef54:	83 c0 04             	add    eax,0x4
c001ef57:	eb 22                	jmp    c001ef7b <Vm::faultHandler(regs*)+0x50e>
c001ef59:	66 ed                	in     ax,dx
c001ef5b:	0f b7 c0             	movzx  eax,ax
c001ef5e:	52                   	push   edx
c001ef5f:	50                   	push   eax
c001ef60:	56                   	push   esi
c001ef61:	53                   	push   ebx
c001ef62:	e8 db fa ff ff       	call   c001ea42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ef67:	83 c4 10             	add    esp,0x10
c001ef6a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ef6d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ef71:	74 05                	je     c001ef78 <Vm::faultHandler(regs*)+0x50b>
c001ef73:	83 e8 02             	sub    eax,0x2
c001ef76:	eb 03                	jmp    c001ef7b <Vm::faultHandler(regs*)+0x50e>
c001ef78:	83 c0 02             	add    eax,0x2
c001ef7b:	25 ff ff 00 00       	and    eax,0xffff
c001ef80:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ef83:	e9 b1 02 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	4b                   	dec    ebx
c001ef8c:	68 73 c3 02 c0       	push   0xc002c373
c001ef91:	e8 26 3c ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001ef96:	83 c4 10             	add    esp,0x10
c001ef99:	80 fb 05             	cmp    bl,0x5
c001ef9c:	77 0a                	ja     c001efa8 <Vm::faultHandler(regs*)+0x53b>
c001ef9e:	0f b6 db             	movzx  ebx,bl
c001efa1:	ff 24 9d e4 c3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3c1c]
c001efa8:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001efac:	eb 1b                	jmp    c001efc9 <Vm::faultHandler(regs*)+0x55c>
c001efae:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001efb2:	eb 15                	jmp    c001efc9 <Vm::faultHandler(regs*)+0x55c>
c001efb4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001efb8:	eb 0f                	jmp    c001efc9 <Vm::faultHandler(regs*)+0x55c>
c001efba:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001efbe:	eb 09                	jmp    c001efc9 <Vm::faultHandler(regs*)+0x55c>
c001efc0:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001efc3:	eb 04                	jmp    c001efc9 <Vm::faultHandler(regs*)+0x55c>
c001efc5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001efc9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001efce:	74 0d                	je     c001efdd <Vm::faultHandler(regs*)+0x570>
c001efd0:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001efd7:	0f 87 8b 00 00 00    	ja     c001f068 <Vm::faultHandler(regs*)+0x5fb>
c001efdd:	53                   	push   ebx
c001efde:	53                   	push   ebx
c001efdf:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001efe3:	52                   	push   edx
c001efe4:	50                   	push   eax
c001efe5:	e8 0f fa ff ff       	call   c001e9f9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001efea:	5e                   	pop    esi
c001efeb:	0f b6 c0             	movzx  eax,al
c001efee:	5d                   	pop    ebp
c001efef:	50                   	push   eax
c001eff0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eff4:	50                   	push   eax
c001eff5:	e8 91 f6 ff ff       	call   c001e68b <Vm::outbv(unsigned short, unsigned char)>
c001effa:	83 c4 10             	add    esp,0x10
c001effd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f000:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f004:	74 03                	je     c001f009 <Vm::faultHandler(regs*)+0x59c>
c001f006:	48                   	dec    eax
c001f007:	eb 01                	jmp    c001f00a <Vm::faultHandler(regs*)+0x59d>
c001f009:	40                   	inc    eax
c001f00a:	0f b7 c0             	movzx  eax,ax
c001f00d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f010:	e9 24 02 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001f015:	83 ec 0c             	sub    esp,0xc
c001f018:	4b                   	dec    ebx
c001f019:	68 73 c3 02 c0       	push   0xc002c373
c001f01e:	e8 99 3b ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f023:	83 c4 10             	add    esp,0x10
c001f026:	80 fb 05             	cmp    bl,0x5
c001f029:	77 0a                	ja     c001f035 <Vm::faultHandler(regs*)+0x5c8>
c001f02b:	0f b6 db             	movzx  ebx,bl
c001f02e:	ff 24 9d fc c3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3c04]
c001f035:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f039:	eb 1b                	jmp    c001f056 <Vm::faultHandler(regs*)+0x5e9>
c001f03b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f03f:	eb 15                	jmp    c001f056 <Vm::faultHandler(regs*)+0x5e9>
c001f041:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f045:	eb 0f                	jmp    c001f056 <Vm::faultHandler(regs*)+0x5e9>
c001f047:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f04b:	eb 09                	jmp    c001f056 <Vm::faultHandler(regs*)+0x5e9>
c001f04d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f050:	eb 04                	jmp    c001f056 <Vm::faultHandler(regs*)+0x5e9>
c001f052:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f056:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f059:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f05e:	74 39                	je     c001f099 <Vm::faultHandler(regs*)+0x62c>
c001f060:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f066:	76 31                	jbe    c001f099 <Vm::faultHandler(regs*)+0x62c>
c001f068:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f06c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f070:	51                   	push   ecx
c001f071:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f075:	51                   	push   ecx
c001f076:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f07a:	51                   	push   ecx
c001f07b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f07f:	51                   	push   ecx
c001f080:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f084:	52                   	push   edx
c001f085:	50                   	push   eax
c001f086:	50                   	push   eax
c001f087:	68 40 c3 02 c0       	push   0xc002c340
c001f08c:	e8 2b 3b ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f091:	83 c4 20             	add    esp,0x20
c001f094:	e9 fb 01 00 00       	jmp    c001f294 <Vm::faultHandler(regs*)+0x827>
c001f099:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f09c:	0f b7 d3             	movzx  edx,bx
c001f09f:	81 e6 00 04 00 00    	and    esi,0x400
c001f0a5:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f0a8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0ad:	74 1d                	je     c001f0cc <Vm::faultHandler(regs*)+0x65f>
c001f0af:	51                   	push   ecx
c001f0b0:	51                   	push   ecx
c001f0b1:	52                   	push   edx
c001f0b2:	50                   	push   eax
c001f0b3:	e8 64 f9 ff ff       	call   c001ea1c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f0b8:	83 c4 10             	add    esp,0x10
c001f0bb:	89 ea                	mov    edx,ebp
c001f0bd:	ef                   	out    dx,eax
c001f0be:	85 f6                	test   esi,esi
c001f0c0:	74 05                	je     c001f0c7 <Vm::faultHandler(regs*)+0x65a>
c001f0c2:	83 eb 04             	sub    ebx,0x4
c001f0c5:	eb 21                	jmp    c001f0e8 <Vm::faultHandler(regs*)+0x67b>
c001f0c7:	83 c3 04             	add    ebx,0x4
c001f0ca:	eb 1c                	jmp    c001f0e8 <Vm::faultHandler(regs*)+0x67b>
c001f0cc:	51                   	push   ecx
c001f0cd:	51                   	push   ecx
c001f0ce:	52                   	push   edx
c001f0cf:	50                   	push   eax
c001f0d0:	e8 35 f9 ff ff       	call   c001ea0a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f0d5:	83 c4 10             	add    esp,0x10
c001f0d8:	89 ea                	mov    edx,ebp
c001f0da:	66 ef                	out    dx,ax
c001f0dc:	85 f6                	test   esi,esi
c001f0de:	74 05                	je     c001f0e5 <Vm::faultHandler(regs*)+0x678>
c001f0e0:	83 eb 02             	sub    ebx,0x2
c001f0e3:	eb 03                	jmp    c001f0e8 <Vm::faultHandler(regs*)+0x67b>
c001f0e5:	83 c3 02             	add    ebx,0x2
c001f0e8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f0ee:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f0f1:	e9 43 01 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001f0f6:	53                   	push   ebx
c001f0f7:	53                   	push   ebx
c001f0f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0fc:	50                   	push   eax
c001f0fd:	68 79 c3 02 c0       	push   0xc002c379
c001f102:	e8 b5 3a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f107:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f10e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f112:	89 04 24             	mov    DWORD PTR [esp],eax
c001f115:	e8 5e f5 ff ff       	call   c001e678 <Vm::inbv(unsigned short)>
c001f11a:	0f b6 c0             	movzx  eax,al
c001f11d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f120:	eb 5e                	jmp    c001f180 <Vm::faultHandler(regs*)+0x713>
c001f122:	51                   	push   ecx
c001f123:	51                   	push   ecx
c001f124:	53                   	push   ebx
c001f125:	68 7f c3 02 c0       	push   0xc002c37f
c001f12a:	e8 8d 3a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f12f:	83 c4 10             	add    esp,0x10
c001f132:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f137:	74 07                	je     c001f140 <Vm::faultHandler(regs*)+0x6d3>
c001f139:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f13d:	ed                   	in     eax,dx
c001f13e:	eb 14                	jmp    c001f154 <Vm::faultHandler(regs*)+0x6e7>
c001f140:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f143:	66 31 db             	xor    bx,bx
c001f146:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f149:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f14d:	66 ed                	in     ax,dx
c001f14f:	0f b7 c0             	movzx  eax,ax
c001f152:	09 d8                	or     eax,ebx
c001f154:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f157:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f15b:	e9 dc 00 00 00       	jmp    c001f23c <Vm::faultHandler(regs*)+0x7cf>
c001f160:	50                   	push   eax
c001f161:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f164:	53                   	push   ebx
c001f165:	68 85 c3 02 c0       	push   0xc002c385
c001f16a:	e8 4d 3a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f16f:	58                   	pop    eax
c001f170:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f174:	5a                   	pop    edx
c001f175:	50                   	push   eax
c001f176:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f17a:	50                   	push   eax
c001f17b:	e8 0b f5 ff ff       	call   c001e68b <Vm::outbv(unsigned short, unsigned char)>
c001f180:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f184:	e9 85 00 00 00       	jmp    c001f20e <Vm::faultHandler(regs*)+0x7a1>
c001f189:	50                   	push   eax
c001f18a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f18d:	53                   	push   ebx
c001f18e:	68 8e c3 02 c0       	push   0xc002c38e
c001f193:	e8 24 3a ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f198:	83 c4 10             	add    esp,0x10
c001f19b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f19f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1a4:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f1a7:	74 03                	je     c001f1ac <Vm::faultHandler(regs*)+0x73f>
c001f1a9:	ef                   	out    dx,eax
c001f1aa:	eb ab                	jmp    c001f157 <Vm::faultHandler(regs*)+0x6ea>
c001f1ac:	66 ef                	out    dx,ax
c001f1ae:	eb a7                	jmp    c001f157 <Vm::faultHandler(regs*)+0x6ea>
c001f1b0:	55                   	push   ebp
c001f1b1:	55                   	push   ebp
c001f1b2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f1b5:	68 97 c3 02 c0       	push   0xc002c397
c001f1ba:	e8 fd 39 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f1bf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f1c6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1ca:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1cd:	e8 a6 f4 ff ff       	call   c001e678 <Vm::inbv(unsigned short)>
c001f1d2:	0f b6 c0             	movzx  eax,al
c001f1d5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f1d8:	eb 31                	jmp    c001f20b <Vm::faultHandler(regs*)+0x79e>
c001f1da:	56                   	push   esi
c001f1db:	56                   	push   esi
c001f1dc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f1df:	68 9d c3 02 c0       	push   0xc002c39d
c001f1e4:	e8 d3 39 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f1e9:	83 c4 10             	add    esp,0x10
c001f1ec:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1ef:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1f4:	74 03                	je     c001f1f9 <Vm::faultHandler(regs*)+0x78c>
c001f1f6:	ed                   	in     eax,dx
c001f1f7:	eb 0d                	jmp    c001f206 <Vm::faultHandler(regs*)+0x799>
c001f1f9:	66 ed                	in     ax,dx
c001f1fb:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f1fe:	0f b7 c0             	movzx  eax,ax
c001f201:	66 31 d2             	xor    dx,dx
c001f204:	09 d0                	or     eax,edx
c001f206:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f209:	eb 2e                	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001f20b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f20e:	83 c4 10             	add    esp,0x10
c001f211:	eb 29                	jmp    c001f23c <Vm::faultHandler(regs*)+0x7cf>
c001f213:	50                   	push   eax
c001f214:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f217:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f21a:	68 ac c3 02 c0       	push   0xc002c3ac
c001f21f:	e8 98 39 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f224:	83 c4 10             	add    esp,0x10
c001f227:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f22a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f22f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f232:	74 03                	je     c001f237 <Vm::faultHandler(regs*)+0x7ca>
c001f234:	ef                   	out    dx,eax
c001f235:	eb 02                	jmp    c001f239 <Vm::faultHandler(regs*)+0x7cc>
c001f237:	66 ef                	out    dx,ax
c001f239:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f23c:	b0 01                	mov    al,0x1
c001f23e:	eb 56                	jmp    c001f296 <Vm::faultHandler(regs*)+0x829>
c001f240:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f244:	51                   	push   ecx
c001f245:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f249:	51                   	push   ecx
c001f24a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f24e:	51                   	push   ecx
c001f24f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f253:	51                   	push   ecx
c001f254:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f258:	52                   	push   edx
c001f259:	50                   	push   eax
c001f25a:	50                   	push   eax
c001f25b:	68 b5 c3 02 c0       	push   0xc002c3b5
c001f260:	e8 57 39 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c001f265:	83 c4 20             	add    esp,0x20
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	6a 60                	push   0x60
c001f26d:	e8 06 f4 ff ff       	call   c001e678 <Vm::inbv(unsigned short)>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	3c 1c                	cmp    al,0x1c
c001f277:	74 04                	je     c001f27d <Vm::faultHandler(regs*)+0x810>
c001f279:	3c 5a                	cmp    al,0x5a
c001f27b:	75 eb                	jne    c001f268 <Vm::faultHandler(regs*)+0x7fb>
c001f27d:	3c 1c                	cmp    al,0x1c
c001f27f:	74 04                	je     c001f285 <Vm::faultHandler(regs*)+0x818>
c001f281:	3c 5a                	cmp    al,0x5a
c001f283:	75 0f                	jne    c001f294 <Vm::faultHandler(regs*)+0x827>
c001f285:	83 ec 0c             	sub    esp,0xc
c001f288:	6a 60                	push   0x60
c001f28a:	e8 e9 f3 ff ff       	call   c001e678 <Vm::inbv(unsigned short)>
c001f28f:	83 c4 10             	add    esp,0x10
c001f292:	eb e9                	jmp    c001f27d <Vm::faultHandler(regs*)+0x810>
c001f294:	31 c0                	xor    eax,eax
c001f296:	83 c4 1c             	add    esp,0x1c
c001f299:	5b                   	pop    ebx
c001f29a:	5e                   	pop    esi
c001f29b:	5f                   	pop    edi
c001f29c:	5d                   	pop    ebp
c001f29d:	c3                   	ret    

c001f29e <Vm::fpuInternalTo32(unsigned long long)>:
c001f29e:	57                   	push   edi
c001f29f:	56                   	push   esi
c001f2a0:	53                   	push   ebx
c001f2a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f2a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a9:	89 d6                	mov    esi,edx
c001f2ab:	89 d7                	mov    edi,edx
c001f2ad:	89 c1                	mov    ecx,eax
c001f2af:	c1 ef 14             	shr    edi,0x14
c001f2b2:	89 d3                	mov    ebx,edx
c001f2b4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2ba:	31 d2                	xor    edx,edx
c001f2bc:	89 f8                	mov    eax,edi
c001f2be:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f2c4:	bf ff 00 00 00       	mov    edi,0xff
c001f2c9:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f2ce:	83 d2 ff             	adc    edx,0xffffffff
c001f2d1:	39 c7                	cmp    edi,eax
c001f2d3:	bf 00 00 00 00       	mov    edi,0x0
c001f2d8:	19 d7                	sbb    edi,edx
c001f2da:	72 15                	jb     c001f2f1 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f2dc:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f2e0:	c1 e0 17             	shl    eax,0x17
c001f2e3:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f2e9:	09 f1                	or     ecx,esi
c001f2eb:	09 c1                	or     ecx,eax
c001f2ed:	89 cf                	mov    edi,ecx
c001f2ef:	eb 02                	jmp    c001f2f3 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f2f1:	31 ff                	xor    edi,edi
c001f2f3:	89 f8                	mov    eax,edi
c001f2f5:	5b                   	pop    ebx
c001f2f6:	5e                   	pop    esi
c001f2f7:	5f                   	pop    edi
c001f2f8:	c3                   	ret    

c001f2f9 <Vm::fpuInternalTo64(unsigned long long)>:
c001f2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f301:	c3                   	ret    

c001f302 <Vm::fpu32ToInternal(unsigned int)>:
c001f302:	57                   	push   edi
c001f303:	31 ff                	xor    edi,edi
c001f305:	56                   	push   esi
c001f306:	53                   	push   ebx
c001f307:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f30b:	89 cb                	mov    ebx,ecx
c001f30d:	89 ce                	mov    esi,ecx
c001f30f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f315:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f31b:	c1 e9 17             	shr    ecx,0x17
c001f31e:	89 f0                	mov    eax,esi
c001f320:	0f b6 d1             	movzx  edx,cl
c001f323:	81 c2 80 03 00 00    	add    edx,0x380
c001f329:	89 d1                	mov    ecx,edx
c001f32b:	89 fa                	mov    edx,edi
c001f32d:	c1 e1 14             	shl    ecx,0x14
c001f330:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f334:	c1 e0 1d             	shl    eax,0x1d
c001f337:	89 d7                	mov    edi,edx
c001f339:	89 c6                	mov    esi,eax
c001f33b:	89 ca                	mov    edx,ecx
c001f33d:	89 f0                	mov    eax,esi
c001f33f:	09 fa                	or     edx,edi
c001f341:	09 da                	or     edx,ebx
c001f343:	5b                   	pop    ebx
c001f344:	5e                   	pop    esi
c001f345:	5f                   	pop    edi
c001f346:	c3                   	ret    

c001f347 <Vm::fpu64ToInternal(unsigned long long)>:
c001f347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f34b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f34f:	c3                   	ret    

c001f350 <Vm::fpuFloatToLong(unsigned long long)>:
c001f350:	57                   	push   edi
c001f351:	31 c0                	xor    eax,eax
c001f353:	56                   	push   esi
c001f354:	31 d2                	xor    edx,edx
c001f356:	53                   	push   ebx
c001f357:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f35b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f35f:	89 d9                	mov    ecx,ebx
c001f361:	c1 e9 14             	shr    ecx,0x14
c001f364:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f36a:	89 cf                	mov    edi,ecx
c001f36c:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f372:	78 33                	js     c001f3a7 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f374:	89 d9                	mov    ecx,ebx
c001f376:	89 f0                	mov    eax,esi
c001f378:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f37e:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f384:	89 ca                	mov    edx,ecx
c001f386:	b9 34 00 00 00       	mov    ecx,0x34
c001f38b:	29 f9                	sub    ecx,edi
c001f38d:	0f ad d0             	shrd   eax,edx,cl
c001f390:	d3 fa                	sar    edx,cl
c001f392:	f6 c1 20             	test   cl,0x20
c001f395:	74 05                	je     c001f39c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f397:	89 d0                	mov    eax,edx
c001f399:	c1 fa 1f             	sar    edx,0x1f
c001f39c:	85 db                	test   ebx,ebx
c001f39e:	79 07                	jns    c001f3a7 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f3a0:	f7 d8                	neg    eax
c001f3a2:	83 d2 00             	adc    edx,0x0
c001f3a5:	f7 da                	neg    edx
c001f3a7:	5b                   	pop    ebx
c001f3a8:	5e                   	pop    esi
c001f3a9:	5f                   	pop    edi
c001f3aa:	c3                   	ret    

c001f3ab <Vm::fpuULongToFloat(unsigned long long)>:
c001f3ab:	57                   	push   edi
c001f3ac:	31 c9                	xor    ecx,ecx
c001f3ae:	56                   	push   esi
c001f3af:	53                   	push   ebx
c001f3b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f3b8:	0f ba e7 14          	bt     edi,0x14
c001f3bc:	72 07                	jb     c001f3c5 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f3be:	01 f6                	add    esi,esi
c001f3c0:	11 ff                	adc    edi,edi
c001f3c2:	41                   	inc    ecx
c001f3c3:	eb f3                	jmp    c001f3b8 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f3c5:	89 fa                	mov    edx,edi
c001f3c7:	89 f0                	mov    eax,esi
c001f3c9:	bb 33 04 00 00       	mov    ebx,0x433
c001f3ce:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f3d4:	29 cb                	sub    ebx,ecx
c001f3d6:	89 d9                	mov    ecx,ebx
c001f3d8:	5b                   	pop    ebx
c001f3d9:	c1 e1 14             	shl    ecx,0x14
c001f3dc:	5e                   	pop    esi
c001f3dd:	09 ca                	or     edx,ecx
c001f3df:	5f                   	pop    edi
c001f3e0:	c3                   	ret    

c001f3e1 <Vm::fpuLongToFloat(long long)>:
c001f3e1:	56                   	push   esi
c001f3e2:	31 c0                	xor    eax,eax
c001f3e4:	53                   	push   ebx
c001f3e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3ed:	39 c8                	cmp    eax,ecx
c001f3ef:	19 d8                	sbb    eax,ebx
c001f3f1:	7d 04                	jge    c001f3f7 <Vm::fpuLongToFloat(long long)+0x16>
c001f3f3:	31 f6                	xor    esi,esi
c001f3f5:	eb 0c                	jmp    c001f403 <Vm::fpuLongToFloat(long long)+0x22>
c001f3f7:	f7 d9                	neg    ecx
c001f3f9:	be 01 00 00 00       	mov    esi,0x1
c001f3fe:	83 d3 00             	adc    ebx,0x0
c001f401:	f7 db                	neg    ebx
c001f403:	31 c0                	xor    eax,eax
c001f405:	0f ba e3 14          	bt     ebx,0x14
c001f409:	72 07                	jb     c001f412 <Vm::fpuLongToFloat(long long)+0x31>
c001f40b:	01 c9                	add    ecx,ecx
c001f40d:	11 db                	adc    ebx,ebx
c001f40f:	40                   	inc    eax
c001f410:	eb f3                	jmp    c001f405 <Vm::fpuLongToFloat(long long)+0x24>
c001f412:	ba 33 04 00 00       	mov    edx,0x433
c001f417:	29 c2                	sub    edx,eax
c001f419:	89 c8                	mov    eax,ecx
c001f41b:	c1 e2 14             	shl    edx,0x14
c001f41e:	89 d9                	mov    ecx,ebx
c001f420:	89 f3                	mov    ebx,esi
c001f422:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f428:	09 ca                	or     edx,ecx
c001f42a:	84 db                	test   bl,bl
c001f42c:	74 06                	je     c001f434 <Vm::fpuLongToFloat(long long)+0x53>
c001f42e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f434:	5b                   	pop    ebx
c001f435:	5e                   	pop    esi
c001f436:	c3                   	ret    

c001f437 <Vm::fpuGet0()>:
c001f437:	31 c0                	xor    eax,eax
c001f439:	31 d2                	xor    edx,edx
c001f43b:	c3                   	ret    

c001f43c <Vm::fpuGet1()>:
c001f43c:	b8 01 00 00 00       	mov    eax,0x1
c001f441:	31 d2                	xor    edx,edx
c001f443:	c3                   	ret    

c001f444 <Vm::fpuGetPi()>:
c001f444:	b8 03 00 00 00       	mov    eax,0x3
c001f449:	31 d2                	xor    edx,edx
c001f44b:	c3                   	ret    

c001f44c <Vm::fpuGetLog2E()>:
c001f44c:	83 ec 18             	sub    esp,0x18
c001f44f:	68 14 c4 02 c0       	push   0xc002c414
c001f454:	e8 de ad ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001f459:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f45e:	31 d2                	xor    edx,edx
c001f460:	83 c4 1c             	add    esp,0x1c
c001f463:	c3                   	ret    

c001f464 <Vm::fpuGetLogE2()>:
c001f464:	83 ec 18             	sub    esp,0x18
c001f467:	68 20 c4 02 c0       	push   0xc002c420
c001f46c:	e8 c6 ad ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001f471:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f476:	31 d2                	xor    edx,edx
c001f478:	83 c4 1c             	add    esp,0x1c
c001f47b:	c3                   	ret    

c001f47c <Vm::fpuGetLog210()>:
c001f47c:	83 ec 18             	sub    esp,0x18
c001f47f:	68 2c c4 02 c0       	push   0xc002c42c
c001f484:	e8 ae ad ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001f489:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f48e:	31 d2                	xor    edx,edx
c001f490:	83 c4 1c             	add    esp,0x1c
c001f493:	c3                   	ret    

c001f494 <Vm::fpuGetLog102()>:
c001f494:	83 ec 18             	sub    esp,0x18
c001f497:	68 39 c4 02 c0       	push   0xc002c439
c001f49c:	e8 96 ad ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001f4a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f4a6:	31 d2                	xor    edx,edx
c001f4a8:	83 c4 1c             	add    esp,0x1c
c001f4ab:	c3                   	ret    

c001f4ac <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f4ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4b0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f4b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4b8:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f4bc:	0f 92 c0             	setb   al
c001f4bf:	c3                   	ret    

c001f4c0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f4c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f4cc:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f4d0:	09 c2                	or     edx,eax
c001f4d2:	0f 94 c0             	sete   al
c001f4d5:	c3                   	ret    

c001f4d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f4d6:	57                   	push   edi
c001f4d7:	56                   	push   esi
c001f4d8:	53                   	push   ebx
c001f4d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f4dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f4e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f4e5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f4e9:	57                   	push   edi
c001f4ea:	56                   	push   esi
c001f4eb:	53                   	push   ebx
c001f4ec:	51                   	push   ecx
c001f4ed:	e8 ce ff ff ff       	call   c001f4c0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f4f2:	83 c4 10             	add    esp,0x10
c001f4f5:	88 c2                	mov    dl,al
c001f4f7:	31 c0                	xor    eax,eax
c001f4f9:	84 d2                	test   dl,dl
c001f4fb:	75 0c                	jne    c001f509 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	53                   	push   ebx
c001f500:	51                   	push   ecx
c001f501:	e8 a6 ff ff ff       	call   c001f4ac <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f506:	83 c4 10             	add    esp,0x10
c001f509:	83 e0 01             	and    eax,0x1
c001f50c:	5b                   	pop    ebx
c001f50d:	88 c1                	mov    cl,al
c001f50f:	83 e2 01             	and    edx,0x1
c001f512:	a0 a1 16 03 c0       	mov    al,ds:0xc00316a1
c001f517:	c1 e2 06             	shl    edx,0x6
c001f51a:	83 e0 ba             	and    eax,0xffffffba
c001f51d:	5e                   	pop    esi
c001f51e:	09 c8                	or     eax,ecx
c001f520:	5f                   	pop    edi
c001f521:	09 d0                	or     eax,edx
c001f523:	a2 a1 16 03 c0       	mov    ds:0xc00316a1,al
c001f528:	c3                   	ret    

c001f529 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f52d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f531:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f535:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f539:	c3                   	ret    

c001f53a <Vm::fpuAbs(unsigned long long)>:
c001f53a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f53e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f542:	c3                   	ret    

c001f543 <Vm::fpuChs(unsigned long long)>:
c001f543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f547:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f54b:	f7 d8                	neg    eax
c001f54d:	83 d2 00             	adc    edx,0x0
c001f550:	f7 da                	neg    edx
c001f552:	c3                   	ret    

c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f553:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f557:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f55c:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f560:	eb c7                	jmp    c001f529 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f562 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f562:	53                   	push   ebx
c001f563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f567:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f56b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f56f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f573:	0f af ca             	imul   ecx,edx
c001f576:	0f af d8             	imul   ebx,eax
c001f579:	f7 e2                	mul    edx
c001f57b:	01 d9                	add    ecx,ebx
c001f57d:	5b                   	pop    ebx
c001f57e:	01 ca                	add    edx,ecx
c001f580:	c3                   	ret    

c001f581 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f581:	83 ec 0c             	sub    esp,0xc
c001f584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f594:	e8 a3 70 00 00       	call   c002663c <__udivdi3>
c001f599:	83 c4 1c             	add    esp,0x1c
c001f59c:	c3                   	ret    

c001f59d <Vm::fpuSquare(unsigned long long)>:
c001f59d:	50                   	push   eax
c001f59e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f5a6:	52                   	push   edx
c001f5a7:	50                   	push   eax
c001f5a8:	52                   	push   edx
c001f5a9:	50                   	push   eax
c001f5aa:	e8 b3 ff ff ff       	call   c001f562 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5af:	83 c4 14             	add    esp,0x14
c001f5b2:	c3                   	ret    

c001f5b3 <Vm::fpuGetReg(int)>:
c001f5b3:	83 ec 0c             	sub    esp,0xc
c001f5b6:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f5bb:	76 10                	jbe    c001f5cd <Vm::fpuGetReg(int)+0x1a>
c001f5bd:	83 ec 0c             	sub    esp,0xc
c001f5c0:	68 46 c4 02 c0       	push   0xc002c446
c001f5c5:	e8 6d ac ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	a0 a1 16 03 c0       	mov    al,ds:0xc00316a1
c001f5d2:	b9 08 00 00 00       	mov    ecx,0x8
c001f5d7:	c0 e8 03             	shr    al,0x3
c001f5da:	83 e0 07             	and    eax,0x7
c001f5dd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5e1:	99                   	cdq    
c001f5e2:	f7 f9                	idiv   ecx
c001f5e4:	8b 04 d5 a4 16 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce95c]
c001f5eb:	8b 14 d5 a8 16 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce958]
c001f5f2:	83 c4 0c             	add    esp,0xc
c001f5f5:	c3                   	ret    

c001f5f6 <Vm::fpuSetReg(int, unsigned long long)>:
c001f5f6:	57                   	push   edi
c001f5f7:	56                   	push   esi
c001f5f8:	52                   	push   edx
c001f5f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f5fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f601:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f606:	76 10                	jbe    c001f618 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	68 59 c4 02 c0       	push   0xc002c459
c001f610:	e8 22 ac ff ff       	call   c001a237 <Krnl::panic(char const*)>
c001f615:	83 c4 10             	add    esp,0x10
c001f618:	a0 a1 16 03 c0       	mov    al,ds:0xc00316a1
c001f61d:	b9 08 00 00 00       	mov    ecx,0x8
c001f622:	c0 e8 03             	shr    al,0x3
c001f625:	83 e0 07             	and    eax,0x7
c001f628:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f62c:	99                   	cdq    
c001f62d:	f7 f9                	idiv   ecx
c001f62f:	89 34 d5 a4 16 03 c0 	mov    DWORD PTR [edx*8-0x3ffce95c],esi
c001f636:	89 3c d5 a8 16 03 c0 	mov    DWORD PTR [edx*8-0x3ffce958],edi
c001f63d:	58                   	pop    eax
c001f63e:	5e                   	pop    esi
c001f63f:	5f                   	pop    edi
c001f640:	c3                   	ret    

c001f641 <Vm::fpuPush(unsigned long long)>:
c001f641:	a0 a1 16 03 c0       	mov    al,ds:0xc00316a1
c001f646:	c0 e8 03             	shr    al,0x3
c001f649:	83 e0 07             	and    eax,0x7
c001f64c:	83 c0 07             	add    eax,0x7
c001f64f:	88 c2                	mov    dl,al
c001f651:	83 e0 07             	and    eax,0x7
c001f654:	83 e2 07             	and    edx,0x7
c001f657:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f65e:	8a 15 a1 16 03 c0    	mov    dl,BYTE PTR ds:0xc00316a1
c001f664:	83 e2 c7             	and    edx,0xffffffc7
c001f667:	09 ca                	or     edx,ecx
c001f669:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f66d:	88 15 a1 16 03 c0    	mov    BYTE PTR ds:0xc00316a1,dl
c001f673:	89 0c c5 a8 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce958],ecx
c001f67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f67e:	89 14 c5 a4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce95c],edx
c001f685:	a1 e4 16 03 c0       	mov    eax,ds:0xc00316e4
c001f68a:	83 f8 08             	cmp    eax,0x8
c001f68d:	75 08                	jne    c001f697 <Vm::fpuPush(unsigned long long)+0x56>
c001f68f:	80 0d a0 16 03 c0 40 	or     BYTE PTR ds:0xc00316a0,0x40
c001f696:	c3                   	ret    
c001f697:	40                   	inc    eax
c001f698:	a3 e4 16 03 c0       	mov    ds:0xc00316e4,eax
c001f69d:	c3                   	ret    

c001f69e <Vm::fpuPop()>:
c001f69e:	8a 0d a1 16 03 c0    	mov    cl,BYTE PTR ds:0xc00316a1
c001f6a4:	53                   	push   ebx
c001f6a5:	c0 e9 03             	shr    cl,0x3
c001f6a8:	8a 1d a1 16 03 c0    	mov    bl,BYTE PTR ds:0xc00316a1
c001f6ae:	83 e1 07             	and    ecx,0x7
c001f6b1:	83 e3 c7             	and    ebx,0xffffffc7
c001f6b4:	8b 04 cd a4 16 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce95c]
c001f6bb:	8b 14 cd a8 16 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce958]
c001f6c2:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f6c9:	83 e1 38             	and    ecx,0x38
c001f6cc:	09 d9                	or     ecx,ebx
c001f6ce:	88 0d a1 16 03 c0    	mov    BYTE PTR ds:0xc00316a1,cl
c001f6d4:	8b 0d e4 16 03 c0    	mov    ecx,DWORD PTR ds:0xc00316e4
c001f6da:	85 c9                	test   ecx,ecx
c001f6dc:	74 09                	je     c001f6e7 <Vm::fpuPop()+0x49>
c001f6de:	49                   	dec    ecx
c001f6df:	89 0d e4 16 03 c0    	mov    DWORD PTR ds:0xc00316e4,ecx
c001f6e5:	eb 07                	jmp    c001f6ee <Vm::fpuPop()+0x50>
c001f6e7:	80 0d a0 16 03 c0 40 	or     BYTE PTR ds:0xc00316a0,0x40
c001f6ee:	5b                   	pop    ebx
c001f6ef:	c3                   	ret    

c001f6f0 <Vm::x87Handler(regs*)>:
c001f6f0:	55                   	push   ebp
c001f6f1:	57                   	push   edi
c001f6f2:	56                   	push   esi
c001f6f3:	53                   	push   ebx
c001f6f4:	83 ec 1c             	sub    esp,0x1c
c001f6f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f6fb:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f700:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f703:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f70b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f70f:	50                   	push   eax
c001f710:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f714:	50                   	push   eax
c001f715:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f719:	50                   	push   eax
c001f71a:	53                   	push   ebx
c001f71b:	e8 de a1 ff ff       	call   c00198fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f720:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f723:	83 c4 10             	add    esp,0x10
c001f726:	89 c6                	mov    esi,eax
c001f728:	80 fa d9             	cmp    dl,0xd9
c001f72b:	0f 85 52 01 00 00    	jne    c001f883 <Vm::x87Handler(regs*)+0x193>
c001f731:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f735:	8d 50 20             	lea    edx,[eax+0x20]
c001f738:	80 fa 0e             	cmp    dl,0xe
c001f73b:	0f 87 86 00 00 00    	ja     c001f7c7 <Vm::x87Handler(regs*)+0xd7>
c001f741:	0f b6 d2             	movzx  edx,dl
c001f744:	ff 24 95 6c c4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3b94]
c001f74b:	e8 e7 fc ff ff       	call   c001f437 <Vm::fpuGet0()>
c001f750:	eb 05                	jmp    c001f757 <Vm::x87Handler(regs*)+0x67>
c001f752:	e8 e5 fc ff ff       	call   c001f43c <Vm::fpuGet1()>
c001f757:	57                   	push   edi
c001f758:	57                   	push   edi
c001f759:	52                   	push   edx
c001f75a:	50                   	push   eax
c001f75b:	e8 e1 fe ff ff       	call   c001f641 <Vm::fpuPush(unsigned long long)>
c001f760:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f764:	83 c4 10             	add    esp,0x10
c001f767:	b0 01                	mov    al,0x1
c001f769:	e9 e3 09 00 00       	jmp    c0020151 <Vm::x87Handler(regs*)+0xa61>
c001f76e:	83 ec 0c             	sub    esp,0xc
c001f771:	6a 00                	push   0x0
c001f773:	e8 3b fe ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f778:	59                   	pop    ecx
c001f779:	5e                   	pop    esi
c001f77a:	52                   	push   edx
c001f77b:	50                   	push   eax
c001f77c:	e8 c2 fd ff ff       	call   c001f543 <Vm::fpuChs(unsigned long long)>
c001f781:	eb 13                	jmp    c001f796 <Vm::x87Handler(regs*)+0xa6>
c001f783:	83 ec 0c             	sub    esp,0xc
c001f786:	6a 00                	push   0x0
c001f788:	e8 26 fe ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f78d:	5f                   	pop    edi
c001f78e:	5d                   	pop    ebp
c001f78f:	52                   	push   edx
c001f790:	50                   	push   eax
c001f791:	e8 a4 fd ff ff       	call   c001f53a <Vm::fpuAbs(unsigned long long)>
c001f796:	83 c4 0c             	add    esp,0xc
c001f799:	52                   	push   edx
c001f79a:	50                   	push   eax
c001f79b:	6a 00                	push   0x0
c001f79d:	e8 54 fe ff ff       	call   c001f5f6 <Vm::fpuSetReg(int, unsigned long long)>
c001f7a2:	eb bc                	jmp    c001f760 <Vm::x87Handler(regs*)+0x70>
c001f7a4:	e8 d3 fc ff ff       	call   c001f47c <Vm::fpuGetLog210()>
c001f7a9:	eb ac                	jmp    c001f757 <Vm::x87Handler(regs*)+0x67>
c001f7ab:	e8 9c fc ff ff       	call   c001f44c <Vm::fpuGetLog2E()>
c001f7b0:	eb a5                	jmp    c001f757 <Vm::x87Handler(regs*)+0x67>
c001f7b2:	e8 8d fc ff ff       	call   c001f444 <Vm::fpuGetPi()>
c001f7b7:	eb 9e                	jmp    c001f757 <Vm::x87Handler(regs*)+0x67>
c001f7b9:	e8 d6 fc ff ff       	call   c001f494 <Vm::fpuGetLog102()>
c001f7be:	eb 97                	jmp    c001f757 <Vm::x87Handler(regs*)+0x67>
c001f7c0:	e8 9f fc ff ff       	call   c001f464 <Vm::fpuGetLogE2()>
c001f7c5:	eb 90                	jmp    c001f757 <Vm::x87Handler(regs*)+0x67>
c001f7c7:	8d 50 40             	lea    edx,[eax+0x40]
c001f7ca:	80 fa 07             	cmp    dl,0x7
c001f7cd:	77 15                	ja     c001f7e4 <Vm::x87Handler(regs*)+0xf4>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	2d c0 00 00 00       	sub    eax,0xc0
c001f7d7:	50                   	push   eax
c001f7d8:	e8 d6 fd ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f7dd:	59                   	pop    ecx
c001f7de:	5e                   	pop    esi
c001f7df:	e9 75 ff ff ff       	jmp    c001f759 <Vm::x87Handler(regs*)+0x69>
c001f7e4:	8d 50 38             	lea    edx,[eax+0x38]
c001f7e7:	80 fa 07             	cmp    dl,0x7
c001f7ea:	77 3c                	ja     c001f828 <Vm::x87Handler(regs*)+0x138>
c001f7ec:	83 ec 0c             	sub    esp,0xc
c001f7ef:	2d c8 00 00 00       	sub    eax,0xc8
c001f7f4:	50                   	push   eax
c001f7f5:	e8 b9 fd ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f7fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f801:	89 c6                	mov    esi,eax
c001f803:	89 d7                	mov    edi,edx
c001f805:	e8 a9 fd ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f80a:	83 c4 0c             	add    esp,0xc
c001f80d:	52                   	push   edx
c001f80e:	50                   	push   eax
c001f80f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f813:	2d c8 00 00 00       	sub    eax,0xc8
c001f818:	50                   	push   eax
c001f819:	e8 d8 fd ff ff       	call   c001f5f6 <Vm::fpuSetReg(int, unsigned long long)>
c001f81e:	83 c4 0c             	add    esp,0xc
c001f821:	57                   	push   edi
c001f822:	56                   	push   esi
c001f823:	e9 73 ff ff ff       	jmp    c001f79b <Vm::x87Handler(regs*)+0xab>
c001f828:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f82c:	84 d2                	test   dl,dl
c001f82e:	75 0f                	jne    c001f83f <Vm::x87Handler(regs*)+0x14f>
c001f830:	83 ec 0c             	sub    esp,0xc
c001f833:	ff 36                	push   DWORD PTR [esi]
c001f835:	e8 c8 fa ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001f83a:	e9 bf 00 00 00       	jmp    c001f8fe <Vm::x87Handler(regs*)+0x20e>
c001f83f:	80 fa 03             	cmp    dl,0x3
c001f842:	75 13                	jne    c001f857 <Vm::x87Handler(regs*)+0x167>
c001f844:	e8 55 fe ff ff       	call   c001f69e <Vm::fpuPop()>
c001f849:	55                   	push   ebp
c001f84a:	55                   	push   ebp
c001f84b:	52                   	push   edx
c001f84c:	50                   	push   eax
c001f84d:	e8 4c fa ff ff       	call   c001f29e <Vm::fpuInternalTo32(unsigned long long)>
c001f852:	e9 88 00 00 00       	jmp    c001f8df <Vm::x87Handler(regs*)+0x1ef>
c001f857:	80 fa 05             	cmp    dl,0x5
c001f85a:	75 0e                	jne    c001f86a <Vm::x87Handler(regs*)+0x17a>
c001f85c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f85f:	66 a3 a2 16 03 c0    	mov    ds:0xc00316a2,ax
c001f865:	e9 df 00 00 00       	jmp    c001f949 <Vm::x87Handler(regs*)+0x259>
c001f86a:	31 c0                	xor    eax,eax
c001f86c:	80 fa 07             	cmp    dl,0x7
c001f86f:	0f 85 dc 08 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c001f875:	66 a1 a2 16 03 c0    	mov    ax,ds:0xc00316a2
c001f87b:	66 89 06             	mov    WORD PTR [esi],ax
c001f87e:	e9 c6 00 00 00       	jmp    c001f949 <Vm::x87Handler(regs*)+0x259>
c001f883:	80 fa d8             	cmp    dl,0xd8
c001f886:	0f 84 c9 00 00 00    	je     c001f955 <Vm::x87Handler(regs*)+0x265>
c001f88c:	80 fa dc             	cmp    dl,0xdc
c001f88f:	0f 84 0d 02 00 00    	je     c001faa2 <Vm::x87Handler(regs*)+0x3b2>
c001f895:	80 fa de             	cmp    dl,0xde
c001f898:	0f 84 cd 02 00 00    	je     c001fb6b <Vm::x87Handler(regs*)+0x47b>
c001f89e:	80 fa dd             	cmp    dl,0xdd
c001f8a1:	0f 84 5f 04 00 00    	je     c001fd06 <Vm::x87Handler(regs*)+0x616>
c001f8a7:	80 fa da             	cmp    dl,0xda
c001f8aa:	0f 84 24 05 00 00    	je     c001fdd4 <Vm::x87Handler(regs*)+0x6e4>
c001f8b0:	80 fa df             	cmp    dl,0xdf
c001f8b3:	0f 84 68 05 00 00    	je     c001fe21 <Vm::x87Handler(regs*)+0x731>
c001f8b9:	31 c0                	xor    eax,eax
c001f8bb:	80 fa db             	cmp    dl,0xdb
c001f8be:	0f 85 8d 08 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c001f8c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8c8:	80 fa 03             	cmp    dl,0x3
c001f8cb:	0f 85 70 06 00 00    	jne    c001ff41 <Vm::x87Handler(regs*)+0x851>
c001f8d1:	e8 c8 fd ff ff       	call   c001f69e <Vm::fpuPop()>
c001f8d6:	55                   	push   ebp
c001f8d7:	55                   	push   ebp
c001f8d8:	52                   	push   edx
c001f8d9:	50                   	push   eax
c001f8da:	e8 71 fa ff ff       	call   c001f350 <Vm::fpuFloatToLong(unsigned long long)>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	89 06                	mov    DWORD PTR [esi],eax
c001f8e4:	eb 63                	jmp    c001f949 <Vm::x87Handler(regs*)+0x259>
c001f8e6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8ea:	84 d2                	test   dl,dl
c001f8ec:	0f 85 e6 05 00 00    	jne    c001fed8 <Vm::x87Handler(regs*)+0x7e8>
c001f8f2:	57                   	push   edi
c001f8f3:	57                   	push   edi
c001f8f4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8f7:	ff 36                	push   DWORD PTR [esi]
c001f8f9:	e8 49 fa ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c001f8fe:	5e                   	pop    esi
c001f8ff:	5f                   	pop    edi
c001f900:	52                   	push   edx
c001f901:	50                   	push   eax
c001f902:	e8 3a fd ff ff       	call   c001f641 <Vm::fpuPush(unsigned long long)>
c001f907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f90b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f90e:	e9 51 fe ff ff       	jmp    c001f764 <Vm::x87Handler(regs*)+0x74>
c001f913:	80 fa 03             	cmp    dl,0x3
c001f916:	0f 85 d7 06 00 00    	jne    c001fff3 <Vm::x87Handler(regs*)+0x903>
c001f91c:	57                   	push   edi
c001f91d:	57                   	push   edi
c001f91e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f921:	ff 36                	push   DWORD PTR [esi]
c001f923:	e8 1f fa ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c001f928:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f92f:	89 c6                	mov    esi,eax
c001f931:	89 d7                	mov    edi,edx
c001f933:	e8 7b fc ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f938:	57                   	push   edi
c001f939:	56                   	push   esi
c001f93a:	52                   	push   edx
c001f93b:	50                   	push   eax
c001f93c:	e8 95 fb ff ff       	call   c001f4d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f941:	83 c4 20             	add    esp,0x20
c001f944:	e8 55 fd ff ff       	call   c001f69e <Vm::fpuPop()>
c001f949:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f94d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f950:	e9 12 fe ff ff       	jmp    c001f767 <Vm::x87Handler(regs*)+0x77>
c001f955:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f959:	8d 50 40             	lea    edx,[eax+0x40]
c001f95c:	80 fa 07             	cmp    dl,0x7
c001f95f:	77 29                	ja     c001f98a <Vm::x87Handler(regs*)+0x29a>
c001f961:	83 ec 0c             	sub    esp,0xc
c001f964:	2d c0 00 00 00       	sub    eax,0xc0
c001f969:	50                   	push   eax
c001f96a:	e8 44 fc ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f96f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f976:	89 c6                	mov    esi,eax
c001f978:	89 d7                	mov    edi,edx
c001f97a:	e8 34 fc ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f97f:	57                   	push   edi
c001f980:	56                   	push   esi
c001f981:	52                   	push   edx
c001f982:	50                   	push   eax
c001f983:	e8 a1 fb ff ff       	call   c001f529 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f988:	eb 2f                	jmp    c001f9b9 <Vm::x87Handler(regs*)+0x2c9>
c001f98a:	8d 50 38             	lea    edx,[eax+0x38]
c001f98d:	80 fa 07             	cmp    dl,0x7
c001f990:	77 2f                	ja     c001f9c1 <Vm::x87Handler(regs*)+0x2d1>
c001f992:	83 ec 0c             	sub    esp,0xc
c001f995:	2d c8 00 00 00       	sub    eax,0xc8
c001f99a:	50                   	push   eax
c001f99b:	e8 13 fc ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f9a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9a7:	89 c6                	mov    esi,eax
c001f9a9:	89 d7                	mov    edi,edx
c001f9ab:	e8 03 fc ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001f9b0:	57                   	push   edi
c001f9b1:	56                   	push   esi
c001f9b2:	52                   	push   edx
c001f9b3:	50                   	push   eax
c001f9b4:	e8 a9 fb ff ff       	call   c001f562 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9b9:	83 c4 1c             	add    esp,0x1c
c001f9bc:	e9 d8 fd ff ff       	jmp    c001f799 <Vm::x87Handler(regs*)+0xa9>
c001f9c1:	8d 50 30             	lea    edx,[eax+0x30]
c001f9c4:	80 fa 07             	cmp    dl,0x7
c001f9c7:	77 0d                	ja     c001f9d6 <Vm::x87Handler(regs*)+0x2e6>
c001f9c9:	83 ec 0c             	sub    esp,0xc
c001f9cc:	2d d0 00 00 00       	sub    eax,0xd0
c001f9d1:	e9 99 03 00 00       	jmp    c001fd6f <Vm::x87Handler(regs*)+0x67f>
c001f9d6:	8d 50 28             	lea    edx,[eax+0x28]
c001f9d9:	80 fa 07             	cmp    dl,0x7
c001f9dc:	77 0d                	ja     c001f9eb <Vm::x87Handler(regs*)+0x2fb>
c001f9de:	83 ec 0c             	sub    esp,0xc
c001f9e1:	2d d8 00 00 00       	sub    eax,0xd8
c001f9e6:	e9 c0 03 00 00       	jmp    c001fdab <Vm::x87Handler(regs*)+0x6bb>
c001f9eb:	8d 50 20             	lea    edx,[eax+0x20]
c001f9ee:	80 fa 07             	cmp    dl,0x7
c001f9f1:	77 1b                	ja     c001fa0e <Vm::x87Handler(regs*)+0x31e>
c001f9f3:	83 ec 0c             	sub    esp,0xc
c001f9f6:	2d e0 00 00 00       	sub    eax,0xe0
c001f9fb:	50                   	push   eax
c001f9fc:	e8 b2 fb ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fa01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa08:	89 c6                	mov    esi,eax
c001fa0a:	89 d7                	mov    edi,edx
c001fa0c:	eb 22                	jmp    c001fa30 <Vm::x87Handler(regs*)+0x340>
c001fa0e:	8d 50 18             	lea    edx,[eax+0x18]
c001fa11:	80 fa 07             	cmp    dl,0x7
c001fa14:	77 2d                	ja     c001fa43 <Vm::x87Handler(regs*)+0x353>
c001fa16:	83 ec 0c             	sub    esp,0xc
c001fa19:	6a 00                	push   0x0
c001fa1b:	e8 93 fb ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fa20:	89 c6                	mov    esi,eax
c001fa22:	89 d7                	mov    edi,edx
c001fa24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa28:	2d e8 00 00 00       	sub    eax,0xe8
c001fa2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa30:	e8 7e fb ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fa35:	57                   	push   edi
c001fa36:	56                   	push   esi
c001fa37:	52                   	push   edx
c001fa38:	50                   	push   eax
c001fa39:	e8 15 fb ff ff       	call   c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa3e:	e9 76 ff ff ff       	jmp    c001f9b9 <Vm::x87Handler(regs*)+0x2c9>
c001fa43:	8d 50 10             	lea    edx,[eax+0x10]
c001fa46:	80 fa 07             	cmp    dl,0x7
c001fa49:	77 1b                	ja     c001fa66 <Vm::x87Handler(regs*)+0x376>
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	2d f0 00 00 00       	sub    eax,0xf0
c001fa53:	50                   	push   eax
c001fa54:	e8 5a fb ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fa59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa60:	89 c6                	mov    esi,eax
c001fa62:	89 d7                	mov    edi,edx
c001fa64:	eb 22                	jmp    c001fa88 <Vm::x87Handler(regs*)+0x398>
c001fa66:	3c f7                	cmp    al,0xf7
c001fa68:	0f 86 d1 03 00 00    	jbe    c001fe3f <Vm::x87Handler(regs*)+0x74f>
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	6a 00                	push   0x0
c001fa73:	e8 3b fb ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fa78:	89 c6                	mov    esi,eax
c001fa7a:	89 d7                	mov    edi,edx
c001fa7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa80:	2d f8 00 00 00       	sub    eax,0xf8
c001fa85:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa88:	e8 26 fb ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fa8d:	57                   	push   edi
c001fa8e:	56                   	push   esi
c001fa8f:	52                   	push   edx
c001fa90:	50                   	push   eax
c001fa91:	e8 eb fa ff ff       	call   c001f581 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa96:	83 c4 1c             	add    esp,0x1c
c001fa99:	52                   	push   edx
c001fa9a:	50                   	push   eax
c001fa9b:	6a 00                	push   0x0
c001fa9d:	e9 51 02 00 00       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x603>
c001faa2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faa6:	8d 50 40             	lea    edx,[eax+0x40]
c001faa9:	80 fa 07             	cmp    dl,0x7
c001faac:	77 37                	ja     c001fae5 <Vm::x87Handler(regs*)+0x3f5>
c001faae:	83 ec 0c             	sub    esp,0xc
c001fab1:	2d c0 00 00 00       	sub    eax,0xc0
c001fab6:	50                   	push   eax
c001fab7:	e8 f7 fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fabc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac3:	89 c6                	mov    esi,eax
c001fac5:	89 d7                	mov    edi,edx
c001fac7:	e8 e7 fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001facc:	57                   	push   edi
c001facd:	56                   	push   esi
c001face:	52                   	push   edx
c001facf:	50                   	push   eax
c001fad0:	e8 54 fa ff ff       	call   c001f529 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fad5:	83 c4 1c             	add    esp,0x1c
c001fad8:	52                   	push   edx
c001fad9:	50                   	push   eax
c001fada:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fade:	2d c0 00 00 00       	sub    eax,0xc0
c001fae3:	eb 3d                	jmp    c001fb22 <Vm::x87Handler(regs*)+0x432>
c001fae5:	8d 50 38             	lea    edx,[eax+0x38]
c001fae8:	80 fa 07             	cmp    dl,0x7
c001faeb:	77 3b                	ja     c001fb28 <Vm::x87Handler(regs*)+0x438>
c001faed:	83 ec 0c             	sub    esp,0xc
c001faf0:	2d c8 00 00 00       	sub    eax,0xc8
c001faf5:	50                   	push   eax
c001faf6:	e8 b8 fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fafb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb02:	89 c6                	mov    esi,eax
c001fb04:	89 d7                	mov    edi,edx
c001fb06:	e8 a8 fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fb0b:	57                   	push   edi
c001fb0c:	56                   	push   esi
c001fb0d:	52                   	push   edx
c001fb0e:	50                   	push   eax
c001fb0f:	e8 4e fa ff ff       	call   c001f562 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb14:	83 c4 1c             	add    esp,0x1c
c001fb17:	52                   	push   edx
c001fb18:	50                   	push   eax
c001fb19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb1d:	2d c8 00 00 00       	sub    eax,0xc8
c001fb22:	50                   	push   eax
c001fb23:	e9 75 fc ff ff       	jmp    c001f79d <Vm::x87Handler(regs*)+0xad>
c001fb28:	83 c0 18             	add    eax,0x18
c001fb2b:	3c 07                	cmp    al,0x7
c001fb2d:	0f 87 3b 04 00 00    	ja     c001ff6e <Vm::x87Handler(regs*)+0x87e>
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	6a 00                	push   0x0
c001fb38:	e8 76 fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fb3d:	89 c6                	mov    esi,eax
c001fb3f:	89 d7                	mov    edi,edx
c001fb41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb45:	2d e8 00 00 00       	sub    eax,0xe8
c001fb4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb4d:	e8 61 fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fb52:	57                   	push   edi
c001fb53:	56                   	push   esi
c001fb54:	52                   	push   edx
c001fb55:	50                   	push   eax
c001fb56:	e8 f8 f9 ff ff       	call   c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb5b:	83 c4 1c             	add    esp,0x1c
c001fb5e:	52                   	push   edx
c001fb5f:	50                   	push   eax
c001fb60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb64:	2d e8 00 00 00       	sub    eax,0xe8
c001fb69:	eb b7                	jmp    c001fb22 <Vm::x87Handler(regs*)+0x432>
c001fb6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6f:	8d 50 40             	lea    edx,[eax+0x40]
c001fb72:	80 fa 07             	cmp    dl,0x7
c001fb75:	77 3a                	ja     c001fbb1 <Vm::x87Handler(regs*)+0x4c1>
c001fb77:	83 ec 0c             	sub    esp,0xc
c001fb7a:	2d c0 00 00 00       	sub    eax,0xc0
c001fb7f:	50                   	push   eax
c001fb80:	e8 2e fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fb85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb8c:	89 c6                	mov    esi,eax
c001fb8e:	89 d7                	mov    edi,edx
c001fb90:	e8 1e fa ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fb95:	57                   	push   edi
c001fb96:	56                   	push   esi
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	e8 8b f9 ff ff       	call   c001f529 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb9e:	83 c4 1c             	add    esp,0x1c
c001fba1:	52                   	push   edx
c001fba2:	50                   	push   eax
c001fba3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fba7:	2d c0 00 00 00       	sub    eax,0xc0
c001fbac:	e9 9e 01 00 00       	jmp    c001fd4f <Vm::x87Handler(regs*)+0x65f>
c001fbb1:	8d 50 20             	lea    edx,[eax+0x20]
c001fbb4:	80 fa 07             	cmp    dl,0x7
c001fbb7:	77 3a                	ja     c001fbf3 <Vm::x87Handler(regs*)+0x503>
c001fbb9:	83 ec 0c             	sub    esp,0xc
c001fbbc:	2d e0 00 00 00       	sub    eax,0xe0
c001fbc1:	50                   	push   eax
c001fbc2:	e8 ec f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fbc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbce:	89 c6                	mov    esi,eax
c001fbd0:	89 d7                	mov    edi,edx
c001fbd2:	e8 dc f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fbd7:	57                   	push   edi
c001fbd8:	56                   	push   esi
c001fbd9:	52                   	push   edx
c001fbda:	50                   	push   eax
c001fbdb:	e8 73 f9 ff ff       	call   c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbe0:	83 c4 1c             	add    esp,0x1c
c001fbe3:	52                   	push   edx
c001fbe4:	50                   	push   eax
c001fbe5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbe9:	2d e0 00 00 00       	sub    eax,0xe0
c001fbee:	e9 5c 01 00 00       	jmp    c001fd4f <Vm::x87Handler(regs*)+0x65f>
c001fbf3:	8d 50 18             	lea    edx,[eax+0x18]
c001fbf6:	80 fa 07             	cmp    dl,0x7
c001fbf9:	77 3b                	ja     c001fc36 <Vm::x87Handler(regs*)+0x546>
c001fbfb:	83 ec 0c             	sub    esp,0xc
c001fbfe:	6a 00                	push   0x0
c001fc00:	e8 ae f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fc05:	89 c6                	mov    esi,eax
c001fc07:	89 d7                	mov    edi,edx
c001fc09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc0d:	2d e8 00 00 00       	sub    eax,0xe8
c001fc12:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc15:	e8 99 f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fc1a:	57                   	push   edi
c001fc1b:	56                   	push   esi
c001fc1c:	52                   	push   edx
c001fc1d:	50                   	push   eax
c001fc1e:	e8 30 f9 ff ff       	call   c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc23:	83 c4 1c             	add    esp,0x1c
c001fc26:	52                   	push   edx
c001fc27:	50                   	push   eax
c001fc28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc2c:	2d e8 00 00 00       	sub    eax,0xe8
c001fc31:	e9 19 01 00 00       	jmp    c001fd4f <Vm::x87Handler(regs*)+0x65f>
c001fc36:	8d 50 38             	lea    edx,[eax+0x38]
c001fc39:	80 fa 07             	cmp    dl,0x7
c001fc3c:	77 37                	ja     c001fc75 <Vm::x87Handler(regs*)+0x585>
c001fc3e:	83 ec 0c             	sub    esp,0xc
c001fc41:	2d c8 00 00 00       	sub    eax,0xc8
c001fc46:	50                   	push   eax
c001fc47:	e8 67 f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fc4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc53:	89 c6                	mov    esi,eax
c001fc55:	89 d7                	mov    edi,edx
c001fc57:	e8 57 f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fc5c:	57                   	push   edi
c001fc5d:	56                   	push   esi
c001fc5e:	52                   	push   edx
c001fc5f:	50                   	push   eax
c001fc60:	e8 fd f8 ff ff       	call   c001f562 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc65:	83 c4 1c             	add    esp,0x1c
c001fc68:	52                   	push   edx
c001fc69:	50                   	push   eax
c001fc6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc6e:	2d c8 00 00 00       	sub    eax,0xc8
c001fc73:	eb 7d                	jmp    c001fcf2 <Vm::x87Handler(regs*)+0x602>
c001fc75:	3c f7                	cmp    al,0xf7
c001fc77:	76 38                	jbe    c001fcb1 <Vm::x87Handler(regs*)+0x5c1>
c001fc79:	83 ec 0c             	sub    esp,0xc
c001fc7c:	6a 00                	push   0x0
c001fc7e:	e8 30 f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fc83:	89 c6                	mov    esi,eax
c001fc85:	89 d7                	mov    edi,edx
c001fc87:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc8b:	2d f8 00 00 00       	sub    eax,0xf8
c001fc90:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc93:	e8 1b f9 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fc98:	57                   	push   edi
c001fc99:	56                   	push   esi
c001fc9a:	52                   	push   edx
c001fc9b:	50                   	push   eax
c001fc9c:	e8 e0 f8 ff ff       	call   c001f581 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fca1:	83 c4 1c             	add    esp,0x1c
c001fca4:	52                   	push   edx
c001fca5:	50                   	push   eax
c001fca6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcaa:	2d f8 00 00 00       	sub    eax,0xf8
c001fcaf:	eb 41                	jmp    c001fcf2 <Vm::x87Handler(regs*)+0x602>
c001fcb1:	8d 50 10             	lea    edx,[eax+0x10]
c001fcb4:	80 fa 07             	cmp    dl,0x7
c001fcb7:	0f 87 5a 01 00 00    	ja     c001fe17 <Vm::x87Handler(regs*)+0x727>
c001fcbd:	83 ec 0c             	sub    esp,0xc
c001fcc0:	2d f0 00 00 00       	sub    eax,0xf0
c001fcc5:	50                   	push   eax
c001fcc6:	e8 e8 f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fccb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd2:	89 c6                	mov    esi,eax
c001fcd4:	89 d7                	mov    edi,edx
c001fcd6:	e8 d8 f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fcdb:	57                   	push   edi
c001fcdc:	56                   	push   esi
c001fcdd:	52                   	push   edx
c001fcde:	50                   	push   eax
c001fcdf:	e8 9d f8 ff ff       	call   c001f581 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fce4:	83 c4 1c             	add    esp,0x1c
c001fce7:	52                   	push   edx
c001fce8:	50                   	push   eax
c001fce9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fced:	2d f0 00 00 00       	sub    eax,0xf0
c001fcf2:	50                   	push   eax
c001fcf3:	e8 fe f8 ff ff       	call   c001f5f6 <Vm::fpuSetReg(int, unsigned long long)>
c001fcf8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcfc:	e8 9d f9 ff ff       	call   c001f69e <Vm::fpuPop()>
c001fd01:	e9 5e fa ff ff       	jmp    c001f764 <Vm::x87Handler(regs*)+0x74>
c001fd06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd0a:	8d 50 30             	lea    edx,[eax+0x30]
c001fd0d:	80 fa 07             	cmp    dl,0x7
c001fd10:	77 1d                	ja     c001fd2f <Vm::x87Handler(regs*)+0x63f>
c001fd12:	83 ec 0c             	sub    esp,0xc
c001fd15:	6a 00                	push   0x0
c001fd17:	e8 97 f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fd1c:	83 c4 0c             	add    esp,0xc
c001fd1f:	52                   	push   edx
c001fd20:	50                   	push   eax
c001fd21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd25:	2d d0 00 00 00       	sub    eax,0xd0
c001fd2a:	e9 f3 fd ff ff       	jmp    c001fb22 <Vm::x87Handler(regs*)+0x432>
c001fd2f:	8d 50 28             	lea    edx,[eax+0x28]
c001fd32:	80 fa 07             	cmp    dl,0x7
c001fd35:	77 28                	ja     c001fd5f <Vm::x87Handler(regs*)+0x66f>
c001fd37:	83 ec 0c             	sub    esp,0xc
c001fd3a:	6a 00                	push   0x0
c001fd3c:	e8 72 f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fd41:	83 c4 0c             	add    esp,0xc
c001fd44:	52                   	push   edx
c001fd45:	50                   	push   eax
c001fd46:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd4a:	2d d8 00 00 00       	sub    eax,0xd8
c001fd4f:	50                   	push   eax
c001fd50:	e8 a1 f8 ff ff       	call   c001f5f6 <Vm::fpuSetReg(int, unsigned long long)>
c001fd55:	e8 44 f9 ff ff       	call   c001f69e <Vm::fpuPop()>
c001fd5a:	e9 01 fa ff ff       	jmp    c001f760 <Vm::x87Handler(regs*)+0x70>
c001fd5f:	8d 50 20             	lea    edx,[eax+0x20]
c001fd62:	80 fa 07             	cmp    dl,0x7
c001fd65:	77 30                	ja     c001fd97 <Vm::x87Handler(regs*)+0x6a7>
c001fd67:	83 ec 0c             	sub    esp,0xc
c001fd6a:	2d e0 00 00 00       	sub    eax,0xe0
c001fd6f:	50                   	push   eax
c001fd70:	e8 3e f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fd75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd7c:	89 c6                	mov    esi,eax
c001fd7e:	89 d7                	mov    edi,edx
c001fd80:	e8 2e f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fd85:	57                   	push   edi
c001fd86:	56                   	push   esi
c001fd87:	52                   	push   edx
c001fd88:	50                   	push   eax
c001fd89:	e8 48 f7 ff ff       	call   c001f4d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd8e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd92:	e9 54 02 00 00       	jmp    c001ffeb <Vm::x87Handler(regs*)+0x8fb>
c001fd97:	8d 50 18             	lea    edx,[eax+0x18]
c001fd9a:	80 fa 07             	cmp    dl,0x7
c001fd9d:	0f 87 43 fb ff ff    	ja     c001f8e6 <Vm::x87Handler(regs*)+0x1f6>
c001fda3:	83 ec 0c             	sub    esp,0xc
c001fda6:	2d e8 00 00 00       	sub    eax,0xe8
c001fdab:	50                   	push   eax
c001fdac:	e8 02 f8 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fdb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb8:	89 c6                	mov    esi,eax
c001fdba:	89 d7                	mov    edi,edx
c001fdbc:	e8 f2 f7 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fdc1:	57                   	push   edi
c001fdc2:	56                   	push   esi
c001fdc3:	52                   	push   edx
c001fdc4:	50                   	push   eax
c001fdc5:	e8 0c f7 ff ff       	call   c001f4d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdca:	83 c4 20             	add    esp,0x20
c001fdcd:	e8 cc f8 ff ff       	call   c001f69e <Vm::fpuPop()>
c001fdd2:	eb 62                	jmp    c001fe36 <Vm::x87Handler(regs*)+0x746>
c001fdd4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fdd8:	0f 85 0f 01 00 00    	jne    c001feed <Vm::x87Handler(regs*)+0x7fd>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	6a 01                	push   0x1
c001fde3:	e8 cb f7 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fde8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdef:	89 c6                	mov    esi,eax
c001fdf1:	89 d7                	mov    edi,edx
c001fdf3:	e8 bb f7 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fdf8:	57                   	push   edi
c001fdf9:	56                   	push   esi
c001fdfa:	52                   	push   edx
c001fdfb:	50                   	push   eax
c001fdfc:	e8 d5 f6 ff ff       	call   c001f4d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe01:	83 c4 20             	add    esp,0x20
c001fe04:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe08:	e8 91 f8 ff ff       	call   c001f69e <Vm::fpuPop()>
c001fe0d:	e8 8c f8 ff ff       	call   c001f69e <Vm::fpuPop()>
c001fe12:	e9 50 f9 ff ff       	jmp    c001f767 <Vm::x87Handler(regs*)+0x77>
c001fe17:	3c d9                	cmp    al,0xd9
c001fe19:	0f 85 b5 02 00 00    	jne    c00200d4 <Vm::x87Handler(regs*)+0x9e4>
c001fe1f:	eb bd                	jmp    c001fdde <Vm::x87Handler(regs*)+0x6ee>
c001fe21:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fe25:	0f 85 ea 02 00 00    	jne    c0020115 <Vm::x87Handler(regs*)+0xa25>
c001fe2b:	0f b7 05 a0 16 03 c0 	movzx  eax,WORD PTR ds:0xc00316a0
c001fe32:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fe36:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe3a:	e9 28 f9 ff ff       	jmp    c001f767 <Vm::x87Handler(regs*)+0x77>
c001fe3f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe43:	84 d2                	test   dl,dl
c001fe45:	75 0f                	jne    c001fe56 <Vm::x87Handler(regs*)+0x766>
c001fe47:	83 ec 0c             	sub    esp,0xc
c001fe4a:	ff 36                	push   DWORD PTR [esi]
c001fe4c:	e8 b1 f4 ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001fe51:	e9 2c 01 00 00       	jmp    c001ff82 <Vm::x87Handler(regs*)+0x892>
c001fe56:	80 fa 01             	cmp    dl,0x1
c001fe59:	75 0f                	jne    c001fe6a <Vm::x87Handler(regs*)+0x77a>
c001fe5b:	83 ec 0c             	sub    esp,0xc
c001fe5e:	ff 36                	push   DWORD PTR [esi]
c001fe60:	e8 9d f4 ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001fe65:	e9 81 02 00 00       	jmp    c00200eb <Vm::x87Handler(regs*)+0x9fb>
c001fe6a:	80 fa 04             	cmp    dl,0x4
c001fe6d:	75 0f                	jne    c001fe7e <Vm::x87Handler(regs*)+0x78e>
c001fe6f:	83 ec 0c             	sub    esp,0xc
c001fe72:	ff 36                	push   DWORD PTR [esi]
c001fe74:	e8 89 f4 ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001fe79:	e9 86 01 00 00       	jmp    c0020004 <Vm::x87Handler(regs*)+0x914>
c001fe7e:	80 fa 05             	cmp    dl,0x5
c001fe81:	75 1b                	jne    c001fe9e <Vm::x87Handler(regs*)+0x7ae>
c001fe83:	83 ec 0c             	sub    esp,0xc
c001fe86:	6a 00                	push   0x0
c001fe88:	e8 26 f7 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fe8d:	89 c7                	mov    edi,eax
c001fe8f:	89 d5                	mov    ebp,edx
c001fe91:	58                   	pop    eax
c001fe92:	ff 36                	push   DWORD PTR [esi]
c001fe94:	e8 69 f4 ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001fe99:	e9 a3 01 00 00       	jmp    c0020041 <Vm::x87Handler(regs*)+0x951>
c001fe9e:	80 fa 06             	cmp    dl,0x6
c001fea1:	75 0f                	jne    c001feb2 <Vm::x87Handler(regs*)+0x7c2>
c001fea3:	83 ec 0c             	sub    esp,0xc
c001fea6:	ff 36                	push   DWORD PTR [esi]
c001fea8:	e8 55 f4 ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001fead:	e9 ae 01 00 00       	jmp    c0020060 <Vm::x87Handler(regs*)+0x970>
c001feb2:	31 c0                	xor    eax,eax
c001feb4:	80 fa 07             	cmp    dl,0x7
c001feb7:	0f 85 94 02 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c001febd:	83 ec 0c             	sub    esp,0xc
c001fec0:	6a 00                	push   0x0
c001fec2:	e8 ec f6 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001fec7:	89 c7                	mov    edi,eax
c001fec9:	89 d5                	mov    ebp,edx
c001fecb:	58                   	pop    eax
c001fecc:	ff 36                	push   DWORD PTR [esi]
c001fece:	e8 2f f4 ff ff       	call   c001f302 <Vm::fpu32ToInternal(unsigned int)>
c001fed3:	e9 cb 01 00 00       	jmp    c00200a3 <Vm::x87Handler(regs*)+0x9b3>
c001fed8:	80 fa 03             	cmp    dl,0x3
c001fedb:	0f 85 d3 01 00 00    	jne    c00200b4 <Vm::x87Handler(regs*)+0x9c4>
c001fee1:	e8 b8 f7 ff ff       	call   c001f69e <Vm::fpuPop()>
c001fee6:	51                   	push   ecx
c001fee7:	51                   	push   ecx
c001fee8:	e9 de 01 00 00       	jmp    c00200cb <Vm::x87Handler(regs*)+0x9db>
c001feed:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fef1:	80 fa 01             	cmp    dl,0x1
c001fef4:	75 09                	jne    c001feff <Vm::x87Handler(regs*)+0x80f>
c001fef6:	57                   	push   edi
c001fef7:	57                   	push   edi
c001fef8:	8b 06                	mov    eax,DWORD PTR [esi]
c001fefa:	e9 e3 01 00 00       	jmp    c00200e2 <Vm::x87Handler(regs*)+0x9f2>
c001feff:	80 fa 04             	cmp    dl,0x4
c001ff02:	75 12                	jne    c001ff16 <Vm::x87Handler(regs*)+0x826>
c001ff04:	31 d2                	xor    edx,edx
c001ff06:	51                   	push   ecx
c001ff07:	51                   	push   ecx
c001ff08:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff0a:	52                   	push   edx
c001ff0b:	50                   	push   eax
c001ff0c:	e8 d0 f4 ff ff       	call   c001f3e1 <Vm::fpuLongToFloat(long long)>
c001ff11:	e9 ee 00 00 00       	jmp    c0020004 <Vm::x87Handler(regs*)+0x914>
c001ff16:	31 c0                	xor    eax,eax
c001ff18:	80 fa 07             	cmp    dl,0x7
c001ff1b:	0f 85 30 02 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	6a 00                	push   0x0
c001ff26:	e8 88 f6 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001ff2b:	89 c7                	mov    edi,eax
c001ff2d:	89 d5                	mov    ebp,edx
c001ff2f:	58                   	pop    eax
c001ff30:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff32:	5a                   	pop    edx
c001ff33:	31 d2                	xor    edx,edx
c001ff35:	52                   	push   edx
c001ff36:	50                   	push   eax
c001ff37:	e8 a5 f4 ff ff       	call   c001f3e1 <Vm::fpuLongToFloat(long long)>
c001ff3c:	e9 62 01 00 00       	jmp    c00200a3 <Vm::x87Handler(regs*)+0x9b3>
c001ff41:	84 d2                	test   dl,dl
c001ff43:	75 0d                	jne    c001ff52 <Vm::x87Handler(regs*)+0x862>
c001ff45:	31 d2                	xor    edx,edx
c001ff47:	55                   	push   ebp
c001ff48:	55                   	push   ebp
c001ff49:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff4b:	52                   	push   edx
c001ff4c:	50                   	push   eax
c001ff4d:	e9 d3 01 00 00       	jmp    c0020125 <Vm::x87Handler(regs*)+0xa35>
c001ff52:	31 c0                	xor    eax,eax
c001ff54:	80 fa 02             	cmp    dl,0x2
c001ff57:	0f 85 f4 01 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c001ff5d:	83 ec 0c             	sub    esp,0xc
c001ff60:	6a 00                	push   0x0
c001ff62:	e8 4c f6 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001ff67:	59                   	pop    ecx
c001ff68:	5f                   	pop    edi
c001ff69:	e9 6a f9 ff ff       	jmp    c001f8d8 <Vm::x87Handler(regs*)+0x1e8>
c001ff6e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff72:	84 d2                	test   dl,dl
c001ff74:	75 2a                	jne    c001ffa0 <Vm::x87Handler(regs*)+0x8b0>
c001ff76:	50                   	push   eax
c001ff77:	50                   	push   eax
c001ff78:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff7b:	ff 36                	push   DWORD PTR [esi]
c001ff7d:	e8 c5 f3 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c001ff82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff89:	89 c6                	mov    esi,eax
c001ff8b:	89 d7                	mov    edi,edx
c001ff8d:	e8 21 f6 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001ff92:	57                   	push   edi
c001ff93:	56                   	push   esi
c001ff94:	52                   	push   edx
c001ff95:	50                   	push   eax
c001ff96:	e8 8e f5 ff ff       	call   c001f529 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff9b:	e9 64 01 00 00       	jmp    c0020104 <Vm::x87Handler(regs*)+0xa14>
c001ffa0:	80 fa 01             	cmp    dl,0x1
c001ffa3:	75 11                	jne    c001ffb6 <Vm::x87Handler(regs*)+0x8c6>
c001ffa5:	50                   	push   eax
c001ffa6:	50                   	push   eax
c001ffa7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffaa:	ff 36                	push   DWORD PTR [esi]
c001ffac:	e8 96 f3 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c001ffb1:	e9 35 01 00 00       	jmp    c00200eb <Vm::x87Handler(regs*)+0x9fb>
c001ffb6:	80 fa 02             	cmp    dl,0x2
c001ffb9:	0f 85 54 f9 ff ff    	jne    c001f913 <Vm::x87Handler(regs*)+0x223>
c001ffbf:	55                   	push   ebp
c001ffc0:	55                   	push   ebp
c001ffc1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffc4:	ff 36                	push   DWORD PTR [esi]
c001ffc6:	e8 7c f3 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c001ffcb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffd2:	89 c6                	mov    esi,eax
c001ffd4:	89 d7                	mov    edi,edx
c001ffd6:	e8 d8 f5 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c001ffdb:	57                   	push   edi
c001ffdc:	56                   	push   esi
c001ffdd:	52                   	push   edx
c001ffde:	50                   	push   eax
c001ffdf:	e8 f2 f4 ff ff       	call   c001f4d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffe4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ffe8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ffeb:	83 c4 20             	add    esp,0x20
c001ffee:	e9 74 f7 ff ff       	jmp    c001f767 <Vm::x87Handler(regs*)+0x77>
c001fff3:	80 fa 04             	cmp    dl,0x4
c001fff6:	75 2a                	jne    c0020022 <Vm::x87Handler(regs*)+0x932>
c001fff8:	51                   	push   ecx
c001fff9:	51                   	push   ecx
c001fffa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fffd:	ff 36                	push   DWORD PTR [esi]
c001ffff:	e8 43 f3 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c0020004:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000b:	89 c6                	mov    esi,eax
c002000d:	89 d7                	mov    edi,edx
c002000f:	e8 9f f5 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c0020014:	57                   	push   edi
c0020015:	56                   	push   esi
c0020016:	52                   	push   edx
c0020017:	50                   	push   eax
c0020018:	e8 36 f5 ff ff       	call   c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002001d:	e9 e2 00 00 00       	jmp    c0020104 <Vm::x87Handler(regs*)+0xa14>
c0020022:	80 fa 05             	cmp    dl,0x5
c0020025:	75 28                	jne    c002004f <Vm::x87Handler(regs*)+0x95f>
c0020027:	83 ec 0c             	sub    esp,0xc
c002002a:	6a 00                	push   0x0
c002002c:	e8 82 f5 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c0020031:	89 c7                	mov    edi,eax
c0020033:	89 d5                	mov    ebp,edx
c0020035:	58                   	pop    eax
c0020036:	5a                   	pop    edx
c0020037:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002003a:	ff 36                	push   DWORD PTR [esi]
c002003c:	e8 06 f3 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c0020041:	83 c4 10             	add    esp,0x10
c0020044:	55                   	push   ebp
c0020045:	57                   	push   edi
c0020046:	52                   	push   edx
c0020047:	50                   	push   eax
c0020048:	e8 06 f5 ff ff       	call   c001f553 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002004d:	eb 60                	jmp    c00200af <Vm::x87Handler(regs*)+0x9bf>
c002004f:	80 fa 06             	cmp    dl,0x6
c0020052:	75 2a                	jne    c002007e <Vm::x87Handler(regs*)+0x98e>
c0020054:	51                   	push   ecx
c0020055:	51                   	push   ecx
c0020056:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020059:	ff 36                	push   DWORD PTR [esi]
c002005b:	e8 e7 f2 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c0020060:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020067:	89 c6                	mov    esi,eax
c0020069:	89 d7                	mov    edi,edx
c002006b:	e8 43 f5 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c0020070:	57                   	push   edi
c0020071:	56                   	push   esi
c0020072:	52                   	push   edx
c0020073:	50                   	push   eax
c0020074:	e8 08 f5 ff ff       	call   c001f581 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020079:	e9 86 00 00 00       	jmp    c0020104 <Vm::x87Handler(regs*)+0xa14>
c002007e:	31 c0                	xor    eax,eax
c0020080:	80 fa 07             	cmp    dl,0x7
c0020083:	0f 85 c8 00 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c0020089:	83 ec 0c             	sub    esp,0xc
c002008c:	6a 00                	push   0x0
c002008e:	e8 20 f5 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c0020093:	89 c7                	mov    edi,eax
c0020095:	89 d5                	mov    ebp,edx
c0020097:	58                   	pop    eax
c0020098:	5a                   	pop    edx
c0020099:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002009c:	ff 36                	push   DWORD PTR [esi]
c002009e:	e8 a4 f2 ff ff       	call   c001f347 <Vm::fpu64ToInternal(unsigned long long)>
c00200a3:	83 c4 10             	add    esp,0x10
c00200a6:	55                   	push   ebp
c00200a7:	57                   	push   edi
c00200a8:	52                   	push   edx
c00200a9:	50                   	push   eax
c00200aa:	e8 d2 f4 ff ff       	call   c001f581 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200af:	83 c4 0c             	add    esp,0xc
c00200b2:	eb 53                	jmp    c0020107 <Vm::x87Handler(regs*)+0xa17>
c00200b4:	31 c0                	xor    eax,eax
c00200b6:	80 fa 02             	cmp    dl,0x2
c00200b9:	0f 85 92 00 00 00    	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c00200bf:	83 ec 0c             	sub    esp,0xc
c00200c2:	6a 00                	push   0x0
c00200c4:	e8 ea f4 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c00200c9:	59                   	pop    ecx
c00200ca:	5f                   	pop    edi
c00200cb:	52                   	push   edx
c00200cc:	50                   	push   eax
c00200cd:	e8 27 f2 ff ff       	call   c001f2f9 <Vm::fpuInternalTo64(unsigned long long)>
c00200d2:	eb 70                	jmp    c0020144 <Vm::x87Handler(regs*)+0xa54>
c00200d4:	31 c0                	xor    eax,eax
c00200d6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00200db:	75 74                	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c00200dd:	50                   	push   eax
c00200de:	50                   	push   eax
c00200df:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00200e2:	31 d2                	xor    edx,edx
c00200e4:	52                   	push   edx
c00200e5:	50                   	push   eax
c00200e6:	e8 f6 f2 ff ff       	call   c001f3e1 <Vm::fpuLongToFloat(long long)>
c00200eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f2:	89 c6                	mov    esi,eax
c00200f4:	89 d7                	mov    edi,edx
c00200f6:	e8 b8 f4 ff ff       	call   c001f5b3 <Vm::fpuGetReg(int)>
c00200fb:	57                   	push   edi
c00200fc:	56                   	push   esi
c00200fd:	52                   	push   edx
c00200fe:	50                   	push   eax
c00200ff:	e8 5e f4 ff ff       	call   c001f562 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020104:	83 c4 1c             	add    esp,0x1c
c0020107:	52                   	push   edx
c0020108:	50                   	push   eax
c0020109:	6a 00                	push   0x0
c002010b:	e8 e6 f4 ff ff       	call   c001f5f6 <Vm::fpuSetReg(int, unsigned long long)>
c0020110:	e9 f2 f7 ff ff       	jmp    c001f907 <Vm::x87Handler(regs*)+0x217>
c0020115:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020119:	80 fa 05             	cmp    dl,0x5
c002011c:	75 11                	jne    c002012f <Vm::x87Handler(regs*)+0xa3f>
c002011e:	55                   	push   ebp
c002011f:	55                   	push   ebp
c0020120:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020123:	ff 36                	push   DWORD PTR [esi]
c0020125:	e8 81 f2 ff ff       	call   c001f3ab <Vm::fpuULongToFloat(unsigned long long)>
c002012a:	e9 cf f7 ff ff       	jmp    c001f8fe <Vm::x87Handler(regs*)+0x20e>
c002012f:	31 c0                	xor    eax,eax
c0020131:	80 fa 07             	cmp    dl,0x7
c0020134:	75 1b                	jne    c0020151 <Vm::x87Handler(regs*)+0xa61>
c0020136:	e8 63 f5 ff ff       	call   c001f69e <Vm::fpuPop()>
c002013b:	51                   	push   ecx
c002013c:	51                   	push   ecx
c002013d:	52                   	push   edx
c002013e:	50                   	push   eax
c002013f:	e8 0c f2 ff ff       	call   c001f350 <Vm::fpuFloatToLong(unsigned long long)>
c0020144:	83 c4 10             	add    esp,0x10
c0020147:	89 06                	mov    DWORD PTR [esi],eax
c0020149:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002014c:	e9 f8 f7 ff ff       	jmp    c001f949 <Vm::x87Handler(regs*)+0x259>
c0020151:	83 c4 1c             	add    esp,0x1c
c0020154:	5b                   	pop    ebx
c0020155:	5e                   	pop    esi
c0020156:	5f                   	pop    edi
c0020157:	5d                   	pop    ebp
c0020158:	c3                   	ret    

c0020159 <__static_initialization_and_destruction_0(int, int)>:
c0020159:	83 ec 0c             	sub    esp,0xc
c002015c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020161:	75 1a                	jne    c002017d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020163:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002016b:	75 10                	jne    c002017d <__static_initialization_and_destruction_0(int, int)+0x24>
c002016d:	83 ec 0c             	sub    esp,0xc
c0020170:	68 a0 16 03 c0       	push   0xc00316a0
c0020175:	e8 16 88 00 00       	call   c0028990 <Vm::_FPUState::_FPUState()>
c002017a:	83 c4 10             	add    esp,0x10
c002017d:	90                   	nop
c002017e:	83 c4 0c             	add    esp,0xc
c0020181:	c3                   	ret    

c0020182 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020182:	83 ec 0c             	sub    esp,0xc
c0020185:	83 ec 08             	sub    esp,0x8
c0020188:	68 ff ff 00 00       	push   0xffff
c002018d:	6a 01                	push   0x1
c002018f:	e8 c5 ff ff ff       	call   c0020159 <__static_initialization_and_destruction_0(int, int)>
c0020194:	83 c4 10             	add    esp,0x10
c0020197:	83 c4 0c             	add    esp,0xc
c002019a:	c3                   	ret    
c002019b:	90                   	nop

c002019c <FAT::getName()>:
c002019c:	b8 a8 c4 02 c0       	mov    eax,0xc002c4a8
c00201a1:	c3                   	ret    

c00201a2 <FAT::tell(void*, unsigned long long*)>:
c00201a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00201a7:	75 06                	jne    c00201af <FAT::tell(void*, unsigned long long*)+0xd>
c00201a9:	b8 04 00 00 00       	mov    eax,0x4
c00201ae:	c3                   	ret    
c00201af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00201b4:	75 06                	jne    c00201bc <FAT::tell(void*, unsigned long long*)+0x1a>
c00201b6:	b8 04 00 00 00       	mov    eax,0x4
c00201bb:	c3                   	ret    
c00201bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201c0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00201c3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00201c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201ca:	89 01                	mov    DWORD PTR [ecx],eax
c00201cc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201cf:	b8 00 00 00 00       	mov    eax,0x0
c00201d4:	c3                   	ret    
c00201d5:	90                   	nop

c00201d6 <FAT::stat(void*, unsigned long long*)>:
c00201d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00201db:	75 06                	jne    c00201e3 <FAT::stat(void*, unsigned long long*)+0xd>
c00201dd:	b8 04 00 00 00       	mov    eax,0x4
c00201e2:	c3                   	ret    
c00201e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00201e8:	75 06                	jne    c00201f0 <FAT::stat(void*, unsigned long long*)+0x1a>
c00201ea:	b8 04 00 00 00       	mov    eax,0x4
c00201ef:	c3                   	ret    
c00201f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201f4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00201f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00201fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201fe:	89 01                	mov    DWORD PTR [ecx],eax
c0020200:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020203:	b8 00 00 00 00       	mov    eax,0x0
c0020208:	c3                   	ret    
c0020209:	90                   	nop

c002020a <FAT::~FAT()>:
c002020a:	83 ec 0c             	sub    esp,0xc
c002020d:	ba 2c c5 02 c0       	mov    edx,0xc002c52c
c0020212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020216:	89 10                	mov    DWORD PTR [eax],edx
c0020218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021c:	83 ec 0c             	sub    esp,0xc
c002021f:	50                   	push   eax
c0020220:	e8 bf 2c ff ff       	call   c0012ee4 <Filesystem::~Filesystem()>
c0020225:	83 c4 10             	add    esp,0x10
c0020228:	90                   	nop
c0020229:	83 c4 0c             	add    esp,0xc
c002022c:	c3                   	ret    
c002022d:	90                   	nop

c002022e <FAT::~FAT()>:
c002022e:	83 ec 0c             	sub    esp,0xc
c0020231:	83 ec 0c             	sub    esp,0xc
c0020234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020238:	e8 cd ff ff ff       	call   c002020a <FAT::~FAT()>
c002023d:	83 c4 10             	add    esp,0x10
c0020240:	83 ec 08             	sub    esp,0x8
c0020243:	6a 08                	push   0x8
c0020245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020249:	e8 8e 28 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c002024e:	83 c4 10             	add    esp,0x10
c0020251:	83 c4 0c             	add    esp,0xc
c0020254:	c3                   	ret    
c0020255:	90                   	nop

c0020256 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020256:	83 ec 1c             	sub    esp,0x1c
c0020259:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020260:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020265:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020269:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0020270:	83 f8 ff             	cmp    eax,0xffffffff
c0020273:	75 34                	jne    c00202a9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020275:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020279:	88 c2                	mov    dl,al
c002027b:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c0020280:	01 d0                	add    eax,edx
c0020282:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020286:	8b 15 00 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031700
c002028c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020290:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c0020297:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c002029c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00202a0:	89 14 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],edx
c00202a7:	eb 17                	jmp    c00202c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00202a9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00202ad:	88 c2                	mov    dl,al
c00202af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202b3:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c00202ba:	01 d0                	add    eax,edx
c00202bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00202c0:	83 ec 04             	sub    esp,0x4
c00202c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00202c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00202cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00202cf:	50                   	push   eax
c00202d0:	e8 63 6a fe ff       	call   c0006d38 <f_getlabel>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00202e1:	75 07                	jne    c00202ea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00202e3:	b8 00 00 00 00       	mov    eax,0x0
c00202e8:	eb 05                	jmp    c00202ef <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00202ea:	b8 01 00 00 00       	mov    eax,0x1
c00202ef:	83 c4 1c             	add    esp,0x1c
c00202f2:	c3                   	ret    
c00202f3:	90                   	nop

c00202f4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00202f4:	57                   	push   edi
c00202f5:	83 ec 58             	sub    esp,0x58
c00202f8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020300:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020304:	b9 0f 00 00 00       	mov    ecx,0xf
c0020309:	b8 00 00 00 00       	mov    eax,0x0
c002030e:	fc                   	cld    
c002030f:	89 d7                	mov    edi,edx
c0020311:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020313:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020317:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c002031e:	83 f8 ff             	cmp    eax,0xffffffff
c0020321:	75 34                	jne    c0020357 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020323:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020327:	88 c2                	mov    dl,al
c0020329:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c002032e:	01 d0                	add    eax,edx
c0020330:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020334:	8b 15 00 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031700
c002033a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002033e:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c0020345:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c002034a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002034e:	89 14 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],edx
c0020355:	eb 17                	jmp    c002036e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020357:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002035b:	88 c2                	mov    dl,al
c002035d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020361:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0020368:	01 d0                	add    eax,edx
c002036a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002036e:	83 ec 08             	sub    esp,0x8
c0020371:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020375:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020379:	50                   	push   eax
c002037a:	e8 f5 05 fe ff       	call   c0000974 <strcat>
c002037f:	83 c4 10             	add    esp,0x10
c0020382:	83 ec 0c             	sub    esp,0xc
c0020385:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020389:	50                   	push   eax
c002038a:	e8 97 6b fe ff       	call   c0006f26 <f_setlabel>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020396:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002039b:	75 07                	jne    c00203a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002039d:	b8 00 00 00 00       	mov    eax,0x0
c00203a2:	eb 05                	jmp    c00203a9 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00203a4:	b8 01 00 00 00       	mov    eax,0x1
c00203a9:	83 c4 58             	add    esp,0x58
c00203ac:	5f                   	pop    edi
c00203ad:	c3                   	ret    

c00203ae <FAT::format(LogicalDisk*, int, char const*, int)>:
c00203ae:	83 ec 2c             	sub    esp,0x2c
c00203b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00203b9:	83 ec 08             	sub    esp,0x8
c00203bc:	68 cc c4 02 c0       	push   0xc002c4cc
c00203c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203c5:	e8 f6 04 fe ff       	call   c00008c0 <strcmp>
c00203ca:	83 c4 10             	add    esp,0x10
c00203cd:	85 c0                	test   eax,eax
c00203cf:	0f 94 c0             	sete   al
c00203d2:	84 c0                	test   al,al
c00203d4:	74 0d                	je     c00203e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00203d6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203de:	e9 a6 00 00 00       	jmp    c0020489 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203e3:	83 ec 08             	sub    esp,0x8
c00203e6:	68 be c4 02 c0       	push   0xc002c4be
c00203eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203ef:	e8 cc 04 fe ff       	call   c00008c0 <strcmp>
c00203f4:	83 c4 10             	add    esp,0x10
c00203f7:	85 c0                	test   eax,eax
c00203f9:	0f 94 c0             	sete   al
c00203fc:	84 c0                	test   al,al
c00203fe:	74 0a                	je     c002040a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020400:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020408:	eb 7f                	jmp    c0020489 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002040a:	83 ec 08             	sub    esp,0x8
c002040d:	68 c4 c4 02 c0       	push   0xc002c4c4
c0020412:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020416:	e8 a5 04 fe ff       	call   c00008c0 <strcmp>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	85 c0                	test   eax,eax
c0020420:	0f 94 c0             	sete   al
c0020423:	84 c0                	test   al,al
c0020425:	74 0a                	je     c0020431 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020427:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002042f:	eb 58                	jmp    c0020489 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020431:	83 ec 08             	sub    esp,0x8
c0020434:	68 ec 90 02 c0       	push   0xc00290ec
c0020439:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002043d:	e8 7e 04 fe ff       	call   c00008c0 <strcmp>
c0020442:	83 c4 10             	add    esp,0x10
c0020445:	85 c0                	test   eax,eax
c0020447:	0f 94 c0             	sete   al
c002044a:	84 c0                	test   al,al
c002044c:	74 0a                	je     c0020458 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002044e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020456:	eb 31                	jmp    c0020489 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020458:	83 ec 08             	sub    esp,0x8
c002045b:	68 ca c4 02 c0       	push   0xc002c4ca
c0020460:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020464:	e8 57 04 fe ff       	call   c00008c0 <strcmp>
c0020469:	83 c4 10             	add    esp,0x10
c002046c:	85 c0                	test   eax,eax
c002046e:	0f 94 c0             	sete   al
c0020471:	84 c0                	test   al,al
c0020473:	74 0a                	je     c002047f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020475:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002047d:	eb 0a                	jmp    c0020489 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002047f:	b8 08 00 00 00       	mov    eax,0x8
c0020484:	e9 04 01 00 00       	jmp    c002058d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020489:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020490:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020495:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020499:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c00204a0:	83 f8 ff             	cmp    eax,0xffffffff
c00204a3:	75 34                	jne    c00204d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00204a5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00204a9:	88 c2                	mov    dl,al
c00204ab:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c00204b0:	01 d0                	add    eax,edx
c00204b2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00204b6:	8b 15 00 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031700
c00204bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00204c0:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c00204c7:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c00204cc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00204d0:	89 14 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],edx
c00204d7:	eb 17                	jmp    c00204f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00204d9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00204dd:	88 c2                	mov    dl,al
c00204df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00204e3:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c00204ea:	01 d0                	add    eax,edx
c00204ec:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00204f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204f4:	88 04 24             	mov    BYTE PTR [esp],al
c00204f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00204fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204ff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020507:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002050c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020514:	83 ec 0c             	sub    esp,0xc
c0020517:	68 00 20 00 00       	push   0x2000
c002051c:	e8 1f f3 fe ff       	call   c000f840 <malloc>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020528:	68 00 20 00 00       	push   0x2000
c002052d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020531:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020535:	50                   	push   eax
c0020536:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002053a:	50                   	push   eax
c002053b:	e8 31 6e fe ff       	call   c0007371 <f_mkfs>
c0020540:	83 c4 10             	add    esp,0x10
c0020543:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020547:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002054c:	75 07                	jne    c0020555 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002054e:	b8 00 00 00 00       	mov    eax,0x0
c0020553:	eb 38                	jmp    c002058d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020555:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002055a:	75 17                	jne    c0020573 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002055c:	83 ec 0c             	sub    esp,0xc
c002055f:	68 fc c4 02 c0       	push   0xc002c4fc
c0020564:	e8 53 26 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0020569:	83 c4 10             	add    esp,0x10
c002056c:	b8 09 00 00 00       	mov    eax,0x9
c0020571:	eb 1a                	jmp    c002058d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020573:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020577:	83 ec 08             	sub    esp,0x8
c002057a:	50                   	push   eax
c002057b:	68 d0 c4 02 c0       	push   0xc002c4d0
c0020580:	e8 37 26 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0020585:	83 c4 10             	add    esp,0x10
c0020588:	b8 01 00 00 00       	mov    eax,0x1
c002058d:	83 c4 2c             	add    esp,0x2c
c0020590:	c3                   	ret    
c0020591:	90                   	nop

c0020592 <FAT::tryMount(LogicalDisk*, int)>:
c0020592:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020598:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c002059d:	83 f8 14             	cmp    eax,0x14
c00205a0:	75 17                	jne    c00205b9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00205a2:	83 ec 0c             	sub    esp,0xc
c00205a5:	68 e2 c4 02 c0       	push   0xc002c4e2
c00205aa:	e8 88 9c ff ff       	call   c001a237 <Krnl::panic(char const*)>
c00205af:	83 c4 10             	add    esp,0x10
c00205b2:	b0 00                	mov    al,0x0
c00205b4:	e9 d7 01 00 00       	jmp    c0020790 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205b9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00205c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00205c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00205cc:	3d 00 02 00 00       	cmp    eax,0x200
c00205d1:	74 07                	je     c00205da <FAT::tryMount(LogicalDisk*, int)+0x48>
c00205d3:	b0 00                	mov    al,0x0
c00205d5:	e9 b6 01 00 00       	jmp    c0020790 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205da:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00205e2:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00205e9:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c00205f0:	83 f8 ff             	cmp    eax,0xffffffff
c00205f3:	74 07                	je     c00205fc <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00205f5:	b0 01                	mov    al,0x1
c00205f7:	e9 94 01 00 00       	jmp    c0020790 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205fc:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020606:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002060e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020615:	88 c2                	mov    dl,al
c0020617:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c002061c:	01 d0                	add    eax,edx
c002061e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020625:	8b 15 00 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031700
c002062b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020632:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c0020639:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c002063e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020645:	89 14 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],edx
c002064c:	83 ec 0c             	sub    esp,0xc
c002064f:	68 54 02 00 00       	push   0x254
c0020654:	e8 e7 f1 fe ff       	call   c000f840 <malloc>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020663:	83 ec 04             	sub    esp,0x4
c0020666:	6a 00                	push   0x0
c0020668:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002066f:	50                   	push   eax
c0020670:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020677:	e8 b3 48 fe ff       	call   c0004f2f <f_mount>
c002067c:	83 c4 10             	add    esp,0x10
c002067f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020686:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002068e:	74 19                	je     c00206a9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002069a:	e8 c1 f1 fe ff       	call   c000f860 <rfree>
c002069f:	83 c4 10             	add    esp,0x10
c00206a2:	b0 00                	mov    al,0x0
c00206a4:	e9 e7 00 00 00       	jmp    c0020790 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00206a9:	83 ec 04             	sub    esp,0x4
c00206ac:	68 00 01 00 00       	push   0x100
c00206b1:	6a 00                	push   0x0
c00206b3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206ba:	50                   	push   eax
c00206bb:	e8 b8 00 fe ff       	call   c0000778 <memset>
c00206c0:	83 c4 10             	add    esp,0x10
c00206c3:	83 ec 08             	sub    esp,0x8
c00206c6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00206cd:	50                   	push   eax
c00206ce:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206d5:	50                   	push   eax
c00206d6:	e8 99 02 fe ff       	call   c0000974 <strcat>
c00206db:	83 c4 10             	add    esp,0x10
c00206de:	83 ec 08             	sub    esp,0x8
c00206e1:	68 f0 c4 02 c0       	push   0xc002c4f0
c00206e6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206ed:	50                   	push   eax
c00206ee:	e8 81 02 fe ff       	call   c0000974 <strcat>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	83 ec 04             	sub    esp,0x4
c00206f9:	6a 01                	push   0x1
c00206fb:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020702:	50                   	push   eax
c0020703:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020707:	50                   	push   eax
c0020708:	e8 84 48 fe ff       	call   c0004f91 <f_open>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020717:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002071e:	85 c0                	test   eax,eax
c0020720:	74 0a                	je     c002072c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020722:	78 2d                	js     c0020751 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020724:	83 e8 04             	sub    eax,0x4
c0020727:	83 f8 01             	cmp    eax,0x1
c002072a:	77 25                	ja     c0020751 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002072c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020734:	83 ec 0c             	sub    esp,0xc
c0020737:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002073b:	50                   	push   eax
c002073c:	e8 a2 53 fe ff       	call   c0005ae3 <f_close>
c0020741:	83 c4 10             	add    esp,0x10
c0020744:	90                   	nop
c0020745:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002074d:	74 3a                	je     c0020789 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002074f:	eb 2d                	jmp    c002077e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020751:	83 ec 0c             	sub    esp,0xc
c0020754:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002075b:	e8 00 f1 fe ff       	call   c000f860 <rfree>
c0020760:	83 c4 10             	add    esp,0x10
c0020763:	83 ec 04             	sub    esp,0x4
c0020766:	6a 00                	push   0x0
c0020768:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002076f:	50                   	push   eax
c0020770:	6a 00                	push   0x0
c0020772:	e8 b8 47 fe ff       	call   c0004f2f <f_mount>
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	b0 00                	mov    al,0x0
c002077c:	eb 12                	jmp    c0020790 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002077e:	a1 00 17 03 c0       	mov    eax,ds:0xc0031700
c0020783:	40                   	inc    eax
c0020784:	a3 00 17 03 c0       	mov    ds:0xc0031700,eax
c0020789:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020790:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020796:	c3                   	ret    
c0020797:	90                   	nop

c0020798 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020798:	81 ec 3c 02 00 00    	sub    esp,0x23c
c002079e:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00207a6:	74 0a                	je     c00207b2 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00207a8:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00207b0:	75 0a                	jne    c00207bc <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00207b2:	b8 04 00 00 00       	mov    eax,0x4
c00207b7:	e9 db 00 00 00       	jmp    c0020897 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00207bc:	83 ec 08             	sub    esp,0x8
c00207bf:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00207c6:	50                   	push   eax
c00207c7:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00207ce:	e8 1a 59 fe ff       	call   c00060ed <f_readdir>
c00207d3:	83 c4 10             	add    esp,0x10
c00207d6:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00207dd:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00207e3:	83 ec 0c             	sub    esp,0xc
c00207e6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00207ed:	83 c0 1a             	add    eax,0x1a
c00207f0:	50                   	push   eax
c00207f1:	e8 9e ff fd ff       	call   c0000794 <strlen>
c00207f6:	83 c4 10             	add    esp,0x10
c00207f9:	ba 00 00 00 00       	mov    edx,0x0
c00207fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020802:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020806:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c002080d:	0f b6 c0             	movzx  eax,al
c0020810:	83 e0 10             	and    eax,0x10
c0020813:	74 07                	je     c002081c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020815:	b8 02 00 00 00       	mov    eax,0x2
c002081a:	eb 05                	jmp    c0020821 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c002081c:	b8 01 00 00 00       	mov    eax,0x1
c0020821:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020825:	83 ec 08             	sub    esp,0x8
c0020828:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002082f:	83 c0 1a             	add    eax,0x1a
c0020832:	50                   	push   eax
c0020833:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020837:	83 c0 10             	add    eax,0x10
c002083a:	50                   	push   eax
c002083b:	e8 f4 ff fd ff       	call   c0000834 <strcpy>
c0020840:	83 c4 10             	add    esp,0x10
c0020843:	83 ec 04             	sub    esp,0x4
c0020846:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c002084d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020851:	50                   	push   eax
c0020852:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020859:	e8 e6 fe fd ff       	call   c0000744 <memcpy>
c002085e:	83 c4 10             	add    esp,0x10
c0020861:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020868:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002086e:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020875:	84 c0                	test   al,al
c0020877:	75 07                	jne    c0020880 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020879:	b8 07 00 00 00       	mov    eax,0x7
c002087e:	eb 17                	jmp    c0020897 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020880:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020887:	85 c0                	test   eax,eax
c0020889:	75 07                	jne    c0020892 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c002088b:	b8 00 00 00 00       	mov    eax,0x0
c0020890:	eb 05                	jmp    c0020897 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020892:	b8 01 00 00 00       	mov    eax,0x1
c0020897:	81 c4 3c 02 00 00    	add    esp,0x23c
c002089d:	c3                   	ret    

c002089e <FAT::read(void*, unsigned long, void*, int*)>:
c002089e:	83 ec 1c             	sub    esp,0x1c
c00208a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00208a6:	74 07                	je     c00208af <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00208a8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00208ad:	75 07                	jne    c00208b6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00208af:	b8 04 00 00 00       	mov    eax,0x4
c00208b4:	eb 3d                	jmp    c00208f3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00208b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208ba:	50                   	push   eax
c00208bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00208c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208c7:	e8 01 4b fe ff       	call   c00053cd <f_read>
c00208cc:	83 c4 10             	add    esp,0x10
c00208cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208d7:	89 c2                	mov    edx,eax
c00208d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00208dd:	89 10                	mov    DWORD PTR [eax],edx
c00208df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208e3:	85 c0                	test   eax,eax
c00208e5:	75 07                	jne    c00208ee <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00208e7:	b8 00 00 00 00       	mov    eax,0x0
c00208ec:	eb 05                	jmp    c00208f3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00208ee:	b8 01 00 00 00       	mov    eax,0x1
c00208f3:	83 c4 1c             	add    esp,0x1c
c00208f6:	c3                   	ret    
c00208f7:	90                   	nop

c00208f8 <FAT::write(void*, unsigned long, void*, int*)>:
c00208f8:	83 ec 1c             	sub    esp,0x1c
c00208fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020900:	74 07                	je     c0020909 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020902:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020907:	75 07                	jne    c0020910 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020909:	b8 04 00 00 00       	mov    eax,0x4
c002090e:	eb 3d                	jmp    c002094d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020910:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020914:	50                   	push   eax
c0020915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002091d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020921:	e8 27 4d fe ff       	call   c000564d <f_write>
c0020926:	83 c4 10             	add    esp,0x10
c0020929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002092d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020931:	89 c2                	mov    edx,eax
c0020933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020937:	89 10                	mov    DWORD PTR [eax],edx
c0020939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002093d:	85 c0                	test   eax,eax
c002093f:	75 07                	jne    c0020948 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020941:	b8 00 00 00 00       	mov    eax,0x0
c0020946:	eb 05                	jmp    c002094d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020948:	b8 01 00 00 00       	mov    eax,0x1
c002094d:	83 c4 1c             	add    esp,0x1c
c0020950:	c3                   	ret    
c0020951:	90                   	nop

c0020952 <FAT::close(void*)>:
c0020952:	83 ec 1c             	sub    esp,0x1c
c0020955:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002095a:	75 07                	jne    c0020963 <FAT::close(void*)+0x11>
c002095c:	b8 04 00 00 00       	mov    eax,0x4
c0020961:	eb 36                	jmp    c0020999 <FAT::close(void*)+0x47>
c0020963:	83 ec 0c             	sub    esp,0xc
c0020966:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002096a:	e8 74 51 fe ff       	call   c0005ae3 <f_close>
c002096f:	83 c4 10             	add    esp,0x10
c0020972:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020976:	83 ec 0c             	sub    esp,0xc
c0020979:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002097d:	e8 ce ee fe ff       	call   c000f850 <free>
c0020982:	83 c4 10             	add    esp,0x10
c0020985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020989:	85 c0                	test   eax,eax
c002098b:	75 07                	jne    c0020994 <FAT::close(void*)+0x42>
c002098d:	b8 00 00 00 00       	mov    eax,0x0
c0020992:	eb 05                	jmp    c0020999 <FAT::close(void*)+0x47>
c0020994:	b8 01 00 00 00       	mov    eax,0x1
c0020999:	83 c4 1c             	add    esp,0x1c
c002099c:	c3                   	ret    
c002099d:	90                   	nop

c002099e <FAT::closeDir(void*)>:
c002099e:	83 ec 1c             	sub    esp,0x1c
c00209a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00209a6:	75 07                	jne    c00209af <FAT::closeDir(void*)+0x11>
c00209a8:	b8 04 00 00 00       	mov    eax,0x4
c00209ad:	eb 36                	jmp    c00209e5 <FAT::closeDir(void*)+0x47>
c00209af:	83 ec 0c             	sub    esp,0xc
c00209b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00209b6:	e8 10 57 fe ff       	call   c00060cb <f_closedir>
c00209bb:	83 c4 10             	add    esp,0x10
c00209be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209c2:	83 ec 0c             	sub    esp,0xc
c00209c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00209c9:	e8 82 ee fe ff       	call   c000f850 <free>
c00209ce:	83 c4 10             	add    esp,0x10
c00209d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209d5:	85 c0                	test   eax,eax
c00209d7:	75 07                	jne    c00209e0 <FAT::closeDir(void*)+0x42>
c00209d9:	b8 00 00 00 00       	mov    eax,0x0
c00209de:	eb 05                	jmp    c00209e5 <FAT::closeDir(void*)+0x47>
c00209e0:	b8 01 00 00 00       	mov    eax,0x1
c00209e5:	83 c4 1c             	add    esp,0x1c
c00209e8:	c3                   	ret    
c00209e9:	90                   	nop

c00209ea <FAT::seek(void*, unsigned long long)>:
c00209ea:	83 ec 2c             	sub    esp,0x2c
c00209ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00209f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209fd:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020a02:	75 07                	jne    c0020a0b <FAT::seek(void*, unsigned long long)+0x21>
c0020a04:	b8 04 00 00 00       	mov    eax,0x4
c0020a09:	eb 2f                	jmp    c0020a3a <FAT::seek(void*, unsigned long long)+0x50>
c0020a0b:	83 ec 04             	sub    esp,0x4
c0020a0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020a12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020a16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020a1a:	e8 f3 50 fe ff       	call   c0005b12 <f_lseek>
c0020a1f:	83 c4 10             	add    esp,0x10
c0020a22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a2a:	85 c0                	test   eax,eax
c0020a2c:	75 07                	jne    c0020a35 <FAT::seek(void*, unsigned long long)+0x4b>
c0020a2e:	b8 00 00 00 00       	mov    eax,0x0
c0020a33:	eb 05                	jmp    c0020a3a <FAT::seek(void*, unsigned long long)+0x50>
c0020a35:	b8 01 00 00 00       	mov    eax,0x1
c0020a3a:	83 c4 2c             	add    esp,0x2c
c0020a3d:	c3                   	ret    

c0020a3e <fatWrapperReadDisk>:
c0020a3e:	83 ec 1c             	sub    esp,0x1c
c0020a41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a45:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a5d:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0020a64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a6f:	52                   	push   edx
c0020a70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a78:	50                   	push   eax
c0020a79:	e8 28 59 ff ff       	call   c00163a6 <LogicalDisk::read(unsigned long long, int, void*)>
c0020a7e:	83 c4 20             	add    esp,0x20
c0020a81:	83 c4 1c             	add    esp,0x1c
c0020a84:	c3                   	ret    

c0020a85 <fatWrapperWriteDisk>:
c0020a85:	83 ec 1c             	sub    esp,0x1c
c0020a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020a90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a94:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a9f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020aa4:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0020aab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020aaf:	83 ec 0c             	sub    esp,0xc
c0020ab2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ab6:	52                   	push   edx
c0020ab7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020abb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020abf:	50                   	push   eax
c0020ac0:	e8 4d 59 ff ff       	call   c0016412 <LogicalDisk::write(unsigned long long, int, void*)>
c0020ac5:	83 c4 20             	add    esp,0x20
c0020ac8:	83 c4 1c             	add    esp,0x1c
c0020acb:	c3                   	ret    

c0020acc <fatWrapperIoctl>:
c0020acc:	53                   	push   ebx
c0020acd:	83 ec 28             	sub    esp,0x28
c0020ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ad4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ad8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020adc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ae0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ae5:	75 31                	jne    c0020b18 <fatWrapperIoctl+0x4c>
c0020ae7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020aeb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020aef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020af4:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0020afb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b01:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b0b:	66 89 02             	mov    WORD PTR [edx],ax
c0020b0e:	b8 00 00 00 00       	mov    eax,0x0
c0020b13:	e9 b2 00 00 00       	jmp    c0020bca <fatWrapperIoctl+0xfe>
c0020b18:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020b1d:	75 6a                	jne    c0020b89 <fatWrapperIoctl+0xbd>
c0020b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020b2c:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0020b33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b39:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020b3f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020b45:	89 c8                	mov    eax,ecx
c0020b47:	89 da                	mov    edx,ebx
c0020b49:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020b4d:	c1 e0 0a             	shl    eax,0xa
c0020b50:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020b55:	8b 0c 8d e0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1920]
c0020b5c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020b62:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020b68:	89 cb                	mov    ebx,ecx
c0020b6a:	c1 fb 1f             	sar    ebx,0x1f
c0020b6d:	53                   	push   ebx
c0020b6e:	51                   	push   ecx
c0020b6f:	52                   	push   edx
c0020b70:	50                   	push   eax
c0020b71:	e8 c6 5a 00 00       	call   c002663c <__udivdi3>
c0020b76:	83 c4 10             	add    esp,0x10
c0020b79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020b7d:	89 01                	mov    DWORD PTR [ecx],eax
c0020b7f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b82:	b8 00 00 00 00       	mov    eax,0x0
c0020b87:	eb 41                	jmp    c0020bca <fatWrapperIoctl+0xfe>
c0020b89:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020b8e:	75 07                	jne    c0020b97 <fatWrapperIoctl+0xcb>
c0020b90:	b8 00 00 00 00       	mov    eax,0x0
c0020b95:	eb 33                	jmp    c0020bca <fatWrapperIoctl+0xfe>
c0020b97:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020b9c:	75 19                	jne    c0020bb7 <fatWrapperIoctl+0xeb>
c0020b9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ba2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ba6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020baa:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020bb0:	b8 00 00 00 00       	mov    eax,0x0
c0020bb5:	eb 13                	jmp    c0020bca <fatWrapperIoctl+0xfe>
c0020bb7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020bbc:	75 07                	jne    c0020bc5 <fatWrapperIoctl+0xf9>
c0020bbe:	b8 00 00 00 00       	mov    eax,0x0
c0020bc3:	eb 05                	jmp    c0020bca <fatWrapperIoctl+0xfe>
c0020bc5:	b8 04 00 00 00       	mov    eax,0x4
c0020bca:	83 c4 28             	add    esp,0x28
c0020bcd:	5b                   	pop    ebx
c0020bce:	c3                   	ret    
c0020bcf:	90                   	nop

c0020bd0 <FAT::FAT()>:
c0020bd0:	83 ec 1c             	sub    esp,0x1c
c0020bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bd7:	83 ec 0c             	sub    esp,0xc
c0020bda:	50                   	push   eax
c0020bdb:	e8 e0 22 ff ff       	call   c0012ec0 <Filesystem::Filesystem()>
c0020be0:	83 c4 10             	add    esp,0x10
c0020be3:	ba 2c c5 02 c0       	mov    edx,0xc002c52c
c0020be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bec:	89 10                	mov    DWORD PTR [eax],edx
c0020bee:	c7 05 00 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031700,0x0
c0020bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020c00:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020c05:	7f 15                	jg     c0020c1c <FAT::FAT()+0x4c>
c0020c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c0b:	c7 04 85 20 17 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce8e0],0xffffffff
c0020c16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020c1a:	eb e4                	jmp    c0020c00 <FAT::FAT()+0x30>
c0020c1c:	90                   	nop
c0020c1d:	83 c4 1c             	add    esp,0x1c
c0020c20:	c3                   	ret    
c0020c21:	90                   	nop

c0020c22 <FAT::fixFilepath(char*)>:
c0020c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c26:	8a 00                	mov    al,BYTE PTR [eax]
c0020c28:	3c 40                	cmp    al,0x40
c0020c2a:	7e 2c                	jle    c0020c58 <FAT::fixFilepath(char*)+0x36>
c0020c2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c30:	8a 00                	mov    al,BYTE PTR [eax]
c0020c32:	83 e8 41             	sub    eax,0x41
c0020c35:	88 c2                	mov    dl,al
c0020c37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c3b:	88 10                	mov    BYTE PTR [eax],dl
c0020c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c41:	8a 00                	mov    al,BYTE PTR [eax]
c0020c43:	0f be c0             	movsx  eax,al
c0020c46:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0020c4d:	83 c0 30             	add    eax,0x30
c0020c50:	88 c2                	mov    dl,al
c0020c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c56:	88 10                	mov    BYTE PTR [eax],dl
c0020c58:	90                   	nop
c0020c59:	c3                   	ret    

c0020c5a <FAT::open(char const*, void**, FileOpenMode)>:
c0020c5a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c60:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c68:	74 0a                	je     c0020c74 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020c6a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020c72:	75 0a                	jne    c0020c7e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020c74:	b8 04 00 00 00       	mov    eax,0x4
c0020c79:	e9 fd 00 00 00       	jmp    c0020d7b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c7e:	83 ec 08             	sub    esp,0x8
c0020c81:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c88:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c8c:	50                   	push   eax
c0020c8d:	e8 a2 fb fd ff       	call   c0000834 <strcpy>
c0020c92:	83 c4 10             	add    esp,0x10
c0020c95:	83 ec 08             	sub    esp,0x8
c0020c98:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020c9c:	50                   	push   eax
c0020c9d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ca4:	e8 79 ff ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0020ca9:	83 c4 10             	add    esp,0x10
c0020cac:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020cb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cbb:	83 e0 01             	and    eax,0x1
c0020cbe:	74 08                	je     c0020cc8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020cc0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020cc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ccf:	83 e0 04             	and    eax,0x4
c0020cd2:	74 10                	je     c0020ce4 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020cd4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020cdc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020ce4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ceb:	83 e0 02             	and    eax,0x2
c0020cee:	74 08                	je     c0020cf8 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020cf0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020cf8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cff:	83 e0 08             	and    eax,0x8
c0020d02:	74 08                	je     c0020d0c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020d04:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020d0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d13:	83 e0 10             	and    eax,0x10
c0020d16:	74 08                	je     c0020d20 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020d18:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020d20:	83 ec 0c             	sub    esp,0xc
c0020d23:	68 50 02 00 00       	push   0x250
c0020d28:	e8 13 eb fe ff       	call   c000f840 <malloc>
c0020d2d:	83 c4 10             	add    esp,0x10
c0020d30:	89 c2                	mov    edx,eax
c0020d32:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d39:	89 10                	mov    DWORD PTR [eax],edx
c0020d3b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020d43:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d4c:	83 ec 04             	sub    esp,0x4
c0020d4f:	52                   	push   edx
c0020d50:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020d54:	52                   	push   edx
c0020d55:	50                   	push   eax
c0020d56:	e8 36 42 fe ff       	call   c0004f91 <f_open>
c0020d5b:	83 c4 10             	add    esp,0x10
c0020d5e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020d65:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020d6d:	74 07                	je     c0020d76 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020d6f:	b8 01 00 00 00       	mov    eax,0x1
c0020d74:	eb 05                	jmp    c0020d7b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020d76:	b8 00 00 00 00       	mov    eax,0x0
c0020d7b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d81:	c3                   	ret    

c0020d82 <FAT::openDir(char const*, void**)>:
c0020d82:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d88:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d90:	74 0a                	je     c0020d9c <FAT::openDir(char const*, void**)+0x1a>
c0020d92:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020d9a:	75 07                	jne    c0020da3 <FAT::openDir(char const*, void**)+0x21>
c0020d9c:	b8 04 00 00 00       	mov    eax,0x4
c0020da1:	eb 7d                	jmp    c0020e20 <FAT::openDir(char const*, void**)+0x9e>
c0020da3:	83 ec 08             	sub    esp,0x8
c0020da6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dad:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020db1:	50                   	push   eax
c0020db2:	e8 7d fa fd ff       	call   c0000834 <strcpy>
c0020db7:	83 c4 10             	add    esp,0x10
c0020dba:	83 ec 08             	sub    esp,0x8
c0020dbd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dc1:	50                   	push   eax
c0020dc2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dc9:	e8 54 fe ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0020dce:	83 c4 10             	add    esp,0x10
c0020dd1:	83 ec 0c             	sub    esp,0xc
c0020dd4:	6a 4c                	push   0x4c
c0020dd6:	e8 65 ea fe ff       	call   c000f840 <malloc>
c0020ddb:	83 c4 10             	add    esp,0x10
c0020dde:	89 c2                	mov    edx,eax
c0020de0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020de7:	89 10                	mov    DWORD PTR [eax],edx
c0020de9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020df2:	83 ec 08             	sub    esp,0x8
c0020df5:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020df9:	52                   	push   edx
c0020dfa:	50                   	push   eax
c0020dfb:	e8 c9 51 fe ff       	call   c0005fc9 <f_opendir>
c0020e00:	83 c4 10             	add    esp,0x10
c0020e03:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e0a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020e12:	74 07                	je     c0020e1b <FAT::openDir(char const*, void**)+0x99>
c0020e14:	b8 01 00 00 00       	mov    eax,0x1
c0020e19:	eb 05                	jmp    c0020e20 <FAT::openDir(char const*, void**)+0x9e>
c0020e1b:	b8 00 00 00 00       	mov    eax,0x0
c0020e20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e26:	c3                   	ret    
c0020e27:	90                   	nop

c0020e28 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020e28:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e2e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020e36:	75 0a                	jne    c0020e42 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020e38:	b8 04 00 00 00       	mov    eax,0x4
c0020e3d:	e9 c9 00 00 00       	jmp    c0020f0b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e42:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020e4a:	75 0a                	jne    c0020e56 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020e4c:	b8 04 00 00 00       	mov    eax,0x4
c0020e51:	e9 b5 00 00 00       	jmp    c0020f0b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e56:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020e5e:	75 0a                	jne    c0020e6a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020e60:	b8 04 00 00 00       	mov    eax,0x4
c0020e65:	e9 a1 00 00 00       	jmp    c0020f0b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e6a:	83 ec 08             	sub    esp,0x8
c0020e6d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e74:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020e7b:	50                   	push   eax
c0020e7c:	e8 b3 f9 fd ff       	call   c0000834 <strcpy>
c0020e81:	83 c4 10             	add    esp,0x10
c0020e84:	83 ec 08             	sub    esp,0x8
c0020e87:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020e8e:	50                   	push   eax
c0020e8f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e96:	e8 87 fd ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0020e9b:	83 c4 10             	add    esp,0x10
c0020e9e:	83 ec 08             	sub    esp,0x8
c0020ea1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ea5:	50                   	push   eax
c0020ea6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020ead:	50                   	push   eax
c0020eae:	e8 d5 52 fe ff       	call   c0006188 <f_stat>
c0020eb3:	83 c4 10             	add    esp,0x10
c0020eb6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ebd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020ec4:	85 c0                	test   eax,eax
c0020ec6:	74 07                	je     c0020ecf <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020ec8:	83 f8 04             	cmp    eax,0x4
c0020ecb:	74 32                	je     c0020eff <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020ecd:	eb 37                	jmp    c0020f06 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020ecf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ed3:	0f b6 c0             	movzx  eax,al
c0020ed6:	83 e0 10             	and    eax,0x10
c0020ed9:	0f 95 c2             	setne  dl
c0020edc:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020ee3:	88 10                	mov    BYTE PTR [eax],dl
c0020ee5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ee8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020eec:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020ef3:	89 01                	mov    DWORD PTR [ecx],eax
c0020ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ef8:	b8 00 00 00 00       	mov    eax,0x0
c0020efd:	eb 0c                	jmp    c0020f0b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020eff:	b8 02 00 00 00       	mov    eax,0x2
c0020f04:	eb 05                	jmp    c0020f0b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020f06:	b8 01 00 00 00       	mov    eax,0x1
c0020f0b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020f11:	c3                   	ret    

c0020f12 <FAT::unlink(char const*)>:
c0020f12:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f18:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f20:	75 07                	jne    c0020f29 <FAT::unlink(char const*)+0x17>
c0020f22:	b8 04 00 00 00       	mov    eax,0x4
c0020f27:	eb 5c                	jmp    c0020f85 <FAT::unlink(char const*)+0x73>
c0020f29:	83 ec 08             	sub    esp,0x8
c0020f2c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f37:	50                   	push   eax
c0020f38:	e8 f7 f8 fd ff       	call   c0000834 <strcpy>
c0020f3d:	83 c4 10             	add    esp,0x10
c0020f40:	83 ec 08             	sub    esp,0x8
c0020f43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f47:	50                   	push   eax
c0020f48:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f4f:	e8 ce fc ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0020f54:	83 c4 10             	add    esp,0x10
c0020f57:	83 ec 0c             	sub    esp,0xc
c0020f5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f5e:	50                   	push   eax
c0020f5f:	e8 76 55 fe ff       	call   c00064da <f_unlink>
c0020f64:	83 c4 10             	add    esp,0x10
c0020f67:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f6e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f75:	85 c0                	test   eax,eax
c0020f77:	75 07                	jne    c0020f80 <FAT::unlink(char const*)+0x6e>
c0020f79:	b8 00 00 00 00       	mov    eax,0x0
c0020f7e:	eb 05                	jmp    c0020f85 <FAT::unlink(char const*)+0x73>
c0020f80:	b8 01 00 00 00       	mov    eax,0x1
c0020f85:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f8b:	c3                   	ret    

c0020f8c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020f92:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020f99:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020fa0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020fa4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020fa8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020fb0:	75 0a                	jne    c0020fbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020fb2:	b8 04 00 00 00       	mov    eax,0x4
c0020fb7:	e9 1c 01 00 00       	jmp    c00210d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020fbc:	83 ec 08             	sub    esp,0x8
c0020fbf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020fc6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020fca:	50                   	push   eax
c0020fcb:	e8 64 f8 fd ff       	call   c0000834 <strcpy>
c0020fd0:	83 c4 10             	add    esp,0x10
c0020fd3:	83 ec 08             	sub    esp,0x8
c0020fd6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020fda:	50                   	push   eax
c0020fdb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020fe2:	e8 3b fc ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0020fe7:	83 c4 10             	add    esp,0x10
c0020fea:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020ff2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020ffa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020fff:	83 e0 01             	and    eax,0x1
c0021002:	74 08                	je     c002100c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021004:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002100c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021011:	83 e0 02             	and    eax,0x2
c0021014:	74 08                	je     c002101e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021016:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002101e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021023:	83 e0 04             	and    eax,0x4
c0021026:	74 08                	je     c0021030 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021028:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021030:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021035:	83 e0 08             	and    eax,0x8
c0021038:	74 08                	je     c0021042 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002103a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021042:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021047:	83 e0 01             	and    eax,0x1
c002104a:	74 08                	je     c0021054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002104c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021054:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021059:	83 e0 02             	and    eax,0x2
c002105c:	74 08                	je     c0021066 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002105e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021066:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002106b:	83 e0 04             	and    eax,0x4
c002106e:	74 08                	je     c0021078 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021070:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021078:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002107d:	83 e0 08             	and    eax,0x8
c0021080:	74 08                	je     c002108a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021082:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002108a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021091:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021098:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00210a0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00210a8:	83 ec 04             	sub    esp,0x4
c00210ab:	52                   	push   edx
c00210ac:	50                   	push   eax
c00210ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00210b1:	50                   	push   eax
c00210b2:	e8 c5 5a fe ff       	call   c0006b7c <f_chmod>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00210c1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00210c8:	85 c0                	test   eax,eax
c00210ca:	75 07                	jne    c00210d3 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00210cc:	b8 00 00 00 00       	mov    eax,0x0
c00210d1:	eb 05                	jmp    c00210d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00210d3:	b8 01 00 00 00       	mov    eax,0x1
c00210d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00210de:	c3                   	ret    
c00210df:	90                   	nop

c00210e0 <FAT::rename(char const*, char const*)>:
c00210e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00210e6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00210ee:	74 0a                	je     c00210fa <FAT::rename(char const*, char const*)+0x1a>
c00210f0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00210f8:	75 0a                	jne    c0021104 <FAT::rename(char const*, char const*)+0x24>
c00210fa:	b8 04 00 00 00       	mov    eax,0x4
c00210ff:	e9 98 00 00 00       	jmp    c002119c <FAT::rename(char const*, char const*)+0xbc>
c0021104:	83 ec 08             	sub    esp,0x8
c0021107:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002110e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021115:	50                   	push   eax
c0021116:	e8 19 f7 fd ff       	call   c0000834 <strcpy>
c002111b:	83 c4 10             	add    esp,0x10
c002111e:	83 ec 08             	sub    esp,0x8
c0021121:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021128:	50                   	push   eax
c0021129:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021130:	e8 ed fa ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0021135:	83 c4 10             	add    esp,0x10
c0021138:	83 ec 08             	sub    esp,0x8
c002113b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021142:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021146:	50                   	push   eax
c0021147:	e8 e8 f6 fd ff       	call   c0000834 <strcpy>
c002114c:	83 c4 10             	add    esp,0x10
c002114f:	83 ec 08             	sub    esp,0x8
c0021152:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021156:	50                   	push   eax
c0021157:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002115e:	e8 bf fa ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c0021163:	83 c4 10             	add    esp,0x10
c0021166:	83 ec 08             	sub    esp,0x8
c0021169:	8d 44 24 14          	lea    eax,[esp+0x14]
c002116d:	50                   	push   eax
c002116e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021175:	50                   	push   eax
c0021176:	e8 0e 57 fe ff       	call   c0006889 <f_rename>
c002117b:	83 c4 10             	add    esp,0x10
c002117e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021185:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002118c:	85 c0                	test   eax,eax
c002118e:	75 07                	jne    c0021197 <FAT::rename(char const*, char const*)+0xb7>
c0021190:	b8 00 00 00 00       	mov    eax,0x0
c0021195:	eb 05                	jmp    c002119c <FAT::rename(char const*, char const*)+0xbc>
c0021197:	b8 01 00 00 00       	mov    eax,0x1
c002119c:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211a2:	c3                   	ret    
c00211a3:	90                   	nop

c00211a4 <FAT::mkdir(char const*)>:
c00211a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211b2:	75 07                	jne    c00211bb <FAT::mkdir(char const*)+0x17>
c00211b4:	b8 04 00 00 00       	mov    eax,0x4
c00211b9:	eb 5c                	jmp    c0021217 <FAT::mkdir(char const*)+0x73>
c00211bb:	83 ec 08             	sub    esp,0x8
c00211be:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211c9:	50                   	push   eax
c00211ca:	e8 65 f6 fd ff       	call   c0000834 <strcpy>
c00211cf:	83 c4 10             	add    esp,0x10
c00211d2:	83 ec 08             	sub    esp,0x8
c00211d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211d9:	50                   	push   eax
c00211da:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211e1:	e8 3c fa ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c00211e6:	83 c4 10             	add    esp,0x10
c00211e9:	83 ec 0c             	sub    esp,0xc
c00211ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211f0:	50                   	push   eax
c00211f1:	e8 67 54 fe ff       	call   c000665d <f_mkdir>
c00211f6:	83 c4 10             	add    esp,0x10
c00211f9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021200:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021207:	85 c0                	test   eax,eax
c0021209:	75 07                	jne    c0021212 <FAT::mkdir(char const*)+0x6e>
c002120b:	b8 00 00 00 00       	mov    eax,0x0
c0021210:	eb 05                	jmp    c0021217 <FAT::mkdir(char const*)+0x73>
c0021212:	b8 01 00 00 00       	mov    eax,0x1
c0021217:	81 c4 1c 01 00 00    	add    esp,0x11c
c002121d:	c3                   	ret    

c002121e <FAT::exists(char const*)>:
c002121e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021224:	83 ec 08             	sub    esp,0x8
c0021227:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002122e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021232:	50                   	push   eax
c0021233:	e8 fc f5 fd ff       	call   c0000834 <strcpy>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	83 ec 08             	sub    esp,0x8
c002123e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021242:	50                   	push   eax
c0021243:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002124a:	e8 d3 f9 ff ff       	call   c0020c22 <FAT::fixFilepath(char*)>
c002124f:	83 c4 10             	add    esp,0x10
c0021252:	83 ec 08             	sub    esp,0x8
c0021255:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002125c:	50                   	push   eax
c002125d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021261:	50                   	push   eax
c0021262:	e8 21 4f fe ff       	call   c0006188 <f_stat>
c0021267:	83 c4 10             	add    esp,0x10
c002126a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021271:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021278:	85 c0                	test   eax,eax
c002127a:	75 04                	jne    c0021280 <FAT::exists(char const*)+0x62>
c002127c:	b0 01                	mov    al,0x1
c002127e:	eb 02                	jmp    c0021282 <FAT::exists(char const*)+0x64>
c0021280:	b0 00                	mov    al,0x0
c0021282:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021288:	c3                   	ret    
c0021289:	90                   	nop

c002128a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002128a:	b8 08 00 00 00       	mov    eax,0x8
c002128f:	c3                   	ret    

c0021290 <ISO9660::seek(void*, unsigned long long)>:
c0021290:	53                   	push   ebx
c0021291:	b8 04 00 00 00       	mov    eax,0x4
c0021296:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002129a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002129e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00212a2:	85 d2                	test   edx,edx
c00212a4:	74 17                	je     c00212bd <ISO9660::seek(void*, unsigned long long)+0x2d>
c00212a6:	89 c8                	mov    eax,ecx
c00212a8:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00212ab:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00212ae:	b8 01 00 00 00       	mov    eax,0x1
c00212b3:	73 08                	jae    c00212bd <ISO9660::seek(void*, unsigned long long)+0x2d>
c00212b5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00212b8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00212bb:	31 c0                	xor    eax,eax
c00212bd:	5b                   	pop    ebx
c00212be:	c3                   	ret    
c00212bf:	90                   	nop

c00212c0 <ISO9660::tell(void*, unsigned long long*)>:
c00212c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00212c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c8:	85 d2                	test   edx,edx
c00212ca:	74 12                	je     c00212de <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00212cc:	85 c0                	test   eax,eax
c00212ce:	74 0e                	je     c00212de <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00212d0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00212d3:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00212d6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00212d9:	89 10                	mov    DWORD PTR [eax],edx
c00212db:	31 c0                	xor    eax,eax
c00212dd:	c3                   	ret    
c00212de:	b8 04 00 00 00       	mov    eax,0x4
c00212e3:	c3                   	ret    

c00212e4 <ISO9660::getName()>:
c00212e4:	b8 88 c5 02 c0       	mov    eax,0xc002c588
c00212e9:	c3                   	ret    

c00212ea <ISO9660::stat(void*, unsigned long long*)>:
c00212ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00212ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212f2:	85 d2                	test   edx,edx
c00212f4:	74 12                	je     c0021308 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00212f6:	85 c0                	test   eax,eax
c00212f8:	74 0e                	je     c0021308 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00212fa:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00212fd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021300:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021303:	89 10                	mov    DWORD PTR [eax],edx
c0021305:	31 c0                	xor    eax,eax
c0021307:	c3                   	ret    
c0021308:	b8 04 00 00 00       	mov    eax,0x4
c002130d:	c3                   	ret    

c002130e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002130e:	b8 01 00 00 00       	mov    eax,0x1
c0021313:	c3                   	ret    

c0021314 <ISO9660::unlink(char const*)>:
c0021314:	b8 01 00 00 00       	mov    eax,0x1
c0021319:	c3                   	ret    

c002131a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002131a:	b8 01 00 00 00       	mov    eax,0x1
c002131f:	c3                   	ret    

c0021320 <ISO9660::rename(char const*, char const*)>:
c0021320:	b8 01 00 00 00       	mov    eax,0x1
c0021325:	c3                   	ret    

c0021326 <ISO9660::mkdir(char const*)>:
c0021326:	b8 01 00 00 00       	mov    eax,0x1
c002132b:	c3                   	ret    

c002132c <ISO9660::close(void*)>:
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	b8 04 00 00 00       	mov    eax,0x4
c0021334:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021338:	85 d2                	test   edx,edx
c002133a:	74 0e                	je     c002134a <ISO9660::close(void*)+0x1e>
c002133c:	83 ec 0c             	sub    esp,0xc
c002133f:	52                   	push   edx
c0021340:	e8 0b e5 fe ff       	call   c000f850 <free>
c0021345:	83 c4 10             	add    esp,0x10
c0021348:	31 c0                	xor    eax,eax
c002134a:	83 c4 0c             	add    esp,0xc
c002134d:	c3                   	ret    

c002134e <ISO9660::closeDir(void*)>:
c002134e:	83 ec 0c             	sub    esp,0xc
c0021351:	b8 04 00 00 00       	mov    eax,0x4
c0021356:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002135a:	85 d2                	test   edx,edx
c002135c:	74 0e                	je     c002136c <ISO9660::closeDir(void*)+0x1e>
c002135e:	83 ec 0c             	sub    esp,0xc
c0021361:	52                   	push   edx
c0021362:	e8 e9 e4 fe ff       	call   c000f850 <free>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	31 c0                	xor    eax,eax
c002136c:	83 c4 0c             	add    esp,0xc
c002136f:	c3                   	ret    

c0021370 <ISO9660::~ISO9660()>:
c0021370:	83 ec 0c             	sub    esp,0xc
c0021373:	ba ec c5 02 c0       	mov    edx,0xc002c5ec
c0021378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002137c:	89 10                	mov    DWORD PTR [eax],edx
c002137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021382:	83 ec 0c             	sub    esp,0xc
c0021385:	50                   	push   eax
c0021386:	e8 59 1b ff ff       	call   c0012ee4 <Filesystem::~Filesystem()>
c002138b:	83 c4 10             	add    esp,0x10
c002138e:	90                   	nop
c002138f:	83 c4 0c             	add    esp,0xc
c0021392:	c3                   	ret    
c0021393:	90                   	nop

c0021394 <ISO9660::~ISO9660()>:
c0021394:	83 ec 0c             	sub    esp,0xc
c0021397:	83 ec 0c             	sub    esp,0xc
c002139a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002139e:	e8 cd ff ff ff       	call   c0021370 <ISO9660::~ISO9660()>
c00213a3:	83 c4 10             	add    esp,0x10
c00213a6:	83 ec 08             	sub    esp,0x8
c00213a9:	6a 08                	push   0x8
c00213ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213af:	e8 28 17 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00213b4:	83 c4 10             	add    esp,0x10
c00213b7:	83 c4 0c             	add    esp,0xc
c00213ba:	c3                   	ret    

c00213bb <__memmem(unsigned char*, int, unsigned char*, int)>:
c00213bb:	55                   	push   ebp
c00213bc:	31 c9                	xor    ecx,ecx
c00213be:	57                   	push   edi
c00213bf:	56                   	push   esi
c00213c0:	53                   	push   ebx
c00213c1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00213c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00213c9:	89 eb                	mov    ebx,ebp
c00213cb:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00213cf:	39 ce                	cmp    esi,ecx
c00213d1:	7e 17                	jle    c00213ea <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00213d3:	31 d2                	xor    edx,edx
c00213d5:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00213d9:	7d 13                	jge    c00213ee <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00213db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213df:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00213e2:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00213e5:	75 0d                	jne    c00213f4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00213e7:	42                   	inc    edx
c00213e8:	eb eb                	jmp    c00213d5 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00213ea:	31 c0                	xor    eax,eax
c00213ec:	eb 0a                	jmp    c00213f8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00213ee:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00213f2:	eb 04                	jmp    c00213f8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00213f4:	41                   	inc    ecx
c00213f5:	43                   	inc    ebx
c00213f6:	eb d7                	jmp    c00213cf <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00213f8:	5b                   	pop    ebx
c00213f9:	5e                   	pop    esi
c00213fa:	5f                   	pop    edi
c00213fb:	5d                   	pop    ebp
c00213fc:	c3                   	ret    

c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00213fd:	56                   	push   esi
c00213fe:	53                   	push   ebx
c00213ff:	52                   	push   edx
c0021400:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021404:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021408:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002140c:	39 0d 00 18 03 c0    	cmp    DWORD PTR ds:0xc0031800,ecx
c0021412:	75 08                	jne    c002141c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021414:	38 05 54 d6 02 c0    	cmp    BYTE PTR ds:0xc002d654,al
c002141a:	74 2b                	je     c0021447 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	a2 54 d6 02 c0       	mov    ds:0xc002d654,al
c0021424:	68 20 18 03 c0       	push   0xc0031820
c0021429:	0f be c0             	movsx  eax,al
c002142c:	6a 01                	push   0x1
c002142e:	89 0d 00 18 03 c0    	mov    DWORD PTR ds:0xc0031800,ecx
c0021434:	31 db                	xor    ebx,ebx
c0021436:	53                   	push   ebx
c0021437:	51                   	push   ecx
c0021438:	ff 34 85 dc e5 02 c0 	push   DWORD PTR [eax*4-0x3ffd1a24]
c002143f:	e8 62 4f ff ff       	call   c00163a6 <LogicalDisk::read(unsigned long long, int, void*)>
c0021444:	83 c4 20             	add    esp,0x20
c0021447:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002144f:	c7 44 24 14 20 18 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031820
c0021457:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002145b:	58                   	pop    eax
c002145c:	5b                   	pop    ebx
c002145d:	5e                   	pop    esi
c002145e:	e9 e1 f2 fd ff       	jmp    c0000744 <memcpy>
c0021463:	90                   	nop

c0021464 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021464:	81 ec 10 08 00 00    	sub    esp,0x810
c002146a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021471:	83 c0 41             	add    eax,0x41
c0021474:	0f be c0             	movsx  eax,al
c0021477:	50                   	push   eax
c0021478:	8d 44 24 08          	lea    eax,[esp+0x8]
c002147c:	50                   	push   eax
c002147d:	6a 10                	push   0x10
c002147f:	e8 79 ff ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021484:	83 c4 10             	add    esp,0x10
c0021487:	31 c0                	xor    eax,eax
c0021489:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002148e:	75 1d                	jne    c00214ad <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021490:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021495:	75 16                	jne    c00214ad <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021497:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002149c:	75 0f                	jne    c00214ad <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002149e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00214a3:	75 08                	jne    c00214ad <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00214a5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00214aa:	0f 94 c0             	sete   al
c00214ad:	81 c4 0c 08 00 00    	add    esp,0x80c
c00214b3:	c3                   	ret    

c00214b4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00214b4:	55                   	push   ebp
c00214b5:	57                   	push   edi
c00214b6:	56                   	push   esi
c00214b7:	53                   	push   ebx
c00214b8:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00214be:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00214c5:	85 ed                	test   ebp,ebp
c00214c7:	0f 84 d6 01 00 00    	je     c00216a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00214cd:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00214d5:	0f 84 c8 01 00 00    	je     c00216a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00214db:	b8 01 00 00 00       	mov    eax,0x1
c00214e0:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00214e4:	0f 85 be 01 00 00    	jne    c00216a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00214ea:	31 d2                	xor    edx,edx
c00214ec:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00214f3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214f6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00214f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00214fd:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021500:	89 04 24             	mov    DWORD PTR [esp],eax
c0021503:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021507:	01 f0                	add    eax,esi
c0021509:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002150c:	11 fa                	adc    edx,edi
c002150e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021512:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021516:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002151a:	19 d1                	sbb    ecx,edx
c002151c:	72 0a                	jb     c0021528 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002151e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021526:	eb 13                	jmp    c002153b <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002152c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021530:	29 f0                	sub    eax,esi
c0021532:	19 fa                	sbb    edx,edi
c0021534:	89 04 24             	mov    DWORD PTR [esp],eax
c0021537:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002153b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002153e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021541:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021545:	51                   	push   ecx
c0021546:	c1 e0 0b             	shl    eax,0xb
c0021549:	01 c6                	add    esi,eax
c002154b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002154f:	11 d7                	adc    edi,edx
c0021551:	50                   	push   eax
c0021552:	89 fa                	mov    edx,edi
c0021554:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021558:	89 f0                	mov    eax,esi
c002155a:	53                   	push   ebx
c002155b:	0f ac d0 0b          	shrd   eax,edx,0xb
c002155f:	50                   	push   eax
c0021560:	e8 98 fe ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021565:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021569:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002156c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021570:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021576:	83 c4 10             	add    esp,0x10
c0021579:	b8 00 08 00 00       	mov    eax,0x800
c002157e:	29 d0                	sub    eax,edx
c0021580:	39 c1                	cmp    ecx,eax
c0021582:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021586:	83 d9 00             	sbb    ecx,0x0
c0021589:	7d 1c                	jge    c00215a7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002158b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021590:	75 12                	jne    c00215a4 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021592:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021599:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002159f:	e9 fb 00 00 00       	jmp    c002169f <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00215a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00215a7:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00215aa:	31 d2                	xor    edx,edx
c00215ac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00215b0:	39 c2                	cmp    edx,eax
c00215b2:	7d 14                	jge    c00215c8 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00215b4:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00215bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00215bf:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00215c2:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00215c5:	42                   	inc    edx
c00215c6:	eb e8                	jmp    c00215b0 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00215c8:	89 c3                	mov    ebx,eax
c00215ca:	85 c0                	test   eax,eax
c00215cc:	79 02                	jns    c00215d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00215ce:	31 db                	xor    ebx,ebx
c00215d0:	99                   	cdq    
c00215d1:	01 c3                	add    ebx,eax
c00215d3:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00215da:	01 c6                	add    esi,eax
c00215dc:	11 d7                	adc    edi,edx
c00215de:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00215e2:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00215e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00215e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00215ed:	29 c6                	sub    esi,eax
c00215ef:	19 d7                	sbb    edi,edx
c00215f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00215f4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00215f8:	b8 ff 07 00 00       	mov    eax,0x7ff
c00215fd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021600:	b8 00 00 00 00       	mov    eax,0x0
c0021605:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021609:	7d 3e                	jge    c0021649 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002160b:	52                   	push   edx
c002160c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021610:	50                   	push   eax
c0021611:	53                   	push   ebx
c0021612:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021616:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002161a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002161e:	50                   	push   eax
c002161f:	e8 d9 fd ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021624:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002162c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021631:	81 c3 00 08 00 00    	add    ebx,0x800
c0021637:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002163f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021644:	83 c4 10             	add    esp,0x10
c0021647:	eb af                	jmp    c00215f8 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002164d:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021650:	74 32                	je     c0021684 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021652:	50                   	push   eax
c0021653:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021657:	50                   	push   eax
c0021658:	8d 44 24 28          	lea    eax,[esp+0x28]
c002165c:	50                   	push   eax
c002165d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021661:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021665:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021669:	56                   	push   esi
c002166a:	e8 8e fd ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002166f:	83 c4 0c             	add    esp,0xc
c0021672:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021676:	8d 44 24 28          	lea    eax,[esp+0x28]
c002167a:	50                   	push   eax
c002167b:	53                   	push   ebx
c002167c:	e8 c3 f0 fd ff       	call   c0000744 <memcpy>
c0021681:	83 c4 10             	add    esp,0x10
c0021684:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002168b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002168f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021693:	89 38                	mov    DWORD PTR [eax],edi
c0021695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021699:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002169c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002169f:	31 c0                	xor    eax,eax
c00216a1:	eb 05                	jmp    c00216a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00216a3:	b8 04 00 00 00       	mov    eax,0x4
c00216a8:	81 c4 2c 08 00 00    	add    esp,0x82c
c00216ae:	5b                   	pop    ebx
c00216af:	5e                   	pop    esi
c00216b0:	5f                   	pop    edi
c00216b1:	5d                   	pop    ebp
c00216b2:	c3                   	ret    
c00216b3:	90                   	nop

c00216b4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00216b4:	55                   	push   ebp
c00216b5:	57                   	push   edi
c00216b6:	56                   	push   esi
c00216b7:	53                   	push   ebx
c00216b8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00216be:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00216c5:	85 f6                	test   esi,esi
c00216c7:	0f 84 64 02 00 00    	je     c0021931 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00216cd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00216d5:	0f 84 56 02 00 00    	je     c0021931 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00216db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00216de:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00216e1:	75 0a                	jne    c00216ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00216e3:	b8 07 00 00 00       	mov    eax,0x7
c00216e8:	e9 49 02 00 00       	jmp    c0021936 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00216ed:	50                   	push   eax
c00216ee:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00216f2:	50                   	push   eax
c00216f3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00216fa:	53                   	push   ebx
c00216fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00216fd:	c1 e0 0b             	shl    eax,0xb
c0021700:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021703:	c1 e8 0b             	shr    eax,0xb
c0021706:	50                   	push   eax
c0021707:	e8 f1 fc ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002170c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002170f:	83 c4 10             	add    esp,0x10
c0021712:	89 c1                	mov    ecx,eax
c0021714:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021717:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002171d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021720:	84 db                	test   bl,bl
c0021722:	0f 85 90 00 00 00    	jne    c00217b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021728:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002172e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021734:	29 c7                	sub    edi,eax
c0021736:	89 fb                	mov    ebx,edi
c0021738:	c1 fb 1f             	sar    ebx,0x1f
c002173b:	01 f8                	add    eax,edi
c002173d:	11 da                	adc    edx,ebx
c002173f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021743:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021747:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c002174a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002174d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021750:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021753:	89 04 24             	mov    DWORD PTR [esp],eax
c0021756:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002175a:	89 d8                	mov    eax,ebx
c002175c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002175f:	ba 00 00 00 00       	mov    edx,0x0
c0021764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021768:	b8 00 00 00 00       	mov    eax,0x0
c002176d:	73 0b                	jae    c002177a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c002176f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021776:	29 f8                	sub    eax,edi
c0021778:	19 da                	sbb    edx,ebx
c002177a:	89 d3                	mov    ebx,edx
c002177c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002177f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021782:	09 c3                	or     ebx,eax
c0021784:	0f 84 59 ff ff ff    	je     c00216e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002178a:	55                   	push   ebp
c002178b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002178f:	50                   	push   eax
c0021790:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021797:	53                   	push   ebx
c0021798:	8b 06                	mov    eax,DWORD PTR [esi]
c002179a:	c1 e0 0b             	shl    eax,0xb
c002179d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00217a1:	c1 e8 0b             	shr    eax,0xb
c00217a4:	50                   	push   eax
c00217a5:	e8 53 fc ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00217ad:	83 c4 10             	add    esp,0x10
c00217b0:	25 ff 07 00 00       	and    eax,0x7ff
c00217b5:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00217b8:	57                   	push   edi
c00217b9:	6a 28                	push   0x28
c00217bb:	6a 00                	push   0x0
c00217bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00217c1:	50                   	push   eax
c00217c2:	e8 b1 ef fd ff       	call   c0000778 <memset>
c00217c7:	31 d2                	xor    edx,edx
c00217c9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00217cc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00217d2:	89 f8                	mov    eax,edi
c00217d4:	83 c0 21             	add    eax,0x21
c00217d7:	83 d2 00             	adc    edx,0x0
c00217da:	89 c7                	mov    edi,eax
c00217dc:	89 d5                	mov    ebp,edx
c00217de:	83 c4 10             	add    esp,0x10
c00217e1:	31 c9                	xor    ecx,ecx
c00217e3:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00217ea:	83 f9 28             	cmp    ecx,0x28
c00217ed:	88 04 24             	mov    BYTE PTR [esp],al
c00217f0:	0f 94 c2             	sete   dl
c00217f3:	88 d0                	mov    al,dl
c00217f5:	ba ff 07 00 00       	mov    edx,0x7ff
c00217fa:	39 fa                	cmp    edx,edi
c00217fc:	ba 00 00 00 00       	mov    edx,0x0
c0021801:	19 ea                	sbb    edx,ebp
c0021803:	0f 92 c2             	setb   dl
c0021806:	09 c2                	or     edx,eax
c0021808:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002180c:	0f 94 c0             	sete   al
c002180f:	08 d0                	or     al,dl
c0021811:	75 16                	jne    c0021829 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021813:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021817:	74 10                	je     c0021829 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021819:	8a 04 24             	mov    al,BYTE PTR [esp]
c002181c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021820:	41                   	inc    ecx
c0021821:	83 c7 01             	add    edi,0x1
c0021824:	83 d5 00             	adc    ebp,0x0
c0021827:	eb ba                	jmp    c00217e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021829:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021830:	83 ec 0c             	sub    esp,0xc
c0021833:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021837:	57                   	push   edi
c0021838:	e8 57 ef fd ff       	call   c0000794 <strlen>
c002183d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021845:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021849:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021850:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021853:	5a                   	pop    edx
c0021854:	25 ff 07 00 00       	and    eax,0x7ff
c0021859:	01 c8                	add    eax,ecx
c002185b:	59                   	pop    ecx
c002185c:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021862:	83 e0 02             	and    eax,0x2
c0021865:	3c 01                	cmp    al,0x1
c0021867:	19 c0                	sbb    eax,eax
c0021869:	83 c0 02             	add    eax,0x2
c002186c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021870:	57                   	push   edi
c0021871:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021875:	50                   	push   eax
c0021876:	e8 b9 ef fd ff       	call   c0000834 <strcpy>
c002187b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002187f:	83 c4 10             	add    esp,0x10
c0021882:	84 c0                	test   al,al
c0021884:	75 21                	jne    c00218a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021886:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002188e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021896:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002189e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00218a5:	eb 28                	jmp    c00218cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00218a7:	fe c8                	dec    al
c00218a9:	75 24                	jne    c00218cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00218ab:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00218b3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00218bb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00218c3:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00218ca:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00218cf:	0f b6 fb             	movzx  edi,bl
c00218d2:	31 db                	xor    ebx,ebx
c00218d4:	50                   	push   eax
c00218d5:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00218dc:	8d 44 24 48          	lea    eax,[esp+0x48]
c00218e0:	50                   	push   eax
c00218e1:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00218e8:	e8 57 ee fd ff       	call   c0000744 <memcpy>
c00218ed:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00218f4:	89 f9                	mov    ecx,edi
c00218f6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00218fc:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00218ff:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021902:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021905:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021908:	83 c4 10             	add    esp,0x10
c002190b:	39 c7                	cmp    edi,eax
c002190d:	89 df                	mov    edi,ebx
c002190f:	19 d7                	sbb    edi,edx
c0021911:	72 10                	jb     c0021923 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021913:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c002191a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021921:	eb 0a                	jmp    c002192d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021923:	29 c8                	sub    eax,ecx
c0021925:	19 da                	sbb    edx,ebx
c0021927:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002192a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002192d:	31 c0                	xor    eax,eax
c002192f:	eb 05                	jmp    c0021936 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021931:	b8 04 00 00 00       	mov    eax,0x4
c0021936:	81 c4 5c 09 00 00    	add    esp,0x95c
c002193c:	5b                   	pop    ebx
c002193d:	5e                   	pop    esi
c002193e:	5f                   	pop    edi
c002193f:	5d                   	pop    ebp
c0021940:	c3                   	ret    

c0021941 <readRoot(unsigned int*, unsigned int*, char)>:
c0021941:	81 ec 40 08 00 00    	sub    esp,0x840
c0021947:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002194f:	50                   	push   eax
c0021950:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021954:	50                   	push   eax
c0021955:	6a 10                	push   0x10
c0021957:	e8 a1 fa ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002195c:	83 c4 0c             	add    esp,0xc
c002195f:	6a 22                	push   0x22
c0021961:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021968:	50                   	push   eax
c0021969:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002196d:	50                   	push   eax
c002196e:	e8 d1 ed fd ff       	call   c0000744 <memcpy>
c0021973:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002197a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002197e:	89 10                	mov    DWORD PTR [eax],edx
c0021980:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021987:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002198b:	89 10                	mov    DWORD PTR [eax],edx
c002198d:	b0 01                	mov    al,0x1
c002198f:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021995:	c3                   	ret    

c0021996 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021996:	55                   	push   ebp
c0021997:	57                   	push   edi
c0021998:	56                   	push   esi
c0021999:	53                   	push   ebx
c002199a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219a0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00219a7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00219ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00219b2:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00219b6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00219ba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00219be:	75 03                	jne    c00219c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00219c0:	83 c3 02             	add    ebx,0x2
c00219c3:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00219c6:	75 03                	jne    c00219cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00219c8:	43                   	inc    ebx
c00219c9:	eb f8                	jmp    c00219c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00219cb:	51                   	push   ecx
c00219cc:	68 00 01 00 00       	push   0x100
c00219d1:	6a 00                	push   0x0
c00219d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219d7:	50                   	push   eax
c00219d8:	e8 9b ed fd ff       	call   c0000778 <memset>
c00219dd:	83 c4 10             	add    esp,0x10
c00219e0:	31 d2                	xor    edx,edx
c00219e2:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00219e5:	84 c0                	test   al,al
c00219e7:	74 21                	je     c0021a0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00219e9:	3c 2f                	cmp    al,0x2f
c00219eb:	75 0b                	jne    c00219f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00219ed:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00219f1:	bd 01 00 00 00       	mov    ebp,0x1
c00219f6:	eb 14                	jmp    c0021a0c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00219f8:	8d 48 9f             	lea    ecx,[eax-0x61]
c00219fb:	80 f9 19             	cmp    cl,0x19
c00219fe:	77 03                	ja     c0021a03 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021a00:	83 e8 20             	sub    eax,0x20
c0021a03:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021a07:	42                   	inc    edx
c0021a08:	eb d8                	jmp    c00219e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021a0a:	31 ed                	xor    ebp,ebp
c0021a0c:	83 ec 0c             	sub    esp,0xc
c0021a0f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021a16:	e8 25 de fe ff       	call   c000f840 <malloc>
c0021a1b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021a22:	89 c6                	mov    esi,eax
c0021a24:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021a2a:	c1 ef 0b             	shr    edi,0xb
c0021a2d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021a34:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021a40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a44:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021a4b:	74 28                	je     c0021a75 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021a4d:	52                   	push   edx
c0021a4e:	57                   	push   edi
c0021a4f:	50                   	push   eax
c0021a50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021a54:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021a5b:	e8 9d f9 ff ff       	call   c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a64:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021a6b:	05 00 08 00 00       	add    eax,0x800
c0021a70:	83 c4 10             	add    esp,0x10
c0021a73:	eb cb                	jmp    c0021a40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021a75:	83 ec 0c             	sub    esp,0xc
c0021a78:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021a7c:	57                   	push   edi
c0021a7d:	e8 12 ed fd ff       	call   c0000794 <strlen>
c0021a82:	50                   	push   eax
c0021a83:	57                   	push   edi
c0021a84:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021a8b:	56                   	push   esi
c0021a8c:	e8 2a f9 ff ff       	call   c00213bb <__memmem(unsigned char*, int, unsigned char*, int)>
c0021a91:	83 c4 20             	add    esp,0x20
c0021a94:	85 c0                	test   eax,eax
c0021a96:	75 13                	jne    c0021aab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021a98:	83 ec 0c             	sub    esp,0xc
c0021a9b:	56                   	push   esi
c0021a9c:	e8 af dd fe ff       	call   c000f850 <free>
c0021aa1:	83 c4 10             	add    esp,0x10
c0021aa4:	31 c0                	xor    eax,eax
c0021aa6:	e9 b3 00 00 00       	jmp    c0021b5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021aab:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021aaf:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021ab3:	c1 e7 08             	shl    edi,0x8
c0021ab6:	c1 e2 10             	shl    edx,0x10
c0021ab9:	09 d7                	or     edi,edx
c0021abb:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021abf:	09 d7                	or     edi,edx
c0021ac1:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ac5:	c1 e2 18             	shl    edx,0x18
c0021ac8:	09 d7                	or     edi,edx
c0021aca:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ace:	89 d1                	mov    ecx,edx
c0021ad0:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ad4:	c1 e1 08             	shl    ecx,0x8
c0021ad7:	c1 e2 10             	shl    edx,0x10
c0021ada:	09 ca                	or     edx,ecx
c0021adc:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ae0:	09 ca                	or     edx,ecx
c0021ae2:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ae6:	c1 e1 18             	shl    ecx,0x18
c0021ae9:	09 ca                	or     edx,ecx
c0021aeb:	89 e9                	mov    ecx,ebp
c0021aed:	84 c9                	test   cl,cl
c0021aef:	74 3c                	je     c0021b2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021af1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021af5:	83 ec 0c             	sub    esp,0xc
c0021af8:	56                   	push   esi
c0021af9:	e8 52 dd fe ff       	call   c000f850 <free>
c0021afe:	83 c4 0c             	add    esp,0xc
c0021b01:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b08:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021b0d:	50                   	push   eax
c0021b0e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b15:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021b20:	52                   	push   edx
c0021b21:	57                   	push   edi
c0021b22:	53                   	push   ebx
c0021b23:	e8 6e fe ff ff       	call   c0021996 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021b28:	83 c4 20             	add    esp,0x20
c0021b2b:	eb 31                	jmp    c0021b5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021b2d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021b30:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021b37:	d0 e8                	shr    al,1
c0021b39:	89 3b                	mov    DWORD PTR [ebx],edi
c0021b3b:	83 e0 01             	and    eax,0x1
c0021b3e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021b45:	83 ec 0c             	sub    esp,0xc
c0021b48:	89 13                	mov    DWORD PTR [ebx],edx
c0021b4a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021b51:	89 03                	mov    DWORD PTR [ebx],eax
c0021b53:	56                   	push   esi
c0021b54:	e8 f7 dc fe ff       	call   c000f850 <free>
c0021b59:	83 c4 10             	add    esp,0x10
c0021b5c:	b0 01                	mov    al,0x1
c0021b5e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b64:	5b                   	pop    ebx
c0021b65:	5e                   	pop    esi
c0021b66:	5f                   	pop    edi
c0021b67:	5d                   	pop    ebp
c0021b68:	c3                   	ret    

c0021b69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021b69:	55                   	push   ebp
c0021b6a:	57                   	push   edi
c0021b6b:	56                   	push   esi
c0021b6c:	53                   	push   ebx
c0021b6d:	83 ec 20             	sub    esp,0x20
c0021b70:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021b74:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021b78:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021b7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b84:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021b8c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021b91:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021b97:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021b9d:	57                   	push   edi
c0021b9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ba2:	50                   	push   eax
c0021ba3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ba7:	50                   	push   eax
c0021ba8:	e8 94 fd ff ff       	call   c0021941 <readRoot(unsigned int*, unsigned int*, char)>
c0021bad:	5a                   	pop    edx
c0021bae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021bb2:	e8 dd eb fd ff       	call   c0000794 <strlen>
c0021bb7:	83 c4 10             	add    esp,0x10
c0021bba:	83 f8 03             	cmp    eax,0x3
c0021bbd:	77 17                	ja     c0021bd6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021bbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bc3:	89 03                	mov    DWORD PTR [ebx],eax
c0021bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bc9:	89 06                	mov    DWORD PTR [esi],eax
c0021bcb:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021bd2:	b0 01                	mov    al,0x1
c0021bd4:	eb 19                	jmp    c0021bef <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021bd6:	50                   	push   eax
c0021bd7:	55                   	push   ebp
c0021bd8:	57                   	push   edi
c0021bd9:	56                   	push   esi
c0021bda:	53                   	push   ebx
c0021bdb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bdf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021be3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021be7:	e8 aa fd ff ff       	call   c0021996 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021bec:	83 c4 20             	add    esp,0x20
c0021bef:	83 c4 1c             	add    esp,0x1c
c0021bf2:	5b                   	pop    ebx
c0021bf3:	5e                   	pop    esi
c0021bf4:	5f                   	pop    edi
c0021bf5:	5d                   	pop    ebp
c0021bf6:	c3                   	ret    
c0021bf7:	90                   	nop

c0021bf8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021bf8:	57                   	push   edi
c0021bf9:	56                   	push   esi
c0021bfa:	53                   	push   ebx
c0021bfb:	83 ec 10             	sub    esp,0x10
c0021bfe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c02:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021c06:	85 ff                	test   edi,edi
c0021c08:	0f 84 9d 00 00 00    	je     c0021cab <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021c0e:	85 f6                	test   esi,esi
c0021c10:	0f 84 95 00 00 00    	je     c0021cab <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021c16:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021c1b:	74 17                	je     c0021c34 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021c1d:	83 ec 0c             	sub    esp,0xc
c0021c20:	68 a3 c5 02 c0       	push   0xc002c5a3
c0021c25:	e8 92 0f ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0021c2a:	83 c4 10             	add    esp,0x10
c0021c2d:	b8 03 00 00 00       	mov    eax,0x3
c0021c32:	eb 7c                	jmp    c0021cb0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c34:	83 ec 0c             	sub    esp,0xc
c0021c37:	6a 1c                	push   0x1c
c0021c39:	e8 02 dc fe ff       	call   c000f840 <malloc>
c0021c3e:	89 07                	mov    DWORD PTR [edi],eax
c0021c40:	89 c3                	mov    ebx,eax
c0021c42:	58                   	pop    eax
c0021c43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c47:	50                   	push   eax
c0021c48:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c4b:	50                   	push   eax
c0021c4c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c50:	50                   	push   eax
c0021c51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c55:	50                   	push   eax
c0021c56:	56                   	push   esi
c0021c57:	e8 0d ff ff ff       	call   c0021b69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c5c:	83 c4 20             	add    esp,0x20
c0021c5f:	84 c0                	test   al,al
c0021c61:	74 07                	je     c0021c6a <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021c63:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021c68:	74 0b                	je     c0021c75 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021c6a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021c6e:	b8 01 00 00 00       	mov    eax,0x1
c0021c73:	eb 3b                	jmp    c0021cb0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c79:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021c7d:	89 03                	mov    DWORD PTR [ebx],eax
c0021c7f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c8a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021c91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021c9b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ca2:	8a 06                	mov    al,BYTE PTR [esi]
c0021ca4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ca7:	31 c0                	xor    eax,eax
c0021ca9:	eb 05                	jmp    c0021cb0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021cab:	b8 04 00 00 00       	mov    eax,0x4
c0021cb0:	83 c4 10             	add    esp,0x10
c0021cb3:	5b                   	pop    ebx
c0021cb4:	5e                   	pop    esi
c0021cb5:	5f                   	pop    edi
c0021cb6:	c3                   	ret    
c0021cb7:	90                   	nop

c0021cb8 <ISO9660::exists(char const*)>:
c0021cb8:	83 ec 28             	sub    esp,0x28
c0021cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021cbf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021cc3:	52                   	push   edx
c0021cc4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021cc7:	52                   	push   edx
c0021cc8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ccc:	52                   	push   edx
c0021ccd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021cd1:	52                   	push   edx
c0021cd2:	50                   	push   eax
c0021cd3:	e8 91 fe ff ff       	call   c0021b69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021cd8:	83 c4 3c             	add    esp,0x3c
c0021cdb:	c3                   	ret    

c0021cdc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021cdc:	56                   	push   esi
c0021cdd:	53                   	push   ebx
c0021cde:	83 ec 14             	sub    esp,0x14
c0021ce1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021ce5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ce9:	85 db                	test   ebx,ebx
c0021ceb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021cef:	0f 94 c2             	sete   dl
c0021cf2:	85 f6                	test   esi,esi
c0021cf4:	0f 94 c0             	sete   al
c0021cf7:	08 c2                	or     dl,al
c0021cf9:	75 68                	jne    c0021d63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021cfb:	85 c9                	test   ecx,ecx
c0021cfd:	74 64                	je     c0021d63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021cff:	83 ec 0c             	sub    esp,0xc
c0021d02:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021d05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d09:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021d0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d16:	50                   	push   eax
c0021d17:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021d1a:	50                   	push   eax
c0021d1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d1f:	50                   	push   eax
c0021d20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d24:	50                   	push   eax
c0021d25:	51                   	push   ecx
c0021d26:	e8 3e fe ff ff       	call   c0021b69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d2b:	83 c4 20             	add    esp,0x20
c0021d2e:	ba 01 00 00 00       	mov    edx,0x1
c0021d33:	84 c0                	test   al,al
c0021d35:	74 31                	je     c0021d68 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d3b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d42:	89 03                	mov    DWORD PTR [ebx],eax
c0021d44:	ba 00 00 00 00       	mov    edx,0x0
c0021d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d4d:	85 c0                	test   eax,eax
c0021d4f:	0f 95 06             	setne  BYTE PTR [esi]
c0021d52:	74 14                	je     c0021d68 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d54:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021d5a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d61:	eb 05                	jmp    c0021d68 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d63:	ba 04 00 00 00       	mov    edx,0x4
c0021d68:	83 c4 14             	add    esp,0x14
c0021d6b:	89 d0                	mov    eax,edx
c0021d6d:	5b                   	pop    ebx
c0021d6e:	5e                   	pop    esi
c0021d6f:	c3                   	ret    

c0021d70 <ISO9660::openDir(char const*, void**)>:
c0021d70:	57                   	push   edi
c0021d71:	56                   	push   esi
c0021d72:	53                   	push   ebx
c0021d73:	83 ec 10             	sub    esp,0x10
c0021d76:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021d7a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021d7e:	85 ff                	test   edi,edi
c0021d80:	0f 84 95 00 00 00    	je     c0021e1b <ISO9660::openDir(char const*, void**)+0xab>
c0021d86:	85 f6                	test   esi,esi
c0021d88:	0f 84 8d 00 00 00    	je     c0021e1b <ISO9660::openDir(char const*, void**)+0xab>
c0021d8e:	83 ec 0c             	sub    esp,0xc
c0021d91:	6a 1c                	push   0x1c
c0021d93:	e8 a8 da fe ff       	call   c000f840 <malloc>
c0021d98:	89 07                	mov    DWORD PTR [edi],eax
c0021d9a:	89 c3                	mov    ebx,eax
c0021d9c:	59                   	pop    ecx
c0021d9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021da1:	50                   	push   eax
c0021da2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021da5:	50                   	push   eax
c0021da6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021daa:	50                   	push   eax
c0021dab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021daf:	50                   	push   eax
c0021db0:	56                   	push   esi
c0021db1:	e8 b3 fd ff ff       	call   c0021b69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021db6:	83 c4 20             	add    esp,0x20
c0021db9:	84 c0                	test   al,al
c0021dbb:	74 07                	je     c0021dc4 <ISO9660::openDir(char const*, void**)+0x54>
c0021dbd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021dc2:	75 21                	jne    c0021de5 <ISO9660::openDir(char const*, void**)+0x75>
c0021dc4:	0f b6 c0             	movzx  eax,al
c0021dc7:	52                   	push   edx
c0021dc8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021dcc:	50                   	push   eax
c0021dcd:	68 c9 c5 02 c0       	push   0xc002c5c9
c0021dd2:	e8 e5 0d ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0021dd7:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ddb:	83 c4 10             	add    esp,0x10
c0021dde:	b8 01 00 00 00       	mov    eax,0x1
c0021de3:	eb 3b                	jmp    c0021e20 <ISO9660::openDir(char const*, void**)+0xb0>
c0021de5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ded:	89 03                	mov    DWORD PTR [ebx],eax
c0021def:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021dfa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021e01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021e0b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021e12:	8a 06                	mov    al,BYTE PTR [esi]
c0021e14:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021e17:	31 c0                	xor    eax,eax
c0021e19:	eb 05                	jmp    c0021e20 <ISO9660::openDir(char const*, void**)+0xb0>
c0021e1b:	b8 04 00 00 00       	mov    eax,0x4
c0021e20:	83 c4 10             	add    esp,0x10
c0021e23:	5b                   	pop    ebx
c0021e24:	5e                   	pop    esi
c0021e25:	5f                   	pop    edi
c0021e26:	c3                   	ret    
c0021e27:	90                   	nop

c0021e28 <ISO9660::ISO9660()>:
c0021e28:	83 ec 0c             	sub    esp,0xc
c0021e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e2f:	83 ec 0c             	sub    esp,0xc
c0021e32:	50                   	push   eax
c0021e33:	e8 88 10 ff ff       	call   c0012ec0 <Filesystem::Filesystem()>
c0021e38:	83 c4 10             	add    esp,0x10
c0021e3b:	ba ec c5 02 c0       	mov    edx,0xc002c5ec
c0021e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e44:	89 10                	mov    DWORD PTR [eax],edx
c0021e46:	90                   	nop
c0021e47:	83 c4 0c             	add    esp,0xc
c0021e4a:	c3                   	ret    
c0021e4b:	90                   	nop

c0021e4c <SoundChannel::~SoundChannel()>:
c0021e4c:	83 ec 0c             	sub    esp,0xc
c0021e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021e56:	83 ec 0c             	sub    esp,0xc
c0021e59:	50                   	push   eax
c0021e5a:	e8 f1 d9 fe ff       	call   c000f850 <free>
c0021e5f:	83 c4 10             	add    esp,0x10
c0021e62:	90                   	nop
c0021e63:	83 c4 0c             	add    esp,0xc
c0021e66:	c3                   	ret    
c0021e67:	90                   	nop

c0021e68 <SoundChannel::setSpeed(float)>:
c0021e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e70:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021e73:	c3                   	ret    

c0021e74 <SoundChannel::getSpeed()>:
c0021e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e78:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021e7b:	c3                   	ret    

c0021e7c <SoundChannel::setVolume(int)>:
c0021e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e80:	83 f8 64             	cmp    eax,0x64
c0021e83:	7e 05                	jle    c0021e8a <SoundChannel::setVolume(int)+0xe>
c0021e85:	b8 64 00 00 00       	mov    eax,0x64
c0021e8a:	85 c0                	test   eax,eax
c0021e8c:	79 02                	jns    c0021e90 <SoundChannel::setVolume(int)+0x14>
c0021e8e:	31 c0                	xor    eax,eax
c0021e90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e94:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021e97:	c3                   	ret    

c0021e98 <SoundChannel::getVolume()>:
c0021e98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e9c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021e9f:	c3                   	ret    

c0021ea0 <SoundChannel::pause()>:
c0021ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ea4:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021ea8:	c3                   	ret    
c0021ea9:	90                   	nop

c0021eaa <SoundChannel::SoundChannel(int, int, int, int)>:
c0021eaa:	83 ec 1c             	sub    esp,0x1c
c0021ead:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021eb1:	e8 ea ff ff ff       	call   c0021ea0 <SoundChannel::pause()>
c0021eb6:	83 c4 04             	add    esp,0x4
c0021eb9:	6a 50                	push   0x50
c0021ebb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021ebf:	e8 b8 ff ff ff       	call   c0021e7c <SoundChannel::setVolume(int)>
c0021ec4:	83 c4 08             	add    esp,0x8
c0021ec7:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0021ecc:	50                   	push   eax
c0021ecd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021ed1:	e8 92 ff ff ff       	call   c0021e68 <SoundChannel::setSpeed(float)>
c0021ed6:	83 c4 08             	add    esp,0x8
c0021ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021edd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021ee1:	89 10                	mov    DWORD PTR [eax],edx
c0021ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021eeb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ef2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ef6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ef9:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021efe:	75 23                	jne    c0021f23 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f04:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f0d:	0f af c2             	imul   eax,edx
c0021f10:	85 c0                	test   eax,eax
c0021f12:	79 03                	jns    c0021f17 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021f14:	83 c0 03             	add    eax,0x3
c0021f17:	c1 f8 02             	sar    eax,0x2
c0021f1a:	05 a0 0f 00 00       	add    eax,0xfa0
c0021f1f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021f2b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f32:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f3d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021f4b:	c1 e0 02             	shl    eax,0x2
c0021f4e:	83 ec 0c             	sub    esp,0xc
c0021f51:	50                   	push   eax
c0021f52:	e8 e9 d8 fe ff       	call   c000f840 <malloc>
c0021f57:	83 c4 10             	add    esp,0x10
c0021f5a:	89 c2                	mov    edx,eax
c0021f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021f63:	83 ec 04             	sub    esp,0x4
c0021f66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f6a:	50                   	push   eax
c0021f6b:	6a 01                	push   0x1
c0021f6d:	6a 04                	push   0x4
c0021f6f:	e8 2b 6c fe ff       	call   c0008b9f <src_new>
c0021f74:	83 c4 10             	add    esp,0x10
c0021f77:	89 c2                	mov    edx,eax
c0021f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f84:	85 c0                	test   eax,eax
c0021f86:	74 10                	je     c0021f98 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021f88:	83 ec 0c             	sub    esp,0xc
c0021f8b:	68 48 c6 02 c0       	push   0xc002c648
c0021f90:	e8 a2 82 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0021f95:	83 c4 10             	add    esp,0x10
c0021f98:	a0 20 24 03 c0       	mov    al,ds:0xc0032420
c0021f9d:	83 f0 01             	xor    eax,0x1
c0021fa0:	84 c0                	test   al,al
c0021fa2:	74 57                	je     c0021ffb <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021fa4:	a1 68 c6 02 c0       	mov    eax,ds:0xc002c668
c0021fa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fb5:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021fbd:	7f 35                	jg     c0021ff4 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021fbf:	83 ec 0c             	sub    esp,0xc
c0021fc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fc6:	e8 9c 4f 00 00       	call   c0026f67 <__floatsisf>
c0021fcb:	83 c4 10             	add    esp,0x10
c0021fce:	8b 15 68 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c668
c0021fd4:	83 ec 08             	sub    esp,0x8
c0021fd7:	52                   	push   edx
c0021fd8:	50                   	push   eax
c0021fd9:	e8 9b 4b 00 00       	call   c0026b79 <__mulsf3>
c0021fde:	83 c4 10             	add    esp,0x10
c0021fe1:	89 c2                	mov    edx,eax
c0021fe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fe7:	89 14 85 20 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfe0],edx
c0021fee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ff2:	eb c1                	jmp    c0021fb5 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021ff4:	c6 05 20 24 03 c0 01 	mov    BYTE PTR ds:0xc0032420,0x1
c0021ffb:	90                   	nop
c0021ffc:	83 c4 1c             	add    esp,0x1c
c0021fff:	c3                   	ret    

c0022000 <SoundChannel::play()>:
c0022000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022004:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022008:	c3                   	ret    
c0022009:	90                   	nop

c002200a <SoundChannel::paused()>:
c002200a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002200e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022011:	c3                   	ret    

c0022012 <SoundChannel::getSampleRate()>:
c0022012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022016:	8b 00                	mov    eax,DWORD PTR [eax]
c0022018:	c3                   	ret    
c0022019:	90                   	nop

c002201a <SoundChannel::getBits()>:
c002201a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002201e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022021:	c3                   	ret    

c0022022 <SoundChannel::getBufferUsed()>:
c0022022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022026:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022029:	c3                   	ret    

c002202a <SoundChannel::getBufferSize()>:
c002202a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002202e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022031:	c3                   	ret    

c0022032 <SoundChannel::unbuffer(float*, int, int)>:
c0022032:	56                   	push   esi
c0022033:	53                   	push   ebx
c0022034:	83 ec 40             	sub    esp,0x40
c0022037:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002203b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002203e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022042:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022045:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022049:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002204d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022051:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022055:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022059:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002205d:	e8 05 4f 00 00       	call   c0026f67 <__floatsisf>
c0022062:	5a                   	pop    edx
c0022063:	89 c6                	mov    esi,eax
c0022065:	ff 33                	push   DWORD PTR [ebx]
c0022067:	e8 fb 4e 00 00       	call   c0026f67 <__floatsisf>
c002206c:	59                   	pop    ecx
c002206d:	5a                   	pop    edx
c002206e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022071:	50                   	push   eax
c0022072:	e8 02 4b 00 00       	call   c0026b79 <__mulsf3>
c0022077:	59                   	pop    ecx
c0022078:	5a                   	pop    edx
c0022079:	50                   	push   eax
c002207a:	56                   	push   esi
c002207b:	e8 bc 4c 00 00       	call   c0026d3c <__divsf3>
c0022080:	89 04 24             	mov    DWORD PTR [esp],eax
c0022083:	e8 af 61 00 00       	call   c0028237 <__extendsfdf2>
c0022088:	59                   	pop    ecx
c0022089:	5e                   	pop    esi
c002208a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002208e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022092:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002209a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002209e:	50                   	push   eax
c002209f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00220a2:	e8 ed 66 fe ff       	call   c0008794 <src_process>
c00220a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00220ab:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00220ae:	83 c4 0c             	add    esp,0xc
c00220b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00220b4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00220b7:	29 d0                	sub    eax,edx
c00220b9:	c1 e0 02             	shl    eax,0x2
c00220bc:	50                   	push   eax
c00220bd:	8d 04 91             	lea    eax,[ecx+edx*4]
c00220c0:	50                   	push   eax
c00220c1:	51                   	push   ecx
c00220c2:	e8 b5 e5 fd ff       	call   c000067c <memmove>
c00220c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220cb:	83 c4 44             	add    esp,0x44
c00220ce:	5b                   	pop    ebx
c00220cf:	5e                   	pop    esi
c00220d0:	c3                   	ret    
c00220d1:	90                   	nop

c00220d2 <SoundChannel::buffer8(unsigned char*, int)>:
c00220d2:	55                   	push   ebp
c00220d3:	57                   	push   edi
c00220d4:	56                   	push   esi
c00220d5:	53                   	push   ebx
c00220d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220da:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00220de:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00220e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00220e5:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00220e8:	74 7a                	je     c0022164 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00220ea:	85 ff                	test   edi,edi
c00220ec:	7e 76                	jle    c0022164 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00220ee:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00220f2:	8d 70 01             	lea    esi,[eax+0x1]
c00220f5:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00220f8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00220fb:	8b 1c 9d 20 20 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdfe0]
c0022102:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022105:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022108:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002210b:	74 5e                	je     c002216b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002210d:	83 ff 01             	cmp    edi,0x1
c0022110:	74 4b                	je     c002215d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022112:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022116:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022119:	8d 70 01             	lea    esi,[eax+0x1]
c002211c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002211f:	8b 1c 9d 20 20 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdfe0]
c0022126:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022129:	b8 02 00 00 00       	mov    eax,0x2
c002212e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022131:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022134:	75 23                	jne    c0022159 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022136:	eb 27                	jmp    c002215f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022138:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002213d:	8d 71 01             	lea    esi,[ecx+0x1]
c0022140:	40                   	inc    eax
c0022141:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022144:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022147:	8b 1c 9d 20 20 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdfe0]
c002214e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022151:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022154:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022157:	74 06                	je     c002215f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022159:	39 c7                	cmp    edi,eax
c002215b:	75 db                	jne    c0022138 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002215d:	89 f8                	mov    eax,edi
c002215f:	5b                   	pop    ebx
c0022160:	5e                   	pop    esi
c0022161:	5f                   	pop    edi
c0022162:	5d                   	pop    ebp
c0022163:	c3                   	ret    
c0022164:	5b                   	pop    ebx
c0022165:	31 c0                	xor    eax,eax
c0022167:	5e                   	pop    esi
c0022168:	5f                   	pop    edi
c0022169:	5d                   	pop    ebp
c002216a:	c3                   	ret    
c002216b:	b8 01 00 00 00       	mov    eax,0x1
c0022170:	eb ed                	jmp    c002215f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022172 <SoundDevice::SoundDevice(char const*)>:
c0022172:	83 ec 1c             	sub    esp,0x1c
c0022175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022179:	83 ec 08             	sub    esp,0x8
c002217c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022180:	50                   	push   eax
c0022181:	e8 4c 20 ff ff       	call   c00141d2 <Device::Device(char const*)>
c0022186:	83 c4 10             	add    esp,0x10
c0022189:	ba 74 c6 02 c0       	mov    edx,0xc002c674
c002218e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022192:	89 10                	mov    DWORD PTR [eax],edx
c0022194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022198:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00221a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00221b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221b8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00221bd:	7f 19                	jg     c00221d8 <SoundDevice::SoundDevice(char const*)+0x66>
c00221bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221c7:	83 c2 54             	add    edx,0x54
c00221ca:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00221d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00221d6:	eb e0                	jmp    c00221b8 <SoundDevice::SoundDevice(char const*)+0x46>
c00221d8:	90                   	nop
c00221d9:	83 c4 1c             	add    esp,0x1c
c00221dc:	c3                   	ret    
c00221dd:	90                   	nop

c00221de <SoundDevice::~SoundDevice()>:
c00221de:	53                   	push   ebx
c00221df:	83 ec 18             	sub    esp,0x18
c00221e2:	ba 74 c6 02 c0       	mov    edx,0xc002c674
c00221e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221eb:	89 10                	mov    DWORD PTR [eax],edx
c00221ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221f5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00221fa:	7f 46                	jg     c0022242 <SoundDevice::~SoundDevice()+0x64>
c00221fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022204:	83 c2 54             	add    edx,0x54
c0022207:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002220b:	85 c0                	test   eax,eax
c002220d:	74 2d                	je     c002223c <SoundDevice::~SoundDevice()+0x5e>
c002220f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022217:	83 c2 54             	add    edx,0x54
c002221a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002221e:	85 db                	test   ebx,ebx
c0022220:	74 1a                	je     c002223c <SoundDevice::~SoundDevice()+0x5e>
c0022222:	83 ec 0c             	sub    esp,0xc
c0022225:	53                   	push   ebx
c0022226:	e8 21 fc ff ff       	call   c0021e4c <SoundChannel::~SoundChannel()>
c002222b:	83 c4 10             	add    esp,0x10
c002222e:	83 ec 08             	sub    esp,0x8
c0022231:	6a 2c                	push   0x2c
c0022233:	53                   	push   ebx
c0022234:	e8 a3 08 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0022239:	83 c4 10             	add    esp,0x10
c002223c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022240:	eb b3                	jmp    c00221f5 <SoundDevice::~SoundDevice()+0x17>
c0022242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022246:	83 ec 0c             	sub    esp,0xc
c0022249:	50                   	push   eax
c002224a:	e8 65 1c ff ff       	call   c0013eb4 <Device::~Device()>
c002224f:	83 c4 10             	add    esp,0x10
c0022252:	90                   	nop
c0022253:	83 c4 18             	add    esp,0x18
c0022256:	5b                   	pop    ebx
c0022257:	c3                   	ret    

c0022258 <SoundDevice::~SoundDevice()>:
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	83 ec 0c             	sub    esp,0xc
c002225e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022262:	e8 77 ff ff ff       	call   c00221de <SoundDevice::~SoundDevice()>
c0022267:	83 c4 10             	add    esp,0x10
c002226a:	83 ec 08             	sub    esp,0x8
c002226d:	68 e4 01 00 00       	push   0x1e4
c0022272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022276:	e8 61 08 ff ff       	call   c0012adc <operator delete(void*, unsigned long)>
c002227b:	83 c4 10             	add    esp,0x10
c002227e:	83 c4 0c             	add    esp,0xc
c0022281:	c3                   	ret    

c0022282 <SoundDevice::getFreeChannelNum()>:
c0022282:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022286:	31 c0                	xor    eax,eax
c0022288:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022290:	74 09                	je     c002229b <SoundDevice::getFreeChannelNum()+0x19>
c0022292:	40                   	inc    eax
c0022293:	83 f8 20             	cmp    eax,0x20
c0022296:	75 f0                	jne    c0022288 <SoundDevice::getFreeChannelNum()+0x6>
c0022298:	83 c8 ff             	or     eax,0xffffffff
c002229b:	c3                   	ret    

c002229c <SoundDevice::addChannel(SoundChannel*)>:
c002229c:	56                   	push   esi
c002229d:	53                   	push   ebx
c002229e:	51                   	push   ecx
c002229f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00222a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00222a7:	53                   	push   ebx
c00222a8:	e8 d5 ff ff ff       	call   c0022282 <SoundDevice::getFreeChannelNum()>
c00222ad:	5a                   	pop    edx
c00222ae:	83 f8 ff             	cmp    eax,0xffffffff
c00222b1:	74 51                	je     c0022304 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00222b3:	85 f6                	test   esi,esi
c00222b5:	74 4d                	je     c0022304 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00222b7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00222be:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00222c5:	75 30                	jne    c00222f7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00222c7:	83 ec 0c             	sub    esp,0xc
c00222ca:	56                   	push   esi
c00222cb:	e8 42 fd ff ff       	call   c0022012 <SoundChannel::getSampleRate()>
c00222d0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00222d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00222d9:	e8 3c fd ff ff       	call   c002201a <SoundChannel::getBits()>
c00222de:	83 c4 0c             	add    esp,0xc
c00222e1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00222e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00222e9:	50                   	push   eax
c00222ea:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222f0:	53                   	push   ebx
c00222f1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00222f4:	83 c4 10             	add    esp,0x10
c00222f7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00222fd:	b8 01 00 00 00       	mov    eax,0x1
c0022302:	eb 03                	jmp    c0022307 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022304:	83 c8 ff             	or     eax,0xffffffff
c0022307:	5a                   	pop    edx
c0022308:	5b                   	pop    ebx
c0022309:	5e                   	pop    esi
c002230a:	c3                   	ret    
c002230b:	90                   	nop

c002230c <SoundDevice::removeChannel(int)>:
c002230c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022314:	83 fa 1f             	cmp    edx,0x1f
c0022317:	77 23                	ja     c002233c <SoundDevice::removeChannel(int)+0x30>
c0022319:	8d 14 90             	lea    edx,[eax+edx*4]
c002231c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022323:	74 17                	je     c002233c <SoundDevice::removeChannel(int)+0x30>
c0022325:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002232f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022335:	75 05                	jne    c002233c <SoundDevice::removeChannel(int)+0x30>
c0022337:	8b 00                	mov    eax,DWORD PTR [eax]
c0022339:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002233c:	c3                   	ret    
c002233d:	90                   	nop

c002233e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002233e:	57                   	push   edi
c002233f:	56                   	push   esi
c0022340:	53                   	push   ebx
c0022341:	31 db                	xor    ebx,ebx
c0022343:	83 ec 10             	sub    esp,0x10
c0022346:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002234a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002234e:	0f 8d cb 00 00 00    	jge    c002241f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022354:	83 ec 0c             	sub    esp,0xc
c0022357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002235b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002235e:	e8 d4 5e 00 00       	call   c0028237 <__extendsfdf2>
c0022363:	83 c4 10             	add    esp,0x10
c0022366:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002236a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002236e:	68 00 00 f0 3f       	push   0x3ff00000
c0022373:	6a 00                	push   0x0
c0022375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022379:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002237d:	e8 41 4e 00 00       	call   c00271c3 <__adddf3>
c0022382:	83 c4 10             	add    esp,0x10
c0022385:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022389:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002238d:	68 00 00 e0 3f       	push   0x3fe00000
c0022392:	6a 00                	push   0x0
c0022394:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022398:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002239c:	e8 9f 54 00 00       	call   c0027840 <__muldf3>
c00223a1:	83 c4 10             	add    esp,0x10
c00223a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00223ac:	68 00 00 60 40       	push   0x40600000
c00223b1:	6a 00                	push   0x0
c00223b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223bb:	e8 80 54 00 00       	call   c0027840 <__muldf3>
c00223c0:	59                   	pop    ecx
c00223c1:	5f                   	pop    edi
c00223c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00223c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00223ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223d2:	e8 3c 5d 00 00       	call   c0028113 <__truncdfsf2>
c00223d7:	5a                   	pop    edx
c00223d8:	89 c7                	mov    edi,eax
c00223da:	59                   	pop    ecx
c00223db:	68 00 00 fe 42       	push   0x42fe0000
c00223e0:	50                   	push   eax
c00223e1:	e8 d7 4d 00 00       	call   c00271bd <__gesf2>
c00223e6:	83 c4 10             	add    esp,0x10
c00223e9:	85 c0                	test   eax,eax
c00223eb:	78 06                	js     c00223f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00223ed:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00223f1:	eb 26                	jmp    c0022419 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223f3:	50                   	push   eax
c00223f4:	50                   	push   eax
c00223f5:	6a 00                	push   0x0
c00223f7:	57                   	push   edi
c00223f8:	e8 c4 4d 00 00       	call   c00271c1 <__lesf2>
c00223fd:	83 c4 10             	add    esp,0x10
c0022400:	85 c0                	test   eax,eax
c0022402:	7f 06                	jg     c002240a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022404:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022408:	eb 0f                	jmp    c0022419 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002240a:	83 ec 0c             	sub    esp,0xc
c002240d:	57                   	push   edi
c002240e:	e8 b9 5e 00 00       	call   c00282cc <lrintf>
c0022413:	83 c4 10             	add    esp,0x10
c0022416:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022419:	43                   	inc    ebx
c002241a:	e9 2b ff ff ff       	jmp    c002234a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002241f:	83 c4 10             	add    esp,0x10
c0022422:	5b                   	pop    ebx
c0022423:	5e                   	pop    esi
c0022424:	5f                   	pop    edi
c0022425:	c3                   	ret    

c0022426 <SoundDevice::getAudio(int, float*, float*)>:
c0022426:	55                   	push   ebp
c0022427:	57                   	push   edi
c0022428:	56                   	push   esi
c0022429:	53                   	push   ebx
c002242a:	31 db                	xor    ebx,ebx
c002242c:	83 ec 20             	sub    esp,0x20
c002242f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022433:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022437:	c1 e0 02             	shl    eax,0x2
c002243a:	50                   	push   eax
c002243b:	6a 00                	push   0x0
c002243d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022441:	e8 32 e3 fd ff       	call   c0000778 <memset>
c0022446:	83 c4 10             	add    esp,0x10
c0022449:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002244d:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022454:	85 c0                	test   eax,eax
c0022456:	0f 84 d7 00 00 00    	je     c0022533 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002245c:	83 ec 0c             	sub    esp,0xc
c002245f:	50                   	push   eax
c0022460:	e8 a5 fb ff ff       	call   c002200a <SoundChannel::paused()>
c0022465:	83 c4 10             	add    esp,0x10
c0022468:	84 c0                	test   al,al
c002246a:	0f 85 c3 00 00 00    	jne    c0022533 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022470:	83 ec 0c             	sub    esp,0xc
c0022473:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002247a:	e8 19 fa ff ff       	call   c0021e98 <SoundChannel::getVolume()>
c002247f:	83 c4 10             	add    esp,0x10
c0022482:	85 c0                	test   eax,eax
c0022484:	0f 84 a9 00 00 00    	je     c0022533 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002248a:	83 ec 0c             	sub    esp,0xc
c002248d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022494:	e8 ff f9 ff ff       	call   c0021e98 <SoundChannel::getVolume()>
c0022499:	83 ec 0c             	sub    esp,0xc
c002249c:	50                   	push   eax
c002249d:	e8 c5 4a 00 00       	call   c0026f67 <__floatsisf>
c00224a2:	59                   	pop    ecx
c00224a3:	5d                   	pop    ebp
c00224a4:	31 ed                	xor    ebp,ebp
c00224a6:	68 00 00 c8 42       	push   0x42c80000
c00224ab:	50                   	push   eax
c00224ac:	e8 8b 48 00 00       	call   c0026d3c <__divsf3>
c00224b1:	83 c4 10             	add    esp,0x10
c00224b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00224b8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00224bc:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00224c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00224c6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00224cd:	e8 60 fb ff ff       	call   c0022032 <SoundChannel::unbuffer(float*, int, int)>
c00224d2:	83 c4 20             	add    esp,0x20
c00224d5:	89 c1                	mov    ecx,eax
c00224d7:	39 cd                	cmp    ebp,ecx
c00224d9:	7d 52                	jge    c002252d <SoundDevice::getAudio(int, float*, float*)+0x107>
c00224db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00224df:	50                   	push   eax
c00224e0:	50                   	push   eax
c00224e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00224e5:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00224e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00224ec:	e8 88 46 00 00       	call   c0026b79 <__mulsf3>
c00224f1:	5a                   	pop    edx
c00224f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00224f6:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00224fc:	e8 66 4a 00 00       	call   c0026f67 <__floatsisf>
c0022501:	59                   	pop    ecx
c0022502:	5a                   	pop    edx
c0022503:	50                   	push   eax
c0022504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022508:	e8 2f 48 00 00       	call   c0026d3c <__divsf3>
c002250d:	59                   	pop    ecx
c002250e:	5a                   	pop    edx
c002250f:	50                   	push   eax
c0022510:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022514:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022517:	e8 3a 43 00 00       	call   c0026856 <__addsf3>
c002251c:	83 c4 10             	add    esp,0x10
c002251f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022523:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022527:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002252a:	45                   	inc    ebp
c002252b:	eb aa                	jmp    c00224d7 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002252d:	39 cf                	cmp    edi,ecx
c002252f:	7e 02                	jle    c0022533 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022531:	89 cf                	mov    edi,ecx
c0022533:	43                   	inc    ebx
c0022534:	83 fb 20             	cmp    ebx,0x20
c0022537:	0f 85 10 ff ff ff    	jne    c002244d <SoundDevice::getAudio(int, float*, float*)+0x27>
c002253d:	83 c4 1c             	add    esp,0x1c
c0022540:	89 f8                	mov    eax,edi
c0022542:	5b                   	pop    ebx
c0022543:	5e                   	pop    esi
c0022544:	5f                   	pop    edi
c0022545:	5d                   	pop    ebp
c0022546:	c3                   	ret    
c0022547:	90                   	nop

c0022548 <PCI::open(int, int, void*)>:
c0022548:	83 ec 18             	sub    esp,0x18
c002254b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002254f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022551:	50                   	push   eax
c0022552:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022555:	31 c0                	xor    eax,eax
c0022557:	83 c4 1c             	add    esp,0x1c
c002255a:	c3                   	ret    
c002255b:	90                   	nop

c002255c <PCI::close(int, int, void*)>:
c002255c:	31 c0                	xor    eax,eax
c002255e:	c3                   	ret    
c002255f:	90                   	nop

c0022560 <PCI::PCI()>:
c0022560:	83 ec 0c             	sub    esp,0xc
c0022563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022567:	83 ec 08             	sub    esp,0x8
c002256a:	68 a4 c6 02 c0       	push   0xc002c6a4
c002256f:	50                   	push   eax
c0022570:	e8 e1 12 ff ff       	call   c0013856 <Bus::Bus(char const*)>
c0022575:	83 c4 10             	add    esp,0x10
c0022578:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c002257d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022581:	89 10                	mov    DWORD PTR [eax],edx
c0022583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022587:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002258d:	0f b6 d0             	movzx  edx,al
c0022590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022594:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002259b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002259f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225a5:	0f b6 d0             	movzx  edx,al
c00225a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ac:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00225b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225bb:	8d 50 01             	lea    edx,[eax+0x1]
c00225be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00225c8:	0f b6 d0             	movzx  edx,al
c00225cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00225d3:	83 c9 c0             	or     ecx,0xffffffc0
c00225d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00225da:	90                   	nop
c00225db:	83 c4 0c             	add    esp,0xc
c00225de:	c3                   	ret    
c00225df:	90                   	nop

c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00225e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00225e9:	89 ca                	mov    edx,ecx
c00225eb:	c1 e0 10             	shl    eax,0x10
c00225ee:	81 e2 fc 00 00 00    	and    edx,0xfc
c00225f4:	09 d0                	or     eax,edx
c00225f6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00225fb:	c1 e2 08             	shl    edx,0x8
c00225fe:	09 d0                	or     eax,edx
c0022600:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022605:	c1 e2 0b             	shl    edx,0xb
c0022608:	09 d0                	or     eax,edx
c002260a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002260f:	0d 00 00 00 80       	or     eax,0x80000000
c0022614:	ef                   	out    dx,eax
c0022615:	ba fc 0c 00 00       	mov    edx,0xcfc
c002261a:	ed                   	in     eax,dx
c002261b:	83 e1 02             	and    ecx,0x2
c002261e:	0f b6 c9             	movzx  ecx,cl
c0022621:	c1 e1 03             	shl    ecx,0x3
c0022624:	d3 e8                	shr    eax,cl
c0022626:	c3                   	ret    
c0022627:	90                   	nop

c0022628 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022628:	6a 00                	push   0x0
c002262a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002262f:	50                   	push   eax
c0022630:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022635:	50                   	push   eax
c0022636:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002263b:	50                   	push   eax
c002263c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022640:	e8 9b ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022645:	83 c4 14             	add    esp,0x14
c0022648:	c3                   	ret    
c0022649:	90                   	nop

c002264a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002264a:	6a 0e                	push   0xe
c002264c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022651:	50                   	push   eax
c0022652:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022657:	50                   	push   eax
c0022658:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002265d:	50                   	push   eax
c002265e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022662:	e8 79 ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022667:	83 c4 14             	add    esp,0x14
c002266a:	0f b6 c0             	movzx  eax,al
c002266d:	c3                   	ret    

c002266e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002266e:	55                   	push   ebp
c002266f:	57                   	push   edi
c0022670:	56                   	push   esi
c0022671:	53                   	push   ebx
c0022672:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022677:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002267c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022681:	6a 0a                	push   0xa
c0022683:	56                   	push   esi
c0022684:	55                   	push   ebp
c0022685:	57                   	push   edi
c0022686:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002268a:	e8 51 ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002268f:	6a 0a                	push   0xa
c0022691:	89 c3                	mov    ebx,eax
c0022693:	56                   	push   esi
c0022694:	0f b6 db             	movzx  ebx,bl
c0022697:	55                   	push   ebp
c0022698:	57                   	push   edi
c0022699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002269d:	e8 3e ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a2:	83 c4 28             	add    esp,0x28
c00226a5:	25 00 ff 00 00       	and    eax,0xff00
c00226aa:	09 d8                	or     eax,ebx
c00226ac:	5b                   	pop    ebx
c00226ad:	5e                   	pop    esi
c00226ae:	5f                   	pop    edi
c00226af:	5d                   	pop    ebp
c00226b0:	c3                   	ret    
c00226b1:	90                   	nop

c00226b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00226b2:	6a 08                	push   0x8
c00226b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226b9:	50                   	push   eax
c00226ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226bf:	50                   	push   eax
c00226c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226c5:	50                   	push   eax
c00226c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ca:	e8 11 ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226cf:	83 c4 14             	add    esp,0x14
c00226d2:	0f b6 c4             	movzx  eax,ah
c00226d5:	c3                   	ret    

c00226d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00226d6:	6a 08                	push   0x8
c00226d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226dd:	50                   	push   eax
c00226de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226e3:	50                   	push   eax
c00226e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226e9:	50                   	push   eax
c00226ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ee:	e8 ed fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226f3:	83 c4 14             	add    esp,0x14
c00226f6:	c3                   	ret    
c00226f7:	90                   	nop

c00226f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226f8:	6a 3c                	push   0x3c
c00226fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226ff:	50                   	push   eax
c0022700:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022705:	50                   	push   eax
c0022706:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002270b:	50                   	push   eax
c002270c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022710:	e8 cb fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022715:	83 c4 14             	add    esp,0x14
c0022718:	c3                   	ret    
c0022719:	90                   	nop

c002271a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002271a:	6a 18                	push   0x18
c002271c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022721:	50                   	push   eax
c0022722:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022727:	50                   	push   eax
c0022728:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002272d:	50                   	push   eax
c002272e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022732:	e8 a9 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022737:	83 c4 14             	add    esp,0x14
c002273a:	0f b6 c4             	movzx  eax,ah
c002273d:	c3                   	ret    

c002273e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002273e:	55                   	push   ebp
c002273f:	57                   	push   edi
c0022740:	56                   	push   esi
c0022741:	53                   	push   ebx
c0022742:	50                   	push   eax
c0022743:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022747:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002274c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022751:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022756:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002275d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022760:	83 c3 10             	add    ebx,0x10
c0022763:	0f b6 c0             	movzx  eax,al
c0022766:	0f b6 db             	movzx  ebx,bl
c0022769:	50                   	push   eax
c002276a:	51                   	push   ecx
c002276b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002276f:	57                   	push   edi
c0022770:	55                   	push   ebp
c0022771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022775:	e8 66 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002277a:	53                   	push   ebx
c002277b:	89 c6                	mov    esi,eax
c002277d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022781:	c1 e6 10             	shl    esi,0x10
c0022784:	51                   	push   ecx
c0022785:	57                   	push   edi
c0022786:	55                   	push   ebp
c0022787:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002278b:	e8 50 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022790:	83 c4 2c             	add    esp,0x2c
c0022793:	0f b7 c0             	movzx  eax,ax
c0022796:	5b                   	pop    ebx
c0022797:	09 f0                	or     eax,esi
c0022799:	5e                   	pop    esi
c002279a:	5f                   	pop    edi
c002279b:	5d                   	pop    ebp
c002279c:	c3                   	ret    
c002279d:	90                   	nop

c002279e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002279e:	53                   	push   ebx
c002279f:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227a4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00227a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00227ad:	c1 e1 10             	shl    ecx,0x10
c00227b0:	25 fc 00 00 00       	and    eax,0xfc
c00227b5:	09 c1                	or     ecx,eax
c00227b7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00227bc:	c1 e0 08             	shl    eax,0x8
c00227bf:	09 c1                	or     ecx,eax
c00227c1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00227c6:	c1 e0 0b             	shl    eax,0xb
c00227c9:	09 c1                	or     ecx,eax
c00227cb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227d1:	89 c8                	mov    eax,ecx
c00227d3:	ef                   	out    dx,eax
c00227d4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227d9:	ed                   	in     eax,dx
c00227da:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00227df:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00227e4:	74 0a                	je     c00227f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00227e6:	0f b7 d8             	movzx  ebx,ax
c00227e9:	89 d0                	mov    eax,edx
c00227eb:	c1 e0 10             	shl    eax,0x10
c00227ee:	eb 05                	jmp    c00227f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00227f0:	66 31 c0             	xor    ax,ax
c00227f3:	89 d3                	mov    ebx,edx
c00227f5:	09 c3                	or     ebx,eax
c00227f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227fc:	89 c8                	mov    eax,ecx
c00227fe:	ef                   	out    dx,eax
c00227ff:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022804:	89 d8                	mov    eax,ebx
c0022806:	ef                   	out    dx,eax
c0022807:	5b                   	pop    ebx
c0022808:	c3                   	ret    
c0022809:	90                   	nop

c002280a <PCI::checkBus(unsigned char)>:
c002280a:	56                   	push   esi
c002280b:	53                   	push   ebx
c002280c:	31 db                	xor    ebx,ebx
c002280e:	51                   	push   ecx
c002280f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022814:	52                   	push   edx
c0022815:	53                   	push   ebx
c0022816:	43                   	inc    ebx
c0022817:	56                   	push   esi
c0022818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002281c:	e8 2b 03 00 00       	call   c0022b4c <PCI::checkDevice(unsigned char, unsigned char)>
c0022821:	83 c4 10             	add    esp,0x10
c0022824:	83 fb 20             	cmp    ebx,0x20
c0022827:	75 eb                	jne    c0022814 <PCI::checkBus(unsigned char)+0xa>
c0022829:	58                   	pop    eax
c002282a:	5b                   	pop    ebx
c002282b:	5e                   	pop    esi
c002282c:	c3                   	ret    
c002282d:	90                   	nop

c002282e <PCI::foundDevice(PCIDeviceInfo)>:
c002282e:	55                   	push   ebp
c002282f:	57                   	push   edi
c0022830:	56                   	push   esi
c0022831:	53                   	push   ebx
c0022832:	83 ec 1c             	sub    esp,0x1c
c0022835:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022839:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002283f:	0f 84 52 01 00 00    	je     c0022997 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022845:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022849:	66 81 f9 06 04       	cmp    cx,0x406
c002284e:	75 2c                	jne    c002287c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022850:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022855:	50                   	push   eax
c0022856:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002285b:	50                   	push   eax
c002285c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022861:	50                   	push   eax
c0022862:	56                   	push   esi
c0022863:	e8 b2 fe ff ff       	call   c002271a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022868:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002286c:	0f b6 c0             	movzx  eax,al
c002286f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022873:	83 c4 2c             	add    esp,0x2c
c0022876:	5b                   	pop    ebx
c0022877:	5e                   	pop    esi
c0022878:	5f                   	pop    edi
c0022879:	5d                   	pop    ebp
c002287a:	eb 8e                	jmp    c002280a <PCI::checkBus(unsigned char)>
c002287c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022880:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022886:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002288a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002288e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022892:	88 d3                	mov    bl,dl
c0022894:	85 c0                	test   eax,eax
c0022896:	74 33                	je     c00228cb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022898:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002289b:	85 d2                	test   edx,edx
c002289d:	74 28                	je     c00228c7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002289f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00228a5:	31 ef                	xor    edi,ebp
c00228a7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00228ad:	75 18                	jne    c00228c7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00228af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00228b3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00228b9:	75 0c                	jne    c00228c7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00228bb:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00228c1:	0f 84 d0 00 00 00    	je     c0022997 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00228c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00228c9:	eb c9                	jmp    c0022894 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00228cb:	66 81 f9 01 06       	cmp    cx,0x601
c00228d0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00228d4:	75 19                	jne    c00228ef <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00228d6:	83 ec 0c             	sub    esp,0xc
c00228d9:	68 64 01 00 00       	push   0x164
c00228de:	e8 5d cf fe ff       	call   c000f840 <malloc>
c00228e3:	89 c5                	mov    ebp,eax
c00228e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00228e8:	e8 95 0f 00 00       	call   c0023882 <SATABus::SATABus()>
c00228ed:	eb 1e                	jmp    c002290d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00228ef:	66 81 f9 01 01       	cmp    cx,0x101
c00228f4:	75 60                	jne    c0022956 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00228f6:	83 ec 0c             	sub    esp,0xc
c00228f9:	68 70 02 00 00       	push   0x270
c00228fe:	e8 3d cf fe ff       	call   c000f840 <malloc>
c0022903:	89 c5                	mov    ebp,eax
c0022905:	89 04 24             	mov    DWORD PTR [esp],eax
c0022908:	e8 03 03 00 00       	call   c0022c10 <IDE::IDE()>
c002290d:	58                   	pop    eax
c002290e:	5a                   	pop    edx
c002290f:	55                   	push   ebp
c0022910:	56                   	push   esi
c0022911:	e8 cc 16 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c0022916:	83 ec 1c             	sub    esp,0x1c
c0022919:	b9 09 00 00 00       	mov    ecx,0x9
c002291e:	fc                   	cld    
c002291f:	89 e7                	mov    edi,esp
c0022921:	89 de                	mov    esi,ebx
c0022923:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022925:	55                   	push   ebp
c0022926:	e8 c1 15 ff ff       	call   c0013eec <Device::preOpenPCI(PCIDeviceInfo)>
c002292b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002292e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022932:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002293a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022942:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002294a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002294d:	83 c4 4c             	add    esp,0x4c
c0022950:	5b                   	pop    ebx
c0022951:	5e                   	pop    esi
c0022952:	5f                   	pop    edi
c0022953:	5d                   	pop    ebp
c0022954:	ff e0                	jmp    eax
c0022956:	83 ec 0c             	sub    esp,0xc
c0022959:	68 58 01 00 00       	push   0x158
c002295e:	e8 dd ce fe ff       	call   c000f840 <malloc>
c0022963:	89 c5                	mov    ebp,eax
c0022965:	58                   	pop    eax
c0022966:	5a                   	pop    edx
c0022967:	68 ac c6 02 c0       	push   0xc002c6ac
c002296c:	55                   	push   ebp
c002296d:	e8 66 19 ff ff       	call   c00142d8 <DriverlessDevice::DriverlessDevice(char const*)>
c0022972:	59                   	pop    ecx
c0022973:	5f                   	pop    edi
c0022974:	55                   	push   ebp
c0022975:	56                   	push   esi
c0022976:	e8 67 16 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c002297b:	b9 09 00 00 00       	mov    ecx,0x9
c0022980:	fc                   	cld    
c0022981:	89 df                	mov    edi,ebx
c0022983:	89 de                	mov    esi,ebx
c0022985:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022987:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002298b:	83 c4 2c             	add    esp,0x2c
c002298e:	5b                   	pop    ebx
c002298f:	5e                   	pop    esi
c0022990:	5f                   	pop    edi
c0022991:	5d                   	pop    ebp
c0022992:	e9 55 15 ff ff       	jmp    c0013eec <Device::preOpenPCI(PCIDeviceInfo)>
c0022997:	83 c4 1c             	add    esp,0x1c
c002299a:	5b                   	pop    ebx
c002299b:	5e                   	pop    esi
c002299c:	5f                   	pop    edi
c002299d:	5d                   	pop    ebp
c002299e:	c3                   	ret    
c002299f:	90                   	nop

c00229a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00229a0:	55                   	push   ebp
c00229a1:	57                   	push   edi
c00229a2:	56                   	push   esi
c00229a3:	53                   	push   ebx
c00229a4:	83 ec 5c             	sub    esp,0x5c
c00229a7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00229ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229af:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00229b3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00229b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00229bc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00229c0:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00229c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00229c9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00229ce:	6a 0c                	push   0xc
c00229d0:	55                   	push   ebp
c00229d1:	53                   	push   ebx
c00229d2:	57                   	push   edi
c00229d3:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00229da:	e8 01 fc ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229df:	55                   	push   ebp
c00229e0:	53                   	push   ebx
c00229e1:	57                   	push   edi
c00229e2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00229e9:	e8 80 fc ff ff       	call   c002266e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00229ee:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00229f3:	83 c4 24             	add    esp,0x24
c00229f6:	55                   	push   ebp
c00229f7:	53                   	push   ebx
c00229f8:	57                   	push   edi
c00229f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00229fd:	e8 f6 fc ff ff       	call   c00226f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022a02:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022a06:	6a 3c                	push   0x3c
c0022a08:	55                   	push   ebp
c0022a09:	53                   	push   ebx
c0022a0a:	57                   	push   edi
c0022a0b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022a12:	e8 c9 fb ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a17:	0f b6 c4             	movzx  eax,ah
c0022a1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022a1e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022a22:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022a26:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0022a2b:	83 c4 24             	add    esp,0x24
c0022a2e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022a34:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022a3b:	74 6c                	je     c0022aa9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022a3d:	31 f6                	xor    esi,esi
c0022a3f:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c0022a45:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022a4b:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022a51:	7e 56                	jle    c0022aa9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022a53:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022a56:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022a5d:	39 cb                	cmp    ebx,ecx
c0022a5f:	75 45                	jne    c0022aa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022a61:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022a68:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022a6c:	75 38                	jne    c0022aa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022a6e:	83 ec 0c             	sub    esp,0xc
c0022a71:	68 c6 c6 02 c0       	push   0xc002c6c6
c0022a76:	e8 41 01 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0022a7b:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c0022a81:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022a87:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022a8f:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022a93:	52                   	push   edx
c0022a94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022a98:	53                   	push   ebx
c0022a99:	68 eb c6 02 c0       	push   0xc002c6eb
c0022a9e:	e8 19 01 ff ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0022aa3:	83 c4 20             	add    esp,0x20
c0022aa6:	46                   	inc    esi
c0022aa7:	eb 96                	jmp    c0022a3f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022aa9:	31 d2                	xor    edx,edx
c0022aab:	83 ec 0c             	sub    esp,0xc
c0022aae:	55                   	push   ebp
c0022aaf:	53                   	push   ebx
c0022ab0:	57                   	push   edi
c0022ab1:	52                   	push   edx
c0022ab2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022ab6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022abd:	e8 7c fc ff ff       	call   c002273e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac2:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022ac6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022aca:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ace:	42                   	inc    edx
c0022acf:	83 c4 20             	add    esp,0x20
c0022ad2:	83 fa 06             	cmp    edx,0x6
c0022ad5:	75 d4                	jne    c0022aab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ad7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022adb:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022adf:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ae3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ae7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022aeb:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022aef:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022af4:	86 e0                	xchg   al,ah
c0022af6:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022afb:	55                   	push   ebp
c0022afc:	53                   	push   ebx
c0022afd:	57                   	push   edi
c0022afe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022b02:	e8 ab fb ff ff       	call   c00226b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022b07:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022b0b:	55                   	push   ebp
c0022b0c:	53                   	push   ebx
c0022b0d:	57                   	push   edi
c0022b0e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022b15:	e8 0e fb ff ff       	call   c0022628 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b1a:	83 ec 0c             	sub    esp,0xc
c0022b1d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022b22:	b9 09 00 00 00       	mov    ecx,0x9
c0022b27:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022b2b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022b2f:	fc                   	cld    
c0022b30:	89 e7                	mov    edi,esp
c0022b32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b34:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022b3b:	e8 ee fc ff ff       	call   c002282e <PCI::foundDevice(PCIDeviceInfo)>
c0022b40:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022b46:	5b                   	pop    ebx
c0022b47:	5e                   	pop    esi
c0022b48:	5f                   	pop    edi
c0022b49:	5d                   	pop    ebp
c0022b4a:	c3                   	ret    
c0022b4b:	90                   	nop

c0022b4c <PCI::checkDevice(unsigned char, unsigned char)>:
c0022b4c:	55                   	push   ebp
c0022b4d:	57                   	push   edi
c0022b4e:	56                   	push   esi
c0022b4f:	53                   	push   ebx
c0022b50:	83 ec 0c             	sub    esp,0xc
c0022b53:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022b57:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022b5c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b61:	6a 00                	push   0x0
c0022b63:	56                   	push   esi
c0022b64:	57                   	push   edi
c0022b65:	55                   	push   ebp
c0022b66:	e8 bd fa ff ff       	call   c0022628 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b6b:	6a 00                	push   0x0
c0022b6d:	56                   	push   esi
c0022b6e:	57                   	push   edi
c0022b6f:	55                   	push   ebp
c0022b70:	e8 2b fe ff ff       	call   c00229a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022b75:	83 c4 20             	add    esp,0x20
c0022b78:	6a 00                	push   0x0
c0022b7a:	56                   	push   esi
c0022b7b:	57                   	push   edi
c0022b7c:	55                   	push   ebp
c0022b7d:	e8 c8 fa ff ff       	call   c002264a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022b82:	83 c4 10             	add    esp,0x10
c0022b85:	84 c0                	test   al,al
c0022b87:	79 27                	jns    c0022bb0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022b89:	bb 01 00 00 00       	mov    ebx,0x1
c0022b8e:	53                   	push   ebx
c0022b8f:	56                   	push   esi
c0022b90:	57                   	push   edi
c0022b91:	55                   	push   ebp
c0022b92:	e8 91 fa ff ff       	call   c0022628 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b97:	83 c4 10             	add    esp,0x10
c0022b9a:	66 40                	inc    ax
c0022b9c:	74 0c                	je     c0022baa <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022b9e:	53                   	push   ebx
c0022b9f:	56                   	push   esi
c0022ba0:	57                   	push   edi
c0022ba1:	55                   	push   ebp
c0022ba2:	e8 f9 fd ff ff       	call   c00229a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ba7:	83 c4 10             	add    esp,0x10
c0022baa:	43                   	inc    ebx
c0022bab:	83 fb 08             	cmp    ebx,0x8
c0022bae:	75 de                	jne    c0022b8e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022bb0:	83 c4 0c             	add    esp,0xc
c0022bb3:	5b                   	pop    ebx
c0022bb4:	5e                   	pop    esi
c0022bb5:	5f                   	pop    edi
c0022bb6:	5d                   	pop    ebp
c0022bb7:	c3                   	ret    

c0022bb8 <PCI::detect()>:
c0022bb8:	56                   	push   esi
c0022bb9:	53                   	push   ebx
c0022bba:	53                   	push   ebx
c0022bbb:	31 db                	xor    ebx,ebx
c0022bbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022bc1:	6a 00                	push   0x0
c0022bc3:	6a 00                	push   0x0
c0022bc5:	6a 00                	push   0x0
c0022bc7:	56                   	push   esi
c0022bc8:	e8 7d fa ff ff       	call   c002264a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022bcd:	83 c4 10             	add    esp,0x10
c0022bd0:	a8 80                	test   al,0x80
c0022bd2:	75 21                	jne    c0022bf5 <PCI::detect()+0x3d>
c0022bd4:	51                   	push   ecx
c0022bd5:	51                   	push   ecx
c0022bd6:	6a 00                	push   0x0
c0022bd8:	56                   	push   esi
c0022bd9:	e8 2c fc ff ff       	call   c002280a <PCI::checkBus(unsigned char)>
c0022bde:	83 c4 10             	add    esp,0x10
c0022be1:	eb 24                	jmp    c0022c07 <PCI::detect()+0x4f>
c0022be3:	52                   	push   edx
c0022be4:	52                   	push   edx
c0022be5:	53                   	push   ebx
c0022be6:	43                   	inc    ebx
c0022be7:	56                   	push   esi
c0022be8:	e8 1d fc ff ff       	call   c002280a <PCI::checkBus(unsigned char)>
c0022bed:	83 c4 10             	add    esp,0x10
c0022bf0:	83 fb 08             	cmp    ebx,0x8
c0022bf3:	74 12                	je     c0022c07 <PCI::detect()+0x4f>
c0022bf5:	53                   	push   ebx
c0022bf6:	6a 00                	push   0x0
c0022bf8:	6a 00                	push   0x0
c0022bfa:	56                   	push   esi
c0022bfb:	e8 28 fa ff ff       	call   c0022628 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c00:	83 c4 10             	add    esp,0x10
c0022c03:	66 40                	inc    ax
c0022c05:	74 dc                	je     c0022be3 <PCI::detect()+0x2b>
c0022c07:	58                   	pop    eax
c0022c08:	5b                   	pop    ebx
c0022c09:	5e                   	pop    esi
c0022c0a:	c3                   	ret    
c0022c0b:	90                   	nop

c0022c0c <IDE::close(int, int, void*)>:
c0022c0c:	83 c8 ff             	or     eax,0xffffffff
c0022c0f:	c3                   	ret    

c0022c10 <IDE::IDE()>:
c0022c10:	83 ec 0c             	sub    esp,0xc
c0022c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c17:	83 ec 08             	sub    esp,0x8
c0022c1a:	68 34 c7 02 c0       	push   0xc002c734
c0022c1f:	50                   	push   eax
c0022c20:	e8 49 17 ff ff       	call   c001436e <HardDiskController::HardDiskController(char const*)>
c0022c25:	83 c4 10             	add    esp,0x10
c0022c28:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c0022c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c31:	89 10                	mov    DWORD PTR [eax],edx
c0022c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c37:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022c3e:	90                   	nop
c0022c3f:	83 c4 0c             	add    esp,0xc
c0022c42:	c3                   	ret    
c0022c43:	90                   	nop

c0022c44 <IDE::prepareInterrupt(unsigned char)>:
c0022c44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022c49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c4d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022c55:	c3                   	ret    

c0022c56 <selectDrive(unsigned char, unsigned char)>:
c0022c56:	c3                   	ret    
c0022c57:	90                   	nop

c0022c58 <IDE::getBase(unsigned char)>:
c0022c58:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022c5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c61:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022c69:	c3                   	ret    

c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022c6a:	55                   	push   ebp
c0022c6b:	57                   	push   edi
c0022c6c:	56                   	push   esi
c0022c6d:	53                   	push   ebx
c0022c6e:	83 ec 1c             	sub    esp,0x1c
c0022c71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022c75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022c79:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022c7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022c84:	80 f9 03             	cmp    cl,0x3
c0022c87:	77 51                	ja     c0022cda <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c8d:	0f b6 f2             	movzx  esi,dl
c0022c90:	0f b6 db             	movzx  ebx,bl
c0022c93:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022c96:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022c9a:	83 ca 80             	or     edx,0xffffff80
c0022c9d:	0f b6 d2             	movzx  edx,dl
c0022ca0:	52                   	push   edx
c0022ca1:	6a 0c                	push   0xc
c0022ca3:	56                   	push   esi
c0022ca4:	57                   	push   edi
c0022ca5:	e8 c0 ff ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022caa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cb3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022cb7:	ee                   	out    dx,al
c0022cb8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022cbd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022cc1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022cc5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022cc9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022cd1:	83 c4 2c             	add    esp,0x2c
c0022cd4:	5b                   	pop    ebx
c0022cd5:	5e                   	pop    esi
c0022cd6:	5f                   	pop    edi
c0022cd7:	5d                   	pop    ebp
c0022cd8:	eb 90                	jmp    c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022cda:	80 fb 07             	cmp    bl,0x7
c0022cdd:	77 12                	ja     c0022cf1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022cdf:	0f b6 d2             	movzx  edx,dl
c0022ce2:	0f b6 db             	movzx  ebx,bl
c0022ce5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ced:	89 da                	mov    edx,ebx
c0022cef:	eb 2f                	jmp    c0022d20 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022cf1:	80 fb 0d             	cmp    bl,0xd
c0022cf4:	77 13                	ja     c0022d09 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022cf6:	0f b6 d2             	movzx  edx,dl
c0022cf9:	0f b6 db             	movzx  ebx,bl
c0022cfc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022d03:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022d07:	eb 17                	jmp    c0022d20 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022d09:	80 fb 15             	cmp    bl,0x15
c0022d0c:	77 13                	ja     c0022d21 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022d0e:	0f b6 d2             	movzx  edx,dl
c0022d11:	0f b6 db             	movzx  ebx,bl
c0022d14:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022d1c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022d20:	ee                   	out    dx,al
c0022d21:	83 c4 1c             	add    esp,0x1c
c0022d24:	5b                   	pop    ebx
c0022d25:	5e                   	pop    esi
c0022d26:	5f                   	pop    edi
c0022d27:	5d                   	pop    ebp
c0022d28:	c3                   	ret    
c0022d29:	90                   	nop

c0022d2a <IDE::read(unsigned char, unsigned char)>:
c0022d2a:	55                   	push   ebp
c0022d2b:	57                   	push   edi
c0022d2c:	56                   	push   esi
c0022d2d:	53                   	push   ebx
c0022d2e:	83 ec 1c             	sub    esp,0x1c
c0022d31:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022d35:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d39:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022d3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d40:	3c 03                	cmp    al,0x3
c0022d42:	77 43                	ja     c0022d87 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022d44:	0f b6 f2             	movzx  esi,dl
c0022d47:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022d4a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022d4e:	83 c8 80             	or     eax,0xffffff80
c0022d51:	0f b6 c0             	movzx  eax,al
c0022d54:	50                   	push   eax
c0022d55:	6a 0c                	push   0xc
c0022d57:	56                   	push   esi
c0022d58:	57                   	push   edi
c0022d59:	e8 0c ff ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d5e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022d63:	0f b6 c3             	movzx  eax,bl
c0022d66:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022d6a:	ec                   	in     al,dx
c0022d6b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d6f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022d74:	52                   	push   edx
c0022d75:	6a 0c                	push   0xc
c0022d77:	56                   	push   esi
c0022d78:	57                   	push   edi
c0022d79:	e8 ec fe ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d7e:	83 c4 20             	add    esp,0x20
c0022d81:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022d85:	eb 49                	jmp    c0022dd0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022d87:	80 fb 07             	cmp    bl,0x7
c0022d8a:	77 12                	ja     c0022d9e <IDE::read(unsigned char, unsigned char)+0x74>
c0022d8c:	0f b6 d2             	movzx  edx,dl
c0022d8f:	0f b6 c3             	movzx  eax,bl
c0022d92:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022d9a:	89 c2                	mov    edx,eax
c0022d9c:	eb 31                	jmp    c0022dcf <IDE::read(unsigned char, unsigned char)+0xa5>
c0022d9e:	80 fb 0d             	cmp    bl,0xd
c0022da1:	77 13                	ja     c0022db6 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022da3:	0f b6 d2             	movzx  edx,dl
c0022da6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022dad:	0f b6 d3             	movzx  edx,bl
c0022db0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022db4:	eb 19                	jmp    c0022dcf <IDE::read(unsigned char, unsigned char)+0xa5>
c0022db6:	31 c0                	xor    eax,eax
c0022db8:	80 fb 15             	cmp    bl,0x15
c0022dbb:	77 13                	ja     c0022dd0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022dbd:	0f b6 d2             	movzx  edx,dl
c0022dc0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022dc8:	0f b6 d3             	movzx  edx,bl
c0022dcb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022dcf:	ec                   	in     al,dx
c0022dd0:	83 c4 1c             	add    esp,0x1c
c0022dd3:	5b                   	pop    ebx
c0022dd4:	5e                   	pop    esi
c0022dd5:	5f                   	pop    edi
c0022dd6:	5d                   	pop    ebp
c0022dd7:	c3                   	ret    

c0022dd8 <IDE::waitInterrupt(unsigned char)>:
c0022dd8:	55                   	push   ebp
c0022dd9:	57                   	push   edi
c0022dda:	56                   	push   esi
c0022ddb:	53                   	push   ebx
c0022ddc:	31 db                	xor    ebx,ebx
c0022dde:	83 ec 0c             	sub    esp,0xc
c0022de1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022de5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022dea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022df2:	89 e8                	mov    eax,ebp
c0022df4:	84 c0                	test   al,al
c0022df6:	75 34                	jne    c0022e2c <IDE::waitInterrupt(unsigned char)+0x54>
c0022df8:	52                   	push   edx
c0022df9:	6a 0c                	push   0xc
c0022dfb:	56                   	push   esi
c0022dfc:	57                   	push   edi
c0022dfd:	e8 28 ff ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0022e02:	83 c4 10             	add    esp,0x10
c0022e05:	a8 01                	test   al,0x1
c0022e07:	75 2b                	jne    c0022e34 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022e09:	f6 c3 04             	test   bl,0x4
c0022e0c:	75 16                	jne    c0022e24 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022e0e:	83 fb 32             	cmp    ebx,0x32
c0022e11:	7e 11                	jle    c0022e24 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022e13:	50                   	push   eax
c0022e14:	50                   	push   eax
c0022e15:	6a 00                	push   0x0
c0022e17:	68 80 96 98 00       	push   0x989680
c0022e1c:	e8 8b b1 ff ff       	call   c001dfac <nanoSleep(unsigned long long)>
c0022e21:	83 c4 10             	add    esp,0x10
c0022e24:	83 fb 3c             	cmp    ebx,0x3c
c0022e27:	74 0b                	je     c0022e34 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022e29:	43                   	inc    ebx
c0022e2a:	eb be                	jmp    c0022dea <IDE::waitInterrupt(unsigned char)+0x12>
c0022e2c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022e34:	83 c4 0c             	add    esp,0xc
c0022e37:	89 e8                	mov    eax,ebp
c0022e39:	5b                   	pop    ebx
c0022e3a:	5e                   	pop    esi
c0022e3b:	5f                   	pop    edi
c0022e3c:	5d                   	pop    ebp
c0022e3d:	c3                   	ret    

c0022e3e <ideChannel0IRQHandler(regs*, void*)>:
c0022e3e:	83 ec 10             	sub    esp,0x10
c0022e41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e45:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022e4c:	6a 07                	push   0x7
c0022e4e:	6a 00                	push   0x0
c0022e50:	50                   	push   eax
c0022e51:	e8 d4 fe ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0022e56:	83 c4 1c             	add    esp,0x1c
c0022e59:	c3                   	ret    

c0022e5a <ideChannel1IRQHandler(regs*, void*)>:
c0022e5a:	83 ec 10             	sub    esp,0x10
c0022e5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e61:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022e68:	6a 07                	push   0x7
c0022e6a:	6a 01                	push   0x1
c0022e6c:	50                   	push   eax
c0022e6d:	e8 b8 fe ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0022e72:	83 c4 1c             	add    esp,0x1c
c0022e75:	c3                   	ret    

c0022e76 <IDE::enableIRQs(unsigned char, bool)>:
c0022e76:	57                   	push   edi
c0022e77:	56                   	push   esi
c0022e78:	be 04 00 00 00       	mov    esi,0x4
c0022e7d:	53                   	push   ebx
c0022e7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022e83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e87:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022e8c:	0f 94 c0             	sete   al
c0022e8f:	d1 e0                	shl    eax,1
c0022e91:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022e98:	0f b6 c0             	movzx  eax,al
c0022e9b:	50                   	push   eax
c0022e9c:	6a 0c                	push   0xc
c0022e9e:	57                   	push   edi
c0022e9f:	53                   	push   ebx
c0022ea0:	e8 c5 fd ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ea5:	83 c4 10             	add    esp,0x10
c0022ea8:	50                   	push   eax
c0022ea9:	6a 0c                	push   0xc
c0022eab:	57                   	push   edi
c0022eac:	53                   	push   ebx
c0022ead:	e8 78 fe ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0022eb2:	83 c4 10             	add    esp,0x10
c0022eb5:	4e                   	dec    esi
c0022eb6:	75 f0                	jne    c0022ea8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022eb8:	5b                   	pop    ebx
c0022eb9:	5e                   	pop    esi
c0022eba:	5f                   	pop    edi
c0022ebb:	c3                   	ret    

c0022ebc <IDE::open(int, int, void*)>:
c0022ebc:	55                   	push   ebp
c0022ebd:	57                   	push   edi
c0022ebe:	56                   	push   esi
c0022ebf:	53                   	push   ebx
c0022ec0:	83 ec 1c             	sub    esp,0x1c
c0022ec3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022ec7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022ed0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022ed9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022ee0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022ee7:	0f 85 b0 02 00 00    	jne    c002319d <IDE::open(int, int, void*)+0x2e1>
c0022eed:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022ef3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022ef7:	83 e0 7f             	and    eax,0x7f
c0022efa:	3c 05                	cmp    al,0x5
c0022efc:	74 04                	je     c0022f02 <IDE::open(int, int, void*)+0x46>
c0022efe:	3c 0f                	cmp    al,0xf
c0022f00:	75 32                	jne    c0022f34 <IDE::open(int, int, void*)+0x78>
c0022f02:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022f08:	83 e0 fc             	and    eax,0xfffffffc
c0022f0b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022f12:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022f18:	83 e0 fc             	and    eax,0xfffffffc
c0022f1b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022f22:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022f28:	83 e0 fc             	and    eax,0xfffffffc
c0022f2b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022f32:	eb 14                	jmp    c0022f48 <IDE::open(int, int, void*)+0x8c>
c0022f34:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022f3e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022f48:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022f4f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022f56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022f5a:	89 c6                	mov    esi,eax
c0022f5c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022f61:	c1 e6 10             	shl    esi,0x10
c0022f64:	89 e8                	mov    eax,ebp
c0022f66:	89 fa                	mov    edx,edi
c0022f68:	c1 e0 0b             	shl    eax,0xb
c0022f6b:	09 f0                	or     eax,esi
c0022f6d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022f74:	c1 e6 08             	shl    esi,0x8
c0022f77:	09 c6                	or     esi,eax
c0022f79:	89 f0                	mov    eax,esi
c0022f7b:	0d 08 00 00 80       	or     eax,0x80000008
c0022f80:	ef                   	out    dx,eax
c0022f81:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022f86:	89 ca                	mov    edx,ecx
c0022f88:	ed                   	in     eax,dx
c0022f89:	c1 e8 10             	shr    eax,0x10
c0022f8c:	3d ff ff 00 00       	cmp    eax,0xffff
c0022f91:	0f 84 f5 00 00 00    	je     c002308c <IDE::open(int, int, void*)+0x1d0>
c0022f97:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022f9d:	89 fa                	mov    edx,edi
c0022f9f:	89 f0                	mov    eax,esi
c0022fa1:	ef                   	out    dx,eax
c0022fa2:	b0 fe                	mov    al,0xfe
c0022fa4:	89 ca                	mov    edx,ecx
c0022fa6:	ee                   	out    dx,al
c0022fa7:	89 f0                	mov    eax,esi
c0022fa9:	89 fa                	mov    edx,edi
c0022fab:	ef                   	out    dx,eax
c0022fac:	89 ca                	mov    edx,ecx
c0022fae:	ed                   	in     eax,dx
c0022faf:	3c fe                	cmp    al,0xfe
c0022fb1:	0f 85 a9 00 00 00    	jne    c0023060 <IDE::open(int, int, void*)+0x1a4>
c0022fb7:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c0022fbd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022fc4:	74 33                	je     c0022ff9 <IDE::open(int, int, void*)+0x13d>
c0022fc6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022fcc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022fd0:	40                   	inc    eax
c0022fd1:	83 ec 0c             	sub    esp,0xc
c0022fd4:	0f b6 c0             	movzx  eax,al
c0022fd7:	50                   	push   eax
c0022fd8:	55                   	push   ebp
c0022fd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022fdd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022fe3:	51                   	push   ecx
c0022fe4:	e8 a7 4e ff ff       	call   c0017e90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022fe9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022fee:	83 c4 1c             	add    esp,0x1c
c0022ff1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022ff7:	eb 0a                	jmp    c0023003 <IDE::open(int, int, void*)+0x147>
c0022ff9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023003:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002300a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023011:	c1 e1 10             	shl    ecx,0x10
c0023014:	c1 e0 08             	shl    eax,0x8
c0023017:	bf f8 0c 00 00       	mov    edi,0xcf8
c002301c:	09 c1                	or     ecx,eax
c002301e:	89 fa                	mov    edx,edi
c0023020:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023027:	c1 e0 0b             	shl    eax,0xb
c002302a:	09 c1                	or     ecx,eax
c002302c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023032:	89 c8                	mov    eax,ecx
c0023034:	ef                   	out    dx,eax
c0023035:	be fc 0c 00 00       	mov    esi,0xcfc
c002303a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023040:	89 f2                	mov    edx,esi
c0023042:	ee                   	out    dx,al
c0023043:	89 c8                	mov    eax,ecx
c0023045:	89 fa                	mov    edx,edi
c0023047:	ef                   	out    dx,eax
c0023048:	89 f2                	mov    edx,esi
c002304a:	ed                   	in     eax,dx
c002304b:	0f b6 c0             	movzx  eax,al
c002304e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023054:	74 46                	je     c002309c <IDE::open(int, int, void*)+0x1e0>
c0023056:	83 ec 0c             	sub    esp,0xc
c0023059:	68 4c c7 02 c0       	push   0xc002c74c
c002305e:	eb 34                	jmp    c0023094 <IDE::open(int, int, void*)+0x1d8>
c0023060:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023069:	75 17                	jne    c0023082 <IDE::open(int, int, void*)+0x1c6>
c002306b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023070:	74 07                	je     c0023079 <IDE::open(int, int, void*)+0x1bd>
c0023072:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023077:	75 09                	jne    c0023082 <IDE::open(int, int, void*)+0x1c6>
c0023079:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023080:	eb 1a                	jmp    c002309c <IDE::open(int, int, void*)+0x1e0>
c0023082:	83 ec 0c             	sub    esp,0xc
c0023085:	68 54 c7 02 c0       	push   0xc002c754
c002308a:	eb 08                	jmp    c0023094 <IDE::open(int, int, void*)+0x1d8>
c002308c:	83 ec 0c             	sub    esp,0xc
c002308f:	68 85 c7 02 c0       	push   0xc002c785
c0023094:	e8 9e 71 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0023099:	83 c4 10             	add    esp,0x10
c002309c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00230a3:	79 1a                	jns    c00230bf <IDE::open(int, int, void*)+0x203>
c00230a5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00230ab:	83 e0 fc             	and    eax,0xfffffffc
c00230ae:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00230b5:	83 c0 08             	add    eax,0x8
c00230b8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00230bf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00230c5:	89 c2                	mov    edx,eax
c00230c7:	83 e2 0f             	and    edx,0xf
c00230ca:	66 83 fa 08          	cmp    dx,0x8
c00230ce:	75 0a                	jne    c00230da <IDE::open(int, int, void*)+0x21e>
c00230d0:	83 e8 02             	sub    eax,0x2
c00230d3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00230da:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00230e0:	89 c2                	mov    edx,eax
c00230e2:	83 e2 0f             	and    edx,0xf
c00230e5:	66 83 fa 08          	cmp    dx,0x8
c00230e9:	75 0a                	jne    c00230f5 <IDE::open(int, int, void*)+0x239>
c00230eb:	83 e8 02             	sub    eax,0x2
c00230ee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00230f5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00230fc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023103:	89 d0                	mov    eax,edx
c0023105:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023108:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002310c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023110:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023113:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023118:	0f b6 c9             	movzx  ecx,cl
c002311b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023122:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023125:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023129:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002312d:	8d 50 02             	lea    edx,[eax+0x2]
c0023130:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023135:	0f b6 d2             	movzx  edx,dl
c0023138:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002313e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023141:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023145:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023149:	8d 48 03             	lea    ecx,[eax+0x3]
c002314c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023151:	0f b6 c9             	movzx  ecx,cl
c0023154:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002315a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002315d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023161:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023165:	8d 50 04             	lea    edx,[eax+0x4]
c0023168:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002316e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023173:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002317a:	66 85 f6             	test   si,si
c002317d:	74 3e                	je     c00231bd <IDE::open(int, int, void*)+0x301>
c002317f:	0f b6 d2             	movzx  edx,dl
c0023182:	83 c0 05             	add    eax,0x5
c0023185:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023188:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002318c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023190:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023196:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002319b:	eb 20                	jmp    c00231bd <IDE::open(int, int, void*)+0x301>
c002319d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231a7:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00231b8:	e9 02 ff ff ff       	jmp    c00230bf <IDE::open(int, int, void*)+0x203>
c00231bd:	52                   	push   edx
c00231be:	52                   	push   edx
c00231bf:	6a 00                	push   0x0
c00231c1:	53                   	push   ebx
c00231c2:	e8 7d fa ff ff       	call   c0022c44 <IDE::prepareInterrupt(unsigned char)>
c00231c7:	59                   	pop    ecx
c00231c8:	5e                   	pop    esi
c00231c9:	6a 01                	push   0x1
c00231cb:	53                   	push   ebx
c00231cc:	e8 73 fa ff ff       	call   c0022c44 <IDE::prepareInterrupt(unsigned char)>
c00231d1:	83 c4 0c             	add    esp,0xc
c00231d4:	6a 00                	push   0x0
c00231d6:	6a 00                	push   0x0
c00231d8:	53                   	push   ebx
c00231d9:	e8 98 fc ff ff       	call   c0022e76 <IDE::enableIRQs(unsigned char, bool)>
c00231de:	83 c4 0c             	add    esp,0xc
c00231e1:	6a 00                	push   0x0
c00231e3:	6a 01                	push   0x1
c00231e5:	53                   	push   ebx
c00231e6:	e8 8b fc ff ff       	call   c0022e76 <IDE::enableIRQs(unsigned char, bool)>
c00231eb:	83 c4 10             	add    esp,0x10
c00231ee:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00231f5:	74 40                	je     c0023237 <IDE::open(int, int, void*)+0x37b>
c00231f7:	83 ec 0c             	sub    esp,0xc
c00231fa:	68 af c7 02 c0       	push   0xc002c7af
c00231ff:	e8 b8 f9 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023207:	6a 01                	push   0x1
c0023209:	68 3e 2e 02 c0       	push   0xc0022e3e
c002320e:	6a 0e                	push   0xe
c0023210:	53                   	push   ebx
c0023211:	e8 50 0d ff ff       	call   c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023216:	83 c4 14             	add    esp,0x14
c0023219:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002321f:	53                   	push   ebx
c0023220:	6a 01                	push   0x1
c0023222:	68 5a 2e 02 c0       	push   0xc0022e5a
c0023227:	6a 0f                	push   0xf
c0023229:	53                   	push   ebx
c002322a:	e8 37 0d ff ff       	call   c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002322f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023235:	eb 4a                	jmp    c0023281 <IDE::open(int, int, void*)+0x3c5>
c0023237:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023241:	50                   	push   eax
c0023242:	6a 0f                	push   0xf
c0023244:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002324a:	68 cb c7 02 c0       	push   0xc002c7cb
c002324f:	e8 68 f9 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023254:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023257:	6a 00                	push   0x0
c0023259:	68 3e 2e 02 c0       	push   0xc0022e3e
c002325e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023264:	53                   	push   ebx
c0023265:	e8 fc 0c ff ff       	call   c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002326a:	83 c4 14             	add    esp,0x14
c002326d:	53                   	push   ebx
c002326e:	6a 00                	push   0x0
c0023270:	68 5a 2e 02 c0       	push   0xc0022e5a
c0023275:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002327b:	53                   	push   ebx
c002327c:	e8 e5 0c ff ff       	call   c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023281:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023283:	83 c4 20             	add    esp,0x20
c0023286:	83 ec 0c             	sub    esp,0xc
c0023289:	53                   	push   ebx
c002328a:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002328d:	83 c4 0c             	add    esp,0xc
c0023290:	6a 07                	push   0x7
c0023292:	6a 00                	push   0x0
c0023294:	53                   	push   ebx
c0023295:	e8 90 fa ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c002329a:	83 c4 0c             	add    esp,0xc
c002329d:	6a 07                	push   0x7
c002329f:	6a 01                	push   0x1
c00232a1:	53                   	push   ebx
c00232a2:	e8 83 fa ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c00232a7:	83 c4 0c             	add    esp,0xc
c00232aa:	6a 01                	push   0x1
c00232ac:	6a 00                	push   0x0
c00232ae:	53                   	push   ebx
c00232af:	e8 c2 fb ff ff       	call   c0022e76 <IDE::enableIRQs(unsigned char, bool)>
c00232b4:	83 c4 0c             	add    esp,0xc
c00232b7:	6a 01                	push   0x1
c00232b9:	6a 01                	push   0x1
c00232bb:	53                   	push   ebx
c00232bc:	e8 b5 fb ff ff       	call   c0022e76 <IDE::enableIRQs(unsigned char, bool)>
c00232c1:	83 c4 2c             	add    esp,0x2c
c00232c4:	31 c0                	xor    eax,eax
c00232c6:	5b                   	pop    ebx
c00232c7:	5e                   	pop    esi
c00232c8:	5f                   	pop    edi
c00232c9:	5d                   	pop    ebp
c00232ca:	c3                   	ret    
c00232cb:	90                   	nop

c00232cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00232cc:	55                   	push   ebp
c00232cd:	57                   	push   edi
c00232ce:	56                   	push   esi
c00232cf:	53                   	push   ebx
c00232d0:	83 ec 1c             	sub    esp,0x1c
c00232d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00232d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00232db:	8d 50 f8             	lea    edx,[eax-0x8]
c00232de:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00232e2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00232e6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00232ea:	80 fa 03             	cmp    dl,0x3
c00232ed:	77 5d                	ja     c002334c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00232ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00232f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00232f7:	0f b6 db             	movzx  ebx,bl
c00232fa:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00232fd:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023301:	83 ca 80             	or     edx,0xffffff80
c0023304:	0f b6 d2             	movzx  edx,dl
c0023307:	52                   	push   edx
c0023308:	6a 0c                	push   0xc
c002330a:	53                   	push   ebx
c002330b:	56                   	push   esi
c002330c:	e8 59 f9 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023311:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023316:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002331a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002331e:	0f b6 c0             	movzx  eax,al
c0023321:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023325:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023327:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002332c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023330:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023334:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023338:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023340:	83 c4 2c             	add    esp,0x2c
c0023343:	5b                   	pop    ebx
c0023344:	5e                   	pop    esi
c0023345:	5f                   	pop    edi
c0023346:	5d                   	pop    ebp
c0023347:	e9 1e f9 ff ff       	jmp    c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002334c:	3c 07                	cmp    al,0x7
c002334e:	77 10                	ja     c0023360 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023350:	0f b6 db             	movzx  ebx,bl
c0023353:	0f b6 d0             	movzx  edx,al
c0023356:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002335e:	eb 2d                	jmp    c002338d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023360:	3c 0d                	cmp    al,0xd
c0023362:	77 13                	ja     c0023377 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023364:	0f b6 db             	movzx  ebx,bl
c0023367:	0f b6 c0             	movzx  eax,al
c002336a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023371:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023375:	eb 16                	jmp    c002338d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023377:	3c 15                	cmp    al,0x15
c0023379:	77 14                	ja     c002338f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002337b:	0f b6 db             	movzx  ebx,bl
c002337e:	0f b6 c0             	movzx  eax,al
c0023381:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023389:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002338d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002338f:	83 c4 1c             	add    esp,0x1c
c0023392:	5b                   	pop    ebx
c0023393:	5e                   	pop    esi
c0023394:	5f                   	pop    edi
c0023395:	5d                   	pop    ebp
c0023396:	c3                   	ret    
c0023397:	90                   	nop

c0023398 <IDE::detect()>:
c0023398:	55                   	push   ebp
c0023399:	57                   	push   edi
c002339a:	56                   	push   esi
c002339b:	53                   	push   ebx
c002339c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00233a2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00233a9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00233b0:	0f 85 be 02 00 00    	jne    c0023674 <IDE::detect()+0x2dc>
c00233b6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00233bd:	31 f6                	xor    esi,esi
c00233bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00233c7:	31 ed                	xor    ebp,ebp
c00233c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233cd:	c1 e0 06             	shl    eax,0x6
c00233d0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00233d8:	89 e8                	mov    eax,ebp
c00233da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00233de:	c1 e0 04             	shl    eax,0x4
c00233e1:	83 c8 a0             	or     eax,0xffffffa0
c00233e4:	0f b6 c0             	movzx  eax,al
c00233e7:	50                   	push   eax
c00233e8:	6a 06                	push   0x6
c00233ea:	56                   	push   esi
c00233eb:	53                   	push   ebx
c00233ec:	e8 79 f8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233f1:	83 c4 0c             	add    esp,0xc
c00233f4:	6a 0c                	push   0xc
c00233f6:	56                   	push   esi
c00233f7:	53                   	push   ebx
c00233f8:	e8 2d f9 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c00233fd:	83 c4 0c             	add    esp,0xc
c0023400:	6a 0c                	push   0xc
c0023402:	56                   	push   esi
c0023403:	53                   	push   ebx
c0023404:	e8 21 f9 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023409:	83 c4 0c             	add    esp,0xc
c002340c:	6a 0c                	push   0xc
c002340e:	56                   	push   esi
c002340f:	53                   	push   ebx
c0023410:	e8 15 f9 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023415:	83 c4 0c             	add    esp,0xc
c0023418:	6a 0c                	push   0xc
c002341a:	56                   	push   esi
c002341b:	53                   	push   ebx
c002341c:	e8 09 f9 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023421:	68 ec 00 00 00       	push   0xec
c0023426:	6a 07                	push   0x7
c0023428:	56                   	push   esi
c0023429:	53                   	push   ebx
c002342a:	e8 3b f8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002342f:	83 c4 1c             	add    esp,0x1c
c0023432:	6a 0c                	push   0xc
c0023434:	56                   	push   esi
c0023435:	53                   	push   ebx
c0023436:	e8 ef f8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c002343b:	83 c4 0c             	add    esp,0xc
c002343e:	6a 0c                	push   0xc
c0023440:	56                   	push   esi
c0023441:	53                   	push   ebx
c0023442:	e8 e3 f8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023447:	83 c4 0c             	add    esp,0xc
c002344a:	6a 0c                	push   0xc
c002344c:	56                   	push   esi
c002344d:	53                   	push   ebx
c002344e:	e8 d7 f8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023453:	83 c4 0c             	add    esp,0xc
c0023456:	6a 0c                	push   0xc
c0023458:	56                   	push   esi
c0023459:	53                   	push   ebx
c002345a:	e8 cb f8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c002345f:	83 c4 0c             	add    esp,0xc
c0023462:	6a 0c                	push   0xc
c0023464:	56                   	push   esi
c0023465:	53                   	push   ebx
c0023466:	e8 bf f8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c002346b:	83 c4 10             	add    esp,0x10
c002346e:	84 c0                	test   al,al
c0023470:	0f 84 8b 01 00 00    	je     c0023601 <IDE::detect()+0x269>
c0023476:	31 ff                	xor    edi,edi
c0023478:	50                   	push   eax
c0023479:	6a 0c                	push   0xc
c002347b:	56                   	push   esi
c002347c:	53                   	push   ebx
c002347d:	e8 a8 f8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023482:	83 c4 10             	add    esp,0x10
c0023485:	a8 01                	test   al,0x1
c0023487:	0f 85 8e 01 00 00    	jne    c002361b <IDE::detect()+0x283>
c002348d:	84 c0                	test   al,al
c002348f:	78 04                	js     c0023495 <IDE::detect()+0xfd>
c0023491:	a8 08                	test   al,0x8
c0023493:	75 27                	jne    c00234bc <IDE::detect()+0x124>
c0023495:	47                   	inc    edi
c0023496:	81 ff 17 01 00 00    	cmp    edi,0x117
c002349c:	7e da                	jle    c0023478 <IDE::detect()+0xe0>
c002349e:	50                   	push   eax
c002349f:	50                   	push   eax
c00234a0:	6a 00                	push   0x0
c00234a2:	68 40 4b 4c 00       	push   0x4c4b40
c00234a7:	e8 00 ab ff ff       	call   c001dfac <nanoSleep(unsigned long long)>
c00234ac:	83 c4 10             	add    esp,0x10
c00234af:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00234b5:	75 c1                	jne    c0023478 <IDE::detect()+0xe0>
c00234b7:	e9 5f 01 00 00       	jmp    c002361b <IDE::detect()+0x283>
c00234bc:	31 c9                	xor    ecx,ecx
c00234be:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00234c2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00234c6:	83 ec 0c             	sub    esp,0xc
c00234c9:	68 80 00 00 00       	push   0x80
c00234ce:	57                   	push   edi
c00234cf:	6a 00                	push   0x0
c00234d1:	56                   	push   esi
c00234d2:	53                   	push   ebx
c00234d3:	e8 f4 fd ff ff       	call   c00232cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00234d8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00234dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00234e1:	89 d1                	mov    ecx,edx
c00234e3:	c1 e0 06             	shl    eax,0x6
c00234e6:	01 d8                	add    eax,ebx
c00234e8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00234ef:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00234f6:	89 f2                	mov    edx,esi
c00234f8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00234fe:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023502:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023508:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002350c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023513:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002351b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023522:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002352a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023530:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023537:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002353d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023541:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023545:	83 c4 20             	add    esp,0x20
c0023548:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002354b:	83 c0 02             	add    eax,0x2
c002354e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023554:	83 c7 02             	add    edi,0x2
c0023557:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002355a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023560:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023564:	75 e2                	jne    c0023548 <IDE::detect()+0x1b0>
c0023566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002356a:	c1 e0 06             	shl    eax,0x6
c002356d:	01 d8                	add    eax,ebx
c002356f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023575:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002357c:	66 c1 ea 09          	shr    dx,0x9
c0023580:	83 e2 01             	and    edx,0x1
c0023583:	84 c9                	test   cl,cl
c0023585:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002358b:	75 2f                	jne    c00235bc <IDE::detect()+0x224>
c002358d:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023593:	85 c0                	test   eax,eax
c0023595:	74 66                	je     c00235fd <IDE::detect()+0x265>
c0023597:	50                   	push   eax
c0023598:	55                   	push   ebp
c0023599:	56                   	push   esi
c002359a:	68 e7 c7 02 c0       	push   0xc002c7e7
c002359f:	e8 18 f6 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00235a4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00235ab:	e8 90 c2 fe ff       	call   c000f840 <malloc>
c00235b0:	89 c7                	mov    edi,eax
c00235b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00235b5:	e8 78 06 00 00       	call   c0023c32 <ATA::ATA()>
c00235ba:	eb 28                	jmp    c00235e4 <IDE::detect()+0x24c>
c00235bc:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00235c2:	55                   	push   ebp
c00235c3:	56                   	push   esi
c00235c4:	68 16 c8 02 c0       	push   0xc002c816
c00235c9:	e8 ee f5 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00235ce:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00235d5:	e8 66 c2 fe ff       	call   c000f840 <malloc>
c00235da:	89 c7                	mov    edi,eax
c00235dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00235df:	e8 8e 0c 00 00       	call   c0024272 <ATAPI::ATAPI()>
c00235e4:	5a                   	pop    edx
c00235e5:	59                   	pop    ecx
c00235e6:	57                   	push   edi
c00235e7:	53                   	push   ebx
c00235e8:	e8 f5 09 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c00235ed:	8b 07                	mov    eax,DWORD PTR [edi]
c00235ef:	53                   	push   ebx
c00235f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00235f4:	6a 00                	push   0x0
c00235f6:	57                   	push   edi
c00235f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235fa:	83 c4 20             	add    esp,0x20
c00235fd:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023601:	4d                   	dec    ebp
c0023602:	74 0a                	je     c002360e <IDE::detect()+0x276>
c0023604:	bd 01 00 00 00       	mov    ebp,0x1
c0023609:	e9 bb fd ff ff       	jmp    c00233c9 <IDE::detect()+0x31>
c002360e:	4e                   	dec    esi
c002360f:	74 63                	je     c0023674 <IDE::detect()+0x2dc>
c0023611:	be 01 00 00 00       	mov    esi,0x1
c0023616:	e9 ac fd ff ff       	jmp    c00233c7 <IDE::detect()+0x2f>
c002361b:	50                   	push   eax
c002361c:	6a 04                	push   0x4
c002361e:	56                   	push   esi
c002361f:	53                   	push   ebx
c0023620:	e8 05 f7 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023625:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023629:	83 c4 0c             	add    esp,0xc
c002362c:	6a 05                	push   0x5
c002362e:	56                   	push   esi
c002362f:	53                   	push   ebx
c0023630:	e8 f5 f6 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023635:	83 c4 10             	add    esp,0x10
c0023638:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002363c:	80 fa 14             	cmp    dl,0x14
c002363f:	75 04                	jne    c0023645 <IDE::detect()+0x2ad>
c0023641:	3c eb                	cmp    al,0xeb
c0023643:	eb 07                	jmp    c002364c <IDE::detect()+0x2b4>
c0023645:	3c 96                	cmp    al,0x96
c0023647:	75 b8                	jne    c0023601 <IDE::detect()+0x269>
c0023649:	80 fa 69             	cmp    dl,0x69
c002364c:	75 b3                	jne    c0023601 <IDE::detect()+0x269>
c002364e:	68 a1 00 00 00       	push   0xa1
c0023653:	6a 07                	push   0x7
c0023655:	56                   	push   esi
c0023656:	53                   	push   ebx
c0023657:	e8 0e f6 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002365c:	5f                   	pop    edi
c002365d:	58                   	pop    eax
c002365e:	6a 00                	push   0x0
c0023660:	68 40 42 0f 00       	push   0xf4240
c0023665:	e8 42 a9 ff ff       	call   c001dfac <nanoSleep(unsigned long long)>
c002366a:	83 c4 10             	add    esp,0x10
c002366d:	b1 01                	mov    cl,0x1
c002366f:	e9 4a fe ff ff       	jmp    c00234be <IDE::detect()+0x126>
c0023674:	81 c4 1c 02 00 00    	add    esp,0x21c
c002367a:	5b                   	pop    ebx
c002367b:	5e                   	pop    esi
c002367c:	5f                   	pop    edi
c002367d:	5d                   	pop    ebp
c002367e:	c3                   	ret    
c002367f:	90                   	nop

c0023680 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023680:	55                   	push   ebp
c0023681:	57                   	push   edi
c0023682:	56                   	push   esi
c0023683:	53                   	push   ebx
c0023684:	83 ec 1c             	sub    esp,0x1c
c0023687:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002368b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002368f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023693:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023697:	88 c3                	mov    bl,al
c0023699:	84 c0                	test   al,al
c002369b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002369f:	0f 84 67 01 00 00    	je     c002380c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00236a5:	83 ec 0c             	sub    esp,0xc
c00236a8:	68 47 c8 02 c0       	push   0xc002c847
c00236ad:	e8 0a f5 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00236b2:	83 c4 10             	add    esp,0x10
c00236b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00236b9:	3c 01                	cmp    al,0x1
c00236bb:	75 17                	jne    c00236d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00236bd:	83 ec 0c             	sub    esp,0xc
c00236c0:	b3 13                	mov    bl,0x13
c00236c2:	68 53 c8 02 c0       	push   0xc002c853
c00236c7:	e8 f0 f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00236cc:	83 c4 10             	add    esp,0x10
c00236cf:	e9 25 01 00 00       	jmp    c00237f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00236d4:	3c 02                	cmp    al,0x2
c00236d6:	0f 85 ef 00 00 00    	jne    c00237cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00236dc:	d1 e6                	shl    esi,1
c00236de:	09 ee                	or     esi,ebp
c00236e0:	52                   	push   edx
c00236e1:	89 f0                	mov    eax,esi
c00236e3:	6a 01                	push   0x1
c00236e5:	0f b6 f0             	movzx  esi,al
c00236e8:	c1 e6 06             	shl    esi,0x6
c00236eb:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00236f3:	50                   	push   eax
c00236f4:	57                   	push   edi
c00236f5:	e8 30 f6 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c00236fa:	83 c4 10             	add    esp,0x10
c00236fd:	89 c6                	mov    esi,eax
c00236ff:	a8 01                	test   al,0x1
c0023701:	74 12                	je     c0023715 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023703:	83 ec 0c             	sub    esp,0xc
c0023706:	b3 07                	mov    bl,0x7
c0023708:	68 68 c8 02 c0       	push   0xc002c868
c002370d:	e8 aa f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023712:	83 c4 10             	add    esp,0x10
c0023715:	f7 c6 02 00 00 00    	test   esi,0x2
c002371b:	74 12                	je     c002372f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002371d:	83 ec 0c             	sub    esp,0xc
c0023720:	b3 03                	mov    bl,0x3
c0023722:	68 86 c8 02 c0       	push   0xc002c886
c0023727:	e8 90 f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c002372c:	83 c4 10             	add    esp,0x10
c002372f:	f7 c6 04 00 00 00    	test   esi,0x4
c0023735:	74 12                	je     c0023749 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023737:	83 ec 0c             	sub    esp,0xc
c002373a:	b3 14                	mov    bl,0x14
c002373c:	68 a6 c8 02 c0       	push   0xc002c8a6
c0023741:	e8 76 f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023746:	83 c4 10             	add    esp,0x10
c0023749:	f7 c6 08 00 00 00    	test   esi,0x8
c002374f:	74 12                	je     c0023763 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023751:	83 ec 0c             	sub    esp,0xc
c0023754:	b3 03                	mov    bl,0x3
c0023756:	68 86 c8 02 c0       	push   0xc002c886
c002375b:	e8 5c f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023760:	83 c4 10             	add    esp,0x10
c0023763:	f7 c6 10 00 00 00    	test   esi,0x10
c0023769:	74 12                	je     c002377d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002376b:	83 ec 0c             	sub    esp,0xc
c002376e:	b3 15                	mov    bl,0x15
c0023770:	68 be c8 02 c0       	push   0xc002c8be
c0023775:	e8 42 f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c002377a:	83 c4 10             	add    esp,0x10
c002377d:	f7 c6 20 00 00 00    	test   esi,0x20
c0023783:	74 12                	je     c0023797 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023785:	83 ec 0c             	sub    esp,0xc
c0023788:	b3 03                	mov    bl,0x3
c002378a:	68 86 c8 02 c0       	push   0xc002c886
c002378f:	e8 28 f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023794:	83 c4 10             	add    esp,0x10
c0023797:	f7 c6 40 00 00 00    	test   esi,0x40
c002379d:	74 12                	je     c00237b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002379f:	83 ec 0c             	sub    esp,0xc
c00237a2:	b3 16                	mov    bl,0x16
c00237a4:	68 d8 c8 02 c0       	push   0xc002c8d8
c00237a9:	e8 0e f4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00237ae:	83 c4 10             	add    esp,0x10
c00237b1:	89 f0                	mov    eax,esi
c00237b3:	84 c0                	test   al,al
c00237b5:	79 42                	jns    c00237f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237b7:	83 ec 0c             	sub    esp,0xc
c00237ba:	b3 0d                	mov    bl,0xd
c00237bc:	68 f9 c8 02 c0       	push   0xc002c8f9
c00237c1:	e8 f6 f3 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00237c6:	83 c4 10             	add    esp,0x10
c00237c9:	eb 2e                	jmp    c00237f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237cb:	3c 03                	cmp    al,0x3
c00237cd:	75 14                	jne    c00237e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00237cf:	83 ec 0c             	sub    esp,0xc
c00237d2:	b3 17                	mov    bl,0x17
c00237d4:	68 0d c9 02 c0       	push   0xc002c90d
c00237d9:	e8 de f3 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00237de:	83 c4 10             	add    esp,0x10
c00237e1:	eb 16                	jmp    c00237f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237e3:	3c 04                	cmp    al,0x4
c00237e5:	75 12                	jne    c00237f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237e7:	83 ec 0c             	sub    esp,0xc
c00237ea:	b3 08                	mov    bl,0x8
c00237ec:	68 23 c9 02 c0       	push   0xc002c923
c00237f1:	e8 c6 f3 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00237f6:	83 c4 10             	add    esp,0x10
c00237f9:	50                   	push   eax
c00237fa:	50                   	push   eax
c00237fb:	0f b6 c3             	movzx  eax,bl
c00237fe:	50                   	push   eax
c00237ff:	68 3b c9 02 c0       	push   0xc002c93b
c0023804:	e8 b3 f3 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023809:	83 c4 10             	add    esp,0x10
c002380c:	83 c4 1c             	add    esp,0x1c
c002380f:	88 d8                	mov    al,bl
c0023811:	5b                   	pop    ebx
c0023812:	5e                   	pop    esi
c0023813:	5f                   	pop    edi
c0023814:	5d                   	pop    ebp
c0023815:	c3                   	ret    

c0023816 <IDE::polling(unsigned char, unsigned int)>:
c0023816:	57                   	push   edi
c0023817:	56                   	push   esi
c0023818:	53                   	push   ebx
c0023819:	bb 04 00 00 00       	mov    ebx,0x4
c002381e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023822:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023827:	52                   	push   edx
c0023828:	6a 0c                	push   0xc
c002382a:	56                   	push   esi
c002382b:	57                   	push   edi
c002382c:	e8 f9 f4 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023831:	83 c4 10             	add    esp,0x10
c0023834:	4b                   	dec    ebx
c0023835:	75 f0                	jne    c0023827 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023837:	bb a0 86 01 00       	mov    ebx,0x186a0
c002383c:	50                   	push   eax
c002383d:	6a 0c                	push   0xc
c002383f:	56                   	push   esi
c0023840:	57                   	push   edi
c0023841:	e8 e4 f4 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023846:	83 c4 10             	add    esp,0x10
c0023849:	a8 01                	test   al,0x1
c002384b:	74 12                	je     c002385f <IDE::polling(unsigned char, unsigned int)+0x49>
c002384d:	83 ec 0c             	sub    esp,0xc
c0023850:	68 55 c9 02 c0       	push   0xc002c955
c0023855:	e8 62 f3 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c002385a:	83 c4 10             	add    esp,0x10
c002385d:	eb 17                	jmp    c0023876 <IDE::polling(unsigned char, unsigned int)+0x60>
c002385f:	a8 20                	test   al,0x20
c0023861:	75 0f                	jne    c0023872 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023863:	4b                   	dec    ebx
c0023864:	74 10                	je     c0023876 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023866:	84 c0                	test   al,al
c0023868:	78 d2                	js     c002383c <IDE::polling(unsigned char, unsigned int)+0x26>
c002386a:	a8 08                	test   al,0x8
c002386c:	74 ce                	je     c002383c <IDE::polling(unsigned char, unsigned int)+0x26>
c002386e:	31 c0                	xor    eax,eax
c0023870:	eb 06                	jmp    c0023878 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023872:	b0 01                	mov    al,0x1
c0023874:	eb 02                	jmp    c0023878 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023876:	b0 02                	mov    al,0x2
c0023878:	5b                   	pop    ebx
c0023879:	5e                   	pop    esi
c002387a:	5f                   	pop    edi
c002387b:	c3                   	ret    

c002387c <SATABus::close(int, int, void*)>:
c002387c:	31 c0                	xor    eax,eax
c002387e:	c3                   	ret    
c002387f:	90                   	nop

c0023880 <SATABus::detect()>:
c0023880:	c3                   	ret    
c0023881:	90                   	nop

c0023882 <SATABus::SATABus()>:
c0023882:	83 ec 0c             	sub    esp,0xc
c0023885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023889:	83 ec 08             	sub    esp,0x8
c002388c:	68 98 c9 02 c0       	push   0xc002c998
c0023891:	50                   	push   eax
c0023892:	e8 d7 0a ff ff       	call   c001436e <HardDiskController::HardDiskController(char const*)>
c0023897:	83 c4 10             	add    esp,0x10
c002389a:	ba 54 ca 02 c0       	mov    edx,0xc002ca54
c002389f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238a3:	89 10                	mov    DWORD PTR [eax],edx
c00238a5:	83 ec 0c             	sub    esp,0xc
c00238a8:	6a 50                	push   0x50
c00238aa:	e8 f8 c6 fe ff       	call   c000ffa7 <Phys::allocateContiguousPages(int)>
c00238af:	83 c4 10             	add    esp,0x10
c00238b2:	89 c2                	mov    edx,eax
c00238b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238b8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00238be:	83 ec 0c             	sub    esp,0xc
c00238c1:	6a 50                	push   0x50
c00238c3:	e8 59 e2 fe ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00238c8:	83 c4 10             	add    esp,0x10
c00238cb:	89 c2                	mov    edx,eax
c00238cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238d1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00238d7:	e8 d5 e3 fe ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c00238dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238e0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00238e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238ea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00238f0:	83 ec 0c             	sub    esp,0xc
c00238f3:	6a 03                	push   0x3
c00238f5:	6a 50                	push   0x50
c00238f7:	51                   	push   ecx
c00238f8:	52                   	push   edx
c00238f9:	50                   	push   eax
c00238fa:	e8 e1 eb fe ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238ff:	83 c4 20             	add    esp,0x20
c0023902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023906:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002390c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023910:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023916:	83 ec 04             	sub    esp,0x4
c0023919:	52                   	push   edx
c002391a:	50                   	push   eax
c002391b:	68 bc c9 02 c0       	push   0xc002c9bc
c0023920:	e8 97 f2 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023925:	83 c4 10             	add    esp,0x10
c0023928:	90                   	nop
c0023929:	83 c4 0c             	add    esp,0xc
c002392c:	c3                   	ret    
c002392d:	90                   	nop

c002392e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002392e:	83 ec 0c             	sub    esp,0xc
c0023931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023935:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023938:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002393b:	09 c2                	or     edx,eax
c002393d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023941:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023947:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023949:	31 c0                	xor    eax,eax
c002394b:	c1 e9 08             	shr    ecx,0x8
c002394e:	83 e1 0f             	and    ecx,0xf
c0023951:	39 c8                	cmp    eax,ecx
c0023953:	74 0a                	je     c002395f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023955:	f6 c2 01             	test   dl,0x1
c0023958:	74 18                	je     c0023972 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002395a:	d1 ea                	shr    edx,1
c002395c:	40                   	inc    eax
c002395d:	eb f2                	jmp    c0023951 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002395f:	83 ec 0c             	sub    esp,0xc
c0023962:	68 e0 c9 02 c0       	push   0xc002c9e0
c0023967:	e8 cb 68 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002396c:	83 c4 10             	add    esp,0x10
c002396f:	83 c8 ff             	or     eax,0xffffffff
c0023972:	83 c4 0c             	add    esp,0xc
c0023975:	c3                   	ret    

c0023976 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023976:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002397a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002397d:	89 c2                	mov    edx,eax
c002397f:	c1 ea 08             	shr    edx,0x8
c0023982:	83 e2 0f             	and    edx,0xf
c0023985:	fe ca                	dec    dl
c0023987:	75 31                	jne    c00239ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023989:	83 e0 0f             	and    eax,0xf
c002398c:	3c 03                	cmp    al,0x3
c002398e:	75 2a                	jne    c00239ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023990:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023993:	b8 02 00 00 00       	mov    eax,0x2
c0023998:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002399e:	74 1c                	je     c00239bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00239a0:	b8 04 00 00 00       	mov    eax,0x4
c00239a5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00239ab:	74 0f                	je     c00239bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00239ad:	31 c0                	xor    eax,eax
c00239af:	83 fa 03             	cmp    edx,0x3
c00239b2:	0f 94 c0             	sete   al
c00239b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00239b9:	c3                   	ret    
c00239ba:	31 c0                	xor    eax,eax
c00239bc:	c3                   	ret    
c00239bd:	90                   	nop

c00239be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00239be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239c5:	0f ba e2 0f          	bt     edx,0xf
c00239c9:	72 f7                	jb     c00239c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00239cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239ce:	83 ca 10             	or     edx,0x10
c00239d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239d7:	83 ca 01             	or     edx,0x1
c00239da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239dd:	c3                   	ret    

c00239de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00239de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239e5:	83 e2 fe             	and    edx,0xfffffffe
c00239e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239ee:	83 e2 ef             	and    edx,0xffffffef
c00239f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239f7:	0f ba e2 0e          	bt     edx,0xe
c00239fb:	72 f7                	jb     c00239f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a00:	0f ba e2 0f          	bt     edx,0xf
c0023a04:	72 ee                	jb     c00239f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a06:	c3                   	ret    
c0023a07:	90                   	nop

c0023a08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023a08:	55                   	push   ebp
c0023a09:	57                   	push   edi
c0023a0a:	56                   	push   esi
c0023a0b:	53                   	push   ebx
c0023a0c:	83 ec 1c             	sub    esp,0x1c
c0023a0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a1b:	53                   	push   ebx
c0023a1c:	89 fd                	mov    ebp,edi
c0023a1e:	56                   	push   esi
c0023a1f:	c1 e5 0a             	shl    ebp,0xa
c0023a22:	e8 b7 ff ff ff       	call   c00239de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023a27:	83 ec 0c             	sub    esp,0xc
c0023a2a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023a30:	01 e8                	add    eax,ebp
c0023a32:	89 03                	mov    DWORD PTR [ebx],eax
c0023a34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a36:	68 00 04 00 00       	push   0x400
c0023a3b:	6a 00                	push   0x0
c0023a3d:	50                   	push   eax
c0023a3e:	e8 35 cd fd ff       	call   c0000778 <memset>
c0023a43:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023a49:	89 fa                	mov    edx,edi
c0023a4b:	01 e8                	add    eax,ebp
c0023a4d:	c1 e7 0d             	shl    edi,0xd
c0023a50:	89 03                	mov    DWORD PTR [ebx],eax
c0023a52:	c1 e2 08             	shl    edx,0x8
c0023a55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023a5c:	81 c2 00 80 00 00    	add    edx,0x8000
c0023a62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a66:	89 d0                	mov    eax,edx
c0023a68:	83 c4 1c             	add    esp,0x1c
c0023a6b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a71:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a77:	68 00 01 00 00       	push   0x100
c0023a7c:	6a 00                	push   0x0
c0023a7e:	50                   	push   eax
c0023a7f:	e8 f4 cc fd ff       	call   c0000778 <memset>
c0023a84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a88:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a8e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a98:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a9b:	83 c4 10             	add    esp,0x10
c0023a9e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023aa5:	31 ff                	xor    edi,edi
c0023aa7:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023aad:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023ab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ab7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023abd:	83 c5 20             	add    ebp,0x20
c0023ac0:	01 f8                	add    eax,edi
c0023ac2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ac5:	52                   	push   edx
c0023ac6:	68 00 01 00 00       	push   0x100
c0023acb:	6a 00                	push   0x0
c0023acd:	50                   	push   eax
c0023ace:	e8 a5 cc fd ff       	call   c0000778 <memset>
c0023ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ad7:	83 c4 10             	add    esp,0x10
c0023ada:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ae0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ae7:	01 f8                	add    eax,edi
c0023ae9:	81 c7 00 01 00 00    	add    edi,0x100
c0023aef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023af2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023af8:	75 b3                	jne    c0023aad <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023afa:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023afe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023b02:	83 c4 1c             	add    esp,0x1c
c0023b05:	5b                   	pop    ebx
c0023b06:	5e                   	pop    esi
c0023b07:	5f                   	pop    edi
c0023b08:	5d                   	pop    ebp
c0023b09:	e9 b0 fe ff ff       	jmp    c00239be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023b0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023b0e:	55                   	push   ebp
c0023b0f:	57                   	push   edi
c0023b10:	56                   	push   esi
c0023b11:	53                   	push   ebx
c0023b12:	31 db                	xor    ebx,ebx
c0023b14:	83 ec 0c             	sub    esp,0xc
c0023b17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023b1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b1f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023b22:	f7 c7 01 00 00 00    	test   edi,0x1
c0023b28:	0f 84 aa 00 00 00    	je     c0023bd8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023b2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023b32:	89 d8                	mov    eax,ebx
c0023b34:	c1 e0 07             	shl    eax,0x7
c0023b37:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023b3e:	55                   	push   ebp
c0023b3f:	56                   	push   esi
c0023b40:	e8 31 fe ff ff       	call   c0023976 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023b45:	5a                   	pop    edx
c0023b46:	83 f8 01             	cmp    eax,0x1
c0023b49:	59                   	pop    ecx
c0023b4a:	75 30                	jne    c0023b7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023b4c:	50                   	push   eax
c0023b4d:	50                   	push   eax
c0023b4e:	53                   	push   ebx
c0023b4f:	68 05 ca 02 c0       	push   0xc002ca05
c0023b54:	e8 63 f0 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023b59:	83 c4 0c             	add    esp,0xc
c0023b5c:	53                   	push   ebx
c0023b5d:	55                   	push   ebp
c0023b5e:	56                   	push   esi
c0023b5f:	e8 a4 fe ff ff       	call   c0023a08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b64:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b6b:	e8 d0 bc fe ff       	call   c000f840 <malloc>
c0023b70:	89 c5                	mov    ebp,eax
c0023b72:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b75:	e8 60 0d 00 00       	call   c00248da <SATA::SATA()>
c0023b7a:	eb 33                	jmp    c0023baf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023b7c:	83 f8 04             	cmp    eax,0x4
c0023b7f:	75 47                	jne    c0023bc8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023b81:	50                   	push   eax
c0023b82:	50                   	push   eax
c0023b83:	53                   	push   ebx
c0023b84:	68 1c ca 02 c0       	push   0xc002ca1c
c0023b89:	e8 2e f0 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023b8e:	83 c4 0c             	add    esp,0xc
c0023b91:	53                   	push   ebx
c0023b92:	55                   	push   ebp
c0023b93:	56                   	push   esi
c0023b94:	e8 6f fe ff ff       	call   c0023a08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b99:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ba0:	e8 9b bc fe ff       	call   c000f840 <malloc>
c0023ba5:	89 c5                	mov    ebp,eax
c0023ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0023baa:	e8 d7 10 00 00       	call   c0024c86 <SATAPI::SATAPI()>
c0023baf:	5a                   	pop    edx
c0023bb0:	59                   	pop    ecx
c0023bb1:	55                   	push   ebp
c0023bb2:	56                   	push   esi
c0023bb3:	e8 2a 04 ff ff       	call   c0013fe2 <Device::addChild(Device*)>
c0023bb8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023bbb:	56                   	push   esi
c0023bbc:	6a 00                	push   0x0
c0023bbe:	53                   	push   ebx
c0023bbf:	55                   	push   ebp
c0023bc0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023bc3:	83 c4 20             	add    esp,0x20
c0023bc6:	eb 10                	jmp    c0023bd8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023bc8:	50                   	push   eax
c0023bc9:	50                   	push   eax
c0023bca:	53                   	push   ebx
c0023bcb:	68 35 ca 02 c0       	push   0xc002ca35
c0023bd0:	e8 e7 ef fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023bd5:	83 c4 10             	add    esp,0x10
c0023bd8:	d1 ef                	shr    edi,1
c0023bda:	43                   	inc    ebx
c0023bdb:	83 fb 20             	cmp    ebx,0x20
c0023bde:	0f 85 3e ff ff ff    	jne    c0023b22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023be4:	83 c4 0c             	add    esp,0xc
c0023be7:	5b                   	pop    ebx
c0023be8:	5e                   	pop    esi
c0023be9:	5f                   	pop    edi
c0023bea:	5d                   	pop    ebp
c0023beb:	c3                   	ret    

c0023bec <SATABus::open(int, int, void*)>:
c0023bec:	83 ec 14             	sub    esp,0x14
c0023bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023bf3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023bf9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023bff:	52                   	push   edx
c0023c00:	50                   	push   eax
c0023c01:	e8 08 ff ff ff       	call   c0023b0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023c06:	31 c0                	xor    eax,eax
c0023c08:	83 c4 1c             	add    esp,0x1c
c0023c0b:	c3                   	ret    

c0023c0c <ATA::close(int, int, void*)>:
c0023c0c:	83 ec 0c             	sub    esp,0xc
c0023c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c19:	85 c0                	test   eax,eax
c0023c1b:	74 0c                	je     c0023c29 <ATA::close(int, int, void*)+0x1d>
c0023c1d:	83 ec 0c             	sub    esp,0xc
c0023c20:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c22:	50                   	push   eax
c0023c23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c26:	83 c4 10             	add    esp,0x10
c0023c29:	31 c0                	xor    eax,eax
c0023c2b:	83 c4 0c             	add    esp,0xc
c0023c2e:	c3                   	ret    
c0023c2f:	90                   	nop

c0023c30 <ATA::powerSaving(PowerSavingLevel)>:
c0023c30:	c3                   	ret    
c0023c31:	90                   	nop

c0023c32 <ATA::ATA()>:
c0023c32:	83 ec 0c             	sub    esp,0xc
c0023c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c39:	83 ec 04             	sub    esp,0x4
c0023c3c:	68 00 02 00 00       	push   0x200
c0023c41:	68 1d cb 02 c0       	push   0xc002cb1d
c0023c46:	50                   	push   eax
c0023c47:	e8 ba 07 ff ff       	call   c0014406 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c4c:	83 c4 10             	add    esp,0x10
c0023c4f:	ba a0 ca 02 c0       	mov    edx,0xc002caa0
c0023c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c58:	89 10                	mov    DWORD PTR [eax],edx
c0023c5a:	90                   	nop
c0023c5b:	83 c4 0c             	add    esp,0xc
c0023c5e:	c3                   	ret    
c0023c5f:	90                   	nop

c0023c60 <ATA::flush(bool)>:
c0023c60:	53                   	push   ebx
c0023c61:	83 ec 08             	sub    esp,0x8
c0023c64:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023c69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c6d:	19 c0                	sbb    eax,eax
c0023c6f:	83 e0 fd             	and    eax,0xfffffffd
c0023c72:	05 ea 00 00 00       	add    eax,0xea
c0023c77:	50                   	push   eax
c0023c78:	6a 07                	push   0x7
c0023c7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c81:	50                   	push   eax
c0023c82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c88:	e8 dd ef ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c8d:	83 c4 0c             	add    esp,0xc
c0023c90:	6a 00                	push   0x0
c0023c92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c99:	50                   	push   eax
c0023c9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ca0:	e8 71 fb ff ff       	call   c0023816 <IDE::polling(unsigned char, unsigned int)>
c0023ca5:	83 c4 18             	add    esp,0x18
c0023ca8:	5b                   	pop    ebx
c0023ca9:	c3                   	ret    

c0023caa <ATA::readyForCommand()>:
c0023caa:	56                   	push   esi
c0023cab:	53                   	push   ebx
c0023cac:	31 db                	xor    ebx,ebx
c0023cae:	50                   	push   eax
c0023caf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023cb3:	50                   	push   eax
c0023cb4:	6a 0c                	push   0xc
c0023cb6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023cbd:	50                   	push   eax
c0023cbe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023cc4:	e8 61 f0 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c0023cc9:	83 c4 10             	add    esp,0x10
c0023ccc:	a8 88                	test   al,0x88
c0023cce:	74 23                	je     c0023cf3 <ATA::readyForCommand()+0x49>
c0023cd0:	43                   	inc    ebx
c0023cd1:	83 fb 63             	cmp    ebx,0x63
c0023cd4:	7e dd                	jle    c0023cb3 <ATA::readyForCommand()+0x9>
c0023cd6:	51                   	push   ecx
c0023cd7:	51                   	push   ecx
c0023cd8:	6a 00                	push   0x0
c0023cda:	68 40 42 0f 00       	push   0xf4240
c0023cdf:	e8 c8 a2 ff ff       	call   c001dfac <nanoSleep(unsigned long long)>
c0023ce4:	83 c4 10             	add    esp,0x10
c0023ce7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ced:	75 c4                	jne    c0023cb3 <ATA::readyForCommand()+0x9>
c0023cef:	31 c0                	xor    eax,eax
c0023cf1:	eb 02                	jmp    c0023cf5 <ATA::readyForCommand()+0x4b>
c0023cf3:	b0 01                	mov    al,0x1
c0023cf5:	5a                   	pop    edx
c0023cf6:	5b                   	pop    ebx
c0023cf7:	5e                   	pop    esi
c0023cf8:	c3                   	ret    
c0023cf9:	90                   	nop

c0023cfa <ATA::access(unsigned long long, int, void*, bool)>:
c0023cfa:	55                   	push   ebp
c0023cfb:	57                   	push   edi
c0023cfc:	56                   	push   esi
c0023cfd:	53                   	push   ebx
c0023cfe:	83 ec 2c             	sub    esp,0x2c
c0023d01:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023d05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023d09:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023d0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d11:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023d15:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d1d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023d23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d27:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d31:	c1 e0 06             	shl    eax,0x6
c0023d34:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023d3c:	74 5d                	je     c0023d9b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023d3e:	89 fa                	mov    edx,edi
c0023d40:	89 f0                	mov    eax,esi
c0023d42:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023d46:	c1 ea 1c             	shr    edx,0x1c
c0023d49:	89 d1                	mov    ecx,edx
c0023d4b:	09 c1                	or     ecx,eax
c0023d4d:	74 25                	je     c0023d74 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d4f:	31 ed                	xor    ebp,ebp
c0023d51:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023d58:	89 fa                	mov    edx,edi
c0023d5a:	89 f0                	mov    eax,esi
c0023d5c:	0f ad d0             	shrd   eax,edx,cl
c0023d5f:	d3 ea                	shr    edx,cl
c0023d61:	f6 c1 20             	test   cl,0x20
c0023d64:	74 02                	je     c0023d68 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023d66:	89 d0                	mov    eax,edx
c0023d68:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023d6c:	45                   	inc    ebp
c0023d6d:	83 fd 06             	cmp    ebp,0x6
c0023d70:	75 df                	jne    c0023d51 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023d72:	eb 76                	jmp    c0023dea <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023d74:	89 f0                	mov    eax,esi
c0023d76:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023d7b:	89 fa                	mov    edx,edi
c0023d7d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d84:	0f ac d0 10          	shrd   eax,edx,0x10
c0023d88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d8d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023d91:	c1 ee 18             	shr    esi,0x18
c0023d94:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023d99:	eb 56                	jmp    c0023df1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d9b:	6a 00                	push   0x0
c0023d9d:	6a 3f                	push   0x3f
c0023d9f:	57                   	push   edi
c0023da0:	56                   	push   esi
c0023da1:	e8 96 29 00 00       	call   c002673c <__umoddi3>
c0023da6:	83 c4 10             	add    esp,0x10
c0023da9:	40                   	inc    eax
c0023daa:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023dae:	6a 00                	push   0x0
c0023db0:	68 f0 03 00 00       	push   0x3f0
c0023db5:	57                   	push   edi
c0023db6:	56                   	push   esi
c0023db7:	e8 80 28 00 00       	call   c002663c <__udivdi3>
c0023dbc:	83 c4 10             	add    esp,0x10
c0023dbf:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023dc4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023dcb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023dd0:	6a 00                	push   0x0
c0023dd2:	6a 3f                	push   0x3f
c0023dd4:	57                   	push   edi
c0023dd5:	56                   	push   esi
c0023dd6:	e8 61 28 00 00       	call   c002663c <__udivdi3>
c0023ddb:	83 c4 10             	add    esp,0x10
c0023dde:	89 c6                	mov    esi,eax
c0023de0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023de5:	83 e6 0f             	and    esi,0xf
c0023de8:	eb 07                	jmp    c0023df1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023dea:	31 f6                	xor    esi,esi
c0023dec:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023df1:	bf 01 00 00 00       	mov    edi,0x1
c0023df6:	50                   	push   eax
c0023df7:	6a 00                	push   0x0
c0023df9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e00:	50                   	push   eax
c0023e01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023e05:	e8 6c f0 ff ff       	call   c0022e76 <IDE::enableIRQs(unsigned char, bool)>
c0023e0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e0d:	e8 98 fe ff ff       	call   c0023caa <ATA::readyForCommand()>
c0023e12:	83 c4 10             	add    esp,0x10
c0023e15:	84 c0                	test   al,al
c0023e17:	0f 84 5a 02 00 00    	je     c0024077 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e1d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023e23:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e29:	c1 e0 04             	shl    eax,0x4
c0023e2c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023e33:	09 c6                	or     esi,eax
c0023e35:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023e3a:	75 05                	jne    c0023e41 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023e3c:	83 ce a0             	or     esi,0xffffffa0
c0023e3f:	eb 03                	jmp    c0023e44 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023e41:	83 ce e0             	or     esi,0xffffffe0
c0023e44:	89 f0                	mov    eax,esi
c0023e46:	0f b6 f0             	movzx  esi,al
c0023e49:	56                   	push   esi
c0023e4a:	6a 06                	push   0x6
c0023e4c:	51                   	push   ecx
c0023e4d:	52                   	push   edx
c0023e4e:	e8 17 ee ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e53:	83 c4 10             	add    esp,0x10
c0023e56:	6a 00                	push   0x0
c0023e58:	6a 01                	push   0x1
c0023e5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e61:	50                   	push   eax
c0023e62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e68:	e8 fd ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e6d:	83 c4 10             	add    esp,0x10
c0023e70:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023e75:	75 6e                	jne    c0023ee5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023e77:	6a 00                	push   0x0
c0023e79:	6a 08                	push   0x8
c0023e7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e82:	50                   	push   eax
c0023e83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e89:	e8 dc ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e8e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023e93:	50                   	push   eax
c0023e94:	6a 09                	push   0x9
c0023e96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e9d:	50                   	push   eax
c0023e9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea4:	e8 c1 ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ea9:	83 c4 20             	add    esp,0x20
c0023eac:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023eb1:	50                   	push   eax
c0023eb2:	6a 0a                	push   0xa
c0023eb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ebb:	50                   	push   eax
c0023ebc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ec2:	e8 a3 ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ec7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023ecc:	50                   	push   eax
c0023ecd:	6a 0b                	push   0xb
c0023ecf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ed6:	50                   	push   eax
c0023ed7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023edd:	e8 88 ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ee2:	83 c4 20             	add    esp,0x20
c0023ee5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023eea:	50                   	push   eax
c0023eeb:	6a 02                	push   0x2
c0023eed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef4:	50                   	push   eax
c0023ef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023efb:	e8 6a ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f00:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023f05:	50                   	push   eax
c0023f06:	6a 03                	push   0x3
c0023f08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f0f:	50                   	push   eax
c0023f10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f16:	e8 4f ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f1b:	83 c4 20             	add    esp,0x20
c0023f1e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023f23:	50                   	push   eax
c0023f24:	6a 04                	push   0x4
c0023f26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f2d:	50                   	push   eax
c0023f2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f34:	e8 31 ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023f3e:	50                   	push   eax
c0023f3f:	6a 05                	push   0x5
c0023f41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f48:	50                   	push   eax
c0023f49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f4f:	e8 16 ed ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f54:	83 c4 20             	add    esp,0x20
c0023f57:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f5c:	0f 94 c0             	sete   al
c0023f5f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f64:	74 09                	je     c0023f6f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023f66:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023f6d:	eb 07                	jmp    c0023f76 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023f6f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023f76:	0f b6 c0             	movzx  eax,al
c0023f79:	50                   	push   eax
c0023f7a:	6a 07                	push   0x7
c0023f7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f83:	50                   	push   eax
c0023f84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f8a:	e8 db ec ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023f93:	83 c4 10             	add    esp,0x10
c0023f96:	85 f6                	test   esi,esi
c0023f98:	0f 84 ba 00 00 00    	je     c0024058 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f9e:	50                   	push   eax
c0023f9f:	6a 01                	push   0x1
c0023fa1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa8:	50                   	push   eax
c0023fa9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023faf:	e8 62 f8 ff ff       	call   c0023816 <IDE::polling(unsigned char, unsigned int)>
c0023fb4:	83 c4 10             	add    esp,0x10
c0023fb7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023fbd:	84 c0                	test   al,al
c0023fbf:	74 2c                	je     c0023fed <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023fc1:	0f b6 f8             	movzx  edi,al
c0023fc4:	0f b6 d2             	movzx  edx,dl
c0023fc7:	57                   	push   edi
c0023fc8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023fcf:	50                   	push   eax
c0023fd0:	52                   	push   edx
c0023fd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd7:	e8 a4 f6 ff ff       	call   c0023680 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023fdc:	c7 04 24 78 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca78
c0023fe3:	e8 d4 eb fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0023fe8:	e9 87 00 00 00       	jmp    c0024074 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023fed:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023ff2:	74 33                	je     c0024027 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023ff4:	31 ed                	xor    ebp,ebp
c0023ff6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023ffa:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023ffe:	50                   	push   eax
c0023fff:	50                   	push   eax
c0024000:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024007:	50                   	push   eax
c0024008:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002400e:	e8 45 ec ff ff       	call   c0022c58 <IDE::getBase(unsigned char)>
c0024013:	89 c2                	mov    edx,eax
c0024015:	89 f8                	mov    eax,edi
c0024017:	66 ef                	out    dx,ax
c0024019:	45                   	inc    ebp
c002401a:	83 c4 10             	add    esp,0x10
c002401d:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024023:	75 d1                	jne    c0023ff6 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024025:	eb 23                	jmp    c002404a <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024027:	0f b6 d2             	movzx  edx,dl
c002402a:	51                   	push   ecx
c002402b:	51                   	push   ecx
c002402c:	52                   	push   edx
c002402d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024033:	e8 20 ec ff ff       	call   c0022c58 <IDE::getBase(unsigned char)>
c0024038:	b9 00 01 00 00       	mov    ecx,0x100
c002403d:	89 c2                	mov    edx,eax
c002403f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024043:	fc                   	cld    
c0024044:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024047:	83 c4 10             	add    esp,0x10
c002404a:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024052:	4e                   	dec    esi
c0024053:	e9 3e ff ff ff       	jmp    c0023f96 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024058:	31 ff                	xor    edi,edi
c002405a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002405f:	74 16                	je     c0024077 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024061:	50                   	push   eax
c0024062:	50                   	push   eax
c0024063:	31 c0                	xor    eax,eax
c0024065:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002406a:	0f 94 c0             	sete   al
c002406d:	50                   	push   eax
c002406e:	53                   	push   ebx
c002406f:	e8 ec fb ff ff       	call   c0023c60 <ATA::flush(bool)>
c0024074:	83 c4 10             	add    esp,0x10
c0024077:	83 c4 2c             	add    esp,0x2c
c002407a:	89 f8                	mov    eax,edi
c002407c:	5b                   	pop    ebx
c002407d:	5e                   	pop    esi
c002407e:	5f                   	pop    edi
c002407f:	5d                   	pop    ebp
c0024080:	c3                   	ret    
c0024081:	90                   	nop

c0024082 <ATA::read(unsigned long long, int, void*)>:
c0024082:	57                   	push   edi
c0024083:	b8 04 00 00 00       	mov    eax,0x4
c0024088:	56                   	push   esi
c0024089:	53                   	push   ebx
c002408a:	83 ec 10             	sub    esp,0x10
c002408d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024091:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024095:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024098:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002409c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240a0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00240a6:	77 3b                	ja     c00240e3 <ATA::read(unsigned long long, int, void*)+0x61>
c00240a8:	b8 06 00 00 00       	mov    eax,0x6
c00240ad:	85 d2                	test   edx,edx
c00240af:	74 32                	je     c00240e3 <ATA::read(unsigned long long, int, void*)+0x61>
c00240b1:	50                   	push   eax
c00240b2:	50                   	push   eax
c00240b3:	6a 00                	push   0x0
c00240b5:	52                   	push   edx
c00240b6:	53                   	push   ebx
c00240b7:	57                   	push   edi
c00240b8:	56                   	push   esi
c00240b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00240bd:	e8 38 fc ff ff       	call   c0023cfa <ATA::access(unsigned long long, int, void*, bool)>
c00240c2:	83 c4 20             	add    esp,0x20
c00240c5:	85 c0                	test   eax,eax
c00240c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240cb:	75 11                	jne    c00240de <ATA::read(unsigned long long, int, void*)+0x5c>
c00240cd:	01 1d 28 24 03 c0    	add    DWORD PTR ds:0xc0032428,ebx
c00240d3:	e8 9e c8 fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c00240d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00240dc:	eb 05                	jmp    c00240e3 <ATA::read(unsigned long long, int, void*)+0x61>
c00240de:	b8 01 00 00 00       	mov    eax,0x1
c00240e3:	83 c4 10             	add    esp,0x10
c00240e6:	5b                   	pop    ebx
c00240e7:	5e                   	pop    esi
c00240e8:	5f                   	pop    edi
c00240e9:	c3                   	ret    

c00240ea <ATA::write(unsigned long long, int, void*)>:
c00240ea:	57                   	push   edi
c00240eb:	b8 04 00 00 00       	mov    eax,0x4
c00240f0:	56                   	push   esi
c00240f1:	53                   	push   ebx
c00240f2:	83 ec 10             	sub    esp,0x10
c00240f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00240f9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00240fd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024100:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024104:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024108:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002410e:	77 3b                	ja     c002414b <ATA::write(unsigned long long, int, void*)+0x61>
c0024110:	b8 06 00 00 00       	mov    eax,0x6
c0024115:	85 d2                	test   edx,edx
c0024117:	74 32                	je     c002414b <ATA::write(unsigned long long, int, void*)+0x61>
c0024119:	50                   	push   eax
c002411a:	50                   	push   eax
c002411b:	6a 01                	push   0x1
c002411d:	52                   	push   edx
c002411e:	53                   	push   ebx
c002411f:	57                   	push   edi
c0024120:	56                   	push   esi
c0024121:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024125:	e8 d0 fb ff ff       	call   c0023cfa <ATA::access(unsigned long long, int, void*, bool)>
c002412a:	83 c4 20             	add    esp,0x20
c002412d:	85 c0                	test   eax,eax
c002412f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024133:	75 11                	jne    c0024146 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024135:	01 1d 24 24 03 c0    	add    DWORD PTR ds:0xc0032424,ebx
c002413b:	e8 36 c8 fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0024140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024144:	eb 05                	jmp    c002414b <ATA::write(unsigned long long, int, void*)+0x61>
c0024146:	b8 01 00 00 00       	mov    eax,0x1
c002414b:	83 c4 10             	add    esp,0x10
c002414e:	5b                   	pop    ebx
c002414f:	5e                   	pop    esi
c0024150:	5f                   	pop    edi
c0024151:	c3                   	ret    

c0024152 <ATA::detectCHS()>:
c0024152:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024156:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002415c:	c1 e0 06             	shl    eax,0x6
c002415f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024165:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002416f:	c7 44 24 04 83 ca 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ca83
c0024177:	e9 bb 60 ff ff       	jmp    c001a237 <Krnl::panic(char const*)>

c002417c <ATA::open(int, int, void*)>:
c002417c:	53                   	push   ebx
c002417d:	83 ec 08             	sub    esp,0x8
c0024180:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024184:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024188:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002418c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024192:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024198:	c1 e0 06             	shl    eax,0x6
c002419b:	01 d0                	add    eax,edx
c002419d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00241a4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00241aa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00241b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00241bb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00241c1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00241c8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00241cf:	75 0c                	jne    c00241dd <ATA::open(int, int, void*)+0x61>
c00241d1:	83 ec 0c             	sub    esp,0xc
c00241d4:	53                   	push   ebx
c00241d5:	e8 78 ff ff ff       	call   c0024152 <ATA::detectCHS()>
c00241da:	83 c4 10             	add    esp,0x10
c00241dd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241e9:	c1 e0 06             	shl    eax,0x6
c00241ec:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00241f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00241fd:	d1 e8                	shr    eax,1
c00241ff:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024205:	6a 04                	push   0x4
c0024207:	6a 0c                	push   0xc
c0024209:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024210:	50                   	push   eax
c0024211:	52                   	push   edx
c0024212:	e8 53 ea ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024217:	90                   	nop
c0024218:	90                   	nop
c0024219:	6a 00                	push   0x0
c002421b:	6a 0c                	push   0xc
c002421d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024224:	50                   	push   eax
c0024225:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422b:	e8 3a ea ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024230:	83 c4 14             	add    esp,0x14
c0024233:	53                   	push   ebx
c0024234:	e8 35 02 ff ff       	call   c001446e <PhysicalDisk::startCache()>
c0024239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002423c:	e8 7d 23 ff ff       	call   c00165be <createPartitionsForDisk(PhysicalDisk*)>
c0024241:	31 c0                	xor    eax,eax
c0024243:	83 c4 18             	add    esp,0x18
c0024246:	5b                   	pop    ebx
c0024247:	c3                   	ret    

c0024248 <ATAPI::write(unsigned long long, int, void*)>:
c0024248:	b8 03 00 00 00       	mov    eax,0x3
c002424d:	c3                   	ret    

c002424e <ATAPI::close(int, int, void*)>:
c002424e:	83 ec 0c             	sub    esp,0xc
c0024251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024255:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002425b:	85 c0                	test   eax,eax
c002425d:	74 0c                	je     c002426b <ATAPI::close(int, int, void*)+0x1d>
c002425f:	83 ec 0c             	sub    esp,0xc
c0024262:	8b 10                	mov    edx,DWORD PTR [eax]
c0024264:	50                   	push   eax
c0024265:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024268:	83 c4 10             	add    esp,0x10
c002426b:	31 c0                	xor    eax,eax
c002426d:	83 c4 0c             	add    esp,0xc
c0024270:	c3                   	ret    
c0024271:	90                   	nop

c0024272 <ATAPI::ATAPI()>:
c0024272:	83 ec 0c             	sub    esp,0xc
c0024275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024279:	83 ec 04             	sub    esp,0x4
c002427c:	68 00 08 00 00       	push   0x800
c0024281:	68 bd cb 02 c0       	push   0xc002cbbd
c0024286:	50                   	push   eax
c0024287:	e8 7a 01 ff ff       	call   c0014406 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002428c:	83 c4 10             	add    esp,0x10
c002428f:	ba d8 ca 02 c0       	mov    edx,0xc002cad8
c0024294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024298:	89 10                	mov    DWORD PTR [eax],edx
c002429a:	90                   	nop
c002429b:	83 c4 0c             	add    esp,0xc
c002429e:	c3                   	ret    
c002429f:	90                   	nop

c00242a0 <ATAPI::readyForCommand()>:
c00242a0:	56                   	push   esi
c00242a1:	53                   	push   ebx
c00242a2:	31 db                	xor    ebx,ebx
c00242a4:	50                   	push   eax
c00242a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00242a9:	50                   	push   eax
c00242aa:	6a 0c                	push   0xc
c00242ac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242b3:	50                   	push   eax
c00242b4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242ba:	e8 6b ea ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c00242bf:	83 c4 10             	add    esp,0x10
c00242c2:	a8 88                	test   al,0x88
c00242c4:	74 23                	je     c00242e9 <ATAPI::readyForCommand()+0x49>
c00242c6:	43                   	inc    ebx
c00242c7:	83 fb 63             	cmp    ebx,0x63
c00242ca:	7e dd                	jle    c00242a9 <ATAPI::readyForCommand()+0x9>
c00242cc:	51                   	push   ecx
c00242cd:	51                   	push   ecx
c00242ce:	6a 00                	push   0x0
c00242d0:	68 40 42 0f 00       	push   0xf4240
c00242d5:	e8 d2 9c ff ff       	call   c001dfac <nanoSleep(unsigned long long)>
c00242da:	83 c4 10             	add    esp,0x10
c00242dd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242e3:	75 c4                	jne    c00242a9 <ATAPI::readyForCommand()+0x9>
c00242e5:	31 c0                	xor    eax,eax
c00242e7:	eb 02                	jmp    c00242eb <ATAPI::readyForCommand()+0x4b>
c00242e9:	b0 01                	mov    al,0x1
c00242eb:	5a                   	pop    edx
c00242ec:	5b                   	pop    ebx
c00242ed:	5e                   	pop    esi
c00242ee:	c3                   	ret    
c00242ef:	90                   	nop

c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00242f0:	55                   	push   ebp
c00242f1:	57                   	push   edi
c00242f2:	56                   	push   esi
c00242f3:	53                   	push   ebx
c00242f4:	83 ec 20             	sub    esp,0x20
c00242f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00242fb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00242ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024303:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024307:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002430b:	6a 01                	push   0x1
c002430d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024314:	50                   	push   eax
c0024315:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002431b:	e8 56 eb ff ff       	call   c0022e76 <IDE::enableIRQs(unsigned char, bool)>
c0024320:	5e                   	pop    esi
c0024321:	58                   	pop    eax
c0024322:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024329:	50                   	push   eax
c002432a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024330:	e8 0f e9 ff ff       	call   c0022c44 <IDE::prepareInterrupt(unsigned char)>
c0024335:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024338:	e8 63 ff ff ff       	call   c00242a0 <ATAPI::readyForCommand()>
c002433d:	83 c4 10             	add    esp,0x10
c0024340:	84 c0                	test   al,al
c0024342:	75 0a                	jne    c002434e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024344:	bb 01 00 00 00       	mov    ebx,0x1
c0024349:	e9 57 02 00 00       	jmp    c00245a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002434e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024354:	c1 e0 04             	shl    eax,0x4
c0024357:	0f b6 c0             	movzx  eax,al
c002435a:	50                   	push   eax
c002435b:	6a 06                	push   0x6
c002435d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024364:	50                   	push   eax
c0024365:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002436b:	e8 fa e8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024370:	6a 00                	push   0x0
c0024372:	6a 01                	push   0x1
c0024374:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002437b:	50                   	push   eax
c002437c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024382:	e8 e3 e8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024387:	83 c4 20             	add    esp,0x20
c002438a:	0f b6 c3             	movzx  eax,bl
c002438d:	0f b6 df             	movzx  ebx,bh
c0024390:	50                   	push   eax
c0024391:	6a 04                	push   0x4
c0024393:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002439a:	50                   	push   eax
c002439b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243a1:	e8 c4 e8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243a6:	53                   	push   ebx
c00243a7:	6a 05                	push   0x5
c00243a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243b0:	50                   	push   eax
c00243b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243b7:	e8 ae e8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243bc:	83 c4 20             	add    esp,0x20
c00243bf:	68 a0 00 00 00       	push   0xa0
c00243c4:	6a 07                	push   0x7
c00243c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243cd:	50                   	push   eax
c00243ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243d4:	e8 91 e8 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d9:	83 c4 0c             	add    esp,0xc
c00243dc:	6a 01                	push   0x1
c00243de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243e5:	50                   	push   eax
c00243e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243ec:	e8 25 f4 ff ff       	call   c0023816 <IDE::polling(unsigned char, unsigned int)>
c00243f1:	83 c4 10             	add    esp,0x10
c00243f4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00243fa:	84 c0                	test   al,al
c00243fc:	74 23                	je     c0024421 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00243fe:	0f b6 d8             	movzx  ebx,al
c0024401:	0f b6 d2             	movzx  edx,dl
c0024404:	53                   	push   ebx
c0024405:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002440c:	50                   	push   eax
c002440d:	52                   	push   edx
c002440e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024414:	e8 67 f2 ff ff       	call   c0023680 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024419:	83 c4 10             	add    esp,0x10
c002441c:	e9 84 01 00 00       	jmp    c00245a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024421:	0f b6 d2             	movzx  edx,dl
c0024424:	53                   	push   ebx
c0024425:	53                   	push   ebx
c0024426:	52                   	push   edx
c0024427:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002442d:	e8 26 e8 ff ff       	call   c0022c58 <IDE::getBase(unsigned char)>
c0024432:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024436:	b9 06 00 00 00       	mov    ecx,0x6
c002443b:	89 c2                	mov    edx,eax
c002443d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024440:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024444:	83 c4 10             	add    esp,0x10
c0024447:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002444d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024454:	85 db                	test   ebx,ebx
c0024456:	0f 84 ec 00 00 00    	je     c0024548 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002445c:	51                   	push   ecx
c002445d:	51                   	push   ecx
c002445e:	52                   	push   edx
c002445f:	50                   	push   eax
c0024460:	e8 73 e9 ff ff       	call   c0022dd8 <IDE::waitInterrupt(unsigned char)>
c0024465:	83 c4 10             	add    esp,0x10
c0024468:	84 c0                	test   al,al
c002446a:	0f 84 d4 fe ff ff    	je     c0024344 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024470:	56                   	push   esi
c0024471:	56                   	push   esi
c0024472:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024479:	50                   	push   eax
c002447a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024480:	e8 bf e7 ff ff       	call   c0022c44 <IDE::prepareInterrupt(unsigned char)>
c0024485:	83 c4 0c             	add    esp,0xc
c0024488:	6a 04                	push   0x4
c002448a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024491:	50                   	push   eax
c0024492:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024498:	e8 8d e8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c002449d:	83 c4 0c             	add    esp,0xc
c00244a0:	89 c6                	mov    esi,eax
c00244a2:	6a 05                	push   0x5
c00244a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ab:	50                   	push   eax
c00244ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b2:	e8 73 e8 ff ff       	call   c0022d2a <IDE::read(unsigned char, unsigned char)>
c00244b7:	89 f1                	mov    ecx,esi
c00244b9:	0f b6 c0             	movzx  eax,al
c00244bc:	0f b6 f1             	movzx  esi,cl
c00244bf:	c1 e0 08             	shl    eax,0x8
c00244c2:	09 c6                	or     esi,eax
c00244c4:	d1 fe                	sar    esi,1
c00244c6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00244ca:	83 c4 10             	add    esp,0x10
c00244cd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00244d2:	74 41                	je     c0024515 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00244d4:	31 c9                	xor    ecx,ecx
c00244d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244e3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00244e7:	75 0a                	jne    c00244f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00244e9:	01 c9                	add    ecx,ecx
c00244eb:	01 cd                	add    ebp,ecx
c00244ed:	4b                   	dec    ebx
c00244ee:	e9 54 ff ff ff       	jmp    c0024447 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00244f3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00244f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00244fc:	51                   	push   ecx
c00244fd:	51                   	push   ecx
c00244fe:	52                   	push   edx
c00244ff:	50                   	push   eax
c0024500:	e8 53 e7 ff ff       	call   c0022c58 <IDE::getBase(unsigned char)>
c0024505:	89 c2                	mov    edx,eax
c0024507:	89 f0                	mov    eax,esi
c0024509:	66 ef                	out    dx,ax
c002450b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002450f:	83 c4 10             	add    esp,0x10
c0024512:	41                   	inc    ecx
c0024513:	eb c1                	jmp    c00244d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024515:	31 f6                	xor    esi,esi
c0024517:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002451d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024524:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024528:	75 06                	jne    c0024530 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002452a:	01 f6                	add    esi,esi
c002452c:	01 f5                	add    ebp,esi
c002452e:	eb bd                	jmp    c00244ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024530:	51                   	push   ecx
c0024531:	51                   	push   ecx
c0024532:	52                   	push   edx
c0024533:	50                   	push   eax
c0024534:	e8 1f e7 ff ff       	call   c0022c58 <IDE::getBase(unsigned char)>
c0024539:	89 c2                	mov    edx,eax
c002453b:	66 ed                	in     ax,dx
c002453d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024542:	83 c4 10             	add    esp,0x10
c0024545:	46                   	inc    esi
c0024546:	eb cf                	jmp    c0024517 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024548:	51                   	push   ecx
c0024549:	51                   	push   ecx
c002454a:	52                   	push   edx
c002454b:	50                   	push   eax
c002454c:	e8 87 e8 ff ff       	call   c0022dd8 <IDE::waitInterrupt(unsigned char)>
c0024551:	83 c4 10             	add    esp,0x10
c0024554:	84 c0                	test   al,al
c0024556:	0f 84 e8 fd ff ff    	je     c0024344 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002455c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024561:	52                   	push   edx
c0024562:	52                   	push   edx
c0024563:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456a:	50                   	push   eax
c002456b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024571:	e8 ce e6 ff ff       	call   c0022c44 <IDE::prepareInterrupt(unsigned char)>
c0024576:	83 c4 10             	add    esp,0x10
c0024579:	50                   	push   eax
c002457a:	50                   	push   eax
c002457b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024582:	50                   	push   eax
c0024583:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024589:	e8 ca e6 ff ff       	call   c0022c58 <IDE::getBase(unsigned char)>
c002458e:	8d 50 07             	lea    edx,[eax+0x7]
c0024591:	ec                   	in     al,dx
c0024592:	83 c4 10             	add    esp,0x10
c0024595:	a8 88                	test   al,0x88
c0024597:	74 0a                	je     c00245a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024599:	4b                   	dec    ebx
c002459a:	75 dd                	jne    c0024579 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002459c:	bb 02 00 00 00       	mov    ebx,0x2
c00245a1:	eb 02                	jmp    c00245a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245a3:	31 db                	xor    ebx,ebx
c00245a5:	83 c4 1c             	add    esp,0x1c
c00245a8:	89 d8                	mov    eax,ebx
c00245aa:	5b                   	pop    ebx
c00245ab:	5e                   	pop    esi
c00245ac:	5f                   	pop    edi
c00245ad:	5d                   	pop    ebp
c00245ae:	c3                   	ret    
c00245af:	90                   	nop

c00245b0 <ATAPI::diskRemoved()>:
c00245b0:	83 ec 18             	sub    esp,0x18
c00245b3:	68 c9 cb 02 c0       	push   0xc002cbc9
c00245b8:	e8 ff e5 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00245bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245c1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00245c8:	83 c4 1c             	add    esp,0x1c
c00245cb:	c3                   	ret    

c00245cc <ATAPI::eject()>:
c00245cc:	57                   	push   edi
c00245cd:	b9 03 00 00 00       	mov    ecx,0x3
c00245d2:	53                   	push   ebx
c00245d3:	83 ec 14             	sub    esp,0x14
c00245d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00245da:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00245de:	fc                   	cld    
c00245df:	31 c0                	xor    eax,eax
c00245e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00245e3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00245e8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00245ed:	50                   	push   eax
c00245ee:	50                   	push   eax
c00245ef:	6a 00                	push   0x0
c00245f1:	6a 00                	push   0x0
c00245f3:	6a 00                	push   0x0
c00245f5:	6a 02                	push   0x2
c00245f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00245fb:	50                   	push   eax
c00245fc:	53                   	push   ebx
c00245fd:	e8 ee fc ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024602:	83 c4 14             	add    esp,0x14
c0024605:	53                   	push   ebx
c0024606:	e8 a5 ff ff ff       	call   c00245b0 <ATAPI::diskRemoved()>
c002460b:	83 c4 24             	add    esp,0x24
c002460e:	31 c0                	xor    eax,eax
c0024610:	5b                   	pop    ebx
c0024611:	5f                   	pop    edi
c0024612:	c3                   	ret    
c0024613:	90                   	nop

c0024614 <ATAPI::diskInserted()>:
c0024614:	53                   	push   ebx
c0024615:	83 ec 14             	sub    esp,0x14
c0024618:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002461c:	68 e0 cb 02 c0       	push   0xc002cbe0
c0024621:	e8 96 e5 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0024626:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002462d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024630:	e8 39 fe fe ff       	call   c001446e <PhysicalDisk::startCache()>
c0024635:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024639:	83 c4 18             	add    esp,0x18
c002463c:	5b                   	pop    ebx
c002463d:	e9 7c 1f ff ff       	jmp    c00165be <createPartitionsForDisk(PhysicalDisk*)>

c0024642 <ATAPI::detectMedia()>:
c0024642:	56                   	push   esi
c0024643:	53                   	push   ebx
c0024644:	83 ec 28             	sub    esp,0x28
c0024647:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002464b:	6a 0c                	push   0xc
c002464d:	6a 00                	push   0x0
c002464f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024653:	56                   	push   esi
c0024654:	e8 1f c1 fd ff       	call   c0000778 <memset>
c0024659:	58                   	pop    eax
c002465a:	5a                   	pop    edx
c002465b:	6a 00                	push   0x0
c002465d:	6a 00                	push   0x0
c002465f:	6a 00                	push   0x0
c0024661:	6a 00                	push   0x0
c0024663:	56                   	push   esi
c0024664:	53                   	push   ebx
c0024665:	e8 86 fc ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002466a:	83 c4 1c             	add    esp,0x1c
c002466d:	6a 0c                	push   0xc
c002466f:	6a 00                	push   0x0
c0024671:	56                   	push   esi
c0024672:	e8 01 c1 fd ff       	call   c0000778 <memset>
c0024677:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002467c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024681:	59                   	pop    ecx
c0024682:	58                   	pop    eax
c0024683:	6a 01                	push   0x1
c0024685:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024689:	50                   	push   eax
c002468a:	6a 00                	push   0x0
c002468c:	6a 12                	push   0x12
c002468e:	56                   	push   esi
c002468f:	53                   	push   ebx
c0024690:	e8 5b fc ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024695:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024699:	83 c4 20             	add    esp,0x20
c002469c:	83 e0 7f             	and    eax,0x7f
c002469f:	3c 70                	cmp    al,0x70
c00246a1:	74 15                	je     c00246b8 <ATAPI::detectMedia()+0x76>
c00246a3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246aa:	75 0c                	jne    c00246b8 <ATAPI::detectMedia()+0x76>
c00246ac:	83 ec 0c             	sub    esp,0xc
c00246af:	53                   	push   ebx
c00246b0:	e8 5f ff ff ff       	call   c0024614 <ATAPI::diskInserted()>
c00246b5:	83 c4 10             	add    esp,0x10
c00246b8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00246bc:	83 e0 0f             	and    eax,0xf
c00246bf:	3c 02                	cmp    al,0x2
c00246c1:	75 1b                	jne    c00246de <ATAPI::detectMedia()+0x9c>
c00246c3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00246c8:	75 2d                	jne    c00246f7 <ATAPI::detectMedia()+0xb5>
c00246ca:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246d1:	74 24                	je     c00246f7 <ATAPI::detectMedia()+0xb5>
c00246d3:	83 ec 0c             	sub    esp,0xc
c00246d6:	53                   	push   ebx
c00246d7:	e8 d4 fe ff ff       	call   c00245b0 <ATAPI::diskRemoved()>
c00246dc:	eb 16                	jmp    c00246f4 <ATAPI::detectMedia()+0xb2>
c00246de:	84 c0                	test   al,al
c00246e0:	75 15                	jne    c00246f7 <ATAPI::detectMedia()+0xb5>
c00246e2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246e9:	75 0c                	jne    c00246f7 <ATAPI::detectMedia()+0xb5>
c00246eb:	83 ec 0c             	sub    esp,0xc
c00246ee:	53                   	push   ebx
c00246ef:	e8 20 ff ff ff       	call   c0024614 <ATAPI::diskInserted()>
c00246f4:	83 c4 10             	add    esp,0x10
c00246f7:	83 c4 24             	add    esp,0x24
c00246fa:	5b                   	pop    ebx
c00246fb:	5e                   	pop    esi
c00246fc:	c3                   	ret    
c00246fd:	90                   	nop

c00246fe <ATAPI::open(int, int, void*)>:
c00246fe:	53                   	push   ebx
c00246ff:	83 ec 08             	sub    esp,0x8
c0024702:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002470a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002470e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024714:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002471a:	c1 e0 06             	shl    eax,0x6
c002471d:	01 d0                	add    eax,edx
c002471f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024726:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002472c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024733:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002473d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024743:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002474a:	6a 04                	push   0x4
c002474c:	6a 0c                	push   0xc
c002474e:	51                   	push   ecx
c002474f:	52                   	push   edx
c0024750:	e8 15 e5 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024755:	90                   	nop
c0024756:	90                   	nop
c0024757:	6a 00                	push   0x0
c0024759:	6a 0c                	push   0xc
c002475b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024762:	50                   	push   eax
c0024763:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024769:	e8 fc e4 ff ff       	call   c0022c6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024775:	83 c4 14             	add    esp,0x14
c0024778:	53                   	push   ebx
c0024779:	e8 c4 fe ff ff       	call   c0024642 <ATAPI::detectMedia()>
c002477e:	31 c0                	xor    eax,eax
c0024780:	83 c4 18             	add    esp,0x18
c0024783:	5b                   	pop    ebx
c0024784:	c3                   	ret    
c0024785:	90                   	nop

c0024786 <ATAPI::read(unsigned long long, int, void*)>:
c0024786:	55                   	push   ebp
c0024787:	57                   	push   edi
c0024788:	56                   	push   esi
c0024789:	53                   	push   ebx
c002478a:	83 ec 1c             	sub    esp,0x1c
c002478d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024791:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024795:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024799:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247a0:	74 41                	je     c00247e3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00247a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247a6:	b9 03 00 00 00       	mov    ecx,0x3
c00247ab:	fc                   	cld    
c00247ac:	31 c0                	xor    eax,eax
c00247ae:	86 fb                	xchg   bl,bh
c00247b0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247b2:	c1 c3 10             	rol    ebx,0x10
c00247b5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00247ba:	89 e8                	mov    eax,ebp
c00247bc:	86 fb                	xchg   bl,bh
c00247be:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00247c2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00247c6:	50                   	push   eax
c00247c7:	50                   	push   eax
c00247c8:	55                   	push   ebp
c00247c9:	c1 e5 0b             	shl    ebp,0xb
c00247cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00247d0:	6a 00                	push   0x0
c00247d2:	55                   	push   ebp
c00247d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247d7:	50                   	push   eax
c00247d8:	56                   	push   esi
c00247d9:	e8 12 fb ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247de:	83 c4 20             	add    esp,0x20
c00247e1:	eb 1a                	jmp    c00247fd <ATAPI::read(unsigned long long, int, void*)+0x77>
c00247e3:	83 ec 0c             	sub    esp,0xc
c00247e6:	56                   	push   esi
c00247e7:	e8 56 fe ff ff       	call   c0024642 <ATAPI::detectMedia()>
c00247ec:	83 c4 10             	add    esp,0x10
c00247ef:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247f6:	75 aa                	jne    c00247a2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00247f8:	b8 02 00 00 00       	mov    eax,0x2
c00247fd:	83 c4 1c             	add    esp,0x1c
c0024800:	5b                   	pop    ebx
c0024801:	5e                   	pop    esi
c0024802:	5f                   	pop    edi
c0024803:	5d                   	pop    ebp
c0024804:	c3                   	ret    
c0024805:	90                   	nop

c0024806 <SATA::close(int, int, void*)>:
c0024806:	83 ec 0c             	sub    esp,0xc
c0024809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024813:	85 c0                	test   eax,eax
c0024815:	74 0c                	je     c0024823 <SATA::close(int, int, void*)+0x1d>
c0024817:	83 ec 0c             	sub    esp,0xc
c002481a:	8b 10                	mov    edx,DWORD PTR [eax]
c002481c:	50                   	push   eax
c002481d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024820:	83 c4 10             	add    esp,0x10
c0024823:	31 c0                	xor    eax,eax
c0024825:	83 c4 0c             	add    esp,0xc
c0024828:	c3                   	ret    
c0024829:	90                   	nop

c002482a <SATA::powerSaving(PowerSavingLevel)>:
c002482a:	c3                   	ret    
c002482b:	90                   	nop

c002482c <SATA::open(int, int, void*)>:
c002482c:	56                   	push   esi
c002482d:	53                   	push   ebx
c002482e:	50                   	push   eax
c002482f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024833:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024837:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024841:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024847:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024855:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002485f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024865:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002486c:	e8 6e b6 fe ff       	call   c000fedf <Phys::allocatePage()>
c0024871:	89 c6                	mov    esi,eax
c0024873:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024879:	81 c6 00 10 00 00    	add    esi,0x1000
c002487f:	e8 5b b6 fe ff       	call   c000fedf <Phys::allocatePage()>
c0024884:	39 c6                	cmp    esi,eax
c0024886:	74 10                	je     c0024898 <SATA::open(int, int, void*)+0x6c>
c0024888:	83 ec 0c             	sub    esp,0xc
c002488b:	68 08 cb 02 c0       	push   0xc002cb08
c0024890:	e8 a2 59 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0024895:	83 c4 10             	add    esp,0x10
c0024898:	83 ec 0c             	sub    esp,0xc
c002489b:	6a 02                	push   0x2
c002489d:	e8 7f d2 fe ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00248a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248a8:	e8 04 d4 fe ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c00248ad:	6a 03                	push   0x3
c00248af:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00248b5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00248bb:	50                   	push   eax
c00248bc:	e8 2b d9 fe ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00248c1:	83 c4 14             	add    esp,0x14
c00248c4:	53                   	push   ebx
c00248c5:	e8 a4 fb fe ff       	call   c001446e <PhysicalDisk::startCache()>
c00248ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248cd:	e8 ec 1c ff ff       	call   c00165be <createPartitionsForDisk(PhysicalDisk*)>
c00248d2:	83 c4 14             	add    esp,0x14
c00248d5:	31 c0                	xor    eax,eax
c00248d7:	5b                   	pop    ebx
c00248d8:	5e                   	pop    esi
c00248d9:	c3                   	ret    

c00248da <SATA::SATA()>:
c00248da:	83 ec 0c             	sub    esp,0xc
c00248dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e1:	83 ec 04             	sub    esp,0x4
c00248e4:	68 00 02 00 00       	push   0x200
c00248e9:	68 1c cb 02 c0       	push   0xc002cb1c
c00248ee:	50                   	push   eax
c00248ef:	e8 12 fb fe ff       	call   c0014406 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248f4:	83 c4 10             	add    esp,0x10
c00248f7:	ba 8c cb 02 c0       	mov    edx,0xc002cb8c
c00248fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024900:	89 10                	mov    DWORD PTR [eax],edx
c0024902:	90                   	nop
c0024903:	83 c4 0c             	add    esp,0xc
c0024906:	c3                   	ret    
c0024907:	90                   	nop

c0024908 <SATA::access(unsigned long long, int, void*, bool)>:
c0024908:	55                   	push   ebp
c0024909:	57                   	push   edi
c002490a:	56                   	push   esi
c002490b:	53                   	push   ebx
c002490c:	83 ec 2c             	sub    esp,0x2c
c002490f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024913:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024917:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002491b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002491f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024923:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002492c:	7e 10                	jle    c002493e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002492e:	83 ec 0c             	sub    esp,0xc
c0024931:	68 2c cb 02 c0       	push   0xc002cb2c
c0024936:	e8 fc 58 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002493b:	83 c4 10             	add    esp,0x10
c002493e:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024944:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002494a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024954:	89 f0                	mov    eax,esi
c0024956:	c1 e0 07             	shl    eax,0x7
c0024959:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002495d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024967:	53                   	push   ebx
c0024968:	8d 46 02             	lea    eax,[esi+0x2]
c002496b:	53                   	push   ebx
c002496c:	c1 e0 07             	shl    eax,0x7
c002496f:	bb 01 00 00 00       	mov    ebx,0x1
c0024974:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024978:	50                   	push   eax
c0024979:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002497f:	e8 aa ef ff ff       	call   c002392e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024984:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024988:	83 c4 10             	add    esp,0x10
c002498b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024990:	0f 84 ce 01 00 00    	je     c0024b64 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024996:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002499a:	c1 e0 09             	shl    eax,0x9
c002499d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00249a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00249a6:	74 17                	je     c00249bf <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c00249a8:	51                   	push   ecx
c00249a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00249ad:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00249b1:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00249b7:	e8 88 bd fd ff       	call   c0000744 <memcpy>
c00249bc:	83 c4 10             	add    esp,0x10
c00249bf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00249c5:	8d 46 02             	lea    eax,[esi+0x2]
c00249c8:	c1 e0 07             	shl    eax,0x7
c00249cb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00249cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00249d1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249d7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00249e1:	c1 e1 05             	shl    ecx,0x5
c00249e4:	01 c8                	add    eax,ecx
c00249e6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00249ea:	8a 18                	mov    bl,BYTE PTR [eax]
c00249ec:	83 e1 01             	and    ecx,0x1
c00249ef:	83 e3 bf             	and    ebx,0xffffffbf
c00249f2:	c1 e1 06             	shl    ecx,0x6
c00249f5:	09 d9                	or     ecx,ebx
c00249f7:	88 08                	mov    BYTE PTR [eax],cl
c00249f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249fb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024a01:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024a07:	89 08                	mov    DWORD PTR [eax],ecx
c0024a09:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024a0f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024a15:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024a1b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024a1e:	52                   	push   edx
c0024a1f:	68 90 00 00 00       	push   0x90
c0024a24:	6a 00                	push   0x0
c0024a26:	53                   	push   ebx
c0024a27:	e8 4c bd fd ff       	call   c0000778 <memset>
c0024a2c:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024a32:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024a36:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024a3c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024a40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024a44:	83 c4 10             	add    esp,0x10
c0024a47:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a4a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024a50:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024a56:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a5b:	09 c8                	or     eax,ecx
c0024a5d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024a63:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024a66:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024a6d:	66 25 00 7f          	and    ax,0x7f00
c0024a71:	66 0d 27 80          	or     ax,0x8027
c0024a75:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024a7a:	66 89 03             	mov    WORD PTR [ebx],ax
c0024a7d:	19 c0                	sbb    eax,eax
c0024a7f:	83 e0 f0             	and    eax,0xfffffff0
c0024a82:	83 c0 35             	add    eax,0x35
c0024a85:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024a88:	89 f8                	mov    eax,edi
c0024a8a:	c1 e8 10             	shr    eax,0x10
c0024a8d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024a90:	89 f8                	mov    eax,edi
c0024a92:	c1 e8 18             	shr    eax,0x18
c0024a95:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024a98:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024a9c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024aa3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024aa6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024aaa:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024aae:	89 f3                	mov    ebx,esi
c0024ab0:	31 c0                	xor    eax,eax
c0024ab2:	c1 e3 07             	shl    ebx,0x7
c0024ab5:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ab9:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024abf:	80 e1 88             	and    cl,0x88
c0024ac2:	74 0a                	je     c0024ace <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ac4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ac9:	74 0a                	je     c0024ad5 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024acb:	40                   	inc    eax
c0024acc:	eb eb                	jmp    c0024ab9 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ace:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ad3:	75 0a                	jne    c0024adf <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ad5:	83 ec 0c             	sub    esp,0xc
c0024ad8:	68 65 cb 02 c0       	push   0xc002cb65
c0024add:	eb 56                	jmp    c0024b35 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024adf:	b8 01 00 00 00       	mov    eax,0x1
c0024ae4:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ae8:	c1 e6 07             	shl    esi,0x7
c0024aeb:	d3 e0                	shl    eax,cl
c0024aed:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024af1:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024af7:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024afd:	85 c8                	test   eax,ecx
c0024aff:	74 20                	je     c0024b21 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024b01:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024b07:	0f ba e1 1e          	bt     ecx,0x1e
c0024b0b:	73 ea                	jae    c0024af7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024b0d:	83 ec 0c             	sub    esp,0xc
c0024b10:	31 db                	xor    ebx,ebx
c0024b12:	68 73 cb 02 c0       	push   0xc002cb73
c0024b17:	e8 1b 57 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0024b1c:	83 c4 10             	add    esp,0x10
c0024b1f:	eb 43                	jmp    c0024b64 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b21:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024b27:	0f ba e0 1e          	bt     eax,0x1e
c0024b2b:	73 17                	jae    c0024b44 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024b2d:	83 ec 0c             	sub    esp,0xc
c0024b30:	68 73 cb 02 c0       	push   0xc002cb73
c0024b35:	e8 fd 56 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0024b3a:	bb 01 00 00 00       	mov    ebx,0x1
c0024b3f:	83 c4 10             	add    esp,0x10
c0024b42:	eb 20                	jmp    c0024b64 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b44:	31 db                	xor    ebx,ebx
c0024b46:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024b4b:	75 17                	jne    c0024b64 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b4d:	50                   	push   eax
c0024b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b52:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024b58:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024b5c:	e8 e3 bb fd ff       	call   c0000744 <memcpy>
c0024b61:	83 c4 10             	add    esp,0x10
c0024b64:	83 c4 2c             	add    esp,0x2c
c0024b67:	89 d8                	mov    eax,ebx
c0024b69:	5b                   	pop    ebx
c0024b6a:	5e                   	pop    esi
c0024b6b:	5f                   	pop    edi
c0024b6c:	5d                   	pop    ebp
c0024b6d:	c3                   	ret    

c0024b6e <SATA::read(unsigned long long, int, void*)>:
c0024b6e:	57                   	push   edi
c0024b6f:	b8 04 00 00 00       	mov    eax,0x4
c0024b74:	56                   	push   esi
c0024b75:	53                   	push   ebx
c0024b76:	83 ec 10             	sub    esp,0x10
c0024b79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024b81:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024b84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024b88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024b8c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024b92:	77 3b                	ja     c0024bcf <SATA::read(unsigned long long, int, void*)+0x61>
c0024b94:	b8 06 00 00 00       	mov    eax,0x6
c0024b99:	85 d2                	test   edx,edx
c0024b9b:	74 32                	je     c0024bcf <SATA::read(unsigned long long, int, void*)+0x61>
c0024b9d:	50                   	push   eax
c0024b9e:	50                   	push   eax
c0024b9f:	6a 00                	push   0x0
c0024ba1:	52                   	push   edx
c0024ba2:	53                   	push   ebx
c0024ba3:	57                   	push   edi
c0024ba4:	56                   	push   esi
c0024ba5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ba9:	e8 5a fd ff ff       	call   c0024908 <SATA::access(unsigned long long, int, void*, bool)>
c0024bae:	83 c4 20             	add    esp,0x20
c0024bb1:	85 c0                	test   eax,eax
c0024bb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024bb7:	75 11                	jne    c0024bca <SATA::read(unsigned long long, int, void*)+0x5c>
c0024bb9:	01 1d 28 24 03 c0    	add    DWORD PTR ds:0xc0032428,ebx
c0024bbf:	e8 b2 bd fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0024bc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024bc8:	eb 05                	jmp    c0024bcf <SATA::read(unsigned long long, int, void*)+0x61>
c0024bca:	b8 01 00 00 00       	mov    eax,0x1
c0024bcf:	83 c4 10             	add    esp,0x10
c0024bd2:	5b                   	pop    ebx
c0024bd3:	5e                   	pop    esi
c0024bd4:	5f                   	pop    edi
c0024bd5:	c3                   	ret    

c0024bd6 <SATA::write(unsigned long long, int, void*)>:
c0024bd6:	55                   	push   ebp
c0024bd7:	b8 04 00 00 00       	mov    eax,0x4
c0024bdc:	57                   	push   edi
c0024bdd:	56                   	push   esi
c0024bde:	53                   	push   ebx
c0024bdf:	83 ec 1c             	sub    esp,0x1c
c0024be2:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024be6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024bea:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024bed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024bf1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024bf5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024bfb:	77 56                	ja     c0024c53 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024bfd:	b8 06 00 00 00       	mov    eax,0x6
c0024c02:	85 ff                	test   edi,edi
c0024c04:	74 4d                	je     c0024c53 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024c06:	89 ee                	mov    esi,ebp
c0024c08:	c1 e6 09             	shl    esi,0x9
c0024c0b:	01 fe                	add    esi,edi
c0024c0d:	89 c8                	mov    eax,ecx
c0024c0f:	89 da                	mov    edx,ebx
c0024c11:	83 c0 01             	add    eax,0x1
c0024c14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c18:	83 d2 00             	adc    edx,0x0
c0024c1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024c1f:	50                   	push   eax
c0024c20:	50                   	push   eax
c0024c21:	6a 01                	push   0x1
c0024c23:	57                   	push   edi
c0024c24:	81 c7 00 02 00 00    	add    edi,0x200
c0024c2a:	6a 01                	push   0x1
c0024c2c:	53                   	push   ebx
c0024c2d:	51                   	push   ecx
c0024c2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c32:	e8 d1 fc ff ff       	call   c0024908 <SATA::access(unsigned long long, int, void*, bool)>
c0024c37:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024c3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c3f:	83 c4 20             	add    esp,0x20
c0024c42:	39 f7                	cmp    edi,esi
c0024c44:	75 c7                	jne    c0024c0d <SATA::write(unsigned long long, int, void*)+0x37>
c0024c46:	01 2d 24 24 03 c0    	add    DWORD PTR ds:0xc0032424,ebp
c0024c4c:	e8 25 bd fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0024c51:	31 c0                	xor    eax,eax
c0024c53:	83 c4 1c             	add    esp,0x1c
c0024c56:	5b                   	pop    ebx
c0024c57:	5e                   	pop    esi
c0024c58:	5f                   	pop    edi
c0024c59:	5d                   	pop    ebp
c0024c5a:	c3                   	ret    
c0024c5b:	90                   	nop

c0024c5c <SATAPI::write(unsigned long long, int, void*)>:
c0024c5c:	b8 03 00 00 00       	mov    eax,0x3
c0024c61:	c3                   	ret    

c0024c62 <SATAPI::close(int, int, void*)>:
c0024c62:	83 ec 0c             	sub    esp,0xc
c0024c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c6f:	85 c0                	test   eax,eax
c0024c71:	74 0c                	je     c0024c7f <SATAPI::close(int, int, void*)+0x1d>
c0024c73:	83 ec 0c             	sub    esp,0xc
c0024c76:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c78:	50                   	push   eax
c0024c79:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c7c:	83 c4 10             	add    esp,0x10
c0024c7f:	31 c0                	xor    eax,eax
c0024c81:	83 c4 0c             	add    esp,0xc
c0024c84:	c3                   	ret    
c0024c85:	90                   	nop

c0024c86 <SATAPI::SATAPI()>:
c0024c86:	83 ec 0c             	sub    esp,0xc
c0024c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8d:	83 ec 04             	sub    esp,0x4
c0024c90:	68 00 08 00 00       	push   0x800
c0024c95:	68 bc cb 02 c0       	push   0xc002cbbc
c0024c9a:	50                   	push   eax
c0024c9b:	e8 66 f7 fe ff       	call   c0014406 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ca0:	83 c4 10             	add    esp,0x10
c0024ca3:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c0024ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cac:	89 10                	mov    DWORD PTR [eax],edx
c0024cae:	90                   	nop
c0024caf:	83 c4 0c             	add    esp,0xc
c0024cb2:	c3                   	ret    
c0024cb3:	90                   	nop

c0024cb4 <SATAPI::diskRemoved()>:
c0024cb4:	83 ec 18             	sub    esp,0x18
c0024cb7:	68 c8 cb 02 c0       	push   0xc002cbc8
c0024cbc:	e8 fb de fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0024cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cc5:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024ccc:	83 c4 1c             	add    esp,0x1c
c0024ccf:	c3                   	ret    

c0024cd0 <SATAPI::diskInserted()>:
c0024cd0:	53                   	push   ebx
c0024cd1:	83 ec 14             	sub    esp,0x14
c0024cd4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024cd8:	68 df cb 02 c0       	push   0xc002cbdf
c0024cdd:	e8 da de fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0024ce2:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024ce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cec:	e8 7d f7 fe ff       	call   c001446e <PhysicalDisk::startCache()>
c0024cf1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024cf5:	83 c4 18             	add    esp,0x18
c0024cf8:	5b                   	pop    ebx
c0024cf9:	e9 c0 18 ff ff       	jmp    c00165be <createPartitionsForDisk(PhysicalDisk*)>

c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cfe:	55                   	push   ebp
c0024cff:	57                   	push   edi
c0024d00:	56                   	push   esi
c0024d01:	53                   	push   ebx
c0024d02:	83 ec 24             	sub    esp,0x24
c0024d05:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024d09:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d0d:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024d13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d17:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024d1b:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024d21:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024d24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d2a:	c1 e3 07             	shl    ebx,0x7
c0024d2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d31:	89 f8                	mov    eax,edi
c0024d33:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024d37:	c1 e0 07             	shl    eax,0x7
c0024d3a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d42:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d4c:	53                   	push   ebx
c0024d4d:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024d53:	e8 d6 eb ff ff       	call   c002392e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d5c:	83 c4 10             	add    esp,0x10
c0024d5f:	b8 01 00 00 00       	mov    eax,0x1
c0024d64:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024d69:	0f 84 8a 01 00 00    	je     c0024ef9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024d6f:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d77:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d7d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024d87:	c1 e1 05             	shl    ecx,0x5
c0024d8a:	01 c8                	add    eax,ecx
c0024d8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d8e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d94:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d9a:	89 08                	mov    DWORD PTR [eax],ecx
c0024d9c:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024da2:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024da8:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024dae:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024db1:	52                   	push   edx
c0024db2:	68 90 00 00 00       	push   0x90
c0024db7:	6a 00                	push   0x0
c0024db9:	53                   	push   ebx
c0024dba:	e8 b9 b9 fd ff       	call   c0000778 <memset>
c0024dbf:	83 c4 0c             	add    esp,0xc
c0024dc2:	8d 43 40             	lea    eax,[ebx+0x40]
c0024dc5:	6a 0c                	push   0xc
c0024dc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024dcb:	50                   	push   eax
c0024dcc:	e8 73 b9 fd ff       	call   c0000744 <memcpy>
c0024dd1:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024dd7:	89 ea                	mov    edx,ebp
c0024dd9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ddf:	c1 ea 18             	shr    edx,0x18
c0024de2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024de6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024de9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dec:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024df0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024df6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dfc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e01:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024e05:	09 c8                	or     eax,ecx
c0024e07:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e0b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e11:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e14:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e1b:	66 25 00 7f          	and    ax,0x7f00
c0024e1f:	66 0d 27 80          	or     ax,0x8027
c0024e23:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e26:	89 e8                	mov    eax,ebp
c0024e28:	c1 e8 10             	shr    eax,0x10
c0024e2b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e2e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e32:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e39:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e3c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e40:	83 c4 10             	add    esp,0x10
c0024e43:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024e4b:	31 c0                	xor    eax,eax
c0024e4d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024e53:	80 e1 88             	and    cl,0x88
c0024e56:	74 0a                	je     c0024e62 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024e58:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e5d:	74 0a                	je     c0024e69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e5f:	40                   	inc    eax
c0024e60:	eb eb                	jmp    c0024e4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024e62:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e67:	75 0f                	jne    c0024e78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024e69:	83 ec 0c             	sub    esp,0xc
c0024e6c:	68 65 cb 02 c0       	push   0xc002cb65
c0024e71:	e8 c1 53 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0024e76:	eb 3a                	jmp    c0024eb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024e78:	b8 01 00 00 00       	mov    eax,0x1
c0024e7d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024e81:	c1 e7 07             	shl    edi,0x7
c0024e84:	d3 e0                	shl    eax,cl
c0024e86:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024e89:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024e8f:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024e95:	85 d0                	test   eax,edx
c0024e97:	74 23                	je     c0024ebc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024e99:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024e9f:	0f ba e2 1e          	bt     edx,0x1e
c0024ea3:	73 ea                	jae    c0024e8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024ea5:	83 ec 0c             	sub    esp,0xc
c0024ea8:	68 f7 cb 02 c0       	push   0xc002cbf7
c0024ead:	e8 0a dd fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0024eb2:	83 c4 10             	add    esp,0x10
c0024eb5:	b8 01 00 00 00       	mov    eax,0x1
c0024eba:	eb 3d                	jmp    c0024ef9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024ebc:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024ec2:	0f ba e0 1e          	bt     eax,0x1e
c0024ec6:	73 0a                	jae    c0024ed2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024ec8:	83 ec 0c             	sub    esp,0xc
c0024ecb:	68 0a cc 02 c0       	push   0xc002cc0a
c0024ed0:	eb db                	jmp    c0024ead <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024ed2:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024ed7:	74 1e                	je     c0024ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024ed9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024ede:	74 17                	je     c0024ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024ee0:	50                   	push   eax
c0024ee1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ee5:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024eeb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024eef:	e8 50 b8 fd ff       	call   c0000744 <memcpy>
c0024ef4:	83 c4 10             	add    esp,0x10
c0024ef7:	31 c0                	xor    eax,eax
c0024ef9:	83 c4 1c             	add    esp,0x1c
c0024efc:	5b                   	pop    ebx
c0024efd:	5e                   	pop    esi
c0024efe:	5f                   	pop    edi
c0024eff:	5d                   	pop    ebp
c0024f00:	c3                   	ret    
c0024f01:	90                   	nop

c0024f02 <SATAPI::eject()>:
c0024f02:	57                   	push   edi
c0024f03:	b9 03 00 00 00       	mov    ecx,0x3
c0024f08:	53                   	push   ebx
c0024f09:	83 ec 14             	sub    esp,0x14
c0024f0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024f10:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f14:	fc                   	cld    
c0024f15:	31 c0                	xor    eax,eax
c0024f17:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f19:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024f1e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024f23:	50                   	push   eax
c0024f24:	6a 00                	push   0x0
c0024f26:	6a 00                	push   0x0
c0024f28:	6a 00                	push   0x0
c0024f2a:	6a 00                	push   0x0
c0024f2c:	6a 02                	push   0x2
c0024f2e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f32:	50                   	push   eax
c0024f33:	53                   	push   ebx
c0024f34:	e8 c5 fd ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f39:	83 c4 14             	add    esp,0x14
c0024f3c:	53                   	push   ebx
c0024f3d:	e8 72 fd ff ff       	call   c0024cb4 <SATAPI::diskRemoved()>
c0024f42:	83 c4 24             	add    esp,0x24
c0024f45:	31 c0                	xor    eax,eax
c0024f47:	5b                   	pop    ebx
c0024f48:	5f                   	pop    edi
c0024f49:	c3                   	ret    

c0024f4a <SATAPI::detectMedia()>:
c0024f4a:	56                   	push   esi
c0024f4b:	53                   	push   ebx
c0024f4c:	83 ec 28             	sub    esp,0x28
c0024f4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f53:	6a 0c                	push   0xc
c0024f55:	6a 00                	push   0x0
c0024f57:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f5b:	56                   	push   esi
c0024f5c:	e8 17 b8 fd ff       	call   c0000778 <memset>
c0024f61:	83 c4 0c             	add    esp,0xc
c0024f64:	6a 00                	push   0x0
c0024f66:	6a 00                	push   0x0
c0024f68:	6a 00                	push   0x0
c0024f6a:	6a 00                	push   0x0
c0024f6c:	6a 00                	push   0x0
c0024f6e:	56                   	push   esi
c0024f6f:	53                   	push   ebx
c0024f70:	e8 89 fd ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f75:	83 c4 1c             	add    esp,0x1c
c0024f78:	6a 0c                	push   0xc
c0024f7a:	6a 00                	push   0x0
c0024f7c:	56                   	push   esi
c0024f7d:	e8 f6 b7 fd ff       	call   c0000778 <memset>
c0024f82:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f87:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f8c:	83 c4 0c             	add    esp,0xc
c0024f8f:	6a 01                	push   0x1
c0024f91:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f95:	50                   	push   eax
c0024f96:	6a 00                	push   0x0
c0024f98:	6a 00                	push   0x0
c0024f9a:	6a 12                	push   0x12
c0024f9c:	56                   	push   esi
c0024f9d:	53                   	push   ebx
c0024f9e:	e8 5b fd ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024fa3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024fa7:	83 c4 20             	add    esp,0x20
c0024faa:	83 e0 7f             	and    eax,0x7f
c0024fad:	3c 70                	cmp    al,0x70
c0024faf:	74 15                	je     c0024fc6 <SATAPI::detectMedia()+0x7c>
c0024fb1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fb8:	75 0c                	jne    c0024fc6 <SATAPI::detectMedia()+0x7c>
c0024fba:	83 ec 0c             	sub    esp,0xc
c0024fbd:	53                   	push   ebx
c0024fbe:	e8 0d fd ff ff       	call   c0024cd0 <SATAPI::diskInserted()>
c0024fc3:	83 c4 10             	add    esp,0x10
c0024fc6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024fca:	83 e0 0f             	and    eax,0xf
c0024fcd:	3c 02                	cmp    al,0x2
c0024fcf:	75 1b                	jne    c0024fec <SATAPI::detectMedia()+0xa2>
c0024fd1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024fd6:	75 2d                	jne    c0025005 <SATAPI::detectMedia()+0xbb>
c0024fd8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fdf:	74 24                	je     c0025005 <SATAPI::detectMedia()+0xbb>
c0024fe1:	83 ec 0c             	sub    esp,0xc
c0024fe4:	53                   	push   ebx
c0024fe5:	e8 ca fc ff ff       	call   c0024cb4 <SATAPI::diskRemoved()>
c0024fea:	eb 16                	jmp    c0025002 <SATAPI::detectMedia()+0xb8>
c0024fec:	84 c0                	test   al,al
c0024fee:	75 15                	jne    c0025005 <SATAPI::detectMedia()+0xbb>
c0024ff0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ff7:	75 0c                	jne    c0025005 <SATAPI::detectMedia()+0xbb>
c0024ff9:	83 ec 0c             	sub    esp,0xc
c0024ffc:	53                   	push   ebx
c0024ffd:	e8 ce fc ff ff       	call   c0024cd0 <SATAPI::diskInserted()>
c0025002:	83 c4 10             	add    esp,0x10
c0025005:	83 c4 24             	add    esp,0x24
c0025008:	5b                   	pop    ebx
c0025009:	5e                   	pop    esi
c002500a:	c3                   	ret    
c002500b:	90                   	nop

c002500c <SATAPI::open(int, int, void*)>:
c002500c:	56                   	push   esi
c002500d:	53                   	push   ebx
c002500e:	50                   	push   eax
c002500f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025017:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025021:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025027:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025031:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025035:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002503f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025045:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002504c:	e8 8e ae fe ff       	call   c000fedf <Phys::allocatePage()>
c0025051:	89 c6                	mov    esi,eax
c0025053:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025059:	81 c6 00 10 00 00    	add    esi,0x1000
c002505f:	e8 7b ae fe ff       	call   c000fedf <Phys::allocatePage()>
c0025064:	39 c6                	cmp    esi,eax
c0025066:	74 10                	je     c0025078 <SATAPI::open(int, int, void*)+0x6c>
c0025068:	83 ec 0c             	sub    esp,0xc
c002506b:	68 1f cc 02 c0       	push   0xc002cc1f
c0025070:	e8 c2 51 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0025075:	83 c4 10             	add    esp,0x10
c0025078:	83 ec 0c             	sub    esp,0xc
c002507b:	6a 02                	push   0x2
c002507d:	e8 9f ca fe ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0025082:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025088:	e8 24 cc fe ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c002508d:	6a 03                	push   0x3
c002508f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025095:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002509b:	50                   	push   eax
c002509c:	e8 4b d1 fe ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00250a1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00250a8:	83 c4 14             	add    esp,0x14
c00250ab:	53                   	push   ebx
c00250ac:	e8 99 fe ff ff       	call   c0024f4a <SATAPI::detectMedia()>
c00250b1:	83 c4 14             	add    esp,0x14
c00250b4:	31 c0                	xor    eax,eax
c00250b6:	5b                   	pop    ebx
c00250b7:	5e                   	pop    esi
c00250b8:	c3                   	ret    
c00250b9:	90                   	nop

c00250ba <SATAPI::read(unsigned long long, int, void*)>:
c00250ba:	55                   	push   ebp
c00250bb:	57                   	push   edi
c00250bc:	56                   	push   esi
c00250bd:	53                   	push   ebx
c00250be:	83 ec 1c             	sub    esp,0x1c
c00250c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00250c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250cd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250d4:	74 19                	je     c00250ef <SATAPI::read(unsigned long long, int, void*)+0x35>
c00250d6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00250db:	7e 2e                	jle    c002510b <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250dd:	83 ec 0c             	sub    esp,0xc
c00250e0:	68 35 cc 02 c0       	push   0xc002cc35
c00250e5:	e8 4d 51 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c00250ea:	83 c4 10             	add    esp,0x10
c00250ed:	eb 1c                	jmp    c002510b <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250ef:	83 ec 0c             	sub    esp,0xc
c00250f2:	55                   	push   ebp
c00250f3:	e8 52 fe ff ff       	call   c0024f4a <SATAPI::detectMedia()>
c00250f8:	83 c4 10             	add    esp,0x10
c00250fb:	b8 02 00 00 00       	mov    eax,0x2
c0025100:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025107:	75 cd                	jne    c00250d6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025109:	eb 49                	jmp    c0025154 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002510b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002510f:	b9 03 00 00 00       	mov    ecx,0x3
c0025114:	fc                   	cld    
c0025115:	31 c0                	xor    eax,eax
c0025117:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025119:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002511e:	89 d8                	mov    eax,ebx
c0025120:	86 e0                	xchg   al,ah
c0025122:	c1 c0 10             	rol    eax,0x10
c0025125:	86 e0                	xchg   al,ah
c0025127:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002512b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002512f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025133:	50                   	push   eax
c0025134:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025138:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002513c:	56                   	push   esi
c002513d:	53                   	push   ebx
c002513e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025142:	c1 e0 0b             	shl    eax,0xb
c0025145:	50                   	push   eax
c0025146:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002514a:	50                   	push   eax
c002514b:	55                   	push   ebp
c002514c:	e8 ad fb ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025151:	83 c4 20             	add    esp,0x20
c0025154:	83 c4 1c             	add    esp,0x1c
c0025157:	5b                   	pop    ebx
c0025158:	5e                   	pop    esi
c0025159:	5f                   	pop    edi
c002515a:	5d                   	pop    ebp
c002515b:	c3                   	ret    

c002515c <AVX::open(int, int, void*)>:
c002515c:	83 ec 0c             	sub    esp,0xc
c002515f:	e8 44 11 00 00       	call   c00262a8 <avxInit>
c0025164:	b8 00 00 00 00       	mov    eax,0x0
c0025169:	83 c4 0c             	add    esp,0xc
c002516c:	c3                   	ret    
c002516d:	90                   	nop

c002516e <AVX::close(int, int, void*)>:
c002516e:	83 ec 0c             	sub    esp,0xc
c0025171:	e8 33 11 00 00       	call   c00262a9 <avxClose>
c0025176:	b8 00 00 00 00       	mov    eax,0x0
c002517b:	83 c4 0c             	add    esp,0xc
c002517e:	c3                   	ret    
c002517f:	90                   	nop

c0025180 <AVX::available()>:
c0025180:	83 ec 0c             	sub    esp,0xc
c0025183:	e8 18 11 00 00       	call   c00262a0 <avxDetect>
c0025188:	85 c0                	test   eax,eax
c002518a:	0f 95 c0             	setne  al
c002518d:	83 c4 0c             	add    esp,0xc
c0025190:	c3                   	ret    
c0025191:	90                   	nop

c0025192 <AVX::save(void*)>:
c0025192:	83 ec 0c             	sub    esp,0xc
c0025195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025199:	83 ec 0c             	sub    esp,0xc
c002519c:	50                   	push   eax
c002519d:	e8 04 11 00 00       	call   c00262a6 <avxSave>
c00251a2:	83 c4 10             	add    esp,0x10
c00251a5:	90                   	nop
c00251a6:	83 c4 0c             	add    esp,0xc
c00251a9:	c3                   	ret    

c00251aa <AVX::load(void*)>:
c00251aa:	83 ec 0c             	sub    esp,0xc
c00251ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251b1:	83 ec 0c             	sub    esp,0xc
c00251b4:	50                   	push   eax
c00251b5:	e8 ed 10 00 00       	call   c00262a7 <avxLoad>
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	90                   	nop
c00251be:	83 c4 0c             	add    esp,0xc
c00251c1:	c3                   	ret    

c00251c2 <AVX::AVX()>:
c00251c2:	83 ec 0c             	sub    esp,0xc
c00251c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c9:	83 ec 08             	sub    esp,0x8
c00251cc:	68 98 cc 02 c0       	push   0xc002cc98
c00251d1:	50                   	push   eax
c00251d2:	e8 0d f3 fe ff       	call   c00144e4 <FPU::FPU(char const*)>
c00251d7:	83 c4 10             	add    esp,0x10
c00251da:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c00251df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e3:	89 10                	mov    DWORD PTR [eax],edx
c00251e5:	90                   	nop
c00251e6:	83 c4 0c             	add    esp,0xc
c00251e9:	c3                   	ret    

c00251ea <MMX::available()>:
c00251ea:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00251ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251f5:	83 e0 20             	and    eax,0x20
c00251f8:	84 c0                	test   al,al
c00251fa:	0f 95 c0             	setne  al
c00251fd:	c3                   	ret    

c00251fe <MMX::open(int, int, void*)>:
c00251fe:	83 ec 0c             	sub    esp,0xc
c0025201:	e8 26 11 00 00       	call   c002632c <x87Init>
c0025206:	b8 00 00 00 00       	mov    eax,0x0
c002520b:	83 c4 0c             	add    esp,0xc
c002520e:	c3                   	ret    
c002520f:	90                   	nop

c0025210 <MMX::close(int, int, void*)>:
c0025210:	83 ec 0c             	sub    esp,0xc
c0025213:	e8 2e 11 00 00       	call   c0026346 <x87Close>
c0025218:	b8 00 00 00 00       	mov    eax,0x0
c002521d:	83 c4 0c             	add    esp,0xc
c0025220:	c3                   	ret    
c0025221:	90                   	nop

c0025222 <MMX::save(void*)>:
c0025222:	83 ec 0c             	sub    esp,0xc
c0025225:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025229:	83 ec 0c             	sub    esp,0xc
c002522c:	50                   	push   eax
c002522d:	e8 ef 10 00 00       	call   c0026321 <x87Save>
c0025232:	83 c4 10             	add    esp,0x10
c0025235:	90                   	nop
c0025236:	83 c4 0c             	add    esp,0xc
c0025239:	c3                   	ret    

c002523a <MMX::load(void*)>:
c002523a:	83 ec 0c             	sub    esp,0xc
c002523d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025241:	83 ec 0c             	sub    esp,0xc
c0025244:	50                   	push   eax
c0025245:	e8 dd 10 00 00       	call   c0026327 <x87Load>
c002524a:	83 c4 10             	add    esp,0x10
c002524d:	90                   	nop
c002524e:	83 c4 0c             	add    esp,0xc
c0025251:	c3                   	ret    

c0025252 <MMX::MMX()>:
c0025252:	83 ec 0c             	sub    esp,0xc
c0025255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025259:	83 ec 08             	sub    esp,0x8
c002525c:	68 d8 cc 02 c0       	push   0xc002ccd8
c0025261:	50                   	push   eax
c0025262:	e8 7d f2 fe ff       	call   c00144e4 <FPU::FPU(char const*)>
c0025267:	83 c4 10             	add    esp,0x10
c002526a:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c002526f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025273:	89 10                	mov    DWORD PTR [eax],edx
c0025275:	90                   	nop
c0025276:	83 c4 0c             	add    esp,0xc
c0025279:	c3                   	ret    

c002527a <SSE::open(int, int, void*)>:
c002527a:	83 ec 0c             	sub    esp,0xc
c002527d:	e8 62 10 00 00       	call   c00262e4 <sseInit>
c0025282:	b8 00 00 00 00       	mov    eax,0x0
c0025287:	83 c4 0c             	add    esp,0xc
c002528a:	c3                   	ret    
c002528b:	90                   	nop

c002528c <SSE::close(int, int, void*)>:
c002528c:	83 ec 0c             	sub    esp,0xc
c002528f:	e8 60 10 00 00       	call   c00262f4 <sseClose>
c0025294:	b8 00 00 00 00       	mov    eax,0x0
c0025299:	83 c4 0c             	add    esp,0xc
c002529c:	c3                   	ret    
c002529d:	90                   	nop

c002529e <SSE::available()>:
c002529e:	83 ec 1c             	sub    esp,0x1c
c00252a1:	e8 1a 10 00 00       	call   c00262c0 <absolutelyNoChanceInHell>
c00252a6:	85 c0                	test   eax,eax
c00252a8:	0f 95 c0             	setne  al
c00252ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00252b3:	83 c4 1c             	add    esp,0x1c
c00252b6:	c3                   	ret    
c00252b7:	90                   	nop

c00252b8 <SSE::save(void*)>:
c00252b8:	83 ec 0c             	sub    esp,0xc
c00252bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252bf:	83 ec 0c             	sub    esp,0xc
c00252c2:	50                   	push   eax
c00252c3:	e8 10 10 00 00       	call   c00262d8 <sseSave>
c00252c8:	83 c4 10             	add    esp,0x10
c00252cb:	90                   	nop
c00252cc:	83 c4 0c             	add    esp,0xc
c00252cf:	c3                   	ret    

c00252d0 <SSE::load(void*)>:
c00252d0:	83 ec 0c             	sub    esp,0xc
c00252d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252d7:	83 ec 0c             	sub    esp,0xc
c00252da:	50                   	push   eax
c00252db:	e8 fe 0f 00 00       	call   c00262de <sseLoad>
c00252e0:	83 c4 10             	add    esp,0x10
c00252e3:	90                   	nop
c00252e4:	83 c4 0c             	add    esp,0xc
c00252e7:	c3                   	ret    

c00252e8 <SSE::SSE()>:
c00252e8:	83 ec 0c             	sub    esp,0xc
c00252eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ef:	83 ec 08             	sub    esp,0x8
c00252f2:	68 18 cd 02 c0       	push   0xc002cd18
c00252f7:	50                   	push   eax
c00252f8:	e8 e7 f1 fe ff       	call   c00144e4 <FPU::FPU(char const*)>
c00252fd:	83 c4 10             	add    esp,0x10
c0025300:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0025305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025309:	89 10                	mov    DWORD PTR [eax],edx
c002530b:	90                   	nop
c002530c:	83 c4 0c             	add    esp,0xc
c002530f:	c3                   	ret    

c0025310 <x87::open(int, int, void*)>:
c0025310:	83 ec 0c             	sub    esp,0xc
c0025313:	e8 14 10 00 00       	call   c002632c <x87Init>
c0025318:	b8 00 00 00 00       	mov    eax,0x0
c002531d:	83 c4 0c             	add    esp,0xc
c0025320:	c3                   	ret    
c0025321:	90                   	nop

c0025322 <x87::close(int, int, void*)>:
c0025322:	83 ec 0c             	sub    esp,0xc
c0025325:	e8 1c 10 00 00       	call   c0026346 <x87Close>
c002532a:	b8 00 00 00 00       	mov    eax,0x0
c002532f:	83 c4 0c             	add    esp,0xc
c0025332:	c3                   	ret    
c0025333:	90                   	nop

c0025334 <x87::available()>:
c0025334:	83 ec 0c             	sub    esp,0xc
c0025337:	e8 ca 0f 00 00       	call   c0026306 <x87Detect>
c002533c:	85 c0                	test   eax,eax
c002533e:	0f 95 c0             	setne  al
c0025341:	83 c4 0c             	add    esp,0xc
c0025344:	c3                   	ret    
c0025345:	90                   	nop

c0025346 <x87::save(void*)>:
c0025346:	83 ec 0c             	sub    esp,0xc
c0025349:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002534d:	83 ec 0c             	sub    esp,0xc
c0025350:	50                   	push   eax
c0025351:	e8 cb 0f 00 00       	call   c0026321 <x87Save>
c0025356:	83 c4 10             	add    esp,0x10
c0025359:	90                   	nop
c002535a:	83 c4 0c             	add    esp,0xc
c002535d:	c3                   	ret    

c002535e <x87::load(void*)>:
c002535e:	83 ec 0c             	sub    esp,0xc
c0025361:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025365:	83 ec 0c             	sub    esp,0xc
c0025368:	50                   	push   eax
c0025369:	e8 b9 0f 00 00       	call   c0026327 <x87Load>
c002536e:	83 c4 10             	add    esp,0x10
c0025371:	90                   	nop
c0025372:	83 c4 0c             	add    esp,0xc
c0025375:	c3                   	ret    

c0025376 <x87::x87()>:
c0025376:	83 ec 0c             	sub    esp,0xc
c0025379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537d:	83 ec 08             	sub    esp,0x8
c0025380:	68 58 cd 02 c0       	push   0xc002cd58
c0025385:	50                   	push   eax
c0025386:	e8 59 f1 fe ff       	call   c00144e4 <FPU::FPU(char const*)>
c002538b:	83 c4 10             	add    esp,0x10
c002538e:	ba 68 cd 02 c0       	mov    edx,0xc002cd68
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	89 10                	mov    DWORD PTR [eax],edx
c0025399:	90                   	nop
c002539a:	83 c4 0c             	add    esp,0xc
c002539d:	c3                   	ret    

c002539e <APIC::disable()>:
c002539e:	90                   	nop
c002539f:	c3                   	ret    

c00253a0 <APIC::close(int, int, void*)>:
c00253a0:	55                   	push   ebp
c00253a1:	89 e5                	mov    ebp,esp
c00253a3:	83 ec 08             	sub    esp,0x8
c00253a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00253ab:	83 c0 3c             	add    eax,0x3c
c00253ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253b6:	ff d0                	call   eax
c00253b8:	83 c4 10             	add    esp,0x10
c00253bb:	b8 00 00 00 00       	mov    eax,0x0
c00253c0:	c9                   	leave  
c00253c1:	c3                   	ret    

c00253c2 <IOAPIC::close(int, int, void*)>:
c00253c2:	b8 00 00 00 00       	mov    eax,0x0
c00253c7:	c3                   	ret    

c00253c8 <APIC::io_wait()>:
c00253c8:	eb 00                	jmp    c00253ca <APIC::io_wait()+0x2>
c00253ca:	eb 00                	jmp    c00253cc <APIC::io_wait()+0x4>
c00253cc:	90                   	nop
c00253cd:	c3                   	ret    

c00253ce <APIC::getBase()>:
c00253ce:	55                   	push   ebp
c00253cf:	89 e5                	mov    ebp,esp
c00253d1:	83 ec 18             	sub    esp,0x18
c00253d4:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00253d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253df:	83 e0 08             	and    eax,0x8
c00253e2:	84 c0                	test   al,al
c00253e4:	75 07                	jne    c00253ed <APIC::getBase()+0x1f>
c00253e6:	b8 00 00 00 00       	mov    eax,0x0
c00253eb:	eb 21                	jmp    c002540e <APIC::getBase()+0x40>
c00253ed:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c00253f2:	83 ec 08             	sub    esp,0x8
c00253f5:	6a 1b                	push   0x1b
c00253f7:	50                   	push   eax
c00253f8:	e8 eb 99 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00253fd:	83 c4 10             	add    esp,0x10
c0025400:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025403:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025406:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025409:	25 00 f0 ff ff       	and    eax,0xfffff000
c002540e:	c9                   	leave  
c002540f:	c3                   	ret    

c0025410 <APIC::eoi(unsigned char)>:
c0025410:	55                   	push   ebp
c0025411:	89 e5                	mov    ebp,esp
c0025413:	83 ec 28             	sub    esp,0x28
c0025416:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025419:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025422:	e8 a7 ff ff ff       	call   c00253ce <APIC::getBase()>
c0025427:	83 c4 10             	add    esp,0x10
c002542a:	05 b0 00 00 00       	add    eax,0xb0
c002542f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025435:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002543b:	90                   	nop
c002543c:	c9                   	leave  
c002543d:	c3                   	ret    

c002543e <APIC::open(int, int, void*)>:
c002543e:	55                   	push   ebp
c002543f:	89 e5                	mov    ebp,esp
c0025441:	57                   	push   edi
c0025442:	56                   	push   esi
c0025443:	53                   	push   ebx
c0025444:	83 ec 2c             	sub    esp,0x2c
c0025447:	83 ec 0c             	sub    esp,0xc
c002544a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002544d:	e8 7c ff ff ff       	call   c00253ce <APIC::getBase()>
c0025452:	83 c4 10             	add    esp,0x10
c0025455:	89 c2                	mov    edx,eax
c0025457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002545a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025460:	0f b6 f8             	movzx  edi,al
c0025463:	89 d0                	mov    eax,edx
c0025465:	ba 00 00 00 00       	mov    edx,0x0
c002546a:	89 c1                	mov    ecx,eax
c002546c:	80 e5 ff             	and    ch,0xff
c002546f:	89 cb                	mov    ebx,ecx
c0025471:	0f b6 f2             	movzx  esi,dl
c0025474:	89 d8                	mov    eax,ebx
c0025476:	89 f2                	mov    edx,esi
c0025478:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002547b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002547e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025482:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025486:	83 e0 00             	and    eax,0x0
c0025489:	09 d0                	or     eax,edx
c002548b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002548f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025492:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025498:	8d 50 01             	lea    edx,[eax+0x1]
c002549b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002549e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00254a4:	0f b6 d0             	movzx  edx,al
c00254a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254aa:	83 c2 08             	add    edx,0x8
c00254ad:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00254b1:	0f b6 c9             	movzx  ecx,cl
c00254b4:	81 c9 00 00 01 00    	or     ecx,0x10000
c00254ba:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00254be:	83 ec 0c             	sub    esp,0xc
c00254c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254c4:	e8 05 ff ff ff       	call   c00253ce <APIC::getBase()>
c00254c9:	83 c4 10             	add    esp,0x10
c00254cc:	05 f0 00 00 00       	add    eax,0xf0
c00254d1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00254d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00254d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00254dc:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00254e3:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254ed:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254f0:	89 10                	mov    DWORD PTR [eax],edx
c00254f2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254f9:	a1 b0 09 03 c0       	mov    eax,ds:0xc00309b0
c00254fe:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025501:	7d 7c                	jge    c002557f <APIC::open(int, int, void*)+0x141>
c0025503:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025506:	8b 04 85 c0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf640]
c002550d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025510:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025513:	8b 04 85 c0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf640]
c002551a:	c1 e8 08             	shr    eax,0x8
c002551d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025521:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025524:	8b 04 85 c0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf640]
c002552b:	c1 e8 18             	shr    eax,0x18
c002552e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025531:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025535:	75 40                	jne    c0025577 <APIC::open(int, int, void*)+0x139>
c0025537:	83 ec 0c             	sub    esp,0xc
c002553a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002553d:	e8 8c fe ff ff       	call   c00253ce <APIC::getBase()>
c0025542:	83 c4 10             	add    esp,0x10
c0025545:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025549:	75 07                	jne    c0025552 <APIC::open(int, int, void*)+0x114>
c002554b:	ba 60 03 00 00       	mov    edx,0x360
c0025550:	eb 05                	jmp    c0025557 <APIC::open(int, int, void*)+0x119>
c0025552:	ba 50 03 00 00       	mov    edx,0x350
c0025557:	01 d0                	add    eax,edx
c0025559:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002555c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002555f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025561:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025564:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002556b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002556f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025572:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025575:	89 10                	mov    DWORD PTR [eax],edx
c0025577:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002557a:	e9 7a ff ff ff       	jmp    c00254f9 <APIC::open(int, int, void*)+0xbb>
c002557f:	b8 00 00 00 00       	mov    eax,0x0
c0025584:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025587:	5b                   	pop    ebx
c0025588:	5e                   	pop    esi
c0025589:	5f                   	pop    edi
c002558a:	5d                   	pop    ebp
c002558b:	c3                   	ret    

c002558c <IOAPIC::IOAPIC()>:
c002558c:	83 ec 0c             	sub    esp,0xc
c002558f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025593:	83 ec 08             	sub    esp,0x8
c0025596:	68 98 cd 02 c0       	push   0xc002cd98
c002559b:	50                   	push   eax
c002559c:	e8 31 ec fe ff       	call   c00141d2 <Device::Device(char const*)>
c00255a1:	83 c4 10             	add    esp,0x10
c00255a4:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c00255a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ad:	89 10                	mov    DWORD PTR [eax],edx
c00255af:	90                   	nop
c00255b0:	83 c4 0c             	add    esp,0xc
c00255b3:	c3                   	ret    

c00255b4 <APIC::APIC()>:
c00255b4:	53                   	push   ebx
c00255b5:	83 ec 18             	sub    esp,0x18
c00255b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255bc:	83 ec 08             	sub    esp,0x8
c00255bf:	68 a0 cd 02 c0       	push   0xc002cda0
c00255c4:	50                   	push   eax
c00255c5:	e8 74 f3 fe ff       	call   c001493e <InterruptController::InterruptController(char const*)>
c00255ca:	83 c4 10             	add    esp,0x10
c00255cd:	ba 78 ce 02 c0       	mov    edx,0xc002ce78
c00255d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255d6:	89 10                	mov    DWORD PTR [eax],edx
c00255d8:	a0 80 24 03 c0       	mov    al,ds:0xc0032480
c00255dd:	83 f0 01             	xor    eax,0x1
c00255e0:	84 c0                	test   al,al
c00255e2:	0f 84 a1 00 00 00    	je     c0025689 <APIC::APIC()+0xd5>
c00255e8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255ed:	a0 60 0a 03 c0       	mov    al,ds:0xc0030a60
c00255f2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255f6:	0f 83 86 00 00 00    	jae    c0025682 <APIC::APIC()+0xce>
c00255fc:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025604:	83 ec 0c             	sub    esp,0xc
c0025607:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002560b:	e8 30 a2 fe ff       	call   c000f840 <malloc>
c0025610:	83 c4 10             	add    esp,0x10
c0025613:	89 c3                	mov    ebx,eax
c0025615:	83 ec 0c             	sub    esp,0xc
c0025618:	53                   	push   ebx
c0025619:	e8 6e ff ff ff       	call   c002558c <IOAPIC::IOAPIC()>
c002561e:	83 c4 10             	add    esp,0x10
c0025621:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025625:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002562a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002562e:	89 14 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],edx
c0025635:	a1 40 24 03 c0       	mov    eax,ds:0xc0032440
c002563a:	40                   	inc    eax
c002563b:	a3 40 24 03 c0       	mov    ds:0xc0032440,eax
c0025640:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0025645:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002564b:	83 ec 08             	sub    esp,0x8
c002564e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025652:	50                   	push   eax
c0025653:	e8 8a e9 fe ff       	call   c0013fe2 <Device::addChild(Device*)>
c0025658:	83 c4 10             	add    esp,0x10
c002565b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002565f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025661:	83 c0 08             	add    eax,0x8
c0025664:	8b 00                	mov    eax,DWORD PTR [eax]
c0025666:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002566b:	6a 00                	push   0x0
c002566d:	6a 00                	push   0x0
c002566f:	52                   	push   edx
c0025670:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025674:	ff d0                	call   eax
c0025676:	83 c4 10             	add    esp,0x10
c0025679:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002567d:	e9 6b ff ff ff       	jmp    c00255ed <APIC::APIC()+0x39>
c0025682:	c6 05 80 24 03 c0 01 	mov    BYTE PTR ds:0xc0032480,0x1
c0025689:	90                   	nop
c002568a:	83 c4 18             	add    esp,0x18
c002568d:	5b                   	pop    ebx
c002568e:	c3                   	ret    
c002568f:	90                   	nop

c0025690 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025690:	55                   	push   ebp
c0025691:	89 e5                	mov    ebp,esp
c0025693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025696:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002569c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002569f:	72 1d                	jb     c00256be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00256a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00256aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ad:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00256b3:	01 d0                	add    eax,edx
c00256b5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00256b8:	73 04                	jae    c00256be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00256ba:	b0 01                	mov    al,0x1
c00256bc:	eb 02                	jmp    c00256c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00256be:	b0 00                	mov    al,0x0
c00256c0:	5d                   	pop    ebp
c00256c1:	c3                   	ret    

c00256c2 <IOAPIC::read(int)>:
c00256c2:	55                   	push   ebp
c00256c3:	89 e5                	mov    ebp,esp
c00256c5:	83 ec 10             	sub    esp,0x10
c00256c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256d1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256d7:	0f b6 d0             	movzx  edx,al
c00256da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256dd:	89 10                	mov    DWORD PTR [eax],edx
c00256df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256e2:	83 c0 10             	add    eax,0x10
c00256e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e7:	c9                   	leave  
c00256e8:	c3                   	ret    
c00256e9:	90                   	nop

c00256ea <IOAPIC::open(int, int, void*)>:
c00256ea:	55                   	push   ebp
c00256eb:	89 e5                	mov    ebp,esp
c00256ed:	57                   	push   edi
c00256ee:	56                   	push   esi
c00256ef:	53                   	push   ebx
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	83 ec 0c             	sub    esp,0xc
c00256f6:	68 cb cd 02 c0       	push   0xc002cdcb
c00256fb:	e8 bc d4 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0025700:	83 c4 10             	add    esp,0x10
c0025703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025706:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025709:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002570f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025712:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025718:	8b 14 85 a0 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf560]
c002571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025722:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002572b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025731:	8b 14 85 20 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf4e0]
c0025738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002573b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025744:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002574a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025753:	0f b6 f8             	movzx  edi,al
c0025756:	89 d0                	mov    eax,edx
c0025758:	ba 00 00 00 00       	mov    edx,0x0
c002575d:	89 c1                	mov    ecx,eax
c002575f:	80 e5 ff             	and    ch,0xff
c0025762:	89 cb                	mov    ebx,ecx
c0025764:	0f b6 f2             	movzx  esi,dl
c0025767:	89 d8                	mov    eax,ebx
c0025769:	89 f2                	mov    edx,esi
c002576b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002576e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025771:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025775:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025779:	83 e0 00             	and    eax,0x0
c002577c:	09 d0                	or     eax,edx
c002577e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025785:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002578b:	8d 50 01             	lea    edx,[eax+0x1]
c002578e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025791:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025797:	0f b6 d0             	movzx  edx,al
c002579a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002579d:	83 c2 08             	add    edx,0x8
c00257a0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257a4:	0f b6 c9             	movzx  ecx,cl
c00257a7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00257ad:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257b1:	83 ec 08             	sub    esp,0x8
c00257b4:	6a 01                	push   0x1
c00257b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257b9:	e8 04 ff ff ff       	call   c00256c2 <IOAPIC::read(int)>
c00257be:	83 c4 10             	add    esp,0x10
c00257c1:	c1 f8 10             	sar    eax,0x10
c00257c4:	0f b6 c0             	movzx  eax,al
c00257c7:	8d 50 01             	lea    edx,[eax+0x1]
c00257ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00257d3:	b8 00 00 00 00       	mov    eax,0x0
c00257d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257db:	5b                   	pop    ebx
c00257dc:	5e                   	pop    esi
c00257dd:	5f                   	pop    edi
c00257de:	5d                   	pop    ebp
c00257df:	c3                   	ret    

c00257e0 <IOAPIC::write(int, int)>:
c00257e0:	55                   	push   ebp
c00257e1:	89 e5                	mov    ebp,esp
c00257e3:	83 ec 10             	sub    esp,0x10
c00257e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257f5:	0f b6 d0             	movzx  edx,al
c00257f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257fb:	89 10                	mov    DWORD PTR [eax],edx
c00257fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025800:	8d 50 10             	lea    edx,[eax+0x10]
c0025803:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025806:	89 02                	mov    DWORD PTR [edx],eax
c0025808:	90                   	nop
c0025809:	c9                   	leave  
c002580a:	c3                   	ret    
c002580b:	90                   	nop

c002580c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002580c:	55                   	push   ebp
c002580d:	89 e5                	mov    ebp,esp
c002580f:	53                   	push   ebx
c0025810:	83 ec 2c             	sub    esp,0x2c
c0025813:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025816:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025819:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002581c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002581f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025822:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025825:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025828:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002582b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002582e:	88 d8                	mov    al,bl
c0025830:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025833:	88 c8                	mov    al,cl
c0025835:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025838:	88 d0                	mov    al,dl
c002583a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002583d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025841:	83 c0 08             	add    eax,0x8
c0025844:	01 c0                	add    eax,eax
c0025846:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025849:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002584d:	83 c0 08             	add    eax,0x8
c0025850:	01 c0                	add    eax,eax
c0025852:	40                   	inc    eax
c0025853:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025856:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025859:	50                   	push   eax
c002585a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585d:	e8 60 fe ff ff       	call   c00256c2 <IOAPIC::read(int)>
c0025862:	83 c4 08             	add    esp,0x8
c0025865:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025868:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002586f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025872:	c1 e0 18             	shl    eax,0x18
c0025875:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025878:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002587b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002587e:	52                   	push   edx
c002587f:	50                   	push   eax
c0025880:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025883:	e8 58 ff ff ff       	call   c00257e0 <IOAPIC::write(int, int)>
c0025888:	83 c4 0c             	add    esp,0xc
c002588b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002588e:	50                   	push   eax
c002588f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025892:	e8 2b fe ff ff       	call   c00256c2 <IOAPIC::read(int)>
c0025897:	83 c4 08             	add    esp,0x8
c002589a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002589d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00258a4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00258ab:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00258b2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258b6:	74 09                	je     c00258c1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00258b8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00258bf:	eb 07                	jmp    c00258c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00258c1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00258c8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00258cc:	74 09                	je     c00258d7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00258ce:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00258d5:	eb 07                	jmp    c00258de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00258d7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00258de:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00258e5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00258e9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258f2:	52                   	push   edx
c00258f3:	50                   	push   eax
c00258f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258f7:	e8 e4 fe ff ff       	call   c00257e0 <IOAPIC::write(int, int)>
c00258fc:	83 c4 0c             	add    esp,0xc
c00258ff:	90                   	nop
c0025900:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025903:	c9                   	leave  
c0025904:	c3                   	ret    
c0025905:	90                   	nop

c0025906 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025906:	55                   	push   ebp
c0025907:	89 e5                	mov    ebp,esp
c0025909:	57                   	push   edi
c002590a:	56                   	push   esi
c002590b:	53                   	push   ebx
c002590c:	83 ec 2c             	sub    esp,0x2c
c002590f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025912:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025915:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025919:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002591d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025921:	74 5a                	je     c002597d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025923:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025927:	7f 44                	jg     c002596d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025929:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002592c:	05 20 d3 02 c0       	add    eax,0xc002d320
c0025931:	8a 00                	mov    al,BYTE PTR [eax]
c0025933:	0f b6 c0             	movzx  eax,al
c0025936:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025939:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002593c:	66 8b 84 00 40 0a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf5c0]
c0025944:	0f b7 c0             	movzx  eax,ax
c0025947:	83 e0 02             	and    eax,0x2
c002594a:	85 c0                	test   eax,eax
c002594c:	74 04                	je     c0025952 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002594e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025952:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025955:	66 8b 84 00 40 0a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf5c0]
c002595d:	0f b7 c0             	movzx  eax,ax
c0025960:	83 e0 08             	and    eax,0x8
c0025963:	85 c0                	test   eax,eax
c0025965:	74 16                	je     c002597d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025967:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002596b:	eb 10                	jmp    c002597d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002596d:	83 ec 0c             	sub    esp,0xc
c0025970:	68 dc cd 02 c0       	push   0xc002cddc
c0025975:	e8 bd 48 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025981:	a1 40 24 03 c0       	mov    eax,ds:0xc0032440
c0025986:	83 ec 08             	sub    esp,0x8
c0025989:	50                   	push   eax
c002598a:	68 14 ce 02 c0       	push   0xc002ce14
c002598f:	e8 28 d2 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0025994:	83 c4 10             	add    esp,0x10
c0025997:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002599e:	a1 40 24 03 c0       	mov    eax,ds:0xc0032440
c00259a3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00259a6:	7d 67                	jge    c0025a0f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259ab:	8b 04 85 60 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdba0]
c00259b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259b5:	83 ec 08             	sub    esp,0x8
c00259b8:	52                   	push   edx
c00259b9:	50                   	push   eax
c00259ba:	e8 d1 fc ff ff       	call   c0025690 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00259bf:	83 c4 10             	add    esp,0x10
c00259c2:	84 c0                	test   al,al
c00259c4:	74 44                	je     c0025a0a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00259c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259c9:	8b 1c 85 60 24 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdba0]
c00259d0:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00259d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259d7:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00259db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259de:	83 c0 20             	add    eax,0x20
c00259e1:	0f b6 f0             	movzx  esi,al
c00259e4:	b8 00 00 00 00       	mov    eax,0x0
c00259e9:	99                   	cdq    
c00259ea:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259ed:	0f b6 c9             	movzx  ecx,cl
c00259f0:	83 ec 04             	sub    esp,0x4
c00259f3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259f6:	57                   	push   edi
c00259f7:	56                   	push   esi
c00259f8:	52                   	push   edx
c00259f9:	50                   	push   eax
c00259fa:	51                   	push   ecx
c00259fb:	53                   	push   ebx
c00259fc:	e8 0b fe ff ff       	call   c002580c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025a01:	83 c4 20             	add    esp,0x20
c0025a04:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025a08:	eb 05                	jmp    c0025a0f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a0a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025a0d:	eb 8f                	jmp    c002599e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025a0f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025a12:	83 f0 01             	xor    eax,0x1
c0025a15:	84 c0                	test   al,al
c0025a17:	74 10                	je     c0025a29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025a19:	83 ec 0c             	sub    esp,0xc
c0025a1c:	68 2b ce 02 c0       	push   0xc002ce2b
c0025a21:	e8 11 48 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0025a26:	83 c4 10             	add    esp,0x10
c0025a29:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025a2d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025a34:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025a38:	7f 65                	jg     c0025a9f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a40:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a47:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a4a:	01 ca                	add    edx,ecx
c0025a4c:	83 c2 54             	add    edx,0x54
c0025a4f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a53:	85 c0                	test   eax,eax
c0025a55:	75 43                	jne    c0025a9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a5d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a64:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a67:	01 ca                	add    edx,ecx
c0025a69:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a6c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a6f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a79:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a80:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a83:	01 ca                	add    edx,ecx
c0025a85:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a8b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a8e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a95:	83 e8 20             	sub    eax,0x20
c0025a98:	eb 1a                	jmp    c0025ab4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a9a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a9d:	eb 95                	jmp    c0025a34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a9f:	83 ec 0c             	sub    esp,0xc
c0025aa2:	68 38 ce 02 c0       	push   0xc002ce38
c0025aa7:	e8 8b 47 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0025aac:	83 c4 10             	add    esp,0x10
c0025aaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025ab4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ab7:	5b                   	pop    ebx
c0025ab8:	5e                   	pop    esi
c0025ab9:	5f                   	pop    edi
c0025aba:	5d                   	pop    ebp
c0025abb:	c3                   	ret    

c0025abc <PIC::disable()>:
c0025abc:	55                   	push   ebp
c0025abd:	89 e5                	mov    ebp,esp
c0025abf:	83 ec 10             	sub    esp,0x10
c0025ac2:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ac8:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025acc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025acf:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ad3:	ee                   	out    dx,al
c0025ad4:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ada:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ade:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ae1:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ae5:	ee                   	out    dx,al
c0025ae6:	90                   	nop
c0025ae7:	c9                   	leave  
c0025ae8:	c3                   	ret    
c0025ae9:	90                   	nop

c0025aea <PIC::close(int, int, void*)>:
c0025aea:	55                   	push   ebp
c0025aeb:	89 e5                	mov    ebp,esp
c0025aed:	83 ec 08             	sub    esp,0x8
c0025af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025af5:	83 c0 3c             	add    eax,0x3c
c0025af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025afa:	83 ec 0c             	sub    esp,0xc
c0025afd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b00:	ff d0                	call   eax
c0025b02:	83 c4 10             	add    esp,0x10
c0025b05:	b8 00 00 00 00       	mov    eax,0x0
c0025b0a:	c9                   	leave  
c0025b0b:	c3                   	ret    

c0025b0c <PIC::PIC()>:
c0025b0c:	83 ec 0c             	sub    esp,0xc
c0025b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b13:	83 ec 08             	sub    esp,0x8
c0025b16:	68 e4 ce 02 c0       	push   0xc002cee4
c0025b1b:	50                   	push   eax
c0025b1c:	e8 1d ee fe ff       	call   c001493e <InterruptController::InterruptController(char const*)>
c0025b21:	83 c4 10             	add    esp,0x10
c0025b24:	ba 10 cf 02 c0       	mov    edx,0xc002cf10
c0025b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b2d:	89 10                	mov    DWORD PTR [eax],edx
c0025b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b39:	0f b6 d0             	movzx  edx,al
c0025b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b40:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b51:	0f b6 d0             	movzx  edx,al
c0025b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b58:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b67:	8d 50 01             	lea    edx,[eax+0x1]
c0025b6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b6e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b74:	0f b6 d0             	movzx  edx,al
c0025b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b7f:	83 e1 3f             	and    ecx,0x3f
c0025b82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b90:	0f b6 d0             	movzx  edx,al
c0025b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b97:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ba8:	0f b6 d0             	movzx  edx,al
c0025bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025bcb:	0f b6 d0             	movzx  edx,al
c0025bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025bd6:	83 e1 3f             	and    ecx,0x3f
c0025bd9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025bdd:	90                   	nop
c0025bde:	83 c4 0c             	add    esp,0xc
c0025be1:	c3                   	ret    

c0025be2 <PIC::ioWait()>:
c0025be2:	eb 00                	jmp    c0025be4 <PIC::ioWait()+0x2>
c0025be4:	eb 00                	jmp    c0025be6 <PIC::ioWait()+0x4>
c0025be6:	90                   	nop
c0025be7:	c3                   	ret    

c0025be8 <PIC::getIRQReg(int)>:
c0025be8:	55                   	push   ebp
c0025be9:	89 e5                	mov    ebp,esp
c0025beb:	83 ec 10             	sub    esp,0x10
c0025bee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bf1:	0f b6 c0             	movzx  eax,al
c0025bf4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bfa:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bfd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c00:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c04:	ee                   	out    dx,al
c0025c05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c08:	0f b6 c0             	movzx  eax,al
c0025c0b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c11:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025c14:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c17:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c1b:	ee                   	out    dx,al
c0025c1c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025c22:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025c26:	89 c2                	mov    edx,eax
c0025c28:	ec                   	in     al,dx
c0025c29:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025c2c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c2f:	0f b6 c0             	movzx  eax,al
c0025c32:	c1 e0 08             	shl    eax,0x8
c0025c35:	89 c1                	mov    ecx,eax
c0025c37:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025c3d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025c41:	89 c2                	mov    edx,eax
c0025c43:	ec                   	in     al,dx
c0025c44:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025c47:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c4a:	0f b6 c0             	movzx  eax,al
c0025c4d:	09 c8                	or     eax,ecx
c0025c4f:	c9                   	leave  
c0025c50:	c3                   	ret    
c0025c51:	90                   	nop

c0025c52 <PIC::eoi(unsigned char)>:
c0025c52:	55                   	push   ebp
c0025c53:	89 e5                	mov    ebp,esp
c0025c55:	83 ec 14             	sub    esp,0x14
c0025c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c5b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c5e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c62:	75 1e                	jne    c0025c82 <PIC::eoi(unsigned char)+0x30>
c0025c64:	6a 0b                	push   0xb
c0025c66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c69:	e8 7a ff ff ff       	call   c0025be8 <PIC::getIRQReg(int)>
c0025c6e:	83 c4 08             	add    esp,0x8
c0025c71:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c75:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c79:	25 80 00 00 00       	and    eax,0x80
c0025c7e:	85 c0                	test   eax,eax
c0025c80:	74 5f                	je     c0025ce1 <PIC::eoi(unsigned char)+0x8f>
c0025c82:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c86:	75 2d                	jne    c0025cb5 <PIC::eoi(unsigned char)+0x63>
c0025c88:	6a 0b                	push   0xb
c0025c8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c8d:	e8 56 ff ff ff       	call   c0025be8 <PIC::getIRQReg(int)>
c0025c92:	83 c4 08             	add    esp,0x8
c0025c95:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c9c:	66 85 c0             	test   ax,ax
c0025c9f:	78 14                	js     c0025cb5 <PIC::eoi(unsigned char)+0x63>
c0025ca1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025ca7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025cab:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cae:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025cb2:	ee                   	out    dx,al
c0025cb3:	eb 2d                	jmp    c0025ce2 <PIC::eoi(unsigned char)+0x90>
c0025cb5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025cb9:	76 12                	jbe    c0025ccd <PIC::eoi(unsigned char)+0x7b>
c0025cbb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cc1:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025cc5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cc8:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ccc:	ee                   	out    dx,al
c0025ccd:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cd3:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025cd7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cda:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cde:	ee                   	out    dx,al
c0025cdf:	eb 01                	jmp    c0025ce2 <PIC::eoi(unsigned char)+0x90>
c0025ce1:	90                   	nop
c0025ce2:	c9                   	leave  
c0025ce3:	c3                   	ret    

c0025ce4 <PIC::remap()>:
c0025ce4:	55                   	push   ebp
c0025ce5:	89 e5                	mov    ebp,esp
c0025ce7:	83 ec 48             	sub    esp,0x48
c0025cea:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025cf1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cf8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cfe:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025d01:	89 c2                	mov    edx,eax
c0025d03:	ec                   	in     al,dx
c0025d04:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025d07:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025d0a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025d0d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025d13:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025d16:	89 c2                	mov    edx,eax
c0025d18:	ec                   	in     al,dx
c0025d19:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025d1c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025d1f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025d22:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025d28:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025d2c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025d2f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025d32:	ee                   	out    dx,al
c0025d33:	83 ec 0c             	sub    esp,0xc
c0025d36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d39:	e8 a4 fe ff ff       	call   c0025be2 <PIC::ioWait()>
c0025d3e:	83 c4 10             	add    esp,0x10
c0025d41:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025d47:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d4b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d4e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d51:	ee                   	out    dx,al
c0025d52:	83 ec 0c             	sub    esp,0xc
c0025d55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d58:	e8 85 fe ff ff       	call   c0025be2 <PIC::ioWait()>
c0025d5d:	83 c4 10             	add    esp,0x10
c0025d60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d63:	0f b6 c0             	movzx  eax,al
c0025d66:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d6c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d6f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d72:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d75:	ee                   	out    dx,al
c0025d76:	83 ec 0c             	sub    esp,0xc
c0025d79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d7c:	e8 61 fe ff ff       	call   c0025be2 <PIC::ioWait()>
c0025d81:	83 c4 10             	add    esp,0x10
c0025d84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d87:	0f b6 c0             	movzx  eax,al
c0025d8a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d90:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d93:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d96:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d99:	ee                   	out    dx,al
c0025d9a:	83 ec 0c             	sub    esp,0xc
c0025d9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025da0:	e8 3d fe ff ff       	call   c0025be2 <PIC::ioWait()>
c0025da5:	83 c4 10             	add    esp,0x10
c0025da8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025dae:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025db2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025db5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025db8:	ee                   	out    dx,al
c0025db9:	83 ec 0c             	sub    esp,0xc
c0025dbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dbf:	e8 1e fe ff ff       	call   c0025be2 <PIC::ioWait()>
c0025dc4:	83 c4 10             	add    esp,0x10
c0025dc7:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025dcd:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025dd1:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025dd4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dd7:	ee                   	out    dx,al
c0025dd8:	83 ec 0c             	sub    esp,0xc
c0025ddb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dde:	e8 ff fd ff ff       	call   c0025be2 <PIC::ioWait()>
c0025de3:	83 c4 10             	add    esp,0x10
c0025de6:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025dec:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025df0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025df3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025df6:	ee                   	out    dx,al
c0025df7:	83 ec 0c             	sub    esp,0xc
c0025dfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dfd:	e8 e0 fd ff ff       	call   c0025be2 <PIC::ioWait()>
c0025e02:	83 c4 10             	add    esp,0x10
c0025e05:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025e0b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025e0f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025e12:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025e15:	ee                   	out    dx,al
c0025e16:	83 ec 0c             	sub    esp,0xc
c0025e19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e1c:	e8 c1 fd ff ff       	call   c0025be2 <PIC::ioWait()>
c0025e21:	83 c4 10             	add    esp,0x10
c0025e24:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025e28:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025e2e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025e31:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025e34:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e37:	ee                   	out    dx,al
c0025e38:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025e3c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025e42:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025e45:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025e48:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e4b:	ee                   	out    dx,al
c0025e4c:	90                   	nop
c0025e4d:	c9                   	leave  
c0025e4e:	c3                   	ret    
c0025e4f:	90                   	nop

c0025e50 <PIC::open(int, int, void*)>:
c0025e50:	55                   	push   ebp
c0025e51:	89 e5                	mov    ebp,esp
c0025e53:	83 ec 18             	sub    esp,0x18
c0025e56:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e5c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e60:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e63:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e67:	ee                   	out    dx,al
c0025e68:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e6e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e72:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e75:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e79:	ee                   	out    dx,al
c0025e7a:	83 ec 0c             	sub    esp,0xc
c0025e7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e80:	e8 5f fe ff ff       	call   c0025ce4 <PIC::remap()>
c0025e85:	83 c4 10             	add    esp,0x10
c0025e88:	b8 00 00 00 00       	mov    eax,0x0
c0025e8d:	c9                   	leave  
c0025e8e:	c3                   	ret    
c0025e8f:	90                   	nop

c0025e90 <APICTimer::close(int, int, void*)>:
c0025e90:	b8 00 00 00 00       	mov    eax,0x0
c0025e95:	c3                   	ret    

c0025e96 <apicTimerHandler(regs*, void*)>:
c0025e96:	83 ec 0c             	sub    esp,0xc
c0025e99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e9f:	99                   	cdq    
c0025ea0:	52                   	push   edx
c0025ea1:	50                   	push   eax
c0025ea2:	6a 00                	push   0x0
c0025ea4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025ea9:	e8 8e 07 00 00       	call   c002663c <__udivdi3>
c0025eae:	83 c4 10             	add    esp,0x10
c0025eb1:	83 ec 08             	sub    esp,0x8
c0025eb4:	52                   	push   edx
c0025eb5:	50                   	push   eax
c0025eb6:	e8 a8 0a ff ff       	call   c0016963 <timerHandler(unsigned long long)>
c0025ebb:	83 c4 10             	add    esp,0x10
c0025ebe:	90                   	nop
c0025ebf:	83 c4 0c             	add    esp,0xc
c0025ec2:	c3                   	ret    
c0025ec3:	90                   	nop

c0025ec4 <APICTimer::write(int)>:
c0025ec4:	53                   	push   ebx
c0025ec5:	83 ec 28             	sub    esp,0x28
c0025ec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025ecc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025ed0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ed6:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0025edb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ee1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ee7:	83 ec 0c             	sub    esp,0xc
c0025eea:	50                   	push   eax
c0025eeb:	e8 de f4 ff ff       	call   c00253ce <APIC::getBase()>
c0025ef0:	83 c4 10             	add    esp,0x10
c0025ef3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ef7:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0025efc:	8b 15 54 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e754
c0025f02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025f0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f0e:	05 e0 03 00 00       	add    eax,0x3e0
c0025f13:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f1d:	05 80 03 00 00       	add    eax,0x380
c0025f22:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025f28:	fb                   	sti    
c0025f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025f31:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025f36:	83 d2 00             	adc    edx,0x0
c0025f39:	89 c1                	mov    ecx,eax
c0025f3b:	89 d3                	mov    ebx,edx
c0025f3d:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0025f42:	8b 15 54 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e754
c0025f48:	39 c8                	cmp    eax,ecx
c0025f4a:	89 d0                	mov    eax,edx
c0025f4c:	19 d8                	sbb    eax,ebx
c0025f4e:	73 02                	jae    c0025f52 <APICTimer::write(int)+0x8e>
c0025f50:	eb d7                	jmp    c0025f29 <APICTimer::write(int)+0x65>
c0025f52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f56:	05 20 03 00 00       	add    eax,0x320
c0025f5b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f65:	05 90 03 00 00       	add    eax,0x390
c0025f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6c:	f7 d0                	not    eax
c0025f6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f72:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f7a:	ba 00 00 00 00       	mov    edx,0x0
c0025f7f:	f7 f3                	div    ebx
c0025f81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f8f:	0d 00 00 02 00       	or     eax,0x20000
c0025f94:	89 c2                	mov    edx,eax
c0025f96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f9a:	05 20 03 00 00       	add    eax,0x320
c0025f9f:	89 10                	mov    DWORD PTR [eax],edx
c0025fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fa5:	05 e0 03 00 00       	add    eax,0x3e0
c0025faa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fb4:	05 80 03 00 00       	add    eax,0x380
c0025fb9:	89 c2                	mov    edx,eax
c0025fbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025fbf:	89 02                	mov    DWORD PTR [edx],eax
c0025fc1:	90                   	nop
c0025fc2:	83 c4 28             	add    esp,0x28
c0025fc5:	5b                   	pop    ebx
c0025fc6:	c3                   	ret    
c0025fc7:	90                   	nop

c0025fc8 <APICTimer::open(int, int, void*)>:
c0025fc8:	57                   	push   edi
c0025fc9:	56                   	push   esi
c0025fca:	53                   	push   ebx
c0025fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fd1:	83 c0 24             	add    eax,0x24
c0025fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fd6:	83 ec 08             	sub    esp,0x8
c0025fd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fe1:	ff d0                	call   eax
c0025fe3:	83 c4 10             	add    esp,0x10
c0025fe6:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0025feb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ff1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ff7:	83 ec 0c             	sub    esp,0xc
c0025ffa:	50                   	push   eax
c0025ffb:	e8 ce f3 ff ff       	call   c00253ce <APIC::getBase()>
c0026000:	83 c4 10             	add    esp,0x10
c0026003:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026013:	0f b6 f8             	movzx  edi,al
c0026016:	89 d0                	mov    eax,edx
c0026018:	ba 00 00 00 00       	mov    edx,0x0
c002601d:	89 c1                	mov    ecx,eax
c002601f:	80 e5 ff             	and    ch,0xff
c0026022:	89 cb                	mov    ebx,ecx
c0026024:	0f b6 f2             	movzx  esi,dl
c0026027:	89 d8                	mov    eax,ebx
c0026029:	89 f2                	mov    edx,esi
c002602b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002602f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026032:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026036:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002603a:	83 e0 00             	and    eax,0x0
c002603d:	09 d0                	or     eax,edx
c002603f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026047:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002604d:	8d 50 01             	lea    edx,[eax+0x1]
c0026050:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026054:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002605a:	0f b6 d0             	movzx  edx,al
c002605d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026061:	83 c2 08             	add    edx,0x8
c0026064:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026068:	0f b6 c9             	movzx  ecx,cl
c002606b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026071:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026079:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002607d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026087:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002608b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026091:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026095:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002609b:	83 ec 0c             	sub    esp,0xc
c002609e:	51                   	push   ecx
c002609f:	6a 01                	push   0x1
c00260a1:	68 96 5e 02 c0       	push   0xc0025e96
c00260a6:	52                   	push   edx
c00260a7:	50                   	push   eax
c00260a8:	e8 b9 de fe ff       	call   c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00260ad:	83 c4 20             	add    esp,0x20
c00260b0:	89 c2                	mov    edx,eax
c00260b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00260bc:	b8 00 00 00 00       	mov    eax,0x0
c00260c1:	5b                   	pop    ebx
c00260c2:	5e                   	pop    esi
c00260c3:	5f                   	pop    edi
c00260c4:	c3                   	ret    
c00260c5:	90                   	nop

c00260c6 <APICTimer::APICTimer()>:
c00260c6:	83 ec 0c             	sub    esp,0xc
c00260c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260cd:	83 ec 08             	sub    esp,0x8
c00260d0:	68 50 cf 02 c0       	push   0xc002cf50
c00260d5:	50                   	push   eax
c00260d6:	e8 f9 07 ff ff       	call   c00168d4 <Timer::Timer(char const*)>
c00260db:	83 c4 10             	add    esp,0x10
c00260de:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c00260e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e7:	89 10                	mov    DWORD PTR [eax],edx
c00260e9:	90                   	nop
c00260ea:	83 c4 0c             	add    esp,0xc
c00260ed:	c3                   	ret    

c00260ee <PIT::write(int)>:
c00260ee:	83 ec 10             	sub    esp,0x10
c00260f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260f9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026103:	a3 84 24 03 c0       	mov    ds:0xc0032484,eax
c0026108:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002610d:	99                   	cdq    
c002610e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026112:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026116:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002611d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026122:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026126:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002612b:	ee                   	out    dx,al
c002612c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026130:	0f b6 c0             	movzx  eax,al
c0026133:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002613a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002613e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026142:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026147:	ee                   	out    dx,al
c0026148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002614c:	c1 f8 08             	sar    eax,0x8
c002614f:	0f b6 c0             	movzx  eax,al
c0026152:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026159:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002615d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026161:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026166:	ee                   	out    dx,al
c0026167:	90                   	nop
c0026168:	83 c4 10             	add    esp,0x10
c002616b:	c3                   	ret    

c002616c <pitHandler(regs*, void*)>:
c002616c:	83 ec 0c             	sub    esp,0xc
c002616f:	a1 84 24 03 c0       	mov    eax,ds:0xc0032484
c0026174:	99                   	cdq    
c0026175:	52                   	push   edx
c0026176:	50                   	push   eax
c0026177:	6a 00                	push   0x0
c0026179:	68 00 ca 9a 3b       	push   0x3b9aca00
c002617e:	e8 b9 04 00 00       	call   c002663c <__udivdi3>
c0026183:	83 c4 10             	add    esp,0x10
c0026186:	83 ec 08             	sub    esp,0x8
c0026189:	52                   	push   edx
c002618a:	50                   	push   eax
c002618b:	e8 d3 07 ff ff       	call   c0016963 <timerHandler(unsigned long long)>
c0026190:	83 c4 10             	add    esp,0x10
c0026193:	90                   	nop
c0026194:	83 c4 0c             	add    esp,0xc
c0026197:	c3                   	ret    

c0026198 <PIT::open(int, int, void*)>:
c0026198:	83 ec 0c             	sub    esp,0xc
c002619b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619f:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a1:	83 c0 24             	add    eax,0x24
c00261a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a6:	83 ec 08             	sub    esp,0x8
c00261a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261b1:	ff d0                	call   eax
c00261b3:	83 c4 10             	add    esp,0x10
c00261b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ba:	83 ec 0c             	sub    esp,0xc
c00261bd:	6a 00                	push   0x0
c00261bf:	6a 01                	push   0x1
c00261c1:	68 6c 61 02 c0       	push   0xc002616c
c00261c6:	6a 00                	push   0x0
c00261c8:	50                   	push   eax
c00261c9:	e8 98 dd fe ff       	call   c0013f66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261ce:	83 c4 20             	add    esp,0x20
c00261d1:	89 c2                	mov    edx,eax
c00261d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261dd:	b8 00 00 00 00       	mov    eax,0x0
c00261e2:	83 c4 0c             	add    esp,0xc
c00261e5:	c3                   	ret    

c00261e6 <PIT::close(int, int, void*)>:
c00261e6:	83 ec 0c             	sub    esp,0xc
c00261e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ed:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261fb:	6a 01                	push   0x1
c00261fd:	68 6c 61 02 c0       	push   0xc002616c
c0026202:	6a 00                	push   0x0
c0026204:	50                   	push   eax
c0026205:	e8 9a dd fe ff       	call   c0013fa4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002620a:	83 c4 10             	add    esp,0x10
c002620d:	b8 00 00 00 00       	mov    eax,0x0
c0026212:	83 c4 0c             	add    esp,0xc
c0026215:	c3                   	ret    

c0026216 <PIT::PIT()>:
c0026216:	83 ec 0c             	sub    esp,0xc
c0026219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002621d:	83 ec 08             	sub    esp,0x8
c0026220:	68 8c cf 02 c0       	push   0xc002cf8c
c0026225:	50                   	push   eax
c0026226:	e8 a9 06 ff ff       	call   c00168d4 <Timer::Timer(char const*)>
c002622b:	83 c4 10             	add    esp,0x10
c002622e:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0026233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026237:	89 10                	mov    DWORD PTR [eax],edx
c0026239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026243:	0f b6 d0             	movzx  edx,al
c0026246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026255:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002625b:	0f b6 d0             	movzx  edx,al
c002625e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026262:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002626b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026271:	8d 50 01             	lea    edx,[eax+0x1]
c0026274:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026278:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002627e:	0f b6 d0             	movzx  edx,al
c0026281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026285:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026289:	83 e1 3f             	and    ecx,0x3f
c002628c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026290:	90                   	nop
c0026291:	83 c4 0c             	add    esp,0xc
c0026294:	c3                   	ret    
c0026295:	66 90                	xchg   ax,ax
c0026297:	66 90                	xchg   ax,ax
c0026299:	66 90                	xchg   ax,ax
c002629b:	66 90                	xchg   ax,ax
c002629d:	66 90                	xchg   ax,ax
c002629f:	90                   	nop

c00262a0 <avxDetect>:
c00262a0:	b8 00 00 00 00       	mov    eax,0x0
c00262a5:	c3                   	ret    

c00262a6 <avxSave>:
c00262a6:	c3                   	ret    

c00262a7 <avxLoad>:
c00262a7:	c3                   	ret    

c00262a8 <avxInit>:
c00262a8:	c3                   	ret    

c00262a9 <avxClose>:
c00262a9:	c3                   	ret    

c00262aa <wouldSheSayYes>:
c00262aa:	c3                   	ret    
c00262ab:	49                   	dec    ecx
c00262ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00262b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00262b4:	75 20                	jne    c00262d6 <sseDetect.noSSE+0x1>
c00262b6:	4e                   	dec    esi
c00262b7:	79 61                	jns    c002631a <x87Detect+0x14>
c00262b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00262be:	66 90                	xchg   ax,ax

c00262c0 <absolutelyNoChanceInHell>:
c00262c0:	b8 01 00 00 00       	mov    eax,0x1
c00262c5:	0f a2                	cpuid  
c00262c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00262cd:	74 06                	je     c00262d5 <sseDetect.noSSE>
c00262cf:	b8 01 00 00 00       	mov    eax,0x1
c00262d4:	c3                   	ret    

c00262d5 <sseDetect.noSSE>:
c00262d5:	31 c0                	xor    eax,eax
c00262d7:	c3                   	ret    

c00262d8 <sseSave>:
c00262d8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00262dd:	c3                   	ret    

c00262de <sseLoad>:
c00262de:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00262e3:	c3                   	ret    

c00262e4 <sseInit>:
c00262e4:	e8 43 00 00 00       	call   c002632c <x87Init>
c00262e9:	0f 20 e0             	mov    eax,cr4
c00262ec:	66 0d 00 06          	or     ax,0x600
c00262f0:	0f 22 e0             	mov    cr4,eax
c00262f3:	c3                   	ret    

c00262f4 <sseClose>:
c00262f4:	c3                   	ret    
c00262f5:	66 90                	xchg   ax,ax
c00262f7:	66 90                	xchg   ax,ax
c00262f9:	66 90                	xchg   ax,ax
c00262fb:	66 90                	xchg   ax,ax
c00262fd:	66 90                	xchg   ax,ax
c00262ff:	90                   	nop

c0026300 <value_37F>:
c0026300:	7f 03                	jg     c0026305 <value_37A+0x1>

c0026302 <value_37E>:
c0026302:	7e 03                	jle    c0026307 <x87Detect+0x1>

c0026304 <value_37A>:
c0026304:	7a 03                	jp     c0026309 <x87Detect+0x3>

c0026306 <x87Detect>:
c0026306:	b8 01 00 00 00       	mov    eax,0x1
c002630b:	0f a2                	cpuid  
c002630d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026313:	74 06                	je     c002631b <x87Detect.nox87>
c0026315:	b8 01 00 00 00       	mov    eax,0x1
c002631a:	c3                   	ret    

c002631b <x87Detect.nox87>:
c002631b:	b8 00 00 00 00       	mov    eax,0x0
c0026320:	c3                   	ret    

c0026321 <x87Save>:
c0026321:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026326:	c3                   	ret    

c0026327 <x87Load>:
c0026327:	dd 64 24 08          	frstor [esp+0x8]
c002632b:	c3                   	ret    

c002632c <x87Init>:
c002632c:	9b db e3             	finit  
c002632f:	0f 20 c0             	mov    eax,cr0
c0026332:	66 25 fb ff          	and    ax,0xfffb
c0026336:	66 0d 22 00          	or     ax,0x22
c002633a:	0f 22 c0             	mov    cr0,eax
c002633d:	0f 06                	clts   
c002633f:	d9 2d 04 63 02 c0    	fldcw  WORD PTR ds:0xc0026304
c0026345:	c3                   	ret    

c0026346 <x87Close>:
c0026346:	c3                   	ret    
c0026347:	90                   	nop

c0026348 <__do_global_ctors_aux>:
c0026348:	a1 8c 8e 02 c0       	mov    eax,ds:0xc0028e8c
c002634d:	83 f8 ff             	cmp    eax,0xffffffff
c0026350:	74 1a                	je     c002636c <__do_global_ctors_aux+0x24>
c0026352:	55                   	push   ebp
c0026353:	89 e5                	mov    ebp,esp
c0026355:	53                   	push   ebx
c0026356:	52                   	push   edx
c0026357:	bb 8c 8e 02 c0       	mov    ebx,0xc0028e8c
c002635c:	ff d0                	call   eax
c002635e:	83 eb 04             	sub    ebx,0x4
c0026361:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026363:	83 f8 ff             	cmp    eax,0xffffffff
c0026366:	75 f4                	jne    c002635c <__do_global_ctors_aux+0x14>
c0026368:	58                   	pop    eax
c0026369:	5b                   	pop    ebx
c002636a:	5d                   	pop    ebp
c002636b:	c3                   	ret    
c002636c:	c3                   	ret    
c002636d:	66 90                	xchg   ax,ax
c002636f:	90                   	nop

c0026370 <__divdi3>:
c0026370:	55                   	push   ebp
c0026371:	57                   	push   edi
c0026372:	56                   	push   esi
c0026373:	53                   	push   ebx
c0026374:	83 ec 1c             	sub    esp,0x1c
c0026377:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002637b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002637f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026382:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026386:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002638a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002638e:	85 db                	test   ebx,ebx
c0026390:	0f 88 8e 00 00 00    	js     c0026424 <__divdi3+0xb4>
c0026396:	89 dd                	mov    ebp,ebx
c0026398:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00263a0:	89 d3                	mov    ebx,edx
c00263a2:	85 d2                	test   edx,edx
c00263a4:	79 0d                	jns    c00263b3 <__divdi3+0x43>
c00263a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00263aa:	f7 d8                	neg    eax
c00263ac:	83 d2 00             	adc    edx,0x0
c00263af:	f7 da                	neg    edx
c00263b1:	89 d3                	mov    ebx,edx
c00263b3:	89 c7                	mov    edi,eax
c00263b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263b8:	85 db                	test   ebx,ebx
c00263ba:	75 48                	jne    c0026404 <__divdi3+0x94>
c00263bc:	39 ef                	cmp    edi,ebp
c00263be:	76 24                	jbe    c00263e4 <__divdi3+0x74>
c00263c0:	89 ea                	mov    edx,ebp
c00263c2:	f7 f7                	div    edi
c00263c4:	89 c1                	mov    ecx,eax
c00263c6:	31 f6                	xor    esi,esi
c00263c8:	89 c8                	mov    eax,ecx
c00263ca:	89 f2                	mov    edx,esi
c00263cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00263d0:	85 c9                	test   ecx,ecx
c00263d2:	74 07                	je     c00263db <__divdi3+0x6b>
c00263d4:	f7 d8                	neg    eax
c00263d6:	83 d2 00             	adc    edx,0x0
c00263d9:	f7 da                	neg    edx
c00263db:	83 c4 1c             	add    esp,0x1c
c00263de:	5b                   	pop    ebx
c00263df:	5e                   	pop    esi
c00263e0:	5f                   	pop    edi
c00263e1:	5d                   	pop    ebp
c00263e2:	c3                   	ret    
c00263e3:	90                   	nop
c00263e4:	85 ff                	test   edi,edi
c00263e6:	75 0b                	jne    c00263f3 <__divdi3+0x83>
c00263e8:	b8 01 00 00 00       	mov    eax,0x1
c00263ed:	31 d2                	xor    edx,edx
c00263ef:	f7 f3                	div    ebx
c00263f1:	89 c7                	mov    edi,eax
c00263f3:	31 d2                	xor    edx,edx
c00263f5:	89 e8                	mov    eax,ebp
c00263f7:	f7 f7                	div    edi
c00263f9:	89 c6                	mov    esi,eax
c00263fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263fe:	f7 f7                	div    edi
c0026400:	89 c1                	mov    ecx,eax
c0026402:	eb c4                	jmp    c00263c8 <__divdi3+0x58>
c0026404:	39 eb                	cmp    ebx,ebp
c0026406:	77 3c                	ja     c0026444 <__divdi3+0xd4>
c0026408:	0f bd f3             	bsr    esi,ebx
c002640b:	83 f6 1f             	xor    esi,0x1f
c002640e:	75 40                	jne    c0026450 <__divdi3+0xe0>
c0026410:	39 eb                	cmp    ebx,ebp
c0026412:	72 09                	jb     c002641d <__divdi3+0xad>
c0026414:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026417:	0f 87 97 00 00 00    	ja     c00264b4 <__divdi3+0x144>
c002641d:	b9 01 00 00 00       	mov    ecx,0x1
c0026422:	eb a4                	jmp    c00263c8 <__divdi3+0x58>
c0026424:	f7 d9                	neg    ecx
c0026426:	83 d3 00             	adc    ebx,0x0
c0026429:	f7 db                	neg    ebx
c002642b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002642e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026432:	89 dd                	mov    ebp,ebx
c0026434:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002643c:	e9 5f ff ff ff       	jmp    c00263a0 <__divdi3+0x30>
c0026441:	8d 76 00             	lea    esi,[esi+0x0]
c0026444:	31 f6                	xor    esi,esi
c0026446:	31 c9                	xor    ecx,ecx
c0026448:	e9 7b ff ff ff       	jmp    c00263c8 <__divdi3+0x58>
c002644d:	8d 76 00             	lea    esi,[esi+0x0]
c0026450:	b8 20 00 00 00       	mov    eax,0x20
c0026455:	29 f0                	sub    eax,esi
c0026457:	89 f1                	mov    ecx,esi
c0026459:	d3 e3                	shl    ebx,cl
c002645b:	89 fa                	mov    edx,edi
c002645d:	88 c1                	mov    cl,al
c002645f:	d3 ea                	shr    edx,cl
c0026461:	09 da                	or     edx,ebx
c0026463:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026467:	89 f1                	mov    ecx,esi
c0026469:	d3 e7                	shl    edi,cl
c002646b:	89 eb                	mov    ebx,ebp
c002646d:	88 c1                	mov    cl,al
c002646f:	d3 eb                	shr    ebx,cl
c0026471:	89 f1                	mov    ecx,esi
c0026473:	d3 e5                	shl    ebp,cl
c0026475:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026478:	88 c1                	mov    cl,al
c002647a:	d3 ea                	shr    edx,cl
c002647c:	09 d5                	or     ebp,edx
c002647e:	89 e8                	mov    eax,ebp
c0026480:	89 da                	mov    edx,ebx
c0026482:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026486:	89 d3                	mov    ebx,edx
c0026488:	89 c5                	mov    ebp,eax
c002648a:	f7 e7                	mul    edi
c002648c:	39 d3                	cmp    ebx,edx
c002648e:	72 18                	jb     c00264a8 <__divdi3+0x138>
c0026490:	74 0a                	je     c002649c <__divdi3+0x12c>
c0026492:	89 e9                	mov    ecx,ebp
c0026494:	31 f6                	xor    esi,esi
c0026496:	e9 2d ff ff ff       	jmp    c00263c8 <__divdi3+0x58>
c002649b:	90                   	nop
c002649c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002649f:	89 f1                	mov    ecx,esi
c00264a1:	d3 e7                	shl    edi,cl
c00264a3:	39 c7                	cmp    edi,eax
c00264a5:	73 eb                	jae    c0026492 <__divdi3+0x122>
c00264a7:	90                   	nop
c00264a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00264ab:	31 f6                	xor    esi,esi
c00264ad:	e9 16 ff ff ff       	jmp    c00263c8 <__divdi3+0x58>
c00264b2:	66 90                	xchg   ax,ax
c00264b4:	31 c9                	xor    ecx,ecx
c00264b6:	e9 0d ff ff ff       	jmp    c00263c8 <__divdi3+0x58>
c00264bb:	90                   	nop

c00264bc <__moddi3>:
c00264bc:	55                   	push   ebp
c00264bd:	57                   	push   edi
c00264be:	56                   	push   esi
c00264bf:	53                   	push   ebx
c00264c0:	83 ec 2c             	sub    esp,0x2c
c00264c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00264c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00264cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00264cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00264d3:	85 db                	test   ebx,ebx
c00264d5:	0f 88 85 00 00 00    	js     c0026560 <__moddi3+0xa4>
c00264db:	89 de                	mov    esi,ebx
c00264dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00264e5:	89 d7                	mov    edi,edx
c00264e7:	85 d2                	test   edx,edx
c00264e9:	79 09                	jns    c00264f4 <__moddi3+0x38>
c00264eb:	f7 d8                	neg    eax
c00264ed:	83 d2 00             	adc    edx,0x0
c00264f0:	f7 da                	neg    edx
c00264f2:	89 d7                	mov    edi,edx
c00264f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264f8:	89 cd                	mov    ebp,ecx
c00264fa:	85 ff                	test   edi,edi
c00264fc:	75 52                	jne    c0026550 <__moddi3+0x94>
c00264fe:	89 c3                	mov    ebx,eax
c0026500:	39 f0                	cmp    eax,esi
c0026502:	76 24                	jbe    c0026528 <__moddi3+0x6c>
c0026504:	89 c8                	mov    eax,ecx
c0026506:	89 f2                	mov    edx,esi
c0026508:	f7 f3                	div    ebx
c002650a:	89 d6                	mov    esi,edx
c002650c:	89 f0                	mov    eax,esi
c002650e:	31 d2                	xor    edx,edx
c0026510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026514:	85 c9                	test   ecx,ecx
c0026516:	74 07                	je     c002651f <__moddi3+0x63>
c0026518:	f7 d8                	neg    eax
c002651a:	83 d2 00             	adc    edx,0x0
c002651d:	f7 da                	neg    edx
c002651f:	83 c4 2c             	add    esp,0x2c
c0026522:	5b                   	pop    ebx
c0026523:	5e                   	pop    esi
c0026524:	5f                   	pop    edi
c0026525:	5d                   	pop    ebp
c0026526:	c3                   	ret    
c0026527:	90                   	nop
c0026528:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002652c:	85 db                	test   ebx,ebx
c002652e:	75 0d                	jne    c002653d <__moddi3+0x81>
c0026530:	b8 01 00 00 00       	mov    eax,0x1
c0026535:	31 d2                	xor    edx,edx
c0026537:	f7 f7                	div    edi
c0026539:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002653d:	89 f0                	mov    eax,esi
c002653f:	31 d2                	xor    edx,edx
c0026541:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026545:	f7 f7                	div    edi
c0026547:	89 e8                	mov    eax,ebp
c0026549:	f7 f7                	div    edi
c002654b:	89 d6                	mov    esi,edx
c002654d:	eb bd                	jmp    c002650c <__moddi3+0x50>
c002654f:	90                   	nop
c0026550:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026554:	39 f7                	cmp    edi,esi
c0026556:	76 20                	jbe    c0026578 <__moddi3+0xbc>
c0026558:	89 c8                	mov    eax,ecx
c002655a:	89 f2                	mov    edx,esi
c002655c:	eb b2                	jmp    c0026510 <__moddi3+0x54>
c002655e:	66 90                	xchg   ax,ax
c0026560:	f7 d9                	neg    ecx
c0026562:	83 d3 00             	adc    ebx,0x0
c0026565:	f7 db                	neg    ebx
c0026567:	89 de                	mov    esi,ebx
c0026569:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026571:	e9 6f ff ff ff       	jmp    c00264e5 <__moddi3+0x29>
c0026576:	66 90                	xchg   ax,ax
c0026578:	0f bd c7             	bsr    eax,edi
c002657b:	83 f0 1f             	xor    eax,0x1f
c002657e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026582:	75 24                	jne    c00265a8 <__moddi3+0xec>
c0026584:	39 f7                	cmp    edi,esi
c0026586:	72 06                	jb     c002658e <__moddi3+0xd2>
c0026588:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002658c:	77 0c                	ja     c002659a <__moddi3+0xde>
c002658e:	89 e9                	mov    ecx,ebp
c0026590:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026594:	19 fe                	sbb    esi,edi
c0026596:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002659a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002659e:	89 f2                	mov    edx,esi
c00265a0:	e9 6b ff ff ff       	jmp    c0026510 <__moddi3+0x54>
c00265a5:	8d 76 00             	lea    esi,[esi+0x0]
c00265a8:	b8 20 00 00 00       	mov    eax,0x20
c00265ad:	89 c2                	mov    edx,eax
c00265af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00265b3:	29 da                	sub    edx,ebx
c00265b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00265b9:	88 d9                	mov    cl,bl
c00265bb:	d3 e7                	shl    edi,cl
c00265bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265c1:	88 d1                	mov    cl,dl
c00265c3:	d3 e8                	shr    eax,cl
c00265c5:	09 c7                	or     edi,eax
c00265c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00265cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265cf:	89 d8                	mov    eax,ebx
c00265d1:	88 d9                	mov    cl,bl
c00265d3:	d3 e7                	shl    edi,cl
c00265d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265d9:	89 f3                	mov    ebx,esi
c00265db:	88 d1                	mov    cl,dl
c00265dd:	d3 eb                	shr    ebx,cl
c00265df:	89 c7                	mov    edi,eax
c00265e1:	88 c1                	mov    cl,al
c00265e3:	d3 e6                	shl    esi,cl
c00265e5:	89 e8                	mov    eax,ebp
c00265e7:	88 d1                	mov    cl,dl
c00265e9:	d3 e8                	shr    eax,cl
c00265eb:	09 f0                	or     eax,esi
c00265ed:	89 f9                	mov    ecx,edi
c00265ef:	d3 e5                	shl    ebp,cl
c00265f1:	89 da                	mov    edx,ebx
c00265f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265f7:	89 d3                	mov    ebx,edx
c00265f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265fd:	89 c6                	mov    esi,eax
c00265ff:	89 d1                	mov    ecx,edx
c0026601:	39 d3                	cmp    ebx,edx
c0026603:	72 27                	jb     c002662c <__moddi3+0x170>
c0026605:	74 21                	je     c0026628 <__moddi3+0x16c>
c0026607:	29 f5                	sub    ebp,esi
c0026609:	19 cb                	sbb    ebx,ecx
c002660b:	89 de                	mov    esi,ebx
c002660d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026611:	d3 e6                	shl    esi,cl
c0026613:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026617:	89 f9                	mov    ecx,edi
c0026619:	d3 ed                	shr    ebp,cl
c002661b:	09 ee                	or     esi,ebp
c002661d:	89 f0                	mov    eax,esi
c002661f:	d3 eb                	shr    ebx,cl
c0026621:	89 da                	mov    edx,ebx
c0026623:	e9 e8 fe ff ff       	jmp    c0026510 <__moddi3+0x54>
c0026628:	39 c5                	cmp    ebp,eax
c002662a:	73 db                	jae    c0026607 <__moddi3+0x14b>
c002662c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026630:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026634:	89 d1                	mov    ecx,edx
c0026636:	89 c6                	mov    esi,eax
c0026638:	eb cd                	jmp    c0026607 <__moddi3+0x14b>
c002663a:	66 90                	xchg   ax,ax

c002663c <__udivdi3>:
c002663c:	55                   	push   ebp
c002663d:	57                   	push   edi
c002663e:	56                   	push   esi
c002663f:	53                   	push   ebx
c0026640:	83 ec 1c             	sub    esp,0x1c
c0026643:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026647:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002664b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002664f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026653:	85 d2                	test   edx,edx
c0026655:	75 41                	jne    c0026698 <__udivdi3+0x5c>
c0026657:	39 f7                	cmp    edi,esi
c0026659:	76 15                	jbe    c0026670 <__udivdi3+0x34>
c002665b:	89 e8                	mov    eax,ebp
c002665d:	89 f2                	mov    edx,esi
c002665f:	f7 f7                	div    edi
c0026661:	31 db                	xor    ebx,ebx
c0026663:	89 da                	mov    edx,ebx
c0026665:	83 c4 1c             	add    esp,0x1c
c0026668:	5b                   	pop    ebx
c0026669:	5e                   	pop    esi
c002666a:	5f                   	pop    edi
c002666b:	5d                   	pop    ebp
c002666c:	c3                   	ret    
c002666d:	8d 76 00             	lea    esi,[esi+0x0]
c0026670:	89 f9                	mov    ecx,edi
c0026672:	85 ff                	test   edi,edi
c0026674:	75 0b                	jne    c0026681 <__udivdi3+0x45>
c0026676:	b8 01 00 00 00       	mov    eax,0x1
c002667b:	31 d2                	xor    edx,edx
c002667d:	f7 f7                	div    edi
c002667f:	89 c1                	mov    ecx,eax
c0026681:	31 d2                	xor    edx,edx
c0026683:	89 f0                	mov    eax,esi
c0026685:	f7 f1                	div    ecx
c0026687:	89 c3                	mov    ebx,eax
c0026689:	89 e8                	mov    eax,ebp
c002668b:	f7 f1                	div    ecx
c002668d:	89 da                	mov    edx,ebx
c002668f:	83 c4 1c             	add    esp,0x1c
c0026692:	5b                   	pop    ebx
c0026693:	5e                   	pop    esi
c0026694:	5f                   	pop    edi
c0026695:	5d                   	pop    ebp
c0026696:	c3                   	ret    
c0026697:	90                   	nop
c0026698:	39 f2                	cmp    edx,esi
c002669a:	77 1c                	ja     c00266b8 <__udivdi3+0x7c>
c002669c:	0f bd da             	bsr    ebx,edx
c002669f:	83 f3 1f             	xor    ebx,0x1f
c00266a2:	75 24                	jne    c00266c8 <__udivdi3+0x8c>
c00266a4:	39 f2                	cmp    edx,esi
c00266a6:	72 08                	jb     c00266b0 <__udivdi3+0x74>
c00266a8:	39 ef                	cmp    edi,ebp
c00266aa:	0f 87 84 00 00 00    	ja     c0026734 <__udivdi3+0xf8>
c00266b0:	b8 01 00 00 00       	mov    eax,0x1
c00266b5:	eb ac                	jmp    c0026663 <__udivdi3+0x27>
c00266b7:	90                   	nop
c00266b8:	31 db                	xor    ebx,ebx
c00266ba:	31 c0                	xor    eax,eax
c00266bc:	89 da                	mov    edx,ebx
c00266be:	83 c4 1c             	add    esp,0x1c
c00266c1:	5b                   	pop    ebx
c00266c2:	5e                   	pop    esi
c00266c3:	5f                   	pop    edi
c00266c4:	5d                   	pop    ebp
c00266c5:	c3                   	ret    
c00266c6:	66 90                	xchg   ax,ax
c00266c8:	b8 20 00 00 00       	mov    eax,0x20
c00266cd:	29 d8                	sub    eax,ebx
c00266cf:	88 d9                	mov    cl,bl
c00266d1:	d3 e2                	shl    edx,cl
c00266d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00266d7:	89 fa                	mov    edx,edi
c00266d9:	88 c1                	mov    cl,al
c00266db:	d3 ea                	shr    edx,cl
c00266dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266e1:	09 d1                	or     ecx,edx
c00266e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266e7:	88 d9                	mov    cl,bl
c00266e9:	d3 e7                	shl    edi,cl
c00266eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266ef:	89 f7                	mov    edi,esi
c00266f1:	88 c1                	mov    cl,al
c00266f3:	d3 ef                	shr    edi,cl
c00266f5:	88 d9                	mov    cl,bl
c00266f7:	d3 e6                	shl    esi,cl
c00266f9:	89 ea                	mov    edx,ebp
c00266fb:	88 c1                	mov    cl,al
c00266fd:	d3 ea                	shr    edx,cl
c00266ff:	09 d6                	or     esi,edx
c0026701:	89 f0                	mov    eax,esi
c0026703:	89 fa                	mov    edx,edi
c0026705:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026709:	89 d7                	mov    edi,edx
c002670b:	89 c6                	mov    esi,eax
c002670d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026711:	39 d7                	cmp    edi,edx
c0026713:	72 13                	jb     c0026728 <__udivdi3+0xec>
c0026715:	74 09                	je     c0026720 <__udivdi3+0xe4>
c0026717:	89 f0                	mov    eax,esi
c0026719:	31 db                	xor    ebx,ebx
c002671b:	e9 43 ff ff ff       	jmp    c0026663 <__udivdi3+0x27>
c0026720:	88 d9                	mov    cl,bl
c0026722:	d3 e5                	shl    ebp,cl
c0026724:	39 c5                	cmp    ebp,eax
c0026726:	73 ef                	jae    c0026717 <__udivdi3+0xdb>
c0026728:	8d 46 ff             	lea    eax,[esi-0x1]
c002672b:	31 db                	xor    ebx,ebx
c002672d:	e9 31 ff ff ff       	jmp    c0026663 <__udivdi3+0x27>
c0026732:	66 90                	xchg   ax,ax
c0026734:	31 c0                	xor    eax,eax
c0026736:	e9 28 ff ff ff       	jmp    c0026663 <__udivdi3+0x27>
c002673b:	90                   	nop

c002673c <__umoddi3>:
c002673c:	55                   	push   ebp
c002673d:	57                   	push   edi
c002673e:	56                   	push   esi
c002673f:	53                   	push   ebx
c0026740:	83 ec 1c             	sub    esp,0x1c
c0026743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026747:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002674b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002674f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026753:	89 da                	mov    edx,ebx
c0026755:	85 c0                	test   eax,eax
c0026757:	75 37                	jne    c0026790 <__umoddi3+0x54>
c0026759:	39 df                	cmp    edi,ebx
c002675b:	76 13                	jbe    c0026770 <__umoddi3+0x34>
c002675d:	89 f0                	mov    eax,esi
c002675f:	f7 f7                	div    edi
c0026761:	89 d0                	mov    eax,edx
c0026763:	31 d2                	xor    edx,edx
c0026765:	83 c4 1c             	add    esp,0x1c
c0026768:	5b                   	pop    ebx
c0026769:	5e                   	pop    esi
c002676a:	5f                   	pop    edi
c002676b:	5d                   	pop    ebp
c002676c:	c3                   	ret    
c002676d:	8d 76 00             	lea    esi,[esi+0x0]
c0026770:	89 fd                	mov    ebp,edi
c0026772:	85 ff                	test   edi,edi
c0026774:	75 0b                	jne    c0026781 <__umoddi3+0x45>
c0026776:	b8 01 00 00 00       	mov    eax,0x1
c002677b:	31 d2                	xor    edx,edx
c002677d:	f7 f7                	div    edi
c002677f:	89 c5                	mov    ebp,eax
c0026781:	89 d8                	mov    eax,ebx
c0026783:	31 d2                	xor    edx,edx
c0026785:	f7 f5                	div    ebp
c0026787:	89 f0                	mov    eax,esi
c0026789:	f7 f5                	div    ebp
c002678b:	89 d0                	mov    eax,edx
c002678d:	eb d4                	jmp    c0026763 <__umoddi3+0x27>
c002678f:	90                   	nop
c0026790:	89 f1                	mov    ecx,esi
c0026792:	39 d8                	cmp    eax,ebx
c0026794:	76 0a                	jbe    c00267a0 <__umoddi3+0x64>
c0026796:	89 f0                	mov    eax,esi
c0026798:	83 c4 1c             	add    esp,0x1c
c002679b:	5b                   	pop    ebx
c002679c:	5e                   	pop    esi
c002679d:	5f                   	pop    edi
c002679e:	5d                   	pop    ebp
c002679f:	c3                   	ret    
c00267a0:	0f bd e8             	bsr    ebp,eax
c00267a3:	83 f5 1f             	xor    ebp,0x1f
c00267a6:	75 1c                	jne    c00267c4 <__umoddi3+0x88>
c00267a8:	39 d8                	cmp    eax,ebx
c00267aa:	72 04                	jb     c00267b0 <__umoddi3+0x74>
c00267ac:	39 f7                	cmp    edi,esi
c00267ae:	77 08                	ja     c00267b8 <__umoddi3+0x7c>
c00267b0:	89 da                	mov    edx,ebx
c00267b2:	29 fe                	sub    esi,edi
c00267b4:	19 c2                	sbb    edx,eax
c00267b6:	89 f1                	mov    ecx,esi
c00267b8:	89 c8                	mov    eax,ecx
c00267ba:	83 c4 1c             	add    esp,0x1c
c00267bd:	5b                   	pop    ebx
c00267be:	5e                   	pop    esi
c00267bf:	5f                   	pop    edi
c00267c0:	5d                   	pop    ebp
c00267c1:	c3                   	ret    
c00267c2:	66 90                	xchg   ax,ax
c00267c4:	ba 20 00 00 00       	mov    edx,0x20
c00267c9:	29 ea                	sub    edx,ebp
c00267cb:	89 e9                	mov    ecx,ebp
c00267cd:	d3 e0                	shl    eax,cl
c00267cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00267d3:	89 f8                	mov    eax,edi
c00267d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267d9:	88 d1                	mov    cl,dl
c00267db:	d3 e8                	shr    eax,cl
c00267dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267e1:	09 c1                	or     ecx,eax
c00267e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267e7:	89 e9                	mov    ecx,ebp
c00267e9:	d3 e7                	shl    edi,cl
c00267eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267ef:	89 d8                	mov    eax,ebx
c00267f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267f5:	88 d1                	mov    cl,dl
c00267f7:	d3 e8                	shr    eax,cl
c00267f9:	89 c7                	mov    edi,eax
c00267fb:	89 e9                	mov    ecx,ebp
c00267fd:	d3 e3                	shl    ebx,cl
c00267ff:	89 f0                	mov    eax,esi
c0026801:	88 d1                	mov    cl,dl
c0026803:	d3 e8                	shr    eax,cl
c0026805:	09 d8                	or     eax,ebx
c0026807:	89 e9                	mov    ecx,ebp
c0026809:	d3 e6                	shl    esi,cl
c002680b:	89 f3                	mov    ebx,esi
c002680d:	89 fa                	mov    edx,edi
c002680f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026813:	89 d1                	mov    ecx,edx
c0026815:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026819:	89 c6                	mov    esi,eax
c002681b:	89 d7                	mov    edi,edx
c002681d:	39 d1                	cmp    ecx,edx
c002681f:	72 27                	jb     c0026848 <__umoddi3+0x10c>
c0026821:	74 21                	je     c0026844 <__umoddi3+0x108>
c0026823:	89 ca                	mov    edx,ecx
c0026825:	29 f3                	sub    ebx,esi
c0026827:	19 fa                	sbb    edx,edi
c0026829:	89 d0                	mov    eax,edx
c002682b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002682f:	d3 e0                	shl    eax,cl
c0026831:	89 e9                	mov    ecx,ebp
c0026833:	d3 eb                	shr    ebx,cl
c0026835:	09 d8                	or     eax,ebx
c0026837:	d3 ea                	shr    edx,cl
c0026839:	83 c4 1c             	add    esp,0x1c
c002683c:	5b                   	pop    ebx
c002683d:	5e                   	pop    esi
c002683e:	5f                   	pop    edi
c002683f:	5d                   	pop    ebp
c0026840:	c3                   	ret    
c0026841:	8d 76 00             	lea    esi,[esi+0x0]
c0026844:	39 c3                	cmp    ebx,eax
c0026846:	73 db                	jae    c0026823 <__umoddi3+0xe7>
c0026848:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002684c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026850:	89 d7                	mov    edi,edx
c0026852:	89 c6                	mov    esi,eax
c0026854:	eb cd                	jmp    c0026823 <__umoddi3+0xe7>

c0026856 <__addsf3>:
c0026856:	55                   	push   ebp
c0026857:	89 e5                	mov    ebp,esp
c0026859:	57                   	push   edi
c002685a:	56                   	push   esi
c002685b:	53                   	push   ebx
c002685c:	83 ec 08             	sub    esp,0x8
c002685f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026862:	89 fa                	mov    edx,edi
c0026864:	89 f8                	mov    eax,edi
c0026866:	c1 f8 17             	sar    eax,0x17
c0026869:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002686c:	c1 e2 08             	shl    edx,0x8
c002686f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026875:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026878:	89 de                	mov    esi,ebx
c002687a:	c1 fe 17             	sar    esi,0x17
c002687d:	c1 e3 08             	shl    ebx,0x8
c0026880:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026886:	31 f0                	xor    eax,esi
c0026888:	0f 88 3b 01 00 00    	js     c00269c9 <__addsf3+0x173>
c002688e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026891:	29 f1                	sub    ecx,esi
c0026893:	85 c9                	test   ecx,ecx
c0026895:	7e 54                	jle    c00268eb <__addsf3+0x95>
c0026897:	89 f0                	mov    eax,esi
c0026899:	84 c0                	test   al,al
c002689b:	75 10                	jne    c00268ad <__addsf3+0x57>
c002689d:	85 db                	test   ebx,ebx
c002689f:	0f 84 aa 02 00 00    	je     c0026b4f <__addsf3+0x2f9>
c00268a5:	49                   	dec    ecx
c00268a6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268a9:	74 38                	je     c00268e3 <__addsf3+0x8d>
c00268ab:	eb 13                	jmp    c00268c0 <__addsf3+0x6a>
c00268ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268b0:	f7 d0                	not    eax
c00268b2:	84 c0                	test   al,al
c00268b4:	0f 84 95 02 00 00    	je     c0026b4f <__addsf3+0x2f9>
c00268ba:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00268c0:	83 f9 1f             	cmp    ecx,0x1f
c00268c3:	0f 8f 86 02 00 00    	jg     c0026b4f <__addsf3+0x2f9>
c00268c9:	89 de                	mov    esi,ebx
c00268cb:	d3 ee                	shr    esi,cl
c00268cd:	b8 20 00 00 00       	mov    eax,0x20
c00268d2:	29 c8                	sub    eax,ecx
c00268d4:	89 c1                	mov    ecx,eax
c00268d6:	d3 e3                	shl    ebx,cl
c00268d8:	31 c0                	xor    eax,eax
c00268da:	85 db                	test   ebx,ebx
c00268dc:	0f 95 c0             	setne  al
c00268df:	09 f0                	or     eax,esi
c00268e1:	01 d0                	add    eax,edx
c00268e3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268e6:	e9 b6 00 00 00       	jmp    c00269a1 <__addsf3+0x14b>
c00268eb:	74 5c                	je     c0026949 <__addsf3+0xf3>
c00268ed:	89 f1                	mov    ecx,esi
c00268ef:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268f2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268f5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268f9:	75 14                	jne    c002690f <__addsf3+0xb9>
c00268fb:	85 d2                	test   edx,edx
c00268fd:	0f 84 4c 02 00 00    	je     c0026b4f <__addsf3+0x2f9>
c0026903:	49                   	dec    ecx
c0026904:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026907:	0f 84 94 00 00 00    	je     c00269a1 <__addsf3+0x14b>
c002690d:	eb 12                	jmp    c0026921 <__addsf3+0xcb>
c002690f:	89 f0                	mov    eax,esi
c0026911:	f7 d0                	not    eax
c0026913:	84 c0                	test   al,al
c0026915:	0f 84 34 02 00 00    	je     c0026b4f <__addsf3+0x2f9>
c002691b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026921:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026924:	83 f9 1f             	cmp    ecx,0x1f
c0026927:	0f 8f 22 02 00 00    	jg     c0026b4f <__addsf3+0x2f9>
c002692d:	89 d7                	mov    edi,edx
c002692f:	d3 ef                	shr    edi,cl
c0026931:	b8 20 00 00 00       	mov    eax,0x20
c0026936:	29 c8                	sub    eax,ecx
c0026938:	89 c1                	mov    ecx,eax
c002693a:	d3 e2                	shl    edx,cl
c002693c:	31 c0                	xor    eax,eax
c002693e:	85 d2                	test   edx,edx
c0026940:	0f 95 c0             	setne  al
c0026943:	09 f8                	or     eax,edi
c0026945:	01 d8                	add    eax,ebx
c0026947:	eb 58                	jmp    c00269a1 <__addsf3+0x14b>
c0026949:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002694c:	8d 70 01             	lea    esi,[eax+0x1]
c002694f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026955:	75 32                	jne    c0026989 <__addsf3+0x133>
c0026957:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002695b:	75 1f                	jne    c002697c <__addsf3+0x126>
c002695d:	85 d2                	test   edx,edx
c002695f:	0f 84 e0 01 00 00    	je     c0026b45 <__addsf3+0x2ef>
c0026965:	85 db                	test   ebx,ebx
c0026967:	0f 84 e2 01 00 00    	je     c0026b4f <__addsf3+0x2f9>
c002696d:	89 d0                	mov    eax,edx
c002696f:	01 d8                	add    eax,ebx
c0026971:	0f 89 a9 01 00 00    	jns    c0026b20 <__addsf3+0x2ca>
c0026977:	e9 9d 01 00 00       	jmp    c0026b19 <__addsf3+0x2c3>
c002697c:	85 d2                	test   edx,edx
c002697e:	0f 85 cb 01 00 00    	jne    c0026b4f <__addsf3+0x2f9>
c0026984:	e9 bc 01 00 00       	jmp    c0026b45 <__addsf3+0x2ef>
c0026989:	31 c0                	xor    eax,eax
c002698b:	89 f1                	mov    ecx,esi
c002698d:	f7 d1                	not    ecx
c002698f:	84 c9                	test   cl,cl
c0026991:	0f 84 90 01 00 00    	je     c0026b27 <__addsf3+0x2d1>
c0026997:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002699a:	d1 e8                	shr    eax,1
c002699c:	e9 86 01 00 00       	jmp    c0026b27 <__addsf3+0x2d1>
c00269a1:	85 c0                	test   eax,eax
c00269a3:	0f 89 7e 01 00 00    	jns    c0026b27 <__addsf3+0x2d1>
c00269a9:	46                   	inc    esi
c00269aa:	89 f2                	mov    edx,esi
c00269ac:	f7 d2                	not    edx
c00269ae:	84 d2                	test   dl,dl
c00269b0:	0f 84 6f 01 00 00    	je     c0026b25 <__addsf3+0x2cf>
c00269b6:	89 c2                	mov    edx,eax
c00269b8:	83 e2 01             	and    edx,0x1
c00269bb:	d1 e8                	shr    eax,1
c00269bd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00269c2:	09 d0                	or     eax,edx
c00269c4:	e9 5e 01 00 00       	jmp    c0026b27 <__addsf3+0x2d1>
c00269c9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00269cd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269d0:	89 f0                	mov    eax,esi
c00269d2:	0f b6 c0             	movzx  eax,al
c00269d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269d8:	29 c1                	sub    ecx,eax
c00269da:	85 c9                	test   ecx,ecx
c00269dc:	7e 55                	jle    c0026a33 <__addsf3+0x1dd>
c00269de:	85 c0                	test   eax,eax
c00269e0:	75 11                	jne    c00269f3 <__addsf3+0x19d>
c00269e2:	85 db                	test   ebx,ebx
c00269e4:	0f 84 65 01 00 00    	je     c0026b4f <__addsf3+0x2f9>
c00269ea:	49                   	dec    ecx
c00269eb:	75 19                	jne    c0026a06 <__addsf3+0x1b0>
c00269ed:	89 d0                	mov    eax,edx
c00269ef:	29 d8                	sub    eax,ebx
c00269f1:	eb 38                	jmp    c0026a2b <__addsf3+0x1d5>
c00269f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269f6:	f7 d0                	not    eax
c00269f8:	84 c0                	test   al,al
c00269fa:	0f 84 4f 01 00 00    	je     c0026b4f <__addsf3+0x2f9>
c0026a00:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026a06:	83 f9 1f             	cmp    ecx,0x1f
c0026a09:	0f 8f 40 01 00 00    	jg     c0026b4f <__addsf3+0x2f9>
c0026a0f:	89 de                	mov    esi,ebx
c0026a11:	d3 ee                	shr    esi,cl
c0026a13:	b8 20 00 00 00       	mov    eax,0x20
c0026a18:	29 c8                	sub    eax,ecx
c0026a1a:	89 c1                	mov    ecx,eax
c0026a1c:	d3 e3                	shl    ebx,cl
c0026a1e:	31 c0                	xor    eax,eax
c0026a20:	85 db                	test   ebx,ebx
c0026a22:	0f 95 c0             	setne  al
c0026a25:	09 f0                	or     eax,esi
c0026a27:	29 c2                	sub    edx,eax
c0026a29:	89 d0                	mov    eax,edx
c0026a2b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a2e:	e9 af 00 00 00       	jmp    c0026ae2 <__addsf3+0x28c>
c0026a33:	74 5c                	je     c0026a91 <__addsf3+0x23b>
c0026a35:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026a38:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a3b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a3f:	75 14                	jne    c0026a55 <__addsf3+0x1ff>
c0026a41:	85 d2                	test   edx,edx
c0026a43:	0f 84 06 01 00 00    	je     c0026b4f <__addsf3+0x2f9>
c0026a49:	48                   	dec    eax
c0026a4a:	75 1b                	jne    c0026a67 <__addsf3+0x211>
c0026a4c:	89 d8                	mov    eax,ebx
c0026a4e:	29 d0                	sub    eax,edx
c0026a50:	e9 8d 00 00 00       	jmp    c0026ae2 <__addsf3+0x28c>
c0026a55:	89 f1                	mov    ecx,esi
c0026a57:	f7 d1                	not    ecx
c0026a59:	84 c9                	test   cl,cl
c0026a5b:	0f 84 ee 00 00 00    	je     c0026b4f <__addsf3+0x2f9>
c0026a61:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a6a:	83 f8 1f             	cmp    eax,0x1f
c0026a6d:	0f 8f dc 00 00 00    	jg     c0026b4f <__addsf3+0x2f9>
c0026a73:	89 d7                	mov    edi,edx
c0026a75:	88 c1                	mov    cl,al
c0026a77:	d3 ef                	shr    edi,cl
c0026a79:	b9 20 00 00 00       	mov    ecx,0x20
c0026a7e:	29 c1                	sub    ecx,eax
c0026a80:	d3 e2                	shl    edx,cl
c0026a82:	31 c0                	xor    eax,eax
c0026a84:	85 d2                	test   edx,edx
c0026a86:	0f 95 c0             	setne  al
c0026a89:	09 f8                	or     eax,edi
c0026a8b:	29 c3                	sub    ebx,eax
c0026a8d:	89 d8                	mov    eax,ebx
c0026a8f:	eb 51                	jmp    c0026ae2 <__addsf3+0x28c>
c0026a91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a94:	40                   	inc    eax
c0026a95:	a8 fe                	test   al,0xfe
c0026a97:	75 3d                	jne    c0026ad6 <__addsf3+0x280>
c0026a99:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a9d:	0f 85 a7 00 00 00    	jne    c0026b4a <__addsf3+0x2f4>
c0026aa3:	85 d2                	test   edx,edx
c0026aa5:	75 12                	jne    c0026ab9 <__addsf3+0x263>
c0026aa7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026aaa:	85 db                	test   ebx,ebx
c0026aac:	0f 85 9d 00 00 00    	jne    c0026b4f <__addsf3+0x2f9>
c0026ab2:	31 ff                	xor    edi,edi
c0026ab4:	e9 96 00 00 00       	jmp    c0026b4f <__addsf3+0x2f9>
c0026ab9:	85 db                	test   ebx,ebx
c0026abb:	0f 84 8e 00 00 00    	je     c0026b4f <__addsf3+0x2f9>
c0026ac1:	89 d0                	mov    eax,edx
c0026ac3:	29 d8                	sub    eax,ebx
c0026ac5:	79 06                	jns    c0026acd <__addsf3+0x277>
c0026ac7:	89 d8                	mov    eax,ebx
c0026ac9:	29 d0                	sub    eax,edx
c0026acb:	eb 5a                	jmp    c0026b27 <__addsf3+0x2d1>
c0026acd:	bf 00 00 00 00       	mov    edi,0x0
c0026ad2:	74 7b                	je     c0026b4f <__addsf3+0x2f9>
c0026ad4:	eb 4a                	jmp    c0026b20 <__addsf3+0x2ca>
c0026ad6:	89 d0                	mov    eax,edx
c0026ad8:	29 d8                	sub    eax,ebx
c0026ada:	79 12                	jns    c0026aee <__addsf3+0x298>
c0026adc:	89 d8                	mov    eax,ebx
c0026ade:	29 d0                	sub    eax,edx
c0026ae0:	eb 09                	jmp    c0026aeb <__addsf3+0x295>
c0026ae2:	85 c0                	test   eax,eax
c0026ae4:	79 41                	jns    c0026b27 <__addsf3+0x2d1>
c0026ae6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026aeb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026aee:	31 f6                	xor    esi,esi
c0026af0:	85 c0                	test   eax,eax
c0026af2:	74 33                	je     c0026b27 <__addsf3+0x2d1>
c0026af4:	0f bd c8             	bsr    ecx,eax
c0026af7:	83 f1 1f             	xor    ecx,0x1f
c0026afa:	d3 e0                	shl    eax,cl
c0026afc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026b00:	39 ca                	cmp    edx,ecx
c0026b02:	7f 10                	jg     c0026b14 <__addsf3+0x2be>
c0026b04:	29 d1                	sub    ecx,edx
c0026b06:	41                   	inc    ecx
c0026b07:	d3 e8                	shr    eax,cl
c0026b09:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b0c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026b12:	eb 13                	jmp    c0026b27 <__addsf3+0x2d1>
c0026b14:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b17:	29 ce                	sub    esi,ecx
c0026b19:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b1e:	eb 07                	jmp    c0026b27 <__addsf3+0x2d1>
c0026b20:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b23:	eb 02                	jmp    c0026b27 <__addsf3+0x2d1>
c0026b25:	31 c0                	xor    eax,eax
c0026b27:	89 c2                	mov    edx,eax
c0026b29:	c1 ea 08             	shr    edx,0x8
c0026b2c:	a8 7f                	test   al,0x7f
c0026b2e:	0f 95 c1             	setne  cl
c0026b31:	09 d1                	or     ecx,edx
c0026b33:	83 e1 01             	and    ecx,0x1
c0026b36:	c1 e8 07             	shr    eax,0x7
c0026b39:	21 c8                	and    eax,ecx
c0026b3b:	c1 e6 17             	shl    esi,0x17
c0026b3e:	09 d6                	or     esi,edx
c0026b40:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026b43:	eb 0a                	jmp    c0026b4f <__addsf3+0x2f9>
c0026b45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b48:	eb 05                	jmp    c0026b4f <__addsf3+0x2f9>
c0026b4a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026b4f:	89 f8                	mov    eax,edi
c0026b51:	5a                   	pop    edx
c0026b52:	59                   	pop    ecx
c0026b53:	5b                   	pop    ebx
c0026b54:	5e                   	pop    esi
c0026b55:	5f                   	pop    edi
c0026b56:	5d                   	pop    ebp
c0026b57:	c3                   	ret    

c0026b58 <__subsf3>:
c0026b58:	55                   	push   ebp
c0026b59:	89 e5                	mov    ebp,esp
c0026b5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b5e:	05 00 00 00 80       	add    eax,0x80000000
c0026b63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b66:	5d                   	pop    ebp
c0026b67:	e9 ea fc ff ff       	jmp    c0026856 <__addsf3>

c0026b6c <__negsf2>:
c0026b6c:	55                   	push   ebp
c0026b6d:	89 e5                	mov    ebp,esp
c0026b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b72:	05 00 00 00 80       	add    eax,0x80000000
c0026b77:	5d                   	pop    ebp
c0026b78:	c3                   	ret    

c0026b79 <__mulsf3>:
c0026b79:	55                   	push   ebp
c0026b7a:	89 e5                	mov    ebp,esp
c0026b7c:	57                   	push   edi
c0026b7d:	56                   	push   esi
c0026b7e:	53                   	push   ebx
c0026b7f:	83 ec 1c             	sub    esp,0x1c
c0026b82:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b85:	89 f0                	mov    eax,esi
c0026b87:	89 f1                	mov    ecx,esi
c0026b89:	c1 f9 17             	sar    ecx,0x17
c0026b8c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b8f:	c1 e0 08             	shl    eax,0x8
c0026b92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b97:	89 c1                	mov    ecx,eax
c0026b99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b9c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b9f:	89 c7                	mov    edi,eax
c0026ba1:	c1 ff 17             	sar    edi,0x17
c0026ba4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ba8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026bab:	89 f8                	mov    eax,edi
c0026bad:	0f b6 c0             	movzx  eax,al
c0026bb0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026bb3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026bb7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026bba:	42                   	inc    edx
c0026bbb:	80 e2 fe             	and    dl,0xfe
c0026bbe:	75 7b                	jne    c0026c3b <__mulsf3+0xc2>
c0026bc0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026bc4:	74 54                	je     c0026c1a <__mulsf3+0xa1>
c0026bc6:	85 c9                	test   ecx,ecx
c0026bc8:	0f 85 64 01 00 00    	jne    c0026d32 <__mulsf3+0x1b9>
c0026bce:	8d 57 01             	lea    edx,[edi+0x1]
c0026bd1:	80 e2 fe             	and    dl,0xfe
c0026bd4:	75 1f                	jne    c0026bf5 <__mulsf3+0x7c>
c0026bd6:	85 c0                	test   eax,eax
c0026bd8:	b8 00 00 00 00       	mov    eax,0x0
c0026bdd:	74 29                	je     c0026c08 <__mulsf3+0x8f>
c0026bdf:	53                   	push   ebx
c0026be0:	53                   	push   ebx
c0026be1:	50                   	push   eax
c0026be2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026be5:	e8 96 05 00 00       	call   c0027180 <__nesf2>
c0026bea:	83 c4 10             	add    esp,0x10
c0026bed:	85 c0                	test   eax,eax
c0026bef:	0f 85 3a 01 00 00    	jne    c0026d2f <__mulsf3+0x1b6>
c0026bf5:	85 ff                	test   edi,edi
c0026bf7:	0f 89 35 01 00 00    	jns    c0026d32 <__mulsf3+0x1b9>
c0026bfd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026c03:	e9 2a 01 00 00       	jmp    c0026d32 <__mulsf3+0x1b9>
c0026c08:	51                   	push   ecx
c0026c09:	51                   	push   ecx
c0026c0a:	50                   	push   eax
c0026c0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c0e:	e8 6d 05 00 00       	call   c0027180 <__nesf2>
c0026c13:	83 c4 10             	add    esp,0x10
c0026c16:	85 c0                	test   eax,eax
c0026c18:	eb 15                	jmp    c0026c2f <__mulsf3+0xb6>
c0026c1a:	85 c9                	test   ecx,ecx
c0026c1c:	74 0b                	je     c0026c29 <__mulsf3+0xb0>
c0026c1e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026c21:	01 c9                	add    ecx,ecx
c0026c23:	78 16                	js     c0026c3b <__mulsf3+0xc2>
c0026c25:	89 d3                	mov    ebx,edx
c0026c27:	eb f5                	jmp    c0026c1e <__mulsf3+0xa5>
c0026c29:	89 f8                	mov    eax,edi
c0026c2b:	f7 d0                	not    eax
c0026c2d:	84 c0                	test   al,al
c0026c2f:	75 c4                	jne    c0026bf5 <__mulsf3+0x7c>
c0026c31:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026c36:	e9 f7 00 00 00       	jmp    c0026d32 <__mulsf3+0x1b9>
c0026c3b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c3e:	c1 e6 08             	shl    esi,0x8
c0026c41:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026c47:	8d 57 01             	lea    edx,[edi+0x1]
c0026c4a:	80 e2 fe             	and    dl,0xfe
c0026c4d:	75 63                	jne    c0026cb2 <__mulsf3+0x139>
c0026c4f:	85 c0                	test   eax,eax
c0026c51:	74 2f                	je     c0026c82 <__mulsf3+0x109>
c0026c53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c57:	0f 89 d2 00 00 00    	jns    c0026d2f <__mulsf3+0x1b6>
c0026c5d:	52                   	push   edx
c0026c5e:	52                   	push   edx
c0026c5f:	6a 00                	push   0x0
c0026c61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c64:	e8 dc 04 00 00       	call   c0027145 <__eqsf2>
c0026c69:	83 c4 10             	add    esp,0x10
c0026c6c:	85 c0                	test   eax,eax
c0026c6e:	0f 85 bb 00 00 00    	jne    c0026d2f <__mulsf3+0x1b6>
c0026c74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c77:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c7d:	e9 b0 00 00 00       	jmp    c0026d32 <__mulsf3+0x1b9>
c0026c82:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c85:	50                   	push   eax
c0026c86:	50                   	push   eax
c0026c87:	6a 00                	push   0x0
c0026c89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c8c:	e8 b4 04 00 00       	call   c0027145 <__eqsf2>
c0026c91:	83 c4 10             	add    esp,0x10
c0026c94:	85 c0                	test   eax,eax
c0026c96:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c99:	75 0c                	jne    c0026ca7 <__mulsf3+0x12e>
c0026c9b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c9f:	0f 89 8a 00 00 00    	jns    c0026d2f <__mulsf3+0x1b6>
c0026ca5:	eb cd                	jmp    c0026c74 <__mulsf3+0xfb>
c0026ca7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026caa:	01 f6                	add    esi,esi
c0026cac:	78 04                	js     c0026cb2 <__mulsf3+0x139>
c0026cae:	89 c3                	mov    ebx,eax
c0026cb0:	eb f5                	jmp    c0026ca7 <__mulsf3+0x12e>
c0026cb2:	89 c8                	mov    eax,ecx
c0026cb4:	0d 00 00 00 80       	or     eax,0x80000000
c0026cb9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026cbf:	f7 e6                	mul    esi
c0026cc1:	85 c0                	test   eax,eax
c0026cc3:	0f 95 c0             	setne  al
c0026cc6:	0f b6 c0             	movzx  eax,al
c0026cc9:	09 c2                	or     edx,eax
c0026ccb:	78 03                	js     c0026cd0 <__mulsf3+0x157>
c0026ccd:	01 d2                	add    edx,edx
c0026ccf:	4b                   	dec    ebx
c0026cd0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026cd6:	7f 22                	jg     c0026cfa <__mulsf3+0x181>
c0026cd8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026cde:	85 db                	test   ebx,ebx
c0026ce0:	7f 23                	jg     c0026d05 <__mulsf3+0x18c>
c0026ce2:	83 fb e9             	cmp    ebx,0xffffffe9
c0026ce5:	7c 1a                	jl     c0026d01 <__mulsf3+0x188>
c0026ce7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ced:	b9 01 00 00 00       	mov    ecx,0x1
c0026cf2:	29 d9                	sub    ecx,ebx
c0026cf4:	d3 ea                	shr    edx,cl
c0026cf6:	31 db                	xor    ebx,ebx
c0026cf8:	eb 0b                	jmp    c0026d05 <__mulsf3+0x18c>
c0026cfa:	bb ff 00 00 00       	mov    ebx,0xff
c0026cff:	eb 02                	jmp    c0026d03 <__mulsf3+0x18a>
c0026d01:	31 db                	xor    ebx,ebx
c0026d03:	31 d2                	xor    edx,edx
c0026d05:	89 d0                	mov    eax,edx
c0026d07:	c1 e8 08             	shr    eax,0x8
c0026d0a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026d0d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026d13:	09 fb                	or     ebx,edi
c0026d15:	c1 e3 17             	shl    ebx,0x17
c0026d18:	09 c3                	or     ebx,eax
c0026d1a:	f6 c2 7f             	test   dl,0x7f
c0026d1d:	0f 95 c1             	setne  cl
c0026d20:	09 c8                	or     eax,ecx
c0026d22:	83 e0 01             	and    eax,0x1
c0026d25:	c1 ea 07             	shr    edx,0x7
c0026d28:	21 c2                	and    edx,eax
c0026d2a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026d2d:	eb 03                	jmp    c0026d32 <__mulsf3+0x1b9>
c0026d2f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026d32:	89 f0                	mov    eax,esi
c0026d34:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d37:	5b                   	pop    ebx
c0026d38:	5e                   	pop    esi
c0026d39:	5f                   	pop    edi
c0026d3a:	5d                   	pop    ebp
c0026d3b:	c3                   	ret    

c0026d3c <__divsf3>:
c0026d3c:	55                   	push   ebp
c0026d3d:	89 e5                	mov    ebp,esp
c0026d3f:	57                   	push   edi
c0026d40:	56                   	push   esi
c0026d41:	53                   	push   ebx
c0026d42:	83 ec 1c             	sub    esp,0x1c
c0026d45:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d48:	89 d8                	mov    eax,ebx
c0026d4a:	89 d9                	mov    ecx,ebx
c0026d4c:	c1 f9 17             	sar    ecx,0x17
c0026d4f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d52:	c1 e0 08             	shl    eax,0x8
c0026d55:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d5a:	89 c1                	mov    ecx,eax
c0026d5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d5f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d62:	89 c7                	mov    edi,eax
c0026d64:	c1 ff 17             	sar    edi,0x17
c0026d67:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d6b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d6e:	89 f8                	mov    eax,edi
c0026d70:	0f b6 c0             	movzx  eax,al
c0026d73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d76:	29 c6                	sub    esi,eax
c0026d78:	83 c6 7f             	add    esi,0x7f
c0026d7b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d7e:	42                   	inc    edx
c0026d7f:	80 e2 fe             	and    dl,0xfe
c0026d82:	0f 85 9c 00 00 00    	jne    c0026e24 <__divsf3+0xe8>
c0026d88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d8c:	74 33                	je     c0026dc1 <__divsf3+0x85>
c0026d8e:	85 c9                	test   ecx,ecx
c0026d90:	0f 85 c7 01 00 00    	jne    c0026f5d <__divsf3+0x221>
c0026d96:	8d 57 01             	lea    edx,[edi+0x1]
c0026d99:	80 e2 fe             	and    dl,0xfe
c0026d9c:	75 2f                	jne    c0026dcd <__divsf3+0x91>
c0026d9e:	85 c0                	test   eax,eax
c0026da0:	74 2b                	je     c0026dcd <__divsf3+0x91>
c0026da2:	51                   	push   ecx
c0026da3:	51                   	push   ecx
c0026da4:	6a 00                	push   0x0
c0026da6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026da9:	e8 d2 03 00 00       	call   c0027180 <__nesf2>
c0026dae:	83 c4 10             	add    esp,0x10
c0026db1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026db4:	85 c0                	test   eax,eax
c0026db6:	0f 85 a1 01 00 00    	jne    c0026f5d <__divsf3+0x221>
c0026dbc:	e9 92 01 00 00       	jmp    c0026f53 <__divsf3+0x217>
c0026dc1:	85 c9                	test   ecx,ecx
c0026dc3:	75 1b                	jne    c0026de0 <__divsf3+0xa4>
c0026dc5:	8d 57 01             	lea    edx,[edi+0x1]
c0026dc8:	80 e2 fe             	and    dl,0xfe
c0026dcb:	74 1e                	je     c0026deb <__divsf3+0xaf>
c0026dcd:	85 ff                	test   edi,edi
c0026dcf:	0f 89 88 01 00 00    	jns    c0026f5d <__divsf3+0x221>
c0026dd5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ddb:	e9 7d 01 00 00       	jmp    c0026f5d <__divsf3+0x221>
c0026de0:	8d 56 ff             	lea    edx,[esi-0x1]
c0026de3:	01 c9                	add    ecx,ecx
c0026de5:	78 3d                	js     c0026e24 <__divsf3+0xe8>
c0026de7:	89 d6                	mov    esi,edx
c0026de9:	eb f5                	jmp    c0026de0 <__divsf3+0xa4>
c0026deb:	85 c0                	test   eax,eax
c0026ded:	b8 00 00 00 00       	mov    eax,0x0
c0026df2:	74 18                	je     c0026e0c <__divsf3+0xd0>
c0026df4:	52                   	push   edx
c0026df5:	52                   	push   edx
c0026df6:	50                   	push   eax
c0026df7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dfa:	e8 81 03 00 00       	call   c0027180 <__nesf2>
c0026dff:	83 c4 10             	add    esp,0x10
c0026e02:	85 c0                	test   eax,eax
c0026e04:	0f 85 50 01 00 00    	jne    c0026f5a <__divsf3+0x21e>
c0026e0a:	eb c1                	jmp    c0026dcd <__divsf3+0x91>
c0026e0c:	56                   	push   esi
c0026e0d:	56                   	push   esi
c0026e0e:	50                   	push   eax
c0026e0f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e12:	e8 69 03 00 00       	call   c0027180 <__nesf2>
c0026e17:	83 c4 10             	add    esp,0x10
c0026e1a:	85 c0                	test   eax,eax
c0026e1c:	0f 84 31 01 00 00    	je     c0026f53 <__divsf3+0x217>
c0026e22:	eb a9                	jmp    c0026dcd <__divsf3+0x91>
c0026e24:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026e27:	c1 e3 08             	shl    ebx,0x8
c0026e2a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e30:	8d 57 01             	lea    edx,[edi+0x1]
c0026e33:	80 e2 fe             	and    dl,0xfe
c0026e36:	75 71                	jne    c0026ea9 <__divsf3+0x16d>
c0026e38:	85 c0                	test   eax,eax
c0026e3a:	ba 00 00 00 00       	mov    edx,0x0
c0026e3f:	74 2f                	je     c0026e70 <__divsf3+0x134>
c0026e41:	51                   	push   ecx
c0026e42:	51                   	push   ecx
c0026e43:	52                   	push   edx
c0026e44:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e47:	e8 f9 02 00 00       	call   c0027145 <__eqsf2>
c0026e4c:	83 c4 10             	add    esp,0x10
c0026e4f:	85 c0                	test   eax,eax
c0026e51:	0f 85 03 01 00 00    	jne    c0026f5a <__divsf3+0x21e>
c0026e57:	31 d2                	xor    edx,edx
c0026e59:	89 d3                	mov    ebx,edx
c0026e5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e5e:	31 f8                	xor    eax,edi
c0026e60:	0f 89 f7 00 00 00    	jns    c0026f5d <__divsf3+0x221>
c0026e66:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e6b:	e9 ed 00 00 00       	jmp    c0026f5d <__divsf3+0x221>
c0026e70:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e73:	50                   	push   eax
c0026e74:	50                   	push   eax
c0026e75:	52                   	push   edx
c0026e76:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e79:	e8 c7 02 00 00       	call   c0027145 <__eqsf2>
c0026e7e:	83 c4 10             	add    esp,0x10
c0026e81:	85 c0                	test   eax,eax
c0026e83:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e86:	75 16                	jne    c0026e9e <__divsf3+0x162>
c0026e88:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e8b:	31 fb                	xor    ebx,edi
c0026e8d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e93:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e99:	e9 bf 00 00 00       	jmp    c0026f5d <__divsf3+0x221>
c0026e9e:	8d 46 01             	lea    eax,[esi+0x1]
c0026ea1:	01 db                	add    ebx,ebx
c0026ea3:	78 04                	js     c0026ea9 <__divsf3+0x16d>
c0026ea5:	89 c6                	mov    esi,eax
c0026ea7:	eb f5                	jmp    c0026e9e <__divsf3+0x162>
c0026ea9:	89 c8                	mov    eax,ecx
c0026eab:	0d 00 00 00 80       	or     eax,0x80000000
c0026eb0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026eb6:	31 d2                	xor    edx,edx
c0026eb8:	39 d8                	cmp    eax,ebx
c0026eba:	72 07                	jb     c0026ec3 <__divsf3+0x187>
c0026ebc:	29 d8                	sub    eax,ebx
c0026ebe:	ba 01 00 00 00       	mov    edx,0x1
c0026ec3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026eca:	01 d2                	add    edx,edx
c0026ecc:	89 c1                	mov    ecx,eax
c0026ece:	01 c0                	add    eax,eax
c0026ed0:	85 c9                	test   ecx,ecx
c0026ed2:	78 04                	js     c0026ed8 <__divsf3+0x19c>
c0026ed4:	39 c3                	cmp    ebx,eax
c0026ed6:	77 05                	ja     c0026edd <__divsf3+0x1a1>
c0026ed8:	29 d8                	sub    eax,ebx
c0026eda:	83 ca 01             	or     edx,0x1
c0026edd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026ee0:	75 e8                	jne    c0026eca <__divsf3+0x18e>
c0026ee2:	85 c0                	test   eax,eax
c0026ee4:	0f 95 c0             	setne  al
c0026ee7:	0f b6 c0             	movzx  eax,al
c0026eea:	c1 e2 06             	shl    edx,0x6
c0026eed:	09 c2                	or     edx,eax
c0026eef:	78 03                	js     c0026ef4 <__divsf3+0x1b8>
c0026ef1:	01 d2                	add    edx,edx
c0026ef3:	4e                   	dec    esi
c0026ef4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026efa:	7f 22                	jg     c0026f1e <__divsf3+0x1e2>
c0026efc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f02:	85 f6                	test   esi,esi
c0026f04:	7f 23                	jg     c0026f29 <__divsf3+0x1ed>
c0026f06:	83 fe e9             	cmp    esi,0xffffffe9
c0026f09:	7c 1a                	jl     c0026f25 <__divsf3+0x1e9>
c0026f0b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f11:	b9 01 00 00 00       	mov    ecx,0x1
c0026f16:	29 f1                	sub    ecx,esi
c0026f18:	d3 ea                	shr    edx,cl
c0026f1a:	31 f6                	xor    esi,esi
c0026f1c:	eb 0b                	jmp    c0026f29 <__divsf3+0x1ed>
c0026f1e:	be ff 00 00 00       	mov    esi,0xff
c0026f23:	eb 02                	jmp    c0026f27 <__divsf3+0x1eb>
c0026f25:	31 f6                	xor    esi,esi
c0026f27:	31 d2                	xor    edx,edx
c0026f29:	89 d0                	mov    eax,edx
c0026f2b:	c1 e8 08             	shr    eax,0x8
c0026f2e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f31:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f37:	09 fe                	or     esi,edi
c0026f39:	c1 e6 17             	shl    esi,0x17
c0026f3c:	09 c6                	or     esi,eax
c0026f3e:	f6 c2 7f             	test   dl,0x7f
c0026f41:	0f 95 c1             	setne  cl
c0026f44:	09 c8                	or     eax,ecx
c0026f46:	83 e0 01             	and    eax,0x1
c0026f49:	c1 ea 07             	shr    edx,0x7
c0026f4c:	21 c2                	and    edx,eax
c0026f4e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f51:	eb 0a                	jmp    c0026f5d <__divsf3+0x221>
c0026f53:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f58:	eb 03                	jmp    c0026f5d <__divsf3+0x221>
c0026f5a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f5d:	89 d8                	mov    eax,ebx
c0026f5f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f62:	5b                   	pop    ebx
c0026f63:	5e                   	pop    esi
c0026f64:	5f                   	pop    edi
c0026f65:	5d                   	pop    ebp
c0026f66:	c3                   	ret    

c0026f67 <__floatsisf>:
c0026f67:	55                   	push   ebp
c0026f68:	89 e5                	mov    ebp,esp
c0026f6a:	53                   	push   ebx
c0026f6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f6e:	85 d2                	test   edx,edx
c0026f70:	7e 2b                	jle    c0026f9d <__floatsisf+0x36>
c0026f72:	0f bd ca             	bsr    ecx,edx
c0026f75:	83 f1 1f             	xor    ecx,0x1f
c0026f78:	d3 e2                	shl    edx,cl
c0026f7a:	89 d0                	mov    eax,edx
c0026f7c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f81:	89 c3                	mov    ebx,eax
c0026f83:	c1 eb 08             	shr    ebx,0x8
c0026f86:	80 e2 7f             	and    dl,0x7f
c0026f89:	0f 95 c2             	setne  dl
c0026f8c:	09 da                	or     edx,ebx
c0026f8e:	83 e2 01             	and    edx,0x1
c0026f91:	c1 e8 07             	shr    eax,0x7
c0026f94:	21 c2                	and    edx,eax
c0026f96:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f9b:	eb 32                	jmp    c0026fcf <__floatsisf+0x68>
c0026f9d:	b8 00 00 00 00       	mov    eax,0x0
c0026fa2:	74 34                	je     c0026fd8 <__floatsisf+0x71>
c0026fa4:	f7 da                	neg    edx
c0026fa6:	0f bd ca             	bsr    ecx,edx
c0026fa9:	83 f1 1f             	xor    ecx,0x1f
c0026fac:	d3 e2                	shl    edx,cl
c0026fae:	89 d0                	mov    eax,edx
c0026fb0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fb5:	89 c3                	mov    ebx,eax
c0026fb7:	c1 eb 08             	shr    ebx,0x8
c0026fba:	80 e2 7f             	and    dl,0x7f
c0026fbd:	0f 95 c2             	setne  dl
c0026fc0:	09 da                	or     edx,ebx
c0026fc2:	83 e2 01             	and    edx,0x1
c0026fc5:	c1 e8 07             	shr    eax,0x7
c0026fc8:	21 c2                	and    edx,eax
c0026fca:	b8 9e 01 00 00       	mov    eax,0x19e
c0026fcf:	29 c8                	sub    eax,ecx
c0026fd1:	c1 e0 17             	shl    eax,0x17
c0026fd4:	09 d8                	or     eax,ebx
c0026fd6:	01 d0                	add    eax,edx
c0026fd8:	5b                   	pop    ebx
c0026fd9:	5d                   	pop    ebp
c0026fda:	c3                   	ret    

c0026fdb <__floatunsisf>:
c0026fdb:	55                   	push   ebp
c0026fdc:	89 e5                	mov    ebp,esp
c0026fde:	53                   	push   ebx
c0026fdf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fe2:	31 c0                	xor    eax,eax
c0026fe4:	85 d2                	test   edx,edx
c0026fe6:	74 32                	je     c002701a <__floatunsisf+0x3f>
c0026fe8:	0f bd ca             	bsr    ecx,edx
c0026feb:	83 f1 1f             	xor    ecx,0x1f
c0026fee:	d3 e2                	shl    edx,cl
c0026ff0:	89 d0                	mov    eax,edx
c0026ff2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ff7:	89 c3                	mov    ebx,eax
c0026ff9:	c1 eb 08             	shr    ebx,0x8
c0026ffc:	80 e2 7f             	and    dl,0x7f
c0026fff:	0f 95 c2             	setne  dl
c0027002:	09 da                	or     edx,ebx
c0027004:	83 e2 01             	and    edx,0x1
c0027007:	c1 e8 07             	shr    eax,0x7
c002700a:	21 c2                	and    edx,eax
c002700c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027011:	29 c8                	sub    eax,ecx
c0027013:	c1 e0 17             	shl    eax,0x17
c0027016:	09 d8                	or     eax,ebx
c0027018:	01 d0                	add    eax,edx
c002701a:	5b                   	pop    ebx
c002701b:	5d                   	pop    ebp
c002701c:	c3                   	ret    

c002701d <__fixsfsi>:
c002701d:	55                   	push   ebp
c002701e:	89 e5                	mov    ebp,esp
c0027020:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027023:	89 d1                	mov    ecx,edx
c0027025:	c1 e1 08             	shl    ecx,0x8
c0027028:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002702e:	c1 fa 17             	sar    edx,0x17
c0027031:	78 1c                	js     c002704f <__fixsfsi+0x32>
c0027033:	83 ea 7f             	sub    edx,0x7f
c0027036:	31 c0                	xor    eax,eax
c0027038:	83 fa 1e             	cmp    edx,0x1e
c002703b:	77 40                	ja     c002707d <__fixsfsi+0x60>
c002703d:	89 c8                	mov    eax,ecx
c002703f:	0d 00 00 00 80       	or     eax,0x80000000
c0027044:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027049:	29 d1                	sub    ecx,edx
c002704b:	d3 e8                	shr    eax,cl
c002704d:	eb 2e                	jmp    c002707d <__fixsfsi+0x60>
c002704f:	31 c0                	xor    eax,eax
c0027051:	81 c2 81 00 00 00    	add    edx,0x81
c0027057:	78 24                	js     c002707d <__fixsfsi+0x60>
c0027059:	83 fa 1e             	cmp    edx,0x1e
c002705c:	7e 09                	jle    c0027067 <__fixsfsi+0x4a>
c002705e:	83 fa 1f             	cmp    edx,0x1f
c0027061:	75 18                	jne    c002707b <__fixsfsi+0x5e>
c0027063:	85 c9                	test   ecx,ecx
c0027065:	75 14                	jne    c002707b <__fixsfsi+0x5e>
c0027067:	89 c8                	mov    eax,ecx
c0027069:	0d 00 00 00 80       	or     eax,0x80000000
c002706e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027073:	29 d1                	sub    ecx,edx
c0027075:	d3 e8                	shr    eax,cl
c0027077:	f7 d8                	neg    eax
c0027079:	eb 02                	jmp    c002707d <__fixsfsi+0x60>
c002707b:	31 c0                	xor    eax,eax
c002707d:	5d                   	pop    ebp
c002707e:	c3                   	ret    

c002707f <__fixunssfsi>:
c002707f:	55                   	push   ebp
c0027080:	89 e5                	mov    ebp,esp
c0027082:	53                   	push   ebx
c0027083:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027086:	89 d3                	mov    ebx,edx
c0027088:	c1 fb 17             	sar    ebx,0x17
c002708b:	83 eb 7f             	sub    ebx,0x7f
c002708e:	31 c0                	xor    eax,eax
c0027090:	83 fb 1f             	cmp    ebx,0x1f
c0027093:	77 18                	ja     c00270ad <__fixunssfsi+0x2e>
c0027095:	89 d0                	mov    eax,edx
c0027097:	c1 e0 08             	shl    eax,0x8
c002709a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002709f:	0d 00 00 00 80       	or     eax,0x80000000
c00270a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00270a9:	29 d9                	sub    ecx,ebx
c00270ab:	d3 e8                	shr    eax,cl
c00270ad:	5b                   	pop    ebx
c00270ae:	5d                   	pop    ebp
c00270af:	c3                   	ret    

c00270b0 <__cmpsf2>:
c00270b0:	55                   	push   ebp
c00270b1:	89 e5                	mov    ebp,esp
c00270b3:	57                   	push   edi
c00270b4:	56                   	push   esi
c00270b5:	53                   	push   ebx
c00270b6:	83 ec 24             	sub    esp,0x24
c00270b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270bf:	e8 4f 10 00 00       	call   c0028113 <__truncdfsf2>
c00270c4:	5a                   	pop    edx
c00270c5:	59                   	pop    ecx
c00270c6:	89 c3                	mov    ebx,eax
c00270c8:	c1 e8 17             	shr    eax,0x17
c00270cb:	0f b6 f0             	movzx  esi,al
c00270ce:	89 d8                	mov    eax,ebx
c00270d0:	c1 e8 1f             	shr    eax,0x1f
c00270d3:	31 c6                	xor    esi,eax
c00270d5:	c1 e3 08             	shl    ebx,0x8
c00270d8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270db:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270de:	e8 30 10 00 00       	call   c0028113 <__truncdfsf2>
c00270e3:	83 c4 10             	add    esp,0x10
c00270e6:	89 c1                	mov    ecx,eax
c00270e8:	c1 e9 17             	shr    ecx,0x17
c00270eb:	0f b6 c9             	movzx  ecx,cl
c00270ee:	89 c7                	mov    edi,eax
c00270f0:	c1 ef 1f             	shr    edi,0x1f
c00270f3:	89 ca                	mov    edx,ecx
c00270f5:	31 fa                	xor    edx,edi
c00270f7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00270fa:	c1 e0 08             	shl    eax,0x8
c00270fd:	89 c2                	mov    edx,eax
c00270ff:	89 d8                	mov    eax,ebx
c0027101:	09 d0                	or     eax,edx
c0027103:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027108:	09 f0                	or     eax,esi
c002710a:	75 08                	jne    c0027114 <__cmpsf2+0x64>
c002710c:	31 c0                	xor    eax,eax
c002710e:	39 f9                	cmp    ecx,edi
c0027110:	75 0c                	jne    c002711e <__cmpsf2+0x6e>
c0027112:	eb 29                	jmp    c002713d <__cmpsf2+0x8d>
c0027114:	b8 01 00 00 00       	mov    eax,0x1
c0027119:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002711c:	7f 1f                	jg     c002713d <__cmpsf2+0x8d>
c002711e:	83 c8 ff             	or     eax,0xffffffff
c0027121:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027124:	7c 17                	jl     c002713d <__cmpsf2+0x8d>
c0027126:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002712c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027132:	b8 01 00 00 00       	mov    eax,0x1
c0027137:	39 d3                	cmp    ebx,edx
c0027139:	77 02                	ja     c002713d <__cmpsf2+0x8d>
c002713b:	19 c0                	sbb    eax,eax
c002713d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027140:	5b                   	pop    ebx
c0027141:	5e                   	pop    esi
c0027142:	5f                   	pop    edi
c0027143:	5d                   	pop    ebp
c0027144:	c3                   	ret    

c0027145 <__eqsf2>:
c0027145:	55                   	push   ebp
c0027146:	89 e5                	mov    ebp,esp
c0027148:	83 ec 24             	sub    esp,0x24
c002714b:	6a 01                	push   0x1
c002714d:	83 ec 0c             	sub    esp,0xc
c0027150:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027153:	e8 df 10 00 00       	call   c0028237 <__extendsfdf2>
c0027158:	83 c4 10             	add    esp,0x10
c002715b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002715e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027161:	52                   	push   edx
c0027162:	50                   	push   eax
c0027163:	50                   	push   eax
c0027164:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027167:	e8 cb 10 00 00       	call   c0028237 <__extendsfdf2>
c002716c:	59                   	pop    ecx
c002716d:	59                   	pop    ecx
c002716e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027171:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027174:	52                   	push   edx
c0027175:	50                   	push   eax
c0027176:	e8 35 ff ff ff       	call   c00270b0 <__cmpsf2>
c002717b:	83 c4 20             	add    esp,0x20
c002717e:	c9                   	leave  
c002717f:	c3                   	ret    

c0027180 <__nesf2>:
c0027180:	eb c3                	jmp    c0027145 <__eqsf2>

c0027182 <__gtsf2>:
c0027182:	55                   	push   ebp
c0027183:	89 e5                	mov    ebp,esp
c0027185:	83 ec 24             	sub    esp,0x24
c0027188:	6a ff                	push   0xffffffff
c002718a:	83 ec 0c             	sub    esp,0xc
c002718d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027190:	e8 a2 10 00 00       	call   c0028237 <__extendsfdf2>
c0027195:	83 c4 10             	add    esp,0x10
c0027198:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002719b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002719e:	52                   	push   edx
c002719f:	50                   	push   eax
c00271a0:	50                   	push   eax
c00271a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271a4:	e8 8e 10 00 00       	call   c0028237 <__extendsfdf2>
c00271a9:	59                   	pop    ecx
c00271aa:	59                   	pop    ecx
c00271ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00271ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00271b1:	52                   	push   edx
c00271b2:	50                   	push   eax
c00271b3:	e8 f8 fe ff ff       	call   c00270b0 <__cmpsf2>
c00271b8:	83 c4 20             	add    esp,0x20
c00271bb:	c9                   	leave  
c00271bc:	c3                   	ret    

c00271bd <__gesf2>:
c00271bd:	eb c3                	jmp    c0027182 <__gtsf2>

c00271bf <__ltsf2>:
c00271bf:	eb 84                	jmp    c0027145 <__eqsf2>

c00271c1 <__lesf2>:
c00271c1:	eb 82                	jmp    c0027145 <__eqsf2>

c00271c3 <__adddf3>:
c00271c3:	55                   	push   ebp
c00271c4:	89 e5                	mov    ebp,esp
c00271c6:	57                   	push   edi
c00271c7:	56                   	push   esi
c00271c8:	53                   	push   ebx
c00271c9:	83 ec 24             	sub    esp,0x24
c00271cc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00271cf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00271d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00271d5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00271db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00271de:	89 c8                	mov    eax,ecx
c00271e0:	89 ce                	mov    esi,ecx
c00271e2:	c1 fe 14             	sar    esi,0x14
c00271e5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00271e8:	89 fb                	mov    ebx,edi
c00271ea:	89 fa                	mov    edx,edi
c00271ec:	c1 e2 0b             	shl    edx,0xb
c00271ef:	c1 e0 0b             	shl    eax,0xb
c00271f2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271f7:	c1 eb 15             	shr    ebx,0x15
c00271fa:	09 d8                	or     eax,ebx
c00271fc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00271ff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027202:	c1 fe 14             	sar    esi,0x14
c0027205:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027208:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002720b:	89 f3                	mov    ebx,esi
c002720d:	c1 e3 0b             	shl    ebx,0xb
c0027210:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027213:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027216:	c1 e3 0b             	shl    ebx,0xb
c0027219:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002721f:	c1 ee 15             	shr    esi,0x15
c0027222:	09 f3                	or     ebx,esi
c0027224:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027227:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002722a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002722d:	0f 88 5f 02 00 00    	js     c0027492 <__adddf3+0x2cf>
c0027233:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027236:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027239:	85 db                	test   ebx,ebx
c002723b:	0f 8e c7 00 00 00    	jle    c0027308 <__adddf3+0x145>
c0027241:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027248:	75 1a                	jne    c0027264 <__adddf3+0xa1>
c002724a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002724d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027250:	0f 84 b2 05 00 00    	je     c0027808 <__adddf3+0x645>
c0027256:	4b                   	dec    ebx
c0027257:	75 23                	jne    c002727c <__adddf3+0xb9>
c0027259:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002725c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002725f:	e9 99 00 00 00       	jmp    c00272fd <__adddf3+0x13a>
c0027264:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027267:	f7 d6                	not    esi
c0027269:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002726f:	0f 84 93 05 00 00    	je     c0027808 <__adddf3+0x645>
c0027275:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002727c:	83 fb 1f             	cmp    ebx,0x1f
c002727f:	7e 42                	jle    c00272c3 <__adddf3+0x100>
c0027281:	83 fb 3f             	cmp    ebx,0x3f
c0027284:	0f 8f 7e 05 00 00    	jg     c0027808 <__adddf3+0x645>
c002728a:	83 e3 1f             	and    ebx,0x1f
c002728d:	89 d9                	mov    ecx,ebx
c002728f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027292:	d3 ef                	shr    edi,cl
c0027294:	31 db                	xor    ebx,ebx
c0027296:	85 c9                	test   ecx,ecx
c0027298:	74 15                	je     c00272af <__adddf3+0xec>
c002729a:	be 20 00 00 00       	mov    esi,0x20
c002729f:	29 ce                	sub    esi,ecx
c00272a1:	89 f1                	mov    ecx,esi
c00272a3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272a6:	d3 e6                	shl    esi,cl
c00272a8:	31 db                	xor    ebx,ebx
c00272aa:	85 f6                	test   esi,esi
c00272ac:	0f 95 c3             	setne  bl
c00272af:	31 c9                	xor    ecx,ecx
c00272b1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272b5:	0f 95 c1             	setne  cl
c00272b8:	09 cf                	or     edi,ecx
c00272ba:	09 fb                	or     ebx,edi
c00272bc:	01 da                	add    edx,ebx
c00272be:	83 d0 00             	adc    eax,0x0
c00272c1:	eb 3a                	jmp    c00272fd <__adddf3+0x13a>
c00272c3:	bf 20 00 00 00       	mov    edi,0x20
c00272c8:	29 df                	sub    edi,ebx
c00272ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272d0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272d3:	d3 e6                	shl    esi,cl
c00272d5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272d8:	88 d9                	mov    cl,bl
c00272da:	d3 ef                	shr    edi,cl
c00272dc:	09 fe                	or     esi,edi
c00272de:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272e1:	88 d9                	mov    cl,bl
c00272e3:	d3 ef                	shr    edi,cl
c00272e5:	89 fb                	mov    ebx,edi
c00272e7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272ea:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272ed:	d3 e7                	shl    edi,cl
c00272ef:	85 ff                	test   edi,edi
c00272f1:	0f 95 c1             	setne  cl
c00272f4:	0f b6 c9             	movzx  ecx,cl
c00272f7:	09 ce                	or     esi,ecx
c00272f9:	01 f2                	add    edx,esi
c00272fb:	11 d8                	adc    eax,ebx
c00272fd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027300:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027303:	e9 52 01 00 00       	jmp    c002745a <__adddf3+0x297>
c0027308:	0f 84 d5 00 00 00    	je     c00273e3 <__adddf3+0x220>
c002730e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027311:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027314:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027317:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002731a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027321:	75 20                	jne    c0027343 <__adddf3+0x180>
c0027323:	89 d6                	mov    esi,edx
c0027325:	09 c6                	or     esi,eax
c0027327:	0f 84 db 04 00 00    	je     c0027808 <__adddf3+0x645>
c002732d:	4b                   	dec    ebx
c002732e:	75 29                	jne    c0027359 <__adddf3+0x196>
c0027330:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027333:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027336:	01 d1                	add    ecx,edx
c0027338:	11 c6                	adc    esi,eax
c002733a:	89 f0                	mov    eax,esi
c002733c:	89 ca                	mov    edx,ecx
c002733e:	e9 17 01 00 00       	jmp    c002745a <__adddf3+0x297>
c0027343:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027346:	f7 d6                	not    esi
c0027348:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002734e:	0f 84 b4 04 00 00    	je     c0027808 <__adddf3+0x645>
c0027354:	0d 00 00 00 80       	or     eax,0x80000000
c0027359:	83 fb 1f             	cmp    ebx,0x1f
c002735c:	7e 48                	jle    c00273a6 <__adddf3+0x1e3>
c002735e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027361:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027364:	83 fb 3f             	cmp    ebx,0x3f
c0027367:	0f 8f 9b 04 00 00    	jg     c0027808 <__adddf3+0x645>
c002736d:	83 e3 1f             	and    ebx,0x1f
c0027370:	89 d9                	mov    ecx,ebx
c0027372:	89 c7                	mov    edi,eax
c0027374:	d3 ef                	shr    edi,cl
c0027376:	31 db                	xor    ebx,ebx
c0027378:	85 c9                	test   ecx,ecx
c002737a:	74 12                	je     c002738e <__adddf3+0x1cb>
c002737c:	be 20 00 00 00       	mov    esi,0x20
c0027381:	29 ce                	sub    esi,ecx
c0027383:	89 f1                	mov    ecx,esi
c0027385:	d3 e0                	shl    eax,cl
c0027387:	31 db                	xor    ebx,ebx
c0027389:	85 c0                	test   eax,eax
c002738b:	0f 95 c3             	setne  bl
c002738e:	31 c0                	xor    eax,eax
c0027390:	85 d2                	test   edx,edx
c0027392:	0f 95 c0             	setne  al
c0027395:	09 c7                	or     edi,eax
c0027397:	09 fb                	or     ebx,edi
c0027399:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002739c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002739f:	01 da                	add    edx,ebx
c00273a1:	83 d6 00             	adc    esi,0x0
c00273a4:	eb 39                	jmp    c00273df <__adddf3+0x21c>
c00273a6:	be 20 00 00 00       	mov    esi,0x20
c00273ab:	29 de                	sub    esi,ebx
c00273ad:	89 c7                	mov    edi,eax
c00273af:	89 f1                	mov    ecx,esi
c00273b1:	d3 e7                	shl    edi,cl
c00273b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00273b6:	89 d7                	mov    edi,edx
c00273b8:	88 d9                	mov    cl,bl
c00273ba:	d3 ef                	shr    edi,cl
c00273bc:	89 f9                	mov    ecx,edi
c00273be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273c1:	09 cf                	or     edi,ecx
c00273c3:	88 d9                	mov    cl,bl
c00273c5:	d3 e8                	shr    eax,cl
c00273c7:	89 f1                	mov    ecx,esi
c00273c9:	d3 e2                	shl    edx,cl
c00273cb:	85 d2                	test   edx,edx
c00273cd:	0f 95 c2             	setne  dl
c00273d0:	0f b6 d2             	movzx  edx,dl
c00273d3:	09 d7                	or     edi,edx
c00273d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273db:	01 fa                	add    edx,edi
c00273dd:	11 c6                	adc    esi,eax
c00273df:	89 f0                	mov    eax,esi
c00273e1:	eb 77                	jmp    c002745a <__adddf3+0x297>
c00273e3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273e6:	46                   	inc    esi
c00273e7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273ea:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273f0:	75 41                	jne    c0027433 <__adddf3+0x270>
c00273f2:	89 d3                	mov    ebx,edx
c00273f4:	09 c3                	or     ebx,eax
c00273f6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273fd:	75 27                	jne    c0027426 <__adddf3+0x263>
c00273ff:	85 db                	test   ebx,ebx
c0027401:	0f 84 fb 03 00 00    	je     c0027802 <__adddf3+0x63f>
c0027407:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002740a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002740d:	0f 84 f5 03 00 00    	je     c0027808 <__adddf3+0x645>
c0027413:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027416:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027419:	85 c0                	test   eax,eax
c002741b:	0f 89 91 03 00 00    	jns    c00277b2 <__adddf3+0x5ef>
c0027421:	e9 85 03 00 00       	jmp    c00277ab <__adddf3+0x5e8>
c0027426:	85 db                	test   ebx,ebx
c0027428:	0f 85 da 03 00 00    	jne    c0027808 <__adddf3+0x645>
c002742e:	e9 cf 03 00 00       	jmp    c0027802 <__adddf3+0x63f>
c0027433:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027436:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027439:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002743c:	f7 d1                	not    ecx
c002743e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027444:	0f 84 70 03 00 00    	je     c00277ba <__adddf3+0x5f7>
c002744a:	d1 ea                	shr    edx,1
c002744c:	89 c1                	mov    ecx,eax
c002744e:	c1 e1 1f             	shl    ecx,0x1f
c0027451:	09 ca                	or     edx,ecx
c0027453:	d1 e8                	shr    eax,1
c0027455:	e9 6f 03 00 00       	jmp    c00277c9 <__adddf3+0x606>
c002745a:	85 c0                	test   eax,eax
c002745c:	0f 89 67 03 00 00    	jns    c00277c9 <__adddf3+0x606>
c0027462:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027465:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027468:	f7 d1                	not    ecx
c002746a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027470:	0f 84 44 03 00 00    	je     c00277ba <__adddf3+0x5f7>
c0027476:	89 d1                	mov    ecx,edx
c0027478:	d1 e9                	shr    ecx,1
c002747a:	83 e2 01             	and    edx,0x1
c002747d:	09 ca                	or     edx,ecx
c002747f:	89 c1                	mov    ecx,eax
c0027481:	c1 e1 1f             	shl    ecx,0x1f
c0027484:	09 ca                	or     edx,ecx
c0027486:	d1 e8                	shr    eax,1
c0027488:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002748d:	e9 37 03 00 00       	jmp    c00277c9 <__adddf3+0x606>
c0027492:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027495:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002749b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002749e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00274a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274a7:	29 de                	sub    esi,ebx
c00274a9:	85 f6                	test   esi,esi
c00274ab:	0f 8e bd 00 00 00    	jle    c002756e <__adddf3+0x3ab>
c00274b1:	85 db                	test   ebx,ebx
c00274b3:	75 17                	jne    c00274cc <__adddf3+0x309>
c00274b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00274b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00274bb:	0f 84 47 03 00 00    	je     c0027808 <__adddf3+0x645>
c00274c1:	4e                   	dec    esi
c00274c2:	75 20                	jne    c00274e4 <__adddf3+0x321>
c00274c4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00274c7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00274ca:	eb 5b                	jmp    c0027527 <__adddf3+0x364>
c00274cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274cf:	f7 d3                	not    ebx
c00274d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274d7:	0f 84 2b 03 00 00    	je     c0027808 <__adddf3+0x645>
c00274dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274e4:	83 fe 1f             	cmp    esi,0x1f
c00274e7:	7e 49                	jle    c0027532 <__adddf3+0x36f>
c00274e9:	83 fe 3f             	cmp    esi,0x3f
c00274ec:	0f 8f 16 03 00 00    	jg     c0027808 <__adddf3+0x645>
c00274f2:	83 e6 1f             	and    esi,0x1f
c00274f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274f8:	89 f1                	mov    ecx,esi
c00274fa:	d3 ef                	shr    edi,cl
c00274fc:	31 db                	xor    ebx,ebx
c00274fe:	85 f6                	test   esi,esi
c0027500:	74 13                	je     c0027515 <__adddf3+0x352>
c0027502:	b9 20 00 00 00       	mov    ecx,0x20
c0027507:	29 f1                	sub    ecx,esi
c0027509:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002750c:	d3 e6                	shl    esi,cl
c002750e:	31 db                	xor    ebx,ebx
c0027510:	85 f6                	test   esi,esi
c0027512:	0f 95 c3             	setne  bl
c0027515:	31 c9                	xor    ecx,ecx
c0027517:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002751b:	0f 95 c1             	setne  cl
c002751e:	09 cf                	or     edi,ecx
c0027520:	09 fb                	or     ebx,edi
c0027522:	29 da                	sub    edx,ebx
c0027524:	83 d8 00             	sbb    eax,0x0
c0027527:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002752a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002752d:	e9 aa 01 00 00       	jmp    c00276dc <__adddf3+0x519>
c0027532:	bf 20 00 00 00       	mov    edi,0x20
c0027537:	29 f7                	sub    edi,esi
c0027539:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002753c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002753f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027542:	d3 e3                	shl    ebx,cl
c0027544:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027547:	89 f1                	mov    ecx,esi
c0027549:	d3 ef                	shr    edi,cl
c002754b:	09 fb                	or     ebx,edi
c002754d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027550:	89 f1                	mov    ecx,esi
c0027552:	d3 ef                	shr    edi,cl
c0027554:	89 fe                	mov    esi,edi
c0027556:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027559:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002755c:	d3 e7                	shl    edi,cl
c002755e:	85 ff                	test   edi,edi
c0027560:	0f 95 c1             	setne  cl
c0027563:	0f b6 c9             	movzx  ecx,cl
c0027566:	09 cb                	or     ebx,ecx
c0027568:	29 da                	sub    edx,ebx
c002756a:	19 f0                	sbb    eax,esi
c002756c:	eb b9                	jmp    c0027527 <__adddf3+0x364>
c002756e:	0f 84 cd 00 00 00    	je     c0027641 <__adddf3+0x47e>
c0027574:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027577:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002757a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002757d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027581:	75 1b                	jne    c002759e <__adddf3+0x3db>
c0027583:	89 d6                	mov    esi,edx
c0027585:	09 c6                	or     esi,eax
c0027587:	0f 84 7b 02 00 00    	je     c0027808 <__adddf3+0x645>
c002758d:	4b                   	dec    ebx
c002758e:	75 24                	jne    c00275b4 <__adddf3+0x3f1>
c0027590:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027593:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027596:	29 d1                	sub    ecx,edx
c0027598:	19 c6                	sbb    esi,eax
c002759a:	89 ca                	mov    edx,ecx
c002759c:	eb 61                	jmp    c00275ff <__adddf3+0x43c>
c002759e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00275a1:	f7 d6                	not    esi
c00275a3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275a9:	0f 84 59 02 00 00    	je     c0027808 <__adddf3+0x645>
c00275af:	0d 00 00 00 80       	or     eax,0x80000000
c00275b4:	83 fb 1f             	cmp    ebx,0x1f
c00275b7:	7e 4d                	jle    c0027606 <__adddf3+0x443>
c00275b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275bf:	83 fb 3f             	cmp    ebx,0x3f
c00275c2:	0f 8f 40 02 00 00    	jg     c0027808 <__adddf3+0x645>
c00275c8:	83 e3 1f             	and    ebx,0x1f
c00275cb:	89 d9                	mov    ecx,ebx
c00275cd:	89 c7                	mov    edi,eax
c00275cf:	d3 ef                	shr    edi,cl
c00275d1:	31 db                	xor    ebx,ebx
c00275d3:	85 c9                	test   ecx,ecx
c00275d5:	74 12                	je     c00275e9 <__adddf3+0x426>
c00275d7:	be 20 00 00 00       	mov    esi,0x20
c00275dc:	29 ce                	sub    esi,ecx
c00275de:	89 f1                	mov    ecx,esi
c00275e0:	d3 e0                	shl    eax,cl
c00275e2:	31 db                	xor    ebx,ebx
c00275e4:	85 c0                	test   eax,eax
c00275e6:	0f 95 c3             	setne  bl
c00275e9:	31 c0                	xor    eax,eax
c00275eb:	85 d2                	test   edx,edx
c00275ed:	0f 95 c0             	setne  al
c00275f0:	09 c7                	or     edi,eax
c00275f2:	09 fb                	or     ebx,edi
c00275f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275fa:	29 da                	sub    edx,ebx
c00275fc:	83 de 00             	sbb    esi,0x0
c00275ff:	89 f0                	mov    eax,esi
c0027601:	e9 d6 00 00 00       	jmp    c00276dc <__adddf3+0x519>
c0027606:	be 20 00 00 00       	mov    esi,0x20
c002760b:	29 de                	sub    esi,ebx
c002760d:	89 c7                	mov    edi,eax
c002760f:	89 f1                	mov    ecx,esi
c0027611:	d3 e7                	shl    edi,cl
c0027613:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027616:	89 d7                	mov    edi,edx
c0027618:	88 d9                	mov    cl,bl
c002761a:	d3 ef                	shr    edi,cl
c002761c:	89 f9                	mov    ecx,edi
c002761e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027621:	09 cf                	or     edi,ecx
c0027623:	88 d9                	mov    cl,bl
c0027625:	d3 e8                	shr    eax,cl
c0027627:	89 f1                	mov    ecx,esi
c0027629:	d3 e2                	shl    edx,cl
c002762b:	85 d2                	test   edx,edx
c002762d:	0f 95 c2             	setne  dl
c0027630:	0f b6 d2             	movzx  edx,dl
c0027633:	09 d7                	or     edi,edx
c0027635:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027638:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002763b:	29 fa                	sub    edx,edi
c002763d:	19 c6                	sbb    esi,eax
c002763f:	eb be                	jmp    c00275ff <__adddf3+0x43c>
c0027641:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027644:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027647:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002764d:	75 6a                	jne    c00276b9 <__adddf3+0x4f6>
c002764f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027653:	75 58                	jne    c00276ad <__adddf3+0x4ea>
c0027655:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027658:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002765b:	89 d6                	mov    esi,edx
c002765d:	09 c6                	or     esi,eax
c002765f:	75 17                	jne    c0027678 <__adddf3+0x4b5>
c0027661:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027664:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027667:	85 db                	test   ebx,ebx
c0027669:	0f 85 99 01 00 00    	jne    c0027808 <__adddf3+0x645>
c002766f:	31 ff                	xor    edi,edi
c0027671:	31 c9                	xor    ecx,ecx
c0027673:	e9 90 01 00 00       	jmp    c0027808 <__adddf3+0x645>
c0027678:	85 db                	test   ebx,ebx
c002767a:	0f 84 88 01 00 00    	je     c0027808 <__adddf3+0x645>
c0027680:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027683:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027686:	85 c0                	test   eax,eax
c0027688:	79 10                	jns    c002769a <__adddf3+0x4d7>
c002768a:	31 c9                	xor    ecx,ecx
c002768c:	f7 da                	neg    edx
c002768e:	0f 95 c1             	setne  cl
c0027691:	01 c8                	add    eax,ecx
c0027693:	f7 d8                	neg    eax
c0027695:	e9 2f 01 00 00       	jmp    c00277c9 <__adddf3+0x606>
c002769a:	31 ff                	xor    edi,edi
c002769c:	31 c9                	xor    ecx,ecx
c002769e:	89 c3                	mov    ebx,eax
c00276a0:	09 d3                	or     ebx,edx
c00276a2:	0f 84 60 01 00 00    	je     c0027808 <__adddf3+0x645>
c00276a8:	e9 05 01 00 00       	jmp    c00277b2 <__adddf3+0x5ef>
c00276ad:	31 ff                	xor    edi,edi
c00276af:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00276b4:	e9 4f 01 00 00       	jmp    c0027808 <__adddf3+0x645>
c00276b9:	89 c1                	mov    ecx,eax
c00276bb:	89 d0                	mov    eax,edx
c00276bd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00276c0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00276c3:	89 ca                	mov    edx,ecx
c00276c5:	85 c9                	test   ecx,ecx
c00276c7:	79 2c                	jns    c00276f5 <__adddf3+0x532>
c00276c9:	31 c9                	xor    ecx,ecx
c00276cb:	f7 d8                	neg    eax
c00276cd:	0f 95 c1             	setne  cl
c00276d0:	01 ca                	add    edx,ecx
c00276d2:	f7 da                	neg    edx
c00276d4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00276d7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276da:	eb 19                	jmp    c00276f5 <__adddf3+0x532>
c00276dc:	85 c0                	test   eax,eax
c00276de:	0f 89 e5 00 00 00    	jns    c00277c9 <__adddf3+0x606>
c00276e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276e9:	89 c1                	mov    ecx,eax
c00276eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276ee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276f1:	89 d0                	mov    eax,edx
c00276f3:	89 ca                	mov    edx,ecx
c00276f5:	85 d2                	test   edx,edx
c00276f7:	74 59                	je     c0027752 <__adddf3+0x58f>
c00276f9:	0f bd da             	bsr    ebx,edx
c00276fc:	83 f3 1f             	xor    ebx,0x1f
c00276ff:	88 d9                	mov    cl,bl
c0027701:	d3 e2                	shl    edx,cl
c0027703:	bf 20 00 00 00       	mov    edi,0x20
c0027708:	89 f9                	mov    ecx,edi
c002770a:	29 d9                	sub    ecx,ebx
c002770c:	89 c6                	mov    esi,eax
c002770e:	d3 ee                	shr    esi,cl
c0027710:	09 d6                	or     esi,edx
c0027712:	88 d9                	mov    cl,bl
c0027714:	d3 e0                	shl    eax,cl
c0027716:	89 c2                	mov    edx,eax
c0027718:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002771b:	25 ff 07 00 00       	and    eax,0x7ff
c0027720:	39 d8                	cmp    eax,ebx
c0027722:	7f 22                	jg     c0027746 <__adddf3+0x583>
c0027724:	29 c3                	sub    ebx,eax
c0027726:	43                   	inc    ebx
c0027727:	88 d9                	mov    cl,bl
c0027729:	d3 ea                	shr    edx,cl
c002772b:	29 df                	sub    edi,ebx
c002772d:	89 f9                	mov    ecx,edi
c002772f:	89 f0                	mov    eax,esi
c0027731:	d3 e0                	shl    eax,cl
c0027733:	09 c2                	or     edx,eax
c0027735:	89 f0                	mov    eax,esi
c0027737:	88 d9                	mov    cl,bl
c0027739:	d3 e8                	shr    eax,cl
c002773b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002773e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027744:	eb 6f                	jmp    c00277b5 <__adddf3+0x5f2>
c0027746:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027749:	29 d8                	sub    eax,ebx
c002774b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002774e:	89 f0                	mov    eax,esi
c0027750:	eb 59                	jmp    c00277ab <__adddf3+0x5e8>
c0027752:	85 c0                	test   eax,eax
c0027754:	74 6a                	je     c00277c0 <__adddf3+0x5fd>
c0027756:	0f bd c8             	bsr    ecx,eax
c0027759:	83 f1 1f             	xor    ecx,0x1f
c002775c:	d3 e0                	shl    eax,cl
c002775e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027761:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027767:	83 c1 20             	add    ecx,0x20
c002776a:	39 cb                	cmp    ebx,ecx
c002776c:	7f 35                	jg     c00277a3 <__adddf3+0x5e0>
c002776e:	29 d9                	sub    ecx,ebx
c0027770:	8d 71 01             	lea    esi,[ecx+0x1]
c0027773:	83 fe 1f             	cmp    esi,0x1f
c0027776:	7e 09                	jle    c0027781 <__adddf3+0x5be>
c0027778:	83 e9 1f             	sub    ecx,0x1f
c002777b:	d3 e8                	shr    eax,cl
c002777d:	89 c3                	mov    ebx,eax
c002777f:	eb 11                	jmp    c0027792 <__adddf3+0x5cf>
c0027781:	b9 20 00 00 00       	mov    ecx,0x20
c0027786:	29 f1                	sub    ecx,esi
c0027788:	89 c3                	mov    ebx,eax
c002778a:	d3 e3                	shl    ebx,cl
c002778c:	89 f1                	mov    ecx,esi
c002778e:	d3 e8                	shr    eax,cl
c0027790:	89 c2                	mov    edx,eax
c0027792:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027795:	25 00 f8 ff ff       	and    eax,0xfffff800
c002779a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002779d:	89 d0                	mov    eax,edx
c002779f:	89 da                	mov    edx,ebx
c00277a1:	eb 26                	jmp    c00277c9 <__adddf3+0x606>
c00277a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277a6:	29 cf                	sub    edi,ecx
c00277a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277ab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277b0:	eb 17                	jmp    c00277c9 <__adddf3+0x606>
c00277b2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277b5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277b8:	eb 0f                	jmp    c00277c9 <__adddf3+0x606>
c00277ba:	31 d2                	xor    edx,edx
c00277bc:	31 c0                	xor    eax,eax
c00277be:	eb 09                	jmp    c00277c9 <__adddf3+0x606>
c00277c0:	89 c2                	mov    edx,eax
c00277c2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00277c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277cc:	c1 e1 14             	shl    ecx,0x14
c00277cf:	89 c3                	mov    ebx,eax
c00277d1:	c1 eb 0b             	shr    ebx,0xb
c00277d4:	09 d9                	or     ecx,ebx
c00277d6:	89 d3                	mov    ebx,edx
c00277d8:	c1 eb 0b             	shr    ebx,0xb
c00277db:	c1 e0 15             	shl    eax,0x15
c00277de:	09 d8                	or     eax,ebx
c00277e0:	89 c7                	mov    edi,eax
c00277e2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00277e8:	0f 95 c0             	setne  al
c00277eb:	89 c6                	mov    esi,eax
c00277ed:	09 f3                	or     ebx,esi
c00277ef:	83 e3 01             	and    ebx,0x1
c00277f2:	c1 ea 0a             	shr    edx,0xa
c00277f5:	21 da                	and    edx,ebx
c00277f7:	89 f8                	mov    eax,edi
c00277f9:	01 d0                	add    eax,edx
c00277fb:	83 d1 00             	adc    ecx,0x0
c00277fe:	89 c7                	mov    edi,eax
c0027800:	eb 06                	jmp    c0027808 <__adddf3+0x645>
c0027802:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027805:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027808:	89 f8                	mov    eax,edi
c002780a:	89 ca                	mov    edx,ecx
c002780c:	83 c4 24             	add    esp,0x24
c002780f:	5b                   	pop    ebx
c0027810:	5e                   	pop    esi
c0027811:	5f                   	pop    edi
c0027812:	5d                   	pop    ebp
c0027813:	c3                   	ret    

c0027814 <__subdf3>:
c0027814:	55                   	push   ebp
c0027815:	89 e5                	mov    ebp,esp
c0027817:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002781a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002781d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027823:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027826:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027829:	5d                   	pop    ebp
c002782a:	e9 94 f9 ff ff       	jmp    c00271c3 <__adddf3>

c002782f <__negdf2>:
c002782f:	55                   	push   ebp
c0027830:	89 e5                	mov    ebp,esp
c0027832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027835:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027838:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002783e:	5d                   	pop    ebp
c002783f:	c3                   	ret    

c0027840 <__muldf3>:
c0027840:	55                   	push   ebp
c0027841:	89 e5                	mov    ebp,esp
c0027843:	57                   	push   edi
c0027844:	56                   	push   esi
c0027845:	53                   	push   ebx
c0027846:	83 ec 24             	sub    esp,0x24
c0027849:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002784c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002784f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027852:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027855:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027858:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002785b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002785e:	89 c8                	mov    eax,ecx
c0027860:	c1 f8 14             	sar    eax,0x14
c0027863:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027866:	89 f8                	mov    eax,edi
c0027868:	89 fb                	mov    ebx,edi
c002786a:	c1 e3 0b             	shl    ebx,0xb
c002786d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027870:	c1 e1 0b             	shl    ecx,0xb
c0027873:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027879:	c1 e8 15             	shr    eax,0x15
c002787c:	09 c1                	or     ecx,eax
c002787e:	89 d6                	mov    esi,edx
c0027880:	89 d0                	mov    eax,edx
c0027882:	c1 f8 14             	sar    eax,0x14
c0027885:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027888:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002788b:	89 c3                	mov    ebx,eax
c002788d:	c1 e3 0b             	shl    ebx,0xb
c0027890:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027893:	c1 e6 0b             	shl    esi,0xb
c0027896:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002789c:	c1 e8 15             	shr    eax,0x15
c002789f:	09 c6                	or     esi,eax
c00278a1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278a4:	25 ff 07 00 00       	and    eax,0x7ff
c00278a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00278ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278af:	25 ff 07 00 00       	and    eax,0x7ff
c00278b4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00278b7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00278ba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00278bd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00278c4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278c7:	40                   	inc    eax
c00278c8:	a9 fe 07 00 00       	test   eax,0x7fe
c00278cd:	0f 85 8d 00 00 00    	jne    c0027960 <__muldf3+0x120>
c00278d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278d6:	09 c8                	or     eax,ecx
c00278d8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00278dc:	74 44                	je     c0027922 <__muldf3+0xe2>
c00278de:	85 c0                	test   eax,eax
c00278e0:	0f 85 31 02 00 00    	jne    c0027b17 <__muldf3+0x2d7>
c00278e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278e9:	40                   	inc    eax
c00278ea:	a9 fe 07 00 00       	test   eax,0x7fe
c00278ef:	75 13                	jne    c0027904 <__muldf3+0xc4>
c00278f1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278f4:	09 f1                	or     ecx,esi
c00278f6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278fa:	74 22                	je     c002791e <__muldf3+0xde>
c00278fc:	85 c9                	test   ecx,ecx
c00278fe:	0f 85 0d 02 00 00    	jne    c0027b11 <__muldf3+0x2d1>
c0027904:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027908:	0f 89 09 02 00 00    	jns    c0027b17 <__muldf3+0x2d7>
c002790e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027911:	05 00 00 00 80       	add    eax,0x80000000
c0027916:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027919:	e9 f9 01 00 00       	jmp    c0027b17 <__muldf3+0x2d7>
c002791e:	85 c9                	test   ecx,ecx
c0027920:	eb 2e                	jmp    c0027950 <__muldf3+0x110>
c0027922:	85 c0                	test   eax,eax
c0027924:	74 20                	je     c0027946 <__muldf3+0x106>
c0027926:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027929:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002792c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002792f:	c1 ef 1f             	shr    edi,0x1f
c0027932:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027935:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027938:	8d 43 ff             	lea    eax,[ebx-0x1]
c002793b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002793e:	09 f9                	or     ecx,edi
c0027940:	78 1e                	js     c0027960 <__muldf3+0x120>
c0027942:	89 c3                	mov    ebx,eax
c0027944:	eb e0                	jmp    c0027926 <__muldf3+0xe6>
c0027946:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027949:	f7 d0                	not    eax
c002794b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027950:	75 b2                	jne    c0027904 <__muldf3+0xc4>
c0027952:	31 ff                	xor    edi,edi
c0027954:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002795b:	e9 b7 01 00 00       	jmp    c0027b17 <__muldf3+0x2d7>
c0027960:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027963:	40                   	inc    eax
c0027964:	a9 fe 07 00 00       	test   eax,0x7fe
c0027969:	75 57                	jne    c00279c2 <__muldf3+0x182>
c002796b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002796e:	09 f0                	or     eax,esi
c0027970:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027974:	74 23                	je     c0027999 <__muldf3+0x159>
c0027976:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002797a:	0f 89 91 01 00 00    	jns    c0027b11 <__muldf3+0x2d1>
c0027980:	85 c0                	test   eax,eax
c0027982:	0f 85 89 01 00 00    	jne    c0027b11 <__muldf3+0x2d1>
c0027988:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002798b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027991:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027994:	e9 7e 01 00 00       	jmp    c0027b17 <__muldf3+0x2d7>
c0027999:	85 c0                	test   eax,eax
c002799b:	75 0c                	jne    c00279a9 <__muldf3+0x169>
c002799d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00279a1:	0f 89 6a 01 00 00    	jns    c0027b11 <__muldf3+0x2d1>
c00279a7:	eb df                	jmp    c0027988 <__muldf3+0x148>
c00279a9:	01 f6                	add    esi,esi
c00279ab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ae:	c1 ea 1f             	shr    edx,0x1f
c00279b1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279b4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00279b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279ba:	09 d6                	or     esi,edx
c00279bc:	78 04                	js     c00279c2 <__muldf3+0x182>
c00279be:	89 c3                	mov    ebx,eax
c00279c0:	eb e7                	jmp    c00279a9 <__muldf3+0x169>
c00279c2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00279c8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00279ce:	89 c8                	mov    eax,ecx
c00279d0:	f7 e6                	mul    esi
c00279d2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00279d5:	89 c7                	mov    edi,eax
c00279d7:	89 c8                	mov    eax,ecx
c00279d9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279dc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00279df:	89 c1                	mov    ecx,eax
c00279e1:	89 f0                	mov    eax,esi
c00279e3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00279e6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00279e9:	89 c6                	mov    esi,eax
c00279eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279ee:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279f1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279f4:	31 c0                	xor    eax,eax
c00279f6:	01 f1                	add    ecx,esi
c00279f8:	0f 92 c0             	setb   al
c00279fb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00279fe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027a01:	83 d6 00             	adc    esi,0x0
c0027a04:	01 c7                	add    edi,eax
c0027a06:	83 d6 00             	adc    esi,0x0
c0027a09:	01 ca                	add    edx,ecx
c0027a0b:	0f 92 c1             	setb   cl
c0027a0e:	0f b6 c9             	movzx  ecx,cl
c0027a11:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027a14:	83 d6 00             	adc    esi,0x0
c0027a17:	01 cf                	add    edi,ecx
c0027a19:	83 d6 00             	adc    esi,0x0
c0027a1c:	31 c9                	xor    ecx,ecx
c0027a1e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027a21:	0f 95 c1             	setne  cl
c0027a24:	09 cf                	or     edi,ecx
c0027a26:	85 f6                	test   esi,esi
c0027a28:	78 0c                	js     c0027a36 <__muldf3+0x1f6>
c0027a2a:	01 f6                	add    esi,esi
c0027a2c:	89 f8                	mov    eax,edi
c0027a2e:	c1 e8 1f             	shr    eax,0x1f
c0027a31:	09 c6                	or     esi,eax
c0027a33:	01 ff                	add    edi,edi
c0027a35:	4b                   	dec    ebx
c0027a36:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027a3c:	0f 8f 85 00 00 00    	jg     c0027ac7 <__muldf3+0x287>
c0027a42:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027a48:	85 db                	test   ebx,ebx
c0027a4a:	0f 8f 84 00 00 00    	jg     c0027ad4 <__muldf3+0x294>
c0027a50:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a53:	7c 79                	jl     c0027ace <__muldf3+0x28e>
c0027a55:	ba 01 00 00 00       	mov    edx,0x1
c0027a5a:	29 da                	sub    edx,ebx
c0027a5c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a62:	83 fa 1f             	cmp    edx,0x1f
c0027a65:	7e 30                	jle    c0027a97 <__muldf3+0x257>
c0027a67:	83 fa 20             	cmp    edx,0x20
c0027a6a:	75 0b                	jne    c0027a77 <__muldf3+0x237>
c0027a6c:	31 c0                	xor    eax,eax
c0027a6e:	85 ff                	test   edi,edi
c0027a70:	0f 95 c0             	setne  al
c0027a73:	89 c7                	mov    edi,eax
c0027a75:	eb 1a                	jmp    c0027a91 <__muldf3+0x251>
c0027a77:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a7a:	89 f0                	mov    eax,esi
c0027a7c:	d3 e0                	shl    eax,cl
c0027a7e:	09 f8                	or     eax,edi
c0027a80:	0f 95 c0             	setne  al
c0027a83:	0f b6 c0             	movzx  eax,al
c0027a86:	89 c7                	mov    edi,eax
c0027a88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a8d:	29 d9                	sub    ecx,ebx
c0027a8f:	d3 ee                	shr    esi,cl
c0027a91:	09 f7                	or     edi,esi
c0027a93:	31 db                	xor    ebx,ebx
c0027a95:	eb 3b                	jmp    c0027ad2 <__muldf3+0x292>
c0027a97:	83 c3 1f             	add    ebx,0x1f
c0027a9a:	89 f0                	mov    eax,esi
c0027a9c:	88 d9                	mov    cl,bl
c0027a9e:	d3 e0                	shl    eax,cl
c0027aa0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027aa3:	89 f8                	mov    eax,edi
c0027aa5:	88 d1                	mov    cl,dl
c0027aa7:	d3 e8                	shr    eax,cl
c0027aa9:	89 c1                	mov    ecx,eax
c0027aab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027aae:	09 c8                	or     eax,ecx
c0027ab0:	88 d9                	mov    cl,bl
c0027ab2:	d3 e7                	shl    edi,cl
c0027ab4:	31 db                	xor    ebx,ebx
c0027ab6:	85 ff                	test   edi,edi
c0027ab8:	0f 95 c3             	setne  bl
c0027abb:	89 df                	mov    edi,ebx
c0027abd:	09 c7                	or     edi,eax
c0027abf:	88 d1                	mov    cl,dl
c0027ac1:	d3 ee                	shr    esi,cl
c0027ac3:	31 db                	xor    ebx,ebx
c0027ac5:	eb 0d                	jmp    c0027ad4 <__muldf3+0x294>
c0027ac7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027acc:	eb 02                	jmp    c0027ad0 <__muldf3+0x290>
c0027ace:	31 db                	xor    ebx,ebx
c0027ad0:	31 ff                	xor    edi,edi
c0027ad2:	31 f6                	xor    esi,esi
c0027ad4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ad7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027ada:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027adf:	09 c3                	or     ebx,eax
c0027ae1:	c1 e3 14             	shl    ebx,0x14
c0027ae4:	89 f0                	mov    eax,esi
c0027ae6:	c1 e8 0b             	shr    eax,0xb
c0027ae9:	09 c3                	or     ebx,eax
c0027aeb:	89 f8                	mov    eax,edi
c0027aed:	c1 e8 0b             	shr    eax,0xb
c0027af0:	c1 e6 15             	shl    esi,0x15
c0027af3:	09 c6                	or     esi,eax
c0027af5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027afb:	0f 95 c1             	setne  cl
c0027afe:	09 c8                	or     eax,ecx
c0027b00:	83 e0 01             	and    eax,0x1
c0027b03:	c1 ef 0a             	shr    edi,0xa
c0027b06:	21 c7                	and    edi,eax
c0027b08:	01 f7                	add    edi,esi
c0027b0a:	83 d3 00             	adc    ebx,0x0
c0027b0d:	89 da                	mov    edx,ebx
c0027b0f:	eb 03                	jmp    c0027b14 <__muldf3+0x2d4>
c0027b11:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b14:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027b17:	89 f8                	mov    eax,edi
c0027b19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027b1c:	83 c4 24             	add    esp,0x24
c0027b1f:	5b                   	pop    ebx
c0027b20:	5e                   	pop    esi
c0027b21:	5f                   	pop    edi
c0027b22:	5d                   	pop    ebp
c0027b23:	c3                   	ret    

c0027b24 <__divdf3>:
c0027b24:	55                   	push   ebp
c0027b25:	89 e5                	mov    ebp,esp
c0027b27:	57                   	push   edi
c0027b28:	56                   	push   esi
c0027b29:	53                   	push   ebx
c0027b2a:	83 ec 2c             	sub    esp,0x2c
c0027b2d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b30:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b36:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b3f:	89 ce                	mov    esi,ecx
c0027b41:	89 c8                	mov    eax,ecx
c0027b43:	c1 f8 14             	sar    eax,0x14
c0027b46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b49:	89 f8                	mov    eax,edi
c0027b4b:	89 fb                	mov    ebx,edi
c0027b4d:	c1 e3 0b             	shl    ebx,0xb
c0027b50:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b53:	c1 e6 0b             	shl    esi,0xb
c0027b56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b5c:	c1 e8 15             	shr    eax,0x15
c0027b5f:	09 c6                	or     esi,eax
c0027b61:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b67:	89 c2                	mov    edx,eax
c0027b69:	c1 fa 14             	sar    edx,0x14
c0027b6c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b6f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b72:	89 de                	mov    esi,ebx
c0027b74:	c1 e6 0b             	shl    esi,0xb
c0027b77:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b7a:	c1 e0 0b             	shl    eax,0xb
c0027b7d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b82:	c1 eb 15             	shr    ebx,0x15
c0027b85:	09 d8                	or     eax,ebx
c0027b87:	89 c2                	mov    edx,eax
c0027b89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b8c:	25 ff 07 00 00       	and    eax,0x7ff
c0027b91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b94:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b97:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b9d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ba0:	29 d8                	sub    eax,ebx
c0027ba2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ba7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027baa:	46                   	inc    esi
c0027bab:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027bb1:	0f 85 a5 00 00 00    	jne    c0027c5c <__divdf3+0x138>
c0027bb7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027bba:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027bbd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027bc1:	74 2a                	je     c0027bed <__divdf3+0xc9>
c0027bc3:	85 f6                	test   esi,esi
c0027bc5:	0f 85 cc 02 00 00    	jne    c0027e97 <__divdf3+0x373>
c0027bcb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bce:	40                   	inc    eax
c0027bcf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bd4:	75 26                	jne    c0027bfc <__divdf3+0xd8>
c0027bd6:	85 db                	test   ebx,ebx
c0027bd8:	74 22                	je     c0027bfc <__divdf3+0xd8>
c0027bda:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027bdd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027be0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027be3:	09 d0                	or     eax,edx
c0027be5:	0f 85 ac 02 00 00    	jne    c0027e97 <__divdf3+0x373>
c0027beb:	eb 63                	jmp    c0027c50 <__divdf3+0x12c>
c0027bed:	85 f6                	test   esi,esi
c0027bef:	75 22                	jne    c0027c13 <__divdf3+0xef>
c0027bf1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bf4:	40                   	inc    eax
c0027bf5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bfa:	74 36                	je     c0027c32 <__divdf3+0x10e>
c0027bfc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c00:	0f 89 91 02 00 00    	jns    c0027e97 <__divdf3+0x373>
c0027c06:	89 f8                	mov    eax,edi
c0027c08:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c0e:	e9 80 02 00 00       	jmp    c0027e93 <__divdf3+0x36f>
c0027c13:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c16:	01 f6                	add    esi,esi
c0027c18:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027c1b:	c1 ef 1f             	shr    edi,0x1f
c0027c1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c21:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027c24:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027c27:	09 f7                	or     edi,esi
c0027c29:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027c2c:	78 2e                	js     c0027c5c <__divdf3+0x138>
c0027c2e:	89 c8                	mov    eax,ecx
c0027c30:	eb e1                	jmp    c0027c13 <__divdf3+0xef>
c0027c32:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c35:	09 d0                	or     eax,edx
c0027c37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c3b:	74 0f                	je     c0027c4c <__divdf3+0x128>
c0027c3d:	85 c0                	test   eax,eax
c0027c3f:	74 bb                	je     c0027bfc <__divdf3+0xd8>
c0027c41:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c44:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c47:	e9 4b 02 00 00       	jmp    c0027e97 <__divdf3+0x373>
c0027c4c:	85 c0                	test   eax,eax
c0027c4e:	75 ac                	jne    c0027bfc <__divdf3+0xd8>
c0027c50:	31 ff                	xor    edi,edi
c0027c52:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c57:	e9 3b 02 00 00       	jmp    c0027e97 <__divdf3+0x373>
c0027c5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c62:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c68:	75 6b                	jne    c0027cd5 <__divdf3+0x1b1>
c0027c6a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c6d:	09 d6                	or     esi,edx
c0027c6f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c73:	74 28                	je     c0027c9d <__divdf3+0x179>
c0027c75:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c78:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c7b:	85 f6                	test   esi,esi
c0027c7d:	0f 85 14 02 00 00    	jne    c0027e97 <__divdf3+0x373>
c0027c83:	31 ff                	xor    edi,edi
c0027c85:	31 c9                	xor    ecx,ecx
c0027c87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c8a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c8d:	0f 89 04 02 00 00    	jns    c0027e97 <__divdf3+0x373>
c0027c93:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c98:	e9 fa 01 00 00       	jmp    c0027e97 <__divdf3+0x373>
c0027c9d:	85 f6                	test   esi,esi
c0027c9f:	75 1b                	jne    c0027cbc <__divdf3+0x198>
c0027ca1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ca4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ca7:	25 00 00 00 80       	and    eax,0x80000000
c0027cac:	31 c9                	xor    ecx,ecx
c0027cae:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027cb3:	89 cf                	mov    edi,ecx
c0027cb5:	89 c1                	mov    ecx,eax
c0027cb7:	e9 db 01 00 00       	jmp    c0027e97 <__divdf3+0x373>
c0027cbc:	01 d2                	add    edx,edx
c0027cbe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cc1:	c1 eb 1f             	shr    ebx,0x1f
c0027cc4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027cc7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027cca:	8d 48 01             	lea    ecx,[eax+0x1]
c0027ccd:	09 da                	or     edx,ebx
c0027ccf:	78 04                	js     c0027cd5 <__divdf3+0x1b1>
c0027cd1:	89 c8                	mov    eax,ecx
c0027cd3:	eb e7                	jmp    c0027cbc <__divdf3+0x198>
c0027cd5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cd8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cde:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ce4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027ce7:	39 d6                	cmp    esi,edx
c0027ce9:	77 0d                	ja     c0027cf8 <__divdf3+0x1d4>
c0027ceb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027cee:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027cf1:	72 1b                	jb     c0027d0e <__divdf3+0x1ea>
c0027cf3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027cf6:	75 16                	jne    c0027d0e <__divdf3+0x1ea>
c0027cf8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cfb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cfe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027d01:	83 de 00             	sbb    esi,0x0
c0027d04:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027d07:	ba 01 00 00 00       	mov    edx,0x1
c0027d0c:	eb 02                	jmp    c0027d10 <__divdf3+0x1ec>
c0027d0e:	31 d2                	xor    edx,edx
c0027d10:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027d17:	31 ff                	xor    edi,edi
c0027d19:	01 ff                	add    edi,edi
c0027d1b:	89 d1                	mov    ecx,edx
c0027d1d:	c1 e9 1f             	shr    ecx,0x1f
c0027d20:	09 cf                	or     edi,ecx
c0027d22:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027d25:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027d28:	89 da                	mov    edx,ebx
c0027d2a:	89 f3                	mov    ebx,esi
c0027d2c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027d2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d32:	c1 e9 1f             	shr    ecx,0x1f
c0027d35:	09 ce                	or     esi,ecx
c0027d37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d3a:	01 c9                	add    ecx,ecx
c0027d3c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027d3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d42:	85 db                	test   ebx,ebx
c0027d44:	78 29                	js     c0027d6f <__divdf3+0x24b>
c0027d46:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027d49:	72 07                	jb     c0027d52 <__divdf3+0x22e>
c0027d4b:	75 3c                	jne    c0027d89 <__divdf3+0x265>
c0027d4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d50:	77 37                	ja     c0027d89 <__divdf3+0x265>
c0027d52:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d55:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d58:	31 d2                	xor    edx,edx
c0027d5a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d5d:	0f 97 c2             	seta   dl
c0027d60:	29 d6                	sub    esi,edx
c0027d62:	89 d9                	mov    ecx,ebx
c0027d64:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d67:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d6d:	eb 17                	jmp    c0027d86 <__divdf3+0x262>
c0027d6f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d72:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d78:	0f 97 c1             	seta   cl
c0027d7b:	0f b6 c9             	movzx  ecx,cl
c0027d7e:	29 ce                	sub    esi,ecx
c0027d80:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d83:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d86:	83 ca 01             	or     edx,0x1
c0027d89:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d8c:	75 8b                	jne    c0027d19 <__divdf3+0x1f5>
c0027d8e:	c1 e7 09             	shl    edi,0x9
c0027d91:	89 d1                	mov    ecx,edx
c0027d93:	c1 e9 17             	shr    ecx,0x17
c0027d96:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d99:	09 f3                	or     ebx,esi
c0027d9b:	0f 95 c3             	setne  bl
c0027d9e:	0f b6 db             	movzx  ebx,bl
c0027da1:	c1 e2 09             	shl    edx,0x9
c0027da4:	09 d3                	or     ebx,edx
c0027da6:	89 ca                	mov    edx,ecx
c0027da8:	09 fa                	or     edx,edi
c0027daa:	78 0c                	js     c0027db8 <__divdf3+0x294>
c0027dac:	01 d2                	add    edx,edx
c0027dae:	89 d9                	mov    ecx,ebx
c0027db0:	c1 e9 1f             	shr    ecx,0x1f
c0027db3:	09 ca                	or     edx,ecx
c0027db5:	01 db                	add    ebx,ebx
c0027db7:	48                   	dec    eax
c0027db8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027dbd:	0f 8f 83 00 00 00    	jg     c0027e46 <__divdf3+0x322>
c0027dc3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027dc9:	85 c0                	test   eax,eax
c0027dcb:	0f 8f 82 00 00 00    	jg     c0027e53 <__divdf3+0x32f>
c0027dd1:	83 f8 cc             	cmp    eax,0xffffffcc
c0027dd4:	7c 77                	jl     c0027e4d <__divdf3+0x329>
c0027dd6:	be 01 00 00 00       	mov    esi,0x1
c0027ddb:	29 c6                	sub    esi,eax
c0027ddd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027de3:	83 fe 1f             	cmp    esi,0x1f
c0027de6:	7e 2f                	jle    c0027e17 <__divdf3+0x2f3>
c0027de8:	83 fe 20             	cmp    esi,0x20
c0027deb:	75 0a                	jne    c0027df7 <__divdf3+0x2d3>
c0027ded:	85 db                	test   ebx,ebx
c0027def:	0f 95 c3             	setne  bl
c0027df2:	0f b6 db             	movzx  ebx,bl
c0027df5:	eb 1a                	jmp    c0027e11 <__divdf3+0x2ed>
c0027df7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027dfa:	89 d7                	mov    edi,edx
c0027dfc:	d3 e7                	shl    edi,cl
c0027dfe:	89 f9                	mov    ecx,edi
c0027e00:	09 d9                	or     ecx,ebx
c0027e02:	0f 95 c3             	setne  bl
c0027e05:	0f b6 db             	movzx  ebx,bl
c0027e08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e0d:	29 c1                	sub    ecx,eax
c0027e0f:	d3 ea                	shr    edx,cl
c0027e11:	09 d3                	or     ebx,edx
c0027e13:	31 c0                	xor    eax,eax
c0027e15:	eb 3a                	jmp    c0027e51 <__divdf3+0x32d>
c0027e17:	83 c0 1f             	add    eax,0x1f
c0027e1a:	89 d7                	mov    edi,edx
c0027e1c:	88 c1                	mov    cl,al
c0027e1e:	d3 e7                	shl    edi,cl
c0027e20:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e23:	89 df                	mov    edi,ebx
c0027e25:	89 f1                	mov    ecx,esi
c0027e27:	d3 ef                	shr    edi,cl
c0027e29:	89 f9                	mov    ecx,edi
c0027e2b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e2e:	09 cf                	or     edi,ecx
c0027e30:	88 c1                	mov    cl,al
c0027e32:	d3 e3                	shl    ebx,cl
c0027e34:	85 db                	test   ebx,ebx
c0027e36:	0f 95 c3             	setne  bl
c0027e39:	0f b6 db             	movzx  ebx,bl
c0027e3c:	09 fb                	or     ebx,edi
c0027e3e:	89 f1                	mov    ecx,esi
c0027e40:	d3 ea                	shr    edx,cl
c0027e42:	31 c0                	xor    eax,eax
c0027e44:	eb 0d                	jmp    c0027e53 <__divdf3+0x32f>
c0027e46:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027e4b:	eb 02                	jmp    c0027e4f <__divdf3+0x32b>
c0027e4d:	31 c0                	xor    eax,eax
c0027e4f:	31 db                	xor    ebx,ebx
c0027e51:	31 d2                	xor    edx,edx
c0027e53:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e56:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e59:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e5f:	09 c8                	or     eax,ecx
c0027e61:	c1 e0 14             	shl    eax,0x14
c0027e64:	89 d1                	mov    ecx,edx
c0027e66:	c1 e9 0b             	shr    ecx,0xb
c0027e69:	09 c8                	or     eax,ecx
c0027e6b:	89 c6                	mov    esi,eax
c0027e6d:	89 d9                	mov    ecx,ebx
c0027e6f:	c1 e9 0b             	shr    ecx,0xb
c0027e72:	c1 e2 15             	shl    edx,0x15
c0027e75:	09 ca                	or     edx,ecx
c0027e77:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e7d:	0f 95 c0             	setne  al
c0027e80:	09 c1                	or     ecx,eax
c0027e82:	83 e1 01             	and    ecx,0x1
c0027e85:	c1 eb 0a             	shr    ebx,0xa
c0027e88:	21 cb                	and    ebx,ecx
c0027e8a:	01 d3                	add    ebx,edx
c0027e8c:	89 d8                	mov    eax,ebx
c0027e8e:	83 d6 00             	adc    esi,0x0
c0027e91:	89 f2                	mov    edx,esi
c0027e93:	89 c7                	mov    edi,eax
c0027e95:	89 d1                	mov    ecx,edx
c0027e97:	89 f8                	mov    eax,edi
c0027e99:	89 ca                	mov    edx,ecx
c0027e9b:	83 c4 2c             	add    esp,0x2c
c0027e9e:	5b                   	pop    ebx
c0027e9f:	5e                   	pop    esi
c0027ea0:	5f                   	pop    edi
c0027ea1:	5d                   	pop    ebp
c0027ea2:	c3                   	ret    

c0027ea3 <__floatsidf>:
c0027ea3:	55                   	push   ebp
c0027ea4:	89 e5                	mov    ebp,esp
c0027ea6:	56                   	push   esi
c0027ea7:	53                   	push   ebx
c0027ea8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027eab:	85 db                	test   ebx,ebx
c0027ead:	7e 15                	jle    c0027ec4 <__floatsidf+0x21>
c0027eaf:	0f bd cb             	bsr    ecx,ebx
c0027eb2:	83 f1 1f             	xor    ecx,0x1f
c0027eb5:	d3 e3                	shl    ebx,cl
c0027eb7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ebd:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ec2:	eb 21                	jmp    c0027ee5 <__floatsidf+0x42>
c0027ec4:	b8 00 00 00 00       	mov    eax,0x0
c0027ec9:	ba 00 00 00 00       	mov    edx,0x0
c0027ece:	74 2a                	je     c0027efa <__floatsidf+0x57>
c0027ed0:	f7 db                	neg    ebx
c0027ed2:	0f bd cb             	bsr    ecx,ebx
c0027ed5:	83 f1 1f             	xor    ecx,0x1f
c0027ed8:	d3 e3                	shl    ebx,cl
c0027eda:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ee0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ee5:	29 c8                	sub    eax,ecx
c0027ee7:	c1 e0 14             	shl    eax,0x14
c0027eea:	89 c1                	mov    ecx,eax
c0027eec:	89 de                	mov    esi,ebx
c0027eee:	c1 ee 0b             	shr    esi,0xb
c0027ef1:	09 f1                	or     ecx,esi
c0027ef3:	89 ca                	mov    edx,ecx
c0027ef5:	c1 e3 15             	shl    ebx,0x15
c0027ef8:	89 d8                	mov    eax,ebx
c0027efa:	5b                   	pop    ebx
c0027efb:	5e                   	pop    esi
c0027efc:	5d                   	pop    ebp
c0027efd:	c3                   	ret    

c0027efe <__floatunsidf>:
c0027efe:	55                   	push   ebp
c0027eff:	89 e5                	mov    ebp,esp
c0027f01:	56                   	push   esi
c0027f02:	53                   	push   ebx
c0027f03:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f06:	85 db                	test   ebx,ebx
c0027f08:	74 2a                	je     c0027f34 <__floatunsidf+0x36>
c0027f0a:	0f bd cb             	bsr    ecx,ebx
c0027f0d:	83 f1 1f             	xor    ecx,0x1f
c0027f10:	d3 e3                	shl    ebx,cl
c0027f12:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f18:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f1d:	29 c8                	sub    eax,ecx
c0027f1f:	c1 e0 14             	shl    eax,0x14
c0027f22:	89 c1                	mov    ecx,eax
c0027f24:	89 de                	mov    esi,ebx
c0027f26:	c1 ee 0b             	shr    esi,0xb
c0027f29:	09 f1                	or     ecx,esi
c0027f2b:	89 ca                	mov    edx,ecx
c0027f2d:	c1 e3 15             	shl    ebx,0x15
c0027f30:	89 d8                	mov    eax,ebx
c0027f32:	eb 04                	jmp    c0027f38 <__floatunsidf+0x3a>
c0027f34:	31 c0                	xor    eax,eax
c0027f36:	31 d2                	xor    edx,edx
c0027f38:	5b                   	pop    ebx
c0027f39:	5e                   	pop    esi
c0027f3a:	5d                   	pop    ebp
c0027f3b:	c3                   	ret    

c0027f3c <__fixdfsi>:
c0027f3c:	55                   	push   ebp
c0027f3d:	89 e5                	mov    ebp,esp
c0027f3f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f42:	89 d1                	mov    ecx,edx
c0027f44:	c1 e1 0b             	shl    ecx,0xb
c0027f47:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f50:	c1 e8 15             	shr    eax,0x15
c0027f53:	09 c1                	or     ecx,eax
c0027f55:	c1 fa 14             	sar    edx,0x14
c0027f58:	78 1f                	js     c0027f79 <__fixdfsi+0x3d>
c0027f5a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f60:	31 c0                	xor    eax,eax
c0027f62:	83 fa 1e             	cmp    edx,0x1e
c0027f65:	77 40                	ja     c0027fa7 <__fixdfsi+0x6b>
c0027f67:	89 c8                	mov    eax,ecx
c0027f69:	0d 00 00 00 80       	or     eax,0x80000000
c0027f6e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f73:	29 d1                	sub    ecx,edx
c0027f75:	d3 e8                	shr    eax,cl
c0027f77:	eb 2e                	jmp    c0027fa7 <__fixdfsi+0x6b>
c0027f79:	31 c0                	xor    eax,eax
c0027f7b:	81 c2 01 04 00 00    	add    edx,0x401
c0027f81:	78 24                	js     c0027fa7 <__fixdfsi+0x6b>
c0027f83:	83 fa 1e             	cmp    edx,0x1e
c0027f86:	7e 09                	jle    c0027f91 <__fixdfsi+0x55>
c0027f88:	83 fa 1f             	cmp    edx,0x1f
c0027f8b:	75 18                	jne    c0027fa5 <__fixdfsi+0x69>
c0027f8d:	85 c9                	test   ecx,ecx
c0027f8f:	75 14                	jne    c0027fa5 <__fixdfsi+0x69>
c0027f91:	89 c8                	mov    eax,ecx
c0027f93:	0d 00 00 00 80       	or     eax,0x80000000
c0027f98:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f9d:	29 d1                	sub    ecx,edx
c0027f9f:	d3 e8                	shr    eax,cl
c0027fa1:	f7 d8                	neg    eax
c0027fa3:	eb 02                	jmp    c0027fa7 <__fixdfsi+0x6b>
c0027fa5:	31 c0                	xor    eax,eax
c0027fa7:	5d                   	pop    ebp
c0027fa8:	c3                   	ret    

c0027fa9 <__fixunsdfsi>:
c0027fa9:	55                   	push   ebp
c0027faa:	89 e5                	mov    ebp,esp
c0027fac:	53                   	push   ebx
c0027fad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027fb0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027fb3:	89 d3                	mov    ebx,edx
c0027fb5:	c1 fb 14             	sar    ebx,0x14
c0027fb8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027fbe:	31 c0                	xor    eax,eax
c0027fc0:	83 fb 1f             	cmp    ebx,0x1f
c0027fc3:	77 1d                	ja     c0027fe2 <__fixunsdfsi+0x39>
c0027fc5:	89 d0                	mov    eax,edx
c0027fc7:	c1 e0 0b             	shl    eax,0xb
c0027fca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fcf:	c1 e9 15             	shr    ecx,0x15
c0027fd2:	09 c8                	or     eax,ecx
c0027fd4:	0d 00 00 00 80       	or     eax,0x80000000
c0027fd9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fde:	29 d9                	sub    ecx,ebx
c0027fe0:	d3 e8                	shr    eax,cl
c0027fe2:	5b                   	pop    ebx
c0027fe3:	5d                   	pop    ebp
c0027fe4:	c3                   	ret    

c0027fe5 <__cmpdf2>:
c0027fe5:	55                   	push   ebp
c0027fe6:	89 e5                	mov    ebp,esp
c0027fe8:	57                   	push   edi
c0027fe9:	56                   	push   esi
c0027fea:	53                   	push   ebx
c0027feb:	83 ec 0c             	sub    esp,0xc
c0027fee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ff1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ff4:	89 ca                	mov    edx,ecx
c0027ff6:	c1 ea 14             	shr    edx,0x14
c0027ff9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027fff:	89 cb                	mov    ebx,ecx
c0028001:	c1 fb 1f             	sar    ebx,0x1f
c0028004:	31 da                	xor    edx,ebx
c0028006:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028009:	89 df                	mov    edi,ebx
c002800b:	c1 e7 0b             	shl    edi,0xb
c002800e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028011:	c1 e1 0b             	shl    ecx,0xb
c0028014:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002801a:	c1 eb 15             	shr    ebx,0x15
c002801d:	09 d9                	or     ecx,ebx
c002801f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028022:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028025:	89 ce                	mov    esi,ecx
c0028027:	c1 ee 14             	shr    esi,0x14
c002802a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028030:	89 cb                	mov    ebx,ecx
c0028032:	c1 fb 1f             	sar    ebx,0x1f
c0028035:	31 de                	xor    esi,ebx
c0028037:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002803a:	89 df                	mov    edi,ebx
c002803c:	c1 e7 0b             	shl    edi,0xb
c002803f:	c1 e1 0b             	shl    ecx,0xb
c0028042:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028048:	c1 eb 15             	shr    ebx,0x15
c002804b:	09 d9                	or     ecx,ebx
c002804d:	89 d3                	mov    ebx,edx
c002804f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028055:	43                   	inc    ebx
c0028056:	83 fb 01             	cmp    ebx,0x1
c0028059:	77 08                	ja     c0028063 <__cmpdf2+0x7e>
c002805b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002805e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028061:	75 68                	jne    c00280cb <__cmpdf2+0xe6>
c0028063:	89 f3                	mov    ebx,esi
c0028065:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002806b:	43                   	inc    ebx
c002806c:	83 fb 01             	cmp    ebx,0x1
c002806f:	77 06                	ja     c0028077 <__cmpdf2+0x92>
c0028071:	89 fb                	mov    ebx,edi
c0028073:	09 cb                	or     ebx,ecx
c0028075:	75 54                	jne    c00280cb <__cmpdf2+0xe6>
c0028077:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002807a:	09 f8                	or     eax,edi
c002807c:	09 c8                	or     eax,ecx
c002807e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028081:	75 12                	jne    c0028095 <__cmpdf2+0xb0>
c0028083:	8d 42 01             	lea    eax,[edx+0x1]
c0028086:	83 f8 01             	cmp    eax,0x1
c0028089:	77 0a                	ja     c0028095 <__cmpdf2+0xb0>
c002808b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002808e:	31 c0                	xor    eax,eax
c0028090:	83 fb 01             	cmp    ebx,0x1
c0028093:	76 36                	jbe    c00280cb <__cmpdf2+0xe6>
c0028095:	b8 01 00 00 00       	mov    eax,0x1
c002809a:	39 f2                	cmp    edx,esi
c002809c:	7f 2d                	jg     c00280cb <__cmpdf2+0xe6>
c002809e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00280a3:	7c 26                	jl     c00280cb <__cmpdf2+0xe6>
c00280a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280a8:	77 07                	ja     c00280b1 <__cmpdf2+0xcc>
c00280aa:	72 16                	jb     c00280c2 <__cmpdf2+0xdd>
c00280ac:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00280af:	76 0a                	jbe    c00280bb <__cmpdf2+0xd6>
c00280b1:	89 d0                	mov    eax,edx
c00280b3:	c1 f8 1f             	sar    eax,0x1f
c00280b6:	83 c8 01             	or     eax,0x1
c00280b9:	eb 10                	jmp    c00280cb <__cmpdf2+0xe6>
c00280bb:	b8 00 00 00 00       	mov    eax,0x0
c00280c0:	73 09                	jae    c00280cb <__cmpdf2+0xe6>
c00280c2:	89 d0                	mov    eax,edx
c00280c4:	c1 f8 1f             	sar    eax,0x1f
c00280c7:	83 e0 02             	and    eax,0x2
c00280ca:	48                   	dec    eax
c00280cb:	83 c4 0c             	add    esp,0xc
c00280ce:	5b                   	pop    ebx
c00280cf:	5e                   	pop    esi
c00280d0:	5f                   	pop    edi
c00280d1:	5d                   	pop    ebp
c00280d2:	c3                   	ret    

c00280d3 <__eqdf2>:
c00280d3:	55                   	push   ebp
c00280d4:	89 e5                	mov    ebp,esp
c00280d6:	50                   	push   eax
c00280d7:	6a 01                	push   0x1
c00280d9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280e5:	e8 fb fe ff ff       	call   c0027fe5 <__cmpdf2>
c00280ea:	83 c4 18             	add    esp,0x18
c00280ed:	c9                   	leave  
c00280ee:	c3                   	ret    

c00280ef <__nedf2>:
c00280ef:	eb e2                	jmp    c00280d3 <__eqdf2>

c00280f1 <__gtdf2>:
c00280f1:	55                   	push   ebp
c00280f2:	89 e5                	mov    ebp,esp
c00280f4:	50                   	push   eax
c00280f5:	6a ff                	push   0xffffffff
c00280f7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280fa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028100:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028103:	e8 dd fe ff ff       	call   c0027fe5 <__cmpdf2>
c0028108:	83 c4 18             	add    esp,0x18
c002810b:	c9                   	leave  
c002810c:	c3                   	ret    

c002810d <__gedf2>:
c002810d:	eb e2                	jmp    c00280f1 <__gtdf2>

c002810f <__ltdf2>:
c002810f:	eb c2                	jmp    c00280d3 <__eqdf2>

c0028111 <__ledf2>:
c0028111:	eb c0                	jmp    c00280d3 <__eqdf2>

c0028113 <__truncdfsf2>:
c0028113:	55                   	push   ebp
c0028114:	89 e5                	mov    ebp,esp
c0028116:	57                   	push   edi
c0028117:	56                   	push   esi
c0028118:	53                   	push   ebx
c0028119:	83 ec 0c             	sub    esp,0xc
c002811c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002811f:	89 d1                	mov    ecx,edx
c0028121:	c1 f9 14             	sar    ecx,0x14
c0028124:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028127:	89 df                	mov    edi,ebx
c0028129:	c1 e7 0b             	shl    edi,0xb
c002812c:	89 d0                	mov    eax,edx
c002812e:	c1 e0 0b             	shl    eax,0xb
c0028131:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028136:	c1 eb 15             	shr    ebx,0x15
c0028139:	09 d8                	or     eax,ebx
c002813b:	89 cb                	mov    ebx,ecx
c002813d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028143:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028149:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002814f:	0f 86 9e 00 00 00    	jbe    c00281f3 <__truncdfsf2+0xe0>
c0028155:	85 db                	test   ebx,ebx
c0028157:	75 0a                	jne    c0028163 <__truncdfsf2+0x50>
c0028159:	c1 fa 17             	sar    edx,0x17
c002815c:	30 d2                	xor    dl,dl
c002815e:	e9 84 00 00 00       	jmp    c00281e7 <__truncdfsf2+0xd4>
c0028163:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028169:	83 fe 83             	cmp    esi,0xffffff83
c002816c:	7d 4b                	jge    c00281b9 <__truncdfsf2+0xa6>
c002816e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028173:	29 f1                	sub    ecx,esi
c0028175:	83 f9 1f             	cmp    ecx,0x1f
c0028178:	7f 6b                	jg     c00281e5 <__truncdfsf2+0xd2>
c002817a:	0d 00 00 00 80       	or     eax,0x80000000
c002817f:	89 c3                	mov    ebx,eax
c0028181:	d3 eb                	shr    ebx,cl
c0028183:	be 01 00 00 00       	mov    esi,0x1
c0028188:	d3 e6                	shl    esi,cl
c002818a:	4e                   	dec    esi
c002818b:	21 f0                	and    eax,esi
c002818d:	09 f8                	or     eax,edi
c002818f:	0f 95 c0             	setne  al
c0028192:	0f b6 c0             	movzx  eax,al
c0028195:	09 c3                	or     ebx,eax
c0028197:	89 d9                	mov    ecx,ebx
c0028199:	c1 e9 08             	shr    ecx,0x8
c002819c:	f6 c3 7f             	test   bl,0x7f
c002819f:	0f 95 c0             	setne  al
c00281a2:	09 c8                	or     eax,ecx
c00281a4:	83 e0 01             	and    eax,0x1
c00281a7:	c1 eb 07             	shr    ebx,0x7
c00281aa:	21 c3                	and    ebx,eax
c00281ac:	81 e2 00 00 00 80    	and    edx,0x80000000
c00281b2:	09 d1                	or     ecx,edx
c00281b4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00281b7:	eb 76                	jmp    c002822f <__truncdfsf2+0x11c>
c00281b9:	83 c6 80             	add    esi,0xffffff80
c00281bc:	7e 1d                	jle    c00281db <__truncdfsf2+0xc8>
c00281be:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00281c4:	75 0b                	jne    c00281d1 <__truncdfsf2+0xbe>
c00281c6:	09 f8                	or     eax,edi
c00281c8:	74 09                	je     c00281d3 <__truncdfsf2+0xc0>
c00281ca:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00281cf:	eb 02                	jmp    c00281d3 <__truncdfsf2+0xc0>
c00281d1:	31 c0                	xor    eax,eax
c00281d3:	c1 fa 17             	sar    edx,0x17
c00281d6:	80 ca ff             	or     dl,0xff
c00281d9:	eb 0e                	jmp    c00281e9 <__truncdfsf2+0xd6>
c00281db:	c1 fa 1f             	sar    edx,0x1f
c00281de:	c1 e2 08             	shl    edx,0x8
c00281e1:	09 ca                	or     edx,ecx
c00281e3:	eb 04                	jmp    c00281e9 <__truncdfsf2+0xd6>
c00281e5:	31 d2                	xor    edx,edx
c00281e7:	31 c0                	xor    eax,eax
c00281e9:	c1 e2 17             	shl    edx,0x17
c00281ec:	c1 e8 08             	shr    eax,0x8
c00281ef:	09 d0                	or     eax,edx
c00281f1:	eb 3c                	jmp    c002822f <__truncdfsf2+0x11c>
c00281f3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00281f9:	89 ca                	mov    edx,ecx
c00281fb:	c1 fa 0b             	sar    edx,0xb
c00281fe:	c1 e2 08             	shl    edx,0x8
c0028201:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028204:	31 db                	xor    ebx,ebx
c0028206:	85 ff                	test   edi,edi
c0028208:	0f 95 c3             	setne  bl
c002820b:	09 d8                	or     eax,ebx
c002820d:	89 c3                	mov    ebx,eax
c002820f:	c1 eb 08             	shr    ebx,0x8
c0028212:	a8 7f                	test   al,0x7f
c0028214:	0f 95 c2             	setne  dl
c0028217:	89 d6                	mov    esi,edx
c0028219:	09 de                	or     esi,ebx
c002821b:	83 e6 01             	and    esi,0x1
c002821e:	c1 e8 07             	shr    eax,0x7
c0028221:	21 f0                	and    eax,esi
c0028223:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028226:	09 ca                	or     edx,ecx
c0028228:	c1 e2 17             	shl    edx,0x17
c002822b:	09 da                	or     edx,ebx
c002822d:	01 d0                	add    eax,edx
c002822f:	83 c4 0c             	add    esp,0xc
c0028232:	5b                   	pop    ebx
c0028233:	5e                   	pop    esi
c0028234:	5f                   	pop    edi
c0028235:	5d                   	pop    ebp
c0028236:	c3                   	ret    

c0028237 <__extendsfdf2>:
c0028237:	55                   	push   ebp
c0028238:	89 e5                	mov    ebp,esp
c002823a:	57                   	push   edi
c002823b:	56                   	push   esi
c002823c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002823f:	89 d1                	mov    ecx,edx
c0028241:	c1 f9 17             	sar    ecx,0x17
c0028244:	c1 e2 08             	shl    edx,0x8
c0028247:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002824d:	89 c8                	mov    eax,ecx
c002824f:	80 e4 f8             	and    ah,0xf8
c0028252:	8d 71 01             	lea    esi,[ecx+0x1]
c0028255:	81 e6 fe 00 00 00    	and    esi,0xfe
c002825b:	75 27                	jne    c0028284 <__extendsfdf2+0x4d>
c002825d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028263:	75 18                	jne    c002827d <__extendsfdf2+0x46>
c0028265:	85 d2                	test   edx,edx
c0028267:	74 20                	je     c0028289 <__extendsfdf2+0x52>
c0028269:	41                   	inc    ecx
c002826a:	01 d2                	add    edx,edx
c002826c:	79 fb                	jns    c0028269 <__extendsfdf2+0x32>
c002826e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028274:	29 c8                	sub    eax,ecx
c0028276:	05 81 03 00 00       	add    eax,0x381
c002827b:	eb 0c                	jmp    c0028289 <__extendsfdf2+0x52>
c002827d:	05 00 07 00 00       	add    eax,0x700
c0028282:	eb 05                	jmp    c0028289 <__extendsfdf2+0x52>
c0028284:	05 80 03 00 00       	add    eax,0x380
c0028289:	c1 e0 14             	shl    eax,0x14
c002828c:	89 c1                	mov    ecx,eax
c002828e:	89 d0                	mov    eax,edx
c0028290:	c1 e8 0b             	shr    eax,0xb
c0028293:	09 c1                	or     ecx,eax
c0028295:	c1 e2 15             	shl    edx,0x15
c0028298:	89 d0                	mov    eax,edx
c002829a:	89 ca                	mov    edx,ecx
c002829c:	5e                   	pop    esi
c002829d:	5f                   	pop    edi
c002829e:	5d                   	pop    ebp
c002829f:	c3                   	ret    

c00282a0 <fabs>:
c00282a0:	83 ec 0c             	sub    esp,0xc
c00282a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00282aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00282ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00282b7:	dd 04 24             	fld    QWORD PTR [esp]
c00282ba:	83 c4 0c             	add    esp,0xc
c00282bd:	c3                   	ret    
c00282be:	66 90                	xchg   ax,ax

c00282c0 <lrint>:
c00282c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00282c4:	83 ec 04             	sub    esp,0x4
c00282c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00282ca:	58                   	pop    eax
c00282cb:	c3                   	ret    

c00282cc <lrintf>:
c00282cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00282d0:	83 ec 04             	sub    esp,0x4
c00282d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00282d6:	58                   	pop    eax
c00282d7:	c3                   	ret    

Disassembly of section .init:

c00282d8 <_init>:
c00282d8:	55                   	push   ebp
c00282d9:	89 e5                	mov    ebp,esp
c00282db:	e8 38 7e fd ff       	call   c0000118 <frame_dummy>
c00282e0:	e8 63 e0 ff ff       	call   c0026348 <__do_global_ctors_aux>
c00282e5:	5d                   	pop    ebp
c00282e6:	c3                   	ret    

Disassembly of section .fini:

c00282e7 <_fini>:
c00282e7:	55                   	push   ebp
c00282e8:	89 e5                	mov    ebp,esp
c00282ea:	e8 b9 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00282ef:	5d                   	pop    ebp
c00282f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00282f2 <Computer::~Computer()>:
c00282f2:	83 ec 0c             	sub    esp,0xc
c00282f5:	ba 28 9e 02 c0       	mov    edx,0xc0029e28
c00282fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282fe:	89 10                	mov    DWORD PTR [eax],edx
c0028300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028304:	83 ec 0c             	sub    esp,0xc
c0028307:	50                   	push   eax
c0028308:	e8 a7 bb fe ff       	call   c0013eb4 <Device::~Device()>
c002830d:	83 c4 10             	add    esp,0x10
c0028310:	90                   	nop
c0028311:	83 c4 0c             	add    esp,0xc
c0028314:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028316 <Computer::~Computer()>:
c0028316:	83 ec 0c             	sub    esp,0xc
c0028319:	83 ec 0c             	sub    esp,0xc
c002831c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028320:	e8 cd ff ff ff       	call   c00282f2 <Computer::~Computer()>
c0028325:	83 c4 10             	add    esp,0x10
c0028328:	83 ec 08             	sub    esp,0x8
c002832b:	68 ec 01 00 00       	push   0x1ec
c0028330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028334:	e8 a3 a7 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028339:	83 c4 10             	add    esp,0x10
c002833c:	83 c4 0c             	add    esp,0xc
c002833f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028340 <idleCommon()>:
c0028340:	83 ec 0c             	sub    esp,0xc
c0028343:	e8 14 57 ff ff       	call   c001da5c <lockScheduler()>
c0028348:	e8 4b 5a ff ff       	call   c001dd98 <schedule()>
c002834d:	83 c4 0c             	add    esp,0xc
c0028350:	e9 09 57 ff ff       	jmp    c001da5e <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028356 <LinkedList<UnixFile>::~LinkedList()>:
c0028356:	90                   	nop
c0028357:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028358 <LinkedList<UnixFile>::LinkedList()>:
c0028358:	83 ec 0c             	sub    esp,0xc
c002835b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028369:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028374:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002837b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028389:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028394:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002839b:	83 ec 0c             	sub    esp,0xc
c002839e:	68 e6 a0 02 c0       	push   0xc002a0e6
c00283a3:	e8 14 a8 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00283a8:	83 c4 10             	add    esp,0x10
c00283ab:	90                   	nop
c00283ac:	83 c4 0c             	add    esp,0xc
c00283af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00283b0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00283b0:	83 ec 0c             	sub    esp,0xc
c00283b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283b8:	75 10                	jne    c00283ca <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00283ba:	83 ec 0c             	sub    esp,0xc
c00283bd:	68 00 a1 02 c0       	push   0xc002a100
c00283c2:	e8 70 1e ff ff       	call   c001a237 <Krnl::panic(char const*)>
c00283c7:	83 c4 10             	add    esp,0x10
c00283ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d0:	85 c0                	test   eax,eax
c00283d2:	74 34                	je     c0028408 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283db:	85 c0                	test   eax,eax
c00283dd:	74 29                	je     c0028408 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028406:	eb 65                	jmp    c002846d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840c:	8b 00                	mov    eax,DWORD PTR [eax]
c002840e:	85 c0                	test   eax,eax
c0028410:	75 4b                	jne    c002845d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028419:	85 c0                	test   eax,eax
c002841b:	75 40                	jne    c002845d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028421:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028425:	89 10                	mov    DWORD PTR [eax],edx
c0028427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002842b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002842f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028439:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028444:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028447:	85 c0                	test   eax,eax
c0028449:	74 22                	je     c002846d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002844b:	83 ec 0c             	sub    esp,0xc
c002844e:	68 22 a1 02 c0       	push   0xc002a122
c0028453:	e8 df 1d ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028458:	83 c4 10             	add    esp,0x10
c002845b:	eb 10                	jmp    c002846d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002845d:	83 ec 0c             	sub    esp,0xc
c0028460:	68 2c a1 02 c0       	push   0xc002a12c
c0028465:	e8 cd 1d ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002846a:	83 c4 10             	add    esp,0x10
c002846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028471:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028474:	8d 50 01             	lea    edx,[eax+0x1]
c0028477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002847e:	90                   	nop
c002847f:	83 c4 0c             	add    esp,0xc
c0028482:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028484 <LinkedList<UnixFile>::getFirstElement()>:
c0028484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028488:	8b 00                	mov    eax,DWORD PTR [eax]
c002848a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002848c <LinkedList<UnixFile>::removeFirst()>:
c002848c:	83 ec 0c             	sub    esp,0xc
c002848f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028493:	8b 00                	mov    eax,DWORD PTR [eax]
c0028495:	85 c0                	test   eax,eax
c0028497:	75 12                	jne    c00284ab <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028499:	83 ec 0c             	sub    esp,0xc
c002849c:	68 38 a1 02 c0       	push   0xc002a138
c00284a1:	e8 91 1d ff ff       	call   c001a237 <Krnl::panic(char const*)>
c00284a6:	83 c4 10             	add    esp,0x10
c00284a9:	eb 7e                	jmp    c0028529 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00284ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284b5:	85 c0                	test   eax,eax
c00284b7:	74 10                	je     c00284c9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00284b9:	83 ec 0c             	sub    esp,0xc
c00284bc:	68 83 a1 02 c0       	push   0xc002a183
c00284c1:	e8 71 1d ff ff       	call   c001a237 <Krnl::panic(char const*)>
c00284c6:	83 c4 10             	add    esp,0x10
c00284c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00284cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284d2:	85 c0                	test   eax,eax
c00284d4:	75 33                	jne    c0028509 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00284d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284f2:	83 f8 01             	cmp    eax,0x1
c00284f5:	74 21                	je     c0028518 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284f7:	83 ec 0c             	sub    esp,0xc
c00284fa:	68 5c a1 02 c0       	push   0xc002a15c
c00284ff:	e8 33 1d ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028504:	83 c4 10             	add    esp,0x10
c0028507:	eb 0f                	jmp    c0028518 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850d:	8b 00                	mov    eax,DWORD PTR [eax]
c002850f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028516:	89 10                	mov    DWORD PTR [eax],edx
c0028518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028526:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028529:	83 c4 0c             	add    esp,0xc
c002852c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002852e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002852e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028532:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028535:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028536 <DriverlessDevice::~DriverlessDevice()>:
c0028536:	ba e4 a8 02 c0       	mov    edx,0xc002a8e4
c002853b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002853f:	89 10                	mov    DWORD PTR [eax],edx
c0028541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028545:	50                   	push   eax
c0028546:	e8 69 b9 fe ff       	call   c0013eb4 <Device::~Device()>
c002854b:	83 c4 04             	add    esp,0x4
c002854e:	90                   	nop
c002854f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028550 <DriverlessDevice::~DriverlessDevice()>:
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	83 ec 0c             	sub    esp,0xc
c0028556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002855a:	e8 d7 ff ff ff       	call   c0028536 <DriverlessDevice::~DriverlessDevice()>
c002855f:	83 c4 10             	add    esp,0x10
c0028562:	83 ec 08             	sub    esp,0x8
c0028565:	68 58 01 00 00       	push   0x158
c002856a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002856e:	e8 69 a5 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028573:	83 c4 10             	add    esp,0x10
c0028576:	83 c4 0c             	add    esp,0xc
c0028579:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002857a <LinkedList<Device>::addElement(Device*)>:
c002857a:	83 ec 0c             	sub    esp,0xc
c002857d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028582:	75 10                	jne    c0028594 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028584:	83 ec 0c             	sub    esp,0xc
c0028587:	68 00 a1 02 c0       	push   0xc002a100
c002858c:	e8 a6 1c ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028591:	83 c4 10             	add    esp,0x10
c0028594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028598:	8b 00                	mov    eax,DWORD PTR [eax]
c002859a:	85 c0                	test   eax,eax
c002859c:	74 3a                	je     c00285d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002859e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285a5:	85 c0                	test   eax,eax
c00285a7:	74 2f                	je     c00285d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00285a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285b4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00285ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285cc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285d6:	eb 68                	jmp    c0028640 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00285de:	85 c0                	test   eax,eax
c00285e0:	75 4e                	jne    c0028630 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285e9:	85 c0                	test   eax,eax
c00285eb:	75 43                	jne    c0028630 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285f5:	89 10                	mov    DWORD PTR [eax],edx
c00285f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028609:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028617:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002861a:	85 c0                	test   eax,eax
c002861c:	74 22                	je     c0028640 <LinkedList<Device>::addElement(Device*)+0xc6>
c002861e:	83 ec 0c             	sub    esp,0xc
c0028621:	68 22 a1 02 c0       	push   0xc002a122
c0028626:	e8 0c 1c ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002862b:	83 c4 10             	add    esp,0x10
c002862e:	eb 10                	jmp    c0028640 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028630:	83 ec 0c             	sub    esp,0xc
c0028633:	68 2c a1 02 c0       	push   0xc002a12c
c0028638:	e8 fa 1b ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002863d:	83 c4 10             	add    esp,0x10
c0028640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028644:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028647:	8d 50 01             	lea    edx,[eax+0x1]
c002864a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028651:	90                   	nop
c0028652:	83 c4 0c             	add    esp,0xc
c0028655:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028656 <LinkedList<Device>::LinkedList()>:
c0028656:	83 ec 0c             	sub    esp,0xc
c0028659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028667:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002866e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028672:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028687:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002868e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028692:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028699:	83 ec 0c             	sub    esp,0xc
c002869c:	68 e6 a0 02 c0       	push   0xc002a0e6
c00286a1:	e8 16 a5 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c00286a6:	83 c4 10             	add    esp,0x10
c00286a9:	90                   	nop
c00286aa:	83 c4 0c             	add    esp,0xc
c00286ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00286ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00286ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00286b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00286bc:	85 c0                	test   eax,eax
c00286be:	75 0e                	jne    c00286ce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00286c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286c7:	85 c0                	test   eax,eax
c00286c9:	75 03                	jne    c00286ce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00286cb:	b0 01                	mov    al,0x1
c00286cd:	c3                   	ret    
c00286ce:	b0 00                	mov    al,0x0
c00286d0:	90                   	nop
c00286d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00286d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00286d2:	83 ec 0c             	sub    esp,0xc
c00286d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00286db:	85 c0                	test   eax,eax
c00286dd:	75 15                	jne    c00286f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00286df:	83 ec 0c             	sub    esp,0xc
c00286e2:	68 38 a1 02 c0       	push   0xc002a138
c00286e7:	e8 4b 1b ff ff       	call   c001a237 <Krnl::panic(char const*)>
c00286ec:	83 c4 10             	add    esp,0x10
c00286ef:	e9 88 00 00 00       	jmp    c002877c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286fe:	85 c0                	test   eax,eax
c0028700:	0f 95 c0             	setne  al
c0028703:	84 c0                	test   al,al
c0028705:	74 10                	je     c0028717 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028707:	83 ec 0c             	sub    esp,0xc
c002870a:	68 83 a1 02 c0       	push   0xc002a183
c002870f:	e8 23 1b ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028714:	83 c4 10             	add    esp,0x10
c0028717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871b:	8b 00                	mov    eax,DWORD PTR [eax]
c002871d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028720:	85 c0                	test   eax,eax
c0028722:	0f 94 c0             	sete   al
c0028725:	84 c0                	test   al,al
c0028727:	74 33                	je     c002875c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028737:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002873e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028742:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028745:	83 f8 01             	cmp    eax,0x1
c0028748:	74 21                	je     c002876b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002874a:	83 ec 0c             	sub    esp,0xc
c002874d:	68 5c a1 02 c0       	push   0xc002a15c
c0028752:	e8 e0 1a ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028757:	83 c4 10             	add    esp,0x10
c002875a:	eb 0f                	jmp    c002876b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002875c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028760:	8b 00                	mov    eax,DWORD PTR [eax]
c0028762:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028769:	89 10                	mov    DWORD PTR [eax],edx
c002876b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028772:	8d 50 ff             	lea    edx,[eax-0x1]
c0028775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028779:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002877c:	83 c4 0c             	add    esp,0xc
c002877f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028788:	75 10                	jne    c002879a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002878a:	83 ec 0c             	sub    esp,0xc
c002878d:	68 00 a1 02 c0       	push   0xc002a100
c0028792:	e8 a0 1a ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028797:	83 c4 10             	add    esp,0x10
c002879a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879e:	8b 00                	mov    eax,DWORD PTR [eax]
c00287a0:	85 c0                	test   eax,eax
c00287a2:	74 34                	je     c00287d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00287a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ab:	85 c0                	test   eax,eax
c00287ad:	74 29                	je     c00287d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00287af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00287bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287d6:	eb 65                	jmp    c002883d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287de:	85 c0                	test   eax,eax
c00287e0:	75 4b                	jne    c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e9:	85 c0                	test   eax,eax
c00287eb:	75 40                	jne    c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f5:	89 10                	mov    DWORD PTR [eax],edx
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028817:	85 c0                	test   eax,eax
c0028819:	74 22                	je     c002883d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002881b:	83 ec 0c             	sub    esp,0xc
c002881e:	68 22 a1 02 c0       	push   0xc002a122
c0028823:	e8 0f 1a ff ff       	call   c001a237 <Krnl::panic(char const*)>
c0028828:	83 c4 10             	add    esp,0x10
c002882b:	eb 10                	jmp    c002883d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002882d:	83 ec 0c             	sub    esp,0xc
c0028830:	68 2c a1 02 c0       	push   0xc002a12c
c0028835:	e8 fd 19 ff ff       	call   c001a237 <Krnl::panic(char const*)>
c002883a:	83 c4 10             	add    esp,0x10
c002883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028841:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028844:	8d 50 01             	lea    edx,[eax+0x1]
c0028847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884e:	90                   	nop
c002884f:	83 c4 0c             	add    esp,0xc
c0028852:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028854 <ACPI::~ACPI()>:
c0028854:	83 ec 0c             	sub    esp,0xc
c0028857:	ba 2c b2 02 c0       	mov    edx,0xc002b22c
c002885c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028860:	89 10                	mov    DWORD PTR [eax],edx
c0028862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028866:	83 ec 0c             	sub    esp,0xc
c0028869:	50                   	push   eax
c002886a:	e8 45 b6 fe ff       	call   c0013eb4 <Device::~Device()>
c002886f:	83 c4 10             	add    esp,0x10
c0028872:	90                   	nop
c0028873:	83 c4 0c             	add    esp,0xc
c0028876:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028878 <ACPI::~ACPI()>:
c0028878:	83 ec 0c             	sub    esp,0xc
c002887b:	83 ec 0c             	sub    esp,0xc
c002887e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028882:	e8 cd ff ff ff       	call   c0028854 <ACPI::~ACPI()>
c0028887:	83 c4 10             	add    esp,0x10
c002888a:	83 ec 08             	sub    esp,0x8
c002888d:	68 68 12 00 00       	push   0x1268
c0028892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028896:	e8 41 a2 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c002889b:	83 c4 10             	add    esp,0x10
c002889e:	83 c4 0c             	add    esp,0xc
c00288a1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00288a2 <CPU::~CPU()>:
c00288a2:	83 ec 0c             	sub    esp,0xc
c00288a5:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c00288aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ae:	89 10                	mov    DWORD PTR [eax],edx
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	83 ec 0c             	sub    esp,0xc
c00288b7:	50                   	push   eax
c00288b8:	e8 f7 b5 fe ff       	call   c0013eb4 <Device::~Device()>
c00288bd:	83 c4 10             	add    esp,0x10
c00288c0:	90                   	nop
c00288c1:	83 c4 0c             	add    esp,0xc
c00288c4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00288c6 <CPU::~CPU()>:
c00288c6:	83 ec 0c             	sub    esp,0xc
c00288c9:	83 ec 0c             	sub    esp,0xc
c00288cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d0:	e8 cd ff ff ff       	call   c00288a2 <CPU::~CPU()>
c00288d5:	83 c4 10             	add    esp,0x10
c00288d8:	83 ec 08             	sub    esp,0x8
c00288db:	68 98 11 00 00       	push   0x1198
c00288e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e4:	e8 f3 a1 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00288e9:	83 c4 10             	add    esp,0x10
c00288ec:	83 c4 0c             	add    esp,0xc
c00288ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00288f0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00288f0:	90                   	nop
c00288f1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00288f2 <ThreadControlBlock::ThreadControlBlock()>:
c00288f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028901:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002890c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028917:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002891e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028922:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002892e:	90                   	nop
c002892f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028930 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028930:	83 ec 0c             	sub    esp,0xc
c0028933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028941:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028957:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028961:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028973:	83 ec 0c             	sub    esp,0xc
c0028976:	68 e6 a0 02 c0       	push   0xc002a0e6
c002897b:	e8 3c a2 fe ff       	call   c0012bbc <Dbg::kprintf(char const*, ...)>
c0028980:	83 c4 10             	add    esp,0x10
c0028983:	90                   	nop
c0028984:	83 c4 0c             	add    esp,0xc
c0028987:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028988 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002898c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002898f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028990 <Vm::_FPUState::_FPUState()>:
c0028990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028994:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002899b:	90                   	nop
c002899c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002899e <PCI::~PCI()>:
c002899e:	83 ec 0c             	sub    esp,0xc
c00289a1:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c00289a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289aa:	89 10                	mov    DWORD PTR [eax],edx
c00289ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	50                   	push   eax
c00289b4:	e8 d3 ae fe ff       	call   c001388c <Bus::~Bus()>
c00289b9:	83 c4 10             	add    esp,0x10
c00289bc:	90                   	nop
c00289bd:	83 c4 0c             	add    esp,0xc
c00289c0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00289c2 <PCI::~PCI()>:
c00289c2:	83 ec 0c             	sub    esp,0xc
c00289c5:	83 ec 0c             	sub    esp,0xc
c00289c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289cc:	e8 cd ff ff ff       	call   c002899e <PCI::~PCI()>
c00289d1:	83 c4 10             	add    esp,0x10
c00289d4:	83 ec 08             	sub    esp,0x8
c00289d7:	68 58 01 00 00       	push   0x158
c00289dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e0:	e8 f7 a0 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c00289e5:	83 c4 10             	add    esp,0x10
c00289e8:	83 c4 0c             	add    esp,0xc
c00289eb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00289ec <IDE::~IDE()>:
c00289ec:	83 ec 0c             	sub    esp,0xc
c00289ef:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c00289f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f8:	89 10                	mov    DWORD PTR [eax],edx
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	83 ec 0c             	sub    esp,0xc
c0028a01:	50                   	push   eax
c0028a02:	e8 9d b9 fe ff       	call   c00143a4 <HardDiskController::~HardDiskController()>
c0028a07:	83 c4 10             	add    esp,0x10
c0028a0a:	90                   	nop
c0028a0b:	83 c4 0c             	add    esp,0xc
c0028a0e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028a10 <IDE::~IDE()>:
c0028a10:	83 ec 0c             	sub    esp,0xc
c0028a13:	83 ec 0c             	sub    esp,0xc
c0028a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a1a:	e8 cd ff ff ff       	call   c00289ec <IDE::~IDE()>
c0028a1f:	83 c4 10             	add    esp,0x10
c0028a22:	83 ec 08             	sub    esp,0x8
c0028a25:	68 70 02 00 00       	push   0x270
c0028a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a2e:	e8 a9 a0 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028a33:	83 c4 10             	add    esp,0x10
c0028a36:	83 c4 0c             	add    esp,0xc
c0028a39:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028a3a <SATABus::~SATABus()>:
c0028a3a:	83 ec 0c             	sub    esp,0xc
c0028a3d:	ba 54 ca 02 c0       	mov    edx,0xc002ca54
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	89 10                	mov    DWORD PTR [eax],edx
c0028a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4c:	83 ec 0c             	sub    esp,0xc
c0028a4f:	50                   	push   eax
c0028a50:	e8 4f b9 fe ff       	call   c00143a4 <HardDiskController::~HardDiskController()>
c0028a55:	83 c4 10             	add    esp,0x10
c0028a58:	90                   	nop
c0028a59:	83 c4 0c             	add    esp,0xc
c0028a5c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a5e <SATABus::~SATABus()>:
c0028a5e:	83 ec 0c             	sub    esp,0xc
c0028a61:	83 ec 0c             	sub    esp,0xc
c0028a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a68:	e8 cd ff ff ff       	call   c0028a3a <SATABus::~SATABus()>
c0028a6d:	83 c4 10             	add    esp,0x10
c0028a70:	83 ec 08             	sub    esp,0x8
c0028a73:	68 64 01 00 00       	push   0x164
c0028a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a7c:	e8 5b a0 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028a81:	83 c4 10             	add    esp,0x10
c0028a84:	83 c4 0c             	add    esp,0xc
c0028a87:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a88 <ATA::~ATA()>:
c0028a88:	83 ec 0c             	sub    esp,0xc
c0028a8b:	ba a0 ca 02 c0       	mov    edx,0xc002caa0
c0028a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a94:	89 10                	mov    DWORD PTR [eax],edx
c0028a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9a:	83 ec 0c             	sub    esp,0xc
c0028a9d:	50                   	push   eax
c0028a9e:	e8 f3 b9 fe ff       	call   c0014496 <PhysicalDisk::~PhysicalDisk()>
c0028aa3:	83 c4 10             	add    esp,0x10
c0028aa6:	90                   	nop
c0028aa7:	83 c4 0c             	add    esp,0xc
c0028aaa:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028aac <ATA::~ATA()>:
c0028aac:	83 ec 0c             	sub    esp,0xc
c0028aaf:	83 ec 0c             	sub    esp,0xc
c0028ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ab6:	e8 cd ff ff ff       	call   c0028a88 <ATA::~ATA()>
c0028abb:	83 c4 10             	add    esp,0x10
c0028abe:	83 ec 08             	sub    esp,0x8
c0028ac1:	68 7c 01 00 00       	push   0x17c
c0028ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aca:	e8 0d a0 fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028acf:	83 c4 10             	add    esp,0x10
c0028ad2:	83 c4 0c             	add    esp,0xc
c0028ad5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ad6 <ATAPI::~ATAPI()>:
c0028ad6:	83 ec 0c             	sub    esp,0xc
c0028ad9:	ba d8 ca 02 c0       	mov    edx,0xc002cad8
c0028ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae2:	89 10                	mov    DWORD PTR [eax],edx
c0028ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae8:	83 ec 0c             	sub    esp,0xc
c0028aeb:	50                   	push   eax
c0028aec:	e8 a5 b9 fe ff       	call   c0014496 <PhysicalDisk::~PhysicalDisk()>
c0028af1:	83 c4 10             	add    esp,0x10
c0028af4:	90                   	nop
c0028af5:	83 c4 0c             	add    esp,0xc
c0028af8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028afa <ATAPI::~ATAPI()>:
c0028afa:	83 ec 0c             	sub    esp,0xc
c0028afd:	83 ec 0c             	sub    esp,0xc
c0028b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b04:	e8 cd ff ff ff       	call   c0028ad6 <ATAPI::~ATAPI()>
c0028b09:	83 c4 10             	add    esp,0x10
c0028b0c:	83 ec 08             	sub    esp,0x8
c0028b0f:	68 80 01 00 00       	push   0x180
c0028b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b18:	e8 bf 9f fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028b1d:	83 c4 10             	add    esp,0x10
c0028b20:	83 c4 0c             	add    esp,0xc
c0028b23:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028b24 <SATA::~SATA()>:
c0028b24:	83 ec 0c             	sub    esp,0xc
c0028b27:	ba 8c cb 02 c0       	mov    edx,0xc002cb8c
c0028b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b30:	89 10                	mov    DWORD PTR [eax],edx
c0028b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b36:	83 ec 0c             	sub    esp,0xc
c0028b39:	50                   	push   eax
c0028b3a:	e8 57 b9 fe ff       	call   c0014496 <PhysicalDisk::~PhysicalDisk()>
c0028b3f:	83 c4 10             	add    esp,0x10
c0028b42:	90                   	nop
c0028b43:	83 c4 0c             	add    esp,0xc
c0028b46:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028b48 <SATA::~SATA()>:
c0028b48:	83 ec 0c             	sub    esp,0xc
c0028b4b:	83 ec 0c             	sub    esp,0xc
c0028b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b52:	e8 cd ff ff ff       	call   c0028b24 <SATA::~SATA()>
c0028b57:	83 c4 10             	add    esp,0x10
c0028b5a:	83 ec 08             	sub    esp,0x8
c0028b5d:	68 7c 01 00 00       	push   0x17c
c0028b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b66:	e8 71 9f fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028b6b:	83 c4 10             	add    esp,0x10
c0028b6e:	83 c4 0c             	add    esp,0xc
c0028b71:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b72 <SATAPI::~SATAPI()>:
c0028b72:	83 ec 0c             	sub    esp,0xc
c0028b75:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c0028b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7e:	89 10                	mov    DWORD PTR [eax],edx
c0028b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b84:	83 ec 0c             	sub    esp,0xc
c0028b87:	50                   	push   eax
c0028b88:	e8 09 b9 fe ff       	call   c0014496 <PhysicalDisk::~PhysicalDisk()>
c0028b8d:	83 c4 10             	add    esp,0x10
c0028b90:	90                   	nop
c0028b91:	83 c4 0c             	add    esp,0xc
c0028b94:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b96 <SATAPI::~SATAPI()>:
c0028b96:	83 ec 0c             	sub    esp,0xc
c0028b99:	83 ec 0c             	sub    esp,0xc
c0028b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba0:	e8 cd ff ff ff       	call   c0028b72 <SATAPI::~SATAPI()>
c0028ba5:	83 c4 10             	add    esp,0x10
c0028ba8:	83 ec 08             	sub    esp,0x8
c0028bab:	68 80 01 00 00       	push   0x180
c0028bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb4:	e8 23 9f fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028bb9:	83 c4 10             	add    esp,0x10
c0028bbc:	83 c4 0c             	add    esp,0xc
c0028bbf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028bc0 <AVX::~AVX()>:
c0028bc0:	83 ec 0c             	sub    esp,0xc
c0028bc3:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	89 10                	mov    DWORD PTR [eax],edx
c0028bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd2:	83 ec 0c             	sub    esp,0xc
c0028bd5:	50                   	push   eax
c0028bd6:	e8 3f b9 fe ff       	call   c001451a <FPU::~FPU()>
c0028bdb:	83 c4 10             	add    esp,0x10
c0028bde:	90                   	nop
c0028bdf:	83 c4 0c             	add    esp,0xc
c0028be2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028be4 <AVX::~AVX()>:
c0028be4:	83 ec 0c             	sub    esp,0xc
c0028be7:	83 ec 0c             	sub    esp,0xc
c0028bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bee:	e8 cd ff ff ff       	call   c0028bc0 <AVX::~AVX()>
c0028bf3:	83 c4 10             	add    esp,0x10
c0028bf6:	83 ec 08             	sub    esp,0x8
c0028bf9:	68 58 01 00 00       	push   0x158
c0028bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c02:	e8 d5 9e fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	83 c4 0c             	add    esp,0xc
c0028c0d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028c0e <MMX::~MMX()>:
c0028c0e:	83 ec 0c             	sub    esp,0xc
c0028c11:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c0028c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1a:	89 10                	mov    DWORD PTR [eax],edx
c0028c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c20:	83 ec 0c             	sub    esp,0xc
c0028c23:	50                   	push   eax
c0028c24:	e8 f1 b8 fe ff       	call   c001451a <FPU::~FPU()>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	90                   	nop
c0028c2d:	83 c4 0c             	add    esp,0xc
c0028c30:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028c32 <MMX::~MMX()>:
c0028c32:	83 ec 0c             	sub    esp,0xc
c0028c35:	83 ec 0c             	sub    esp,0xc
c0028c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c3c:	e8 cd ff ff ff       	call   c0028c0e <MMX::~MMX()>
c0028c41:	83 c4 10             	add    esp,0x10
c0028c44:	83 ec 08             	sub    esp,0x8
c0028c47:	68 58 01 00 00       	push   0x158
c0028c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c50:	e8 87 9e fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	83 c4 0c             	add    esp,0xc
c0028c5b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c5c <SSE::~SSE()>:
c0028c5c:	83 ec 0c             	sub    esp,0xc
c0028c5f:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0028c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c68:	89 10                	mov    DWORD PTR [eax],edx
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	83 ec 0c             	sub    esp,0xc
c0028c71:	50                   	push   eax
c0028c72:	e8 a3 b8 fe ff       	call   c001451a <FPU::~FPU()>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	90                   	nop
c0028c7b:	83 c4 0c             	add    esp,0xc
c0028c7e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c80 <SSE::~SSE()>:
c0028c80:	83 ec 0c             	sub    esp,0xc
c0028c83:	83 ec 0c             	sub    esp,0xc
c0028c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8a:	e8 cd ff ff ff       	call   c0028c5c <SSE::~SSE()>
c0028c8f:	83 c4 10             	add    esp,0x10
c0028c92:	83 ec 08             	sub    esp,0x8
c0028c95:	68 58 01 00 00       	push   0x158
c0028c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c9e:	e8 39 9e fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	83 c4 0c             	add    esp,0xc
c0028ca9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028caa <x87::~x87()>:
c0028caa:	83 ec 0c             	sub    esp,0xc
c0028cad:	ba 68 cd 02 c0       	mov    edx,0xc002cd68
c0028cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb6:	89 10                	mov    DWORD PTR [eax],edx
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	83 ec 0c             	sub    esp,0xc
c0028cbf:	50                   	push   eax
c0028cc0:	e8 55 b8 fe ff       	call   c001451a <FPU::~FPU()>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	90                   	nop
c0028cc9:	83 c4 0c             	add    esp,0xc
c0028ccc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028cce <x87::~x87()>:
c0028cce:	83 ec 0c             	sub    esp,0xc
c0028cd1:	83 ec 0c             	sub    esp,0xc
c0028cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd8:	e8 cd ff ff ff       	call   c0028caa <x87::~x87()>
c0028cdd:	83 c4 10             	add    esp,0x10
c0028ce0:	83 ec 08             	sub    esp,0x8
c0028ce3:	68 58 01 00 00       	push   0x158
c0028ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cec:	e8 eb 9d fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	83 c4 0c             	add    esp,0xc
c0028cf7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028cf8 <IOAPIC::~IOAPIC()>:
c0028cf8:	83 ec 0c             	sub    esp,0xc
c0028cfb:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0028d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d04:	89 10                	mov    DWORD PTR [eax],edx
c0028d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0a:	83 ec 0c             	sub    esp,0xc
c0028d0d:	50                   	push   eax
c0028d0e:	e8 a1 b1 fe ff       	call   c0013eb4 <Device::~Device()>
c0028d13:	83 c4 10             	add    esp,0x10
c0028d16:	90                   	nop
c0028d17:	83 c4 0c             	add    esp,0xc
c0028d1a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028d1c <IOAPIC::~IOAPIC()>:
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	83 ec 0c             	sub    esp,0xc
c0028d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d26:	e8 cd ff ff ff       	call   c0028cf8 <IOAPIC::~IOAPIC()>
c0028d2b:	83 c4 10             	add    esp,0x10
c0028d2e:	83 ec 08             	sub    esp,0x8
c0028d31:	68 68 01 00 00       	push   0x168
c0028d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3a:	e8 9d 9d fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	83 c4 0c             	add    esp,0xc
c0028d45:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028d46 <APIC::~APIC()>:
c0028d46:	83 ec 0c             	sub    esp,0xc
c0028d49:	ba 78 ce 02 c0       	mov    edx,0xc002ce78
c0028d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d52:	89 10                	mov    DWORD PTR [eax],edx
c0028d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d58:	83 ec 0c             	sub    esp,0xc
c0028d5b:	50                   	push   eax
c0028d5c:	e8 83 bc fe ff       	call   c00149e4 <InterruptController::~InterruptController()>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	90                   	nop
c0028d65:	83 c4 0c             	add    esp,0xc
c0028d68:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d6a <APIC::~APIC()>:
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	83 ec 0c             	sub    esp,0xc
c0028d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d74:	e8 cd ff ff ff       	call   c0028d46 <APIC::~APIC()>
c0028d79:	83 c4 10             	add    esp,0x10
c0028d7c:	83 ec 08             	sub    esp,0x8
c0028d7f:	68 58 21 00 00       	push   0x2158
c0028d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d88:	e8 4f 9d fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	83 c4 0c             	add    esp,0xc
c0028d93:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d94 <PIC::~PIC()>:
c0028d94:	83 ec 0c             	sub    esp,0xc
c0028d97:	ba 10 cf 02 c0       	mov    edx,0xc002cf10
c0028d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da0:	89 10                	mov    DWORD PTR [eax],edx
c0028da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da6:	83 ec 0c             	sub    esp,0xc
c0028da9:	50                   	push   eax
c0028daa:	e8 35 bc fe ff       	call   c00149e4 <InterruptController::~InterruptController()>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	90                   	nop
c0028db3:	83 c4 0c             	add    esp,0xc
c0028db6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028db8 <PIC::~PIC()>:
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	83 ec 0c             	sub    esp,0xc
c0028dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc2:	e8 cd ff ff ff       	call   c0028d94 <PIC::~PIC()>
c0028dc7:	83 c4 10             	add    esp,0x10
c0028dca:	83 ec 08             	sub    esp,0x8
c0028dcd:	68 58 21 00 00       	push   0x2158
c0028dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd6:	e8 01 9d fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	83 c4 0c             	add    esp,0xc
c0028de1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028de2 <APICTimer::~APICTimer()>:
c0028de2:	83 ec 0c             	sub    esp,0xc
c0028de5:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0028dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dee:	89 10                	mov    DWORD PTR [eax],edx
c0028df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df4:	83 ec 0c             	sub    esp,0xc
c0028df7:	50                   	push   eax
c0028df8:	e8 0d db fe ff       	call   c001690a <Timer::~Timer()>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	90                   	nop
c0028e01:	83 c4 0c             	add    esp,0xc
c0028e04:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028e06 <APICTimer::~APICTimer()>:
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	83 ec 0c             	sub    esp,0xc
c0028e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e10:	e8 cd ff ff ff       	call   c0028de2 <APICTimer::~APICTimer()>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	83 ec 08             	sub    esp,0x8
c0028e1b:	68 60 01 00 00       	push   0x160
c0028e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e24:	e8 b3 9c fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	83 c4 0c             	add    esp,0xc
c0028e2f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028e30 <PIT::~PIT()>:
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0028e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3c:	89 10                	mov    DWORD PTR [eax],edx
c0028e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	50                   	push   eax
c0028e46:	e8 bf da fe ff       	call   c001690a <Timer::~Timer()>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	90                   	nop
c0028e4f:	83 c4 0c             	add    esp,0xc
c0028e52:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028e54 <PIT::~PIT()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	83 ec 0c             	sub    esp,0xc
c0028e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5e:	e8 cd ff ff ff       	call   c0028e30 <PIT::~PIT()>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	83 ec 08             	sub    esp,0x8
c0028e69:	68 5c 01 00 00       	push   0x15c
c0028e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e72:	e8 65 9c fe ff       	call   c0012adc <operator delete(void*, unsigned long)>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	83 c4 0c             	add    esp,0xc
c0028e7d:	c3                   	ret    
